==> start whole compile: initialize FuncId(55) self_class:Vec start:[00000] bytecode:0x563c6d99e5c0
<== finished compile. elapsed:14.4µs
offset:Pos(12241) code: 126 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x48],0x4
  00010: mov    rdi,QWORD PTR [rbp-0x28]
  00014: test   rdi,0x7
  0001b: jne    0x3d59b
  00021: cmp    DWORD PTR [rdi+0x4],0x25
  00025: jne    0x3d59b
:00000 @x: Vec[IvarId(0)] = %1
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: cmp    WORD PTR [rdi+0x2],0x3
  00034: jne    0x3d5aa
  0003a: mov    rax,QWORD PTR [rbp-0x30]
  0003e: mov    QWORD PTR [rdi+0x10],rax
:00001 @y: Vec[IvarId(1)] = %2
  00042: mov    rdi,QWORD PTR [rbp-0x28]
  00046: cmp    WORD PTR [rdi+0x2],0x3
  0004b: jne    0x3d5c4
  00051: mov    rax,QWORD PTR [rbp-0x38]
  00055: mov    QWORD PTR [rdi+0x18],rax
:00002 @z: Vec[IvarId(2)] = %3
  00059: mov    rdi,QWORD PTR [rbp-0x28]
  0005d: cmp    WORD PTR [rdi+0x2],0x3
  00062: jne    0x3d5de
  00068: mov    rax,QWORD PTR [rbp-0x40]
  0006c: mov    QWORD PTR [rdi+0x20],rax
:00003 %4 = %3
  00070: mov    rax,QWORD PTR [rbp-0x40]
  00074: mov    QWORD PTR [rbp-0x48],rax
:00004 ret %4
  00078: mov    rax,QWORD PTR [rbp-0x48]
  0007c: leave  
  0007d: ret    
==> start whole compile: vdot FuncId(59) self_class:Vec start:[00000] bytecode:0x563c6da0c010
<== finished compile. elapsed:31.5µs
offset:Pos(14173) code: 1113 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x3ce6c
  0002c: cmp    DWORD PTR [rdi+0x4],0x25
  00030: jne    0x3ce6c
:00000 %2 = @x: Vec[IvarId(0)]
  00036: mov    rdi,QWORD PTR [rbp-0x28]
  0003a: cmp    WORD PTR [rdi+0x2],0x3
  0003f: jne    0x3ce7b
  00045: mov    rax,QWORD PTR [rdi+0x10]
  00049: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = %1.call x()                     [Vec]
:00002 
  0004d: mov    rdi,QWORD PTR [rbp-0x30]
  00051: test   rdi,0x7
  00058: jne    0x3ce91
  0005e: cmp    DWORD PTR [rdi+0x4],0x25
  00062: jne    0x3ce91
  00068: cmp    DWORD PTR [rip+0xfffffffffffff248],0x26        # 0xfffff2b7
  0006f: jne    0x3ce91
  00075: mov    esi,DWORD PTR [rip+0x3e2]        # 0x45d
  0007b: cmp    esi,0xffffffff
  0007e: je     0x3cea0
  00084: cmp    WORD PTR [rdi+0x2],0x3
  00089: jne    0xa2
  0008f: cmp    esi,0x6
  00092: jge    0xa2
  00098: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0009d: jmp    0xae
  000a2: movabs rax,0x563c6be0f180
  000ac: call   rax
  000ae: mov    QWORD PTR [rbp-0x40],rax
:00004 %2 = %2 * %3                         [Float][Float]
  000b2: mov    rdi,QWORD PTR [rbp-0x38]
  000b6: test   rdi,0x1
  000bd: jne    0x3cec9
  000c3: test   rdi,0x2
  000ca: je     0x106
  000d0: xorps  xmm2,xmm2
  000d3: movabs rax,0x8000000000000002
  000dd: cmp    rdi,rax
  000e0: je     0x118
  000e6: mov    rax,rdi
  000e9: sar    rax,0x3f
  000ed: add    rax,0x2
  000f1: and    rdi,0xfffffffffffffffc
  000f5: or     rdi,rax
  000f8: rol    rdi,0x3d
  000fc: movq   xmm2,rdi
  00101: jmp    0x118
  00106: call   0xffffc917
  0010b: test   rax,rax
  0010e: je     0x3cec9
  00114: movq   xmm2,xmm0
  00118: mov    rdi,QWORD PTR [rbp-0x40]
  0011c: test   rdi,0x1
  00123: jne    0x3ced8
  00129: test   rdi,0x2
  00130: je     0x16c
  00136: xorps  xmm3,xmm3
  00139: movabs rax,0x8000000000000002
  00143: cmp    rdi,rax
  00146: je     0x17e
  0014c: mov    rax,rdi
  0014f: sar    rax,0x3f
  00153: add    rax,0x2
  00157: and    rdi,0xfffffffffffffffc
  0015b: or     rdi,rax
  0015e: rol    rdi,0x3d
  00162: movq   xmm3,rdi
  00167: jmp    0x17e
  0016c: call   0xffffc917
  00171: test   rax,rax
  00174: je     0x3ced8
  0017a: movq   xmm3,xmm0
  0017e: mulsd  xmm2,xmm3
:00005 %3 = @y: Vec[IvarId(1)]
  00182: mov    rdi,QWORD PTR [rbp-0x28]
  00186: cmp    WORD PTR [rdi+0x2],0x3
  0018b: jne    0x3cee7
  00191: mov    rax,QWORD PTR [rdi+0x18]
  00195: mov    QWORD PTR [rbp-0x40],rax
:00006 %4 = %1.call y()                     [Vec]
:00007 
  00199: mov    rdi,QWORD PTR [rbp-0x30]
  0019d: test   rdi,0x7
  001a4: jne    0x3cf0f
  001aa: cmp    DWORD PTR [rdi+0x4],0x25
  001ae: jne    0x3cf0f
  001b4: cmp    DWORD PTR [rip+0xfffffffffffff0fc],0x26        # 0xfffff2b7
  001bb: jne    0x3cf0f
  001c1: mov    esi,DWORD PTR [rip+0x29e]        # 0x465
  001c7: cmp    esi,0xffffffff
  001ca: je     0x3cf2b
  001d0: cmp    WORD PTR [rdi+0x2],0x3
  001d5: jne    0x1ee
  001db: cmp    esi,0x6
  001de: jge    0x1ee
  001e4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001e9: jmp    0x20c
  001ee: sub    rsp,0x10
  001f2: movq   QWORD PTR [rsp],xmm2
  001f7: movabs rax,0x563c6be0f180
  00201: call   rax
  00203: movq   xmm2,QWORD PTR [rsp]
  00208: add    rsp,0x10
  0020c: mov    QWORD PTR [rbp-0x48],rax
:00009 %3 = %3 * %4                         [Float][Float]
  00210: mov    rdi,QWORD PTR [rbp-0x40]
  00214: test   rdi,0x1
  0021b: jne    0x3cf66
  00221: test   rdi,0x2
  00228: je     0x264
  0022e: xorps  xmm3,xmm3
  00231: movabs rax,0x8000000000000002
  0023b: cmp    rdi,rax
  0023e: je     0x276
  00244: mov    rax,rdi
  00247: sar    rax,0x3f
  0024b: add    rax,0x2
  0024f: and    rdi,0xfffffffffffffffc
  00253: or     rdi,rax
  00256: rol    rdi,0x3d
  0025a: movq   xmm3,rdi
  0025f: jmp    0x276
  00264: call   0xffffc917
  00269: test   rax,rax
  0026c: je     0x3cf66
  00272: movq   xmm3,xmm0
  00276: mov    rdi,QWORD PTR [rbp-0x48]
  0027a: test   rdi,0x1
  00281: jne    0x3cf82
  00287: test   rdi,0x2
  0028e: je     0x2ca
  00294: xorps  xmm4,xmm4
  00297: movabs rax,0x8000000000000002
  002a1: cmp    rdi,rax
  002a4: je     0x2dc
  002aa: mov    rax,rdi
  002ad: sar    rax,0x3f
  002b1: add    rax,0x2
  002b5: and    rdi,0xfffffffffffffffc
  002b9: or     rdi,rax
  002bc: rol    rdi,0x3d
  002c0: movq   xmm4,rdi
  002c5: jmp    0x2dc
  002ca: call   0xffffc917
  002cf: test   rax,rax
  002d2: je     0x3cf82
  002d8: movq   xmm4,xmm0
  002dc: mulsd  xmm3,xmm4
:00010 %2 = %2 + %3                         [Float][Float]
  002e0: addsd  xmm2,xmm3
:00011 %3 = @z: Vec[IvarId(2)]
  002e4: mov    rdi,QWORD PTR [rbp-0x28]
  002e8: cmp    WORD PTR [rdi+0x2],0x3
  002ed: jne    0x3cf9e
  002f3: mov    rax,QWORD PTR [rdi+0x20]
  002f7: mov    QWORD PTR [rbp-0x40],rax
:00012 %4 = %1.call z()                     [Vec]
:00013 
  002fb: mov    rdi,QWORD PTR [rbp-0x30]
  002ff: test   rdi,0x7
  00306: jne    0x3cfd2
  0030c: cmp    DWORD PTR [rdi+0x4],0x25
  00310: jne    0x3cfd2
  00316: cmp    DWORD PTR [rip+0xffffffffffffef9a],0x26        # 0xfffff2b7
  0031d: jne    0x3cfd2
  00323: mov    esi,DWORD PTR [rip+0x144]        # 0x46d
  00329: cmp    esi,0xffffffff
  0032c: je     0x3cfee
  00332: cmp    WORD PTR [rdi+0x2],0x3
  00337: jne    0x350
  0033d: cmp    esi,0x6
  00340: jge    0x350
  00346: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0034b: jmp    0x36e
  00350: sub    rsp,0x10
  00354: movq   QWORD PTR [rsp],xmm2
  00359: movabs rax,0x563c6be0f180
  00363: call   rax
  00365: movq   xmm2,QWORD PTR [rsp]
  0036a: add    rsp,0x10
  0036e: mov    QWORD PTR [rbp-0x48],rax
:00015 %3 = %3 * %4                         [Float][Float]
  00372: mov    rdi,QWORD PTR [rbp-0x40]
  00376: test   rdi,0x1
  0037d: jne    0x3d029
  00383: test   rdi,0x2
  0038a: je     0x3c6
  00390: xorps  xmm3,xmm3
  00393: movabs rax,0x8000000000000002
  0039d: cmp    rdi,rax
  003a0: je     0x3d8
  003a6: mov    rax,rdi
  003a9: sar    rax,0x3f
  003ad: add    rax,0x2
  003b1: and    rdi,0xfffffffffffffffc
  003b5: or     rdi,rax
  003b8: rol    rdi,0x3d
  003bc: movq   xmm3,rdi
  003c1: jmp    0x3d8
  003c6: call   0xffffc917
  003cb: test   rax,rax
  003ce: je     0x3d029
  003d4: movq   xmm3,xmm0
  003d8: mov    rdi,QWORD PTR [rbp-0x48]
  003dc: test   rdi,0x1
  003e3: jne    0x3d045
  003e9: test   rdi,0x2
  003f0: je     0x42c
  003f6: xorps  xmm4,xmm4
  003f9: movabs rax,0x8000000000000002
  00403: cmp    rdi,rax
  00406: je     0x43e
  0040c: mov    rax,rdi
  0040f: sar    rax,0x3f
  00413: add    rax,0x2
  00417: and    rdi,0xfffffffffffffffc
  0041b: or     rdi,rax
  0041e: rol    rdi,0x3d
  00422: movq   xmm4,rdi
  00427: jmp    0x43e
  0042c: call   0xffffc917
  00431: test   rax,rax
  00434: je     0x3d045
  0043a: movq   xmm4,xmm0
  0043e: mulsd  xmm3,xmm4
:00016 %2 = %2 + %3                         [Float][Float]
  00442: addsd  xmm2,xmm3
:00017 ret %2
  00446: movq   xmm0,xmm2
  0044a: call   0xffffca0a
  0044f: mov    QWORD PTR [rbp-0x38],rax
  00453: mov    rax,QWORD PTR [rbp-0x38]
  00457: leave  
  00458: ret    
==> start whole compile: intersect FuncId(63) self_class:Sphere start:[00000] bytecode:0x563c6d9c26a0
<== finished compile. elapsed:99.5µs
offset:Pos(15456) code: 3311 bytes  data: 201 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0xb0
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x40],rax
  00016: mov    QWORD PTR [rbp-0x48],rax
  0001a: mov    QWORD PTR [rbp-0x50],rax
  0001e: mov    QWORD PTR [rbp-0x58],rax
  00022: mov    QWORD PTR [rbp-0x60],rax
  00026: mov    QWORD PTR [rbp-0x68],rax
  0002a: mov    QWORD PTR [rbp-0x70],rax
  0002e: mov    QWORD PTR [rbp-0x78],rax
  00032: mov    QWORD PTR [rbp-0x80],rax
  00036: mov    QWORD PTR [rbp-0x88],rax
  0003d: mov    QWORD PTR [rbp-0x90],rax
  00044: mov    QWORD PTR [rbp-0x98],rax
  0004b: mov    QWORD PTR [rbp-0xa0],rax
  00052: mov    rdi,QWORD PTR [rbp-0x28]
  00056: test   rdi,0x7
  0005d: jne    0x3cb5e
  00063: cmp    DWORD PTR [rdi+0x4],0x27
  00067: jne    0x3cb5e
:00000 %9 = %1.call org()                   [Ray]
:00001 
  0006d: mov    rdi,QWORD PTR [rbp-0x30]
  00071: test   rdi,0x7
  00078: jne    0x3cb6d
  0007e: cmp    DWORD PTR [rdi+0x4],0x2b
  00082: jne    0x3cb6d
  00088: cmp    DWORD PTR [rip+0xffffffffffffed25],0x26        # 0xffffedb4
  0008f: jne    0x3cb6d
  00095: mov    esi,DWORD PTR [rip+0xc58]        # 0xcf3
  0009b: cmp    esi,0xffffffff
  0009e: je     0x3cb7c
  000a4: cmp    WORD PTR [rdi+0x2],0x3
  000a9: jne    0xc2
  000af: cmp    esi,0x6
  000b2: jge    0xc2
  000b8: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000bd: jmp    0xce
  000c2: movabs rax,0x563c6be0f180
  000cc: call   rax
  000ce: mov    QWORD PTR [rbp-0x70],rax
:00003 %10 = @center: Sphere[IvarId(0)]
  000d2: mov    rdi,QWORD PTR [rbp-0x28]
  000d6: cmp    WORD PTR [rdi+0x2],0x3
  000db: jne    0x3cba5
  000e1: mov    rax,QWORD PTR [rdi+0x10]
  000e5: mov    QWORD PTR [rbp-0x78],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
:00005 
  000e9: mov    rdi,QWORD PTR [rbp-0x70]
  000ed: test   rdi,0x7
  000f4: jne    0x3cbbb
  000fa: cmp    DWORD PTR [rdi+0x4],0x25
  000fe: jne    0x3cbbb
  00104: cmp    DWORD PTR [rip+0xffffffffffffeca9],0x26        # 0xffffedb4
  0010b: jne    0x3cbbb
  00111: mov    rax,QWORD PTR [rbx]
  00114: lea    rdi,[rsp-0x18]
  00119: mov    QWORD PTR [rdi],rax
  0011c: mov    QWORD PTR [rbx],rdi
  0011f: mov    QWORD PTR [rsp-0x20],0x0
  00128: mov    QWORD PTR [rsp-0x38],rcx
  0012d: mov    rax,QWORD PTR [rbp-0x70]
  00131: mov    QWORD PTR [rsp-0x38],rax
  00136: mov    rdi,0x1
  0013d: mov    rax,QWORD PTR [rbp-0x78]
  00141: mov    QWORD PTR [rsp-0x40],rax
  00146: mov    QWORD PTR [rsp-0x30],0x0
  0014f: movabs rax,0x800000039
  00159: mov    QWORD PTR [rsp-0x28],rax
  0015e: movabs r13,0x563c6d9c9fb0
  00168: call   0xfffffa13
  0016d: lea    rdi,[rbp-0x8]
  00171: mov    QWORD PTR [rbx],rdi
  00174: movabs r13,0x563c6d9c2700
  0017e: test   rax,rax
  00181: je     0xffffc3db
  00187: mov    QWORD PTR [rbp-0x40],rax
:00007 %9 = %1.call dir()                   [Ray]
:00008 
  0018b: mov    rdi,QWORD PTR [rbp-0x30]
  0018f: test   rdi,0x7
  00196: jne    0x3cbca
  0019c: cmp    DWORD PTR [rdi+0x4],0x2b
  001a0: jne    0x3cbca
  001a6: cmp    DWORD PTR [rip+0xffffffffffffec07],0x26        # 0xffffedb4
  001ad: jne    0x3cbca
  001b3: mov    esi,DWORD PTR [rip+0xb42]        # 0xcfb
  001b9: cmp    esi,0xffffffff
  001bc: je     0x3cbd9
  001c2: cmp    WORD PTR [rdi+0x2],0x3
  001c7: jne    0x1e0
  001cd: cmp    esi,0x6
  001d0: jge    0x1e0
  001d6: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001db: jmp    0x1ec
  001e0: movabs rax,0x563c6be0f180
  001ea: call   rax
  001ec: mov    QWORD PTR [rbp-0x70],rax
:00010 %4 = %3.call vdot(%9; 1)             [Vec]
:00011 
  001f0: mov    rdi,QWORD PTR [rbp-0x40]
  001f4: test   rdi,0x7
  001fb: jne    0x3cc02
  00201: cmp    DWORD PTR [rdi+0x4],0x25
  00205: jne    0x3cc02
  0020b: cmp    DWORD PTR [rip+0xffffffffffffeba2],0x26        # 0xffffedb4
  00212: jne    0x3cc02
  00218: mov    rax,QWORD PTR [rbx]
  0021b: lea    rdi,[rsp-0x18]
  00220: mov    QWORD PTR [rdi],rax
  00223: mov    QWORD PTR [rbx],rdi
  00226: mov    QWORD PTR [rsp-0x20],0x0
  0022f: mov    QWORD PTR [rsp-0x38],rcx
  00234: mov    rax,QWORD PTR [rbp-0x40]
  00238: mov    QWORD PTR [rsp-0x38],rax
  0023d: mov    rdi,0x1
  00244: mov    rax,QWORD PTR [rbp-0x70]
  00248: mov    QWORD PTR [rsp-0x40],rax
  0024d: mov    QWORD PTR [rsp-0x30],0x0
  00256: movabs rax,0x50000003b
  00260: mov    QWORD PTR [rsp-0x28],rax
  00265: movabs r13,0x563c6da0c010
  0026f: call   0xfffffaa5
  00274: lea    rdi,[rbp-0x8]
  00278: mov    QWORD PTR [rbx],rdi
  0027b: movabs r13,0x563c6d9c2760
  00285: test   rax,rax
  00288: je     0xffffc3db
  0028e: mov    QWORD PTR [rbp-0x48],rax
:00013 %10 = %3
  00292: mov    rax,QWORD PTR [rbp-0x40]
  00296: mov    QWORD PTR [rbp-0x78],rax
:00014 %9 = %3.call vdot(%10; 1)            [Vec]
:00015 
  0029a: mov    rdi,QWORD PTR [rbp-0x40]
  0029e: test   rdi,0x7
  002a5: jne    0x3cc11
  002ab: cmp    DWORD PTR [rdi+0x4],0x25
  002af: jne    0x3cc11
  002b5: cmp    DWORD PTR [rip+0xffffffffffffeaf8],0x26        # 0xffffedb4
  002bc: jne    0x3cc11
  002c2: mov    rax,QWORD PTR [rbx]
  002c5: lea    rdi,[rsp-0x18]
  002ca: mov    QWORD PTR [rdi],rax
  002cd: mov    QWORD PTR [rbx],rdi
  002d0: mov    QWORD PTR [rsp-0x20],0x0
  002d9: mov    QWORD PTR [rsp-0x38],rcx
  002de: mov    rax,QWORD PTR [rbp-0x40]
  002e2: mov    QWORD PTR [rsp-0x38],rax
  002e7: mov    rdi,0x1
  002ee: mov    rax,QWORD PTR [rbp-0x78]
  002f2: mov    QWORD PTR [rsp-0x40],rax
  002f7: mov    QWORD PTR [rsp-0x30],0x0
  00300: movabs rax,0x50000003b
  0030a: mov    QWORD PTR [rsp-0x28],rax
  0030f: movabs r13,0x563c6da0c010
  00319: call   0xfffffaa5
  0031e: lea    rdi,[rbp-0x8]
  00322: mov    QWORD PTR [rbx],rdi
  00325: movabs r13,0x563c6d9c27a0
  0032f: test   rax,rax
  00332: je     0xffffc3db
  00338: mov    QWORD PTR [rbp-0x70],rax
:00017 %10 = @radius: Sphere[IvarId(1)]
  0033c: mov    rdi,QWORD PTR [rbp-0x28]
  00340: cmp    WORD PTR [rdi+0x2],0x3
  00345: jne    0x3cc20
  0034b: mov    rax,QWORD PTR [rdi+0x18]
  0034f: mov    QWORD PTR [rbp-0x78],rax
:00018 %11 = @radius: Sphere[IvarId(1)]
  00353: mov    rdi,QWORD PTR [rbp-0x28]
  00357: cmp    WORD PTR [rdi+0x2],0x3
  0035c: jne    0x3cc36
  00362: mov    rax,QWORD PTR [rdi+0x18]
  00366: mov    QWORD PTR [rbp-0x80],rax
:00019 %10 = %10 * %11                      [Float][Float]
  0036a: mov    rdi,QWORD PTR [rbp-0x78]
  0036e: test   rdi,0x1
  00375: jne    0x3cc4c
  0037b: test   rdi,0x2
  00382: je     0x3be
  00388: xorps  xmm2,xmm2
  0038b: movabs rax,0x8000000000000002
  00395: cmp    rdi,rax
  00398: je     0x3d0
  0039e: mov    rax,rdi
  003a1: sar    rax,0x3f
  003a5: add    rax,0x2
  003a9: and    rdi,0xfffffffffffffffc
  003ad: or     rdi,rax
  003b0: rol    rdi,0x3d
  003b4: movq   xmm2,rdi
  003b9: jmp    0x3d0
  003be: call   0xffffc414
  003c3: test   rax,rax
  003c6: je     0x3cc4c
  003cc: movq   xmm2,xmm0
  003d0: mov    rdi,QWORD PTR [rbp-0x80]
  003d4: test   rdi,0x1
  003db: jne    0x3cc5b
  003e1: test   rdi,0x2
  003e8: je     0x424
  003ee: xorps  xmm3,xmm3
  003f1: movabs rax,0x8000000000000002
  003fb: cmp    rdi,rax
  003fe: je     0x436
  00404: mov    rax,rdi
  00407: sar    rax,0x3f
  0040b: add    rax,0x2
  0040f: and    rdi,0xfffffffffffffffc
  00413: or     rdi,rax
  00416: rol    rdi,0x3d
  0041a: movq   xmm3,rdi
  0041f: jmp    0x436
  00424: call   0xffffc414
  00429: test   rax,rax
  0042c: je     0x3cc5b
  00432: movq   xmm3,xmm0
  00436: mulsd  xmm2,xmm3
:00020 %5 = %9 - %10                        [Float][Float]
  0043a: mov    rdi,QWORD PTR [rbp-0x70]
  0043e: test   rdi,0x1
  00445: jne    0x3cc6a
  0044b: test   rdi,0x2
  00452: je     0x48e
  00458: xorps  xmm4,xmm4
  0045b: movabs rax,0x8000000000000002
  00465: cmp    rdi,rax
  00468: je     0x4a0
  0046e: mov    rax,rdi
  00471: sar    rax,0x3f
  00475: add    rax,0x2
  00479: and    rdi,0xfffffffffffffffc
  0047d: or     rdi,rax
  00480: rol    rdi,0x3d
  00484: movq   xmm4,rdi
  00489: jmp    0x4a0
  0048e: call   0xffffc414
  00493: test   rax,rax
  00496: je     0x3cc6a
  0049c: movq   xmm4,xmm0
  004a0: movq   xmm5,xmm4
  004a4: subsd  xmm5,xmm2
:00021 %9 = %4 * %4                         [Float][Float]
  004a8: mov    rdi,QWORD PTR [rbp-0x48]
  004ac: test   rdi,0x1
  004b3: jne    0x3cc86
  004b9: test   rdi,0x2
  004c0: je     0x4fc
  004c6: xorps  xmm6,xmm6
  004c9: movabs rax,0x8000000000000002
  004d3: cmp    rdi,rax
  004d6: je     0x50e
  004dc: mov    rax,rdi
  004df: sar    rax,0x3f
  004e3: add    rax,0x2
  004e7: and    rdi,0xfffffffffffffffc
  004eb: or     rdi,rax
  004ee: rol    rdi,0x3d
  004f2: movq   xmm6,rdi
  004f7: jmp    0x50e
  004fc: call   0xffffc414
  00501: test   rax,rax
  00504: je     0x3cc86
  0050a: movq   xmm6,xmm0
  0050e: movq   xmm4,xmm6
  00512: mulsd  xmm4,xmm6
:00022 %6 = %9 - %5                         [Float][Float]
  00516: movq   xmm7,xmm4
  0051a: subsd  xmm7,xmm5
:00023 %9 = literal[0.0]
:00024 _%9 = %6 > %9                        [Float][Float]
:00025 condnotbr _%9 =>:00113
  0051e: mov    rdi,QWORD PTR [rbp-0x70]
  00522: test   rdi,0x1
  00529: jne    0x3ccaf
  0052f: test   rdi,0x2
  00536: je     0x572
  0053c: xorps  xmm4,xmm4
  0053f: movabs rax,0x8000000000000002
  00549: cmp    rdi,rax
  0054c: je     0x584
  00552: mov    rax,rdi
  00555: sar    rax,0x3f
  00559: add    rax,0x2
  0055d: and    rdi,0xfffffffffffffffc
  00561: or     rdi,rax
  00564: rol    rdi,0x3d
  00568: movq   xmm4,rdi
  0056d: jmp    0x584
  00572: call   0xffffc414
  00577: test   rax,rax
  0057a: je     0x3ccaf
  00580: movq   xmm4,xmm0
  00584: ucomisd xmm7,xmm4
  00588: jbe    0x3d551
:00026 %9 = %4
:00027 %9 = neg %9                          [<INVALID>]
  0058e: mov    rdi,0x4
  00595: sub    DWORD PTR [rip+0x763],0x1        # 0xcff
  0059c: jne    0x3cce5
  005a2: mov    rdi,r12
  005a5: mov    esi,DWORD PTR [rbp-0x18]
  005a8: mov    rdx,QWORD PTR [rbp-0x28]
  005ac: movabs rax,0x563c6be70eb0
  005b6: call   rax
  005b8: mov    rdi,0x4
  005bf: jmp    0x3cce5
:00028 %11 = const[Math]                    [<INVALID>]
  005c4: mov    rax,QWORD PTR [rip+0xffffffffffffe7f5]        # 0xffffedc0
  005cb: cmp    rax,QWORD PTR [rip+0x74e]        # 0xd20
  005d2: jne    0x3cd28
  005d8: mov    rax,QWORD PTR [rip+0x731]        # 0xd10
  005df: mov    QWORD PTR [rbp-0x80],rax
:00029 %12 = %6
:00030 %10 = %11.call sqrt(%12; 1)          [<INVALID>]
:00031 
  005e3: mov    rdi,0x4
  005ea: sub    DWORD PTR [rip+0x737],0x1        # 0xd28
  005f1: jne    0x3cda4
  005f7: mov    rdi,r12
  005fa: mov    esi,DWORD PTR [rbp-0x18]
  005fd: mov    rdx,QWORD PTR [rbp-0x28]
  00601: movabs rax,0x563c6be70eb0
  0060b: call   rax
  0060d: mov    rdi,0x4
  00614: jmp    0x3cda4
:00033 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  00619: mov    rdi,0x4
  00620: sub    DWORD PTR [rip+0x705],0x1        # 0xd2c
  00627: jne    0x3cdee
  0062d: mov    rdi,r12
  00630: mov    esi,DWORD PTR [rbp-0x18]
  00633: mov    rdx,QWORD PTR [rbp-0x28]
  00637: movabs rax,0x563c6be70eb0
  00641: call   rax
  00643: mov    rdi,0x4
  0064a: jmp    0x3cdee
:00034 %9 = literal[0.0]
:00035 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
:00036 condnotbr _%9 =>:00112
  0064f: movabs rax,0x8000000000000002
  00659: mov    QWORD PTR [rbp-0x70],rax
  0065d: mov    rdi,QWORD PTR [rbp-0x60]
  00661: mov    rsi,QWORD PTR [rbp-0x70]
  00665: test   rdi,0x1
  0066c: je     0x3ce38
  00672: test   rsi,0x1
  00679: je     0x3ce38
  0067f: cmp    rdi,rsi
  00682: jle    0x3d489
:00037 %9 = %2.call t()                     [<INVALID>]
:00038 
  00688: mov    rdi,0x4
  0068f: sub    DWORD PTR [rip+0x69a],0x1        # 0xd30
  00696: jne    0x3ce8d
  0069c: mov    rdi,r12
  0069f: mov    esi,DWORD PTR [rbp-0x18]
  006a2: mov    rdx,QWORD PTR [rbp-0x28]
  006a6: movabs rax,0x563c6be70eb0
  006b0: call   rax
  006b2: mov    rdi,0x4
  006b9: jmp    0x3ce8d
:00040 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00041 condnotbr _%9 =>:00112
  006be: mov    rdi,QWORD PTR [rbp-0x60]
  006c2: mov    rsi,QWORD PTR [rbp-0x70]
  006c6: test   rdi,0x1
  006cd: je     0x3ceca
  006d3: test   rsi,0x1
  006da: je     0x3ceca
  006e0: cmp    rdi,rsi
  006e3: jge    0x3d4d0
:00042 _ = %2.call t=(%7; 1)                [<INVALID>]
:00043 
  006e9: mov    rdi,0x4
  006f0: sub    DWORD PTR [rip+0x63d],0x1        # 0xd34
  006f7: jne    0x3cf1f
  006fd: mov    rdi,r12
  00700: mov    esi,DWORD PTR [rbp-0x18]
  00703: mov    rdx,QWORD PTR [rbp-0x28]
  00707: movabs rax,0x563c6be70eb0
  00711: call   rax
  00713: mov    rdi,0x4
  0071a: jmp    0x3cf1f
:00045 %9 = literal[true]
  0071f: mov    rax,0x1c
  00726: mov    QWORD PTR [rbp-0x70],rax
:00046 _ = %2.call hit=(%9; 1)              [<INVALID>]
:00047 
  0072a: mov    rdi,0x4
  00731: sub    DWORD PTR [rip+0x600],0x1        # 0xd38
  00738: jne    0x3cf5c
  0073e: mov    rdi,r12
  00741: mov    esi,DWORD PTR [rbp-0x18]
  00744: mov    rdx,QWORD PTR [rbp-0x28]
  00748: movabs rax,0x563c6be70eb0
  00752: call   rax
  00754: mov    rdi,0x4
  0075b: jmp    0x3cf5c
:00049 %10 = const[Vec]                     [<INVALID>]
  00760: mov    rax,QWORD PTR [rip+0xffffffffffffe659]        # 0xffffedc0
  00767: cmp    rax,QWORD PTR [rip+0x5e2]        # 0xd50
  0076e: jne    0x3cf99
  00774: mov    rax,QWORD PTR [rip+0x5c5]        # 0xd40
  0077b: mov    QWORD PTR [rbp-0x78],rax
:00050 %12 = %1.call org()                  [<INVALID>]
:00051 
  0077f: mov    rdi,0x4
  00786: sub    DWORD PTR [rip+0x5cb],0x1        # 0xd58
  0078d: jne    0x3d009
  00793: mov    rdi,r12
  00796: mov    esi,DWORD PTR [rbp-0x18]
  00799: mov    rdx,QWORD PTR [rbp-0x28]
  0079d: movabs rax,0x563c6be70eb0
  007a7: call   rax
  007a9: mov    rdi,0x4
  007b0: jmp    0x3d009
:00053 %11 = %12.call x()                   [<INVALID>]
:00054 
  007b5: mov    rdi,0x4
  007bc: sub    DWORD PTR [rip+0x599],0x1        # 0xd5c
  007c3: jne    0x3d039
  007c9: mov    rdi,r12
  007cc: mov    esi,DWORD PTR [rbp-0x18]
  007cf: mov    rdx,QWORD PTR [rbp-0x28]
  007d3: movabs rax,0x563c6be70eb0
  007dd: call   rax
  007df: mov    rdi,0x4
  007e6: jmp    0x3d039
:00056 %13 = %1.call dir()                  [<INVALID>]
:00057 
  007eb: mov    rdi,0x4
  007f2: sub    DWORD PTR [rip+0x567],0x1        # 0xd60
  007f9: jne    0x3d069
  007ff: mov    rdi,r12
  00802: mov    esi,DWORD PTR [rbp-0x18]
  00805: mov    rdx,QWORD PTR [rbp-0x28]
  00809: movabs rax,0x563c6be70eb0
  00813: call   rax
  00815: mov    rdi,0x4
  0081c: jmp    0x3d069
:00059 %12 = %13.call x()                   [<INVALID>]
:00060 
  00821: mov    rdi,0x4
  00828: sub    DWORD PTR [rip+0x535],0x1        # 0xd64
  0082f: jne    0x3d099
  00835: mov    rdi,r12
  00838: mov    esi,DWORD PTR [rbp-0x18]
  0083b: mov    rdx,QWORD PTR [rbp-0x28]
  0083f: movabs rax,0x563c6be70eb0
  00849: call   rax
  0084b: mov    rdi,0x4
  00852: jmp    0x3d099
:00062 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00857: mov    rdi,0x4
  0085e: sub    DWORD PTR [rip+0x503],0x1        # 0xd68
  00865: jne    0x3d0c9
  0086b: mov    rdi,r12
  0086e: mov    esi,DWORD PTR [rbp-0x18]
  00871: mov    rdx,QWORD PTR [rbp-0x28]
  00875: movabs rax,0x563c6be70eb0
  0087f: call   rax
  00881: mov    rdi,0x4
  00888: jmp    0x3d0c9
:00063 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  0088d: mov    rdi,0x4
  00894: sub    DWORD PTR [rip+0x4d1],0x1        # 0xd6c
  0089b: jne    0x3d0f9
  008a1: mov    rdi,r12
  008a4: mov    esi,DWORD PTR [rbp-0x18]
  008a7: mov    rdx,QWORD PTR [rbp-0x28]
  008ab: movabs rax,0x563c6be70eb0
  008b5: call   rax
  008b7: mov    rdi,0x4
  008be: jmp    0x3d0f9
:00064 %13 = %1.call org()                  [<INVALID>]
:00065 
  008c3: mov    rdi,0x4
  008ca: sub    DWORD PTR [rip+0x49f],0x1        # 0xd70
  008d1: jne    0x3d129
  008d7: mov    rdi,r12
  008da: mov    esi,DWORD PTR [rbp-0x18]
  008dd: mov    rdx,QWORD PTR [rbp-0x28]
  008e1: movabs rax,0x563c6be70eb0
  008eb: call   rax
  008ed: mov    rdi,0x4
  008f4: jmp    0x3d129
:00067 %12 = %13.call y()                   [<INVALID>]
:00068 
  008f9: mov    rdi,0x4
  00900: sub    DWORD PTR [rip+0x46d],0x1        # 0xd74
  00907: jne    0x3d159
  0090d: mov    rdi,r12
  00910: mov    esi,DWORD PTR [rbp-0x18]
  00913: mov    rdx,QWORD PTR [rbp-0x28]
  00917: movabs rax,0x563c6be70eb0
  00921: call   rax
  00923: mov    rdi,0x4
  0092a: jmp    0x3d159
:00070 %14 = %1.call dir()                  [<INVALID>]
:00071 
  0092f: mov    rdi,0x4
  00936: sub    DWORD PTR [rip+0x43b],0x1        # 0xd78
  0093d: jne    0x3d189
  00943: mov    rdi,r12
  00946: mov    esi,DWORD PTR [rbp-0x18]
  00949: mov    rdx,QWORD PTR [rbp-0x28]
  0094d: movabs rax,0x563c6be70eb0
  00957: call   rax
  00959: mov    rdi,0x4
  00960: jmp    0x3d189
:00073 %13 = %14.call y()                   [<INVALID>]
:00074 
  00965: mov    rdi,0x4
  0096c: sub    DWORD PTR [rip+0x409],0x1        # 0xd7c
  00973: jne    0x3d1b9
  00979: mov    rdi,r12
  0097c: mov    esi,DWORD PTR [rbp-0x18]
  0097f: mov    rdx,QWORD PTR [rbp-0x28]
  00983: movabs rax,0x563c6be70eb0
  0098d: call   rax
  0098f: mov    rdi,0x4
  00996: jmp    0x3d1b9
:00076 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  0099b: mov    rdi,0x4
  009a2: sub    DWORD PTR [rip+0x3d7],0x1        # 0xd80
  009a9: jne    0x3d1e9
  009af: mov    rdi,r12
  009b2: mov    esi,DWORD PTR [rbp-0x18]
  009b5: mov    rdx,QWORD PTR [rbp-0x28]
  009b9: movabs rax,0x563c6be70eb0
  009c3: call   rax
  009c5: mov    rdi,0x4
  009cc: jmp    0x3d1e9
:00077 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  009d1: mov    rdi,0x4
  009d8: sub    DWORD PTR [rip+0x3a5],0x1        # 0xd84
  009df: jne    0x3d219
  009e5: mov    rdi,r12
  009e8: mov    esi,DWORD PTR [rbp-0x18]
  009eb: mov    rdx,QWORD PTR [rbp-0x28]
  009ef: movabs rax,0x563c6be70eb0
  009f9: call   rax
  009fb: mov    rdi,0x4
  00a02: jmp    0x3d219
:00078 %14 = %1.call org()                  [<INVALID>]
:00079 
  00a07: mov    rdi,0x4
  00a0e: sub    DWORD PTR [rip+0x373],0x1        # 0xd88
  00a15: jne    0x3d249
  00a1b: mov    rdi,r12
  00a1e: mov    esi,DWORD PTR [rbp-0x18]
  00a21: mov    rdx,QWORD PTR [rbp-0x28]
  00a25: movabs rax,0x563c6be70eb0
  00a2f: call   rax
  00a31: mov    rdi,0x4
  00a38: jmp    0x3d249
:00081 %13 = %14.call z()                   [<INVALID>]
:00082 
  00a3d: mov    rdi,0x4
  00a44: sub    DWORD PTR [rip+0x341],0x1        # 0xd8c
  00a4b: jne    0x3d279
  00a51: mov    rdi,r12
  00a54: mov    esi,DWORD PTR [rbp-0x18]
  00a57: mov    rdx,QWORD PTR [rbp-0x28]
  00a5b: movabs rax,0x563c6be70eb0
  00a65: call   rax
  00a67: mov    rdi,0x4
  00a6e: jmp    0x3d279
:00084 %15 = %1.call dir()                  [<INVALID>]
:00085 
  00a73: mov    rdi,0x4
  00a7a: sub    DWORD PTR [rip+0x30f],0x1        # 0xd90
  00a81: jne    0x3d2a9
  00a87: mov    rdi,r12
  00a8a: mov    esi,DWORD PTR [rbp-0x18]
  00a8d: mov    rdx,QWORD PTR [rbp-0x28]
  00a91: movabs rax,0x563c6be70eb0
  00a9b: call   rax
  00a9d: mov    rdi,0x4
  00aa4: jmp    0x3d2a9
:00087 %14 = %15.call z()                   [<INVALID>]
:00088 
  00aa9: mov    rdi,0x4
  00ab0: sub    DWORD PTR [rip+0x2dd],0x1        # 0xd94
  00ab7: jne    0x3d2d9
  00abd: mov    rdi,r12
  00ac0: mov    esi,DWORD PTR [rbp-0x18]
  00ac3: mov    rdx,QWORD PTR [rbp-0x28]
  00ac7: movabs rax,0x563c6be70eb0
  00ad1: call   rax
  00ad3: mov    rdi,0x4
  00ada: jmp    0x3d2d9
:00090 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  00adf: mov    rdi,0x4
  00ae6: sub    DWORD PTR [rip+0x2ab],0x1        # 0xd98
  00aed: jne    0x3d309
  00af3: mov    rdi,r12
  00af6: mov    esi,DWORD PTR [rbp-0x18]
  00af9: mov    rdx,QWORD PTR [rbp-0x28]
  00afd: movabs rax,0x563c6be70eb0
  00b07: call   rax
  00b09: mov    rdi,0x4
  00b10: jmp    0x3d309
:00091 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  00b15: mov    rdi,0x4
  00b1c: sub    DWORD PTR [rip+0x279],0x1        # 0xd9c
  00b23: jne    0x3d339
  00b29: mov    rdi,r12
  00b2c: mov    esi,DWORD PTR [rbp-0x18]
  00b2f: mov    rdx,QWORD PTR [rbp-0x28]
  00b33: movabs rax,0x563c6be70eb0
  00b3d: call   rax
  00b3f: mov    rdi,0x4
  00b46: jmp    0x3d339
:00092 %9 = %10.call new(%11; 3)            [<INVALID>]
:00093 
  00b4b: mov    rdi,0x4
  00b52: sub    DWORD PTR [rip+0x247],0x1        # 0xda0
  00b59: jne    0x3d369
  00b5f: mov    rdi,r12
  00b62: mov    esi,DWORD PTR [rbp-0x18]
  00b65: mov    rdx,QWORD PTR [rbp-0x28]
  00b69: movabs rax,0x563c6be70eb0
  00b73: call   rax
  00b75: mov    rdi,0x4
  00b7c: jmp    0x3d369
:00095 _ = %2.call pl=(%9; 1)               [<INVALID>]
:00096 
  00b81: mov    rdi,0x4
  00b88: sub    DWORD PTR [rip+0x215],0x1        # 0xda4
  00b8f: jne    0x3d399
  00b95: mov    rdi,r12
  00b98: mov    esi,DWORD PTR [rbp-0x18]
  00b9b: mov    rdx,QWORD PTR [rbp-0x28]
  00b9f: movabs rax,0x563c6be70eb0
  00ba9: call   rax
  00bab: mov    rdi,0x4
  00bb2: jmp    0x3d399
:00098 %9 = %2.call pl()                    [<INVALID>]
:00099 
  00bb7: mov    rdi,0x4
  00bbe: sub    DWORD PTR [rip+0x1e3],0x1        # 0xda8
  00bc5: jne    0x3d3c9
  00bcb: mov    rdi,r12
  00bce: mov    esi,DWORD PTR [rbp-0x18]
  00bd1: mov    rdx,QWORD PTR [rbp-0x28]
  00bd5: movabs rax,0x563c6be70eb0
  00bdf: call   rax
  00be1: mov    rdi,0x4
  00be8: jmp    0x3d3c9
:00101 %10 = @center: <INVALID>[IvarId(0)]
  00bed: mov    rdi,QWORD PTR [rbp-0x28]
  00bf1: sub    rsp,0x20
  00bf5: movq   QWORD PTR [rsp],xmm5
  00bfa: movq   QWORD PTR [rsp+0x8],xmm6
  00c00: movq   QWORD PTR [rsp+0x10],xmm7
  00c06: mov    rsi,0x7b
  00c0d: mov    rdx,r12
  00c10: movabs rax,0x563c6be6b550
  00c1a: call   rax
  00c1c: movq   xmm5,QWORD PTR [rsp]
  00c21: movq   xmm6,QWORD PTR [rsp+0x8]
  00c27: movq   xmm7,QWORD PTR [rsp+0x10]
  00c2d: add    rsp,0x20
  00c31: mov    QWORD PTR [rbp-0x78],rax
:00102 %8 = %9.call vsub(%10; 1)            [<INVALID>]
:00103 
  00c35: mov    rdi,0x4
  00c3c: sub    DWORD PTR [rip+0x169],0x1        # 0xdac
  00c43: jne    0x3d3f9
  00c49: mov    rdi,r12
  00c4c: mov    esi,DWORD PTR [rbp-0x18]
  00c4f: mov    rdx,QWORD PTR [rbp-0x28]
  00c53: movabs rax,0x563c6be70eb0
  00c5d: call   rax
  00c5f: mov    rdi,0x4
  00c66: jmp    0x3d3f9
:00105 %9 = %8.call vnormalize()            [<INVALID>]
:00106 
  00c6b: mov    rdi,0x4
  00c72: sub    DWORD PTR [rip+0x137],0x1        # 0xdb0
  00c79: jne    0x3d429
  00c7f: mov    rdi,r12
  00c82: mov    esi,DWORD PTR [rbp-0x18]
  00c85: mov    rdx,QWORD PTR [rbp-0x28]
  00c89: movabs rax,0x563c6be70eb0
  00c93: call   rax
  00c95: mov    rdi,0x4
  00c9c: jmp    0x3d429
:00108 _ = %2.call n=(%9; 1)                [<INVALID>]
:00109 
  00ca1: mov    rdi,0x4
  00ca8: sub    DWORD PTR [rip+0x105],0x1        # 0xdb4
  00caf: jne    0x3d459
  00cb5: mov    rdi,r12
  00cb8: mov    esi,DWORD PTR [rbp-0x18]
  00cbb: mov    rdx,QWORD PTR [rbp-0x28]
  00cbf: movabs rax,0x563c6be70eb0
  00cc9: call   rax
  00ccb: mov    rdi,0x4
  00cd2: jmp    0x3d459
:00111 br =>:00112
  00cd7: jmp    0x3d517
:00112 br =>:00113
  00cdc: jmp    0x3d591
:00113 %9 = nil
  00ce1: mov    QWORD PTR [rbp-0x70],0x4
:00114 ret %9
  00ce9: mov    rax,QWORD PTR [rbp-0x70]
  00ced: leave  
  00cee: ret    
==> start whole compile: vsub FuncId(57) self_class:Vec start:[00000] bytecode:0x563c6d9c9fb0
<== finished compile. elapsed:38.8µs
offset:Pos(18968) code: 1364 bytes  data: 52 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x70
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    QWORD PTR [rbp-0x50],rax
  0001f: mov    QWORD PTR [rbp-0x58],rax
  00023: mov    QWORD PTR [rbp-0x60],rax
  00027: mov    rdi,QWORD PTR [rbp-0x28]
  0002b: test   rdi,0x7
  00032: jne    0x3c84c
  00038: cmp    DWORD PTR [rdi+0x4],0x25
  0003c: jne    0x3c84c
:00000 %3 = const[Vec]                      [Vec]
  00042: mov    rax,QWORD PTR [rip+0xffffffffffffdfbf]        # 0xffffe008
  00049: cmp    rax,QWORD PTR [rip+0x518]        # 0x568
  00050: jne    0x3c85b
  00056: mov    rax,QWORD PTR [rip+0x4fb]        # 0x558
  0005d: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = @x: Vec[IvarId(0)]
  00061: mov    rdi,QWORD PTR [rbp-0x28]
  00065: cmp    WORD PTR [rdi+0x2],0x3
  0006a: jne    0x3c8a1
  00070: mov    rax,QWORD PTR [rdi+0x10]
  00074: mov    QWORD PTR [rbp-0x48],rax
:00002 %5 = %1.call x()                     [Vec]
:00003 
  00078: mov    rdi,QWORD PTR [rbp-0x30]
  0007c: test   rdi,0x7
  00083: jne    0x3c8b7
  00089: cmp    DWORD PTR [rdi+0x4],0x25
  0008d: jne    0x3c8b7
  00093: cmp    DWORD PTR [rip+0xffffffffffffdf62],0x26        # 0xffffdffc
  0009a: jne    0x3c8b7
  000a0: mov    esi,DWORD PTR [rip+0x4ce]        # 0x574
  000a6: cmp    esi,0xffffffff
  000a9: je     0x3c8c6
  000af: cmp    WORD PTR [rdi+0x2],0x3
  000b4: jne    0xcd
  000ba: cmp    esi,0x6
  000bd: jge    0xcd
  000c3: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c8: jmp    0xd9
  000cd: movabs rax,0x563c6be0f180
  000d7: call   rax
  000d9: mov    QWORD PTR [rbp-0x50],rax
:00005 %4 = %4 - %5                         [Float][Float]
  000dd: mov    rdi,QWORD PTR [rbp-0x48]
  000e1: test   rdi,0x1
  000e8: jne    0x3c8ef
  000ee: test   rdi,0x2
  000f5: je     0x131
  000fb: xorps  xmm2,xmm2
  000fe: movabs rax,0x8000000000000002
  00108: cmp    rdi,rax
  0010b: je     0x143
  00111: mov    rax,rdi
  00114: sar    rax,0x3f
  00118: add    rax,0x2
  0011c: and    rdi,0xfffffffffffffffc
  00120: or     rdi,rax
  00123: rol    rdi,0x3d
  00127: movq   xmm2,rdi
  0012c: jmp    0x143
  00131: call   0xffffb65c
  00136: test   rax,rax
  00139: je     0x3c8ef
  0013f: movq   xmm2,xmm0
  00143: mov    rdi,QWORD PTR [rbp-0x50]
  00147: test   rdi,0x1
  0014e: jne    0x3c8fe
  00154: test   rdi,0x2
  0015b: je     0x197
  00161: xorps  xmm3,xmm3
  00164: movabs rax,0x8000000000000002
  0016e: cmp    rdi,rax
  00171: je     0x1a9
  00177: mov    rax,rdi
  0017a: sar    rax,0x3f
  0017e: add    rax,0x2
  00182: and    rdi,0xfffffffffffffffc
  00186: or     rdi,rax
  00189: rol    rdi,0x3d
  0018d: movq   xmm3,rdi
  00192: jmp    0x1a9
  00197: call   0xffffb65c
  0019c: test   rax,rax
  0019f: je     0x3c8fe
  001a5: movq   xmm3,xmm0
  001a9: subsd  xmm2,xmm3
:00006 %5 = @y: Vec[IvarId(1)]
  001ad: mov    rdi,QWORD PTR [rbp-0x28]
  001b1: cmp    WORD PTR [rdi+0x2],0x3
  001b6: jne    0x3c90d
  001bc: mov    rax,QWORD PTR [rdi+0x18]
  001c0: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = %1.call y()                     [Vec]
:00008 
  001c4: mov    rdi,QWORD PTR [rbp-0x30]
  001c8: test   rdi,0x7
  001cf: jne    0x3c935
  001d5: cmp    DWORD PTR [rdi+0x4],0x25
  001d9: jne    0x3c935
  001df: cmp    DWORD PTR [rip+0xffffffffffffde16],0x26        # 0xffffdffc
  001e6: jne    0x3c935
  001ec: mov    esi,DWORD PTR [rip+0x38a]        # 0x57c
  001f2: cmp    esi,0xffffffff
  001f5: je     0x3c951
  001fb: cmp    WORD PTR [rdi+0x2],0x3
  00200: jne    0x219
  00206: cmp    esi,0x6
  00209: jge    0x219
  0020f: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00214: jmp    0x237
  00219: sub    rsp,0x10
  0021d: movq   QWORD PTR [rsp],xmm2
  00222: movabs rax,0x563c6be0f180
  0022c: call   rax
  0022e: movq   xmm2,QWORD PTR [rsp]
  00233: add    rsp,0x10
  00237: mov    QWORD PTR [rbp-0x58],rax
:00010 %5 = %5 - %6                         [Float][Float]
  0023b: mov    rdi,QWORD PTR [rbp-0x50]
  0023f: test   rdi,0x1
  00246: jne    0x3c98c
  0024c: test   rdi,0x2
  00253: je     0x28f
  00259: xorps  xmm3,xmm3
  0025c: movabs rax,0x8000000000000002
  00266: cmp    rdi,rax
  00269: je     0x2a1
  0026f: mov    rax,rdi
  00272: sar    rax,0x3f
  00276: add    rax,0x2
  0027a: and    rdi,0xfffffffffffffffc
  0027e: or     rdi,rax
  00281: rol    rdi,0x3d
  00285: movq   xmm3,rdi
  0028a: jmp    0x2a1
  0028f: call   0xffffb65c
  00294: test   rax,rax
  00297: je     0x3c98c
  0029d: movq   xmm3,xmm0
  002a1: mov    rdi,QWORD PTR [rbp-0x58]
  002a5: test   rdi,0x1
  002ac: jne    0x3c9a8
  002b2: test   rdi,0x2
  002b9: je     0x2f5
  002bf: xorps  xmm4,xmm4
  002c2: movabs rax,0x8000000000000002
  002cc: cmp    rdi,rax
  002cf: je     0x307
  002d5: mov    rax,rdi
  002d8: sar    rax,0x3f
  002dc: add    rax,0x2
  002e0: and    rdi,0xfffffffffffffffc
  002e4: or     rdi,rax
  002e7: rol    rdi,0x3d
  002eb: movq   xmm4,rdi
  002f0: jmp    0x307
  002f5: call   0xffffb65c
  002fa: test   rax,rax
  002fd: je     0x3c9a8
  00303: movq   xmm4,xmm0
  00307: subsd  xmm3,xmm4
:00011 %6 = @z: Vec[IvarId(2)]
  0030b: mov    rdi,QWORD PTR [rbp-0x28]
  0030f: cmp    WORD PTR [rdi+0x2],0x3
  00314: jne    0x3c9c4
  0031a: mov    rax,QWORD PTR [rdi+0x20]
  0031e: mov    QWORD PTR [rbp-0x58],rax
:00012 %7 = %1.call z()                     [Vec]
:00013 
  00322: mov    rdi,QWORD PTR [rbp-0x30]
  00326: test   rdi,0x7
  0032d: jne    0x3c9f8
  00333: cmp    DWORD PTR [rdi+0x4],0x25
  00337: jne    0x3c9f8
  0033d: cmp    DWORD PTR [rip+0xffffffffffffdcb8],0x26        # 0xffffdffc
  00344: jne    0x3c9f8
  0034a: mov    esi,DWORD PTR [rip+0x234]        # 0x584
  00350: cmp    esi,0xffffffff
  00353: je     0x3ca21
  00359: cmp    WORD PTR [rdi+0x2],0x3
  0035e: jne    0x377
  00364: cmp    esi,0x6
  00367: jge    0x377
  0036d: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00372: jmp    0x3a1
  00377: sub    rsp,0x10
  0037b: movq   QWORD PTR [rsp],xmm2
  00380: movq   QWORD PTR [rsp+0x8],xmm3
  00386: movabs rax,0x563c6be0f180
  00390: call   rax
  00392: movq   xmm2,QWORD PTR [rsp]
  00397: movq   xmm3,QWORD PTR [rsp+0x8]
  0039d: add    rsp,0x10
  003a1: mov    QWORD PTR [rbp-0x60],rax
:00015 %6 = %6 - %7                         [Float][Float]
  003a5: mov    rdi,QWORD PTR [rbp-0x58]
  003a9: test   rdi,0x1
  003b0: jne    0x3ca68
  003b6: test   rdi,0x2
  003bd: je     0x3f9
  003c3: xorps  xmm4,xmm4
  003c6: movabs rax,0x8000000000000002
  003d0: cmp    rdi,rax
  003d3: je     0x40b
  003d9: mov    rax,rdi
  003dc: sar    rax,0x3f
  003e0: add    rax,0x2
  003e4: and    rdi,0xfffffffffffffffc
  003e8: or     rdi,rax
  003eb: rol    rdi,0x3d
  003ef: movq   xmm4,rdi
  003f4: jmp    0x40b
  003f9: call   0xffffb65c
  003fe: test   rax,rax
  00401: je     0x3ca68
  00407: movq   xmm4,xmm0
  0040b: mov    rdi,QWORD PTR [rbp-0x60]
  0040f: test   rdi,0x1
  00416: jne    0x3ca91
  0041c: test   rdi,0x2
  00423: je     0x45f
  00429: xorps  xmm5,xmm5
  0042c: movabs rax,0x8000000000000002
  00436: cmp    rdi,rax
  00439: je     0x471
  0043f: mov    rax,rdi
  00442: sar    rax,0x3f
  00446: add    rax,0x2
  0044a: and    rdi,0xfffffffffffffffc
  0044e: or     rdi,rax
  00451: rol    rdi,0x3d
  00455: movq   xmm5,rdi
  0045a: jmp    0x471
  0045f: call   0xffffb65c
  00464: test   rax,rax
  00467: je     0x3ca91
  0046d: movq   xmm5,xmm0
  00471: subsd  xmm4,xmm5
:00016 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00017 
  00475: movq   xmm0,xmm2
  00479: call   0xffffb74f
  0047e: mov    QWORD PTR [rbp-0x48],rax
  00482: movq   xmm0,xmm3
  00486: call   0xffffb74f
  0048b: mov    QWORD PTR [rbp-0x50],rax
  0048f: movq   xmm0,xmm4
  00493: call   0xffffb74f
  00498: mov    QWORD PTR [rbp-0x58],rax
  0049c: mov    rdi,QWORD PTR [rbp-0x40]
  004a0: test   rdi,0x7
  004a7: jne    0x3caba
  004ad: cmp    DWORD PTR [rdi+0x4],0x26
  004b1: jne    0x3caba
  004b7: cmp    DWORD PTR [rip+0xffffffffffffdb3e],0x26        # 0xffffdffc
  004be: jne    0x3caba
  004c4: mov    r9,0x0
  004cb: sub    rsp,0x20
  004cf: movq   QWORD PTR [rsp],xmm2
  004d4: movq   QWORD PTR [rsp+0x8],xmm3
  004da: movq   QWORD PTR [rsp+0x10],xmm4
  004e0: movq   QWORD PTR [rsp+0x18],xmm5
  004e6: mov    rdx,rdi
  004e9: mov    rax,QWORD PTR [rbx]
  004ec: lea    rdi,[rsp-0x18]
  004f1: mov    QWORD PTR [rdi],rax
  004f4: mov    QWORD PTR [rbx],rdi
  004f7: mov    QWORD PTR [rsp-0x20],0x0
  00500: mov    QWORD PTR [rsp-0x38],rcx
  00505: lea    rcx,[rbp-0x48]
  00509: mov    r8,0x3
  00510: call   0x3cac9
  00515: lea    rdi,[rbp-0x8]
  00519: mov    QWORD PTR [rbx],rdi
  0051c: movq   xmm2,QWORD PTR [rsp]
  00521: movq   xmm3,QWORD PTR [rsp+0x8]
  00527: movq   xmm4,QWORD PTR [rsp+0x10]
  0052d: movq   xmm5,QWORD PTR [rsp+0x18]
  00533: add    rsp,0x20
  00537: movabs r13,0x563c6d9ca0d0
  00541: test   rax,rax
  00544: je     0xffffb623
  0054a: mov    QWORD PTR [rbp-0x38],rax
:00019 ret %2
  0054e: mov    rax,QWORD PTR [rbp-0x38]
  00552: leave  
  00553: ret    
==> start whole compile: <unnamed> FuncId(76) self_class:Scene start:[00000] bytecode:0x563c6da08c10
<== finished compile. elapsed:108.2µs
offset:Pos(20655) code: 6080 bytes  data: 197 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xd0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00064: ff 	mov    QWORD PTR [rbp-0xb8],rax
  0006b: ff 	mov    QWORD PTR [rbp-0xc0],rax
  00072:    	mov    rdi,QWORD PTR [rbp-0x28]
  00076: 00 	test   rdi,0x7
  0007d:    	jne    0x3c464
  00083:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00087:    	jne    0x3c464
:00000 %14 = dynvar(4, %4)
  0008d:    	mov    rax,QWORD PTR [rbp-0x10]
  00091:    	mov    rax,QWORD PTR [rax]
  00094:    	mov    rax,QWORD PTR [rax]
  00097:    	mov    rax,QWORD PTR [rax]
  0009a:    	mov    rax,QWORD PTR [rax-0x38]
  0009e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00001 %14 = %14 + 1: i16                   [Integer][Integer]
  000a5: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000ac: 00 	test   rdi,0x1
  000b3:    	je     0x3c473
  000b9:    	add    rdi,0x2
  000bd:    	jo     0x3c473
  000c3: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00002 dynvar(4, %4) = %14
  000ca:    	mov    rax,QWORD PTR [rbp-0x10]
  000ce:    	mov    rax,QWORD PTR [rax]
  000d1:    	mov    rax,QWORD PTR [rax]
  000d4:    	mov    rax,QWORD PTR [rax]
  000d7: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000de:    	mov    QWORD PTR [rax-0x38],rdi
:00003 %14 = dynvar(4, %1)
  000e2:    	mov    rax,QWORD PTR [rbp-0x10]
  000e6:    	mov    rax,QWORD PTR [rax]
  000e9:    	mov    rax,QWORD PTR [rax]
  000ec:    	mov    rax,QWORD PTR [rax]
  000ef:    	mov    rax,QWORD PTR [rax-0x20]
  000f3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00004 %2 = %14.call to_f()                 [Integer]
:00005 
  000fa: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00101: 00 	test   rdi,0x1
  00108:    	jne    0x125
  0010e: 00 	test   rdi,0x7
  00115:    	jne    0x3c482
  0011b:    	cmp    DWORD PTR [rdi+0x4],0x6
  0011f:    	jne    0x3c482
  00125: 26 	cmp    DWORD PTR [rip+0xffffffffffffd839],0x26        # 0xffffd965
  0012c:    	jne    0x3c482
  00132:    	sar    rdi,1
  00135:    	cvtsi2sd xmm2,rdi
:00007 %14 = dynvar(4, %2)
  0013a:    	mov    rax,QWORD PTR [rbp-0x10]
  0013e:    	mov    rax,QWORD PTR [rax]
  00141:    	mov    rax,QWORD PTR [rax]
  00144:    	mov    rax,QWORD PTR [rax]
  00147:    	mov    rax,QWORD PTR [rax-0x28]
  0014b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00008 %3 = %14.call to_f()                 [Integer]
:00009 
  00152: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00159: 00 	test   rdi,0x1
  00160:    	jne    0x17d
  00166: 00 	test   rdi,0x7
  0016d:    	jne    0x3c491
  00173:    	cmp    DWORD PTR [rdi+0x4],0x6
  00177:    	jne    0x3c491
  0017d: 26 	cmp    DWORD PTR [rip+0xffffffffffffd7e1],0x26        # 0xffffd965
  00184:    	jne    0x3c491
  0018a:    	sar    rdi,1
  0018d:    	cvtsi2sd xmm3,rdi
:00011 %14 = dynvar(2, %1)
  00192:    	mov    rax,QWORD PTR [rbp-0x10]
  00196:    	mov    rax,QWORD PTR [rax]
  00199:    	mov    rax,QWORD PTR [rax-0x20]
  0019d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %4 = %14.call to_f()                 [Integer]
:00013 
  001a4: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001ab: 00 	test   rdi,0x1
  001b2:    	jne    0x1cf
  001b8: 00 	test   rdi,0x7
  001bf:    	jne    0x3c4ad
  001c5:    	cmp    DWORD PTR [rdi+0x4],0x6
  001c9:    	jne    0x3c4ad
  001cf: 26 	cmp    DWORD PTR [rip+0xffffffffffffd78f],0x26        # 0xffffd965
  001d6:    	jne    0x3c4ad
  001dc:    	sar    rdi,1
  001df:    	cvtsi2sd xmm4,rdi
:00015 %14 = dynvar(3, %1)
  001e4:    	mov    rax,QWORD PTR [rbp-0x10]
  001e8:    	mov    rax,QWORD PTR [rax]
  001eb:    	mov    rax,QWORD PTR [rax]
  001ee:    	mov    rax,QWORD PTR [rax-0x20]
  001f2: ff 	mov    QWORD PTR [rbp-0x98],rax
:00016 %5 = %14.call to_f()                 [Integer]
:00017 
  001f9: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00200: 00 	test   rdi,0x1
  00207:    	jne    0x224
  0020d: 00 	test   rdi,0x7
  00214:    	jne    0x3c4d6
  0021a:    	cmp    DWORD PTR [rdi+0x4],0x6
  0021e:    	jne    0x3c4d6
  00224: 26 	cmp    DWORD PTR [rip+0xffffffffffffd73a],0x26        # 0xffffd965
  0022b:    	jne    0x3c4d6
  00231:    	sar    rdi,1
  00234:    	cvtsi2sd xmm5,rdi
:00019 %6 = %1.call to_f()                  [Integer]
:00020 
  00239:    	mov    rdi,QWORD PTR [rbp-0x30]
  0023d: 00 	test   rdi,0x1
  00244:    	jne    0x261
  0024a: 00 	test   rdi,0x7
  00251:    	jne    0x3c50c
  00257:    	cmp    DWORD PTR [rdi+0x4],0x6
  0025b:    	jne    0x3c50c
  00261: 26 	cmp    DWORD PTR [rip+0xffffffffffffd6fd],0x26        # 0xffffd965
  00268:    	jne    0x3c50c
  0026e:    	sar    rdi,1
  00271:    	cvtsi2sd xmm6,rdi
:00022 %14 = dynvar(1, %1)
  00276:    	mov    rax,QWORD PTR [rbp-0x10]
  0027a:    	mov    rax,QWORD PTR [rax-0x20]
  0027e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00023 %7 = %14.call to_f()                 [Integer]
:00024 
  00285: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0028c: 00 	test   rdi,0x1
  00293:    	jne    0x2b0
  00299: 00 	test   rdi,0x7
  002a0:    	jne    0x3c54f
  002a6:    	cmp    DWORD PTR [rdi+0x4],0x6
  002aa:    	jne    0x3c54f
  002b0: 26 	cmp    DWORD PTR [rip+0xffffffffffffd6ae],0x26        # 0xffffd965
  002b7:    	jne    0x3c54f
  002bd:    	sar    rdi,1
  002c0:    	cvtsi2sd xmm7,rdi
:00026 %14 = dynvar(4, %5)
  002c5:    	mov    rax,QWORD PTR [rbp-0x10]
  002c9:    	mov    rax,QWORD PTR [rax]
  002cc:    	mov    rax,QWORD PTR [rax]
  002cf:    	mov    rax,QWORD PTR [rax]
  002d2:    	mov    rax,QWORD PTR [rax-0x40]
  002d6: ff 	mov    QWORD PTR [rbp-0x98],rax
:00027 %14 = %6 / %14                       [Float][Float]
  002dd: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  002e4: 00 	test   rdi,0x1
  002eb:    	jne    0x3c59f
  002f1: 00 	test   rdi,0x2
  002f8:    	je     0x335
  002fe:    	xorps  xmm8,xmm8
  00302: 00 	movabs rax,0x8000000000000002
  0030c:    	cmp    rdi,rax
  0030f:    	je     0x348
  00315:    	mov    rax,rdi
  00318:    	sar    rax,0x3f
  0031c:    	add    rax,0x2
  00320:    	and    rdi,0xfffffffffffffffc
  00324:    	or     rdi,rax
  00327:    	rol    rdi,0x3d
  0032b:    	movq   xmm8,rdi
  00330:    	jmp    0x348
  00335:    	call   0xffffafc5
  0033a:    	test   rax,rax
  0033d:    	je     0x3c59f
  00343:    	movq   xmm8,xmm0
  00348:    	movq   rax,xmm8
  0034d:    	test   rax,rax
  00350:    	je     0xffffafb1
  00356:    	movq   xmm0,xmm6
  0035a:    	divsd  xmm0,xmm8
  0035f:    	movq   xmm8,xmm0
:00028 %14 = %4 + %14                       [Float][Float]
  00364:    	addsd  xmm8,xmm4
:00029 %15 = literal[2.0]
:00030 %15 = %2 / %15                       [Float][Float]
  00369: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00370: 00 	test   rdi,0x1
  00377:    	jne    0x3c5fc
  0037d: 00 	test   rdi,0x2
  00384:    	je     0x3c1
  0038a:    	xorps  xmm9,xmm9
  0038e: 00 	movabs rax,0x8000000000000002
  00398:    	cmp    rdi,rax
  0039b:    	je     0x3d4
  003a1:    	mov    rax,rdi
  003a4:    	sar    rax,0x3f
  003a8:    	add    rax,0x2
  003ac:    	and    rdi,0xfffffffffffffffc
  003b0:    	or     rdi,rax
  003b3:    	rol    rdi,0x3d
  003b7:    	movq   xmm9,rdi
  003bc:    	jmp    0x3d4
  003c1:    	call   0xffffafc5
  003c6:    	test   rax,rax
  003c9:    	je     0x3c5fc
  003cf:    	movq   xmm9,xmm0
  003d4:    	movq   rax,xmm9
  003d9:    	test   rax,rax
  003dc:    	je     0xffffafb1
  003e2:    	movq   xmm0,xmm2
  003e6:    	divsd  xmm0,xmm9
  003eb:    	movq   xmm9,xmm0
:00031 %14 = %14 - %15                      [Float][Float]
  003f0:    	subsd  xmm8,xmm9
:00032 %15 = literal[2.0]
:00033 %15 = %2 / %15                       [Float][Float]
  003f5: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  003fc: 00 	test   rdi,0x1
  00403:    	jne    0x3c66a
  00409: 00 	test   rdi,0x2
  00410:    	je     0x44d
  00416:    	xorps  xmm9,xmm9
  0041a: 00 	movabs rax,0x8000000000000002
  00424:    	cmp    rdi,rax
  00427:    	je     0x460
  0042d:    	mov    rax,rdi
  00430:    	sar    rax,0x3f
  00434:    	add    rax,0x2
  00438:    	and    rdi,0xfffffffffffffffc
  0043c:    	or     rdi,rax
  0043f:    	rol    rdi,0x3d
  00443:    	movq   xmm9,rdi
  00448:    	jmp    0x460
  0044d:    	call   0xffffafc5
  00452:    	test   rax,rax
  00455:    	je     0x3c66a
  0045b:    	movq   xmm9,xmm0
  00460:    	movq   rax,xmm9
  00465:    	test   rax,rax
  00468:    	je     0xffffafb1
  0046e:    	movq   xmm0,xmm2
  00472:    	divsd  xmm0,xmm9
  00477:    	movq   xmm9,xmm0
:00034 %8 = %14 / %15                       [Float][Float]
  0047c:    	movq   xmm10,xmm8
  00481:    	movq   rax,xmm9
  00486:    	test   rax,rax
  00489:    	je     0xffffafb1
  0048f:    	divsd  xmm10,xmm9
:00035 %14 = dynvar(4, %5)
  00494:    	mov    rax,QWORD PTR [rbp-0x10]
  00498:    	mov    rax,QWORD PTR [rax]
  0049b:    	mov    rax,QWORD PTR [rax]
  0049e:    	mov    rax,QWORD PTR [rax]
  004a1:    	mov    rax,QWORD PTR [rax-0x40]
  004a5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00036 %14 = %7 / %14                       [Float][Float]
  004ac: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  004b3: 00 	test   rdi,0x1
  004ba:    	jne    0x3c6d8
  004c0: 00 	test   rdi,0x2
  004c7:    	je     0x504
  004cd:    	xorps  xmm8,xmm8
  004d1: 00 	movabs rax,0x8000000000000002
  004db:    	cmp    rdi,rax
  004de:    	je     0x517
  004e4:    	mov    rax,rdi
  004e7:    	sar    rax,0x3f
  004eb:    	add    rax,0x2
  004ef:    	and    rdi,0xfffffffffffffffc
  004f3:    	or     rdi,rax
  004f6:    	rol    rdi,0x3d
  004fa:    	movq   xmm8,rdi
  004ff:    	jmp    0x517
  00504:    	call   0xffffafc5
  00509:    	test   rax,rax
  0050c:    	je     0x3c6d8
  00512:    	movq   xmm8,xmm0
  00517:    	movq   rax,xmm8
  0051c:    	test   rax,rax
  0051f:    	je     0xffffafb1
  00525:    	movq   xmm0,xmm7
  00529:    	divsd  xmm0,xmm8
  0052e:    	movq   xmm8,xmm0
:00037 %14 = %5 + %14                       [Float][Float]
  00533:    	addsd  xmm8,xmm5
:00038 %15 = literal[2.0]
:00039 %15 = %3 / %15                       [Float][Float]
  00538: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0053f: 00 	test   rdi,0x1
  00546:    	jne    0x3c754
  0054c: 00 	test   rdi,0x2
  00553:    	je     0x590
  00559:    	xorps  xmm9,xmm9
  0055d: 00 	movabs rax,0x8000000000000002
  00567:    	cmp    rdi,rax
  0056a:    	je     0x5a3
  00570:    	mov    rax,rdi
  00573:    	sar    rax,0x3f
  00577:    	add    rax,0x2
  0057b:    	and    rdi,0xfffffffffffffffc
  0057f:    	or     rdi,rax
  00582:    	rol    rdi,0x3d
  00586:    	movq   xmm9,rdi
  0058b:    	jmp    0x5a3
  00590:    	call   0xffffafc5
  00595:    	test   rax,rax
  00598:    	je     0x3c754
  0059e:    	movq   xmm9,xmm0
  005a3:    	movq   rax,xmm9
  005a8:    	test   rax,rax
  005ab:    	je     0xffffafb1
  005b1:    	movq   xmm0,xmm3
  005b5:    	divsd  xmm0,xmm9
  005ba:    	movq   xmm9,xmm0
:00040 %14 = %14 - %15                      [Float][Float]
  005bf:    	subsd  xmm8,xmm9
:00041 %14 = neg %14                        [Float]
  005c4: 00 	xorps  xmm8,XMMWORD PTR [rip+0x11f5]        # 0x17c1
:00042 %15 = literal[2.0]
:00043 %15 = %3 / %15                       [Float][Float]
  005cc: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  005d3: 00 	test   rdi,0x1
  005da:    	jne    0x3c7d0
  005e0: 00 	test   rdi,0x2
  005e7:    	je     0x624
  005ed:    	xorps  xmm9,xmm9
  005f1: 00 	movabs rax,0x8000000000000002
  005fb:    	cmp    rdi,rax
  005fe:    	je     0x637
  00604:    	mov    rax,rdi
  00607:    	sar    rax,0x3f
  0060b:    	add    rax,0x2
  0060f:    	and    rdi,0xfffffffffffffffc
  00613:    	or     rdi,rax
  00616:    	rol    rdi,0x3d
  0061a:    	movq   xmm9,rdi
  0061f:    	jmp    0x637
  00624:    	call   0xffffafc5
  00629:    	test   rax,rax
  0062c:    	je     0x3c7d0
  00632:    	movq   xmm9,xmm0
  00637:    	movq   rax,xmm9
  0063c:    	test   rax,rax
  0063f:    	je     0xffffafb1
  00645:    	movq   xmm0,xmm3
  00649:    	divsd  xmm0,xmm9
  0064e:    	movq   xmm9,xmm0
:00044 %9 = %14 / %15                       [Float][Float]
  00653:    	movq   xmm11,xmm8
  00658:    	movq   rax,xmm9
  0065d:    	test   rax,rax
  00660:    	je     0xffffafb1
  00666:    	divsd  xmm11,xmm9
:00045 %15 = const[Vec]                     [Vec]
  0066b: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd2ff]        # 0xffffd971
  00672: 00 	cmp    rax,QWORD PTR [rip+0x1168]        # 0x17e1
  00679:    	jne    0x3c84c
  0067f: 00 	mov    rax,QWORD PTR [rip+0x114b]        # 0x17d1
  00686: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00046 %16 = %8
:00047 %17 = %9
:00048 %18 = literal[-1.0]
:00049 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
:00050 
  0068d:    	movq   xmm0,xmm10
  00692:    	call   0xffffb0b8
  00697: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0069e:    	movq   xmm0,xmm11
  006a3:    	call   0xffffb0b8
  006a8: ff 	mov    QWORD PTR [rbp-0xb0],rax
  006af: 00 	movabs rax,0xff80000000000006
  006b9: ff 	mov    QWORD PTR [rbp-0xb8],rax
  006c0: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  006c7: 00 	test   rdi,0x7
  006ce:    	jne    0x3c90a
  006d4:    	cmp    DWORD PTR [rdi+0x4],0x26
  006d8:    	jne    0x3c90a
  006de: 26 	cmp    DWORD PTR [rip+0xffffffffffffd280],0x26        # 0xffffd965
  006e5:    	jne    0x3c90a
  006eb: 00 	mov    r9,0x0
  006f2:    	sub    rsp,0x40
  006f6:    	movq   QWORD PTR [rsp],xmm2
  006fb:    	movq   QWORD PTR [rsp+0x8],xmm3
  00701:    	movq   QWORD PTR [rsp+0x10],xmm4
  00707:    	movq   QWORD PTR [rsp+0x18],xmm5
  0070d:    	movq   QWORD PTR [rsp+0x20],xmm6
  00713:    	movq   QWORD PTR [rsp+0x28],xmm7
  00719: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  00720: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  00727:    	mov    rdx,rdi
  0072a:    	mov    rax,QWORD PTR [rbx]
  0072d:    	lea    rdi,[rsp-0x18]
  00732:    	mov    QWORD PTR [rdi],rax
  00735:    	mov    QWORD PTR [rbx],rdi
  00738: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00741:    	mov    QWORD PTR [rsp-0x38],rcx
  00746: ff 	lea    rcx,[rbp-0xa8]
  0074d: 00 	mov    r8,0x3
  00754:    	call   0x3c983
  00759:    	lea    rdi,[rbp-0x8]
  0075d:    	mov    QWORD PTR [rbx],rdi
  00760:    	movq   xmm2,QWORD PTR [rsp]
  00765:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0076b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00771:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00777:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0077d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00783: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0078a: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  00791:    	add    rsp,0x40
  00795: 3c 	movabs r13,0x563c6da08f40
  0079f:    	test   rax,rax
  007a2:    	je     0xffffaf8c
  007a8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00052 %10 = %14.call vnormalize()          [Vec]
:00053 
  007af: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  007b6: 00 	test   rdi,0x7
  007bd:    	jne    0x3c9b5
  007c3:    	cmp    DWORD PTR [rdi+0x4],0x25
  007c7:    	jne    0x3c9b5
  007cd: 26 	cmp    DWORD PTR [rip+0xffffffffffffd191],0x26        # 0xffffd965
  007d4:    	jne    0x3c9b5
  007da:    	sub    rsp,0x40
  007de:    	movq   QWORD PTR [rsp],xmm2
  007e3:    	movq   QWORD PTR [rsp+0x8],xmm3
  007e9:    	movq   QWORD PTR [rsp+0x10],xmm4
  007ef:    	movq   QWORD PTR [rsp+0x18],xmm5
  007f5:    	movq   QWORD PTR [rsp+0x20],xmm6
  007fb:    	movq   QWORD PTR [rsp+0x28],xmm7
  00801: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  00808: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  0080f:    	mov    rax,QWORD PTR [rbx]
  00812:    	lea    rdi,[rsp-0x18]
  00817:    	mov    QWORD PTR [rdi],rax
  0081a:    	mov    QWORD PTR [rbx],rdi
  0081d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00826:    	mov    QWORD PTR [rsp-0x38],rcx
  0082b: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00832:    	mov    QWORD PTR [rsp-0x38],rax
  00837: 00 	mov    rdi,0x0
  0083e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00847: 07 	movabs rax,0x70000003d
  00851:    	mov    QWORD PTR [rsp-0x28],rax
  00856: 3c 	movabs r13,0x563c6d9d26a0
  00860:    	call   0xffffe22a
  00865:    	lea    rdi,[rbp-0x8]
  00869:    	mov    QWORD PTR [rbx],rdi
  0086c:    	movq   xmm2,QWORD PTR [rsp]
  00871:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00877:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0087d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00883:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00889:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0088f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  00896: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0089d:    	add    rsp,0x40
  008a1: 3c 	movabs r13,0x563c6da08f70
  008ab:    	test   rax,rax
  008ae:    	je     0xffffaf8c
  008b4:    	mov    QWORD PTR [rbp-0x78],rax
:00055 %14 = const[Ray]                     [Ray]
  008b8: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd0b2]        # 0xffffd971
  008bf: 00 	cmp    rax,QWORD PTR [rip+0xf3b]        # 0x1801
  008c6:    	jne    0x3ca2e
  008cc: 00 	mov    rax,QWORD PTR [rip+0xf1e]        # 0x17f1
  008d3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00056 %16 = const[Vec]                     [Vec]
  008da: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd090]        # 0xffffd971
  008e1: 00 	cmp    rax,QWORD PTR [rip+0xf39]        # 0x1821
  008e8:    	jne    0x3cade
  008ee: 00 	mov    rax,QWORD PTR [rip+0xf1c]        # 0x1811
  008f5: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00057 %17 = literal[0.0]
:00058 %18 = literal[0.0]
:00059 %19 = literal[0.0]
:00060 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
:00061 
  008fc: 00 	movabs rax,0x8000000000000002
  00906: ff 	mov    QWORD PTR [rbp-0xb0],rax
  0090d: 00 	movabs rax,0x8000000000000002
  00917: ff 	mov    QWORD PTR [rbp-0xb8],rax
  0091e: 00 	movabs rax,0x8000000000000002
  00928: ff 	mov    QWORD PTR [rbp-0xc0],rax
  0092f: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  00936: 00 	test   rdi,0x7
  0093d:    	jne    0x3cb8e
  00943:    	cmp    DWORD PTR [rdi+0x4],0x26
  00947:    	jne    0x3cb8e
  0094d: 26 	cmp    DWORD PTR [rip+0xffffffffffffd011],0x26        # 0xffffd965
  00954:    	jne    0x3cb8e
  0095a: 00 	mov    r9,0x0
  00961:    	sub    rsp,0x40
  00965:    	movq   QWORD PTR [rsp],xmm2
  0096a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00970:    	movq   QWORD PTR [rsp+0x10],xmm4
  00976:    	movq   QWORD PTR [rsp+0x18],xmm5
  0097c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00982:    	movq   QWORD PTR [rsp+0x28],xmm7
  00988: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0098f: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  00996:    	mov    rdx,rdi
  00999:    	mov    rax,QWORD PTR [rbx]
  0099c:    	lea    rdi,[rsp-0x18]
  009a1:    	mov    QWORD PTR [rdi],rax
  009a4:    	mov    QWORD PTR [rbx],rdi
  009a7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009b0:    	mov    QWORD PTR [rsp-0x38],rcx
  009b5: ff 	lea    rcx,[rbp-0xb0]
  009bc: 00 	mov    r8,0x3
  009c3:    	call   0x3cc07
  009c8:    	lea    rdi,[rbp-0x8]
  009cc:    	mov    QWORD PTR [rbx],rdi
  009cf:    	movq   xmm2,QWORD PTR [rsp]
  009d4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009da:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009e0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009e6:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009ec:    	movq   xmm7,QWORD PTR [rsp+0x28]
  009f2: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  009f9: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  00a00:    	add    rsp,0x40
  00a04: 3c 	movabs r13,0x563c6da08ff0
  00a0e:    	test   rax,rax
  00a11:    	je     0xffffaf8c
  00a17: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00063 %16 = %10
  00a1e:    	mov    rax,QWORD PTR [rbp-0x78]
  00a22: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00064 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
:00065 
  00a29: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a30: 00 	test   rdi,0x7
  00a37:    	jne    0x3cc39
  00a3d:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00a41:    	jne    0x3cc39
  00a47: 26 	cmp    DWORD PTR [rip+0xffffffffffffcf17],0x26        # 0xffffd965
  00a4e:    	jne    0x3cc39
  00a54: 00 	mov    r9,0x0
  00a5b:    	sub    rsp,0x40
  00a5f:    	movq   QWORD PTR [rsp],xmm2
  00a64:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a6a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a70:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a76:    	movq   QWORD PTR [rsp+0x20],xmm6
  00a7c:    	movq   QWORD PTR [rsp+0x28],xmm7
  00a82: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  00a89: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  00a90:    	mov    rdx,rdi
  00a93:    	mov    rax,QWORD PTR [rbx]
  00a96:    	lea    rdi,[rsp-0x18]
  00a9b:    	mov    QWORD PTR [rdi],rax
  00a9e:    	mov    QWORD PTR [rbx],rdi
  00aa1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00aaa:    	mov    QWORD PTR [rsp-0x38],rcx
  00aaf: ff 	lea    rcx,[rbp-0xa0]
  00ab6: 00 	mov    r8,0x2
  00abd:    	call   0x3ccb2
  00ac2:    	lea    rdi,[rbp-0x8]
  00ac6:    	mov    QWORD PTR [rbx],rdi
  00ac9:    	movq   xmm2,QWORD PTR [rsp]
  00ace:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ad4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ada:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ae0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ae6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00aec: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  00af3: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  00afa:    	add    rsp,0x40
  00afe: 3c 	movabs r13,0x563c6da09030
  00b08:    	test   rax,rax
  00b0b:    	je     0xffffaf8c
  00b11:    	mov    QWORD PTR [rbp-0x80],rax
:00067 %14 = const[Isect]                   [Isect]
  00b15: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffce55]        # 0xffffd971
  00b1c: 00 	cmp    rax,QWORD PTR [rip+0xd1e]        # 0x1841
  00b23:    	jne    0x3cce4
  00b29: 00 	mov    rax,QWORD PTR [rip+0xd01]        # 0x1831
  00b30: ff 	mov    QWORD PTR [rbp-0x98],rax
:00068 %12 = %14.call new()                 [#<Class:Isect>]
:00069 
  00b37: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00b3e: 00 	test   rdi,0x7
  00b45:    	jne    0x3cd94
  00b4b:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00b4f:    	jne    0x3cd94
  00b55: 26 	cmp    DWORD PTR [rip+0xffffffffffffce09],0x26        # 0xffffd965
  00b5c:    	jne    0x3cd94
  00b62: 00 	mov    r9,0x0
  00b69:    	sub    rsp,0x40
  00b6d:    	movq   QWORD PTR [rsp],xmm2
  00b72:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b78:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b7e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b84:    	movq   QWORD PTR [rsp+0x20],xmm6
  00b8a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00b90: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  00b97: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  00b9e:    	mov    rdx,rdi
  00ba1:    	mov    rax,QWORD PTR [rbx]
  00ba4:    	lea    rdi,[rsp-0x18]
  00ba9:    	mov    QWORD PTR [rdi],rax
  00bac:    	mov    QWORD PTR [rbx],rdi
  00baf: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00bb8:    	mov    QWORD PTR [rsp-0x38],rcx
  00bbd: ff 	lea    rcx,[rbp-0xa0]
  00bc4: 00 	mov    r8,0x0
  00bcb:    	call   0x3ce0d
  00bd0:    	lea    rdi,[rbp-0x8]
  00bd4:    	mov    QWORD PTR [rbx],rdi
  00bd7:    	movq   xmm2,QWORD PTR [rsp]
  00bdc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00be2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00be8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00bee:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00bf4:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00bfa: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  00c01: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  00c08:    	add    rsp,0x40
  00c0c: 3c 	movabs r13,0x563c6da09070
  00c16:    	test   rax,rax
  00c19:    	je     0xffffaf8c
  00c1f: ff 	mov    QWORD PTR [rbp-0x88],rax
:00071 %14 = @spheres: Scene[IvarId(0)]
  00c26:    	mov    rdi,QWORD PTR [rbp-0x28]
  00c2a:    	cmp    WORD PTR [rdi+0x2],0x3
  00c2f:    	jne    0x3ce3f
  00c35:    	mov    rax,QWORD PTR [rdi+0x10]
  00c39: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 %15 = 0: i32
  00c40: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00073 %14 = %14.[%15]
  00c4b:    	sub    rsp,0x40
  00c4f:    	movq   QWORD PTR [rsp],xmm2
  00c54:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c5a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c60:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c66:    	movq   QWORD PTR [rsp+0x20],xmm6
  00c6c:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c72: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  00c79: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  00c80: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00c87: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00c8e:    	mov    rdi,rbx
  00c91:    	mov    rsi,r12
  00c94: 3c 	movabs rax,0x563c6be6b030
  00c9e:    	call   rax
  00ca0:    	movq   xmm2,QWORD PTR [rsp]
  00ca5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cab:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cb1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cb7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00cbd:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00cc3: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  00cca: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  00cd1:    	add    rsp,0x40
  00cd5: 3c 	movabs r13,0x563c6da090b0
  00cdf:    	test   rax,rax
  00ce2:    	je     0xffffaf8c
  00ce8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00074 %15 = %11
  00cef:    	mov    rax,QWORD PTR [rbp-0x80]
  00cf3: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00075 %16 = %12
  00cfa: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00d01: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00076 _ = %14.call intersect(%15; 2)       [Sphere]
:00077 
  00d08: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00d0f: 00 	test   rdi,0x7
  00d16:    	jne    0x3cebf
  00d1c:    	cmp    DWORD PTR [rdi+0x4],0x27
  00d20:    	jne    0x3cebf
  00d26: 26 	cmp    DWORD PTR [rip+0xffffffffffffcc38],0x26        # 0xffffd965
  00d2d:    	jne    0x3cebf
  00d33:    	sub    rsp,0x40
  00d37:    	movq   QWORD PTR [rsp],xmm2
  00d3c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d42:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d48:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d4e:    	movq   QWORD PTR [rsp+0x20],xmm6
  00d54:    	movq   QWORD PTR [rsp+0x28],xmm7
  00d5a: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  00d61: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  00d68:    	mov    rax,QWORD PTR [rbx]
  00d6b:    	lea    rdi,[rsp-0x18]
  00d70:    	mov    QWORD PTR [rdi],rax
  00d73:    	mov    QWORD PTR [rbx],rdi
  00d76: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d7f:    	mov    QWORD PTR [rsp-0x38],rcx
  00d84: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00d8b:    	mov    QWORD PTR [rsp-0x38],rax
  00d90: 00 	mov    rdi,0x2
  00d97: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00d9e:    	mov    QWORD PTR [rsp-0x40],rax
  00da3: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00daa:    	mov    QWORD PTR [rsp-0x48],rax
  00daf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00db8: 10 	movabs rax,0x100000003f
  00dc2:    	mov    QWORD PTR [rsp-0x28],rax
  00dc7: 3c 	movabs r13,0x563c6d9c26a0
  00dd1:    	call   0xffffe532
  00dd6:    	lea    rdi,[rbp-0x8]
  00dda:    	mov    QWORD PTR [rbx],rdi
  00ddd:    	movq   xmm2,QWORD PTR [rsp]
  00de2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00de8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00dee:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00df4:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00dfa:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e00: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  00e07: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  00e0e:    	add    rsp,0x40
  00e12: 3c 	movabs r13,0x563c6da090f0
  00e1c:    	test   rax,rax
  00e1f:    	je     0xffffaf8c
:00079 %14 = @spheres: Scene[IvarId(0)]
  00e25:    	mov    rdi,QWORD PTR [rbp-0x28]
  00e29:    	cmp    WORD PTR [rdi+0x2],0x3
  00e2e:    	jne    0x3cf38
  00e34:    	mov    rax,QWORD PTR [rdi+0x10]
  00e38: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 %15 = 1: i32
  00e3f: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00081 %14 = %14.[%15]
  00e4a:    	sub    rsp,0x40
  00e4e:    	movq   QWORD PTR [rsp],xmm2
  00e53:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e59:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e5f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e65:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e6b:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e71: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  00e78: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  00e7f: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00e86: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00e8d:    	mov    rdi,rbx
  00e90:    	mov    rsi,r12
  00e93: 3c 	movabs rax,0x563c6be6b030
  00e9d:    	call   rax
  00e9f:    	movq   xmm2,QWORD PTR [rsp]
  00ea4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00eaa:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00eb0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00eb6:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ebc:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00ec2: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  00ec9: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  00ed0:    	add    rsp,0x40
  00ed4: 3c 	movabs r13,0x563c6da09130
  00ede:    	test   rax,rax
  00ee1:    	je     0xffffaf8c
  00ee7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00082 %15 = %11
  00eee:    	mov    rax,QWORD PTR [rbp-0x80]
  00ef2: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00083 %16 = %12
  00ef9: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00f00: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00084 _ = %14.call intersect(%15; 2)       [Sphere]
:00085 
  00f07: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00f0e: 00 	test   rdi,0x7
  00f15:    	jne    0x3cfb8
  00f1b:    	cmp    DWORD PTR [rdi+0x4],0x27
  00f1f:    	jne    0x3cfb8
  00f25: 26 	cmp    DWORD PTR [rip+0xffffffffffffca39],0x26        # 0xffffd965
  00f2c:    	jne    0x3cfb8
  00f32:    	sub    rsp,0x40
  00f36:    	movq   QWORD PTR [rsp],xmm2
  00f3b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f41:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f47:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f4d:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f53:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f59: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  00f60: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  00f67:    	mov    rax,QWORD PTR [rbx]
  00f6a:    	lea    rdi,[rsp-0x18]
  00f6f:    	mov    QWORD PTR [rdi],rax
  00f72:    	mov    QWORD PTR [rbx],rdi
  00f75: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f7e:    	mov    QWORD PTR [rsp-0x38],rcx
  00f83: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00f8a:    	mov    QWORD PTR [rsp-0x38],rax
  00f8f: 00 	mov    rdi,0x2
  00f96: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00f9d:    	mov    QWORD PTR [rsp-0x40],rax
  00fa2: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00fa9:    	mov    QWORD PTR [rsp-0x48],rax
  00fae: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fb7: 10 	movabs rax,0x100000003f
  00fc1:    	mov    QWORD PTR [rsp-0x28],rax
  00fc6: 3c 	movabs r13,0x563c6d9c26a0
  00fd0:    	call   0xffffe532
  00fd5:    	lea    rdi,[rbp-0x8]
  00fd9:    	mov    QWORD PTR [rbx],rdi
  00fdc:    	movq   xmm2,QWORD PTR [rsp]
  00fe1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fe7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fed:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ff3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ff9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00fff: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01006: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0100d:    	add    rsp,0x40
  01011: 3c 	movabs r13,0x563c6da09170
  0101b:    	test   rax,rax
  0101e:    	je     0xffffaf8c
:00087 %14 = @spheres: Scene[IvarId(0)]
  01024:    	mov    rdi,QWORD PTR [rbp-0x28]
  01028:    	cmp    WORD PTR [rdi+0x2],0x3
  0102d:    	jne    0x3d031
  01033:    	mov    rax,QWORD PTR [rdi+0x10]
  01037: ff 	mov    QWORD PTR [rbp-0x98],rax
:00088 %15 = 2: i32
  0103e: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00089 %14 = %14.[%15]
  01049:    	sub    rsp,0x40
  0104d:    	movq   QWORD PTR [rsp],xmm2
  01052:    	movq   QWORD PTR [rsp+0x8],xmm3
  01058:    	movq   QWORD PTR [rsp+0x10],xmm4
  0105e:    	movq   QWORD PTR [rsp+0x18],xmm5
  01064:    	movq   QWORD PTR [rsp+0x20],xmm6
  0106a:    	movq   QWORD PTR [rsp+0x28],xmm7
  01070: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01077: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  0107e: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01085: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0108c:    	mov    rdi,rbx
  0108f:    	mov    rsi,r12
  01092: 3c 	movabs rax,0x563c6be6b030
  0109c:    	call   rax
  0109e:    	movq   xmm2,QWORD PTR [rsp]
  010a3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010a9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010af:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010b5:    	movq   xmm6,QWORD PTR [rsp+0x20]
  010bb:    	movq   xmm7,QWORD PTR [rsp+0x28]
  010c1: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  010c8: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  010cf:    	add    rsp,0x40
  010d3: 3c 	movabs r13,0x563c6da091b0
  010dd:    	test   rax,rax
  010e0:    	je     0xffffaf8c
  010e6: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %15 = %11
  010ed:    	mov    rax,QWORD PTR [rbp-0x80]
  010f1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00091 %16 = %12
  010f8: ff 	mov    rax,QWORD PTR [rbp-0x88]
  010ff: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00092 _ = %14.call intersect(%15; 2)       [Sphere]
:00093 
  01106: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0110d: 00 	test   rdi,0x7
  01114:    	jne    0x3d0b1
  0111a:    	cmp    DWORD PTR [rdi+0x4],0x27
  0111e:    	jne    0x3d0b1
  01124: 26 	cmp    DWORD PTR [rip+0xffffffffffffc83a],0x26        # 0xffffd965
  0112b:    	jne    0x3d0b1
  01131:    	sub    rsp,0x40
  01135:    	movq   QWORD PTR [rsp],xmm2
  0113a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01140:    	movq   QWORD PTR [rsp+0x10],xmm4
  01146:    	movq   QWORD PTR [rsp+0x18],xmm5
  0114c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01152:    	movq   QWORD PTR [rsp+0x28],xmm7
  01158: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0115f: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01166:    	mov    rax,QWORD PTR [rbx]
  01169:    	lea    rdi,[rsp-0x18]
  0116e:    	mov    QWORD PTR [rdi],rax
  01171:    	mov    QWORD PTR [rbx],rdi
  01174: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0117d:    	mov    QWORD PTR [rsp-0x38],rcx
  01182: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01189:    	mov    QWORD PTR [rsp-0x38],rax
  0118e: 00 	mov    rdi,0x2
  01195: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0119c:    	mov    QWORD PTR [rsp-0x40],rax
  011a1: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  011a8:    	mov    QWORD PTR [rsp-0x48],rax
  011ad: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011b6: 10 	movabs rax,0x100000003f
  011c0:    	mov    QWORD PTR [rsp-0x28],rax
  011c5: 3c 	movabs r13,0x563c6d9c26a0
  011cf:    	call   0xffffe532
  011d4:    	lea    rdi,[rbp-0x8]
  011d8:    	mov    QWORD PTR [rbx],rdi
  011db:    	movq   xmm2,QWORD PTR [rsp]
  011e0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  011e6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  011ec:    	movq   xmm5,QWORD PTR [rsp+0x18]
  011f2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  011f8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  011fe: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01205: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0120c:    	add    rsp,0x40
  01210: 3c 	movabs r13,0x563c6da091f0
  0121a:    	test   rax,rax
  0121d:    	je     0xffffaf8c
:00095 %14 = @plane: Scene[IvarId(1)]
  01223:    	mov    rdi,QWORD PTR [rbp-0x28]
  01227:    	cmp    WORD PTR [rdi+0x2],0x3
  0122c:    	jne    0x3d12a
  01232:    	mov    rax,QWORD PTR [rdi+0x18]
  01236: ff 	mov    QWORD PTR [rbp-0x98],rax
:00096 %15 = %11
  0123d:    	mov    rax,QWORD PTR [rbp-0x80]
  01241: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00097 %16 = %12
  01248: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0124f: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00098 _ = %14.call intersect(%15; 2)       [Plane]
:00099 
  01256: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0125d: 00 	test   rdi,0x7
  01264:    	jne    0x3d1aa
  0126a:    	cmp    DWORD PTR [rdi+0x4],0x29
  0126e:    	jne    0x3d1aa
  01274: 26 	cmp    DWORD PTR [rip+0xffffffffffffc6ea],0x26        # 0xffffd965
  0127b:    	jne    0x3d1aa
  01281:    	sub    rsp,0x40
  01285:    	movq   QWORD PTR [rsp],xmm2
  0128a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01290:    	movq   QWORD PTR [rsp+0x10],xmm4
  01296:    	movq   QWORD PTR [rsp+0x18],xmm5
  0129c:    	movq   QWORD PTR [rsp+0x20],xmm6
  012a2:    	movq   QWORD PTR [rsp+0x28],xmm7
  012a8: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  012af: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  012b6:    	mov    rax,QWORD PTR [rbx]
  012b9:    	lea    rdi,[rsp-0x18]
  012be:    	mov    QWORD PTR [rdi],rax
  012c1:    	mov    QWORD PTR [rbx],rdi
  012c4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012cd:    	mov    QWORD PTR [rsp-0x38],rcx
  012d2: ff 	mov    rax,QWORD PTR [rbp-0x98]
  012d9:    	mov    QWORD PTR [rsp-0x38],rax
  012de: 00 	mov    rdi,0x2
  012e5: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  012ec:    	mov    QWORD PTR [rsp-0x40],rax
  012f1: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  012f8:    	mov    QWORD PTR [rsp-0x48],rax
  012fd: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01306: 0e 	movabs rax,0xe00000041
  01310:    	mov    QWORD PTR [rsp-0x28],rax
  01315: 3c 	movabs r13,0x563c6d9c4540
  0131f:    	call   0xffffeb1f
  01324:    	lea    rdi,[rbp-0x8]
  01328:    	mov    QWORD PTR [rbx],rdi
  0132b:    	movq   xmm2,QWORD PTR [rsp]
  01330:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01336:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0133c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01342:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01348:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0134e: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01355: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0135c:    	add    rsp,0x40
  01360: 3c 	movabs r13,0x563c6da09250
  0136a:    	test   rax,rax
  0136d:    	je     0xffffaf8c
:00101 %14 = %12.call hit()                 [Isect]
:00102 
  01373: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0137a: 00 	test   rdi,0x7
  01381:    	jne    0x3d223
  01387:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0138b:    	jne    0x3d223
  01391: 26 	cmp    DWORD PTR [rip+0xffffffffffffc5cd],0x26        # 0xffffd965
  01398:    	jne    0x3d223
  0139e:    	mov    esi,DWORD PTR [rip+0x4a9]        # 0x184d
  013a4:    	cmp    esi,0xffffffff
  013a7:    	je     0x3d29c
  013ad:    	cmp    WORD PTR [rdi+0x2],0x3
  013b2:    	jne    0x13cb
  013b8:    	cmp    esi,0x6
  013bb:    	jge    0x13cb
  013c1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013c6:    	jmp    0x1441
  013cb:    	sub    rsp,0x40
  013cf:    	movq   QWORD PTR [rsp],xmm2
  013d4:    	movq   QWORD PTR [rsp+0x8],xmm3
  013da:    	movq   QWORD PTR [rsp+0x10],xmm4
  013e0:    	movq   QWORD PTR [rsp+0x18],xmm5
  013e6:    	movq   QWORD PTR [rsp+0x20],xmm6
  013ec:    	movq   QWORD PTR [rsp+0x28],xmm7
  013f2: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  013f9: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01400: 3c 	movabs rax,0x563c6be0f180
  0140a:    	call   rax
  0140c:    	movq   xmm2,QWORD PTR [rsp]
  01411:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01417:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0141d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01423:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01429:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0142f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01436: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0143d:    	add    rsp,0x40
  01441: ff 	mov    QWORD PTR [rbp-0x98],rax
:00104 condnotbr %14 =>:00147
  01448: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0144f:    	or     rax,0x10
  01453:    	cmp    rax,0x14
  01457:    	je     0x17ac
:00105 %14 = %12
  0145d: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01464: ff 	mov    QWORD PTR [rbp-0x98],rax
:00106 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
:00107 
  0146b: 00 	mov    rdi,0x4
  01472: 01 	sub    DWORD PTR [rip+0x3d8],0x1        # 0x1851
  01479:    	jne    0x3d32f
  0147f:    	mov    rdi,r12
  01482:    	mov    esi,DWORD PTR [rbp-0x18]
  01485:    	mov    rdx,QWORD PTR [rbp-0x28]
  01489: 3c 	movabs rax,0x563c6be70eb0
  01493:    	call   rax
  01495: 00 	mov    rdi,0x4
  0149c:    	jmp    0x3d32f
:00109 %14 = dynvar(2, %2)
  014a1:    	mov    rax,QWORD PTR [rbp-0x10]
  014a5:    	mov    rax,QWORD PTR [rax]
  014a8:    	mov    rax,QWORD PTR [rax-0x28]
  014ac: ff 	mov    QWORD PTR [rbp-0x98],rax
:00110 %16 = dynvar(2, %2)
  014b3:    	mov    rax,QWORD PTR [rbp-0x10]
  014b7:    	mov    rax,QWORD PTR [rax]
  014ba:    	mov    rax,QWORD PTR [rax-0x28]
  014be: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00111 %15 = %16.call x()                   [<INVALID>]
:00112 
  014c5: 00 	mov    rdi,0x4
  014cc: 01 	sub    DWORD PTR [rip+0x382],0x1        # 0x1855
  014d3:    	jne    0x3d3a8
  014d9:    	mov    rdi,r12
  014dc:    	mov    esi,DWORD PTR [rbp-0x18]
  014df:    	mov    rdx,QWORD PTR [rbp-0x28]
  014e3: 3c 	movabs rax,0x563c6be70eb0
  014ed:    	call   rax
  014ef: 00 	mov    rdi,0x4
  014f6:    	jmp    0x3d3a8
:00114 %16 = %13.call x()                   [<INVALID>]
:00115 
  014fb: 00 	mov    rdi,0x4
  01502: 01 	sub    DWORD PTR [rip+0x350],0x1        # 0x1859
  01509:    	jne    0x3d421
  0150f:    	mov    rdi,r12
  01512:    	mov    esi,DWORD PTR [rbp-0x18]
  01515:    	mov    rdx,QWORD PTR [rbp-0x28]
  01519: 3c 	movabs rax,0x563c6be70eb0
  01523:    	call   rax
  01525: 00 	mov    rdi,0x4
  0152c:    	jmp    0x3d421
:00117 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  01531: 00 	mov    rdi,0x4
  01538: 01 	sub    DWORD PTR [rip+0x31e],0x1        # 0x185d
  0153f:    	jne    0x3d49a
  01545:    	mov    rdi,r12
  01548:    	mov    esi,DWORD PTR [rbp-0x18]
  0154b:    	mov    rdx,QWORD PTR [rbp-0x28]
  0154f: 3c 	movabs rax,0x563c6be70eb0
  01559:    	call   rax
  0155b: 00 	mov    rdi,0x4
  01562:    	jmp    0x3d49a
:00118 _ = %14.call x=(%15; 1)              [<INVALID>]
:00119 
  01567: 00 	mov    rdi,0x4
  0156e: 01 	sub    DWORD PTR [rip+0x2ec],0x1        # 0x1861
  01575:    	jne    0x3d513
  0157b:    	mov    rdi,r12
  0157e:    	mov    esi,DWORD PTR [rbp-0x18]
  01581:    	mov    rdx,QWORD PTR [rbp-0x28]
  01585: 3c 	movabs rax,0x563c6be70eb0
  0158f:    	call   rax
  01591: 00 	mov    rdi,0x4
  01598:    	jmp    0x3d513
:00121 %14 = dynvar(2, %2)
  0159d:    	mov    rax,QWORD PTR [rbp-0x10]
  015a1:    	mov    rax,QWORD PTR [rax]
  015a4:    	mov    rax,QWORD PTR [rax-0x28]
  015a8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00122 %16 = dynvar(2, %2)
  015af:    	mov    rax,QWORD PTR [rbp-0x10]
  015b3:    	mov    rax,QWORD PTR [rax]
  015b6:    	mov    rax,QWORD PTR [rax-0x28]
  015ba: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00123 %15 = %16.call y()                   [<INVALID>]
:00124 
  015c1: 00 	mov    rdi,0x4
  015c8: 01 	sub    DWORD PTR [rip+0x296],0x1        # 0x1865
  015cf:    	jne    0x3d58c
  015d5:    	mov    rdi,r12
  015d8:    	mov    esi,DWORD PTR [rbp-0x18]
  015db:    	mov    rdx,QWORD PTR [rbp-0x28]
  015df: 3c 	movabs rax,0x563c6be70eb0
  015e9:    	call   rax
  015eb: 00 	mov    rdi,0x4
  015f2:    	jmp    0x3d58c
:00126 %16 = %13.call y()                   [<INVALID>]
:00127 
  015f7: 00 	mov    rdi,0x4
  015fe: 01 	sub    DWORD PTR [rip+0x264],0x1        # 0x1869
  01605:    	jne    0x3d605
  0160b:    	mov    rdi,r12
  0160e:    	mov    esi,DWORD PTR [rbp-0x18]
  01611:    	mov    rdx,QWORD PTR [rbp-0x28]
  01615: 3c 	movabs rax,0x563c6be70eb0
  0161f:    	call   rax
  01621: 00 	mov    rdi,0x4
  01628:    	jmp    0x3d605
:00129 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  0162d: 00 	mov    rdi,0x4
  01634: 01 	sub    DWORD PTR [rip+0x232],0x1        # 0x186d
  0163b:    	jne    0x3d67e
  01641:    	mov    rdi,r12
  01644:    	mov    esi,DWORD PTR [rbp-0x18]
  01647:    	mov    rdx,QWORD PTR [rbp-0x28]
  0164b: 3c 	movabs rax,0x563c6be70eb0
  01655:    	call   rax
  01657: 00 	mov    rdi,0x4
  0165e:    	jmp    0x3d67e
:00130 _ = %14.call y=(%15; 1)              [<INVALID>]
:00131 
  01663: 00 	mov    rdi,0x4
  0166a: 01 	sub    DWORD PTR [rip+0x200],0x1        # 0x1871
  01671:    	jne    0x3d6f7
  01677:    	mov    rdi,r12
  0167a:    	mov    esi,DWORD PTR [rbp-0x18]
  0167d:    	mov    rdx,QWORD PTR [rbp-0x28]
  01681: 3c 	movabs rax,0x563c6be70eb0
  0168b:    	call   rax
  0168d: 00 	mov    rdi,0x4
  01694:    	jmp    0x3d6f7
:00133 %14 = dynvar(2, %2)
  01699:    	mov    rax,QWORD PTR [rbp-0x10]
  0169d:    	mov    rax,QWORD PTR [rax]
  016a0:    	mov    rax,QWORD PTR [rax-0x28]
  016a4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00134 %16 = dynvar(2, %2)
  016ab:    	mov    rax,QWORD PTR [rbp-0x10]
  016af:    	mov    rax,QWORD PTR [rax]
  016b2:    	mov    rax,QWORD PTR [rax-0x28]
  016b6: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00135 %15 = %16.call z()                   [<INVALID>]
:00136 
  016bd: 00 	mov    rdi,0x4
  016c4: 01 	sub    DWORD PTR [rip+0x1aa],0x1        # 0x1875
  016cb:    	jne    0x3d770
  016d1:    	mov    rdi,r12
  016d4:    	mov    esi,DWORD PTR [rbp-0x18]
  016d7:    	mov    rdx,QWORD PTR [rbp-0x28]
  016db: 3c 	movabs rax,0x563c6be70eb0
  016e5:    	call   rax
  016e7: 00 	mov    rdi,0x4
  016ee:    	jmp    0x3d770
:00138 %16 = %13.call z()                   [<INVALID>]
:00139 
  016f3: 00 	mov    rdi,0x4
  016fa: 01 	sub    DWORD PTR [rip+0x178],0x1        # 0x1879
  01701:    	jne    0x3d7e9
  01707:    	mov    rdi,r12
  0170a:    	mov    esi,DWORD PTR [rbp-0x18]
  0170d:    	mov    rdx,QWORD PTR [rbp-0x28]
  01711: 3c 	movabs rax,0x563c6be70eb0
  0171b:    	call   rax
  0171d: 00 	mov    rdi,0x4
  01724:    	jmp    0x3d7e9
:00141 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  01729: 00 	mov    rdi,0x4
  01730: 01 	sub    DWORD PTR [rip+0x146],0x1        # 0x187d
  01737:    	jne    0x3d862
  0173d:    	mov    rdi,r12
  01740:    	mov    esi,DWORD PTR [rbp-0x18]
  01743:    	mov    rdx,QWORD PTR [rbp-0x28]
  01747: 3c 	movabs rax,0x563c6be70eb0
  01751:    	call   rax
  01753: 00 	mov    rdi,0x4
  0175a:    	jmp    0x3d862
:00142 _ = %14.call z=(%15; 1)              [<INVALID>]
:00143 
  0175f: 00 	mov    rdi,0x4
  01766: 01 	sub    DWORD PTR [rip+0x114],0x1        # 0x1881
  0176d:    	jne    0x3d8db
  01773:    	mov    rdi,r12
  01776:    	mov    esi,DWORD PTR [rbp-0x18]
  01779:    	mov    rdx,QWORD PTR [rbp-0x28]
  0177d: 3c 	movabs rax,0x563c6be70eb0
  01787:    	call   rax
  01789: 00 	mov    rdi,0x4
  01790:    	jmp    0x3d8db
:00145 %14 = %15
  01795: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0179c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00146 ret %14
  017a3: ff 	mov    rax,QWORD PTR [rbp-0x98]
  017aa:    	leave  
  017ab:    	ret    
:00147 %14 = nil
  017ac: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00148 ret %14
  017b7: ff 	mov    rax,QWORD PTR [rbp-0x98]
  017be:    	leave  
  017bf:    	ret    
undefined method `/' for 256.0:Float
benchmark/app_aobench.rb:250
            px = (xf + (uf / nsf) - (wf / 2.0)) / (wf / 2.0)
                                     ^^^^^^^^
benchmark/app_aobench.rb:239
          nsubsamples.times do |u|
                      ^^^^^^
benchmark/app_aobench.rb:238
        nsubsamples.times do |v|
                    ^^^^^^
benchmark/app_aobench.rb:234
      w.times do |x|
        ^^^^^^
benchmark/app_aobench.rb:233
    h.times do |y|
      ^^^^^^
benchmark/app_aobench.rb:295
  Scene.new.render(IMAGE_WIDTH, IMAGE_HEIGHT, NSUBSAMPLES)
            ^^^^^^^
