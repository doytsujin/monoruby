==> start whole compile: initialize FuncId(55) self_class:Vec start:[00000] bytecode:0x55c850b0d5c0
<== finished compile. elapsed:13.5µs
offset:Pos(12225) code: 126 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x48],0x4
  00010: mov    rdi,QWORD PTR [rbp-0x28]
  00014: test   rdi,0x7
  0001b: jne    0x3d5ab
  00021: cmp    DWORD PTR [rdi+0x4],0x25
  00025: jne    0x3d5ab
:00000 @x: Vec[IvarId(0)] = %1
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: cmp    WORD PTR [rdi+0x2],0x3
  00034: jne    0x3d5ba
  0003a: mov    rax,QWORD PTR [rbp-0x30]
  0003e: mov    QWORD PTR [rdi+0x10],rax
:00001 @y: Vec[IvarId(1)] = %2
  00042: mov    rdi,QWORD PTR [rbp-0x28]
  00046: cmp    WORD PTR [rdi+0x2],0x3
  0004b: jne    0x3d5d4
  00051: mov    rax,QWORD PTR [rbp-0x38]
  00055: mov    QWORD PTR [rdi+0x18],rax
:00002 @z: Vec[IvarId(2)] = %3
  00059: mov    rdi,QWORD PTR [rbp-0x28]
  0005d: cmp    WORD PTR [rdi+0x2],0x3
  00062: jne    0x3d5ee
  00068: mov    rax,QWORD PTR [rbp-0x40]
  0006c: mov    QWORD PTR [rdi+0x20],rax
:00003 %4 = %3
  00070: mov    rax,QWORD PTR [rbp-0x40]
  00074: mov    QWORD PTR [rbp-0x48],rax
:00004 ret %4
  00078: mov    rax,QWORD PTR [rbp-0x48]
  0007c: leave  
  0007d: ret    
==> start whole compile: vdot FuncId(59) self_class:Vec start:[00000] bytecode:0x55c850b7b010
<== finished compile. elapsed:32.6µs
offset:Pos(14157) code: 1113 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x3ce7c
  0002c: cmp    DWORD PTR [rdi+0x4],0x25
  00030: jne    0x3ce7c
:00000 %2 = @x: Vec[IvarId(0)]
  00036: mov    rdi,QWORD PTR [rbp-0x28]
  0003a: cmp    WORD PTR [rdi+0x2],0x3
  0003f: jne    0x3ce8b
  00045: mov    rax,QWORD PTR [rdi+0x10]
  00049: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = %1.call x()                     [Vec]
:00002 
  0004d: mov    rdi,QWORD PTR [rbp-0x30]
  00051: test   rdi,0x7
  00058: jne    0x3cea1
  0005e: cmp    DWORD PTR [rdi+0x4],0x25
  00062: jne    0x3cea1
  00068: cmp    DWORD PTR [rip+0xfffffffffffff24f],0x26        # 0xfffff2be
  0006f: jne    0x3cea1
  00075: mov    esi,DWORD PTR [rip+0x3e2]        # 0x45d
  0007b: cmp    esi,0xffffffff
  0007e: je     0x3ceb0
  00084: cmp    WORD PTR [rdi+0x2],0x3
  00089: jne    0xa2
  0008f: cmp    esi,0x6
  00092: jge    0xa2
  00098: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0009d: jmp    0xae
  000a2: movabs rax,0x55c84f4d3440
  000ac: call   rax
  000ae: mov    QWORD PTR [rbp-0x40],rax
:00004 %2 = %2 * %3                         [Float][Float]
  000b2: mov    rdi,QWORD PTR [rbp-0x38]
  000b6: test   rdi,0x1
  000bd: jne    0x3ced9
  000c3: test   rdi,0x2
  000ca: je     0x106
  000d0: xorps  xmm2,xmm2
  000d3: movabs rax,0x8000000000000002
  000dd: cmp    rdi,rax
  000e0: je     0x118
  000e6: mov    rax,rdi
  000e9: sar    rax,0x3f
  000ed: add    rax,0x2
  000f1: and    rdi,0xfffffffffffffffc
  000f5: or     rdi,rax
  000f8: rol    rdi,0x3d
  000fc: movq   xmm2,rdi
  00101: jmp    0x118
  00106: call   0xffffc927
  0010b: test   rax,rax
  0010e: je     0x3ced9
  00114: movq   xmm2,xmm0
  00118: mov    rdi,QWORD PTR [rbp-0x40]
  0011c: test   rdi,0x1
  00123: jne    0x3cee8
  00129: test   rdi,0x2
  00130: je     0x16c
  00136: xorps  xmm3,xmm3
  00139: movabs rax,0x8000000000000002
  00143: cmp    rdi,rax
  00146: je     0x17e
  0014c: mov    rax,rdi
  0014f: sar    rax,0x3f
  00153: add    rax,0x2
  00157: and    rdi,0xfffffffffffffffc
  0015b: or     rdi,rax
  0015e: rol    rdi,0x3d
  00162: movq   xmm3,rdi
  00167: jmp    0x17e
  0016c: call   0xffffc927
  00171: test   rax,rax
  00174: je     0x3cee8
  0017a: movq   xmm3,xmm0
  0017e: mulsd  xmm2,xmm3
:00005 %3 = @y: Vec[IvarId(1)]
  00182: mov    rdi,QWORD PTR [rbp-0x28]
  00186: cmp    WORD PTR [rdi+0x2],0x3
  0018b: jne    0x3cef7
  00191: mov    rax,QWORD PTR [rdi+0x18]
  00195: mov    QWORD PTR [rbp-0x40],rax
:00006 %4 = %1.call y()                     [Vec]
:00007 
  00199: mov    rdi,QWORD PTR [rbp-0x30]
  0019d: test   rdi,0x7
  001a4: jne    0x3cf1f
  001aa: cmp    DWORD PTR [rdi+0x4],0x25
  001ae: jne    0x3cf1f
  001b4: cmp    DWORD PTR [rip+0xfffffffffffff103],0x26        # 0xfffff2be
  001bb: jne    0x3cf1f
  001c1: mov    esi,DWORD PTR [rip+0x29e]        # 0x465
  001c7: cmp    esi,0xffffffff
  001ca: je     0x3cf3b
  001d0: cmp    WORD PTR [rdi+0x2],0x3
  001d5: jne    0x1ee
  001db: cmp    esi,0x6
  001de: jge    0x1ee
  001e4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001e9: jmp    0x20c
  001ee: sub    rsp,0x10
  001f2: movq   QWORD PTR [rsp],xmm2
  001f7: movabs rax,0x55c84f4d3440
  00201: call   rax
  00203: movq   xmm2,QWORD PTR [rsp]
  00208: add    rsp,0x10
  0020c: mov    QWORD PTR [rbp-0x48],rax
:00009 %3 = %3 * %4                         [Float][Float]
  00210: mov    rdi,QWORD PTR [rbp-0x40]
  00214: test   rdi,0x1
  0021b: jne    0x3cf76
  00221: test   rdi,0x2
  00228: je     0x264
  0022e: xorps  xmm3,xmm3
  00231: movabs rax,0x8000000000000002
  0023b: cmp    rdi,rax
  0023e: je     0x276
  00244: mov    rax,rdi
  00247: sar    rax,0x3f
  0024b: add    rax,0x2
  0024f: and    rdi,0xfffffffffffffffc
  00253: or     rdi,rax
  00256: rol    rdi,0x3d
  0025a: movq   xmm3,rdi
  0025f: jmp    0x276
  00264: call   0xffffc927
  00269: test   rax,rax
  0026c: je     0x3cf76
  00272: movq   xmm3,xmm0
  00276: mov    rdi,QWORD PTR [rbp-0x48]
  0027a: test   rdi,0x1
  00281: jne    0x3cf92
  00287: test   rdi,0x2
  0028e: je     0x2ca
  00294: xorps  xmm4,xmm4
  00297: movabs rax,0x8000000000000002
  002a1: cmp    rdi,rax
  002a4: je     0x2dc
  002aa: mov    rax,rdi
  002ad: sar    rax,0x3f
  002b1: add    rax,0x2
  002b5: and    rdi,0xfffffffffffffffc
  002b9: or     rdi,rax
  002bc: rol    rdi,0x3d
  002c0: movq   xmm4,rdi
  002c5: jmp    0x2dc
  002ca: call   0xffffc927
  002cf: test   rax,rax
  002d2: je     0x3cf92
  002d8: movq   xmm4,xmm0
  002dc: mulsd  xmm3,xmm4
:00010 %2 = %2 + %3                         [Float][Float]
  002e0: addsd  xmm2,xmm3
:00011 %3 = @z: Vec[IvarId(2)]
  002e4: mov    rdi,QWORD PTR [rbp-0x28]
  002e8: cmp    WORD PTR [rdi+0x2],0x3
  002ed: jne    0x3cfae
  002f3: mov    rax,QWORD PTR [rdi+0x20]
  002f7: mov    QWORD PTR [rbp-0x40],rax
:00012 %4 = %1.call z()                     [Vec]
:00013 
  002fb: mov    rdi,QWORD PTR [rbp-0x30]
  002ff: test   rdi,0x7
  00306: jne    0x3cfe2
  0030c: cmp    DWORD PTR [rdi+0x4],0x25
  00310: jne    0x3cfe2
  00316: cmp    DWORD PTR [rip+0xffffffffffffefa1],0x26        # 0xfffff2be
  0031d: jne    0x3cfe2
  00323: mov    esi,DWORD PTR [rip+0x144]        # 0x46d
  00329: cmp    esi,0xffffffff
  0032c: je     0x3cffe
  00332: cmp    WORD PTR [rdi+0x2],0x3
  00337: jne    0x350
  0033d: cmp    esi,0x6
  00340: jge    0x350
  00346: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0034b: jmp    0x36e
  00350: sub    rsp,0x10
  00354: movq   QWORD PTR [rsp],xmm2
  00359: movabs rax,0x55c84f4d3440
  00363: call   rax
  00365: movq   xmm2,QWORD PTR [rsp]
  0036a: add    rsp,0x10
  0036e: mov    QWORD PTR [rbp-0x48],rax
:00015 %3 = %3 * %4                         [Float][Float]
  00372: mov    rdi,QWORD PTR [rbp-0x40]
  00376: test   rdi,0x1
  0037d: jne    0x3d039
  00383: test   rdi,0x2
  0038a: je     0x3c6
  00390: xorps  xmm3,xmm3
  00393: movabs rax,0x8000000000000002
  0039d: cmp    rdi,rax
  003a0: je     0x3d8
  003a6: mov    rax,rdi
  003a9: sar    rax,0x3f
  003ad: add    rax,0x2
  003b1: and    rdi,0xfffffffffffffffc
  003b5: or     rdi,rax
  003b8: rol    rdi,0x3d
  003bc: movq   xmm3,rdi
  003c1: jmp    0x3d8
  003c6: call   0xffffc927
  003cb: test   rax,rax
  003ce: je     0x3d039
  003d4: movq   xmm3,xmm0
  003d8: mov    rdi,QWORD PTR [rbp-0x48]
  003dc: test   rdi,0x1
  003e3: jne    0x3d055
  003e9: test   rdi,0x2
  003f0: je     0x42c
  003f6: xorps  xmm4,xmm4
  003f9: movabs rax,0x8000000000000002
  00403: cmp    rdi,rax
  00406: je     0x43e
  0040c: mov    rax,rdi
  0040f: sar    rax,0x3f
  00413: add    rax,0x2
  00417: and    rdi,0xfffffffffffffffc
  0041b: or     rdi,rax
  0041e: rol    rdi,0x3d
  00422: movq   xmm4,rdi
  00427: jmp    0x43e
  0042c: call   0xffffc927
  00431: test   rax,rax
  00434: je     0x3d055
  0043a: movq   xmm4,xmm0
  0043e: mulsd  xmm3,xmm4
:00016 %2 = %2 + %3                         [Float][Float]
  00442: addsd  xmm2,xmm3
:00017 ret %2
  00446: movq   xmm0,xmm2
  0044a: call   0xffffca1a
  0044f: mov    QWORD PTR [rbp-0x38],rax
  00453: mov    rax,QWORD PTR [rbp-0x38]
  00457: leave  
  00458: ret    
==> start whole compile: intersect FuncId(63) self_class:Sphere start:[00000] bytecode:0x55c850b316a0
<== finished compile. elapsed:92.2µs
offset:Pos(15440) code: 3239 bytes  data: 225 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0xb0
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x40],rax
  00016: mov    QWORD PTR [rbp-0x48],rax
  0001a: mov    QWORD PTR [rbp-0x50],rax
  0001e: mov    QWORD PTR [rbp-0x58],rax
  00022: mov    QWORD PTR [rbp-0x60],rax
  00026: mov    QWORD PTR [rbp-0x68],rax
  0002a: mov    QWORD PTR [rbp-0x70],rax
  0002e: mov    QWORD PTR [rbp-0x78],rax
  00032: mov    QWORD PTR [rbp-0x80],rax
  00036: mov    QWORD PTR [rbp-0x88],rax
  0003d: mov    QWORD PTR [rbp-0x90],rax
  00044: mov    QWORD PTR [rbp-0x98],rax
  0004b: mov    QWORD PTR [rbp-0xa0],rax
  00052: mov    rdi,QWORD PTR [rbp-0x28]
  00056: test   rdi,0x7
  0005d: jne    0x3cb6e
  00063: cmp    DWORD PTR [rdi+0x4],0x27
  00067: jne    0x3cb6e
:00000 %9 = %1.call org()                   [Ray]
:00001 
  0006d: mov    rdi,QWORD PTR [rbp-0x30]
  00071: test   rdi,0x7
  00078: jne    0x3cb7d
  0007e: cmp    DWORD PTR [rdi+0x4],0x2b
  00082: jne    0x3cb7d
  00088: cmp    DWORD PTR [rip+0xffffffffffffed2c],0x26        # 0xffffedbb
  0008f: jne    0x3cb7d
  00095: mov    esi,DWORD PTR [rip+0xc10]        # 0xcab
  0009b: cmp    esi,0xffffffff
  0009e: je     0x3cb8c
  000a4: cmp    WORD PTR [rdi+0x2],0x3
  000a9: jne    0xc2
  000af: cmp    esi,0x6
  000b2: jge    0xc2
  000b8: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000bd: jmp    0xce
  000c2: movabs rax,0x55c84f4d3440
  000cc: call   rax
  000ce: mov    QWORD PTR [rbp-0x70],rax
:00003 %10 = @center: Sphere[IvarId(0)]
  000d2: mov    rdi,QWORD PTR [rbp-0x28]
  000d6: cmp    WORD PTR [rdi+0x2],0x3
  000db: jne    0x3cbb5
  000e1: mov    rax,QWORD PTR [rdi+0x10]
  000e5: mov    QWORD PTR [rbp-0x78],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
:00005 
  000e9: mov    rdi,QWORD PTR [rbp-0x70]
  000ed: test   rdi,0x7
  000f4: jne    0x3cbcb
  000fa: cmp    DWORD PTR [rdi+0x4],0x25
  000fe: jne    0x3cbcb
  00104: cmp    DWORD PTR [rip+0xffffffffffffecb0],0x26        # 0xffffedbb
  0010b: jne    0x3cbcb
  00111: mov    rax,QWORD PTR [rbx]
  00114: lea    rdi,[rsp-0x18]
  00119: mov    QWORD PTR [rdi],rax
  0011c: mov    QWORD PTR [rbx],rdi
  0011f: mov    QWORD PTR [rsp-0x20],0x0
  00128: mov    QWORD PTR [rsp-0x38],rcx
  0012d: mov    rax,QWORD PTR [rbp-0x70]
  00131: mov    QWORD PTR [rsp-0x38],rax
  00136: mov    rdi,0x1
  0013d: mov    rax,QWORD PTR [rbp-0x78]
  00141: mov    QWORD PTR [rsp-0x40],rax
  00146: mov    QWORD PTR [rsp-0x30],0x0
  0014f: movabs rax,0x800000039
  00159: mov    QWORD PTR [rsp-0x28],rax
  0015e: movabs r13,0x55c850b38fb0
  00168: call   0xfffffa13
  0016d: lea    rdi,[rbp-0x8]
  00171: mov    QWORD PTR [rbx],rdi
  00174: movabs r13,0x55c850b31700
  0017e: test   rax,rax
  00181: je     0xffffc3eb
  00187: mov    QWORD PTR [rbp-0x40],rax
:00007 %9 = %1.call dir()                   [Ray]
:00008 
  0018b: mov    rdi,QWORD PTR [rbp-0x30]
  0018f: test   rdi,0x7
  00196: jne    0x3cbda
  0019c: cmp    DWORD PTR [rdi+0x4],0x2b
  001a0: jne    0x3cbda
  001a6: cmp    DWORD PTR [rip+0xffffffffffffec0e],0x26        # 0xffffedbb
  001ad: jne    0x3cbda
  001b3: mov    esi,DWORD PTR [rip+0xafa]        # 0xcb3
  001b9: cmp    esi,0xffffffff
  001bc: je     0x3cbe9
  001c2: cmp    WORD PTR [rdi+0x2],0x3
  001c7: jne    0x1e0
  001cd: cmp    esi,0x6
  001d0: jge    0x1e0
  001d6: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001db: jmp    0x1ec
  001e0: movabs rax,0x55c84f4d3440
  001ea: call   rax
  001ec: mov    QWORD PTR [rbp-0x70],rax
:00010 %4 = %3.call vdot(%9; 1)             [Vec]
:00011 
  001f0: mov    rdi,QWORD PTR [rbp-0x40]
  001f4: test   rdi,0x7
  001fb: jne    0x3cc12
  00201: cmp    DWORD PTR [rdi+0x4],0x25
  00205: jne    0x3cc12
  0020b: cmp    DWORD PTR [rip+0xffffffffffffeba9],0x26        # 0xffffedbb
  00212: jne    0x3cc12
  00218: mov    rax,QWORD PTR [rbx]
  0021b: lea    rdi,[rsp-0x18]
  00220: mov    QWORD PTR [rdi],rax
  00223: mov    QWORD PTR [rbx],rdi
  00226: mov    QWORD PTR [rsp-0x20],0x0
  0022f: mov    QWORD PTR [rsp-0x38],rcx
  00234: mov    rax,QWORD PTR [rbp-0x40]
  00238: mov    QWORD PTR [rsp-0x38],rax
  0023d: mov    rdi,0x1
  00244: mov    rax,QWORD PTR [rbp-0x70]
  00248: mov    QWORD PTR [rsp-0x40],rax
  0024d: mov    QWORD PTR [rsp-0x30],0x0
  00256: movabs rax,0x50000003b
  00260: mov    QWORD PTR [rsp-0x28],rax
  00265: movabs r13,0x55c850b7b010
  0026f: call   0xfffffaa5
  00274: lea    rdi,[rbp-0x8]
  00278: mov    QWORD PTR [rbx],rdi
  0027b: movabs r13,0x55c850b31760
  00285: test   rax,rax
  00288: je     0xffffc3eb
  0028e: mov    QWORD PTR [rbp-0x48],rax
:00013 %10 = %3
  00292: mov    rax,QWORD PTR [rbp-0x40]
  00296: mov    QWORD PTR [rbp-0x78],rax
:00014 %9 = %3.call vdot(%10; 1)            [Vec]
:00015 
  0029a: mov    rdi,QWORD PTR [rbp-0x40]
  0029e: test   rdi,0x7
  002a5: jne    0x3cc21
  002ab: cmp    DWORD PTR [rdi+0x4],0x25
  002af: jne    0x3cc21
  002b5: cmp    DWORD PTR [rip+0xffffffffffffeaff],0x26        # 0xffffedbb
  002bc: jne    0x3cc21
  002c2: mov    rax,QWORD PTR [rbx]
  002c5: lea    rdi,[rsp-0x18]
  002ca: mov    QWORD PTR [rdi],rax
  002cd: mov    QWORD PTR [rbx],rdi
  002d0: mov    QWORD PTR [rsp-0x20],0x0
  002d9: mov    QWORD PTR [rsp-0x38],rcx
  002de: mov    rax,QWORD PTR [rbp-0x40]
  002e2: mov    QWORD PTR [rsp-0x38],rax
  002e7: mov    rdi,0x1
  002ee: mov    rax,QWORD PTR [rbp-0x78]
  002f2: mov    QWORD PTR [rsp-0x40],rax
  002f7: mov    QWORD PTR [rsp-0x30],0x0
  00300: movabs rax,0x50000003b
  0030a: mov    QWORD PTR [rsp-0x28],rax
  0030f: movabs r13,0x55c850b7b010
  00319: call   0xfffffaa5
  0031e: lea    rdi,[rbp-0x8]
  00322: mov    QWORD PTR [rbx],rdi
  00325: movabs r13,0x55c850b317a0
  0032f: test   rax,rax
  00332: je     0xffffc3eb
  00338: mov    QWORD PTR [rbp-0x70],rax
:00017 %10 = @radius: Sphere[IvarId(1)]
  0033c: mov    rdi,QWORD PTR [rbp-0x28]
  00340: cmp    WORD PTR [rdi+0x2],0x3
  00345: jne    0x3cc30
  0034b: mov    rax,QWORD PTR [rdi+0x18]
  0034f: mov    QWORD PTR [rbp-0x78],rax
:00018 %11 = @radius: Sphere[IvarId(1)]
  00353: mov    rdi,QWORD PTR [rbp-0x28]
  00357: cmp    WORD PTR [rdi+0x2],0x3
  0035c: jne    0x3cc46
  00362: mov    rax,QWORD PTR [rdi+0x18]
  00366: mov    QWORD PTR [rbp-0x80],rax
:00019 %10 = %10 * %11                      [Float][Float]
  0036a: mov    rdi,QWORD PTR [rbp-0x78]
  0036e: test   rdi,0x1
  00375: jne    0x3cc5c
  0037b: test   rdi,0x2
  00382: je     0x3be
  00388: xorps  xmm2,xmm2
  0038b: movabs rax,0x8000000000000002
  00395: cmp    rdi,rax
  00398: je     0x3d0
  0039e: mov    rax,rdi
  003a1: sar    rax,0x3f
  003a5: add    rax,0x2
  003a9: and    rdi,0xfffffffffffffffc
  003ad: or     rdi,rax
  003b0: rol    rdi,0x3d
  003b4: movq   xmm2,rdi
  003b9: jmp    0x3d0
  003be: call   0xffffc424
  003c3: test   rax,rax
  003c6: je     0x3cc5c
  003cc: movq   xmm2,xmm0
  003d0: mov    rdi,QWORD PTR [rbp-0x80]
  003d4: test   rdi,0x1
  003db: jne    0x3cc6b
  003e1: test   rdi,0x2
  003e8: je     0x424
  003ee: xorps  xmm3,xmm3
  003f1: movabs rax,0x8000000000000002
  003fb: cmp    rdi,rax
  003fe: je     0x436
  00404: mov    rax,rdi
  00407: sar    rax,0x3f
  0040b: add    rax,0x2
  0040f: and    rdi,0xfffffffffffffffc
  00413: or     rdi,rax
  00416: rol    rdi,0x3d
  0041a: movq   xmm3,rdi
  0041f: jmp    0x436
  00424: call   0xffffc424
  00429: test   rax,rax
  0042c: je     0x3cc6b
  00432: movq   xmm3,xmm0
  00436: mulsd  xmm2,xmm3
:00020 %5 = %9 - %10                        [Float][Float]
  0043a: mov    rdi,QWORD PTR [rbp-0x70]
  0043e: test   rdi,0x1
  00445: jne    0x3cc7a
  0044b: test   rdi,0x2
  00452: je     0x48e
  00458: xorps  xmm4,xmm4
  0045b: movabs rax,0x8000000000000002
  00465: cmp    rdi,rax
  00468: je     0x4a0
  0046e: mov    rax,rdi
  00471: sar    rax,0x3f
  00475: add    rax,0x2
  00479: and    rdi,0xfffffffffffffffc
  0047d: or     rdi,rax
  00480: rol    rdi,0x3d
  00484: movq   xmm4,rdi
  00489: jmp    0x4a0
  0048e: call   0xffffc424
  00493: test   rax,rax
  00496: je     0x3cc7a
  0049c: movq   xmm4,xmm0
  004a0: movq   xmm5,xmm4
  004a4: subsd  xmm5,xmm2
:00021 %9 = %4 * %4                         [Float][Float]
  004a8: mov    rdi,QWORD PTR [rbp-0x48]
  004ac: test   rdi,0x1
  004b3: jne    0x3cc96
  004b9: test   rdi,0x2
  004c0: je     0x4fc
  004c6: xorps  xmm6,xmm6
  004c9: movabs rax,0x8000000000000002
  004d3: cmp    rdi,rax
  004d6: je     0x50e
  004dc: mov    rax,rdi
  004df: sar    rax,0x3f
  004e3: add    rax,0x2
  004e7: and    rdi,0xfffffffffffffffc
  004eb: or     rdi,rax
  004ee: rol    rdi,0x3d
  004f2: movq   xmm6,rdi
  004f7: jmp    0x50e
  004fc: call   0xffffc424
  00501: test   rax,rax
  00504: je     0x3cc96
  0050a: movq   xmm6,xmm0
  0050e: movq   xmm4,xmm6
  00512: mulsd  xmm4,xmm6
:00022 %6 = %9 - %5                         [Float][Float]
  00516: movq   xmm7,xmm4
  0051a: subsd  xmm7,xmm5
:00023 %9 = literal[0.0]
  0051e: movq   xmm4,QWORD PTR [rip+0x79a]        # 0xcc0
  00526: movabs rax,0x8000000000000002
  00530: mov    QWORD PTR [rbp-0x70],rax
:00024 _%9 = %6 > %9                        [Float][Float]
:00025 condnotbr _%9 =>:00113
  00534: ucomisd xmm7,xmm4
  00538: jbe    0x3d52b
:00026 %9 = %4
:00027 %9 = neg %9                          [<INVALID>]
  0053e: mov    rdi,0x4
  00545: sub    DWORD PTR [rip+0x77c],0x1        # 0xcc8
  0054c: jne    0x3ccbf
  00552: mov    rdi,r12
  00555: mov    esi,DWORD PTR [rbp-0x18]
  00558: mov    rdx,QWORD PTR [rbp-0x28]
  0055c: movabs rax,0x55c84f4bca80
  00566: call   rax
  00568: mov    rdi,0x4
  0056f: jmp    0x3ccbf
:00028 %11 = const[Math]                    [<INVALID>]
  00574: mov    rax,QWORD PTR [rip+0xffffffffffffe845]        # 0xffffedc0
  0057b: cmp    rax,QWORD PTR [rip+0x75e]        # 0xce0
  00582: jne    0x3cd02
  00588: mov    rax,QWORD PTR [rip+0x741]        # 0xcd0
  0058f: mov    QWORD PTR [rbp-0x80],rax
:00029 %12 = %6
:00030 %10 = %11.call sqrt(%12; 1)          [<INVALID>]
:00031 
  00593: mov    rdi,0x4
  0059a: sub    DWORD PTR [rip+0x747],0x1        # 0xce8
  005a1: jne    0x3cd7e
  005a7: mov    rdi,r12
  005aa: mov    esi,DWORD PTR [rbp-0x18]
  005ad: mov    rdx,QWORD PTR [rbp-0x28]
  005b1: movabs rax,0x55c84f4bca80
  005bb: call   rax
  005bd: mov    rdi,0x4
  005c4: jmp    0x3cd7e
:00033 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  005c9: mov    rdi,0x4
  005d0: sub    DWORD PTR [rip+0x715],0x1        # 0xcec
  005d7: jne    0x3cdc8
  005dd: mov    rdi,r12
  005e0: mov    esi,DWORD PTR [rbp-0x18]
  005e3: mov    rdx,QWORD PTR [rbp-0x28]
  005e7: movabs rax,0x55c84f4bca80
  005f1: call   rax
  005f3: mov    rdi,0x4
  005fa: jmp    0x3cdc8
:00034 %9 = literal[0.0]
  005ff: movq   xmm3,QWORD PTR [rip+0x6e9]        # 0xcf0
  00607: movabs rax,0x8000000000000002
  00611: mov    QWORD PTR [rbp-0x70],rax
:00035 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
:00036 condnotbr _%9 =>:00112
  00615: mov    rdi,QWORD PTR [rbp-0x60]
  00619: mov    rsi,QWORD PTR [rbp-0x70]
  0061d: test   rdi,0x1
  00624: je     0x3ce12
  0062a: test   rsi,0x1
  00631: je     0x3ce12
  00637: cmp    rdi,rsi
  0063a: jle    0x3d463
:00037 %9 = %2.call t()                     [<INVALID>]
:00038 
  00640: mov    rdi,0x4
  00647: sub    DWORD PTR [rip+0x6aa],0x1        # 0xcf8
  0064e: jne    0x3ce67
  00654: mov    rdi,r12
  00657: mov    esi,DWORD PTR [rbp-0x18]
  0065a: mov    rdx,QWORD PTR [rbp-0x28]
  0065e: movabs rax,0x55c84f4bca80
  00668: call   rax
  0066a: mov    rdi,0x4
  00671: jmp    0x3ce67
:00040 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00041 condnotbr _%9 =>:00112
  00676: mov    rdi,QWORD PTR [rbp-0x60]
  0067a: mov    rsi,QWORD PTR [rbp-0x70]
  0067e: test   rdi,0x1
  00685: je     0x3cea4
  0068b: test   rsi,0x1
  00692: je     0x3cea4
  00698: cmp    rdi,rsi
  0069b: jge    0x3d4aa
:00042 _ = %2.call t=(%7; 1)                [<INVALID>]
:00043 
  006a1: mov    rdi,0x4
  006a8: sub    DWORD PTR [rip+0x64d],0x1        # 0xcfc
  006af: jne    0x3cef9
  006b5: mov    rdi,r12
  006b8: mov    esi,DWORD PTR [rbp-0x18]
  006bb: mov    rdx,QWORD PTR [rbp-0x28]
  006bf: movabs rax,0x55c84f4bca80
  006c9: call   rax
  006cb: mov    rdi,0x4
  006d2: jmp    0x3cef9
:00045 %9 = literal[true]
  006d7: mov    rax,0x1c
  006de: mov    QWORD PTR [rbp-0x70],rax
:00046 _ = %2.call hit=(%9; 1)              [<INVALID>]
:00047 
  006e2: mov    rdi,0x4
  006e9: sub    DWORD PTR [rip+0x610],0x1        # 0xd00
  006f0: jne    0x3cf36
  006f6: mov    rdi,r12
  006f9: mov    esi,DWORD PTR [rbp-0x18]
  006fc: mov    rdx,QWORD PTR [rbp-0x28]
  00700: movabs rax,0x55c84f4bca80
  0070a: call   rax
  0070c: mov    rdi,0x4
  00713: jmp    0x3cf36
:00049 %10 = const[Vec]                     [<INVALID>]
  00718: mov    rax,QWORD PTR [rip+0xffffffffffffe6a1]        # 0xffffedc0
  0071f: cmp    rax,QWORD PTR [rip+0x5fa]        # 0xd20
  00726: jne    0x3cf73
  0072c: mov    rax,QWORD PTR [rip+0x5dd]        # 0xd10
  00733: mov    QWORD PTR [rbp-0x78],rax
:00050 %12 = %1.call org()                  [<INVALID>]
:00051 
  00737: mov    rdi,0x4
  0073e: sub    DWORD PTR [rip+0x5e3],0x1        # 0xd28
  00745: jne    0x3cfe3
  0074b: mov    rdi,r12
  0074e: mov    esi,DWORD PTR [rbp-0x18]
  00751: mov    rdx,QWORD PTR [rbp-0x28]
  00755: movabs rax,0x55c84f4bca80
  0075f: call   rax
  00761: mov    rdi,0x4
  00768: jmp    0x3cfe3
:00053 %11 = %12.call x()                   [<INVALID>]
:00054 
  0076d: mov    rdi,0x4
  00774: sub    DWORD PTR [rip+0x5b1],0x1        # 0xd2c
  0077b: jne    0x3d013
  00781: mov    rdi,r12
  00784: mov    esi,DWORD PTR [rbp-0x18]
  00787: mov    rdx,QWORD PTR [rbp-0x28]
  0078b: movabs rax,0x55c84f4bca80
  00795: call   rax
  00797: mov    rdi,0x4
  0079e: jmp    0x3d013
:00056 %13 = %1.call dir()                  [<INVALID>]
:00057 
  007a3: mov    rdi,0x4
  007aa: sub    DWORD PTR [rip+0x57f],0x1        # 0xd30
  007b1: jne    0x3d043
  007b7: mov    rdi,r12
  007ba: mov    esi,DWORD PTR [rbp-0x18]
  007bd: mov    rdx,QWORD PTR [rbp-0x28]
  007c1: movabs rax,0x55c84f4bca80
  007cb: call   rax
  007cd: mov    rdi,0x4
  007d4: jmp    0x3d043
:00059 %12 = %13.call x()                   [<INVALID>]
:00060 
  007d9: mov    rdi,0x4
  007e0: sub    DWORD PTR [rip+0x54d],0x1        # 0xd34
  007e7: jne    0x3d073
  007ed: mov    rdi,r12
  007f0: mov    esi,DWORD PTR [rbp-0x18]
  007f3: mov    rdx,QWORD PTR [rbp-0x28]
  007f7: movabs rax,0x55c84f4bca80
  00801: call   rax
  00803: mov    rdi,0x4
  0080a: jmp    0x3d073
:00062 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  0080f: mov    rdi,0x4
  00816: sub    DWORD PTR [rip+0x51b],0x1        # 0xd38
  0081d: jne    0x3d0a3
  00823: mov    rdi,r12
  00826: mov    esi,DWORD PTR [rbp-0x18]
  00829: mov    rdx,QWORD PTR [rbp-0x28]
  0082d: movabs rax,0x55c84f4bca80
  00837: call   rax
  00839: mov    rdi,0x4
  00840: jmp    0x3d0a3
:00063 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00845: mov    rdi,0x4
  0084c: sub    DWORD PTR [rip+0x4e9],0x1        # 0xd3c
  00853: jne    0x3d0d3
  00859: mov    rdi,r12
  0085c: mov    esi,DWORD PTR [rbp-0x18]
  0085f: mov    rdx,QWORD PTR [rbp-0x28]
  00863: movabs rax,0x55c84f4bca80
  0086d: call   rax
  0086f: mov    rdi,0x4
  00876: jmp    0x3d0d3
:00064 %13 = %1.call org()                  [<INVALID>]
:00065 
  0087b: mov    rdi,0x4
  00882: sub    DWORD PTR [rip+0x4b7],0x1        # 0xd40
  00889: jne    0x3d103
  0088f: mov    rdi,r12
  00892: mov    esi,DWORD PTR [rbp-0x18]
  00895: mov    rdx,QWORD PTR [rbp-0x28]
  00899: movabs rax,0x55c84f4bca80
  008a3: call   rax
  008a5: mov    rdi,0x4
  008ac: jmp    0x3d103
:00067 %12 = %13.call y()                   [<INVALID>]
:00068 
  008b1: mov    rdi,0x4
  008b8: sub    DWORD PTR [rip+0x485],0x1        # 0xd44
  008bf: jne    0x3d133
  008c5: mov    rdi,r12
  008c8: mov    esi,DWORD PTR [rbp-0x18]
  008cb: mov    rdx,QWORD PTR [rbp-0x28]
  008cf: movabs rax,0x55c84f4bca80
  008d9: call   rax
  008db: mov    rdi,0x4
  008e2: jmp    0x3d133
:00070 %14 = %1.call dir()                  [<INVALID>]
:00071 
  008e7: mov    rdi,0x4
  008ee: sub    DWORD PTR [rip+0x453],0x1        # 0xd48
  008f5: jne    0x3d163
  008fb: mov    rdi,r12
  008fe: mov    esi,DWORD PTR [rbp-0x18]
  00901: mov    rdx,QWORD PTR [rbp-0x28]
  00905: movabs rax,0x55c84f4bca80
  0090f: call   rax
  00911: mov    rdi,0x4
  00918: jmp    0x3d163
:00073 %13 = %14.call y()                   [<INVALID>]
:00074 
  0091d: mov    rdi,0x4
  00924: sub    DWORD PTR [rip+0x421],0x1        # 0xd4c
  0092b: jne    0x3d193
  00931: mov    rdi,r12
  00934: mov    esi,DWORD PTR [rbp-0x18]
  00937: mov    rdx,QWORD PTR [rbp-0x28]
  0093b: movabs rax,0x55c84f4bca80
  00945: call   rax
  00947: mov    rdi,0x4
  0094e: jmp    0x3d193
:00076 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  00953: mov    rdi,0x4
  0095a: sub    DWORD PTR [rip+0x3ef],0x1        # 0xd50
  00961: jne    0x3d1c3
  00967: mov    rdi,r12
  0096a: mov    esi,DWORD PTR [rbp-0x18]
  0096d: mov    rdx,QWORD PTR [rbp-0x28]
  00971: movabs rax,0x55c84f4bca80
  0097b: call   rax
  0097d: mov    rdi,0x4
  00984: jmp    0x3d1c3
:00077 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  00989: mov    rdi,0x4
  00990: sub    DWORD PTR [rip+0x3bd],0x1        # 0xd54
  00997: jne    0x3d1f3
  0099d: mov    rdi,r12
  009a0: mov    esi,DWORD PTR [rbp-0x18]
  009a3: mov    rdx,QWORD PTR [rbp-0x28]
  009a7: movabs rax,0x55c84f4bca80
  009b1: call   rax
  009b3: mov    rdi,0x4
  009ba: jmp    0x3d1f3
:00078 %14 = %1.call org()                  [<INVALID>]
:00079 
  009bf: mov    rdi,0x4
  009c6: sub    DWORD PTR [rip+0x38b],0x1        # 0xd58
  009cd: jne    0x3d223
  009d3: mov    rdi,r12
  009d6: mov    esi,DWORD PTR [rbp-0x18]
  009d9: mov    rdx,QWORD PTR [rbp-0x28]
  009dd: movabs rax,0x55c84f4bca80
  009e7: call   rax
  009e9: mov    rdi,0x4
  009f0: jmp    0x3d223
:00081 %13 = %14.call z()                   [<INVALID>]
:00082 
  009f5: mov    rdi,0x4
  009fc: sub    DWORD PTR [rip+0x359],0x1        # 0xd5c
  00a03: jne    0x3d253
  00a09: mov    rdi,r12
  00a0c: mov    esi,DWORD PTR [rbp-0x18]
  00a0f: mov    rdx,QWORD PTR [rbp-0x28]
  00a13: movabs rax,0x55c84f4bca80
  00a1d: call   rax
  00a1f: mov    rdi,0x4
  00a26: jmp    0x3d253
:00084 %15 = %1.call dir()                  [<INVALID>]
:00085 
  00a2b: mov    rdi,0x4
  00a32: sub    DWORD PTR [rip+0x327],0x1        # 0xd60
  00a39: jne    0x3d283
  00a3f: mov    rdi,r12
  00a42: mov    esi,DWORD PTR [rbp-0x18]
  00a45: mov    rdx,QWORD PTR [rbp-0x28]
  00a49: movabs rax,0x55c84f4bca80
  00a53: call   rax
  00a55: mov    rdi,0x4
  00a5c: jmp    0x3d283
:00087 %14 = %15.call z()                   [<INVALID>]
:00088 
  00a61: mov    rdi,0x4
  00a68: sub    DWORD PTR [rip+0x2f5],0x1        # 0xd64
  00a6f: jne    0x3d2b3
  00a75: mov    rdi,r12
  00a78: mov    esi,DWORD PTR [rbp-0x18]
  00a7b: mov    rdx,QWORD PTR [rbp-0x28]
  00a7f: movabs rax,0x55c84f4bca80
  00a89: call   rax
  00a8b: mov    rdi,0x4
  00a92: jmp    0x3d2b3
:00090 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  00a97: mov    rdi,0x4
  00a9e: sub    DWORD PTR [rip+0x2c3],0x1        # 0xd68
  00aa5: jne    0x3d2e3
  00aab: mov    rdi,r12
  00aae: mov    esi,DWORD PTR [rbp-0x18]
  00ab1: mov    rdx,QWORD PTR [rbp-0x28]
  00ab5: movabs rax,0x55c84f4bca80
  00abf: call   rax
  00ac1: mov    rdi,0x4
  00ac8: jmp    0x3d2e3
:00091 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  00acd: mov    rdi,0x4
  00ad4: sub    DWORD PTR [rip+0x291],0x1        # 0xd6c
  00adb: jne    0x3d313
  00ae1: mov    rdi,r12
  00ae4: mov    esi,DWORD PTR [rbp-0x18]
  00ae7: mov    rdx,QWORD PTR [rbp-0x28]
  00aeb: movabs rax,0x55c84f4bca80
  00af5: call   rax
  00af7: mov    rdi,0x4
  00afe: jmp    0x3d313
:00092 %9 = %10.call new(%11; 3)            [<INVALID>]
:00093 
  00b03: mov    rdi,0x4
  00b0a: sub    DWORD PTR [rip+0x25f],0x1        # 0xd70
  00b11: jne    0x3d343
  00b17: mov    rdi,r12
  00b1a: mov    esi,DWORD PTR [rbp-0x18]
  00b1d: mov    rdx,QWORD PTR [rbp-0x28]
  00b21: movabs rax,0x55c84f4bca80
  00b2b: call   rax
  00b2d: mov    rdi,0x4
  00b34: jmp    0x3d343
:00095 _ = %2.call pl=(%9; 1)               [<INVALID>]
:00096 
  00b39: mov    rdi,0x4
  00b40: sub    DWORD PTR [rip+0x22d],0x1        # 0xd74
  00b47: jne    0x3d373
  00b4d: mov    rdi,r12
  00b50: mov    esi,DWORD PTR [rbp-0x18]
  00b53: mov    rdx,QWORD PTR [rbp-0x28]
  00b57: movabs rax,0x55c84f4bca80
  00b61: call   rax
  00b63: mov    rdi,0x4
  00b6a: jmp    0x3d373
:00098 %9 = %2.call pl()                    [<INVALID>]
:00099 
  00b6f: mov    rdi,0x4
  00b76: sub    DWORD PTR [rip+0x1fb],0x1        # 0xd78
  00b7d: jne    0x3d3a3
  00b83: mov    rdi,r12
  00b86: mov    esi,DWORD PTR [rbp-0x18]
  00b89: mov    rdx,QWORD PTR [rbp-0x28]
  00b8d: movabs rax,0x55c84f4bca80
  00b97: call   rax
  00b99: mov    rdi,0x4
  00ba0: jmp    0x3d3a3
:00101 %10 = @center: <INVALID>[IvarId(0)]
  00ba5: mov    rdi,QWORD PTR [rbp-0x28]
  00ba9: sub    rsp,0x20
  00bad: movq   QWORD PTR [rsp],xmm5
  00bb2: movq   QWORD PTR [rsp+0x8],xmm6
  00bb8: movq   QWORD PTR [rsp+0x10],xmm7
  00bbe: mov    rsi,0x7b
  00bc5: mov    rdx,r12
  00bc8: movabs rax,0x55c84f4b7120
  00bd2: call   rax
  00bd4: movq   xmm5,QWORD PTR [rsp]
  00bd9: movq   xmm6,QWORD PTR [rsp+0x8]
  00bdf: movq   xmm7,QWORD PTR [rsp+0x10]
  00be5: add    rsp,0x20
  00be9: mov    QWORD PTR [rbp-0x78],rax
:00102 %8 = %9.call vsub(%10; 1)            [<INVALID>]
:00103 
  00bed: mov    rdi,0x4
  00bf4: sub    DWORD PTR [rip+0x181],0x1        # 0xd7c
  00bfb: jne    0x3d3d3
  00c01: mov    rdi,r12
  00c04: mov    esi,DWORD PTR [rbp-0x18]
  00c07: mov    rdx,QWORD PTR [rbp-0x28]
  00c0b: movabs rax,0x55c84f4bca80
  00c15: call   rax
  00c17: mov    rdi,0x4
  00c1e: jmp    0x3d3d3
:00105 %9 = %8.call vnormalize()            [<INVALID>]
:00106 
  00c23: mov    rdi,0x4
  00c2a: sub    DWORD PTR [rip+0x14f],0x1        # 0xd80
  00c31: jne    0x3d403
  00c37: mov    rdi,r12
  00c3a: mov    esi,DWORD PTR [rbp-0x18]
  00c3d: mov    rdx,QWORD PTR [rbp-0x28]
  00c41: movabs rax,0x55c84f4bca80
  00c4b: call   rax
  00c4d: mov    rdi,0x4
  00c54: jmp    0x3d403
:00108 _ = %2.call n=(%9; 1)                [<INVALID>]
:00109 
  00c59: mov    rdi,0x4
  00c60: sub    DWORD PTR [rip+0x11d],0x1        # 0xd84
  00c67: jne    0x3d433
  00c6d: mov    rdi,r12
  00c70: mov    esi,DWORD PTR [rbp-0x18]
  00c73: mov    rdx,QWORD PTR [rbp-0x28]
  00c77: movabs rax,0x55c84f4bca80
  00c81: call   rax
  00c83: mov    rdi,0x4
  00c8a: jmp    0x3d433
:00111 br =>:00112
  00c8f: jmp    0x3d4f1
:00112 br =>:00113
  00c94: jmp    0x3d56b
:00113 %9 = nil
  00c99: mov    QWORD PTR [rbp-0x70],0x4
:00114 ret %9
  00ca1: mov    rax,QWORD PTR [rbp-0x70]
  00ca5: leave  
  00ca6: ret    
==> start whole compile: vsub FuncId(57) self_class:Vec start:[00000] bytecode:0x55c850b38fb0
<== finished compile. elapsed:79.6µs
offset:Pos(18904) code: 1364 bytes  data: 52 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x70
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    QWORD PTR [rbp-0x50],rax
  0001f: mov    QWORD PTR [rbp-0x58],rax
  00023: mov    QWORD PTR [rbp-0x60],rax
  00027: mov    rdi,QWORD PTR [rbp-0x28]
  0002b: test   rdi,0x7
  00032: jne    0x3c856
  00038: cmp    DWORD PTR [rdi+0x4],0x25
  0003c: jne    0x3c856
:00000 %3 = const[Vec]                      [Vec]
  00042: mov    rax,QWORD PTR [rip+0xffffffffffffdfef]        # 0xffffe038
  00049: cmp    rax,QWORD PTR [rip+0x518]        # 0x568
  00050: jne    0x3c865
  00056: mov    rax,QWORD PTR [rip+0x4fb]        # 0x558
  0005d: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = @x: Vec[IvarId(0)]
  00061: mov    rdi,QWORD PTR [rbp-0x28]
  00065: cmp    WORD PTR [rdi+0x2],0x3
  0006a: jne    0x3c8ab
  00070: mov    rax,QWORD PTR [rdi+0x10]
  00074: mov    QWORD PTR [rbp-0x48],rax
:00002 %5 = %1.call x()                     [Vec]
:00003 
  00078: mov    rdi,QWORD PTR [rbp-0x30]
  0007c: test   rdi,0x7
  00083: jne    0x3c8c1
  00089: cmp    DWORD PTR [rdi+0x4],0x25
  0008d: jne    0x3c8c1
  00093: cmp    DWORD PTR [rip+0xffffffffffffdf99],0x26        # 0xffffe033
  0009a: jne    0x3c8c1
  000a0: mov    esi,DWORD PTR [rip+0x4ce]        # 0x574
  000a6: cmp    esi,0xffffffff
  000a9: je     0x3c8d0
  000af: cmp    WORD PTR [rdi+0x2],0x3
  000b4: jne    0xcd
  000ba: cmp    esi,0x6
  000bd: jge    0xcd
  000c3: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c8: jmp    0xd9
  000cd: movabs rax,0x55c84f4d3440
  000d7: call   rax
  000d9: mov    QWORD PTR [rbp-0x50],rax
:00005 %4 = %4 - %5                         [Float][Float]
  000dd: mov    rdi,QWORD PTR [rbp-0x48]
  000e1: test   rdi,0x1
  000e8: jne    0x3c8f9
  000ee: test   rdi,0x2
  000f5: je     0x131
  000fb: xorps  xmm2,xmm2
  000fe: movabs rax,0x8000000000000002
  00108: cmp    rdi,rax
  0010b: je     0x143
  00111: mov    rax,rdi
  00114: sar    rax,0x3f
  00118: add    rax,0x2
  0011c: and    rdi,0xfffffffffffffffc
  00120: or     rdi,rax
  00123: rol    rdi,0x3d
  00127: movq   xmm2,rdi
  0012c: jmp    0x143
  00131: call   0xffffb69c
  00136: test   rax,rax
  00139: je     0x3c8f9
  0013f: movq   xmm2,xmm0
  00143: mov    rdi,QWORD PTR [rbp-0x50]
  00147: test   rdi,0x1
  0014e: jne    0x3c908
  00154: test   rdi,0x2
  0015b: je     0x197
  00161: xorps  xmm3,xmm3
  00164: movabs rax,0x8000000000000002
  0016e: cmp    rdi,rax
  00171: je     0x1a9
  00177: mov    rax,rdi
  0017a: sar    rax,0x3f
  0017e: add    rax,0x2
  00182: and    rdi,0xfffffffffffffffc
  00186: or     rdi,rax
  00189: rol    rdi,0x3d
  0018d: movq   xmm3,rdi
  00192: jmp    0x1a9
  00197: call   0xffffb69c
  0019c: test   rax,rax
  0019f: je     0x3c908
  001a5: movq   xmm3,xmm0
  001a9: subsd  xmm2,xmm3
:00006 %5 = @y: Vec[IvarId(1)]
  001ad: mov    rdi,QWORD PTR [rbp-0x28]
  001b1: cmp    WORD PTR [rdi+0x2],0x3
  001b6: jne    0x3c917
  001bc: mov    rax,QWORD PTR [rdi+0x18]
  001c0: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = %1.call y()                     [Vec]
:00008 
  001c4: mov    rdi,QWORD PTR [rbp-0x30]
  001c8: test   rdi,0x7
  001cf: jne    0x3c93f
  001d5: cmp    DWORD PTR [rdi+0x4],0x25
  001d9: jne    0x3c93f
  001df: cmp    DWORD PTR [rip+0xffffffffffffde4d],0x26        # 0xffffe033
  001e6: jne    0x3c93f
  001ec: mov    esi,DWORD PTR [rip+0x38a]        # 0x57c
  001f2: cmp    esi,0xffffffff
  001f5: je     0x3c95b
  001fb: cmp    WORD PTR [rdi+0x2],0x3
  00200: jne    0x219
  00206: cmp    esi,0x6
  00209: jge    0x219
  0020f: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00214: jmp    0x237
  00219: sub    rsp,0x10
  0021d: movq   QWORD PTR [rsp],xmm2
  00222: movabs rax,0x55c84f4d3440
  0022c: call   rax
  0022e: movq   xmm2,QWORD PTR [rsp]
  00233: add    rsp,0x10
  00237: mov    QWORD PTR [rbp-0x58],rax
:00010 %5 = %5 - %6                         [Float][Float]
  0023b: mov    rdi,QWORD PTR [rbp-0x50]
  0023f: test   rdi,0x1
  00246: jne    0x3c996
  0024c: test   rdi,0x2
  00253: je     0x28f
  00259: xorps  xmm3,xmm3
  0025c: movabs rax,0x8000000000000002
  00266: cmp    rdi,rax
  00269: je     0x2a1
  0026f: mov    rax,rdi
  00272: sar    rax,0x3f
  00276: add    rax,0x2
  0027a: and    rdi,0xfffffffffffffffc
  0027e: or     rdi,rax
  00281: rol    rdi,0x3d
  00285: movq   xmm3,rdi
  0028a: jmp    0x2a1
  0028f: call   0xffffb69c
  00294: test   rax,rax
  00297: je     0x3c996
  0029d: movq   xmm3,xmm0
  002a1: mov    rdi,QWORD PTR [rbp-0x58]
  002a5: test   rdi,0x1
  002ac: jne    0x3c9b2
  002b2: test   rdi,0x2
  002b9: je     0x2f5
  002bf: xorps  xmm4,xmm4
  002c2: movabs rax,0x8000000000000002
  002cc: cmp    rdi,rax
  002cf: je     0x307
  002d5: mov    rax,rdi
  002d8: sar    rax,0x3f
  002dc: add    rax,0x2
  002e0: and    rdi,0xfffffffffffffffc
  002e4: or     rdi,rax
  002e7: rol    rdi,0x3d
  002eb: movq   xmm4,rdi
  002f0: jmp    0x307
  002f5: call   0xffffb69c
  002fa: test   rax,rax
  002fd: je     0x3c9b2
  00303: movq   xmm4,xmm0
  00307: subsd  xmm3,xmm4
:00011 %6 = @z: Vec[IvarId(2)]
  0030b: mov    rdi,QWORD PTR [rbp-0x28]
  0030f: cmp    WORD PTR [rdi+0x2],0x3
  00314: jne    0x3c9ce
  0031a: mov    rax,QWORD PTR [rdi+0x20]
  0031e: mov    QWORD PTR [rbp-0x58],rax
:00012 %7 = %1.call z()                     [Vec]
:00013 
  00322: mov    rdi,QWORD PTR [rbp-0x30]
  00326: test   rdi,0x7
  0032d: jne    0x3ca02
  00333: cmp    DWORD PTR [rdi+0x4],0x25
  00337: jne    0x3ca02
  0033d: cmp    DWORD PTR [rip+0xffffffffffffdcef],0x26        # 0xffffe033
  00344: jne    0x3ca02
  0034a: mov    esi,DWORD PTR [rip+0x234]        # 0x584
  00350: cmp    esi,0xffffffff
  00353: je     0x3ca2b
  00359: cmp    WORD PTR [rdi+0x2],0x3
  0035e: jne    0x377
  00364: cmp    esi,0x6
  00367: jge    0x377
  0036d: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00372: jmp    0x3a1
  00377: sub    rsp,0x10
  0037b: movq   QWORD PTR [rsp],xmm2
  00380: movq   QWORD PTR [rsp+0x8],xmm3
  00386: movabs rax,0x55c84f4d3440
  00390: call   rax
  00392: movq   xmm2,QWORD PTR [rsp]
  00397: movq   xmm3,QWORD PTR [rsp+0x8]
  0039d: add    rsp,0x10
  003a1: mov    QWORD PTR [rbp-0x60],rax
:00015 %6 = %6 - %7                         [Float][Float]
  003a5: mov    rdi,QWORD PTR [rbp-0x58]
  003a9: test   rdi,0x1
  003b0: jne    0x3ca72
  003b6: test   rdi,0x2
  003bd: je     0x3f9
  003c3: xorps  xmm4,xmm4
  003c6: movabs rax,0x8000000000000002
  003d0: cmp    rdi,rax
  003d3: je     0x40b
  003d9: mov    rax,rdi
  003dc: sar    rax,0x3f
  003e0: add    rax,0x2
  003e4: and    rdi,0xfffffffffffffffc
  003e8: or     rdi,rax
  003eb: rol    rdi,0x3d
  003ef: movq   xmm4,rdi
  003f4: jmp    0x40b
  003f9: call   0xffffb69c
  003fe: test   rax,rax
  00401: je     0x3ca72
  00407: movq   xmm4,xmm0
  0040b: mov    rdi,QWORD PTR [rbp-0x60]
  0040f: test   rdi,0x1
  00416: jne    0x3ca9b
  0041c: test   rdi,0x2
  00423: je     0x45f
  00429: xorps  xmm5,xmm5
  0042c: movabs rax,0x8000000000000002
  00436: cmp    rdi,rax
  00439: je     0x471
  0043f: mov    rax,rdi
  00442: sar    rax,0x3f
  00446: add    rax,0x2
  0044a: and    rdi,0xfffffffffffffffc
  0044e: or     rdi,rax
  00451: rol    rdi,0x3d
  00455: movq   xmm5,rdi
  0045a: jmp    0x471
  0045f: call   0xffffb69c
  00464: test   rax,rax
  00467: je     0x3ca9b
  0046d: movq   xmm5,xmm0
  00471: subsd  xmm4,xmm5
:00016 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00017 
  00475: movq   xmm0,xmm2
  00479: call   0xffffb78f
  0047e: mov    QWORD PTR [rbp-0x48],rax
  00482: movq   xmm0,xmm3
  00486: call   0xffffb78f
  0048b: mov    QWORD PTR [rbp-0x50],rax
  0048f: movq   xmm0,xmm4
  00493: call   0xffffb78f
  00498: mov    QWORD PTR [rbp-0x58],rax
  0049c: mov    rdi,QWORD PTR [rbp-0x40]
  004a0: test   rdi,0x7
  004a7: jne    0x3cac4
  004ad: cmp    DWORD PTR [rdi+0x4],0x26
  004b1: jne    0x3cac4
  004b7: cmp    DWORD PTR [rip+0xffffffffffffdb75],0x26        # 0xffffe033
  004be: jne    0x3cac4
  004c4: mov    r9,0x0
  004cb: sub    rsp,0x20
  004cf: movq   QWORD PTR [rsp],xmm2
  004d4: movq   QWORD PTR [rsp+0x8],xmm3
  004da: movq   QWORD PTR [rsp+0x10],xmm4
  004e0: movq   QWORD PTR [rsp+0x18],xmm5
  004e6: mov    rdx,rdi
  004e9: mov    rax,QWORD PTR [rbx]
  004ec: lea    rdi,[rsp-0x18]
  004f1: mov    QWORD PTR [rdi],rax
  004f4: mov    QWORD PTR [rbx],rdi
  004f7: mov    QWORD PTR [rsp-0x20],0x0
  00500: mov    QWORD PTR [rsp-0x38],rcx
  00505: lea    rcx,[rbp-0x48]
  00509: mov    r8,0x3
  00510: call   0x3cad3
  00515: lea    rdi,[rbp-0x8]
  00519: mov    QWORD PTR [rbx],rdi
  0051c: movq   xmm2,QWORD PTR [rsp]
  00521: movq   xmm3,QWORD PTR [rsp+0x8]
  00527: movq   xmm4,QWORD PTR [rsp+0x10]
  0052d: movq   xmm5,QWORD PTR [rsp+0x18]
  00533: add    rsp,0x20
  00537: movabs r13,0x55c850b390d0
  00541: test   rax,rax
  00544: je     0xffffb663
  0054a: mov    QWORD PTR [rbp-0x38],rax
:00019 ret %2
  0054e: mov    rax,QWORD PTR [rbp-0x38]
  00552: leave  
  00553: ret    
==> start whole compile: <unnamed> FuncId(76) self_class:Scene start:[00000] bytecode:0x55c850b77c10
<== finished compile. elapsed:160.3µs
offset:Pos(20591) code: 6270 bytes  data: 327 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xd0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00064: ff 	mov    QWORD PTR [rbp-0xb8],rax
  0006b: ff 	mov    QWORD PTR [rbp-0xc0],rax
  00072:    	mov    rdi,QWORD PTR [rbp-0x28]
  00076: 00 	test   rdi,0x7
  0007d:    	jne    0x3c46e
  00083:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00087:    	jne    0x3c46e
:00000 %14 = dynvar(4, %4)
  0008d:    	mov    rax,QWORD PTR [rbp-0x10]
  00091:    	mov    rax,QWORD PTR [rax]
  00094:    	mov    rax,QWORD PTR [rax]
  00097:    	mov    rax,QWORD PTR [rax]
  0009a:    	mov    rax,QWORD PTR [rax-0x38]
  0009e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00001 %14 = %14 + 1: i16                   [Integer][Integer]
  000a5: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000ac: 00 	test   rdi,0x1
  000b3:    	je     0x3c47d
  000b9:    	add    rdi,0x2
  000bd:    	jo     0x3c47d
  000c3: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00002 dynvar(4, %4) = %14
  000ca:    	mov    rax,QWORD PTR [rbp-0x10]
  000ce:    	mov    rax,QWORD PTR [rax]
  000d1:    	mov    rax,QWORD PTR [rax]
  000d4:    	mov    rax,QWORD PTR [rax]
  000d7: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000de:    	mov    QWORD PTR [rax-0x38],rdi
:00003 %14 = dynvar(4, %1)
  000e2:    	mov    rax,QWORD PTR [rbp-0x10]
  000e6:    	mov    rax,QWORD PTR [rax]
  000e9:    	mov    rax,QWORD PTR [rax]
  000ec:    	mov    rax,QWORD PTR [rax]
  000ef:    	mov    rax,QWORD PTR [rax-0x20]
  000f3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00004 %2 = %14.call to_f()                 [Integer]
:00005 
  000fa: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00101: 00 	test   rdi,0x1
  00108:    	jne    0x125
  0010e: 00 	test   rdi,0x7
  00115:    	jne    0x3c48c
  0011b:    	cmp    DWORD PTR [rdi+0x4],0x6
  0011f:    	jne    0x3c48c
  00125: 26 	cmp    DWORD PTR [rip+0xffffffffffffd870],0x26        # 0xffffd99c
  0012c:    	jne    0x3c48c
  00132:    	sar    rdi,1
  00135:    	cvtsi2sd xmm2,rdi
:00007 %14 = dynvar(4, %2)
  0013a:    	mov    rax,QWORD PTR [rbp-0x10]
  0013e:    	mov    rax,QWORD PTR [rax]
  00141:    	mov    rax,QWORD PTR [rax]
  00144:    	mov    rax,QWORD PTR [rax]
  00147:    	mov    rax,QWORD PTR [rax-0x28]
  0014b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00008 %3 = %14.call to_f()                 [Integer]
:00009 
  00152: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00159: 00 	test   rdi,0x1
  00160:    	jne    0x17d
  00166: 00 	test   rdi,0x7
  0016d:    	jne    0x3c49b
  00173:    	cmp    DWORD PTR [rdi+0x4],0x6
  00177:    	jne    0x3c49b
  0017d: 26 	cmp    DWORD PTR [rip+0xffffffffffffd818],0x26        # 0xffffd99c
  00184:    	jne    0x3c49b
  0018a:    	sar    rdi,1
  0018d:    	cvtsi2sd xmm3,rdi
:00011 %14 = dynvar(2, %1)
  00192:    	mov    rax,QWORD PTR [rbp-0x10]
  00196:    	mov    rax,QWORD PTR [rax]
  00199:    	mov    rax,QWORD PTR [rax-0x20]
  0019d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %4 = %14.call to_f()                 [Integer]
:00013 
  001a4: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001ab: 00 	test   rdi,0x1
  001b2:    	jne    0x1cf
  001b8: 00 	test   rdi,0x7
  001bf:    	jne    0x3c4b7
  001c5:    	cmp    DWORD PTR [rdi+0x4],0x6
  001c9:    	jne    0x3c4b7
  001cf: 26 	cmp    DWORD PTR [rip+0xffffffffffffd7c6],0x26        # 0xffffd99c
  001d6:    	jne    0x3c4b7
  001dc:    	sar    rdi,1
  001df:    	cvtsi2sd xmm4,rdi
:00015 %14 = dynvar(3, %1)
  001e4:    	mov    rax,QWORD PTR [rbp-0x10]
  001e8:    	mov    rax,QWORD PTR [rax]
  001eb:    	mov    rax,QWORD PTR [rax]
  001ee:    	mov    rax,QWORD PTR [rax-0x20]
  001f2: ff 	mov    QWORD PTR [rbp-0x98],rax
:00016 %5 = %14.call to_f()                 [Integer]
:00017 
  001f9: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00200: 00 	test   rdi,0x1
  00207:    	jne    0x224
  0020d: 00 	test   rdi,0x7
  00214:    	jne    0x3c4e0
  0021a:    	cmp    DWORD PTR [rdi+0x4],0x6
  0021e:    	jne    0x3c4e0
  00224: 26 	cmp    DWORD PTR [rip+0xffffffffffffd771],0x26        # 0xffffd99c
  0022b:    	jne    0x3c4e0
  00231:    	sar    rdi,1
  00234:    	cvtsi2sd xmm5,rdi
:00019 %6 = %1.call to_f()                  [Integer]
:00020 
  00239:    	mov    rdi,QWORD PTR [rbp-0x30]
  0023d: 00 	test   rdi,0x1
  00244:    	jne    0x261
  0024a: 00 	test   rdi,0x7
  00251:    	jne    0x3c516
  00257:    	cmp    DWORD PTR [rdi+0x4],0x6
  0025b:    	jne    0x3c516
  00261: 26 	cmp    DWORD PTR [rip+0xffffffffffffd734],0x26        # 0xffffd99c
  00268:    	jne    0x3c516
  0026e:    	sar    rdi,1
  00271:    	cvtsi2sd xmm6,rdi
:00022 %14 = dynvar(1, %1)
  00276:    	mov    rax,QWORD PTR [rbp-0x10]
  0027a:    	mov    rax,QWORD PTR [rax-0x20]
  0027e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00023 %7 = %14.call to_f()                 [Integer]
:00024 
  00285: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0028c: 00 	test   rdi,0x1
  00293:    	jne    0x2b0
  00299: 00 	test   rdi,0x7
  002a0:    	jne    0x3c559
  002a6:    	cmp    DWORD PTR [rdi+0x4],0x6
  002aa:    	jne    0x3c559
  002b0: 26 	cmp    DWORD PTR [rip+0xffffffffffffd6e5],0x26        # 0xffffd99c
  002b7:    	jne    0x3c559
  002bd:    	sar    rdi,1
  002c0:    	cvtsi2sd xmm7,rdi
:00026 %14 = dynvar(4, %5)
  002c5:    	mov    rax,QWORD PTR [rbp-0x10]
  002c9:    	mov    rax,QWORD PTR [rax]
  002cc:    	mov    rax,QWORD PTR [rax]
  002cf:    	mov    rax,QWORD PTR [rax]
  002d2:    	mov    rax,QWORD PTR [rax-0x40]
  002d6: ff 	mov    QWORD PTR [rbp-0x98],rax
:00027 %14 = %6 / %14                       [Float][Float]
  002dd: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  002e4: 00 	test   rdi,0x1
  002eb:    	jne    0x3c5a9
  002f1: 00 	test   rdi,0x2
  002f8:    	je     0x335
  002fe:    	xorps  xmm8,xmm8
  00302: 00 	movabs rax,0x8000000000000002
  0030c:    	cmp    rdi,rax
  0030f:    	je     0x348
  00315:    	mov    rax,rdi
  00318:    	sar    rax,0x3f
  0031c:    	add    rax,0x2
  00320:    	and    rdi,0xfffffffffffffffc
  00324:    	or     rdi,rax
  00327:    	rol    rdi,0x3d
  0032b:    	movq   xmm8,rdi
  00330:    	jmp    0x348
  00335:    	call   0xffffb005
  0033a:    	test   rax,rax
  0033d:    	je     0x3c5a9
  00343:    	movq   xmm8,xmm0
  00348:    	movq   rax,xmm8
  0034d:    	test   rax,rax
  00350:    	je     0xffffaff1
  00356:    	movq   xmm0,xmm6
  0035a:    	divsd  xmm0,xmm8
  0035f:    	movq   xmm8,xmm0
:00028 %14 = %4 + %14                       [Float][Float]
  00364:    	addsd  xmm8,xmm4
:00029 %15 = literal[2.0]
  00369: 15 	movq   xmm9,QWORD PTR [rip+0x150f]        # 0x1881
  00372: 00 	mov    rax,0x2
  00379: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00030 %15 = %2 / %15                       [Float][Float]
  00380:    	movq   rax,xmm9
  00385:    	test   rax,rax
  00388:    	je     0xffffaff1
  0038e:    	movq   xmm0,xmm2
  00392:    	divsd  xmm0,xmm9
  00397:    	movq   xmm9,xmm0
:00031 %14 = %14 - %15                      [Float][Float]
  0039c:    	subsd  xmm8,xmm9
:00032 %15 = literal[2.0]
  003a1: 14 	movq   xmm9,QWORD PTR [rip+0x14e7]        # 0x1891
  003aa: 00 	mov    rax,0x2
  003b1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00033 %15 = %2 / %15                       [Float][Float]
  003b8:    	movq   rax,xmm9
  003bd:    	test   rax,rax
  003c0:    	je     0xffffaff1
  003c6:    	movq   xmm0,xmm2
  003ca:    	divsd  xmm0,xmm9
  003cf:    	movq   xmm9,xmm0
:00034 %8 = %14 / %15                       [Float][Float]
  003d4:    	movq   xmm10,xmm8
  003d9:    	movq   rax,xmm9
  003de:    	test   rax,rax
  003e1:    	je     0xffffaff1
  003e7:    	divsd  xmm10,xmm9
:00035 %14 = dynvar(4, %5)
  003ec:    	mov    rax,QWORD PTR [rbp-0x10]
  003f0:    	mov    rax,QWORD PTR [rax]
  003f3:    	mov    rax,QWORD PTR [rax]
  003f6:    	mov    rax,QWORD PTR [rax]
  003f9:    	mov    rax,QWORD PTR [rax-0x40]
  003fd: ff 	mov    QWORD PTR [rbp-0x98],rax
:00036 %14 = %7 / %14                       [Float][Float]
  00404: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0040b: 00 	test   rdi,0x1
  00412:    	jne    0x3c606
  00418: 00 	test   rdi,0x2
  0041f:    	je     0x45c
  00425:    	xorps  xmm8,xmm8
  00429: 00 	movabs rax,0x8000000000000002
  00433:    	cmp    rdi,rax
  00436:    	je     0x46f
  0043c:    	mov    rax,rdi
  0043f:    	sar    rax,0x3f
  00443:    	add    rax,0x2
  00447:    	and    rdi,0xfffffffffffffffc
  0044b:    	or     rdi,rax
  0044e:    	rol    rdi,0x3d
  00452:    	movq   xmm8,rdi
  00457:    	jmp    0x46f
  0045c:    	call   0xffffb005
  00461:    	test   rax,rax
  00464:    	je     0x3c606
  0046a:    	movq   xmm8,xmm0
  0046f:    	movq   rax,xmm8
  00474:    	test   rax,rax
  00477:    	je     0xffffaff1
  0047d:    	movq   xmm0,xmm7
  00481:    	divsd  xmm0,xmm8
  00486:    	movq   xmm8,xmm0
:00037 %14 = %5 + %14                       [Float][Float]
  0048b:    	addsd  xmm8,xmm5
:00038 %15 = literal[2.0]
  00490: 14 	movq   xmm9,QWORD PTR [rip+0x1408]        # 0x18a1
  00499: 00 	mov    rax,0x2
  004a0: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00039 %15 = %3 / %15                       [Float][Float]
  004a7:    	movq   rax,xmm9
  004ac:    	test   rax,rax
  004af:    	je     0xffffaff1
  004b5:    	movq   xmm0,xmm3
  004b9:    	divsd  xmm0,xmm9
  004be:    	movq   xmm9,xmm0
:00040 %14 = %14 - %15                      [Float][Float]
  004c3:    	subsd  xmm8,xmm9
:00041 %14 = neg %14                        [Float]
  004c8: 00 	xorps  xmm8,XMMWORD PTR [rip+0x13e1]        # 0x18b1
:00042 %15 = literal[2.0]
  004d0: 13 	movq   xmm9,QWORD PTR [rip+0x13e8]        # 0x18c1
  004d9: 00 	mov    rax,0x2
  004e0: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00043 %15 = %3 / %15                       [Float][Float]
  004e7:    	movq   rax,xmm9
  004ec:    	test   rax,rax
  004ef:    	je     0xffffaff1
  004f5:    	movq   xmm0,xmm3
  004f9:    	divsd  xmm0,xmm9
  004fe:    	movq   xmm9,xmm0
:00044 %9 = %14 / %15                       [Float][Float]
  00503:    	movq   xmm11,xmm8
  00508:    	movq   rax,xmm9
  0050d:    	test   rax,rax
  00510:    	je     0xffffaff1
  00516:    	divsd  xmm11,xmm9
:00045 %15 = const[Vec]                     [Vec]
  0051b: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd47f]        # 0xffffd9a1
  00522: 00 	cmp    rax,QWORD PTR [rip+0x13b8]        # 0x18e1
  00529:    	jne    0x3c682
  0052f: 00 	mov    rax,QWORD PTR [rip+0x139b]        # 0x18d1
  00536: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00046 %16 = %8
:00047 %17 = %9
:00048 %18 = literal[-1.0]
  0053d: 13 	movq   xmm9,QWORD PTR [rip+0x13ab]        # 0x18f1
  00546: 00 	movabs rax,0xff80000000000006
  00550: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00049 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
:00050 
  00557:    	movq   xmm0,xmm10
  0055c:    	call   0xffffb0f8
  00561: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00568:    	movq   xmm0,xmm11
  0056d:    	call   0xffffb0f8
  00572: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00579: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00580: 00 	test   rdi,0x7
  00587:    	jne    0x3c740
  0058d:    	cmp    DWORD PTR [rdi+0x4],0x26
  00591:    	jne    0x3c740
  00597: 26 	cmp    DWORD PTR [rip+0xffffffffffffd3fe],0x26        # 0xffffd99c
  0059e:    	jne    0x3c740
  005a4: 00 	mov    r9,0x0
  005ab:    	sub    rsp,0x50
  005af:    	movq   QWORD PTR [rsp],xmm2
  005b4:    	movq   QWORD PTR [rsp+0x8],xmm3
  005ba:    	movq   QWORD PTR [rsp+0x10],xmm4
  005c0:    	movq   QWORD PTR [rsp+0x18],xmm5
  005c6:    	movq   QWORD PTR [rsp+0x20],xmm6
  005cc:    	movq   QWORD PTR [rsp+0x28],xmm7
  005d2: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  005d9: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  005e0: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  005e7:    	mov    rdx,rdi
  005ea:    	mov    rax,QWORD PTR [rbx]
  005ed:    	lea    rdi,[rsp-0x18]
  005f2:    	mov    QWORD PTR [rdi],rax
  005f5:    	mov    QWORD PTR [rbx],rdi
  005f8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00601:    	mov    QWORD PTR [rsp-0x38],rcx
  00606: ff 	lea    rcx,[rbp-0xa8]
  0060d: 00 	mov    r8,0x3
  00614:    	call   0x3c7b9
  00619:    	lea    rdi,[rbp-0x8]
  0061d:    	mov    QWORD PTR [rbx],rdi
  00620:    	movq   xmm2,QWORD PTR [rsp]
  00625:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0062b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00631:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00637:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0063d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00643: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0064a: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00651: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00658:    	add    rsp,0x50
  0065c: c8 	movabs r13,0x55c850b77f40
  00666:    	test   rax,rax
  00669:    	je     0xffffafcc
  0066f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00052 %10 = %14.call vnormalize()          [Vec]
:00053 
  00676: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0067d: 00 	test   rdi,0x7
  00684:    	jne    0x3c7eb
  0068a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0068e:    	jne    0x3c7eb
  00694: 26 	cmp    DWORD PTR [rip+0xffffffffffffd301],0x26        # 0xffffd99c
  0069b:    	jne    0x3c7eb
  006a1:    	sub    rsp,0x50
  006a5:    	movq   QWORD PTR [rsp],xmm2
  006aa:    	movq   QWORD PTR [rsp+0x8],xmm3
  006b0:    	movq   QWORD PTR [rsp+0x10],xmm4
  006b6:    	movq   QWORD PTR [rsp+0x18],xmm5
  006bc:    	movq   QWORD PTR [rsp+0x20],xmm6
  006c2:    	movq   QWORD PTR [rsp+0x28],xmm7
  006c8: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  006cf: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  006d6: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  006dd:    	mov    rax,QWORD PTR [rbx]
  006e0:    	lea    rdi,[rsp-0x18]
  006e5:    	mov    QWORD PTR [rdi],rax
  006e8:    	mov    QWORD PTR [rbx],rdi
  006eb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  006f4:    	mov    QWORD PTR [rsp-0x38],rcx
  006f9: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00700:    	mov    QWORD PTR [rsp-0x38],rax
  00705: 00 	mov    rdi,0x0
  0070c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00715: 07 	movabs rax,0x70000003d
  0071f:    	mov    QWORD PTR [rsp-0x28],rax
  00724: c8 	movabs r13,0x55c850b416a0
  0072e:    	call   0xffffe25a
  00733:    	lea    rdi,[rbp-0x8]
  00737:    	mov    QWORD PTR [rbx],rdi
  0073a:    	movq   xmm2,QWORD PTR [rsp]
  0073f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00745:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0074b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00751:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00757:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0075d: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00764: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0076b: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00772:    	add    rsp,0x50
  00776: c8 	movabs r13,0x55c850b77f70
  00780:    	test   rax,rax
  00783:    	je     0xffffafcc
  00789:    	mov    QWORD PTR [rbp-0x78],rax
:00055 %14 = const[Ray]                     [Ray]
  0078d: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd20d]        # 0xffffd9a1
  00794: 00 	cmp    rax,QWORD PTR [rip+0x1176]        # 0x1911
  0079b:    	jne    0x3c864
  007a1: 00 	mov    rax,QWORD PTR [rip+0x1159]        # 0x1901
  007a8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00056 %16 = const[Vec]                     [Vec]
  007af: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd1eb]        # 0xffffd9a1
  007b6: 00 	cmp    rax,QWORD PTR [rip+0x1174]        # 0x1931
  007bd:    	jne    0x3c922
  007c3: 00 	mov    rax,QWORD PTR [rip+0x1157]        # 0x1921
  007ca: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00057 %17 = literal[0.0]
  007d1: 11 	movq   xmm8,QWORD PTR [rip+0x1167]        # 0x1941
  007da: 00 	movabs rax,0x8000000000000002
  007e4: ff 	mov    QWORD PTR [rbp-0xb0],rax
:00058 %18 = literal[0.0]
  007eb: 11 	movq   xmm9,QWORD PTR [rip+0x115d]        # 0x1951
  007f4: 00 	movabs rax,0x8000000000000002
  007fe: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00059 %19 = literal[0.0]
  00805: 11 	movq   xmm12,QWORD PTR [rip+0x1153]        # 0x1961
  0080e: 00 	movabs rax,0x8000000000000002
  00818: ff 	mov    QWORD PTR [rbp-0xc0],rax
:00060 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
:00061 
  0081f: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  00826: 00 	test   rdi,0x7
  0082d:    	jne    0x3c9e0
  00833:    	cmp    DWORD PTR [rdi+0x4],0x26
  00837:    	jne    0x3c9e0
  0083d: 26 	cmp    DWORD PTR [rip+0xffffffffffffd158],0x26        # 0xffffd99c
  00844:    	jne    0x3c9e0
  0084a: 00 	mov    r9,0x0
  00851:    	sub    rsp,0x60
  00855:    	movq   QWORD PTR [rsp],xmm2
  0085a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00860:    	movq   QWORD PTR [rsp+0x10],xmm4
  00866:    	movq   QWORD PTR [rsp+0x18],xmm5
  0086c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00872:    	movq   QWORD PTR [rsp+0x28],xmm7
  00878: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0087f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00886: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0088d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00894: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0089b:    	mov    rdx,rdi
  0089e:    	mov    rax,QWORD PTR [rbx]
  008a1:    	lea    rdi,[rsp-0x18]
  008a6:    	mov    QWORD PTR [rdi],rax
  008a9:    	mov    QWORD PTR [rbx],rdi
  008ac: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008b5:    	mov    QWORD PTR [rsp-0x38],rcx
  008ba: ff 	lea    rcx,[rbp-0xb0]
  008c1: 00 	mov    r8,0x3
  008c8:    	call   0x3ca59
  008cd:    	lea    rdi,[rbp-0x8]
  008d1:    	mov    QWORD PTR [rbx],rdi
  008d4:    	movq   xmm2,QWORD PTR [rsp]
  008d9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008df:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008e5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008eb:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008f1:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008f7: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008fe: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00905: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0090c: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00913: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0091a:    	add    rsp,0x60
  0091e: c8 	movabs r13,0x55c850b77ff0
  00928:    	test   rax,rax
  0092b:    	je     0xffffafcc
  00931: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00063 %16 = %10
  00938:    	mov    rax,QWORD PTR [rbp-0x78]
  0093c: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00064 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
:00065 
  00943: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0094a: 00 	test   rdi,0x7
  00951:    	jne    0x3ca8b
  00957:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0095b:    	jne    0x3ca8b
  00961: 26 	cmp    DWORD PTR [rip+0xffffffffffffd034],0x26        # 0xffffd99c
  00968:    	jne    0x3ca8b
  0096e: 00 	mov    r9,0x0
  00975:    	sub    rsp,0x60
  00979:    	movq   QWORD PTR [rsp],xmm2
  0097e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00984:    	movq   QWORD PTR [rsp+0x10],xmm4
  0098a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00990:    	movq   QWORD PTR [rsp+0x20],xmm6
  00996:    	movq   QWORD PTR [rsp+0x28],xmm7
  0099c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  009a3: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  009aa: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  009b1: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  009b8: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  009bf:    	mov    rdx,rdi
  009c2:    	mov    rax,QWORD PTR [rbx]
  009c5:    	lea    rdi,[rsp-0x18]
  009ca:    	mov    QWORD PTR [rdi],rax
  009cd:    	mov    QWORD PTR [rbx],rdi
  009d0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009d9:    	mov    QWORD PTR [rsp-0x38],rcx
  009de: ff 	lea    rcx,[rbp-0xa0]
  009e5: 00 	mov    r8,0x2
  009ec:    	call   0x3cb04
  009f1:    	lea    rdi,[rbp-0x8]
  009f5:    	mov    QWORD PTR [rbx],rdi
  009f8:    	movq   xmm2,QWORD PTR [rsp]
  009fd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a03:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a09:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a0f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00a15:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00a1b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00a22: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00a29: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00a30: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00a37: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a3e:    	add    rsp,0x60
  00a42: c8 	movabs r13,0x55c850b78030
  00a4c:    	test   rax,rax
  00a4f:    	je     0xffffafcc
  00a55:    	mov    QWORD PTR [rbp-0x80],rax
:00067 %14 = const[Isect]                   [Isect]
  00a59: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffcf41]        # 0xffffd9a1
  00a60: 00 	cmp    rax,QWORD PTR [rip+0xf1a]        # 0x1981
  00a67:    	jne    0x3cb36
  00a6d: 00 	mov    rax,QWORD PTR [rip+0xefd]        # 0x1971
  00a74: ff 	mov    QWORD PTR [rbp-0x98],rax
:00068 %12 = %14.call new()                 [#<Class:Isect>]
:00069 
  00a7b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a82: 00 	test   rdi,0x7
  00a89:    	jne    0x3cc10
  00a8f:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00a93:    	jne    0x3cc10
  00a99: 26 	cmp    DWORD PTR [rip+0xffffffffffffcefc],0x26        # 0xffffd99c
  00aa0:    	jne    0x3cc10
  00aa6: 00 	mov    r9,0x0
  00aad:    	sub    rsp,0x60
  00ab1:    	movq   QWORD PTR [rsp],xmm2
  00ab6:    	movq   QWORD PTR [rsp+0x8],xmm3
  00abc:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ac2:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ac8:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ace:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ad4: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00adb: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00ae2: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ae9: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00af0: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00af7:    	mov    rdx,rdi
  00afa:    	mov    rax,QWORD PTR [rbx]
  00afd:    	lea    rdi,[rsp-0x18]
  00b02:    	mov    QWORD PTR [rdi],rax
  00b05:    	mov    QWORD PTR [rbx],rdi
  00b08: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b11:    	mov    QWORD PTR [rsp-0x38],rcx
  00b16: ff 	lea    rcx,[rbp-0xa0]
  00b1d: 00 	mov    r8,0x0
  00b24:    	call   0x3cc89
  00b29:    	lea    rdi,[rbp-0x8]
  00b2d:    	mov    QWORD PTR [rbx],rdi
  00b30:    	movq   xmm2,QWORD PTR [rsp]
  00b35:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b3b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b41:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b47:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b4d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b53: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b5a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b61: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b68: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b6f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b76:    	add    rsp,0x60
  00b7a: c8 	movabs r13,0x55c850b78070
  00b84:    	test   rax,rax
  00b87:    	je     0xffffafcc
  00b8d: ff 	mov    QWORD PTR [rbp-0x88],rax
:00071 %14 = @spheres: Scene[IvarId(0)]
  00b94:    	mov    rdi,QWORD PTR [rbp-0x28]
  00b98:    	cmp    WORD PTR [rdi+0x2],0x3
  00b9d:    	jne    0x3ccbb
  00ba3:    	mov    rax,QWORD PTR [rdi+0x10]
  00ba7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 %15 = 0: i32
  00bae: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00073 %14 = %14.[%15]
  00bb9:    	sub    rsp,0x60
  00bbd:    	movq   QWORD PTR [rsp],xmm2
  00bc2:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bc8:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bce:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bd4:    	movq   QWORD PTR [rsp+0x20],xmm6
  00bda:    	movq   QWORD PTR [rsp+0x28],xmm7
  00be0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00be7: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00bee: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00bf5: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00bfc: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00c03: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00c0a: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00c11:    	mov    rdi,rbx
  00c14:    	mov    rsi,r12
  00c17: c8 	movabs rax,0x55c84f4b6c00
  00c21:    	call   rax
  00c23:    	movq   xmm2,QWORD PTR [rsp]
  00c28:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c2e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c34:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c3a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c40:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c46: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00c4d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00c54: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00c5b: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c62: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c69:    	add    rsp,0x60
  00c6d: c8 	movabs r13,0x55c850b780b0
  00c77:    	test   rax,rax
  00c7a:    	je     0xffffafcc
  00c80: ff 	mov    QWORD PTR [rbp-0x98],rax
:00074 %15 = %11
  00c87:    	mov    rax,QWORD PTR [rbp-0x80]
  00c8b: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00075 %16 = %12
  00c92: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00c99: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00076 _ = %14.call intersect(%15; 2)       [Sphere]
:00077 
  00ca0: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00ca7: 00 	test   rdi,0x7
  00cae:    	jne    0x3cd65
  00cb4:    	cmp    DWORD PTR [rdi+0x4],0x27
  00cb8:    	jne    0x3cd65
  00cbe: 26 	cmp    DWORD PTR [rip+0xffffffffffffccd7],0x26        # 0xffffd99c
  00cc5:    	jne    0x3cd65
  00ccb:    	sub    rsp,0x60
  00ccf:    	movq   QWORD PTR [rsp],xmm2
  00cd4:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cda:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ce0:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ce6:    	movq   QWORD PTR [rsp+0x20],xmm6
  00cec:    	movq   QWORD PTR [rsp+0x28],xmm7
  00cf2: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00cf9: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00d00: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00d07: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00d0e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00d15:    	mov    rax,QWORD PTR [rbx]
  00d18:    	lea    rdi,[rsp-0x18]
  00d1d:    	mov    QWORD PTR [rdi],rax
  00d20:    	mov    QWORD PTR [rbx],rdi
  00d23: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d2c:    	mov    QWORD PTR [rsp-0x38],rcx
  00d31: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00d38:    	mov    QWORD PTR [rsp-0x38],rax
  00d3d: 00 	mov    rdi,0x2
  00d44: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00d4b:    	mov    QWORD PTR [rsp-0x40],rax
  00d50: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00d57:    	mov    QWORD PTR [rsp-0x48],rax
  00d5c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d65: 10 	movabs rax,0x100000003f
  00d6f:    	mov    QWORD PTR [rsp-0x28],rax
  00d74: c8 	movabs r13,0x55c850b316a0
  00d7e:    	call   0xffffe562
  00d83:    	lea    rdi,[rbp-0x8]
  00d87:    	mov    QWORD PTR [rbx],rdi
  00d8a:    	movq   xmm2,QWORD PTR [rsp]
  00d8f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d95:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d9b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00da1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00da7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00dad: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00db4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00dbb: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00dc2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00dc9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00dd0:    	add    rsp,0x60
  00dd4: c8 	movabs r13,0x55c850b780f0
  00dde:    	test   rax,rax
  00de1:    	je     0xffffafcc
:00079 %14 = @spheres: Scene[IvarId(0)]
  00de7:    	mov    rdi,QWORD PTR [rbp-0x28]
  00deb:    	cmp    WORD PTR [rdi+0x2],0x3
  00df0:    	jne    0x3cdde
  00df6:    	mov    rax,QWORD PTR [rdi+0x10]
  00dfa: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 %15 = 1: i32
  00e01: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00081 %14 = %14.[%15]
  00e0c:    	sub    rsp,0x60
  00e10:    	movq   QWORD PTR [rsp],xmm2
  00e15:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e1b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e21:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e27:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e2d:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e33: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e3a: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e41: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e48: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e4f: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e56: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00e5d: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00e64:    	mov    rdi,rbx
  00e67:    	mov    rsi,r12
  00e6a: c8 	movabs rax,0x55c84f4b6c00
  00e74:    	call   rax
  00e76:    	movq   xmm2,QWORD PTR [rsp]
  00e7b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e81:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e87:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e8d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e93:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e99: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00ea0: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00ea7: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00eae: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00eb5: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00ebc:    	add    rsp,0x60
  00ec0: c8 	movabs r13,0x55c850b78130
  00eca:    	test   rax,rax
  00ecd:    	je     0xffffafcc
  00ed3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00082 %15 = %11
  00eda:    	mov    rax,QWORD PTR [rbp-0x80]
  00ede: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00083 %16 = %12
  00ee5: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00eec: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00084 _ = %14.call intersect(%15; 2)       [Sphere]
:00085 
  00ef3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00efa: 00 	test   rdi,0x7
  00f01:    	jne    0x3ce88
  00f07:    	cmp    DWORD PTR [rdi+0x4],0x27
  00f0b:    	jne    0x3ce88
  00f11: 26 	cmp    DWORD PTR [rip+0xffffffffffffca84],0x26        # 0xffffd99c
  00f18:    	jne    0x3ce88
  00f1e:    	sub    rsp,0x60
  00f22:    	movq   QWORD PTR [rsp],xmm2
  00f27:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f2d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f33:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f39:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f3f:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f45: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f4c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f53: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f5a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f61: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f68:    	mov    rax,QWORD PTR [rbx]
  00f6b:    	lea    rdi,[rsp-0x18]
  00f70:    	mov    QWORD PTR [rdi],rax
  00f73:    	mov    QWORD PTR [rbx],rdi
  00f76: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f7f:    	mov    QWORD PTR [rsp-0x38],rcx
  00f84: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00f8b:    	mov    QWORD PTR [rsp-0x38],rax
  00f90: 00 	mov    rdi,0x2
  00f97: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00f9e:    	mov    QWORD PTR [rsp-0x40],rax
  00fa3: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00faa:    	mov    QWORD PTR [rsp-0x48],rax
  00faf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fb8: 10 	movabs rax,0x100000003f
  00fc2:    	mov    QWORD PTR [rsp-0x28],rax
  00fc7: c8 	movabs r13,0x55c850b316a0
  00fd1:    	call   0xffffe562
  00fd6:    	lea    rdi,[rbp-0x8]
  00fda:    	mov    QWORD PTR [rbx],rdi
  00fdd:    	movq   xmm2,QWORD PTR [rsp]
  00fe2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fe8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fee:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ff4:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ffa:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01000: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01007: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0100e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01015: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0101c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01023:    	add    rsp,0x60
  01027: c8 	movabs r13,0x55c850b78170
  01031:    	test   rax,rax
  01034:    	je     0xffffafcc
:00087 %14 = @spheres: Scene[IvarId(0)]
  0103a:    	mov    rdi,QWORD PTR [rbp-0x28]
  0103e:    	cmp    WORD PTR [rdi+0x2],0x3
  01043:    	jne    0x3cf01
  01049:    	mov    rax,QWORD PTR [rdi+0x10]
  0104d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00088 %15 = 2: i32
  01054: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00089 %14 = %14.[%15]
  0105f:    	sub    rsp,0x60
  01063:    	movq   QWORD PTR [rsp],xmm2
  01068:    	movq   QWORD PTR [rsp+0x8],xmm3
  0106e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01074:    	movq   QWORD PTR [rsp+0x18],xmm5
  0107a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01080:    	movq   QWORD PTR [rsp+0x28],xmm7
  01086: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0108d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01094: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0109b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  010a2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  010a9: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  010b0: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  010b7:    	mov    rdi,rbx
  010ba:    	mov    rsi,r12
  010bd: c8 	movabs rax,0x55c84f4b6c00
  010c7:    	call   rax
  010c9:    	movq   xmm2,QWORD PTR [rsp]
  010ce:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010d4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010da:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010e0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  010e6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  010ec: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  010f3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  010fa: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01101: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01108: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0110f:    	add    rsp,0x60
  01113: c8 	movabs r13,0x55c850b781b0
  0111d:    	test   rax,rax
  01120:    	je     0xffffafcc
  01126: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %15 = %11
  0112d:    	mov    rax,QWORD PTR [rbp-0x80]
  01131: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00091 %16 = %12
  01138: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0113f: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00092 _ = %14.call intersect(%15; 2)       [Sphere]
:00093 
  01146: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0114d: 00 	test   rdi,0x7
  01154:    	jne    0x3cfab
  0115a:    	cmp    DWORD PTR [rdi+0x4],0x27
  0115e:    	jne    0x3cfab
  01164: 26 	cmp    DWORD PTR [rip+0xffffffffffffc831],0x26        # 0xffffd99c
  0116b:    	jne    0x3cfab
  01171:    	sub    rsp,0x60
  01175:    	movq   QWORD PTR [rsp],xmm2
  0117a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01180:    	movq   QWORD PTR [rsp+0x10],xmm4
  01186:    	movq   QWORD PTR [rsp+0x18],xmm5
  0118c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01192:    	movq   QWORD PTR [rsp+0x28],xmm7
  01198: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0119f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  011a6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  011ad: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  011b4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  011bb:    	mov    rax,QWORD PTR [rbx]
  011be:    	lea    rdi,[rsp-0x18]
  011c3:    	mov    QWORD PTR [rdi],rax
  011c6:    	mov    QWORD PTR [rbx],rdi
  011c9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011d2:    	mov    QWORD PTR [rsp-0x38],rcx
  011d7: ff 	mov    rax,QWORD PTR [rbp-0x98]
  011de:    	mov    QWORD PTR [rsp-0x38],rax
  011e3: 00 	mov    rdi,0x2
  011ea: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  011f1:    	mov    QWORD PTR [rsp-0x40],rax
  011f6: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  011fd:    	mov    QWORD PTR [rsp-0x48],rax
  01202: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0120b: 10 	movabs rax,0x100000003f
  01215:    	mov    QWORD PTR [rsp-0x28],rax
  0121a: c8 	movabs r13,0x55c850b316a0
  01224:    	call   0xffffe562
  01229:    	lea    rdi,[rbp-0x8]
  0122d:    	mov    QWORD PTR [rbx],rdi
  01230:    	movq   xmm2,QWORD PTR [rsp]
  01235:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0123b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01241:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01247:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0124d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01253: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0125a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01261: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01268: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0126f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01276:    	add    rsp,0x60
  0127a: c8 	movabs r13,0x55c850b781f0
  01284:    	test   rax,rax
  01287:    	je     0xffffafcc
:00095 %14 = @plane: Scene[IvarId(1)]
  0128d:    	mov    rdi,QWORD PTR [rbp-0x28]
  01291:    	cmp    WORD PTR [rdi+0x2],0x3
  01296:    	jne    0x3d024
  0129c:    	mov    rax,QWORD PTR [rdi+0x18]
  012a0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00096 %15 = %11
  012a7:    	mov    rax,QWORD PTR [rbp-0x80]
  012ab: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00097 %16 = %12
  012b2: ff 	mov    rax,QWORD PTR [rbp-0x88]
  012b9: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00098 _ = %14.call intersect(%15; 2)       [Plane]
:00099 
  012c0: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  012c7: 00 	test   rdi,0x7
  012ce:    	jne    0x3d0ce
  012d4:    	cmp    DWORD PTR [rdi+0x4],0x29
  012d8:    	jne    0x3d0ce
  012de: 26 	cmp    DWORD PTR [rip+0xffffffffffffc6b7],0x26        # 0xffffd99c
  012e5:    	jne    0x3d0ce
  012eb:    	sub    rsp,0x60
  012ef:    	movq   QWORD PTR [rsp],xmm2
  012f4:    	movq   QWORD PTR [rsp+0x8],xmm3
  012fa:    	movq   QWORD PTR [rsp+0x10],xmm4
  01300:    	movq   QWORD PTR [rsp+0x18],xmm5
  01306:    	movq   QWORD PTR [rsp+0x20],xmm6
  0130c:    	movq   QWORD PTR [rsp+0x28],xmm7
  01312: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01319: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01320: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01327: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0132e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01335:    	mov    rax,QWORD PTR [rbx]
  01338:    	lea    rdi,[rsp-0x18]
  0133d:    	mov    QWORD PTR [rdi],rax
  01340:    	mov    QWORD PTR [rbx],rdi
  01343: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0134c:    	mov    QWORD PTR [rsp-0x38],rcx
  01351: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01358:    	mov    QWORD PTR [rsp-0x38],rax
  0135d: 00 	mov    rdi,0x2
  01364: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0136b:    	mov    QWORD PTR [rsp-0x40],rax
  01370: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01377:    	mov    QWORD PTR [rsp-0x48],rax
  0137c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01385: 0e 	movabs rax,0xe00000041
  0138f:    	mov    QWORD PTR [rsp-0x28],rax
  01394: c8 	movabs r13,0x55c850b33540
  0139e:    	call   0xffffeb4f
  013a3:    	lea    rdi,[rbp-0x8]
  013a7:    	mov    QWORD PTR [rbx],rdi
  013aa:    	movq   xmm2,QWORD PTR [rsp]
  013af:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013b5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  013bb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  013c1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  013c7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  013cd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  013d4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  013db: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  013e2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  013e9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  013f0:    	add    rsp,0x60
  013f4: c8 	movabs r13,0x55c850b78250
  013fe:    	test   rax,rax
  01401:    	je     0xffffafcc
:00101 %14 = %12.call hit()                 [Isect]
:00102 
  01407: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0140e: 00 	test   rdi,0x7
  01415:    	jne    0x3d147
  0141b:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0141f:    	jne    0x3d147
  01425: 26 	cmp    DWORD PTR [rip+0xffffffffffffc570],0x26        # 0xffffd99c
  0142c:    	jne    0x3d147
  01432:    	mov    esi,DWORD PTR [rip+0x555]        # 0x198d
  01438:    	cmp    esi,0xffffffff
  0143b:    	je     0x3d1c0
  01441:    	cmp    WORD PTR [rdi+0x2],0x3
  01446:    	jne    0x145f
  0144c:    	cmp    esi,0x6
  0144f:    	jge    0x145f
  01455:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0145a:    	jmp    0x14ff
  0145f:    	sub    rsp,0x60
  01463:    	movq   QWORD PTR [rsp],xmm2
  01468:    	movq   QWORD PTR [rsp+0x8],xmm3
  0146e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01474:    	movq   QWORD PTR [rsp+0x18],xmm5
  0147a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01480:    	movq   QWORD PTR [rsp+0x28],xmm7
  01486: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0148d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01494: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0149b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  014a2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  014a9: c8 	movabs rax,0x55c84f4d3440
  014b3:    	call   rax
  014b5:    	movq   xmm2,QWORD PTR [rsp]
  014ba:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014c0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014c6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014cc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  014d2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  014d8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  014df: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  014e6: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  014ed: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  014f4: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  014fb:    	add    rsp,0x60
  014ff: ff 	mov    QWORD PTR [rbp-0x98],rax
:00104 condnotbr %14 =>:00147
  01506: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0150d:    	or     rax,0x10
  01511:    	cmp    rax,0x14
  01515:    	je     0x186a
:00105 %14 = %12
  0151b: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01522: ff 	mov    QWORD PTR [rbp-0x98],rax
:00106 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
:00107 
  01529: 00 	mov    rdi,0x4
  01530: 01 	sub    DWORD PTR [rip+0x45a],0x1        # 0x1991
  01537:    	jne    0x3d27d
  0153d:    	mov    rdi,r12
  01540:    	mov    esi,DWORD PTR [rbp-0x18]
  01543:    	mov    rdx,QWORD PTR [rbp-0x28]
  01547: c8 	movabs rax,0x55c84f4bca80
  01551:    	call   rax
  01553: 00 	mov    rdi,0x4
  0155a:    	jmp    0x3d27d
:00109 %14 = dynvar(2, %2)
  0155f:    	mov    rax,QWORD PTR [rbp-0x10]
  01563:    	mov    rax,QWORD PTR [rax]
  01566:    	mov    rax,QWORD PTR [rax-0x28]
  0156a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00110 %16 = dynvar(2, %2)
  01571:    	mov    rax,QWORD PTR [rbp-0x10]
  01575:    	mov    rax,QWORD PTR [rax]
  01578:    	mov    rax,QWORD PTR [rax-0x28]
  0157c: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00111 %15 = %16.call x()                   [<INVALID>]
:00112 
  01583: 00 	mov    rdi,0x4
  0158a: 01 	sub    DWORD PTR [rip+0x404],0x1        # 0x1995
  01591:    	jne    0x3d2f6
  01597:    	mov    rdi,r12
  0159a:    	mov    esi,DWORD PTR [rbp-0x18]
  0159d:    	mov    rdx,QWORD PTR [rbp-0x28]
  015a1: c8 	movabs rax,0x55c84f4bca80
  015ab:    	call   rax
  015ad: 00 	mov    rdi,0x4
  015b4:    	jmp    0x3d2f6
:00114 %16 = %13.call x()                   [<INVALID>]
:00115 
  015b9: 00 	mov    rdi,0x4
  015c0: 01 	sub    DWORD PTR [rip+0x3d2],0x1        # 0x1999
  015c7:    	jne    0x3d36f
  015cd:    	mov    rdi,r12
  015d0:    	mov    esi,DWORD PTR [rbp-0x18]
  015d3:    	mov    rdx,QWORD PTR [rbp-0x28]
  015d7: c8 	movabs rax,0x55c84f4bca80
  015e1:    	call   rax
  015e3: 00 	mov    rdi,0x4
  015ea:    	jmp    0x3d36f
:00117 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  015ef: 00 	mov    rdi,0x4
  015f6: 01 	sub    DWORD PTR [rip+0x3a0],0x1        # 0x199d
  015fd:    	jne    0x3d3e8
  01603:    	mov    rdi,r12
  01606:    	mov    esi,DWORD PTR [rbp-0x18]
  01609:    	mov    rdx,QWORD PTR [rbp-0x28]
  0160d: c8 	movabs rax,0x55c84f4bca80
  01617:    	call   rax
  01619: 00 	mov    rdi,0x4
  01620:    	jmp    0x3d3e8
:00118 _ = %14.call x=(%15; 1)              [<INVALID>]
:00119 
  01625: 00 	mov    rdi,0x4
  0162c: 01 	sub    DWORD PTR [rip+0x36e],0x1        # 0x19a1
  01633:    	jne    0x3d461
  01639:    	mov    rdi,r12
  0163c:    	mov    esi,DWORD PTR [rbp-0x18]
  0163f:    	mov    rdx,QWORD PTR [rbp-0x28]
  01643: c8 	movabs rax,0x55c84f4bca80
  0164d:    	call   rax
  0164f: 00 	mov    rdi,0x4
  01656:    	jmp    0x3d461
:00121 %14 = dynvar(2, %2)
  0165b:    	mov    rax,QWORD PTR [rbp-0x10]
  0165f:    	mov    rax,QWORD PTR [rax]
  01662:    	mov    rax,QWORD PTR [rax-0x28]
  01666: ff 	mov    QWORD PTR [rbp-0x98],rax
:00122 %16 = dynvar(2, %2)
  0166d:    	mov    rax,QWORD PTR [rbp-0x10]
  01671:    	mov    rax,QWORD PTR [rax]
  01674:    	mov    rax,QWORD PTR [rax-0x28]
  01678: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00123 %15 = %16.call y()                   [<INVALID>]
:00124 
  0167f: 00 	mov    rdi,0x4
  01686: 01 	sub    DWORD PTR [rip+0x318],0x1        # 0x19a5
  0168d:    	jne    0x3d4da
  01693:    	mov    rdi,r12
  01696:    	mov    esi,DWORD PTR [rbp-0x18]
  01699:    	mov    rdx,QWORD PTR [rbp-0x28]
  0169d: c8 	movabs rax,0x55c84f4bca80
  016a7:    	call   rax
  016a9: 00 	mov    rdi,0x4
  016b0:    	jmp    0x3d4da
:00126 %16 = %13.call y()                   [<INVALID>]
:00127 
  016b5: 00 	mov    rdi,0x4
  016bc: 01 	sub    DWORD PTR [rip+0x2e6],0x1        # 0x19a9
  016c3:    	jne    0x3d553
  016c9:    	mov    rdi,r12
  016cc:    	mov    esi,DWORD PTR [rbp-0x18]
  016cf:    	mov    rdx,QWORD PTR [rbp-0x28]
  016d3: c8 	movabs rax,0x55c84f4bca80
  016dd:    	call   rax
  016df: 00 	mov    rdi,0x4
  016e6:    	jmp    0x3d553
:00129 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  016eb: 00 	mov    rdi,0x4
  016f2: 01 	sub    DWORD PTR [rip+0x2b4],0x1        # 0x19ad
  016f9:    	jne    0x3d5cc
  016ff:    	mov    rdi,r12
  01702:    	mov    esi,DWORD PTR [rbp-0x18]
  01705:    	mov    rdx,QWORD PTR [rbp-0x28]
  01709: c8 	movabs rax,0x55c84f4bca80
  01713:    	call   rax
  01715: 00 	mov    rdi,0x4
  0171c:    	jmp    0x3d5cc
:00130 _ = %14.call y=(%15; 1)              [<INVALID>]
:00131 
  01721: 00 	mov    rdi,0x4
  01728: 01 	sub    DWORD PTR [rip+0x282],0x1        # 0x19b1
  0172f:    	jne    0x3d645
  01735:    	mov    rdi,r12
  01738:    	mov    esi,DWORD PTR [rbp-0x18]
  0173b:    	mov    rdx,QWORD PTR [rbp-0x28]
  0173f: c8 	movabs rax,0x55c84f4bca80
  01749:    	call   rax
  0174b: 00 	mov    rdi,0x4
  01752:    	jmp    0x3d645
:00133 %14 = dynvar(2, %2)
  01757:    	mov    rax,QWORD PTR [rbp-0x10]
  0175b:    	mov    rax,QWORD PTR [rax]
  0175e:    	mov    rax,QWORD PTR [rax-0x28]
  01762: ff 	mov    QWORD PTR [rbp-0x98],rax
:00134 %16 = dynvar(2, %2)
  01769:    	mov    rax,QWORD PTR [rbp-0x10]
  0176d:    	mov    rax,QWORD PTR [rax]
  01770:    	mov    rax,QWORD PTR [rax-0x28]
  01774: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00135 %15 = %16.call z()                   [<INVALID>]
:00136 
  0177b: 00 	mov    rdi,0x4
  01782: 01 	sub    DWORD PTR [rip+0x22c],0x1        # 0x19b5
  01789:    	jne    0x3d6be
  0178f:    	mov    rdi,r12
  01792:    	mov    esi,DWORD PTR [rbp-0x18]
  01795:    	mov    rdx,QWORD PTR [rbp-0x28]
  01799: c8 	movabs rax,0x55c84f4bca80
  017a3:    	call   rax
  017a5: 00 	mov    rdi,0x4
  017ac:    	jmp    0x3d6be
:00138 %16 = %13.call z()                   [<INVALID>]
:00139 
  017b1: 00 	mov    rdi,0x4
  017b8: 01 	sub    DWORD PTR [rip+0x1fa],0x1        # 0x19b9
  017bf:    	jne    0x3d737
  017c5:    	mov    rdi,r12
  017c8:    	mov    esi,DWORD PTR [rbp-0x18]
  017cb:    	mov    rdx,QWORD PTR [rbp-0x28]
  017cf: c8 	movabs rax,0x55c84f4bca80
  017d9:    	call   rax
  017db: 00 	mov    rdi,0x4
  017e2:    	jmp    0x3d737
:00141 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  017e7: 00 	mov    rdi,0x4
  017ee: 01 	sub    DWORD PTR [rip+0x1c8],0x1        # 0x19bd
  017f5:    	jne    0x3d7b0
  017fb:    	mov    rdi,r12
  017fe:    	mov    esi,DWORD PTR [rbp-0x18]
  01801:    	mov    rdx,QWORD PTR [rbp-0x28]
  01805: c8 	movabs rax,0x55c84f4bca80
  0180f:    	call   rax
  01811: 00 	mov    rdi,0x4
  01818:    	jmp    0x3d7b0
:00142 _ = %14.call z=(%15; 1)              [<INVALID>]
:00143 
  0181d: 00 	mov    rdi,0x4
  01824: 01 	sub    DWORD PTR [rip+0x196],0x1        # 0x19c1
  0182b:    	jne    0x3d829
  01831:    	mov    rdi,r12
  01834:    	mov    esi,DWORD PTR [rbp-0x18]
  01837:    	mov    rdx,QWORD PTR [rbp-0x28]
  0183b: c8 	movabs rax,0x55c84f4bca80
  01845:    	call   rax
  01847: 00 	mov    rdi,0x4
  0184e:    	jmp    0x3d829
:00145 %14 = %15
  01853: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0185a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00146 ret %14
  01861: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01868:    	leave  
  01869:    	ret    
:00147 %14 = nil
  0186a: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00148 ret %14
  01875: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0187c:    	leave  
  0187d:    	ret    
==> start whole compile: vnormalize FuncId(61) self_class:Vec start:[00000] bytecode:0x55c850b416a0
<== finished compile. elapsed:76.8µs
offset:Pos(27188) code: 1791 bytes  data: 101 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    QWORD PTR [rbp-0x58],rax
  00027: mov    rdi,QWORD PTR [rbp-0x28]
  0002b: test   rdi,0x7
  00032: jne    0x3bedd
  00038: cmp    DWORD PTR [rdi+0x4],0x25
  0003c: jne    0x3bedd
:00000 %3 = %0.call vlength()               [Vec]
:00001 
  00042: mov    rdi,QWORD PTR [rbp-0x28]
  00046: cmp    DWORD PTR [rip+0xffffffffffffbf8a],0x26        # 0xffffbfd7
  0004d: jne    0x3beec
  00053: mov    rax,QWORD PTR [rbx]
  00056: lea    rdi,[rsp-0x18]
  0005b: mov    QWORD PTR [rdi],rax
  0005e: mov    QWORD PTR [rbx],rdi
  00061: mov    QWORD PTR [rsp-0x20],0x0
  0006a: mov    QWORD PTR [rsp-0x38],rcx
  0006f: mov    rax,QWORD PTR [rbp-0x28]
  00073: mov    QWORD PTR [rsp-0x38],rax
  00078: mov    rdi,0x0
  0007f: mov    QWORD PTR [rsp-0x30],0x0
  00088: movabs rax,0x60000003c
  00092: mov    QWORD PTR [rsp-0x28],rax
  00097: movabs r13,0x55c850b2dd30
  000a1: call   0xffffc8ed
  000a6: lea    rdi,[rbp-0x8]
  000aa: mov    QWORD PTR [rbx],rdi
  000ad: movabs r13,0x55c850b416c0
  000b7: test   rax,rax
  000ba: je     0xffff9607
  000c0: mov    QWORD PTR [rbp-0x40],rax
:00003 %1 = %3
  000c4: mov    rax,QWORD PTR [rbp-0x40]
  000c8: mov    QWORD PTR [rbp-0x30],rax
:00004 %3 = const[Vec]                      [Vec]
  000cc: mov    rax,QWORD PTR [rip+0xffffffffffffbf09]        # 0xffffbfdc
  000d3: cmp    rax,QWORD PTR [rip+0x642]        # 0x71c
  000da: jne    0x3befb
  000e0: mov    rax,QWORD PTR [rip+0x625]        # 0x70c
  000e7: mov    QWORD PTR [rbp-0x40],rax
:00005 %4 = @x: Vec[IvarId(0)]
  000eb: mov    rdi,QWORD PTR [rbp-0x28]
  000ef: cmp    WORD PTR [rdi+0x2],0x3
  000f4: jne    0x3bf41
  000fa: mov    rax,QWORD PTR [rdi+0x10]
  000fe: mov    QWORD PTR [rbp-0x48],rax
:00006 %5 = @y: Vec[IvarId(1)]
  00102: mov    rdi,QWORD PTR [rbp-0x28]
  00106: cmp    WORD PTR [rdi+0x2],0x3
  0010b: jne    0x3bf57
  00111: mov    rax,QWORD PTR [rdi+0x18]
  00115: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = @z: Vec[IvarId(2)]
  00119: mov    rdi,QWORD PTR [rbp-0x28]
  0011d: cmp    WORD PTR [rdi+0x2],0x3
  00122: jne    0x3bf6d
  00128: mov    rax,QWORD PTR [rdi+0x20]
  0012c: mov    QWORD PTR [rbp-0x58],rax
:00008 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00009 
  00130: mov    rdi,QWORD PTR [rbp-0x40]
  00134: test   rdi,0x7
  0013b: jne    0x3bf83
  00141: cmp    DWORD PTR [rdi+0x4],0x26
  00145: jne    0x3bf83
  0014b: cmp    DWORD PTR [rip+0xffffffffffffbe85],0x26        # 0xffffbfd7
  00152: jne    0x3bf83
  00158: mov    r9,0x0
  0015f: mov    rdx,rdi
  00162: mov    rax,QWORD PTR [rbx]
  00165: lea    rdi,[rsp-0x18]
  0016a: mov    QWORD PTR [rdi],rax
  0016d: mov    QWORD PTR [rbx],rdi
  00170: mov    QWORD PTR [rsp-0x20],0x0
  00179: mov    QWORD PTR [rsp-0x38],rcx
  0017e: lea    rcx,[rbp-0x48]
  00182: mov    r8,0x3
  00189: call   0x3bf92
  0018e: lea    rdi,[rbp-0x8]
  00192: mov    QWORD PTR [rbx],rdi
  00195: movabs r13,0x55c850b41740
  0019f: test   rax,rax
  001a2: je     0xffff9607
  001a8: mov    QWORD PTR [rbp-0x38],rax
:00011 %3 = literal[1e-17]
  001ac: movq   xmm2,QWORD PTR [rip+0x578]        # 0x72c
  001b4: movabs rax,0xe33877aa3236a4ba
  001be: mov    QWORD PTR [rbp-0x40],rax
:00012 _%3 = %1 > %3                        [Float][Float]
:00013 condnotbr _%3 =>:00036
  001c2: mov    rdi,QWORD PTR [rbp-0x30]
  001c6: test   rdi,0x1
  001cd: jne    0x3bfc4
  001d3: test   rdi,0x2
  001da: je     0x216
  001e0: xorps  xmm3,xmm3
  001e3: movabs rax,0x8000000000000002
  001ed: cmp    rdi,rax
  001f0: je     0x228
  001f6: mov    rax,rdi
  001f9: sar    rax,0x3f
  001fd: add    rax,0x2
  00201: and    rdi,0xfffffffffffffffc
  00205: or     rdi,rax
  00208: rol    rdi,0x3d
  0020c: movq   xmm3,rdi
  00211: jmp    0x228
  00216: call   0xffff9640
  0021b: test   rax,rax
  0021e: je     0x3bfc4
  00224: movq   xmm3,xmm0
  00228: ucomisd xmm3,xmm2
  0022c: jbe    0x3c1f5
:00014 %3 = %2.call x()                     [Vec]
:00015 
  00232: mov    rdi,QWORD PTR [rbp-0x38]
  00236: test   rdi,0x7
  0023d: jne    0x3bfd3
  00243: cmp    DWORD PTR [rdi+0x4],0x25
  00247: jne    0x3bfd3
  0024d: cmp    DWORD PTR [rip+0xffffffffffffbd83],0x26        # 0xffffbfd7
  00254: jne    0x3bfd3
  0025a: mov    esi,DWORD PTR [rip+0x4d8]        # 0x738
  00260: cmp    esi,0xffffffff
  00263: je     0x3bfe2
  00269: cmp    WORD PTR [rdi+0x2],0x3
  0026e: jne    0x287
  00274: cmp    esi,0x6
  00277: jge    0x287
  0027d: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00282: jmp    0x2a5
  00287: sub    rsp,0x10
  0028b: movq   QWORD PTR [rsp],xmm3
  00290: movabs rax,0x55c84f4d3440
  0029a: call   rax
  0029c: movq   xmm3,QWORD PTR [rsp]
  002a1: add    rsp,0x10
  002a5: mov    QWORD PTR [rbp-0x40],rax
:00017 %3 = %3 / %1                         [Float][Float]
  002a9: mov    rdi,QWORD PTR [rbp-0x40]
  002ad: test   rdi,0x1
  002b4: jne    0x3c01d
  002ba: test   rdi,0x2
  002c1: je     0x2fd
  002c7: xorps  xmm2,xmm2
  002ca: movabs rax,0x8000000000000002
  002d4: cmp    rdi,rax
  002d7: je     0x30f
  002dd: mov    rax,rdi
  002e0: sar    rax,0x3f
  002e4: add    rax,0x2
  002e8: and    rdi,0xfffffffffffffffc
  002ec: or     rdi,rax
  002ef: rol    rdi,0x3d
  002f3: movq   xmm2,rdi
  002f8: jmp    0x30f
  002fd: call   0xffff9640
  00302: test   rax,rax
  00305: je     0x3c01d
  0030b: movq   xmm2,xmm0
  0030f: movq   rax,xmm3
  00314: test   rax,rax
  00317: je     0xffff962c
  0031d: divsd  xmm2,xmm3
:00018 _ = %2.call x=(%3; 1)                [Vec]
:00019 
  00321: movq   xmm0,xmm2
  00325: call   0xffff9733
  0032a: mov    QWORD PTR [rbp-0x40],rax
  0032e: mov    rdi,QWORD PTR [rbp-0x38]
  00332: test   rdi,0x7
  00339: jne    0x3c02c
  0033f: cmp    DWORD PTR [rdi+0x4],0x25
  00343: jne    0x3c02c
  00349: cmp    DWORD PTR [rip+0xffffffffffffbc87],0x26        # 0xffffbfd7
  00350: jne    0x3c02c
  00356: mov    esi,DWORD PTR [rip+0x3e4]        # 0x740
  0035c: cmp    esi,0xffffffff
  0035f: je     0x3c03b
  00365: cmp    WORD PTR [rdi+0x2],0x3
  0036a: jne    0x387
  00370: cmp    esi,0x6
  00373: jge    0x387
  00379: mov    rax,QWORD PTR [rbp-0x40]
  0037d: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00382: jmp    0x3c8
  00387: sub    rsp,0x10
  0038b: movq   QWORD PTR [rsp],xmm2
  00390: movq   QWORD PTR [rsp+0x8],xmm3
  00396: mov    rdx,QWORD PTR [rbp-0x40]
  0039a: movabs rax,0x55c84f4d36c0
  003a4: call   rax
  003a6: movq   xmm2,QWORD PTR [rsp]
  003ab: movq   xmm3,QWORD PTR [rsp+0x8]
  003b1: add    rsp,0x10
  003b5: movabs r13,0x55c850b417e0
  003bf: test   rax,rax
  003c2: je     0xffff9607
:00021 %3 = %2.call y()                     [Vec]
:00022 
  003c8: mov    rdi,QWORD PTR [rbp-0x38]
  003cc: test   rdi,0x7
  003d3: jne    0x3c089
  003d9: cmp    DWORD PTR [rdi+0x4],0x25
  003dd: jne    0x3c089
  003e3: cmp    DWORD PTR [rip+0xffffffffffffbbed],0x26        # 0xffffbfd7
  003ea: jne    0x3c089
  003f0: mov    esi,DWORD PTR [rip+0x352]        # 0x748
  003f6: cmp    esi,0xffffffff
  003f9: je     0x3c098
  003ff: cmp    WORD PTR [rdi+0x2],0x3
  00404: jne    0x41d
  0040a: cmp    esi,0x6
  0040d: jge    0x41d
  00413: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00418: jmp    0x43b
  0041d: sub    rsp,0x10
  00421: movq   QWORD PTR [rsp],xmm3
  00426: movabs rax,0x55c84f4d3440
  00430: call   rax
  00432: movq   xmm3,QWORD PTR [rsp]
  00437: add    rsp,0x10
  0043b: mov    QWORD PTR [rbp-0x40],rax
:00024 %3 = %3 / %1                         [Float][Float]
  0043f: mov    rdi,QWORD PTR [rbp-0x40]
  00443: test   rdi,0x1
  0044a: jne    0x3c0d3
  00450: test   rdi,0x2
  00457: je     0x493
  0045d: xorps  xmm2,xmm2
  00460: movabs rax,0x8000000000000002
  0046a: cmp    rdi,rax
  0046d: je     0x4a5
  00473: mov    rax,rdi
  00476: sar    rax,0x3f
  0047a: add    rax,0x2
  0047e: and    rdi,0xfffffffffffffffc
  00482: or     rdi,rax
  00485: rol    rdi,0x3d
  00489: movq   xmm2,rdi
  0048e: jmp    0x4a5
  00493: call   0xffff9640
  00498: test   rax,rax
  0049b: je     0x3c0d3
  004a1: movq   xmm2,xmm0
  004a5: movq   rax,xmm3
  004aa: test   rax,rax
  004ad: je     0xffff962c
  004b3: divsd  xmm2,xmm3
:00025 _ = %2.call y=(%3; 1)                [Vec]
:00026 
  004b7: movq   xmm0,xmm2
  004bb: call   0xffff9733
  004c0: mov    QWORD PTR [rbp-0x40],rax
  004c4: mov    rdi,QWORD PTR [rbp-0x38]
  004c8: test   rdi,0x7
  004cf: jne    0x3c0e2
  004d5: cmp    DWORD PTR [rdi+0x4],0x25
  004d9: jne    0x3c0e2
  004df: cmp    DWORD PTR [rip+0xffffffffffffbaf1],0x26        # 0xffffbfd7
  004e6: jne    0x3c0e2
  004ec: mov    esi,DWORD PTR [rip+0x25e]        # 0x750
  004f2: cmp    esi,0xffffffff
  004f5: je     0x3c0f1
  004fb: cmp    WORD PTR [rdi+0x2],0x3
  00500: jne    0x51d
  00506: cmp    esi,0x6
  00509: jge    0x51d
  0050f: mov    rax,QWORD PTR [rbp-0x40]
  00513: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00518: jmp    0x55e
  0051d: sub    rsp,0x10
  00521: movq   QWORD PTR [rsp],xmm2
  00526: movq   QWORD PTR [rsp+0x8],xmm3
  0052c: mov    rdx,QWORD PTR [rbp-0x40]
  00530: movabs rax,0x55c84f4d36c0
  0053a: call   rax
  0053c: movq   xmm2,QWORD PTR [rsp]
  00541: movq   xmm3,QWORD PTR [rsp+0x8]
  00547: add    rsp,0x10
  0054b: movabs r13,0x55c850b41850
  00555: test   rax,rax
  00558: je     0xffff9607
:00028 %3 = %2.call z()                     [Vec]
:00029 
  0055e: mov    rdi,QWORD PTR [rbp-0x38]
  00562: test   rdi,0x7
  00569: jne    0x3c13f
  0056f: cmp    DWORD PTR [rdi+0x4],0x25
  00573: jne    0x3c13f
  00579: cmp    DWORD PTR [rip+0xffffffffffffba57],0x26        # 0xffffbfd7
  00580: jne    0x3c13f
  00586: mov    esi,DWORD PTR [rip+0x1cc]        # 0x758
  0058c: cmp    esi,0xffffffff
  0058f: je     0x3c14e
  00595: cmp    WORD PTR [rdi+0x2],0x3
  0059a: jne    0x5b3
  005a0: cmp    esi,0x6
  005a3: jge    0x5b3
  005a9: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005ae: jmp    0x5d1
  005b3: sub    rsp,0x10
  005b7: movq   QWORD PTR [rsp],xmm3
  005bc: movabs rax,0x55c84f4d3440
  005c6: call   rax
  005c8: movq   xmm3,QWORD PTR [rsp]
  005cd: add    rsp,0x10
  005d1: mov    QWORD PTR [rbp-0x40],rax
:00031 %3 = %3 / %1                         [Float][Float]
  005d5: mov    rdi,QWORD PTR [rbp-0x40]
  005d9: test   rdi,0x1
  005e0: jne    0x3c189
  005e6: test   rdi,0x2
  005ed: je     0x629
  005f3: xorps  xmm2,xmm2
  005f6: movabs rax,0x8000000000000002
  00600: cmp    rdi,rax
  00603: je     0x63b
  00609: mov    rax,rdi
  0060c: sar    rax,0x3f
  00610: add    rax,0x2
  00614: and    rdi,0xfffffffffffffffc
  00618: or     rdi,rax
  0061b: rol    rdi,0x3d
  0061f: movq   xmm2,rdi
  00624: jmp    0x63b
  00629: call   0xffff9640
  0062e: test   rax,rax
  00631: je     0x3c189
  00637: movq   xmm2,xmm0
  0063b: movq   rax,xmm3
  00640: test   rax,rax
  00643: je     0xffff962c
  00649: divsd  xmm2,xmm3
:00032 _ = %2.call z=(%3; 1)                [Vec]
:00033 
  0064d: movq   xmm0,xmm2
  00651: call   0xffff9733
  00656: mov    QWORD PTR [rbp-0x40],rax
  0065a: mov    rdi,QWORD PTR [rbp-0x38]
  0065e: test   rdi,0x7
  00665: jne    0x3c198
  0066b: cmp    DWORD PTR [rdi+0x4],0x25
  0066f: jne    0x3c198
  00675: cmp    DWORD PTR [rip+0xffffffffffffb95b],0x26        # 0xffffbfd7
  0067c: jne    0x3c198
  00682: mov    esi,DWORD PTR [rip+0xd8]        # 0x760
  00688: cmp    esi,0xffffffff
  0068b: je     0x3c1a7
  00691: cmp    WORD PTR [rdi+0x2],0x3
  00696: jne    0x6b3
  0069c: cmp    esi,0x6
  0069f: jge    0x6b3
  006a5: mov    rax,QWORD PTR [rbp-0x40]
  006a9: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006ae: jmp    0x6f4
  006b3: sub    rsp,0x10
  006b7: movq   QWORD PTR [rsp],xmm2
  006bc: movq   QWORD PTR [rsp+0x8],xmm3
  006c2: mov    rdx,QWORD PTR [rbp-0x40]
  006c6: movabs rax,0x55c84f4d36c0
  006d0: call   rax
  006d2: movq   xmm2,QWORD PTR [rsp]
  006d7: movq   xmm3,QWORD PTR [rsp+0x8]
  006dd: add    rsp,0x10
  006e1: movabs r13,0x55c850b418c0
  006eb: test   rax,rax
  006ee: je     0xffff9607
:00035 br =>:00036
  006f4: jmp    0x3c20e
:00036 ret %2
  006f9: mov    rax,QWORD PTR [rbp-0x38]
  006fd: leave  
  006fe: ret    
==> start whole compile: vlength FuncId(60) self_class:Vec start:[00000] bytecode:0x55c850b2dd30
<== finished compile. elapsed:34.9µs
offset:Pos(29080) code: 926 bytes  data: 34 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    rdi,QWORD PTR [rbp-0x28]
  00027: test   rdi,0x7
  0002e: jne    0x3bac3
  00034: cmp    DWORD PTR [rdi+0x4],0x25
  00038: jne    0x3bac3
:00000 %2 = const[Math]                     [Math]
  0003e: mov    rax,QWORD PTR [rip+0xffffffffffffb833]        # 0xffffb878
  00045: cmp    rax,QWORD PTR [rip+0x36c]        # 0x3b8
  0004c: jne    0x3bad2
  00052: mov    rax,QWORD PTR [rip+0x34f]        # 0x3a8
  00059: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = @x: Vec[IvarId(0)]
  0005d: mov    rdi,QWORD PTR [rbp-0x28]
  00061: cmp    WORD PTR [rdi+0x2],0x3
  00066: jne    0x3bb18
  0006c: mov    rax,QWORD PTR [rdi+0x10]
  00070: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = @x: Vec[IvarId(0)]
  00074: mov    rdi,QWORD PTR [rbp-0x28]
  00078: cmp    WORD PTR [rdi+0x2],0x3
  0007d: jne    0x3bb2e
  00083: mov    rax,QWORD PTR [rdi+0x10]
  00087: mov    QWORD PTR [rbp-0x48],rax
:00003 %3 = %3 * %4                         [Float][Float]
  0008b: mov    rdi,QWORD PTR [rbp-0x40]
  0008f: test   rdi,0x1
  00096: jne    0x3bb44
  0009c: test   rdi,0x2
  000a3: je     0xdf
  000a9: xorps  xmm2,xmm2
  000ac: movabs rax,0x8000000000000002
  000b6: cmp    rdi,rax
  000b9: je     0xf1
  000bf: mov    rax,rdi
  000c2: sar    rax,0x3f
  000c6: add    rax,0x2
  000ca: and    rdi,0xfffffffffffffffc
  000ce: or     rdi,rax
  000d1: rol    rdi,0x3d
  000d5: movq   xmm2,rdi
  000da: jmp    0xf1
  000df: call   0xffff8edc
  000e4: test   rax,rax
  000e7: je     0x3bb44
  000ed: movq   xmm2,xmm0
  000f1: mov    rdi,QWORD PTR [rbp-0x48]
  000f5: test   rdi,0x1
  000fc: jne    0x3bb53
  00102: test   rdi,0x2
  00109: je     0x145
  0010f: xorps  xmm3,xmm3
  00112: movabs rax,0x8000000000000002
  0011c: cmp    rdi,rax
  0011f: je     0x157
  00125: mov    rax,rdi
  00128: sar    rax,0x3f
  0012c: add    rax,0x2
  00130: and    rdi,0xfffffffffffffffc
  00134: or     rdi,rax
  00137: rol    rdi,0x3d
  0013b: movq   xmm3,rdi
  00140: jmp    0x157
  00145: call   0xffff8edc
  0014a: test   rax,rax
  0014d: je     0x3bb53
  00153: movq   xmm3,xmm0
  00157: mulsd  xmm2,xmm3
:00004 %4 = @y: Vec[IvarId(1)]
  0015b: mov    rdi,QWORD PTR [rbp-0x28]
  0015f: cmp    WORD PTR [rdi+0x2],0x3
  00164: jne    0x3bb62
  0016a: mov    rax,QWORD PTR [rdi+0x18]
  0016e: mov    QWORD PTR [rbp-0x48],rax
:00005 %5 = @y: Vec[IvarId(1)]
  00172: mov    rdi,QWORD PTR [rbp-0x28]
  00176: cmp    WORD PTR [rdi+0x2],0x3
  0017b: jne    0x3bb8a
  00181: mov    rax,QWORD PTR [rdi+0x18]
  00185: mov    QWORD PTR [rbp-0x50],rax
:00006 %4 = %4 * %5                         [Float][Float]
  00189: mov    rdi,QWORD PTR [rbp-0x48]
  0018d: test   rdi,0x1
  00194: jne    0x3bbb2
  0019a: test   rdi,0x2
  001a1: je     0x1dd
  001a7: xorps  xmm3,xmm3
  001aa: movabs rax,0x8000000000000002
  001b4: cmp    rdi,rax
  001b7: je     0x1ef
  001bd: mov    rax,rdi
  001c0: sar    rax,0x3f
  001c4: add    rax,0x2
  001c8: and    rdi,0xfffffffffffffffc
  001cc: or     rdi,rax
  001cf: rol    rdi,0x3d
  001d3: movq   xmm3,rdi
  001d8: jmp    0x1ef
  001dd: call   0xffff8edc
  001e2: test   rax,rax
  001e5: je     0x3bbb2
  001eb: movq   xmm3,xmm0
  001ef: mov    rdi,QWORD PTR [rbp-0x50]
  001f3: test   rdi,0x1
  001fa: jne    0x3bbce
  00200: test   rdi,0x2
  00207: je     0x243
  0020d: xorps  xmm4,xmm4
  00210: movabs rax,0x8000000000000002
  0021a: cmp    rdi,rax
  0021d: je     0x255
  00223: mov    rax,rdi
  00226: sar    rax,0x3f
  0022a: add    rax,0x2
  0022e: and    rdi,0xfffffffffffffffc
  00232: or     rdi,rax
  00235: rol    rdi,0x3d
  00239: movq   xmm4,rdi
  0023e: jmp    0x255
  00243: call   0xffff8edc
  00248: test   rax,rax
  0024b: je     0x3bbce
  00251: movq   xmm4,xmm0
  00255: mulsd  xmm3,xmm4
:00007 %3 = %3 + %4                         [Float][Float]
  00259: addsd  xmm2,xmm3
:00008 %4 = @z: Vec[IvarId(2)]
  0025d: mov    rdi,QWORD PTR [rbp-0x28]
  00261: cmp    WORD PTR [rdi+0x2],0x3
  00266: jne    0x3bbea
  0026c: mov    rax,QWORD PTR [rdi+0x20]
  00270: mov    QWORD PTR [rbp-0x48],rax
:00009 %5 = @z: Vec[IvarId(2)]
  00274: mov    rdi,QWORD PTR [rbp-0x28]
  00278: cmp    WORD PTR [rdi+0x2],0x3
  0027d: jne    0x3bc1e
  00283: mov    rax,QWORD PTR [rdi+0x20]
  00287: mov    QWORD PTR [rbp-0x50],rax
:00010 %4 = %4 * %5                         [Float][Float]
  0028b: mov    rdi,QWORD PTR [rbp-0x48]
  0028f: test   rdi,0x1
  00296: jne    0x3bc46
  0029c: test   rdi,0x2
  002a3: je     0x2df
  002a9: xorps  xmm3,xmm3
  002ac: movabs rax,0x8000000000000002
  002b6: cmp    rdi,rax
  002b9: je     0x2f1
  002bf: mov    rax,rdi
  002c2: sar    rax,0x3f
  002c6: add    rax,0x2
  002ca: and    rdi,0xfffffffffffffffc
  002ce: or     rdi,rax
  002d1: rol    rdi,0x3d
  002d5: movq   xmm3,rdi
  002da: jmp    0x2f1
  002df: call   0xffff8edc
  002e4: test   rax,rax
  002e7: je     0x3bc46
  002ed: movq   xmm3,xmm0
  002f1: mov    rdi,QWORD PTR [rbp-0x50]
  002f5: test   rdi,0x1
  002fc: jne    0x3bc62
  00302: test   rdi,0x2
  00309: je     0x345
  0030f: xorps  xmm4,xmm4
  00312: movabs rax,0x8000000000000002
  0031c: cmp    rdi,rax
  0031f: je     0x357
  00325: mov    rax,rdi
  00328: sar    rax,0x3f
  0032c: add    rax,0x2
  00330: and    rdi,0xfffffffffffffffc
  00334: or     rdi,rax
  00337: rol    rdi,0x3d
  0033b: movq   xmm4,rdi
  00340: jmp    0x357
  00345: call   0xffff8edc
  0034a: test   rax,rax
  0034d: je     0x3bc62
  00353: movq   xmm4,xmm0
  00357: mulsd  xmm3,xmm4
:00011 %3 = %3 + %4                         [Float][Float]
  0035b: addsd  xmm2,xmm3
:00012 %1 = %2.call sqrt(%3; 1)             [#<Class:Math>]
:00013 
  0035f: mov    rdi,QWORD PTR [rbp-0x38]
  00363: test   rdi,0x7
  0036a: jne    0x3bc7e
  00370: cmp    DWORD PTR [rdi+0x4],0x20
  00374: jne    0x3bc7e
  0037a: cmp    DWORD PTR [rip+0xffffffffffffb4f2],0x26        # 0xffffb873
  00381: jne    0x3bc7e
  00387: sqrtsd xmm5,xmm2
:00015 ret %1
  0038b: movq   xmm0,xmm5
  0038f: call   0xffff8fcf
  00394: mov    QWORD PTR [rbp-0x30],rax
  00398: mov    rax,QWORD PTR [rbp-0x30]
  0039c: leave  
  0039d: ret    
==> start whole compile: initialize FuncId(66) self_class:Ray start:[00000] bytecode:0x55c850b0e090
<== finished compile. elapsed:15.4µs
offset:Pos(30040) code: 103 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x40],0x4
  00010: mov    rdi,QWORD PTR [rbp-0x28]
  00014: test   rdi,0x7
  0001b: jne    0x3b8e7
  00021: cmp    DWORD PTR [rdi+0x4],0x2b
  00025: jne    0x3b8e7
:00000 @org: Ray[IvarId(0)] = %1
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: cmp    WORD PTR [rdi+0x2],0x3
  00034: jne    0x3b8f6
  0003a: mov    rax,QWORD PTR [rbp-0x30]
  0003e: mov    QWORD PTR [rdi+0x10],rax
:00001 @dir: Ray[IvarId(1)] = %2
  00042: mov    rdi,QWORD PTR [rbp-0x28]
  00046: cmp    WORD PTR [rdi+0x2],0x3
  0004b: jne    0x3b910
  00051: mov    rax,QWORD PTR [rbp-0x38]
  00055: mov    QWORD PTR [rdi+0x18],rax
:00002 %3 = %2
  00059: mov    rax,QWORD PTR [rbp-0x38]
  0005d: mov    QWORD PTR [rbp-0x40],rax
:00003 ret %3
  00061: mov    rax,QWORD PTR [rbp-0x40]
  00065: leave  
  00066: ret    
==> start whole compile: initialize FuncId(67) self_class:Isect start:[00000] bytecode:0x55c850b31e40
<== finished compile. elapsed:34.5µs
offset:Pos(30143) code: 719 bytes  data: 170 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    rdi,QWORD PTR [rbp-0x28]
  00027: test   rdi,0x7
  0002e: jne    0x3b8c3
  00034: cmp    DWORD PTR [rdi+0x4],0x2d
  00038: jne    0x3b8c3
:00000 %1 = literal[10000000.0]
  0003e: movq   xmm2,QWORD PTR [rip+0x28b]        # 0x2d1
  00046: movabs rax,0xb18968000000002
  00050: mov    QWORD PTR [rbp-0x30],rax
:00001 @t: Isect[IvarId(0)] = %1
  00054: mov    rdi,QWORD PTR [rbp-0x28]
  00058: cmp    WORD PTR [rdi+0x2],0x3
  0005d: jne    0x3b8d2
  00063: mov    rax,QWORD PTR [rbp-0x30]
  00067: mov    QWORD PTR [rdi+0x10],rax
:00002 %1 = literal[false]
  0006b: mov    rax,0x14
  00072: mov    QWORD PTR [rbp-0x30],rax
:00003 @hit: Isect[IvarId(1)] = %1
  00076: mov    rdi,QWORD PTR [rbp-0x28]
  0007a: cmp    WORD PTR [rdi+0x2],0x3
  0007f: jne    0x3b8fe
  00085: mov    rax,QWORD PTR [rbp-0x30]
  00089: mov    QWORD PTR [rdi+0x18],rax
:00004 %2 = const[Vec]                      [Vec]
  0008d: mov    rax,QWORD PTR [rip+0xffffffffffffb3bd]        # 0xffffb451
  00094: cmp    rax,QWORD PTR [rip+0x256]        # 0x2f1
  0009b: jne    0x3b918
  000a1: mov    rax,QWORD PTR [rip+0x239]        # 0x2e1
  000a8: mov    QWORD PTR [rbp-0x38],rax
:00005 %3 = literal[0.0]
  000ac: movq   xmm2,QWORD PTR [rip+0x24d]        # 0x301
  000b4: movabs rax,0x8000000000000002
  000be: mov    QWORD PTR [rbp-0x40],rax
:00006 %4 = literal[0.0]
  000c2: movq   xmm3,QWORD PTR [rip+0x247]        # 0x311
  000ca: movabs rax,0x8000000000000002
  000d4: mov    QWORD PTR [rbp-0x48],rax
:00007 %5 = literal[0.0]
  000d8: movq   xmm4,QWORD PTR [rip+0x241]        # 0x321
  000e0: movabs rax,0x8000000000000002
  000ea: mov    QWORD PTR [rbp-0x50],rax
:00008 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
:00009 
  000ee: mov    rdi,QWORD PTR [rbp-0x38]
  000f2: test   rdi,0x7
  000f9: jne    0x3b95e
  000ff: cmp    DWORD PTR [rdi+0x4],0x26
  00103: jne    0x3b95e
  00109: cmp    DWORD PTR [rip+0xffffffffffffb33c],0x26        # 0xffffb44c
  00110: jne    0x3b95e
  00116: mov    r9,0x0
  0011d: sub    rsp,0x20
  00121: movq   QWORD PTR [rsp],xmm2
  00126: movq   QWORD PTR [rsp+0x8],xmm3
  0012c: movq   QWORD PTR [rsp+0x10],xmm4
  00132: mov    rdx,rdi
  00135: mov    rax,QWORD PTR [rbx]
  00138: lea    rdi,[rsp-0x18]
  0013d: mov    QWORD PTR [rdi],rax
  00140: mov    QWORD PTR [rbx],rdi
  00143: mov    QWORD PTR [rsp-0x20],0x0
  0014c: mov    QWORD PTR [rsp-0x38],rcx
  00151: lea    rcx,[rbp-0x40]
  00155: mov    r8,0x3
  0015c: call   0x3b96d
  00161: lea    rdi,[rbp-0x8]
  00165: mov    QWORD PTR [rbx],rdi
  00168: movq   xmm2,QWORD PTR [rsp]
  0016d: movq   xmm3,QWORD PTR [rsp+0x8]
  00173: movq   xmm4,QWORD PTR [rsp+0x10]
  00179: add    rsp,0x20
  0017d: movabs r13,0x55c850b31ee0
  00187: test   rax,rax
  0018a: je     0xffff8a7c
  00190: mov    QWORD PTR [rbp-0x30],rax
:00011 @pl: Isect[IvarId(2)] = %1
  00194: mov    rdi,QWORD PTR [rbp-0x28]
  00198: cmp    WORD PTR [rdi+0x2],0x3
  0019d: jne    0x3b99f
  001a3: mov    rax,QWORD PTR [rbp-0x30]
  001a7: mov    QWORD PTR [rdi+0x20],rax
:00012 %2 = const[Vec]                      [Vec]
  001ab: mov    rax,QWORD PTR [rip+0xffffffffffffb29f]        # 0xffffb451
  001b2: cmp    rax,QWORD PTR [rip+0x188]        # 0x341
  001b9: jne    0x3b9e3
  001bf: mov    rax,QWORD PTR [rip+0x16b]        # 0x331
  001c6: mov    QWORD PTR [rbp-0x38],rax
:00013 %3 = literal[0.0]
  001ca: movq   xmm2,QWORD PTR [rip+0x17f]        # 0x351
  001d2: movabs rax,0x8000000000000002
  001dc: mov    QWORD PTR [rbp-0x40],rax
:00014 %4 = literal[0.0]
  001e0: movq   xmm3,QWORD PTR [rip+0x179]        # 0x361
  001e8: movabs rax,0x8000000000000002
  001f2: mov    QWORD PTR [rbp-0x48],rax
:00015 %5 = literal[0.0]
  001f6: movq   xmm4,QWORD PTR [rip+0x173]        # 0x371
  001fe: movabs rax,0x8000000000000002
  00208: mov    QWORD PTR [rbp-0x50],rax
:00016 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
:00017 
  0020c: mov    rdi,QWORD PTR [rbp-0x38]
  00210: test   rdi,0x7
  00217: jne    0x3ba53
  0021d: cmp    DWORD PTR [rdi+0x4],0x26
  00221: jne    0x3ba53
  00227: cmp    DWORD PTR [rip+0xffffffffffffb21e],0x26        # 0xffffb44c
  0022e: jne    0x3ba53
  00234: mov    r9,0x0
  0023b: sub    rsp,0x20
  0023f: movq   QWORD PTR [rsp],xmm2
  00244: movq   QWORD PTR [rsp+0x8],xmm3
  0024a: movq   QWORD PTR [rsp+0x10],xmm4
  00250: mov    rdx,rdi
  00253: mov    rax,QWORD PTR [rbx]
  00256: lea    rdi,[rsp-0x18]
  0025b: mov    QWORD PTR [rdi],rax
  0025e: mov    QWORD PTR [rbx],rdi
  00261: mov    QWORD PTR [rsp-0x20],0x0
  0026a: mov    QWORD PTR [rsp-0x38],rcx
  0026f: lea    rcx,[rbp-0x40]
  00273: mov    r8,0x3
  0027a: call   0x3ba62
  0027f: lea    rdi,[rbp-0x8]
  00283: mov    QWORD PTR [rbx],rdi
  00286: movq   xmm2,QWORD PTR [rsp]
  0028b: movq   xmm3,QWORD PTR [rsp+0x8]
  00291: movq   xmm4,QWORD PTR [rsp+0x10]
  00297: add    rsp,0x20
  0029b: movabs r13,0x55c850b31f60
  002a5: test   rax,rax
  002a8: je     0xffff8a7c
  002ae: mov    QWORD PTR [rbp-0x30],rax
:00019 @n: Isect[IvarId(3)] = %1
  002b2: mov    rdi,QWORD PTR [rbp-0x28]
  002b6: cmp    WORD PTR [rdi+0x2],0x3
  002bb: jne    0x3ba94
  002c1: mov    rax,QWORD PTR [rbp-0x30]
  002c5: mov    QWORD PTR [rdi+0x28],rax
:00020 ret %1
  002c9: mov    rax,QWORD PTR [rbp-0x30]
  002cd: leave  
  002ce: ret    
==> start whole compile: intersect FuncId(65) self_class:Plane start:[00000] bytecode:0x55c850b33540
<== finished compile. elapsed:89µs
offset:Pos(31032) code: 3129 bytes  data: 215 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0xa0
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x40],rax
  00016: mov    QWORD PTR [rbp-0x48],rax
  0001a: mov    QWORD PTR [rbp-0x50],rax
  0001e: mov    QWORD PTR [rbp-0x58],rax
  00022: mov    QWORD PTR [rbp-0x60],rax
  00026: mov    QWORD PTR [rbp-0x68],rax
  0002a: mov    QWORD PTR [rbp-0x70],rax
  0002e: mov    QWORD PTR [rbp-0x78],rax
  00032: mov    QWORD PTR [rbp-0x80],rax
  00036: mov    QWORD PTR [rbp-0x88],rax
  0003d: mov    QWORD PTR [rbp-0x90],rax
  00044: mov    rdi,QWORD PTR [rbp-0x28]
  00048: test   rdi,0x7
  0004f: jne    0x3b75f
  00055: cmp    DWORD PTR [rdi+0x4],0x29
  00059: jne    0x3b75f
:00000 %7 = @p: Plane[IvarId(0)]
  0005f: mov    rdi,QWORD PTR [rbp-0x28]
  00063: cmp    WORD PTR [rdi+0x2],0x3
  00068: jne    0x3b76e
  0006e: mov    rax,QWORD PTR [rdi+0x10]
  00072: mov    QWORD PTR [rbp-0x60],rax
:00001 %8 = @n: Plane[IvarId(1)]
  00076: mov    rdi,QWORD PTR [rbp-0x28]
  0007a: cmp    WORD PTR [rdi+0x2],0x3
  0007f: jne    0x3b784
  00085: mov    rax,QWORD PTR [rdi+0x18]
  00089: mov    QWORD PTR [rbp-0x68],rax
:00002 %3 = %7.call vdot(%8; 1)             [Vec]
:00003 
  0008d: mov    rdi,QWORD PTR [rbp-0x60]
  00091: test   rdi,0x7
  00098: jne    0x3b79a
  0009e: cmp    DWORD PTR [rdi+0x4],0x25
  000a2: jne    0x3b79a
  000a8: cmp    DWORD PTR [rip+0xffffffffffffb024],0x26        # 0xffffb0d3
  000af: jne    0x3b79a
  000b5: mov    rax,QWORD PTR [rbx]
  000b8: lea    rdi,[rsp-0x18]
  000bd: mov    QWORD PTR [rdi],rax
  000c0: mov    QWORD PTR [rbx],rdi
  000c3: mov    QWORD PTR [rsp-0x20],0x0
  000cc: mov    QWORD PTR [rsp-0x38],rcx
  000d1: mov    rax,QWORD PTR [rbp-0x60]
  000d5: mov    QWORD PTR [rsp-0x38],rax
  000da: mov    rdi,0x1
  000e1: mov    rax,QWORD PTR [rbp-0x68]
  000e5: mov    QWORD PTR [rsp-0x40],rax
  000ea: mov    QWORD PTR [rsp-0x30],0x0
  000f3: movabs rax,0x100050000003b
  000fd: mov    QWORD PTR [rsp-0x28],rax
  00102: movabs r13,0x55c850b7b010
  0010c: call   0xffffbdbd
  00111: lea    rdi,[rbp-0x8]
  00115: mov    QWORD PTR [rbx],rdi
  00118: movabs r13,0x55c850b33580
  00122: test   rax,rax
  00125: je     0xffff8703
  0012b: mov    QWORD PTR [rbp-0x40],rax
:00005 %3 = neg %3                          [Float]
  0012f: mov    rdi,QWORD PTR [rbp-0x40]
  00133: test   rdi,0x1
  0013a: jne    0x3b7a9
  00140: test   rdi,0x2
  00147: je     0x183
  0014d: xorps  xmm2,xmm2
  00150: movabs rax,0x8000000000000002
  0015a: cmp    rdi,rax
  0015d: je     0x195
  00163: mov    rax,rdi
  00166: sar    rax,0x3f
  0016a: add    rax,0x2
  0016e: and    rdi,0xfffffffffffffffc
  00172: or     rdi,rax
  00175: rol    rdi,0x3d
  00179: movq   xmm2,rdi
  0017e: jmp    0x195
  00183: call   0xffff873c
  00188: test   rax,rax
  0018b: je     0x3b7a9
  00191: movq   xmm2,xmm0
  00195: xorps  xmm2,XMMWORD PTR [rip+0xaac]        # 0xc48
:00006 %7 = %1.call dir()                   [Ray]
:00007 
  0019c: mov    rdi,QWORD PTR [rbp-0x30]
  001a0: test   rdi,0x7
  001a7: jne    0x3b7b8
  001ad: cmp    DWORD PTR [rdi+0x4],0x2b
  001b1: jne    0x3b7b8
  001b7: cmp    DWORD PTR [rip+0xffffffffffffaf15],0x26        # 0xffffb0d3
  001be: jne    0x3b7b8
  001c4: mov    esi,DWORD PTR [rip+0xa8a]        # 0xc54
  001ca: cmp    esi,0xffffffff
  001cd: je     0x3b7d4
  001d3: cmp    WORD PTR [rdi+0x2],0x3
  001d8: jne    0x1f1
  001de: cmp    esi,0x6
  001e1: jge    0x1f1
  001e7: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ec: jmp    0x20f
  001f1: sub    rsp,0x10
  001f5: movq   QWORD PTR [rsp],xmm2
  001fa: movabs rax,0x55c84f4d3440
  00204: call   rax
  00206: movq   xmm2,QWORD PTR [rsp]
  0020b: add    rsp,0x10
  0020f: mov    QWORD PTR [rbp-0x60],rax
:00009 %8 = @n: Plane[IvarId(1)]
  00213: mov    rdi,QWORD PTR [rbp-0x28]
  00217: cmp    WORD PTR [rdi+0x2],0x3
  0021c: jne    0x3b80f
  00222: mov    rax,QWORD PTR [rdi+0x18]
  00226: mov    QWORD PTR [rbp-0x68],rax
:00010 %4 = %7.call vdot(%8; 1)             [Vec]
:00011 
  0022a: mov    rdi,QWORD PTR [rbp-0x60]
  0022e: test   rdi,0x7
  00235: jne    0x3b837
  0023b: cmp    DWORD PTR [rdi+0x4],0x25
  0023f: jne    0x3b837
  00245: cmp    DWORD PTR [rip+0xffffffffffffae87],0x26        # 0xffffb0d3
  0024c: jne    0x3b837
  00252: sub    rsp,0x10
  00256: movq   QWORD PTR [rsp],xmm2
  0025b: mov    rax,QWORD PTR [rbx]
  0025e: lea    rdi,[rsp-0x18]
  00263: mov    QWORD PTR [rdi],rax
  00266: mov    QWORD PTR [rbx],rdi
  00269: mov    QWORD PTR [rsp-0x20],0x0
  00272: mov    QWORD PTR [rsp-0x38],rcx
  00277: mov    rax,QWORD PTR [rbp-0x60]
  0027b: mov    QWORD PTR [rsp-0x38],rax
  00280: mov    rdi,0x1
  00287: mov    rax,QWORD PTR [rbp-0x68]
  0028b: mov    QWORD PTR [rsp-0x40],rax
  00290: mov    QWORD PTR [rsp-0x30],0x0
  00299: movabs rax,0x100050000003b
  002a3: mov    QWORD PTR [rsp-0x28],rax
  002a8: movabs r13,0x55c850b7b010
  002b2: call   0xffffbdbd
  002b7: lea    rdi,[rbp-0x8]
  002bb: mov    QWORD PTR [rbx],rdi
  002be: movq   xmm2,QWORD PTR [rsp]
  002c3: add    rsp,0x10
  002c7: movabs r13,0x55c850b33600
  002d1: test   rax,rax
  002d4: je     0xffff8703
  002da: mov    QWORD PTR [rbp-0x48],rax
:00013 %5 = %4
  002de: mov    rax,QWORD PTR [rbp-0x48]
  002e2: mov    QWORD PTR [rbp-0x50],rax
:00014 %7 = literal[0.0]
  002e6: movq   xmm3,QWORD PTR [rip+0x96a]        # 0xc58
  002ee: movabs rax,0x8000000000000002
  002f8: mov    QWORD PTR [rbp-0x60],rax
:00015 _%7 = %4 < %7                        [Float][Float]
:00016 condnotbr _%7 =>:00020
  002fc: mov    rdi,QWORD PTR [rbp-0x48]
  00300: test   rdi,0x1
  00307: jne    0x3b853
  0030d: test   rdi,0x2
  00314: je     0x350
  0031a: xorps  xmm4,xmm4
  0031d: movabs rax,0x8000000000000002
  00327: cmp    rdi,rax
  0032a: je     0x362
  00330: mov    rax,rdi
  00333: sar    rax,0x3f
  00337: add    rax,0x2
  0033b: and    rdi,0xfffffffffffffffc
  0033f: or     rdi,rax
  00342: rol    rdi,0x3d
  00346: movq   xmm4,rdi
  0034b: jmp    0x362
  00350: call   0xffff873c
  00355: test   rax,rax
  00358: je     0x3b853
  0035e: movq   xmm4,xmm0
  00362: ucomisd xmm4,xmm3
  00366: jae    0x3b898
:00017 %5 = %4
:00018 %5 = neg %5                          [<INVALID>]
  0036c: mov    rdi,0x4
  00373: sub    DWORD PTR [rip+0x8e6],0x1        # 0xc60
  0037a: jne    0x3b86f
  00380: mov    rdi,r12
  00383: mov    esi,DWORD PTR [rbp-0x18]
  00386: mov    rdx,QWORD PTR [rbp-0x28]
  0038a: movabs rax,0x55c84f4bca80
  00394: call   rax
  00396: mov    rdi,0x4
  0039d: jmp    0x3b86f
:00019 br =>:00020
  003a2: jmp    0x3b8be
:00020 %7 = literal[1e-17]
  003a7: movq   xmm3,QWORD PTR [rip+0x8b9]        # 0xc68
  003af: movabs rax,0xe33877aa3236a4ba
  003b9: mov    QWORD PTR [rbp-0x60],rax
:00021 _%7 = %5 < %7                        [Float][Float]
:00022 condnotbr _%7 =>:00026
  003bd: mov    rdi,QWORD PTR [rbp-0x50]
  003c1: test   rdi,0x1
  003c8: jne    0x3b8f5
  003ce: test   rdi,0x2
  003d5: je     0x411
  003db: xorps  xmm5,xmm5
  003de: movabs rax,0x8000000000000002
  003e8: cmp    rdi,rax
  003eb: je     0x423
  003f1: mov    rax,rdi
  003f4: sar    rax,0x3f
  003f8: add    rax,0x2
  003fc: and    rdi,0xfffffffffffffffc
  00400: or     rdi,rax
  00403: rol    rdi,0x3d
  00407: movq   xmm5,rdi
  0040c: jmp    0x423
  00411: call   0xffff873c
  00416: test   rax,rax
  00419: je     0x3b8f5
  0041f: movq   xmm5,xmm0
  00423: ucomisd xmm5,xmm3
  00427: jae    0x43b
:00023 %7 = nil
  0042d: mov    QWORD PTR [rbp-0x60],0x4
:00024 ret %7
  00435: mov    rax,QWORD PTR [rbp-0x60]
  00439: leave  
  0043a: ret    
:00026 %8 = %1.call org()                   [Ray]
:00027 
  0043b: mov    rdi,QWORD PTR [rbp-0x30]
  0043f: test   rdi,0x7
  00446: jne    0x3b911
  0044c: cmp    DWORD PTR [rdi+0x4],0x2b
  00450: jne    0x3b911
  00456: cmp    DWORD PTR [rip+0xffffffffffffac76],0x26        # 0xffffb0d3
  0045d: jne    0x3b911
  00463: mov    esi,DWORD PTR [rip+0x80b]        # 0xc74
  00469: cmp    esi,0xffffffff
  0046c: je     0x3b92d
  00472: cmp    WORD PTR [rdi+0x2],0x3
  00477: jne    0x490
  0047d: cmp    esi,0x6
  00480: jge    0x490
  00486: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0048b: jmp    0x4d2
  00490: sub    rsp,0x20
  00494: movq   QWORD PTR [rsp],xmm2
  00499: movq   QWORD PTR [rsp+0x8],xmm3
  0049f: movq   QWORD PTR [rsp+0x10],xmm4
  004a5: movq   QWORD PTR [rsp+0x18],xmm5
  004ab: movabs rax,0x55c84f4d3440
  004b5: call   rax
  004b7: movq   xmm2,QWORD PTR [rsp]
  004bc: movq   xmm3,QWORD PTR [rsp+0x8]
  004c2: movq   xmm4,QWORD PTR [rsp+0x10]
  004c8: movq   xmm5,QWORD PTR [rsp+0x18]
  004ce: add    rsp,0x20
  004d2: mov    QWORD PTR [rbp-0x68],rax
:00029 %9 = @n: Plane[IvarId(1)]
  004d6: mov    rdi,QWORD PTR [rbp-0x28]
  004da: cmp    WORD PTR [rdi+0x2],0x3
  004df: jne    0x3b98c
  004e5: mov    rax,QWORD PTR [rdi+0x18]
  004e9: mov    QWORD PTR [rbp-0x70],rax
:00030 %7 = %8.call vdot(%9; 1)             [Vec]
:00031 
  004ed: mov    rdi,QWORD PTR [rbp-0x68]
  004f1: test   rdi,0x7
  004f8: jne    0x3b9d8
  004fe: cmp    DWORD PTR [rdi+0x4],0x25
  00502: jne    0x3b9d8
  00508: cmp    DWORD PTR [rip+0xffffffffffffabc4],0x26        # 0xffffb0d3
  0050f: jne    0x3b9d8
  00515: sub    rsp,0x20
  00519: movq   QWORD PTR [rsp],xmm2
  0051e: movq   QWORD PTR [rsp+0x8],xmm4
  00524: movq   QWORD PTR [rsp+0x10],xmm5
  0052a: mov    rax,QWORD PTR [rbx]
  0052d: lea    rdi,[rsp-0x18]
  00532: mov    QWORD PTR [rdi],rax
  00535: mov    QWORD PTR [rbx],rdi
  00538: mov    QWORD PTR [rsp-0x20],0x0
  00541: mov    QWORD PTR [rsp-0x38],rcx
  00546: mov    rax,QWORD PTR [rbp-0x68]
  0054a: mov    QWORD PTR [rsp-0x38],rax
  0054f: mov    rdi,0x1
  00556: mov    rax,QWORD PTR [rbp-0x70]
  0055a: mov    QWORD PTR [rsp-0x40],rax
  0055f: mov    QWORD PTR [rsp-0x30],0x0
  00568: movabs rax,0x100050000003b
  00572: mov    QWORD PTR [rsp-0x28],rax
  00577: movabs r13,0x55c850b7b010
  00581: call   0xffffbdbd
  00586: lea    rdi,[rbp-0x8]
  0058a: mov    QWORD PTR [rbx],rdi
  0058d: movq   xmm2,QWORD PTR [rsp]
  00592: movq   xmm4,QWORD PTR [rsp+0x8]
  00598: movq   xmm5,QWORD PTR [rsp+0x10]
  0059e: add    rsp,0x20
  005a2: movabs r13,0x55c850b33740
  005ac: test   rax,rax
  005af: je     0xffff8703
  005b5: mov    QWORD PTR [rbp-0x60],rax
:00033 %7 = %7 + %3                         [Float][Float]
  005b9: mov    rdi,QWORD PTR [rbp-0x60]
  005bd: test   rdi,0x1
  005c4: jne    0x3b9f4
  005ca: test   rdi,0x2
  005d1: je     0x60d
  005d7: xorps  xmm3,xmm3
  005da: movabs rax,0x8000000000000002
  005e4: cmp    rdi,rax
  005e7: je     0x61f
  005ed: mov    rax,rdi
  005f0: sar    rax,0x3f
  005f4: add    rax,0x2
  005f8: and    rdi,0xfffffffffffffffc
  005fc: or     rdi,rax
  005ff: rol    rdi,0x3d
  00603: movq   xmm3,rdi
  00608: jmp    0x61f
  0060d: call   0xffff873c
  00612: test   rax,rax
  00615: je     0x3b9f4
  0061b: movq   xmm3,xmm0
  0061f: addsd  xmm3,xmm2
:00034 %7 = neg %7                          [Float]
  00623: xorps  xmm3,XMMWORD PTR [rip+0x64e]        # 0xc78
:00035 %6 = %7 / %4                         [Float][Float]
  0062a: movq   xmm6,xmm3
  0062e: movq   rax,xmm4
  00633: test   rax,rax
  00636: je     0xffff8728
  0063c: divsd  xmm6,xmm4
:00036 %7 = literal[0.0]
  00640: movq   xmm3,QWORD PTR [rip+0x640]        # 0xc88
  00648: movabs rax,0x8000000000000002
  00652: mov    QWORD PTR [rbp-0x60],rax
:00037 _%7 = %6 > %7                        [Float][Float]
:00038 condnotbr _%7 =>:00105
  00656: ucomisd xmm6,xmm3
  0065a: jbe    0x3bd8e
:00039 %7 = %2.call t()                     [<INVALID>]
:00040 
  00660: mov    rdi,0x4
  00667: sub    DWORD PTR [rip+0x622],0x1        # 0xc90
  0066e: jne    0x3ba10
  00674: mov    rdi,r12
  00677: mov    esi,DWORD PTR [rbp-0x18]
  0067a: mov    rdx,QWORD PTR [rbp-0x28]
  0067e: movabs rax,0x55c84f4bca80
  00688: call   rax
  0068a: mov    rdi,0x4
  00691: jmp    0x3ba10
:00042 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00043 condnotbr _%7 =>:00105
  00696: movq   xmm0,xmm6
  0069a: call   0xffff882f
  0069f: mov    QWORD PTR [rbp-0x58],rax
  006a3: mov    rdi,QWORD PTR [rbp-0x58]
  006a7: mov    rsi,QWORD PTR [rbp-0x60]
  006ab: test   rdi,0x1
  006b2: je     0x3ba39
  006b8: test   rsi,0x1
  006bf: je     0x3ba39
  006c5: cmp    rdi,rsi
  006c8: jge    0x3bdc1
:00044 %7 = literal[true]
  006ce: mov    rax,0x1c
  006d5: mov    QWORD PTR [rbp-0x60],rax
:00045 _ = %2.call hit=(%7; 1)              [<INVALID>]
:00046 
  006d9: mov    rdi,0x4
  006e0: sub    DWORD PTR [rip+0x5ad],0x1        # 0xc94
  006e7: jne    0x3ba8e
  006ed: mov    rdi,r12
  006f0: mov    esi,DWORD PTR [rbp-0x18]
  006f3: mov    rdx,QWORD PTR [rbp-0x28]
  006f7: movabs rax,0x55c84f4bca80
  00701: call   rax
  00703: mov    rdi,0x4
  0070a: jmp    0x3ba8e
:00048 _ = %2.call t=(%6; 1)                [<INVALID>]
:00049 
  0070f: mov    rdi,0x4
  00716: sub    DWORD PTR [rip+0x57b],0x1        # 0xc98
  0071d: jne    0x3baaa
  00723: mov    rdi,r12
  00726: mov    esi,DWORD PTR [rbp-0x18]
  00729: mov    rdx,QWORD PTR [rbp-0x28]
  0072d: movabs rax,0x55c84f4bca80
  00737: call   rax
  00739: mov    rdi,0x4
  00740: jmp    0x3baaa
:00051 %7 = @n: <INVALID>[IvarId(0)]
  00745: mov    rdi,QWORD PTR [rbp-0x28]
  00749: sub    rsp,0x20
  0074d: movq   QWORD PTR [rsp],xmm2
  00752: movq   QWORD PTR [rsp+0x8],xmm4
  00758: movq   QWORD PTR [rsp+0x10],xmm5
  0075e: movq   QWORD PTR [rsp+0x18],xmm6
  00764: mov    rsi,0x82
  0076b: mov    rdx,r12
  0076e: movabs rax,0x55c84f4b7120
  00778: call   rax
  0077a: movq   xmm2,QWORD PTR [rsp]
  0077f: movq   xmm4,QWORD PTR [rsp+0x8]
  00785: movq   xmm5,QWORD PTR [rsp+0x10]
  0078b: movq   xmm6,QWORD PTR [rsp+0x18]
  00791: add    rsp,0x20
  00795: mov    QWORD PTR [rbp-0x60],rax
:00052 _ = %2.call n=(%7; 1)                [<INVALID>]
:00053 
  00799: mov    rdi,0x4
  007a0: sub    DWORD PTR [rip+0x4f5],0x1        # 0xc9c
  007a7: jne    0x3bac6
  007ad: mov    rdi,r12
  007b0: mov    esi,DWORD PTR [rbp-0x18]
  007b3: mov    rdx,QWORD PTR [rbp-0x28]
  007b7: movabs rax,0x55c84f4bca80
  007c1: call   rax
  007c3: mov    rdi,0x4
  007ca: jmp    0x3bac6
:00055 %8 = const[Vec]                      [<INVALID>]
  007cf: mov    rax,QWORD PTR [rip+0xffffffffffffa902]        # 0xffffb0d8
  007d6: cmp    rax,QWORD PTR [rip+0x4db]        # 0xcb8
  007dd: jne    0x3bae2
  007e3: mov    rax,QWORD PTR [rip+0x4be]        # 0xca8
  007ea: mov    QWORD PTR [rbp-0x68],rax
:00056 %10 = %1.call org()                  [<INVALID>]
:00057 
  007ee: mov    rdi,0x4
  007f5: sub    DWORD PTR [rip+0x4c4],0x1        # 0xcc0
  007fc: jne    0x3bb5e
  00802: mov    rdi,r12
  00805: mov    esi,DWORD PTR [rbp-0x18]
  00808: mov    rdx,QWORD PTR [rbp-0x28]
  0080c: movabs rax,0x55c84f4bca80
  00816: call   rax
  00818: mov    rdi,0x4
  0081f: jmp    0x3bb5e
:00059 %9 = %10.call x()                    [<INVALID>]
:00060 
  00824: mov    rdi,0x4
  0082b: sub    DWORD PTR [rip+0x492],0x1        # 0xcc4
  00832: jne    0x3bb7a
  00838: mov    rdi,r12
  0083b: mov    esi,DWORD PTR [rbp-0x18]
  0083e: mov    rdx,QWORD PTR [rbp-0x28]
  00842: movabs rax,0x55c84f4bca80
  0084c: call   rax
  0084e: mov    rdi,0x4
  00855: jmp    0x3bb7a
:00062 %11 = %1.call dir()                  [<INVALID>]
:00063 
  0085a: mov    rdi,0x4
  00861: sub    DWORD PTR [rip+0x460],0x1        # 0xcc8
  00868: jne    0x3bb96
  0086e: mov    rdi,r12
  00871: mov    esi,DWORD PTR [rbp-0x18]
  00874: mov    rdx,QWORD PTR [rbp-0x28]
  00878: movabs rax,0x55c84f4bca80
  00882: call   rax
  00884: mov    rdi,0x4
  0088b: jmp    0x3bb96
:00065 %10 = %11.call x()                   [<INVALID>]
:00066 
  00890: mov    rdi,0x4
  00897: sub    DWORD PTR [rip+0x42e],0x1        # 0xccc
  0089e: jne    0x3bbb2
  008a4: mov    rdi,r12
  008a7: mov    esi,DWORD PTR [rbp-0x18]
  008aa: mov    rdx,QWORD PTR [rbp-0x28]
  008ae: movabs rax,0x55c84f4bca80
  008b8: call   rax
  008ba: mov    rdi,0x4
  008c1: jmp    0x3bbb2
:00068 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  008c6: mov    rdi,0x4
  008cd: sub    DWORD PTR [rip+0x3fc],0x1        # 0xcd0
  008d4: jne    0x3bbce
  008da: mov    rdi,r12
  008dd: mov    esi,DWORD PTR [rbp-0x18]
  008e0: mov    rdx,QWORD PTR [rbp-0x28]
  008e4: movabs rax,0x55c84f4bca80
  008ee: call   rax
  008f0: mov    rdi,0x4
  008f7: jmp    0x3bbce
:00069 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  008fc: mov    rdi,0x4
  00903: sub    DWORD PTR [rip+0x3ca],0x1        # 0xcd4
  0090a: jne    0x3bbea
  00910: mov    rdi,r12
  00913: mov    esi,DWORD PTR [rbp-0x18]
  00916: mov    rdx,QWORD PTR [rbp-0x28]
  0091a: movabs rax,0x55c84f4bca80
  00924: call   rax
  00926: mov    rdi,0x4
  0092d: jmp    0x3bbea
:00070 %11 = %1.call org()                  [<INVALID>]
:00071 
  00932: mov    rdi,0x4
  00939: sub    DWORD PTR [rip+0x398],0x1        # 0xcd8
  00940: jne    0x3bc06
  00946: mov    rdi,r12
  00949: mov    esi,DWORD PTR [rbp-0x18]
  0094c: mov    rdx,QWORD PTR [rbp-0x28]
  00950: movabs rax,0x55c84f4bca80
  0095a: call   rax
  0095c: mov    rdi,0x4
  00963: jmp    0x3bc06
:00073 %10 = %11.call y()                   [<INVALID>]
:00074 
  00968: mov    rdi,0x4
  0096f: sub    DWORD PTR [rip+0x366],0x1        # 0xcdc
  00976: jne    0x3bc22
  0097c: mov    rdi,r12
  0097f: mov    esi,DWORD PTR [rbp-0x18]
  00982: mov    rdx,QWORD PTR [rbp-0x28]
  00986: movabs rax,0x55c84f4bca80
  00990: call   rax
  00992: mov    rdi,0x4
  00999: jmp    0x3bc22
:00076 %12 = %1.call dir()                  [<INVALID>]
:00077 
  0099e: mov    rdi,0x4
  009a5: sub    DWORD PTR [rip+0x334],0x1        # 0xce0
  009ac: jne    0x3bc3e
  009b2: mov    rdi,r12
  009b5: mov    esi,DWORD PTR [rbp-0x18]
  009b8: mov    rdx,QWORD PTR [rbp-0x28]
  009bc: movabs rax,0x55c84f4bca80
  009c6: call   rax
  009c8: mov    rdi,0x4
  009cf: jmp    0x3bc3e
:00079 %11 = %12.call y()                   [<INVALID>]
:00080 
  009d4: mov    rdi,0x4
  009db: sub    DWORD PTR [rip+0x302],0x1        # 0xce4
  009e2: jne    0x3bc5a
  009e8: mov    rdi,r12
  009eb: mov    esi,DWORD PTR [rbp-0x18]
  009ee: mov    rdx,QWORD PTR [rbp-0x28]
  009f2: movabs rax,0x55c84f4bca80
  009fc: call   rax
  009fe: mov    rdi,0x4
  00a05: jmp    0x3bc5a
:00082 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  00a0a: mov    rdi,0x4
  00a11: sub    DWORD PTR [rip+0x2d0],0x1        # 0xce8
  00a18: jne    0x3bc76
  00a1e: mov    rdi,r12
  00a21: mov    esi,DWORD PTR [rbp-0x18]
  00a24: mov    rdx,QWORD PTR [rbp-0x28]
  00a28: movabs rax,0x55c84f4bca80
  00a32: call   rax
  00a34: mov    rdi,0x4
  00a3b: jmp    0x3bc76
:00083 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  00a40: mov    rdi,0x4
  00a47: sub    DWORD PTR [rip+0x29e],0x1        # 0xcec
  00a4e: jne    0x3bc92
  00a54: mov    rdi,r12
  00a57: mov    esi,DWORD PTR [rbp-0x18]
  00a5a: mov    rdx,QWORD PTR [rbp-0x28]
  00a5e: movabs rax,0x55c84f4bca80
  00a68: call   rax
  00a6a: mov    rdi,0x4
  00a71: jmp    0x3bc92
:00084 %12 = %1.call org()                  [<INVALID>]
:00085 
  00a76: mov    rdi,0x4
  00a7d: sub    DWORD PTR [rip+0x26c],0x1        # 0xcf0
  00a84: jne    0x3bcae
  00a8a: mov    rdi,r12
  00a8d: mov    esi,DWORD PTR [rbp-0x18]
  00a90: mov    rdx,QWORD PTR [rbp-0x28]
  00a94: movabs rax,0x55c84f4bca80
  00a9e: call   rax
  00aa0: mov    rdi,0x4
  00aa7: jmp    0x3bcae
:00087 %11 = %12.call z()                   [<INVALID>]
:00088 
  00aac: mov    rdi,0x4
  00ab3: sub    DWORD PTR [rip+0x23a],0x1        # 0xcf4
  00aba: jne    0x3bcca
  00ac0: mov    rdi,r12
  00ac3: mov    esi,DWORD PTR [rbp-0x18]
  00ac6: mov    rdx,QWORD PTR [rbp-0x28]
  00aca: movabs rax,0x55c84f4bca80
  00ad4: call   rax
  00ad6: mov    rdi,0x4
  00add: jmp    0x3bcca
:00090 %13 = %1.call dir()                  [<INVALID>]
:00091 
  00ae2: mov    rdi,0x4
  00ae9: sub    DWORD PTR [rip+0x208],0x1        # 0xcf8
  00af0: jne    0x3bce6
  00af6: mov    rdi,r12
  00af9: mov    esi,DWORD PTR [rbp-0x18]
  00afc: mov    rdx,QWORD PTR [rbp-0x28]
  00b00: movabs rax,0x55c84f4bca80
  00b0a: call   rax
  00b0c: mov    rdi,0x4
  00b13: jmp    0x3bce6
:00093 %12 = %13.call z()                   [<INVALID>]
:00094 
  00b18: mov    rdi,0x4
  00b1f: sub    DWORD PTR [rip+0x1d6],0x1        # 0xcfc
  00b26: jne    0x3bd02
  00b2c: mov    rdi,r12
  00b2f: mov    esi,DWORD PTR [rbp-0x18]
  00b32: mov    rdx,QWORD PTR [rbp-0x28]
  00b36: movabs rax,0x55c84f4bca80
  00b40: call   rax
  00b42: mov    rdi,0x4
  00b49: jmp    0x3bd02
:00096 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  00b4e: mov    rdi,0x4
  00b55: sub    DWORD PTR [rip+0x1a4],0x1        # 0xd00
  00b5c: jne    0x3bd1e
  00b62: mov    rdi,r12
  00b65: mov    esi,DWORD PTR [rbp-0x18]
  00b68: mov    rdx,QWORD PTR [rbp-0x28]
  00b6c: movabs rax,0x55c84f4bca80
  00b76: call   rax
  00b78: mov    rdi,0x4
  00b7f: jmp    0x3bd1e
:00097 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00b84: mov    rdi,0x4
  00b8b: sub    DWORD PTR [rip+0x172],0x1        # 0xd04
  00b92: jne    0x3bd3a
  00b98: mov    rdi,r12
  00b9b: mov    esi,DWORD PTR [rbp-0x18]
  00b9e: mov    rdx,QWORD PTR [rbp-0x28]
  00ba2: movabs rax,0x55c84f4bca80
  00bac: call   rax
  00bae: mov    rdi,0x4
  00bb5: jmp    0x3bd3a
:00098 %7 = %8.call new(%9; 3)              [<INVALID>]
:00099 
  00bba: mov    rdi,0x4
  00bc1: sub    DWORD PTR [rip+0x140],0x1        # 0xd08
  00bc8: jne    0x3bd56
  00bce: mov    rdi,r12
  00bd1: mov    esi,DWORD PTR [rbp-0x18]
  00bd4: mov    rdx,QWORD PTR [rbp-0x28]
  00bd8: movabs rax,0x55c84f4bca80
  00be2: call   rax
  00be4: mov    rdi,0x4
  00beb: jmp    0x3bd56
:00101 _ = %2.call pl=(%7; 1)               [<INVALID>]
:00102 
  00bf0: mov    rdi,0x4
  00bf7: sub    DWORD PTR [rip+0x10e],0x1        # 0xd0c
  00bfe: jne    0x3bd72
  00c04: mov    rdi,r12
  00c07: mov    esi,DWORD PTR [rbp-0x18]
  00c0a: mov    rdx,QWORD PTR [rbp-0x28]
  00c0e: movabs rax,0x55c84f4bca80
  00c18: call   rax
  00c1a: mov    rdi,0x4
  00c21: jmp    0x3bd72
:00104 br =>:00105
  00c26: jmp    0x3bde7
:00105 %7 = nil
  00c2b: mov    QWORD PTR [rbp-0x60],0x4
:00106 ret %7
  00c33: mov    rax,QWORD PTR [rbp-0x60]
  00c37: leave  
  00c38: ret    
==> start whole compile: clamp FuncId(52) self_class:Scene start:[00000] bytecode:0x55c850b7c3d0
<== finished compile. elapsed:36.2µs
offset:Pos(34376) code: 487 bytes  data: 73 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x38],0x4
  00010: mov    QWORD PTR [rbp-0x40],0x4
  00018: mov    rdi,QWORD PTR [rbp-0x28]
  0001c: test   rdi,0x7
  00023: jne    0x3b0fd
  00029: cmp    DWORD PTR [rdi+0x4],0x2f
  0002d: jne    0x3b0fd
:00000 %3 = literal[255.5]
  00033: movq   xmm2,QWORD PTR [rip+0x1ad]        # 0x1e8
  0003b: movabs rax,0x37f800000000002
  00045: mov    QWORD PTR [rbp-0x40],rax
:00001 %2 = %1 * %3                         [Float][Float]
  00049: mov    rdi,QWORD PTR [rbp-0x30]
  0004d: test   rdi,0x1
  00054: jne    0x3b10c
  0005a: test   rdi,0x2
  00061: je     0x9d
  00067: xorps  xmm3,xmm3
  0006a: movabs rax,0x8000000000000002
  00074: cmp    rdi,rax
  00077: je     0xaf
  0007d: mov    rax,rdi
  00080: sar    rax,0x3f
  00084: add    rax,0x2
  00088: and    rdi,0xfffffffffffffffc
  0008c: or     rdi,rax
  0008f: rol    rdi,0x3d
  00093: movq   xmm3,rdi
  00098: jmp    0xaf
  0009d: call   0xffff7a2c
  000a2: test   rax,rax
  000a5: je     0x3b10c
  000ab: movq   xmm3,xmm0
  000af: movq   xmm4,xmm3
  000b3: mulsd  xmm4,xmm2
:00002 %3 = literal[255.0]
  000b7: movq   xmm2,QWORD PTR [rip+0x139]        # 0x1f8
  000bf: movabs rax,0x37f000000000002
  000c9: mov    QWORD PTR [rbp-0x40],rax
:00003 _%3 = %2 > %3                        [Float][Float]
:00004 condnotbr _%3 =>:00007
  000cd: ucomisd xmm4,xmm2
  000d1: jbe    0x3b11b
:00005 %2 = literal[255.0]
  000d7: movq   xmm4,QWORD PTR [rip+0x129]        # 0x208
  000df: movabs rax,0x37f000000000002
  000e9: mov    QWORD PTR [rbp-0x38],rax
:00006 br =>:00007
  000ed: jmp    0x3b141
:00007 %3 = literal[0.0]
  000f2: movq   xmm2,QWORD PTR [rip+0x11e]        # 0x218
  000fa: movabs rax,0x8000000000000002
  00104: mov    QWORD PTR [rbp-0x40],rax
:00008 _%3 = %2 < %3                        [Float][Float]
:00009 condnotbr _%3 =>:00012
  00108: ucomisd xmm4,xmm2
  0010c: jae    0x3b15a
:00010 %2 = literal[0.0]
  00112: movq   xmm4,QWORD PTR [rip+0x10e]        # 0x228
  0011a: movabs rax,0x8000000000000002
  00124: mov    QWORD PTR [rbp-0x38],rax
:00011 br =>:00012
  00128: jmp    0x3b173
:00012 %3 = %2.call to_i()                  [Float]
:00013 
  0012d: mov    rdi,QWORD PTR [rbp-0x38]
  00131: test   rdi,0x1
  00138: jne    0x3b18c
  0013e: test   rdi,0x2
  00145: jne    0x162
  0014b: test   rdi,0x7
  00152: jne    0x3b18c
  00158: cmp    DWORD PTR [rdi+0x4],0x7
  0015c: jne    0x3b18c
  00162: cmp    DWORD PTR [rip+0xffffffffffffa25a],0x26        # 0xffffa3c3
  00169: jne    0x3b18c
  0016f: mov    r9,0x0
  00176: sub    rsp,0x10
  0017a: movq   QWORD PTR [rsp],xmm3
  0017f: movq   QWORD PTR [rsp+0x8],xmm4
  00185: mov    rdx,rdi
  00188: mov    rax,QWORD PTR [rbx]
  0018b: lea    rdi,[rsp-0x18]
  00190: mov    QWORD PTR [rdi],rax
  00193: mov    QWORD PTR [rbx],rdi
  00196: mov    QWORD PTR [rsp-0x20],0x0
  0019f: mov    QWORD PTR [rsp-0x38],rcx
  001a4: lea    rcx,[rbp-0x48]
  001a8: mov    r8,0x0
  001af: call   0x3b19b
  001b4: lea    rdi,[rbp-0x8]
  001b8: mov    QWORD PTR [rbx],rdi
  001bb: movq   xmm3,QWORD PTR [rsp]
  001c0: movq   xmm4,QWORD PTR [rsp+0x8]
  001c6: add    rsp,0x10
  001ca: movabs r13,0x55c850b7c4b0
  001d4: test   rax,rax
  001d7: je     0xffff79f3
  001dd: mov    QWORD PTR [rbp-0x40],rax
:00015 ret %3
  001e1: mov    rax,QWORD PTR [rbp-0x40]
  001e5: leave  
  001e6: ret    
==> start whole compile: <unnamed> FuncId(75) self_class:Scene start:[00000] bytecode:0x55c850b6b0a0
<== finished compile. elapsed:32.7µs
offset:Pos(34936) code: 223 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x3af9d
  0002c: cmp    DWORD PTR [rdi+0x4],0x2f
  00030: jne    0x3af9d
:00000 %3 = dynvar(3, %3)
  00036: mov    rax,QWORD PTR [rbp-0x10]
  0003a: mov    rax,QWORD PTR [rax]
  0003d: mov    rax,QWORD PTR [rax]
  00040: mov    rax,QWORD PTR [rax-0x30]
  00044: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = literal[76]
  00048: mov    rax,0x99
  0004f: mov    QWORD PTR [rbp-0x48],rax
:00002 %2 = %3.call times(&%4)              [Integer]
:00003 
  00053: mov    rdi,QWORD PTR [rbp-0x40]
  00057: test   rdi,0x1
  0005e: jne    0x7b
  00064: test   rdi,0x7
  0006b: jne    0x3afac
  00071: cmp    DWORD PTR [rdi+0x4],0x6
  00075: jne    0x3afac
  0007b: cmp    DWORD PTR [rip+0xffffffffffffa111],0x26        # 0xffffa193
  00082: jne    0x3afac
  00088: mov    r9,QWORD PTR [rbp-0x48]
  0008c: mov    rdx,rdi
  0008f: mov    rax,QWORD PTR [rbx]
  00092: lea    rdi,[rsp-0x18]
  00097: mov    QWORD PTR [rdi],rax
  0009a: mov    QWORD PTR [rbx],rdi
  0009d: mov    QWORD PTR [rsp-0x20],0x0
  000a6: mov    QWORD PTR [rsp-0x38],rcx
  000ab: lea    rcx,[rbp-0x50]
  000af: mov    r8,0x0
  000b6: call   0x3afbb
  000bb: lea    rdi,[rbp-0x8]
  000bf: mov    QWORD PTR [rbx],rdi
  000c2: movabs r13,0x55c850b6b0e0
  000cc: test   rax,rax
  000cf: je     0xffff77c3
  000d5: mov    QWORD PTR [rbp-0x38],rax
:00005 ret %2
  000d9: mov    rax,QWORD PTR [rbp-0x38]
  000dd: leave  
  000de: ret    
==> start whole compile: <unnamed> FuncId(74) self_class:Scene start:[00000] bytecode:0x55c850b2e5e0
<== finished compile. elapsed:144.8µs
offset:Pos(35159) code: 3716 bytes  data: 101 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x80
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x38],rax
  00016: mov    QWORD PTR [rbp-0x40],rax
  0001a: mov    QWORD PTR [rbp-0x48],rax
  0001e: mov    QWORD PTR [rbp-0x50],rax
  00022: mov    QWORD PTR [rbp-0x58],rax
  00026: mov    QWORD PTR [rbp-0x60],rax
  0002a: mov    QWORD PTR [rbp-0x68],rax
  0002e: mov    QWORD PTR [rbp-0x70],rax
  00032: mov    rdi,QWORD PTR [rbp-0x28]
  00036: test   rdi,0x7
  0003d: jne    0x3af0e
  00043: cmp    DWORD PTR [rdi+0x4],0x2f
  00047: jne    0x3af0e
:00000 %6 = const[Vec]                      [Vec]
  0004d: mov    rax,QWORD PTR [rip+0xffffffffffffa065]        # 0xffffa0b9
  00054: cmp    rax,QWORD PTR [rip+0xe3e]        # 0xe99
  0005b: jne    0x3af1d
  00061: mov    rax,QWORD PTR [rip+0xe21]        # 0xe89
  00068: mov    QWORD PTR [rbp-0x58],rax
:00001 %7 = literal[0.0]
  0006c: movq   xmm2,QWORD PTR [rip+0xe35]        # 0xea9
  00074: movabs rax,0x8000000000000002
  0007e: mov    QWORD PTR [rbp-0x60],rax
:00002 %8 = literal[0.0]
  00082: movq   xmm3,QWORD PTR [rip+0xe2f]        # 0xeb9
  0008a: movabs rax,0x8000000000000002
  00094: mov    QWORD PTR [rbp-0x68],rax
:00003 %9 = literal[0.0]
  00098: movq   xmm4,QWORD PTR [rip+0xe29]        # 0xec9
  000a0: movabs rax,0x8000000000000002
  000aa: mov    QWORD PTR [rbp-0x70],rax
:00004 %2 = %6.call new(%7; 3)              [#<Class:Vec>]
:00005 
  000ae: mov    rdi,QWORD PTR [rbp-0x58]
  000b2: test   rdi,0x7
  000b9: jne    0x3af63
  000bf: cmp    DWORD PTR [rdi+0x4],0x26
  000c3: jne    0x3af63
  000c9: cmp    DWORD PTR [rip+0xffffffffffff9fe4],0x26        # 0xffffa0b4
  000d0: jne    0x3af63
  000d6: mov    r9,0x0
  000dd: sub    rsp,0x20
  000e1: movq   QWORD PTR [rsp],xmm2
  000e6: movq   QWORD PTR [rsp+0x8],xmm3
  000ec: movq   QWORD PTR [rsp+0x10],xmm4
  000f2: mov    rdx,rdi
  000f5: mov    rax,QWORD PTR [rbx]
  000f8: lea    rdi,[rsp-0x18]
  000fd: mov    QWORD PTR [rdi],rax
  00100: mov    QWORD PTR [rbx],rdi
  00103: mov    QWORD PTR [rsp-0x20],0x0
  0010c: mov    QWORD PTR [rsp-0x38],rcx
  00111: lea    rcx,[rbp-0x60]
  00115: mov    r8,0x3
  0011c: call   0x3af72
  00121: lea    rdi,[rbp-0x8]
  00125: mov    QWORD PTR [rbx],rdi
  00128: movq   xmm2,QWORD PTR [rsp]
  0012d: movq   xmm3,QWORD PTR [rsp+0x8]
  00133: movq   xmm4,QWORD PTR [rsp+0x10]
  00139: add    rsp,0x20
  0013d: movabs r13,0x55c850b2e640
  00147: test   rax,rax
  0014a: je     0xffff76e4
  00150: mov    QWORD PTR [rbp-0x38],rax
:00007 %6 = dynvar(2, %3)
  00154: mov    rax,QWORD PTR [rbp-0x10]
  00158: mov    rax,QWORD PTR [rax]
  0015b: mov    rax,QWORD PTR [rax-0x30]
  0015f: mov    QWORD PTR [rbp-0x58],rax
:00008 %7 = literal[75]
  00163: mov    rax,0x97
  0016a: mov    QWORD PTR [rbp-0x60],rax
:00009 _ = %6.call times(&%7)               [Integer]
:00010 
  0016e: mov    rdi,QWORD PTR [rbp-0x58]
  00172: test   rdi,0x1
  00179: jne    0x196
  0017f: test   rdi,0x7
  00186: jne    0x3afa4
  0018c: cmp    DWORD PTR [rdi+0x4],0x6
  00190: jne    0x3afa4
  00196: cmp    DWORD PTR [rip+0xffffffffffff9f17],0x26        # 0xffffa0b4
  0019d: jne    0x3afa4
  001a3: mov    r9,QWORD PTR [rbp-0x60]
  001a7: sub    rsp,0x10
  001ab: movq   QWORD PTR [rsp],xmm3
  001b0: movq   QWORD PTR [rsp+0x8],xmm4
  001b6: mov    rdx,rdi
  001b9: mov    rax,QWORD PTR [rbx]
  001bc: lea    rdi,[rsp-0x18]
  001c1: mov    QWORD PTR [rdi],rax
  001c4: mov    QWORD PTR [rbx],rdi
  001c7: mov    QWORD PTR [rsp-0x20],0x0
  001d0: mov    QWORD PTR [rsp-0x38],rcx
  001d5: lea    rcx,[rbp-0x68]
  001d9: mov    r8,0x0
  001e0: call   0x3afb3
  001e5: lea    rdi,[rbp-0x8]
  001e9: mov    QWORD PTR [rbx],rdi
  001ec: movq   xmm3,QWORD PTR [rsp]
  001f1: movq   xmm4,QWORD PTR [rsp+0x8]
  001f7: add    rsp,0x10
  001fb: movabs r13,0x55c850b2e690
  00205: test   rax,rax
  00208: je     0xffff76e4
:00012 %6 = %2.call x()                     [Vec]
:00013 
  0020e: mov    rdi,QWORD PTR [rbp-0x38]
  00212: test   rdi,0x7
  00219: jne    0x3afe5
  0021f: cmp    DWORD PTR [rdi+0x4],0x25
  00223: jne    0x3afe5
  00229: cmp    DWORD PTR [rip+0xffffffffffff9e84],0x26        # 0xffffa0b4
  00230: jne    0x3afe5
  00236: mov    esi,DWORD PTR [rip+0xc99]        # 0xed5
  0023c: cmp    esi,0xffffffff
  0023f: je     0x3aff4
  00245: cmp    WORD PTR [rdi+0x2],0x3
  0024a: jne    0x263
  00250: cmp    esi,0x6
  00253: jge    0x263
  00259: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0025e: jmp    0x28d
  00263: sub    rsp,0x10
  00267: movq   QWORD PTR [rsp],xmm3
  0026c: movq   QWORD PTR [rsp+0x8],xmm4
  00272: movabs rax,0x55c84f4d3440
  0027c: call   rax
  0027e: movq   xmm3,QWORD PTR [rsp]
  00283: movq   xmm4,QWORD PTR [rsp+0x8]
  00289: add    rsp,0x10
  0028d: mov    QWORD PTR [rbp-0x58],rax
:00015 %7 = dynvar(2, %5)
  00291: mov    rax,QWORD PTR [rbp-0x10]
  00295: mov    rax,QWORD PTR [rax]
  00298: mov    rax,QWORD PTR [rax-0x40]
  0029c: mov    QWORD PTR [rbp-0x60],rax
:00016 %8 = dynvar(2, %5)
  002a0: mov    rax,QWORD PTR [rbp-0x10]
  002a4: mov    rax,QWORD PTR [rax]
  002a7: mov    rax,QWORD PTR [rax-0x40]
  002ab: mov    QWORD PTR [rbp-0x68],rax
:00017 %7 = %7 * %8                         [Float][Float]
  002af: mov    rdi,QWORD PTR [rbp-0x60]
  002b3: test   rdi,0x1
  002ba: jne    0x3b03b
  002c0: test   rdi,0x2
  002c7: je     0x303
  002cd: xorps  xmm2,xmm2
  002d0: movabs rax,0x8000000000000002
  002da: cmp    rdi,rax
  002dd: je     0x315
  002e3: mov    rax,rdi
  002e6: sar    rax,0x3f
  002ea: add    rax,0x2
  002ee: and    rdi,0xfffffffffffffffc
  002f2: or     rdi,rax
  002f5: rol    rdi,0x3d
  002f9: movq   xmm2,rdi
  002fe: jmp    0x315
  00303: call   0xffff771d
  00308: test   rax,rax
  0030b: je     0x3b03b
  00311: movq   xmm2,xmm0
  00315: mov    rdi,QWORD PTR [rbp-0x68]
  00319: test   rdi,0x1
  00320: jne    0x3b04a
  00326: test   rdi,0x2
  0032d: je     0x369
  00333: xorps  xmm3,xmm3
  00336: movabs rax,0x8000000000000002
  00340: cmp    rdi,rax
  00343: je     0x37b
  00349: mov    rax,rdi
  0034c: sar    rax,0x3f
  00350: add    rax,0x2
  00354: and    rdi,0xfffffffffffffffc
  00358: or     rdi,rax
  0035b: rol    rdi,0x3d
  0035f: movq   xmm3,rdi
  00364: jmp    0x37b
  00369: call   0xffff771d
  0036e: test   rax,rax
  00371: je     0x3b04a
  00377: movq   xmm3,xmm0
  0037b: mulsd  xmm2,xmm3
:00018 %3 = %6 / %7                         [Float][Float]
  0037f: mov    rdi,QWORD PTR [rbp-0x58]
  00383: test   rdi,0x1
  0038a: jne    0x3b059
  00390: test   rdi,0x2
  00397: je     0x3d3
  0039d: xorps  xmm5,xmm5
  003a0: movabs rax,0x8000000000000002
  003aa: cmp    rdi,rax
  003ad: je     0x3e5
  003b3: mov    rax,rdi
  003b6: sar    rax,0x3f
  003ba: add    rax,0x2
  003be: and    rdi,0xfffffffffffffffc
  003c2: or     rdi,rax
  003c5: rol    rdi,0x3d
  003c9: movq   xmm5,rdi
  003ce: jmp    0x3e5
  003d3: call   0xffff771d
  003d8: test   rax,rax
  003db: je     0x3b059
  003e1: movq   xmm5,xmm0
  003e5: movq   xmm6,xmm5
  003e9: movq   rax,xmm2
  003ee: test   rax,rax
  003f1: je     0xffff7709
  003f7: divsd  xmm6,xmm2
:00019 %6 = %2.call y()                     [Vec]
:00020 
  003fb: mov    rdi,QWORD PTR [rbp-0x38]
  003ff: test   rdi,0x7
  00406: jne    0x3b075
  0040c: cmp    DWORD PTR [rdi+0x4],0x25
  00410: jne    0x3b075
  00416: cmp    DWORD PTR [rip+0xffffffffffff9c97],0x26        # 0xffffa0b4
  0041d: jne    0x3b075
  00423: mov    esi,DWORD PTR [rip+0xab4]        # 0xedd
  00429: cmp    esi,0xffffffff
  0042c: je     0x3b09e
  00432: cmp    WORD PTR [rdi+0x2],0x3
  00437: jne    0x450
  0043d: cmp    esi,0x6
  00440: jge    0x450
  00446: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0044b: jmp    0x492
  00450: sub    rsp,0x20
  00454: movq   QWORD PTR [rsp],xmm2
  00459: movq   QWORD PTR [rsp+0x8],xmm3
  0045f: movq   QWORD PTR [rsp+0x10],xmm4
  00465: movq   QWORD PTR [rsp+0x18],xmm6
  0046b: movabs rax,0x55c84f4d3440
  00475: call   rax
  00477: movq   xmm2,QWORD PTR [rsp]
  0047c: movq   xmm3,QWORD PTR [rsp+0x8]
  00482: movq   xmm4,QWORD PTR [rsp+0x10]
  00488: movq   xmm6,QWORD PTR [rsp+0x18]
  0048e: add    rsp,0x20
  00492: mov    QWORD PTR [rbp-0x58],rax
:00022 %7 = dynvar(2, %5)
  00496: mov    rax,QWORD PTR [rbp-0x10]
  0049a: mov    rax,QWORD PTR [rax]
  0049d: mov    rax,QWORD PTR [rax-0x40]
  004a1: mov    QWORD PTR [rbp-0x60],rax
:00023 %8 = dynvar(2, %5)
  004a5: mov    rax,QWORD PTR [rbp-0x10]
  004a9: mov    rax,QWORD PTR [rax]
  004ac: mov    rax,QWORD PTR [rax-0x40]
  004b0: mov    QWORD PTR [rbp-0x68],rax
:00024 %7 = %7 * %8                         [Float][Float]
  004b4: mov    rdi,QWORD PTR [rbp-0x60]
  004b8: test   rdi,0x1
  004bf: jne    0x3b0fd
  004c5: test   rdi,0x2
  004cc: je     0x508
  004d2: xorps  xmm2,xmm2
  004d5: movabs rax,0x8000000000000002
  004df: cmp    rdi,rax
  004e2: je     0x51a
  004e8: mov    rax,rdi
  004eb: sar    rax,0x3f
  004ef: add    rax,0x2
  004f3: and    rdi,0xfffffffffffffffc
  004f7: or     rdi,rax
  004fa: rol    rdi,0x3d
  004fe: movq   xmm2,rdi
  00503: jmp    0x51a
  00508: call   0xffff771d
  0050d: test   rax,rax
  00510: je     0x3b0fd
  00516: movq   xmm2,xmm0
  0051a: mov    rdi,QWORD PTR [rbp-0x68]
  0051e: test   rdi,0x1
  00525: jne    0x3b119
  0052b: test   rdi,0x2
  00532: je     0x56e
  00538: xorps  xmm3,xmm3
  0053b: movabs rax,0x8000000000000002
  00545: cmp    rdi,rax
  00548: je     0x580
  0054e: mov    rax,rdi
  00551: sar    rax,0x3f
  00555: add    rax,0x2
  00559: and    rdi,0xfffffffffffffffc
  0055d: or     rdi,rax
  00560: rol    rdi,0x3d
  00564: movq   xmm3,rdi
  00569: jmp    0x580
  0056e: call   0xffff771d
  00573: test   rax,rax
  00576: je     0x3b119
  0057c: movq   xmm3,xmm0
  00580: mulsd  xmm2,xmm3
:00025 %4 = %6 / %7                         [Float][Float]
  00584: mov    rdi,QWORD PTR [rbp-0x58]
  00588: test   rdi,0x1
  0058f: jne    0x3b135
  00595: test   rdi,0x2
  0059c: je     0x5d8
  005a2: xorps  xmm5,xmm5
  005a5: movabs rax,0x8000000000000002
  005af: cmp    rdi,rax
  005b2: je     0x5ea
  005b8: mov    rax,rdi
  005bb: sar    rax,0x3f
  005bf: add    rax,0x2
  005c3: and    rdi,0xfffffffffffffffc
  005c7: or     rdi,rax
  005ca: rol    rdi,0x3d
  005ce: movq   xmm5,rdi
  005d3: jmp    0x5ea
  005d8: call   0xffff771d
  005dd: test   rax,rax
  005e0: je     0x3b135
  005e6: movq   xmm5,xmm0
  005ea: movq   xmm7,xmm5
  005ee: movq   rax,xmm2
  005f3: test   rax,rax
  005f6: je     0xffff7709
  005fc: divsd  xmm7,xmm2
:00026 %6 = %2.call z()                     [Vec]
:00027 
  00600: mov    rdi,QWORD PTR [rbp-0x38]
  00604: test   rdi,0x7
  0060b: jne    0x3b15e
  00611: cmp    DWORD PTR [rdi+0x4],0x25
  00615: jne    0x3b15e
  0061b: cmp    DWORD PTR [rip+0xffffffffffff9a92],0x26        # 0xffffa0b4
  00622: jne    0x3b15e
  00628: mov    esi,DWORD PTR [rip+0x8b7]        # 0xee5
  0062e: cmp    esi,0xffffffff
  00631: je     0x3b194
  00637: cmp    WORD PTR [rdi+0x2],0x3
  0063c: jne    0x655
  00642: cmp    esi,0x6
  00645: jge    0x655
  0064b: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00650: jmp    0x6a3
  00655: sub    rsp,0x30
  00659: movq   QWORD PTR [rsp],xmm2
  0065e: movq   QWORD PTR [rsp+0x8],xmm3
  00664: movq   QWORD PTR [rsp+0x10],xmm4
  0066a: movq   QWORD PTR [rsp+0x18],xmm6
  00670: movq   QWORD PTR [rsp+0x20],xmm7
  00676: movabs rax,0x55c84f4d3440
  00680: call   rax
  00682: movq   xmm2,QWORD PTR [rsp]
  00687: movq   xmm3,QWORD PTR [rsp+0x8]
  0068d: movq   xmm4,QWORD PTR [rsp+0x10]
  00693: movq   xmm6,QWORD PTR [rsp+0x18]
  00699: movq   xmm7,QWORD PTR [rsp+0x20]
  0069f: add    rsp,0x30
  006a3: mov    QWORD PTR [rbp-0x58],rax
:00029 %7 = dynvar(2, %5)
  006a7: mov    rax,QWORD PTR [rbp-0x10]
  006ab: mov    rax,QWORD PTR [rax]
  006ae: mov    rax,QWORD PTR [rax-0x40]
  006b2: mov    QWORD PTR [rbp-0x60],rax
:00030 %8 = dynvar(2, %5)
  006b6: mov    rax,QWORD PTR [rbp-0x10]
  006ba: mov    rax,QWORD PTR [rax]
  006bd: mov    rax,QWORD PTR [rax-0x40]
  006c1: mov    QWORD PTR [rbp-0x68],rax
:00031 %7 = %7 * %8                         [Float][Float]
  006c5: mov    rdi,QWORD PTR [rbp-0x60]
  006c9: test   rdi,0x1
  006d0: jne    0x3b1ff
  006d6: test   rdi,0x2
  006dd: je     0x719
  006e3: xorps  xmm2,xmm2
  006e6: movabs rax,0x8000000000000002
  006f0: cmp    rdi,rax
  006f3: je     0x72b
  006f9: mov    rax,rdi
  006fc: sar    rax,0x3f
  00700: add    rax,0x2
  00704: and    rdi,0xfffffffffffffffc
  00708: or     rdi,rax
  0070b: rol    rdi,0x3d
  0070f: movq   xmm2,rdi
  00714: jmp    0x72b
  00719: call   0xffff771d
  0071e: test   rax,rax
  00721: je     0x3b1ff
  00727: movq   xmm2,xmm0
  0072b: mov    rdi,QWORD PTR [rbp-0x68]
  0072f: test   rdi,0x1
  00736: jne    0x3b228
  0073c: test   rdi,0x2
  00743: je     0x77f
  00749: xorps  xmm3,xmm3
  0074c: movabs rax,0x8000000000000002
  00756: cmp    rdi,rax
  00759: je     0x791
  0075f: mov    rax,rdi
  00762: sar    rax,0x3f
  00766: add    rax,0x2
  0076a: and    rdi,0xfffffffffffffffc
  0076e: or     rdi,rax
  00771: rol    rdi,0x3d
  00775: movq   xmm3,rdi
  0077a: jmp    0x791
  0077f: call   0xffff771d
  00784: test   rax,rax
  00787: je     0x3b228
  0078d: movq   xmm3,xmm0
  00791: mulsd  xmm2,xmm3
:00032 %5 = %6 / %7                         [Float][Float]
  00795: mov    rdi,QWORD PTR [rbp-0x58]
  00799: test   rdi,0x1
  007a0: jne    0x3b251
  007a6: test   rdi,0x2
  007ad: je     0x7e9
  007b3: xorps  xmm5,xmm5
  007b6: movabs rax,0x8000000000000002
  007c0: cmp    rdi,rax
  007c3: je     0x7fb
  007c9: mov    rax,rdi
  007cc: sar    rax,0x3f
  007d0: add    rax,0x2
  007d4: and    rdi,0xfffffffffffffffc
  007d8: or     rdi,rax
  007db: rol    rdi,0x3d
  007df: movq   xmm5,rdi
  007e4: jmp    0x7fb
  007e9: call   0xffff771d
  007ee: test   rax,rax
  007f1: je     0x3b251
  007f7: movq   xmm5,xmm0
  007fb: movq   xmm8,xmm5
  00800: movq   rax,xmm2
  00805: test   rax,rax
  00808: je     0xffff7709
  0080e: divsd  xmm8,xmm2
:00033 %8 = %4
:00034 %7 = %0.call clamp(%8; 1)            [Scene]
:00035 
  00813: movq   xmm0,xmm7
  00817: call   0xffff7810
  0081c: mov    QWORD PTR [rbp-0x68],rax
  00820: mov    rdi,QWORD PTR [rbp-0x28]
  00824: cmp    DWORD PTR [rip+0xffffffffffff9889],0x26        # 0xffffa0b4
  0082b: jne    0x3b287
  00831: sub    rsp,0x30
  00835: movq   QWORD PTR [rsp],xmm4
  0083a: movq   QWORD PTR [rsp+0x8],xmm5
  00840: movq   QWORD PTR [rsp+0x10],xmm6
  00846: movq   QWORD PTR [rsp+0x18],xmm7
  0084c: movq   QWORD PTR [rsp+0x20],xmm8
  00853: mov    rax,QWORD PTR [rbx]
  00856: lea    rdi,[rsp-0x18]
  0085b: mov    QWORD PTR [rdi],rax
  0085e: mov    QWORD PTR [rbx],rdi
  00861: mov    QWORD PTR [rsp-0x20],0x0
  0086a: mov    QWORD PTR [rsp-0x38],rcx
  0086f: mov    rax,QWORD PTR [rbp-0x28]
  00873: mov    QWORD PTR [rsp-0x38],rax
  00878: mov    rdi,0x1
  0087f: mov    rax,QWORD PTR [rbp-0x68]
  00883: mov    QWORD PTR [rsp-0x40],rax
  00888: mov    QWORD PTR [rsp-0x30],0x0
  00891: movabs rax,0x400000034
  0089b: mov    QWORD PTR [rsp-0x28],rax
  008a0: movabs r13,0x55c850b7c3d0
  008aa: call   0xffffc609
  008af: lea    rdi,[rbp-0x8]
  008b3: mov    QWORD PTR [rbx],rdi
  008b6: movq   xmm4,QWORD PTR [rsp]
  008bb: movq   xmm5,QWORD PTR [rsp+0x8]
  008c1: movq   xmm6,QWORD PTR [rsp+0x10]
  008c7: movq   xmm7,QWORD PTR [rsp+0x18]
  008cd: movq   xmm8,QWORD PTR [rsp+0x20]
  008d4: add    rsp,0x30
  008d8: movabs r13,0x55c850b2e820
  008e2: test   rax,rax
  008e5: je     0xffff76e4
  008eb: mov    QWORD PTR [rbp-0x60],rax
:00037 %6 = %7.call chr()                   [Integer]
:00038 
  008ef: mov    rdi,QWORD PTR [rbp-0x60]
  008f3: test   rdi,0x1
  008fa: jne    0x917
  00900: test   rdi,0x7
  00907: jne    0x3b2be
  0090d: cmp    DWORD PTR [rdi+0x4],0x6
  00911: jne    0x3b2be
  00917: cmp    DWORD PTR [rip+0xffffffffffff9796],0x26        # 0xffffa0b4
  0091e: jne    0x3b2be
  00924: mov    r9,0x0
  0092b: sub    rsp,0x20
  0092f: movq   QWORD PTR [rsp],xmm4
  00934: movq   QWORD PTR [rsp+0x8],xmm6
  0093a: movq   QWORD PTR [rsp+0x10],xmm7
  00940: movq   QWORD PTR [rsp+0x18],xmm8
  00947: mov    rdx,rdi
  0094a: mov    rax,QWORD PTR [rbx]
  0094d: lea    rdi,[rsp-0x18]
  00952: mov    QWORD PTR [rdi],rax
  00955: mov    QWORD PTR [rbx],rdi
  00958: mov    QWORD PTR [rsp-0x20],0x0
  00961: mov    QWORD PTR [rsp-0x38],rcx
  00966: lea    rcx,[rbp-0x68]
  0096a: mov    r8,0x0
  00971: call   0x3b2f5
  00976: lea    rdi,[rbp-0x8]
  0097a: mov    QWORD PTR [rbx],rdi
  0097d: movq   xmm4,QWORD PTR [rsp]
  00982: movq   xmm6,QWORD PTR [rsp+0x8]
  00988: movq   xmm7,QWORD PTR [rsp+0x10]
  0098e: movq   xmm8,QWORD PTR [rsp+0x18]
  00995: add    rsp,0x20
  00999: movabs r13,0x55c850b2e850
  009a3: test   rax,rax
  009a6: je     0xffff76e4
  009ac: mov    QWORD PTR [rbp-0x58],rax
:00040 _ = %0.call print(%6; 1)             [Scene]
:00041 
  009b0: mov    rdi,QWORD PTR [rbp-0x28]
  009b4: cmp    DWORD PTR [rip+0xffffffffffff96f9],0x26        # 0xffffa0b4
  009bb: jne    0x3b327
  009c1: mov    r9,0x0
  009c8: sub    rsp,0x20
  009cc: movq   QWORD PTR [rsp],xmm4
  009d1: movq   QWORD PTR [rsp+0x8],xmm6
  009d7: movq   QWORD PTR [rsp+0x10],xmm7
  009dd: movq   QWORD PTR [rsp+0x18],xmm8
  009e4: mov    rdx,rdi
  009e7: mov    rax,QWORD PTR [rbx]
  009ea: lea    rdi,[rsp-0x18]
  009ef: mov    QWORD PTR [rdi],rax
  009f2: mov    QWORD PTR [rbx],rdi
  009f5: mov    QWORD PTR [rsp-0x20],0x0
  009fe: mov    QWORD PTR [rsp-0x38],rcx
  00a03: lea    rcx,[rbp-0x58]
  00a07: mov    r8,0x1
  00a0e: call   0x3b35e
  00a13: lea    rdi,[rbp-0x8]
  00a17: mov    QWORD PTR [rbx],rdi
  00a1a: movq   xmm4,QWORD PTR [rsp]
  00a1f: movq   xmm6,QWORD PTR [rsp+0x8]
  00a25: movq   xmm7,QWORD PTR [rsp+0x10]
  00a2b: movq   xmm8,QWORD PTR [rsp+0x18]
  00a32: add    rsp,0x20
  00a36: movabs r13,0x55c850b2e880
  00a40: test   rax,rax
  00a43: je     0xffff76e4
:00043 %8 = %3
:00044 %7 = %0.call clamp(%8; 1)            [Scene]
:00045 
  00a49: movq   xmm0,xmm6
  00a4d: call   0xffff7810
  00a52: mov    QWORD PTR [rbp-0x68],rax
  00a56: mov    rdi,QWORD PTR [rbp-0x28]
  00a5a: cmp    DWORD PTR [rip+0xffffffffffff9653],0x26        # 0xffffa0b4
  00a61: jne    0x3b390
  00a67: sub    rsp,0x20
  00a6b: movq   QWORD PTR [rsp],xmm4
  00a70: movq   QWORD PTR [rsp+0x8],xmm6
  00a76: movq   QWORD PTR [rsp+0x10],xmm7
  00a7c: movq   QWORD PTR [rsp+0x18],xmm8
  00a83: mov    rax,QWORD PTR [rbx]
  00a86: lea    rdi,[rsp-0x18]
  00a8b: mov    QWORD PTR [rdi],rax
  00a8e: mov    QWORD PTR [rbx],rdi
  00a91: mov    QWORD PTR [rsp-0x20],0x0
  00a9a: mov    QWORD PTR [rsp-0x38],rcx
  00a9f: mov    rax,QWORD PTR [rbp-0x28]
  00aa3: mov    QWORD PTR [rsp-0x38],rax
  00aa8: mov    rdi,0x1
  00aaf: mov    rax,QWORD PTR [rbp-0x68]
  00ab3: mov    QWORD PTR [rsp-0x40],rax
  00ab8: mov    QWORD PTR [rsp-0x30],0x0
  00ac1: movabs rax,0x400000034
  00acb: mov    QWORD PTR [rsp-0x28],rax
  00ad0: movabs r13,0x55c850b7c3d0
  00ada: call   0xffffc609
  00adf: lea    rdi,[rbp-0x8]
  00ae3: mov    QWORD PTR [rbx],rdi
  00ae6: movq   xmm4,QWORD PTR [rsp]
  00aeb: movq   xmm6,QWORD PTR [rsp+0x8]
  00af1: movq   xmm7,QWORD PTR [rsp+0x10]
  00af7: movq   xmm8,QWORD PTR [rsp+0x18]
  00afe: add    rsp,0x20
  00b02: movabs r13,0x55c850b2e8c0
  00b0c: test   rax,rax
  00b0f: je     0xffff76e4
  00b15: mov    QWORD PTR [rbp-0x60],rax
:00047 %6 = %7.call chr()                   [Integer]
:00048 
  00b19: mov    rdi,QWORD PTR [rbp-0x60]
  00b1d: test   rdi,0x1
  00b24: jne    0xb41
  00b2a: test   rdi,0x7
  00b31: jne    0x3b3c7
  00b37: cmp    DWORD PTR [rdi+0x4],0x6
  00b3b: jne    0x3b3c7
  00b41: cmp    DWORD PTR [rip+0xffffffffffff956c],0x26        # 0xffffa0b4
  00b48: jne    0x3b3c7
  00b4e: mov    r9,0x0
  00b55: sub    rsp,0x20
  00b59: movq   QWORD PTR [rsp],xmm4
  00b5e: movq   QWORD PTR [rsp+0x8],xmm6
  00b64: movq   QWORD PTR [rsp+0x10],xmm7
  00b6a: movq   QWORD PTR [rsp+0x18],xmm8
  00b71: mov    rdx,rdi
  00b74: mov    rax,QWORD PTR [rbx]
  00b77: lea    rdi,[rsp-0x18]
  00b7c: mov    QWORD PTR [rdi],rax
  00b7f: mov    QWORD PTR [rbx],rdi
  00b82: mov    QWORD PTR [rsp-0x20],0x0
  00b8b: mov    QWORD PTR [rsp-0x38],rcx
  00b90: lea    rcx,[rbp-0x68]
  00b94: mov    r8,0x0
  00b9b: call   0x3b3fe
  00ba0: lea    rdi,[rbp-0x8]
  00ba4: mov    QWORD PTR [rbx],rdi
  00ba7: movq   xmm4,QWORD PTR [rsp]
  00bac: movq   xmm6,QWORD PTR [rsp+0x8]
  00bb2: movq   xmm7,QWORD PTR [rsp+0x10]
  00bb8: movq   xmm8,QWORD PTR [rsp+0x18]
  00bbf: add    rsp,0x20
  00bc3: movabs r13,0x55c850b2e8f0
  00bcd: test   rax,rax
  00bd0: je     0xffff76e4
  00bd6: mov    QWORD PTR [rbp-0x58],rax
:00050 _ = %0.call print(%6; 1)             [Scene]
:00051 
  00bda: mov    rdi,QWORD PTR [rbp-0x28]
  00bde: cmp    DWORD PTR [rip+0xffffffffffff94cf],0x26        # 0xffffa0b4
  00be5: jne    0x3b430
  00beb: mov    r9,0x0
  00bf2: sub    rsp,0x20
  00bf6: movq   QWORD PTR [rsp],xmm4
  00bfb: movq   QWORD PTR [rsp+0x8],xmm6
  00c01: movq   QWORD PTR [rsp+0x10],xmm7
  00c07: movq   QWORD PTR [rsp+0x18],xmm8
  00c0e: mov    rdx,rdi
  00c11: mov    rax,QWORD PTR [rbx]
  00c14: lea    rdi,[rsp-0x18]
  00c19: mov    QWORD PTR [rdi],rax
  00c1c: mov    QWORD PTR [rbx],rdi
  00c1f: mov    QWORD PTR [rsp-0x20],0x0
  00c28: mov    QWORD PTR [rsp-0x38],rcx
  00c2d: lea    rcx,[rbp-0x58]
  00c31: mov    r8,0x1
  00c38: call   0x3b467
  00c3d: lea    rdi,[rbp-0x8]
  00c41: mov    QWORD PTR [rbx],rdi
  00c44: movq   xmm4,QWORD PTR [rsp]
  00c49: movq   xmm6,QWORD PTR [rsp+0x8]
  00c4f: movq   xmm7,QWORD PTR [rsp+0x10]
  00c55: movq   xmm8,QWORD PTR [rsp+0x18]
  00c5c: add    rsp,0x20
  00c60: movabs r13,0x55c850b2e920
  00c6a: test   rax,rax
  00c6d: je     0xffff76e4
:00053 %9 = %5
:00054 %8 = %0.call clamp(%9; 1)            [Scene]
:00055 
  00c73: movq   xmm0,xmm8
  00c78: call   0xffff7810
  00c7d: mov    QWORD PTR [rbp-0x70],rax
  00c81: mov    rdi,QWORD PTR [rbp-0x28]
  00c85: cmp    DWORD PTR [rip+0xffffffffffff9428],0x26        # 0xffffa0b4
  00c8c: jne    0x3b499
  00c92: sub    rsp,0x20
  00c96: movq   QWORD PTR [rsp],xmm6
  00c9b: movq   QWORD PTR [rsp+0x8],xmm7
  00ca1: movq   QWORD PTR [rsp+0x10],xmm8
  00ca8: mov    rax,QWORD PTR [rbx]
  00cab: lea    rdi,[rsp-0x18]
  00cb0: mov    QWORD PTR [rdi],rax
  00cb3: mov    QWORD PTR [rbx],rdi
  00cb6: mov    QWORD PTR [rsp-0x20],0x0
  00cbf: mov    QWORD PTR [rsp-0x38],rcx
  00cc4: mov    rax,QWORD PTR [rbp-0x28]
  00cc8: mov    QWORD PTR [rsp-0x38],rax
  00ccd: mov    rdi,0x1
  00cd4: mov    rax,QWORD PTR [rbp-0x70]
  00cd8: mov    QWORD PTR [rsp-0x40],rax
  00cdd: mov    QWORD PTR [rsp-0x30],0x0
  00ce6: movabs rax,0x400000034
  00cf0: mov    QWORD PTR [rsp-0x28],rax
  00cf5: movabs r13,0x55c850b7c3d0
  00cff: call   0xffffc609
  00d04: lea    rdi,[rbp-0x8]
  00d08: mov    QWORD PTR [rbx],rdi
  00d0b: movq   xmm6,QWORD PTR [rsp]
  00d10: movq   xmm7,QWORD PTR [rsp+0x8]
  00d16: movq   xmm8,QWORD PTR [rsp+0x10]
  00d1d: add    rsp,0x20
  00d21: movabs r13,0x55c850b2e960
  00d2b: test   rax,rax
  00d2e: je     0xffff76e4
  00d34: mov    QWORD PTR [rbp-0x68],rax
:00057 %7 = %8.call chr()                   [Integer]
:00058 
  00d38: mov    rdi,QWORD PTR [rbp-0x68]
  00d3c: test   rdi,0x1
  00d43: jne    0xd60
  00d49: test   rdi,0x7
  00d50: jne    0x3b4d0
  00d56: cmp    DWORD PTR [rdi+0x4],0x6
  00d5a: jne    0x3b4d0
  00d60: cmp    DWORD PTR [rip+0xffffffffffff934d],0x26        # 0xffffa0b4
  00d67: jne    0x3b4d0
  00d6d: mov    r9,0x0
  00d74: sub    rsp,0x20
  00d78: movq   QWORD PTR [rsp],xmm6
  00d7d: movq   QWORD PTR [rsp+0x8],xmm7
  00d83: movq   QWORD PTR [rsp+0x10],xmm8
  00d8a: mov    rdx,rdi
  00d8d: mov    rax,QWORD PTR [rbx]
  00d90: lea    rdi,[rsp-0x18]
  00d95: mov    QWORD PTR [rdi],rax
  00d98: mov    QWORD PTR [rbx],rdi
  00d9b: mov    QWORD PTR [rsp-0x20],0x0
  00da4: mov    QWORD PTR [rsp-0x38],rcx
  00da9: lea    rcx,[rbp-0x70]
  00dad: mov    r8,0x0
  00db4: call   0x3b507
  00db9: lea    rdi,[rbp-0x8]
  00dbd: mov    QWORD PTR [rbx],rdi
  00dc0: movq   xmm6,QWORD PTR [rsp]
  00dc5: movq   xmm7,QWORD PTR [rsp+0x8]
  00dcb: movq   xmm8,QWORD PTR [rsp+0x10]
  00dd2: add    rsp,0x20
  00dd6: movabs r13,0x55c850b2e990
  00de0: test   rax,rax
  00de3: je     0xffff76e4
  00de9: mov    QWORD PTR [rbp-0x60],rax
:00060 %6 = %0.call print(%7; 1)            [Scene]
:00061 
  00ded: mov    rdi,QWORD PTR [rbp-0x28]
  00df1: cmp    DWORD PTR [rip+0xffffffffffff92bc],0x26        # 0xffffa0b4
  00df8: jne    0x3b539
  00dfe: mov    r9,0x0
  00e05: sub    rsp,0x20
  00e09: movq   QWORD PTR [rsp],xmm6
  00e0e: movq   QWORD PTR [rsp+0x8],xmm7
  00e14: movq   QWORD PTR [rsp+0x10],xmm8
  00e1b: mov    rdx,rdi
  00e1e: mov    rax,QWORD PTR [rbx]
  00e21: lea    rdi,[rsp-0x18]
  00e26: mov    QWORD PTR [rdi],rax
  00e29: mov    QWORD PTR [rbx],rdi
  00e2c: mov    QWORD PTR [rsp-0x20],0x0
  00e35: mov    QWORD PTR [rsp-0x38],rcx
  00e3a: lea    rcx,[rbp-0x60]
  00e3e: mov    r8,0x1
  00e45: call   0x3b570
  00e4a: lea    rdi,[rbp-0x8]
  00e4e: mov    QWORD PTR [rbx],rdi
  00e51: movq   xmm6,QWORD PTR [rsp]
  00e56: movq   xmm7,QWORD PTR [rsp+0x8]
  00e5c: movq   xmm8,QWORD PTR [rsp+0x10]
  00e63: add    rsp,0x20
  00e67: movabs r13,0x55c850b2e9c0
  00e71: test   rax,rax
  00e74: je     0xffff76e4
  00e7a: mov    QWORD PTR [rbp-0x58],rax
:00063 ret %6
  00e7e: mov    rax,QWORD PTR [rbp-0x58]
  00e82: leave  
  00e83: ret    
==> start whole compile: <unnamed> FuncId(72) self_class:Scene start:[00000] bytecode:0x55c850b0b480
<== finished compile. elapsed:24.5µs
offset:Pos(38976) code: 218 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x38],0x4
  00010: mov    QWORD PTR [rbp-0x40],0x4
  00018: mov    rdi,QWORD PTR [rbp-0x28]
  0001c: test   rdi,0x7
  00023: jne    0x3a6b9
  00029: cmp    DWORD PTR [rdi+0x4],0x2f
  0002d: jne    0x3a6b9
:00000 %2 = dynvar(1, %1)
  00033: mov    rax,QWORD PTR [rbp-0x10]
  00037: mov    rax,QWORD PTR [rax-0x20]
  0003b: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = literal[74]
  0003f: mov    rax,0x95
  00046: mov    QWORD PTR [rbp-0x40],rax
:00002 _ = %2.call times(&%3)               [Integer]
:00003 
  0004a: mov    rdi,QWORD PTR [rbp-0x38]
  0004e: test   rdi,0x1
  00055: jne    0x72
  0005b: test   rdi,0x7
  00062: jne    0x3a6c8
  00068: cmp    DWORD PTR [rdi+0x4],0x6
  0006c: jne    0x3a6c8
  00072: cmp    DWORD PTR [rip+0xffffffffffff9152],0x26        # 0xffff91cb
  00079: jne    0x3a6c8
  0007f: mov    r9,QWORD PTR [rbp-0x40]
  00083: mov    rdx,rdi
  00086: mov    rax,QWORD PTR [rbx]
  00089: lea    rdi,[rsp-0x18]
  0008e: mov    QWORD PTR [rdi],rax
  00091: mov    QWORD PTR [rbx],rdi
  00094: mov    QWORD PTR [rsp-0x20],0x0
  0009d: mov    QWORD PTR [rsp-0x38],rcx
  000a2: lea    rcx,[rbp-0x48]
  000a6: mov    r8,0x0
  000ad: call   0x3a6d7
  000b2: lea    rdi,[rbp-0x8]
  000b6: mov    QWORD PTR [rbx],rdi
  000b9: movabs r13,0x55c850b0b4c0
  000c3: test   rax,rax
  000c6: je     0xffff67fb
:00005 %2 = nil
  000cc: mov    QWORD PTR [rbp-0x38],0x4
:00006 ret %2
  000d4: mov    rax,QWORD PTR [rbp-0x38]
  000d8: leave  
  000d9: ret    
==> start whole compile: intersect FuncId(63) self_class:Sphere start:[00000] bytecode:0x55c850b316a0
<== finished compile. elapsed:135.3µs
offset:Pos(40243) code: 6456 bytes  data: 261 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xb0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x40],rax
  00016:    	mov    QWORD PTR [rbp-0x48],rax
  0001a:    	mov    QWORD PTR [rbp-0x50],rax
  0001e:    	mov    QWORD PTR [rbp-0x58],rax
  00022:    	mov    QWORD PTR [rbp-0x60],rax
  00026:    	mov    QWORD PTR [rbp-0x68],rax
  0002a:    	mov    QWORD PTR [rbp-0x70],rax
  0002e:    	mov    QWORD PTR [rbp-0x78],rax
  00032:    	mov    QWORD PTR [rbp-0x80],rax
  00036: ff 	mov    QWORD PTR [rbp-0x88],rax
  0003d: ff 	mov    QWORD PTR [rbp-0x90],rax
  00044: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004b: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00052:    	mov    rdi,QWORD PTR [rbp-0x28]
  00056: 00 	test   rdi,0x7
  0005d:    	jne    0x3a216
  00063:    	cmp    DWORD PTR [rdi+0x4],0x27
  00067:    	jne    0x3a216
:00000 %9 = %1.call org()                   [Ray]
:00001 
  0006d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00071: 00 	test   rdi,0x7
  00078:    	jne    0x3a225
  0007e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00082:    	jne    0x3a225
  00088: 26 	cmp    DWORD PTR [rip+0xffffffffffff8c49],0x26        # 0xffff8cd8
  0008f:    	jne    0x3a225
  00095:    	mov    esi,DWORD PTR [rip+0x18a1]        # 0x193c
  0009b:    	cmp    esi,0xffffffff
  0009e:    	je     0x3a234
  000a4:    	cmp    WORD PTR [rdi+0x2],0x3
  000a9:    	jne    0xc2
  000af:    	cmp    esi,0x6
  000b2:    	jge    0xc2
  000b8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000bd:    	jmp    0xce
  000c2: c8 	movabs rax,0x55c84f4d3440
  000cc:    	call   rax
  000ce:    	mov    QWORD PTR [rbp-0x70],rax
:00003 %10 = @center: Sphere[IvarId(0)]
  000d2:    	mov    rdi,QWORD PTR [rbp-0x28]
  000d6:    	cmp    WORD PTR [rdi+0x2],0x3
  000db:    	jne    0x3a25d
  000e1:    	mov    rax,QWORD PTR [rdi+0x10]
  000e5:    	mov    QWORD PTR [rbp-0x78],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
:00005 
  000e9:    	mov    rdi,QWORD PTR [rbp-0x70]
  000ed: 00 	test   rdi,0x7
  000f4:    	jne    0x3a273
  000fa:    	cmp    DWORD PTR [rdi+0x4],0x25
  000fe:    	jne    0x3a273
  00104: 26 	cmp    DWORD PTR [rip+0xffffffffffff8bcd],0x26        # 0xffff8cd8
  0010b:    	jne    0x3a273
  00111:    	mov    rax,QWORD PTR [rbx]
  00114:    	lea    rdi,[rsp-0x18]
  00119:    	mov    QWORD PTR [rdi],rax
  0011c:    	mov    QWORD PTR [rbx],rdi
  0011f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00128:    	mov    QWORD PTR [rsp-0x38],rcx
  0012d:    	mov    rax,QWORD PTR [rbp-0x70]
  00131:    	mov    QWORD PTR [rsp-0x38],rax
  00136: 00 	mov    rdi,0x1
  0013d:    	mov    rax,QWORD PTR [rbp-0x78]
  00141:    	mov    QWORD PTR [rsp-0x40],rax
  00146: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0014f: 08 	movabs rax,0x800000039
  00159:    	mov    QWORD PTR [rsp-0x28],rax
  0015e: c8 	movabs r13,0x55c850b38fb0
  00168:    	call   0xffff9930
  0016d:    	lea    rdi,[rbp-0x8]
  00171:    	mov    QWORD PTR [rbx],rdi
  00174: c8 	movabs r13,0x55c850b31700
  0017e:    	test   rax,rax
  00181:    	je     0xffff6308
  00187:    	mov    QWORD PTR [rbp-0x40],rax
:00007 %9 = %1.call dir()                   [Ray]
:00008 
  0018b:    	mov    rdi,QWORD PTR [rbp-0x30]
  0018f: 00 	test   rdi,0x7
  00196:    	jne    0x3a282
  0019c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  001a0:    	jne    0x3a282
  001a6: 26 	cmp    DWORD PTR [rip+0xffffffffffff8b2b],0x26        # 0xffff8cd8
  001ad:    	jne    0x3a282
  001b3:    	mov    esi,DWORD PTR [rip+0x178b]        # 0x1944
  001b9:    	cmp    esi,0xffffffff
  001bc:    	je     0x3a291
  001c2:    	cmp    WORD PTR [rdi+0x2],0x3
  001c7:    	jne    0x1e0
  001cd:    	cmp    esi,0x6
  001d0:    	jge    0x1e0
  001d6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001db:    	jmp    0x1ec
  001e0: c8 	movabs rax,0x55c84f4d3440
  001ea:    	call   rax
  001ec:    	mov    QWORD PTR [rbp-0x70],rax
:00010 %4 = %3.call vdot(%9; 1)             [Vec]
:00011 
  001f0:    	mov    rdi,QWORD PTR [rbp-0x40]
  001f4: 00 	test   rdi,0x7
  001fb:    	jne    0x3a2ba
  00201:    	cmp    DWORD PTR [rdi+0x4],0x25
  00205:    	jne    0x3a2ba
  0020b: 26 	cmp    DWORD PTR [rip+0xffffffffffff8ac6],0x26        # 0xffff8cd8
  00212:    	jne    0x3a2ba
  00218:    	mov    rax,QWORD PTR [rbx]
  0021b:    	lea    rdi,[rsp-0x18]
  00220:    	mov    QWORD PTR [rdi],rax
  00223:    	mov    QWORD PTR [rbx],rdi
  00226: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0022f:    	mov    QWORD PTR [rsp-0x38],rcx
  00234:    	mov    rax,QWORD PTR [rbp-0x40]
  00238:    	mov    QWORD PTR [rsp-0x38],rax
  0023d: 00 	mov    rdi,0x1
  00244:    	mov    rax,QWORD PTR [rbp-0x70]
  00248:    	mov    QWORD PTR [rsp-0x40],rax
  0024d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00256: 05 	movabs rax,0x50000003b
  00260:    	mov    QWORD PTR [rsp-0x28],rax
  00265: c8 	movabs r13,0x55c850b7b010
  0026f:    	call   0xffff99c2
  00274:    	lea    rdi,[rbp-0x8]
  00278:    	mov    QWORD PTR [rbx],rdi
  0027b: c8 	movabs r13,0x55c850b31760
  00285:    	test   rax,rax
  00288:    	je     0xffff6308
  0028e:    	mov    QWORD PTR [rbp-0x48],rax
:00013 %10 = %3
  00292:    	mov    rax,QWORD PTR [rbp-0x40]
  00296:    	mov    QWORD PTR [rbp-0x78],rax
:00014 %9 = %3.call vdot(%10; 1)            [Vec]
:00015 
  0029a:    	mov    rdi,QWORD PTR [rbp-0x40]
  0029e: 00 	test   rdi,0x7
  002a5:    	jne    0x3a2c9
  002ab:    	cmp    DWORD PTR [rdi+0x4],0x25
  002af:    	jne    0x3a2c9
  002b5: 26 	cmp    DWORD PTR [rip+0xffffffffffff8a1c],0x26        # 0xffff8cd8
  002bc:    	jne    0x3a2c9
  002c2:    	mov    rax,QWORD PTR [rbx]
  002c5:    	lea    rdi,[rsp-0x18]
  002ca:    	mov    QWORD PTR [rdi],rax
  002cd:    	mov    QWORD PTR [rbx],rdi
  002d0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  002d9:    	mov    QWORD PTR [rsp-0x38],rcx
  002de:    	mov    rax,QWORD PTR [rbp-0x40]
  002e2:    	mov    QWORD PTR [rsp-0x38],rax
  002e7: 00 	mov    rdi,0x1
  002ee:    	mov    rax,QWORD PTR [rbp-0x78]
  002f2:    	mov    QWORD PTR [rsp-0x40],rax
  002f7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00300: 05 	movabs rax,0x50000003b
  0030a:    	mov    QWORD PTR [rsp-0x28],rax
  0030f: c8 	movabs r13,0x55c850b7b010
  00319:    	call   0xffff99c2
  0031e:    	lea    rdi,[rbp-0x8]
  00322:    	mov    QWORD PTR [rbx],rdi
  00325: c8 	movabs r13,0x55c850b317a0
  0032f:    	test   rax,rax
  00332:    	je     0xffff6308
  00338:    	mov    QWORD PTR [rbp-0x70],rax
:00017 %10 = @radius: Sphere[IvarId(1)]
  0033c:    	mov    rdi,QWORD PTR [rbp-0x28]
  00340:    	cmp    WORD PTR [rdi+0x2],0x3
  00345:    	jne    0x3a2d8
  0034b:    	mov    rax,QWORD PTR [rdi+0x18]
  0034f:    	mov    QWORD PTR [rbp-0x78],rax
:00018 %11 = @radius: Sphere[IvarId(1)]
  00353:    	mov    rdi,QWORD PTR [rbp-0x28]
  00357:    	cmp    WORD PTR [rdi+0x2],0x3
  0035c:    	jne    0x3a2ee
  00362:    	mov    rax,QWORD PTR [rdi+0x18]
  00366:    	mov    QWORD PTR [rbp-0x80],rax
:00019 %10 = %10 * %11                      [Float][Float]
  0036a:    	mov    rdi,QWORD PTR [rbp-0x78]
  0036e: 00 	test   rdi,0x1
  00375:    	jne    0x3a304
  0037b: 00 	test   rdi,0x2
  00382:    	je     0x3be
  00388:    	xorps  xmm2,xmm2
  0038b: 00 	movabs rax,0x8000000000000002
  00395:    	cmp    rdi,rax
  00398:    	je     0x3d0
  0039e:    	mov    rax,rdi
  003a1:    	sar    rax,0x3f
  003a5:    	add    rax,0x2
  003a9:    	and    rdi,0xfffffffffffffffc
  003ad:    	or     rdi,rax
  003b0:    	rol    rdi,0x3d
  003b4:    	movq   xmm2,rdi
  003b9:    	jmp    0x3d0
  003be:    	call   0xffff6341
  003c3:    	test   rax,rax
  003c6:    	je     0x3a304
  003cc:    	movq   xmm2,xmm0
  003d0:    	mov    rdi,QWORD PTR [rbp-0x80]
  003d4: 00 	test   rdi,0x1
  003db:    	jne    0x3a313
  003e1: 00 	test   rdi,0x2
  003e8:    	je     0x424
  003ee:    	xorps  xmm3,xmm3
  003f1: 00 	movabs rax,0x8000000000000002
  003fb:    	cmp    rdi,rax
  003fe:    	je     0x436
  00404:    	mov    rax,rdi
  00407:    	sar    rax,0x3f
  0040b:    	add    rax,0x2
  0040f:    	and    rdi,0xfffffffffffffffc
  00413:    	or     rdi,rax
  00416:    	rol    rdi,0x3d
  0041a:    	movq   xmm3,rdi
  0041f:    	jmp    0x436
  00424:    	call   0xffff6341
  00429:    	test   rax,rax
  0042c:    	je     0x3a313
  00432:    	movq   xmm3,xmm0
  00436:    	mulsd  xmm2,xmm3
:00020 %5 = %9 - %10                        [Float][Float]
  0043a:    	mov    rdi,QWORD PTR [rbp-0x70]
  0043e: 00 	test   rdi,0x1
  00445:    	jne    0x3a322
  0044b: 00 	test   rdi,0x2
  00452:    	je     0x48e
  00458:    	xorps  xmm4,xmm4
  0045b: 00 	movabs rax,0x8000000000000002
  00465:    	cmp    rdi,rax
  00468:    	je     0x4a0
  0046e:    	mov    rax,rdi
  00471:    	sar    rax,0x3f
  00475:    	add    rax,0x2
  00479:    	and    rdi,0xfffffffffffffffc
  0047d:    	or     rdi,rax
  00480:    	rol    rdi,0x3d
  00484:    	movq   xmm4,rdi
  00489:    	jmp    0x4a0
  0048e:    	call   0xffff6341
  00493:    	test   rax,rax
  00496:    	je     0x3a322
  0049c:    	movq   xmm4,xmm0
  004a0:    	movq   xmm5,xmm4
  004a4:    	subsd  xmm5,xmm2
:00021 %9 = %4 * %4                         [Float][Float]
  004a8:    	mov    rdi,QWORD PTR [rbp-0x48]
  004ac: 00 	test   rdi,0x1
  004b3:    	jne    0x3a33e
  004b9: 00 	test   rdi,0x2
  004c0:    	je     0x4fc
  004c6:    	xorps  xmm6,xmm6
  004c9: 00 	movabs rax,0x8000000000000002
  004d3:    	cmp    rdi,rax
  004d6:    	je     0x50e
  004dc:    	mov    rax,rdi
  004df:    	sar    rax,0x3f
  004e3:    	add    rax,0x2
  004e7:    	and    rdi,0xfffffffffffffffc
  004eb:    	or     rdi,rax
  004ee:    	rol    rdi,0x3d
  004f2:    	movq   xmm6,rdi
  004f7:    	jmp    0x50e
  004fc:    	call   0xffff6341
  00501:    	test   rax,rax
  00504:    	je     0x3a33e
  0050a:    	movq   xmm6,xmm0
  0050e:    	movq   xmm4,xmm6
  00512:    	mulsd  xmm4,xmm6
:00022 %6 = %9 - %5                         [Float][Float]
  00516:    	movq   xmm7,xmm4
  0051a:    	subsd  xmm7,xmm5
:00023 %9 = literal[0.0]
  0051e: 00 	movq   xmm4,QWORD PTR [rip+0x1427]        # 0x194d
  00526: 00 	movabs rax,0x8000000000000002
  00530:    	mov    QWORD PTR [rbp-0x70],rax
:00024 _%9 = %6 > %9                        [Float][Float]
:00025 condnotbr _%9 =>:00113
  00534:    	ucomisd xmm7,xmm4
  00538:    	jbe    0x3b544
:00026 %9 = %4
:00027 %9 = neg %9                          [Float]
  0053e:    	movq   xmm4,xmm6
  00542: 00 	xorps  xmm4,XMMWORD PTR [rip+0x1414]        # 0x195d
:00028 %11 = const[Math]                    [Math]
  00549: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff878d]        # 0xffff8cdd
  00550: 00 	cmp    rax,QWORD PTR [rip+0x1426]        # 0x197d
  00557:    	jne    0x3a367
  0055d: 00 	mov    rax,QWORD PTR [rip+0x1409]        # 0x196d
  00564:    	mov    QWORD PTR [rbp-0x80],rax
:00029 %12 = %6
:00030 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
:00031 
  00568:    	mov    rdi,QWORD PTR [rbp-0x80]
  0056c: 00 	test   rdi,0x7
  00573:    	jne    0x3a3ef
  00579:    	cmp    DWORD PTR [rdi+0x4],0x20
  0057d:    	jne    0x3a3ef
  00583: 26 	cmp    DWORD PTR [rip+0xffffffffffff874e],0x26        # 0xffff8cd8
  0058a:    	jne    0x3a3ef
  00590:    	sqrtsd xmm2,xmm7
:00033 %7 = %9 - %10                        [Float][Float]
  00594:    	movq   xmm3,xmm4
  00598:    	subsd  xmm3,xmm2
:00034 %9 = literal[0.0]
  0059c: 00 	movq   xmm4,QWORD PTR [rip+0x13e9]        # 0x198d
  005a4: 00 	movabs rax,0x8000000000000002
  005ae:    	mov    QWORD PTR [rbp-0x70],rax
:00035 _%9 = %7 > %9                        [Float][Float]
:00036 condnotbr _%9 =>:00112
  005b2:    	ucomisd xmm3,xmm4
  005b6:    	jbe    0x3b438
:00037 %9 = %2.call t()                     [Isect]
:00038 
  005bc:    	mov    rdi,QWORD PTR [rbp-0x38]
  005c0: 00 	test   rdi,0x7
  005c7:    	jne    0x3a42c
  005cd:    	cmp    DWORD PTR [rdi+0x4],0x2d
  005d1:    	jne    0x3a42c
  005d7: 26 	cmp    DWORD PTR [rip+0xffffffffffff86fa],0x26        # 0xffff8cd8
  005de:    	jne    0x3a42c
  005e4:    	mov    esi,DWORD PTR [rip+0x13af]        # 0x1999
  005ea:    	cmp    esi,0xffffffff
  005ed:    	je     0x3a476
  005f3:    	cmp    WORD PTR [rdi+0x2],0x3
  005f8:    	jne    0x611
  005fe:    	cmp    esi,0x6
  00601:    	jge    0x611
  00607:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0060c:    	jmp    0x65f
  00611:    	sub    rsp,0x30
  00615:    	movq   QWORD PTR [rsp],xmm2
  0061a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00620:    	movq   QWORD PTR [rsp+0x10],xmm5
  00626:    	movq   QWORD PTR [rsp+0x18],xmm6
  0062c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00632: c8 	movabs rax,0x55c84f4d3440
  0063c:    	call   rax
  0063e:    	movq   xmm2,QWORD PTR [rsp]
  00643:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00649:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0064f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00655:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0065b:    	add    rsp,0x30
  0065f:    	mov    QWORD PTR [rbp-0x70],rax
:00040 _%9 = %7 < %9                        [Float][Float]
:00041 condnotbr _%9 =>:00112
  00663:    	mov    rdi,QWORD PTR [rbp-0x70]
  00667: 00 	test   rdi,0x1
  0066e:    	jne    0x3a4e1
  00674: 00 	test   rdi,0x2
  0067b:    	je     0x6b7
  00681:    	xorps  xmm4,xmm4
  00684: 00 	movabs rax,0x8000000000000002
  0068e:    	cmp    rdi,rax
  00691:    	je     0x6c9
  00697:    	mov    rax,rdi
  0069a:    	sar    rax,0x3f
  0069e:    	add    rax,0x2
  006a2:    	and    rdi,0xfffffffffffffffc
  006a6:    	or     rdi,rax
  006a9:    	rol    rdi,0x3d
  006ad:    	movq   xmm4,rdi
  006b2:    	jmp    0x6c9
  006b7:    	call   0xffff6341
  006bc:    	test   rax,rax
  006bf:    	je     0x3a4e1
  006c5:    	movq   xmm4,xmm0
  006c9:    	ucomisd xmm3,xmm4
  006cd:    	jae    0x3b495
:00042 _ = %2.call t=(%7; 1)                [Isect]
:00043 
  006d3:    	movq   xmm0,xmm3
  006d7:    	call   0xffff6434
  006dc:    	mov    QWORD PTR [rbp-0x60],rax
  006e0:    	mov    rdi,QWORD PTR [rbp-0x38]
  006e4: 00 	test   rdi,0x7
  006eb:    	jne    0x3a52b
  006f1:    	cmp    DWORD PTR [rdi+0x4],0x2d
  006f5:    	jne    0x3a52b
  006fb: 26 	cmp    DWORD PTR [rip+0xffffffffffff85d6],0x26        # 0xffff8cd8
  00702:    	jne    0x3a52b
  00708:    	mov    esi,DWORD PTR [rip+0x1293]        # 0x19a1
  0070e:    	cmp    esi,0xffffffff
  00711:    	je     0x3a568
  00717:    	cmp    WORD PTR [rdi+0x2],0x3
  0071c:    	jne    0x739
  00722:    	cmp    esi,0x6
  00725:    	jge    0x739
  0072b:    	mov    rax,QWORD PTR [rbp-0x60]
  0072f:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00734:    	jmp    0x7aa
  00739:    	sub    rsp,0x30
  0073d:    	movq   QWORD PTR [rsp],xmm2
  00742:    	movq   QWORD PTR [rsp+0x8],xmm3
  00748:    	movq   QWORD PTR [rsp+0x10],xmm4
  0074e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00754:    	movq   QWORD PTR [rsp+0x20],xmm6
  0075a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00760:    	mov    rdx,QWORD PTR [rbp-0x60]
  00764: c8 	movabs rax,0x55c84f4d36c0
  0076e:    	call   rax
  00770:    	movq   xmm2,QWORD PTR [rsp]
  00775:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0077b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00781:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00787:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0078d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00793:    	add    rsp,0x30
  00797: c8 	movabs r13,0x55c850b31960
  007a1:    	test   rax,rax
  007a4:    	je     0xffff6308
:00045 %9 = literal[true]
  007aa: 00 	mov    rax,0x1c
  007b1:    	mov    QWORD PTR [rbp-0x70],rax
:00046 _ = %2.call hit=(%9; 1)              [Isect]
:00047 
  007b5:    	mov    rdi,QWORD PTR [rbp-0x38]
  007b9: 00 	test   rdi,0x7
  007c0:    	jne    0x3a5e6
  007c6:    	cmp    DWORD PTR [rdi+0x4],0x2d
  007ca:    	jne    0x3a5e6
  007d0: 26 	cmp    DWORD PTR [rip+0xffffffffffff8501],0x26        # 0xffff8cd8
  007d7:    	jne    0x3a5e6
  007dd:    	mov    esi,DWORD PTR [rip+0x11c6]        # 0x19a9
  007e3:    	cmp    esi,0xffffffff
  007e6:    	je     0x3a623
  007ec:    	cmp    WORD PTR [rdi+0x2],0x3
  007f1:    	jne    0x80e
  007f7:    	cmp    esi,0x6
  007fa:    	jge    0x80e
  00800:    	mov    rax,QWORD PTR [rbp-0x70]
  00804:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00809:    	jmp    0x873
  0080e:    	sub    rsp,0x30
  00812:    	movq   QWORD PTR [rsp],xmm2
  00817:    	movq   QWORD PTR [rsp+0x8],xmm3
  0081d:    	movq   QWORD PTR [rsp+0x10],xmm5
  00823:    	movq   QWORD PTR [rsp+0x18],xmm6
  00829:    	movq   QWORD PTR [rsp+0x20],xmm7
  0082f:    	mov    rdx,QWORD PTR [rbp-0x70]
  00833: c8 	movabs rax,0x55c84f4d36c0
  0083d:    	call   rax
  0083f:    	movq   xmm2,QWORD PTR [rsp]
  00844:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0084a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00850:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00856:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0085c:    	add    rsp,0x30
  00860: c8 	movabs r13,0x55c850b319a0
  0086a:    	test   rax,rax
  0086d:    	je     0xffff6308
:00049 %10 = const[Vec]                     [Vec]
  00873: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff8463]        # 0xffff8cdd
  0087a: 00 	cmp    rax,QWORD PTR [rip+0x113c]        # 0x19bd
  00881:    	jne    0x3a695
  00887: 00 	mov    rax,QWORD PTR [rip+0x111f]        # 0x19ad
  0088e:    	mov    QWORD PTR [rbp-0x78],rax
:00050 %12 = %1.call org()                  [Ray]
:00051 
  00892:    	mov    rdi,QWORD PTR [rbp-0x30]
  00896: 00 	test   rdi,0x7
  0089d:    	jne    0x3a711
  008a3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  008a7:    	jne    0x3a711
  008ad: 26 	cmp    DWORD PTR [rip+0xffffffffffff8424],0x26        # 0xffff8cd8
  008b4:    	jne    0x3a711
  008ba:    	mov    esi,DWORD PTR [rip+0x1109]        # 0x19c9
  008c0:    	cmp    esi,0xffffffff
  008c3:    	je     0x3a73a
  008c9:    	cmp    WORD PTR [rdi+0x2],0x3
  008ce:    	jne    0x8e7
  008d4:    	cmp    esi,0x6
  008d7:    	jge    0x8e7
  008dd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008e2:    	jmp    0x929
  008e7:    	sub    rsp,0x20
  008eb:    	movq   QWORD PTR [rsp],xmm3
  008f0:    	movq   QWORD PTR [rsp+0x8],xmm5
  008f6:    	movq   QWORD PTR [rsp+0x10],xmm6
  008fc:    	movq   QWORD PTR [rsp+0x18],xmm7
  00902: c8 	movabs rax,0x55c84f4d3440
  0090c:    	call   rax
  0090e:    	movq   xmm3,QWORD PTR [rsp]
  00913:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00919:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0091f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00925:    	add    rsp,0x20
  00929: ff 	mov    QWORD PTR [rbp-0x88],rax
:00053 %11 = %12.call x()                   [Vec]
:00054 
  00930: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00937: 00 	test   rdi,0x7
  0093e:    	jne    0x3a799
  00944:    	cmp    DWORD PTR [rdi+0x4],0x25
  00948:    	jne    0x3a799
  0094e: 26 	cmp    DWORD PTR [rip+0xffffffffffff8383],0x26        # 0xffff8cd8
  00955:    	jne    0x3a799
  0095b:    	mov    esi,DWORD PTR [rip+0x1070]        # 0x19d1
  00961:    	cmp    esi,0xffffffff
  00964:    	je     0x3a7c2
  0096a:    	cmp    WORD PTR [rdi+0x2],0x3
  0096f:    	jne    0x988
  00975:    	cmp    esi,0x6
  00978:    	jge    0x988
  0097e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00983:    	jmp    0x9ca
  00988:    	sub    rsp,0x20
  0098c:    	movq   QWORD PTR [rsp],xmm3
  00991:    	movq   QWORD PTR [rsp+0x8],xmm5
  00997:    	movq   QWORD PTR [rsp+0x10],xmm6
  0099d:    	movq   QWORD PTR [rsp+0x18],xmm7
  009a3: c8 	movabs rax,0x55c84f4d3440
  009ad:    	call   rax
  009af:    	movq   xmm3,QWORD PTR [rsp]
  009b4:    	movq   xmm5,QWORD PTR [rsp+0x8]
  009ba:    	movq   xmm6,QWORD PTR [rsp+0x10]
  009c0:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009c6:    	add    rsp,0x20
  009ca:    	mov    QWORD PTR [rbp-0x80],rax
:00056 %13 = %1.call dir()                  [Ray]
:00057 
  009ce:    	mov    rdi,QWORD PTR [rbp-0x30]
  009d2: 00 	test   rdi,0x7
  009d9:    	jne    0x3a821
  009df:    	cmp    DWORD PTR [rdi+0x4],0x2b
  009e3:    	jne    0x3a821
  009e9: 26 	cmp    DWORD PTR [rip+0xffffffffffff82e8],0x26        # 0xffff8cd8
  009f0:    	jne    0x3a821
  009f6:    	mov    esi,DWORD PTR [rip+0xfdd]        # 0x19d9
  009fc:    	cmp    esi,0xffffffff
  009ff:    	je     0x3a84a
  00a05:    	cmp    WORD PTR [rdi+0x2],0x3
  00a0a:    	jne    0xa23
  00a10:    	cmp    esi,0x6
  00a13:    	jge    0xa23
  00a19:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a1e:    	jmp    0xa65
  00a23:    	sub    rsp,0x20
  00a27:    	movq   QWORD PTR [rsp],xmm3
  00a2c:    	movq   QWORD PTR [rsp+0x8],xmm5
  00a32:    	movq   QWORD PTR [rsp+0x10],xmm6
  00a38:    	movq   QWORD PTR [rsp+0x18],xmm7
  00a3e: c8 	movabs rax,0x55c84f4d3440
  00a48:    	call   rax
  00a4a:    	movq   xmm3,QWORD PTR [rsp]
  00a4f:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00a55:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00a5b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00a61:    	add    rsp,0x20
  00a65: ff 	mov    QWORD PTR [rbp-0x90],rax
:00059 %12 = %13.call x()                   [Vec]
:00060 
  00a6c: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00a73: 00 	test   rdi,0x7
  00a7a:    	jne    0x3a8a9
  00a80:    	cmp    DWORD PTR [rdi+0x4],0x25
  00a84:    	jne    0x3a8a9
  00a8a: 26 	cmp    DWORD PTR [rip+0xffffffffffff8247],0x26        # 0xffff8cd8
  00a91:    	jne    0x3a8a9
  00a97:    	mov    esi,DWORD PTR [rip+0xf44]        # 0x19e1
  00a9d:    	cmp    esi,0xffffffff
  00aa0:    	je     0x3a8d2
  00aa6:    	cmp    WORD PTR [rdi+0x2],0x3
  00aab:    	jne    0xac4
  00ab1:    	cmp    esi,0x6
  00ab4:    	jge    0xac4
  00aba:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00abf:    	jmp    0xb06
  00ac4:    	sub    rsp,0x20
  00ac8:    	movq   QWORD PTR [rsp],xmm3
  00acd:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ad3:    	movq   QWORD PTR [rsp+0x10],xmm6
  00ad9:    	movq   QWORD PTR [rsp+0x18],xmm7
  00adf: c8 	movabs rax,0x55c84f4d3440
  00ae9:    	call   rax
  00aeb:    	movq   xmm3,QWORD PTR [rsp]
  00af0:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00af6:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00afc:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00b02:    	add    rsp,0x20
  00b06: ff 	mov    QWORD PTR [rbp-0x88],rax
:00062 %12 = %12 * %7                       [Float][Float]
  00b0d: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00b14: 00 	test   rdi,0x1
  00b1b:    	jne    0x3a931
  00b21: 00 	test   rdi,0x2
  00b28:    	je     0xb64
  00b2e:    	xorps  xmm2,xmm2
  00b31: 00 	movabs rax,0x8000000000000002
  00b3b:    	cmp    rdi,rax
  00b3e:    	je     0xb76
  00b44:    	mov    rax,rdi
  00b47:    	sar    rax,0x3f
  00b4b:    	add    rax,0x2
  00b4f:    	and    rdi,0xfffffffffffffffc
  00b53:    	or     rdi,rax
  00b56:    	rol    rdi,0x3d
  00b5a:    	movq   xmm2,rdi
  00b5f:    	jmp    0xb76
  00b64:    	call   0xffff6341
  00b69:    	test   rax,rax
  00b6c:    	je     0x3a931
  00b72:    	movq   xmm2,xmm0
  00b76:    	mulsd  xmm2,xmm3
:00063 %11 = %11 + %12                      [Float][Float]
  00b7a:    	mov    rdi,QWORD PTR [rbp-0x80]
  00b7e: 00 	test   rdi,0x1
  00b85:    	jne    0x3a95a
  00b8b: 00 	test   rdi,0x2
  00b92:    	je     0xbce
  00b98:    	xorps  xmm4,xmm4
  00b9b: 00 	movabs rax,0x8000000000000002
  00ba5:    	cmp    rdi,rax
  00ba8:    	je     0xbe0
  00bae:    	mov    rax,rdi
  00bb1:    	sar    rax,0x3f
  00bb5:    	add    rax,0x2
  00bb9:    	and    rdi,0xfffffffffffffffc
  00bbd:    	or     rdi,rax
  00bc0:    	rol    rdi,0x3d
  00bc4:    	movq   xmm4,rdi
  00bc9:    	jmp    0xbe0
  00bce:    	call   0xffff6341
  00bd3:    	test   rax,rax
  00bd6:    	je     0x3a95a
  00bdc:    	movq   xmm4,xmm0
  00be0:    	addsd  xmm4,xmm2
:00064 %13 = %1.call org()                  [Ray]
:00065 
  00be4:    	mov    rdi,QWORD PTR [rbp-0x30]
  00be8: 00 	test   rdi,0x7
  00bef:    	jne    0x3a993
  00bf5:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00bf9:    	jne    0x3a993
  00bff: 26 	cmp    DWORD PTR [rip+0xffffffffffff80d2],0x26        # 0xffff8cd8
  00c06:    	jne    0x3a993
  00c0c:    	mov    esi,DWORD PTR [rip+0xdd7]        # 0x19e9
  00c12:    	cmp    esi,0xffffffff
  00c15:    	je     0x3a9d9
  00c1b:    	cmp    WORD PTR [rdi+0x2],0x3
  00c20:    	jne    0xc39
  00c26:    	cmp    esi,0x6
  00c29:    	jge    0xc39
  00c2f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c34:    	jmp    0xc93
  00c39:    	sub    rsp,0x30
  00c3d:    	movq   QWORD PTR [rsp],xmm2
  00c42:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c48:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c4e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c54:    	movq   QWORD PTR [rsp+0x20],xmm6
  00c5a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c60: c8 	movabs rax,0x55c84f4d3440
  00c6a:    	call   rax
  00c6c:    	movq   xmm2,QWORD PTR [rsp]
  00c71:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c77:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c7d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c83:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c89:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c8f:    	add    rsp,0x30
  00c93: ff 	mov    QWORD PTR [rbp-0x90],rax
:00067 %12 = %13.call y()                   [Vec]
:00068 
  00c9a: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00ca1: 00 	test   rdi,0x7
  00ca8:    	jne    0x3aa50
  00cae:    	cmp    DWORD PTR [rdi+0x4],0x25
  00cb2:    	jne    0x3aa50
  00cb8: 26 	cmp    DWORD PTR [rip+0xffffffffffff8019],0x26        # 0xffff8cd8
  00cbf:    	jne    0x3aa50
  00cc5:    	mov    esi,DWORD PTR [rip+0xd26]        # 0x19f1
  00ccb:    	cmp    esi,0xffffffff
  00cce:    	je     0x3aa86
  00cd4:    	cmp    WORD PTR [rdi+0x2],0x3
  00cd9:    	jne    0xcf2
  00cdf:    	cmp    esi,0x6
  00ce2:    	jge    0xcf2
  00ce8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ced:    	jmp    0xd40
  00cf2:    	sub    rsp,0x30
  00cf6:    	movq   QWORD PTR [rsp],xmm3
  00cfb:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d01:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d07:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d0d:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d13: c8 	movabs rax,0x55c84f4d3440
  00d1d:    	call   rax
  00d1f:    	movq   xmm3,QWORD PTR [rsp]
  00d24:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d2a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d30:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d36:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d3c:    	add    rsp,0x30
  00d40: ff 	mov    QWORD PTR [rbp-0x88],rax
:00070 %14 = %1.call dir()                  [Ray]
:00071 
  00d47:    	mov    rdi,QWORD PTR [rbp-0x30]
  00d4b: 00 	test   rdi,0x7
  00d52:    	jne    0x3aaf1
  00d58:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00d5c:    	jne    0x3aaf1
  00d62: 26 	cmp    DWORD PTR [rip+0xffffffffffff7f6f],0x26        # 0xffff8cd8
  00d69:    	jne    0x3aaf1
  00d6f:    	mov    esi,DWORD PTR [rip+0xc84]        # 0x19f9
  00d75:    	cmp    esi,0xffffffff
  00d78:    	je     0x3ab27
  00d7e:    	cmp    WORD PTR [rdi+0x2],0x3
  00d83:    	jne    0xd9c
  00d89:    	cmp    esi,0x6
  00d8c:    	jge    0xd9c
  00d92:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d97:    	jmp    0xdea
  00d9c:    	sub    rsp,0x30
  00da0:    	movq   QWORD PTR [rsp],xmm3
  00da5:    	movq   QWORD PTR [rsp+0x8],xmm4
  00dab:    	movq   QWORD PTR [rsp+0x10],xmm5
  00db1:    	movq   QWORD PTR [rsp+0x18],xmm6
  00db7:    	movq   QWORD PTR [rsp+0x20],xmm7
  00dbd: c8 	movabs rax,0x55c84f4d3440
  00dc7:    	call   rax
  00dc9:    	movq   xmm3,QWORD PTR [rsp]
  00dce:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00dd4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00dda:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00de0:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00de6:    	add    rsp,0x30
  00dea: ff 	mov    QWORD PTR [rbp-0x98],rax
:00073 %13 = %14.call y()                   [Vec]
:00074 
  00df1: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00df8: 00 	test   rdi,0x7
  00dff:    	jne    0x3ab92
  00e05:    	cmp    DWORD PTR [rdi+0x4],0x25
  00e09:    	jne    0x3ab92
  00e0f: 26 	cmp    DWORD PTR [rip+0xffffffffffff7ec2],0x26        # 0xffff8cd8
  00e16:    	jne    0x3ab92
  00e1c:    	mov    esi,DWORD PTR [rip+0xbdf]        # 0x1a01
  00e22:    	cmp    esi,0xffffffff
  00e25:    	je     0x3abc8
  00e2b:    	cmp    WORD PTR [rdi+0x2],0x3
  00e30:    	jne    0xe49
  00e36:    	cmp    esi,0x6
  00e39:    	jge    0xe49
  00e3f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e44:    	jmp    0xe97
  00e49:    	sub    rsp,0x30
  00e4d:    	movq   QWORD PTR [rsp],xmm3
  00e52:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e58:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e5e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e64:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e6a: c8 	movabs rax,0x55c84f4d3440
  00e74:    	call   rax
  00e76:    	movq   xmm3,QWORD PTR [rsp]
  00e7b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e81:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e87:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e8d:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e93:    	add    rsp,0x30
  00e97: ff 	mov    QWORD PTR [rbp-0x90],rax
:00076 %13 = %13 * %7                       [Float][Float]
  00e9e: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00ea5: 00 	test   rdi,0x1
  00eac:    	jne    0x3ac33
  00eb2: 00 	test   rdi,0x2
  00eb9:    	je     0xef5
  00ebf:    	xorps  xmm2,xmm2
  00ec2: 00 	movabs rax,0x8000000000000002
  00ecc:    	cmp    rdi,rax
  00ecf:    	je     0xf07
  00ed5:    	mov    rax,rdi
  00ed8:    	sar    rax,0x3f
  00edc:    	add    rax,0x2
  00ee0:    	and    rdi,0xfffffffffffffffc
  00ee4:    	or     rdi,rax
  00ee7:    	rol    rdi,0x3d
  00eeb:    	movq   xmm2,rdi
  00ef0:    	jmp    0xf07
  00ef5:    	call   0xffff6341
  00efa:    	test   rax,rax
  00efd:    	je     0x3ac33
  00f03:    	movq   xmm2,xmm0
  00f07:    	mulsd  xmm2,xmm3
:00077 %12 = %12 + %13                      [Float][Float]
  00f0b: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00f12: 00 	test   rdi,0x1
  00f19:    	jne    0x3ac69
  00f1f: 00 	test   rdi,0x2
  00f26:    	je     0xf63
  00f2c:    	xorps  xmm8,xmm8
  00f30: 00 	movabs rax,0x8000000000000002
  00f3a:    	cmp    rdi,rax
  00f3d:    	je     0xf76
  00f43:    	mov    rax,rdi
  00f46:    	sar    rax,0x3f
  00f4a:    	add    rax,0x2
  00f4e:    	and    rdi,0xfffffffffffffffc
  00f52:    	or     rdi,rax
  00f55:    	rol    rdi,0x3d
  00f59:    	movq   xmm8,rdi
  00f5e:    	jmp    0xf76
  00f63:    	call   0xffff6341
  00f68:    	test   rax,rax
  00f6b:    	je     0x3ac69
  00f71:    	movq   xmm8,xmm0
  00f76:    	addsd  xmm8,xmm2
:00078 %14 = %1.call org()                  [Ray]
:00079 
  00f7b:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f7f: 00 	test   rdi,0x7
  00f86:    	jne    0x3acaf
  00f8c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00f90:    	jne    0x3acaf
  00f96: 26 	cmp    DWORD PTR [rip+0xffffffffffff7d3b],0x26        # 0xffff8cd8
  00f9d:    	jne    0x3acaf
  00fa3:    	mov    esi,DWORD PTR [rip+0xa60]        # 0x1a09
  00fa9:    	cmp    esi,0xffffffff
  00fac:    	je     0x3ad06
  00fb2:    	cmp    WORD PTR [rdi+0x2],0x3
  00fb7:    	jne    0xfd0
  00fbd:    	cmp    esi,0x6
  00fc0:    	jge    0xfd0
  00fc6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fcb:    	jmp    0x1038
  00fd0:    	sub    rsp,0x40
  00fd4:    	movq   QWORD PTR [rsp],xmm2
  00fd9:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fdf:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fe5:    	movq   QWORD PTR [rsp+0x18],xmm5
  00feb:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ff1:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ff7: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00ffe: c8 	movabs rax,0x55c84f4d3440
  01008:    	call   rax
  0100a:    	movq   xmm2,QWORD PTR [rsp]
  0100f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01015:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0101b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01021:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01027:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0102d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01034:    	add    rsp,0x40
  01038: ff 	mov    QWORD PTR [rbp-0x98],rax
:00081 %13 = %14.call z()                   [Vec]
:00082 
  0103f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01046: 00 	test   rdi,0x7
  0104d:    	jne    0x3ad8b
  01053:    	cmp    DWORD PTR [rdi+0x4],0x25
  01057:    	jne    0x3ad8b
  0105d: 26 	cmp    DWORD PTR [rip+0xffffffffffff7c74],0x26        # 0xffff8cd8
  01064:    	jne    0x3ad8b
  0106a:    	mov    esi,DWORD PTR [rip+0x9a1]        # 0x1a11
  01070:    	cmp    esi,0xffffffff
  01073:    	je     0x3add2
  01079:    	cmp    WORD PTR [rdi+0x2],0x3
  0107e:    	jne    0x1097
  01084:    	cmp    esi,0x6
  01087:    	jge    0x1097
  0108d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01092:    	jmp    0x10f3
  01097:    	sub    rsp,0x30
  0109b:    	movq   QWORD PTR [rsp],xmm3
  010a0:    	movq   QWORD PTR [rsp+0x8],xmm4
  010a6:    	movq   QWORD PTR [rsp+0x10],xmm5
  010ac:    	movq   QWORD PTR [rsp+0x18],xmm6
  010b2:    	movq   QWORD PTR [rsp+0x20],xmm7
  010b8: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  010bf: c8 	movabs rax,0x55c84f4d3440
  010c9:    	call   rax
  010cb:    	movq   xmm3,QWORD PTR [rsp]
  010d0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010d6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010dc:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010e2:    	movq   xmm7,QWORD PTR [rsp+0x20]
  010e8: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  010ef:    	add    rsp,0x30
  010f3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00084 %15 = %1.call dir()                  [Ray]
:00085 
  010fa:    	mov    rdi,QWORD PTR [rbp-0x30]
  010fe: 00 	test   rdi,0x7
  01105:    	jne    0x3ae4b
  0110b:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0110f:    	jne    0x3ae4b
  01115: 26 	cmp    DWORD PTR [rip+0xffffffffffff7bbc],0x26        # 0xffff8cd8
  0111c:    	jne    0x3ae4b
  01122:    	mov    esi,DWORD PTR [rip+0x8f1]        # 0x1a19
  01128:    	cmp    esi,0xffffffff
  0112b:    	je     0x3ae92
  01131:    	cmp    WORD PTR [rdi+0x2],0x3
  01136:    	jne    0x114f
  0113c:    	cmp    esi,0x6
  0113f:    	jge    0x114f
  01145:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0114a:    	jmp    0x11ab
  0114f:    	sub    rsp,0x30
  01153:    	movq   QWORD PTR [rsp],xmm3
  01158:    	movq   QWORD PTR [rsp+0x8],xmm4
  0115e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01164:    	movq   QWORD PTR [rsp+0x18],xmm6
  0116a:    	movq   QWORD PTR [rsp+0x20],xmm7
  01170: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01177: c8 	movabs rax,0x55c84f4d3440
  01181:    	call   rax
  01183:    	movq   xmm3,QWORD PTR [rsp]
  01188:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0118e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01194:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0119a:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011a0: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  011a7:    	add    rsp,0x30
  011ab: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00087 %14 = %15.call z()                   [Vec]
:00088 
  011b2: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  011b9: 00 	test   rdi,0x7
  011c0:    	jne    0x3af0b
  011c6:    	cmp    DWORD PTR [rdi+0x4],0x25
  011ca:    	jne    0x3af0b
  011d0: 26 	cmp    DWORD PTR [rip+0xffffffffffff7b01],0x26        # 0xffff8cd8
  011d7:    	jne    0x3af0b
  011dd:    	mov    esi,DWORD PTR [rip+0x83e]        # 0x1a21
  011e3:    	cmp    esi,0xffffffff
  011e6:    	je     0x3af52
  011ec:    	cmp    WORD PTR [rdi+0x2],0x3
  011f1:    	jne    0x120a
  011f7:    	cmp    esi,0x6
  011fa:    	jge    0x120a
  01200:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01205:    	jmp    0x1266
  0120a:    	sub    rsp,0x30
  0120e:    	movq   QWORD PTR [rsp],xmm3
  01213:    	movq   QWORD PTR [rsp+0x8],xmm4
  01219:    	movq   QWORD PTR [rsp+0x10],xmm5
  0121f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01225:    	movq   QWORD PTR [rsp+0x20],xmm7
  0122b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01232: c8 	movabs rax,0x55c84f4d3440
  0123c:    	call   rax
  0123e:    	movq   xmm3,QWORD PTR [rsp]
  01243:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01249:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0124f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01255:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0125b: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01262:    	add    rsp,0x30
  01266: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %14 = %14 * %7                       [Float][Float]
  0126d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01274: 00 	test   rdi,0x1
  0127b:    	jne    0x3afcb
  01281: 00 	test   rdi,0x2
  01288:    	je     0x12c4
  0128e:    	xorps  xmm2,xmm2
  01291: 00 	movabs rax,0x8000000000000002
  0129b:    	cmp    rdi,rax
  0129e:    	je     0x12d6
  012a4:    	mov    rax,rdi
  012a7:    	sar    rax,0x3f
  012ab:    	add    rax,0x2
  012af:    	and    rdi,0xfffffffffffffffc
  012b3:    	or     rdi,rax
  012b6:    	rol    rdi,0x3d
  012ba:    	movq   xmm2,rdi
  012bf:    	jmp    0x12d6
  012c4:    	call   0xffff6341
  012c9:    	test   rax,rax
  012cc:    	je     0x3afcb
  012d2:    	movq   xmm2,xmm0
  012d6:    	mulsd  xmm2,xmm3
:00091 %13 = %13 + %14                      [Float][Float]
  012da: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  012e1: 00 	test   rdi,0x1
  012e8:    	jne    0x3b012
  012ee: 00 	test   rdi,0x2
  012f5:    	je     0x1332
  012fb:    	xorps  xmm9,xmm9
  012ff: 00 	movabs rax,0x8000000000000002
  01309:    	cmp    rdi,rax
  0130c:    	je     0x1345
  01312:    	mov    rax,rdi
  01315:    	sar    rax,0x3f
  01319:    	add    rax,0x2
  0131d:    	and    rdi,0xfffffffffffffffc
  01321:    	or     rdi,rax
  01324:    	rol    rdi,0x3d
  01328:    	movq   xmm9,rdi
  0132d:    	jmp    0x1345
  01332:    	call   0xffff6341
  01337:    	test   rax,rax
  0133a:    	je     0x3b012
  01340:    	movq   xmm9,xmm0
  01345:    	addsd  xmm9,xmm2
:00092 %9 = %10.call new(%11; 3)            [#<Class:Vec>]
:00093 
  0134a:    	movq   xmm0,xmm4
  0134e:    	call   0xffff6434
  01353:    	mov    QWORD PTR [rbp-0x80],rax
  01357:    	movq   xmm0,xmm8
  0135c:    	call   0xffff6434
  01361: ff 	mov    QWORD PTR [rbp-0x88],rax
  01368:    	movq   xmm0,xmm9
  0136d:    	call   0xffff6434
  01372: ff 	mov    QWORD PTR [rbp-0x90],rax
  01379:    	mov    rdi,QWORD PTR [rbp-0x78]
  0137d: 00 	test   rdi,0x7
  01384:    	jne    0x3b069
  0138a:    	cmp    DWORD PTR [rdi+0x4],0x26
  0138e:    	jne    0x3b069
  01394: 26 	cmp    DWORD PTR [rip+0xffffffffffff793d],0x26        # 0xffff8cd8
  0139b:    	jne    0x3b069
  013a1: 00 	mov    r9,0x0
  013a8:    	sub    rsp,0x40
  013ac:    	movq   QWORD PTR [rsp],xmm2
  013b1:    	movq   QWORD PTR [rsp+0x8],xmm3
  013b7:    	movq   QWORD PTR [rsp+0x10],xmm4
  013bd:    	movq   QWORD PTR [rsp+0x18],xmm5
  013c3:    	movq   QWORD PTR [rsp+0x20],xmm6
  013c9:    	movq   QWORD PTR [rsp+0x28],xmm7
  013cf: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  013d6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  013dd:    	mov    rdx,rdi
  013e0:    	mov    rax,QWORD PTR [rbx]
  013e3:    	lea    rdi,[rsp-0x18]
  013e8:    	mov    QWORD PTR [rdi],rax
  013eb:    	mov    QWORD PTR [rbx],rdi
  013ee: 00 	mov    QWORD PTR [rsp-0x20],0x0
  013f7:    	mov    QWORD PTR [rsp-0x38],rcx
  013fc:    	lea    rcx,[rbp-0x80]
  01400: 00 	mov    r8,0x3
  01407:    	call   0x3b0a2
  0140c:    	lea    rdi,[rbp-0x8]
  01410:    	mov    QWORD PTR [rbx],rdi
  01413:    	movq   xmm2,QWORD PTR [rsp]
  01418:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0141e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01424:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0142a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01430:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01436: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0143d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01444:    	add    rsp,0x40
  01448: c8 	movabs r13,0x55c850b31c80
  01452:    	test   rax,rax
  01455:    	je     0xffff6308
  0145b:    	mov    QWORD PTR [rbp-0x70],rax
:00095 _ = %2.call pl=(%9; 1)               [Isect]
:00096 
  0145f:    	mov    rdi,QWORD PTR [rbp-0x38]
  01463: 00 	test   rdi,0x7
  0146a:    	jne    0x3b0d4
  01470:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01474:    	jne    0x3b0d4
  0147a: 26 	cmp    DWORD PTR [rip+0xffffffffffff7857],0x26        # 0xffff8cd8
  01481:    	jne    0x3b0d4
  01487:    	mov    esi,DWORD PTR [rip+0x59c]        # 0x1a29
  0148d:    	cmp    esi,0xffffffff
  01490:    	je     0x3b10d
  01496:    	cmp    WORD PTR [rdi+0x2],0x3
  0149b:    	jne    0x14b8
  014a1:    	cmp    esi,0x6
  014a4:    	jge    0x14b8
  014aa:    	mov    rax,QWORD PTR [rbp-0x70]
  014ae:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  014b3:    	jmp    0x1545
  014b8:    	sub    rsp,0x40
  014bc:    	movq   QWORD PTR [rsp],xmm2
  014c1:    	movq   QWORD PTR [rsp+0x8],xmm3
  014c7:    	movq   QWORD PTR [rsp+0x10],xmm4
  014cd:    	movq   QWORD PTR [rsp+0x18],xmm5
  014d3:    	movq   QWORD PTR [rsp+0x20],xmm6
  014d9:    	movq   QWORD PTR [rsp+0x28],xmm7
  014df: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014e6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014ed:    	mov    rdx,QWORD PTR [rbp-0x70]
  014f1: c8 	movabs rax,0x55c84f4d36c0
  014fb:    	call   rax
  014fd:    	movq   xmm2,QWORD PTR [rsp]
  01502:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01508:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0150e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01514:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0151a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01520: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01527: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0152e:    	add    rsp,0x40
  01532: c8 	movabs r13,0x55c850b31cb0
  0153c:    	test   rax,rax
  0153f:    	je     0xffff6308
:00098 %9 = %2.call pl()                    [Isect]
:00099 
  01545:    	mov    rdi,QWORD PTR [rbp-0x38]
  01549: 00 	test   rdi,0x7
  01550:    	jne    0x3b1a7
  01556:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0155a:    	jne    0x3b1a7
  01560: 26 	cmp    DWORD PTR [rip+0xffffffffffff7771],0x26        # 0xffff8cd8
  01567:    	jne    0x3b1a7
  0156d:    	mov    esi,DWORD PTR [rip+0x4be]        # 0x1a31
  01573:    	cmp    esi,0xffffffff
  01576:    	je     0x3b1e0
  0157c:    	cmp    WORD PTR [rdi+0x2],0x3
  01581:    	jne    0x159a
  01587:    	cmp    esi,0x6
  0158a:    	jge    0x159a
  01590:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01595:    	jmp    0x1610
  0159a:    	sub    rsp,0x40
  0159e:    	movq   QWORD PTR [rsp],xmm2
  015a3:    	movq   QWORD PTR [rsp+0x8],xmm3
  015a9:    	movq   QWORD PTR [rsp+0x10],xmm4
  015af:    	movq   QWORD PTR [rsp+0x18],xmm5
  015b5:    	movq   QWORD PTR [rsp+0x20],xmm6
  015bb:    	movq   QWORD PTR [rsp+0x28],xmm7
  015c1: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015c8: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015cf: c8 	movabs rax,0x55c84f4d3440
  015d9:    	call   rax
  015db:    	movq   xmm2,QWORD PTR [rsp]
  015e0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015e6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015ec:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015f2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  015f8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  015fe: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01605: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0160c:    	add    rsp,0x40
  01610:    	mov    QWORD PTR [rbp-0x70],rax
:00101 %10 = @center: Sphere[IvarId(0)]
  01614:    	mov    rdi,QWORD PTR [rbp-0x28]
  01618:    	cmp    WORD PTR [rdi+0x2],0x3
  0161d:    	jne    0x3b273
  01623:    	mov    rax,QWORD PTR [rdi+0x10]
  01627:    	mov    QWORD PTR [rbp-0x78],rax
:00102 %8 = %9.call vsub(%10; 1)            [Vec]
:00103 
  0162b:    	mov    rdi,QWORD PTR [rbp-0x70]
  0162f: 00 	test   rdi,0x7
  01636:    	jne    0x3b2f3
  0163c:    	cmp    DWORD PTR [rdi+0x4],0x25
  01640:    	jne    0x3b2f3
  01646: 26 	cmp    DWORD PTR [rip+0xffffffffffff768b],0x26        # 0xffff8cd8
  0164d:    	jne    0x3b2f3
  01653:    	sub    rsp,0x40
  01657:    	movq   QWORD PTR [rsp],xmm2
  0165c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01662:    	movq   QWORD PTR [rsp+0x10],xmm4
  01668:    	movq   QWORD PTR [rsp+0x18],xmm5
  0166e:    	movq   QWORD PTR [rsp+0x20],xmm6
  01674:    	movq   QWORD PTR [rsp+0x28],xmm7
  0167a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01681: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01688:    	mov    rax,QWORD PTR [rbx]
  0168b:    	lea    rdi,[rsp-0x18]
  01690:    	mov    QWORD PTR [rdi],rax
  01693:    	mov    QWORD PTR [rbx],rdi
  01696: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0169f:    	mov    QWORD PTR [rsp-0x38],rcx
  016a4:    	mov    rax,QWORD PTR [rbp-0x70]
  016a8:    	mov    QWORD PTR [rsp-0x38],rax
  016ad: 00 	mov    rdi,0x1
  016b4:    	mov    rax,QWORD PTR [rbp-0x78]
  016b8:    	mov    QWORD PTR [rsp-0x40],rax
  016bd: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016c6: 08 	movabs rax,0x1000800000039
  016d0:    	mov    QWORD PTR [rsp-0x28],rax
  016d5: c8 	movabs r13,0x55c850b38fb0
  016df:    	call   0xffff9930
  016e4:    	lea    rdi,[rbp-0x8]
  016e8:    	mov    QWORD PTR [rbx],rdi
  016eb:    	movq   xmm2,QWORD PTR [rsp]
  016f0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  016f6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  016fc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01702:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01708:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0170e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01715: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0171c:    	add    rsp,0x40
  01720: c8 	movabs r13,0x55c850b31d20
  0172a:    	test   rax,rax
  0172d:    	je     0xffff6308
  01733:    	mov    QWORD PTR [rbp-0x68],rax
:00105 %9 = %8.call vnormalize()            [Vec]
:00106 
  01737:    	mov    rdi,QWORD PTR [rbp-0x68]
  0173b: 00 	test   rdi,0x7
  01742:    	jne    0x3b32c
  01748:    	cmp    DWORD PTR [rdi+0x4],0x25
  0174c:    	jne    0x3b32c
  01752: 26 	cmp    DWORD PTR [rip+0xffffffffffff757f],0x26        # 0xffff8cd8
  01759:    	jne    0x3b32c
  0175f:    	sub    rsp,0x40
  01763:    	movq   QWORD PTR [rsp],xmm2
  01768:    	movq   QWORD PTR [rsp+0x8],xmm3
  0176e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01774:    	movq   QWORD PTR [rsp+0x18],xmm5
  0177a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01780:    	movq   QWORD PTR [rsp+0x28],xmm7
  01786: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0178d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01794:    	mov    rax,QWORD PTR [rbx]
  01797:    	lea    rdi,[rsp-0x18]
  0179c:    	mov    QWORD PTR [rdi],rax
  0179f:    	mov    QWORD PTR [rbx],rdi
  017a2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017ab:    	mov    QWORD PTR [rsp-0x38],rcx
  017b0:    	mov    rax,QWORD PTR [rbp-0x68]
  017b4:    	mov    QWORD PTR [rsp-0x38],rax
  017b9: 00 	mov    rdi,0x0
  017c0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  017c9: 07 	movabs rax,0x100070000003d
  017d3:    	mov    QWORD PTR [rsp-0x28],rax
  017d8: c8 	movabs r13,0x55c850b416a0
  017e2:    	call   0xffff9596
  017e7:    	lea    rdi,[rbp-0x8]
  017eb:    	mov    QWORD PTR [rbx],rdi
  017ee:    	movq   xmm2,QWORD PTR [rsp]
  017f3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  017f9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  017ff:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01805:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0180b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01811: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01818: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0181f:    	add    rsp,0x40
  01823: c8 	movabs r13,0x55c850b31d50
  0182d:    	test   rax,rax
  01830:    	je     0xffff6308
  01836:    	mov    QWORD PTR [rbp-0x70],rax
:00108 _ = %2.call n=(%9; 1)                [Isect]
:00109 
  0183a:    	mov    rdi,QWORD PTR [rbp-0x38]
  0183e: 00 	test   rdi,0x7
  01845:    	jne    0x3b365
  0184b:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0184f:    	jne    0x3b365
  01855: 26 	cmp    DWORD PTR [rip+0xffffffffffff747c],0x26        # 0xffff8cd8
  0185c:    	jne    0x3b365
  01862:    	mov    esi,DWORD PTR [rip+0x1d1]        # 0x1a39
  01868:    	cmp    esi,0xffffffff
  0186b:    	je     0x3b39e
  01871:    	cmp    WORD PTR [rdi+0x2],0x3
  01876:    	jne    0x1893
  0187c:    	cmp    esi,0x6
  0187f:    	jge    0x1893
  01885:    	mov    rax,QWORD PTR [rbp-0x70]
  01889:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0188e:    	jmp    0x1920
  01893:    	sub    rsp,0x40
  01897:    	movq   QWORD PTR [rsp],xmm2
  0189c:    	movq   QWORD PTR [rsp+0x8],xmm3
  018a2:    	movq   QWORD PTR [rsp+0x10],xmm4
  018a8:    	movq   QWORD PTR [rsp+0x18],xmm5
  018ae:    	movq   QWORD PTR [rsp+0x20],xmm6
  018b4:    	movq   QWORD PTR [rsp+0x28],xmm7
  018ba: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  018c1: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  018c8:    	mov    rdx,QWORD PTR [rbp-0x70]
  018cc: c8 	movabs rax,0x55c84f4d36c0
  018d6:    	call   rax
  018d8:    	movq   xmm2,QWORD PTR [rsp]
  018dd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  018e3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  018e9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  018ef:    	movq   xmm6,QWORD PTR [rsp+0x20]
  018f5:    	movq   xmm7,QWORD PTR [rsp+0x28]
  018fb: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01902: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01909:    	add    rsp,0x40
  0190d: c8 	movabs r13,0x55c850b31d80
  01917:    	test   rax,rax
  0191a:    	je     0xffff6308
:00111 br =>:00112
  01920:    	jmp    0x3b4f2
:00112 br =>:00113
  01925:    	jmp    0x3b584
:00113 %9 = nil
  0192a: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00114 ret %9
  01932:    	mov    rax,QWORD PTR [rbp-0x70]
  01936:    	leave  
  01937:    	ret    
==> start whole compile: <unnamed> FuncId(73) self_class:Scene start:[00000] bytecode:0x55c850b29f70
<== finished compile. elapsed:201.1µs
offset:Pos(46960) code: 8912 bytes  data: 408 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xb0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d:    	mov    rdi,QWORD PTR [rbp-0x28]
  00061: 00 	test   rdi,0x7
  00068:    	jne    0x39b7a
  0006e:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00072:    	jne    0x39b7a
:00000 %13 = %0.call rand()                 [Scene]
:00001 
  00078:    	mov    rdi,QWORD PTR [rbp-0x28]
  0007c: 26 	cmp    DWORD PTR [rip+0xffffffffffff7218],0x26        # 0xffff729b
  00083:    	jne    0x39b89
  00089: 00 	mov    r9,0x0
  00090:    	mov    rdx,rdi
  00093:    	mov    rax,QWORD PTR [rbx]
  00096:    	lea    rdi,[rsp-0x18]
  0009b:    	mov    QWORD PTR [rdi],rax
  0009e:    	mov    QWORD PTR [rbx],rdi
  000a1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000aa:    	mov    QWORD PTR [rsp-0x38],rcx
  000af: ff 	lea    rcx,[rbp-0x98]
  000b6: 00 	mov    r8,0x0
  000bd:    	call   0x39b98
  000c2:    	lea    rdi,[rbp-0x8]
  000c6:    	mov    QWORD PTR [rbx],rdi
  000c9: c8 	movabs r13,0x55c850b29f90
  000d3:    	test   rax,rax
  000d6:    	je     0xffff48cb
  000dc: ff 	mov    QWORD PTR [rbp-0x90],rax
:00003 %2 = %13
  000e3: ff 	mov    rax,QWORD PTR [rbp-0x90]
  000ea:    	mov    QWORD PTR [rbp-0x38],rax
:00004 %13 = literal[2.0]
  000ee: 00 	movq   xmm2,QWORD PTR [rip+0x21da]        # 0x22d0
  000f6: 00 	mov    rax,0x2
  000fd: ff 	mov    QWORD PTR [rbp-0x90],rax
:00005 %14 = literal[3.14159265]
  00104: 00 	movq   xmm3,QWORD PTR [rip+0x21d4]        # 0x22e0
  0010c: da 	movabs rax,0x490fda9e46a78a
  00116: ff 	mov    QWORD PTR [rbp-0x98],rax
:00006 %13 = %13 * %14                      [Float][Float]
  0011d:    	mulsd  xmm2,xmm3
:00007 %14 = %0.call rand()                 [Scene]
:00008 
  00121:    	mov    rdi,QWORD PTR [rbp-0x28]
  00125: 26 	cmp    DWORD PTR [rip+0xffffffffffff716f],0x26        # 0xffff729b
  0012c:    	jne    0x39bca
  00132: 00 	mov    r9,0x0
  00139:    	sub    rsp,0x10
  0013d:    	movq   QWORD PTR [rsp],xmm2
  00142:    	mov    rdx,rdi
  00145:    	mov    rax,QWORD PTR [rbx]
  00148:    	lea    rdi,[rsp-0x18]
  0014d:    	mov    QWORD PTR [rdi],rax
  00150:    	mov    QWORD PTR [rbx],rdi
  00153: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0015c:    	mov    QWORD PTR [rsp-0x38],rcx
  00161: ff 	lea    rcx,[rbp-0xa0]
  00168: 00 	mov    r8,0x0
  0016f:    	call   0x39be9
  00174:    	lea    rdi,[rbp-0x8]
  00178:    	mov    QWORD PTR [rbx],rdi
  0017b:    	movq   xmm2,QWORD PTR [rsp]
  00180:    	add    rsp,0x10
  00184: c8 	movabs r13,0x55c850b2a000
  0018e:    	test   rax,rax
  00191:    	je     0xffff48cb
  00197: ff 	mov    QWORD PTR [rbp-0x98],rax
:00010 %3 = %13 * %14                       [Float][Float]
  0019e: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001a5: 00 	test   rdi,0x1
  001ac:    	jne    0x39c1b
  001b2: 00 	test   rdi,0x2
  001b9:    	je     0x1f5
  001bf:    	xorps  xmm3,xmm3
  001c2: 00 	movabs rax,0x8000000000000002
  001cc:    	cmp    rdi,rax
  001cf:    	je     0x207
  001d5:    	mov    rax,rdi
  001d8:    	sar    rax,0x3f
  001dc:    	add    rax,0x2
  001e0:    	and    rdi,0xfffffffffffffffc
  001e4:    	or     rdi,rax
  001e7:    	rol    rdi,0x3d
  001eb:    	movq   xmm3,rdi
  001f0:    	jmp    0x207
  001f5:    	call   0xffff4904
  001fa:    	test   rax,rax
  001fd:    	je     0x39c1b
  00203:    	movq   xmm3,xmm0
  00207:    	movq   xmm4,xmm2
  0020b:    	mulsd  xmm4,xmm3
:00011 %14 = const[Math]                    [Math]
  0020f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff708a]        # 0xffff72a0
  00216: 00 	cmp    rax,QWORD PTR [rip+0x20e3]        # 0x2300
  0021d:    	jne    0x39c3a
  00223: 00 	mov    rax,QWORD PTR [rip+0x20c6]        # 0x22f0
  0022a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %15 = %3
:00013 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
:00014 
  00231: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00238: 00 	test   rdi,0x7
  0023f:    	jne    0x39c9e
  00245:    	cmp    DWORD PTR [rdi+0x4],0x20
  00249:    	jne    0x39c9e
  0024f: 26 	cmp    DWORD PTR [rip+0xffffffffffff7045],0x26        # 0xffff729b
  00256:    	jne    0x39c9e
  0025c:    	sub    rsp,0x10
  00260:    	movq   QWORD PTR [rsp],xmm2
  00265:    	movq   QWORD PTR [rsp+0x8],xmm4
  0026b:    	movq   xmm0,xmm4
  0026f: c8 	movabs rax,0x55c84f49b6f0
  00279:    	call   rax
  0027b:    	movq   xmm2,QWORD PTR [rsp]
  00280:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00286:    	add    rsp,0x10
  0028a:    	movq   xmm2,xmm0
:00016 %15 = const[Math]                    [Math]
  0028e: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff700b]        # 0xffff72a0
  00295: 00 	cmp    rax,QWORD PTR [rip+0x2084]        # 0x2320
  0029c:    	jne    0x39cc1
  002a2: 00 	mov    rax,QWORD PTR [rip+0x2067]        # 0x2310
  002a9: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00017 %16 = literal[1.0]
  002b0: 00 	movq   xmm3,QWORD PTR [rip+0x2078]        # 0x2330
  002b8: 00 	movabs rax,0xff80000000000002
  002c2: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00018 %16 = %16 - %2                       [Float][Float]
  002c9:    	mov    rdi,QWORD PTR [rbp-0x38]
  002cd: 00 	test   rdi,0x1
  002d4:    	jne    0x39d25
  002da: 00 	test   rdi,0x2
  002e1:    	je     0x31d
  002e7:    	xorps  xmm5,xmm5
  002ea: 00 	movabs rax,0x8000000000000002
  002f4:    	cmp    rdi,rax
  002f7:    	je     0x32f
  002fd:    	mov    rax,rdi
  00300:    	sar    rax,0x3f
  00304:    	add    rax,0x2
  00308:    	and    rdi,0xfffffffffffffffc
  0030c:    	or     rdi,rax
  0030f:    	rol    rdi,0x3d
  00313:    	movq   xmm5,rdi
  00318:    	jmp    0x32f
  0031d:    	call   0xffff4904
  00322:    	test   rax,rax
  00325:    	je     0x39d25
  0032b:    	movq   xmm5,xmm0
  0032f:    	subsd  xmm3,xmm5
:00019 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
:00020 
  00333: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0033a: 00 	test   rdi,0x7
  00341:    	jne    0x39d51
  00347:    	cmp    DWORD PTR [rdi+0x4],0x20
  0034b:    	jne    0x39d51
  00351: 26 	cmp    DWORD PTR [rip+0xffffffffffff6f43],0x26        # 0xffff729b
  00358:    	jne    0x39d51
  0035e:    	sqrtsd xmm6,xmm3
:00022 %4 = %13 * %14                       [Float][Float]
  00362:    	movq   xmm7,xmm2
  00366:    	mulsd  xmm7,xmm6
:00023 %14 = const[Math]                    [Math]
  0036a: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff6f2f]        # 0xffff72a0
  00371: 00 	cmp    rax,QWORD PTR [rip+0x1fd8]        # 0x2350
  00378:    	jne    0x39d8d
  0037e: 00 	mov    rax,QWORD PTR [rip+0x1fbb]        # 0x2340
  00385: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %15 = %3
:00025 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
:00026 
  0038c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00393: 00 	test   rdi,0x7
  0039a:    	jne    0x39e15
  003a0:    	cmp    DWORD PTR [rdi+0x4],0x20
  003a4:    	jne    0x39e15
  003aa: 26 	cmp    DWORD PTR [rip+0xffffffffffff6eea],0x26        # 0xffff729b
  003b1:    	jne    0x39e15
  003b7:    	sub    rsp,0x30
  003bb:    	movq   QWORD PTR [rsp],xmm2
  003c0:    	movq   QWORD PTR [rsp+0x8],xmm3
  003c6:    	movq   QWORD PTR [rsp+0x10],xmm4
  003cc:    	movq   QWORD PTR [rsp+0x18],xmm5
  003d2:    	movq   QWORD PTR [rsp+0x20],xmm7
  003d8:    	movq   xmm0,xmm4
  003dc: c8 	movabs rax,0x55c84f49b700
  003e6:    	call   rax
  003e8:    	movq   xmm2,QWORD PTR [rsp]
  003ed:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003f3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003f9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  003ff:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00405:    	add    rsp,0x30
  00409:    	movq   xmm2,xmm0
:00028 %15 = const[Math]                    [Math]
  0040d: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff6e8c]        # 0xffff72a0
  00414: 00 	cmp    rax,QWORD PTR [rip+0x1f55]        # 0x2370
  0041b:    	jne    0x39e55
  00421: 00 	mov    rax,QWORD PTR [rip+0x1f38]        # 0x2360
  00428: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00029 %16 = literal[1.0]
  0042f: 00 	movq   xmm3,QWORD PTR [rip+0x1f49]        # 0x2380
  00437: 00 	movabs rax,0xff80000000000002
  00441: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00030 %16 = %16 - %2                       [Float][Float]
  00448:    	subsd  xmm3,xmm5
:00031 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
:00032 
  0044c: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00453: 00 	test   rdi,0x7
  0045a:    	jne    0x39edd
  00460:    	cmp    DWORD PTR [rdi+0x4],0x20
  00464:    	jne    0x39edd
  0046a: 26 	cmp    DWORD PTR [rip+0xffffffffffff6e2a],0x26        # 0xffff729b
  00471:    	jne    0x39edd
  00477:    	sqrtsd xmm6,xmm3
:00034 %5 = %13 * %14                       [Float][Float]
  0047b:    	movq   xmm8,xmm2
  00480:    	mulsd  xmm8,xmm6
:00035 %13 = const[Math]                    [Math]
  00485: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff6e14]        # 0xffff72a0
  0048c: 00 	cmp    rax,QWORD PTR [rip+0x1f0d]        # 0x23a0
  00493:    	jne    0x39f26
  00499: 00 	mov    rax,QWORD PTR [rip+0x1ef0]        # 0x2390
  004a0: ff 	mov    QWORD PTR [rbp-0x90],rax
:00036 %14 = %2
:00037 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
:00038 
  004a7: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  004ae: 00 	test   rdi,0x7
  004b5:    	jne    0x39fbc
  004bb:    	cmp    DWORD PTR [rdi+0x4],0x20
  004bf:    	jne    0x39fbc
  004c5: 26 	cmp    DWORD PTR [rip+0xffffffffffff6dcf],0x26        # 0xffff729b
  004cc:    	jne    0x39fbc
  004d2:    	sqrtsd xmm2,xmm5
:00040 %14 = dynvar(2, %2)
  004d6:    	mov    rax,QWORD PTR [rbp-0x10]
  004da:    	mov    rax,QWORD PTR [rax]
  004dd:    	mov    rax,QWORD PTR [rax-0x28]
  004e1: ff 	mov    QWORD PTR [rbp-0x98],rax
:00041 %15 = 0: i32
  004e8: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00042 %14 = %14.[%15]
  004f3:    	sub    rsp,0x30
  004f7:    	movq   QWORD PTR [rsp],xmm2
  004fc:    	movq   QWORD PTR [rsp+0x8],xmm3
  00502:    	movq   QWORD PTR [rsp+0x10],xmm4
  00508:    	movq   QWORD PTR [rsp+0x18],xmm5
  0050e:    	movq   QWORD PTR [rsp+0x20],xmm7
  00514: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0051b: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00522: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00529:    	mov    rdi,rbx
  0052c:    	mov    rsi,r12
  0052f: c8 	movabs rax,0x55c84f4b6c00
  00539:    	call   rax
  0053b:    	movq   xmm2,QWORD PTR [rsp]
  00540:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00546:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0054c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00552:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00558: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0055f:    	add    rsp,0x30
  00563: c8 	movabs r13,0x55c850b2a220
  0056d:    	test   rax,rax
  00570:    	je     0xffff48cb
  00576: ff 	mov    QWORD PTR [rbp-0x98],rax
:00043 %13 = %14.call x()                   [Vec]
:00044 
  0057d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00584: 00 	test   rdi,0x7
  0058b:    	jne    0x3a013
  00591:    	cmp    DWORD PTR [rdi+0x4],0x25
  00595:    	jne    0x3a013
  0059b: 26 	cmp    DWORD PTR [rip+0xffffffffffff6cf9],0x26        # 0xffff729b
  005a2:    	jne    0x3a013
  005a8:    	mov    esi,DWORD PTR [rip+0x1dfe]        # 0x23ac
  005ae:    	cmp    esi,0xffffffff
  005b1:    	je     0x3a067
  005b7:    	cmp    WORD PTR [rdi+0x2],0x3
  005bc:    	jne    0x5d5
  005c2:    	cmp    esi,0x6
  005c5:    	jge    0x5d5
  005cb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005d0:    	jmp    0x631
  005d5:    	sub    rsp,0x30
  005d9:    	movq   QWORD PTR [rsp],xmm2
  005de:    	movq   QWORD PTR [rsp+0x8],xmm3
  005e4:    	movq   QWORD PTR [rsp+0x10],xmm4
  005ea:    	movq   QWORD PTR [rsp+0x18],xmm5
  005f0:    	movq   QWORD PTR [rsp+0x20],xmm7
  005f6: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  005fd: c8 	movabs rax,0x55c84f4d3440
  00607:    	call   rax
  00609:    	movq   xmm2,QWORD PTR [rsp]
  0060e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00614:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0061a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00620:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00626: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0062d:    	add    rsp,0x30
  00631: ff 	mov    QWORD PTR [rbp-0x90],rax
:00046 %13 = %4 * %13                       [Float][Float]
  00638: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0063f: 00 	test   rdi,0x1
  00646:    	jne    0x3a0e0
  0064c: 00 	test   rdi,0x2
  00653:    	je     0x68f
  00659:    	xorps  xmm6,xmm6
  0065c: 00 	movabs rax,0x8000000000000002
  00666:    	cmp    rdi,rax
  00669:    	je     0x6a1
  0066f:    	mov    rax,rdi
  00672:    	sar    rax,0x3f
  00676:    	add    rax,0x2
  0067a:    	and    rdi,0xfffffffffffffffc
  0067e:    	or     rdi,rax
  00681:    	rol    rdi,0x3d
  00685:    	movq   xmm6,rdi
  0068a:    	jmp    0x6a1
  0068f:    	call   0xffff4904
  00694:    	test   rax,rax
  00697:    	je     0x3a0e0
  0069d:    	movq   xmm6,xmm0
  006a1:    	mulsd  xmm6,xmm7
:00047 %15 = dynvar(2, %2)
  006a5:    	mov    rax,QWORD PTR [rbp-0x10]
  006a9:    	mov    rax,QWORD PTR [rax]
  006ac:    	mov    rax,QWORD PTR [rax-0x28]
  006b0: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00048 %16 = 1: i32
  006b7: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00049 %15 = %15.[%16]
  006c2:    	sub    rsp,0x30
  006c6:    	movq   QWORD PTR [rsp],xmm2
  006cb:    	movq   QWORD PTR [rsp+0x8],xmm4
  006d1:    	movq   QWORD PTR [rsp+0x10],xmm5
  006d7:    	movq   QWORD PTR [rsp+0x18],xmm6
  006dd:    	movq   QWORD PTR [rsp+0x20],xmm7
  006e3: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  006ea: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  006f1: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  006f8:    	mov    rdi,rbx
  006fb:    	mov    rsi,r12
  006fe: c8 	movabs rax,0x55c84f4b6c00
  00708:    	call   rax
  0070a:    	movq   xmm2,QWORD PTR [rsp]
  0070f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00715:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0071b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00721:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00727: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0072e:    	add    rsp,0x30
  00732: c8 	movabs r13,0x55c850b2a290
  0073c:    	test   rax,rax
  0073f:    	je     0xffff48cb
  00745: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00050 %14 = %15.call x()                   [Vec]
:00051 
  0074c: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00753: 00 	test   rdi,0x7
  0075a:    	jne    0x3a134
  00760:    	cmp    DWORD PTR [rdi+0x4],0x25
  00764:    	jne    0x3a134
  0076a: 26 	cmp    DWORD PTR [rip+0xffffffffffff6b2a],0x26        # 0xffff729b
  00771:    	jne    0x3a134
  00777:    	mov    esi,DWORD PTR [rip+0x1c37]        # 0x23b4
  0077d:    	cmp    esi,0xffffffff
  00780:    	je     0x3a188
  00786:    	cmp    WORD PTR [rdi+0x2],0x3
  0078b:    	jne    0x7a4
  00791:    	cmp    esi,0x6
  00794:    	jge    0x7a4
  0079a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0079f:    	jmp    0x800
  007a4:    	sub    rsp,0x30
  007a8:    	movq   QWORD PTR [rsp],xmm2
  007ad:    	movq   QWORD PTR [rsp+0x8],xmm4
  007b3:    	movq   QWORD PTR [rsp+0x10],xmm5
  007b9:    	movq   QWORD PTR [rsp+0x18],xmm6
  007bf:    	movq   QWORD PTR [rsp+0x20],xmm7
  007c5: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  007cc: c8 	movabs rax,0x55c84f4d3440
  007d6:    	call   rax
  007d8:    	movq   xmm2,QWORD PTR [rsp]
  007dd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007e3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007e9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007ef:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007f5: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  007fc:    	add    rsp,0x30
  00800: ff 	mov    QWORD PTR [rbp-0x98],rax
:00053 %14 = %5 * %14                       [Float][Float]
  00807: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0080e: 00 	test   rdi,0x1
  00815:    	jne    0x3a201
  0081b: 00 	test   rdi,0x2
  00822:    	je     0x85e
  00828:    	xorps  xmm3,xmm3
  0082b: 00 	movabs rax,0x8000000000000002
  00835:    	cmp    rdi,rax
  00838:    	je     0x870
  0083e:    	mov    rax,rdi
  00841:    	sar    rax,0x3f
  00845:    	add    rax,0x2
  00849:    	and    rdi,0xfffffffffffffffc
  0084d:    	or     rdi,rax
  00850:    	rol    rdi,0x3d
  00854:    	movq   xmm3,rdi
  00859:    	jmp    0x870
  0085e:    	call   0xffff4904
  00863:    	test   rax,rax
  00866:    	je     0x3a201
  0086c:    	movq   xmm3,xmm0
  00870:    	mulsd  xmm3,xmm8
:00054 %13 = %13 + %14                      [Float][Float]
  00875:    	addsd  xmm6,xmm3
:00055 %15 = dynvar(2, %2)
  00879:    	mov    rax,QWORD PTR [rbp-0x10]
  0087d:    	mov    rax,QWORD PTR [rax]
  00880:    	mov    rax,QWORD PTR [rax-0x28]
  00884: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00056 %16 = 2: i32
  0088b: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00057 %15 = %15.[%16]
  00896:    	sub    rsp,0x40
  0089a:    	movq   QWORD PTR [rsp],xmm2
  0089f:    	movq   QWORD PTR [rsp+0x8],xmm3
  008a5:    	movq   QWORD PTR [rsp+0x10],xmm4
  008ab:    	movq   QWORD PTR [rsp+0x18],xmm5
  008b1:    	movq   QWORD PTR [rsp+0x20],xmm6
  008b7:    	movq   QWORD PTR [rsp+0x28],xmm7
  008bd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  008c4: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  008cb: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  008d2:    	mov    rdi,rbx
  008d5:    	mov    rsi,r12
  008d8: c8 	movabs rax,0x55c84f4b6c00
  008e2:    	call   rax
  008e4:    	movq   xmm2,QWORD PTR [rsp]
  008e9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008ef:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008f5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008fb:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00901:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00907: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0090e:    	add    rsp,0x40
  00912: c8 	movabs r13,0x55c850b2a310
  0091c:    	test   rax,rax
  0091f:    	je     0xffff48cb
  00925: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00058 %14 = %15.call x()                   [Vec]
:00059 
  0092c: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00933: 00 	test   rdi,0x7
  0093a:    	jne    0x3a255
  00940:    	cmp    DWORD PTR [rdi+0x4],0x25
  00944:    	jne    0x3a255
  0094a: 26 	cmp    DWORD PTR [rip+0xffffffffffff694a],0x26        # 0xffff729b
  00951:    	jne    0x3a255
  00957:    	mov    esi,DWORD PTR [rip+0x1a5f]        # 0x23bc
  0095d:    	cmp    esi,0xffffffff
  00960:    	je     0x3a2a9
  00966:    	cmp    WORD PTR [rdi+0x2],0x3
  0096b:    	jne    0x984
  00971:    	cmp    esi,0x6
  00974:    	jge    0x984
  0097a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0097f:    	jmp    0x9e0
  00984:    	sub    rsp,0x30
  00988:    	movq   QWORD PTR [rsp],xmm2
  0098d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00993:    	movq   QWORD PTR [rsp+0x10],xmm5
  00999:    	movq   QWORD PTR [rsp+0x18],xmm6
  0099f:    	movq   QWORD PTR [rsp+0x20],xmm7
  009a5: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  009ac: c8 	movabs rax,0x55c84f4d3440
  009b6:    	call   rax
  009b8:    	movq   xmm2,QWORD PTR [rsp]
  009bd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009c3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009c9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009cf:    	movq   xmm7,QWORD PTR [rsp+0x20]
  009d5: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  009dc:    	add    rsp,0x30
  009e0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00061 %14 = %6 * %14                       [Float][Float]
  009e7: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  009ee: 00 	test   rdi,0x1
  009f5:    	jne    0x3a322
  009fb: 00 	test   rdi,0x2
  00a02:    	je     0xa3e
  00a08:    	xorps  xmm3,xmm3
  00a0b: 00 	movabs rax,0x8000000000000002
  00a15:    	cmp    rdi,rax
  00a18:    	je     0xa50
  00a1e:    	mov    rax,rdi
  00a21:    	sar    rax,0x3f
  00a25:    	add    rax,0x2
  00a29:    	and    rdi,0xfffffffffffffffc
  00a2d:    	or     rdi,rax
  00a30:    	rol    rdi,0x3d
  00a34:    	movq   xmm3,rdi
  00a39:    	jmp    0xa50
  00a3e:    	call   0xffff4904
  00a43:    	test   rax,rax
  00a46:    	je     0x3a322
  00a4c:    	movq   xmm3,xmm0
  00a50:    	mulsd  xmm3,xmm2
:00062 %7 = %13 + %14                       [Float][Float]
  00a54:    	movq   xmm9,xmm6
  00a59:    	addsd  xmm9,xmm3
:00063 %14 = dynvar(2, %2)
  00a5e:    	mov    rax,QWORD PTR [rbp-0x10]
  00a62:    	mov    rax,QWORD PTR [rax]
  00a65:    	mov    rax,QWORD PTR [rax-0x28]
  00a69: ff 	mov    QWORD PTR [rbp-0x98],rax
:00064 %15 = 0: i32
  00a70: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00065 %14 = %14.[%15]
  00a7b:    	sub    rsp,0x40
  00a7f:    	movq   QWORD PTR [rsp],xmm2
  00a84:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a8a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a90:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a96:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a9c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00aa3: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00aaa: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00ab1: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00ab8:    	mov    rdi,rbx
  00abb:    	mov    rsi,r12
  00abe: c8 	movabs rax,0x55c84f4b6c00
  00ac8:    	call   rax
  00aca:    	movq   xmm2,QWORD PTR [rsp]
  00acf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ad5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00adb:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ae1:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00ae7: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00aee: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00af5:    	add    rsp,0x40
  00af9: c8 	movabs r13,0x55c850b2a390
  00b03:    	test   rax,rax
  00b06:    	je     0xffff48cb
  00b0c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00066 %13 = %14.call y()                   [Vec]
:00067 
  00b13: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00b1a: 00 	test   rdi,0x7
  00b21:    	jne    0x3a376
  00b27:    	cmp    DWORD PTR [rdi+0x4],0x25
  00b2b:    	jne    0x3a376
  00b31: 26 	cmp    DWORD PTR [rip+0xffffffffffff6763],0x26        # 0xffff729b
  00b38:    	jne    0x3a376
  00b3e:    	mov    esi,DWORD PTR [rip+0x1880]        # 0x23c4
  00b44:    	cmp    esi,0xffffffff
  00b47:    	je     0x3a3c8
  00b4d:    	cmp    WORD PTR [rdi+0x2],0x3
  00b52:    	jne    0xb6b
  00b58:    	cmp    esi,0x6
  00b5b:    	jge    0xb6b
  00b61:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b66:    	jmp    0xbc9
  00b6b:    	sub    rsp,0x30
  00b6f:    	movq   QWORD PTR [rsp],xmm2
  00b74:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b7a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b80:    	movq   QWORD PTR [rsp+0x18],xmm7
  00b86: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00b8d: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00b94: c8 	movabs rax,0x55c84f4d3440
  00b9e:    	call   rax
  00ba0:    	movq   xmm2,QWORD PTR [rsp]
  00ba5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bab:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00bb1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00bb7: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00bbe: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00bc5:    	add    rsp,0x30
  00bc9: ff 	mov    QWORD PTR [rbp-0x90],rax
:00069 %13 = %4 * %13                       [Float][Float]
  00bd0: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00bd7: 00 	test   rdi,0x1
  00bde:    	jne    0x3a443
  00be4: 00 	test   rdi,0x2
  00beb:    	je     0xc27
  00bf1:    	xorps  xmm3,xmm3
  00bf4: 00 	movabs rax,0x8000000000000002
  00bfe:    	cmp    rdi,rax
  00c01:    	je     0xc39
  00c07:    	mov    rax,rdi
  00c0a:    	sar    rax,0x3f
  00c0e:    	add    rax,0x2
  00c12:    	and    rdi,0xfffffffffffffffc
  00c16:    	or     rdi,rax
  00c19:    	rol    rdi,0x3d
  00c1d:    	movq   xmm3,rdi
  00c22:    	jmp    0xc39
  00c27:    	call   0xffff4904
  00c2c:    	test   rax,rax
  00c2f:    	je     0x3a443
  00c35:    	movq   xmm3,xmm0
  00c39:    	mulsd  xmm3,xmm7
:00070 %15 = dynvar(2, %2)
  00c3d:    	mov    rax,QWORD PTR [rbp-0x10]
  00c41:    	mov    rax,QWORD PTR [rax]
  00c44:    	mov    rax,QWORD PTR [rax-0x28]
  00c48: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00071 %16 = 1: i32
  00c4f: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00072 %15 = %15.[%16]
  00c5a:    	sub    rsp,0x40
  00c5e:    	movq   QWORD PTR [rsp],xmm2
  00c63:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c69:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c6f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c75:    	movq   QWORD PTR [rsp+0x20],xmm7
  00c7b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00c82: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00c89: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00c90: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00c97:    	mov    rdi,rbx
  00c9a:    	mov    rsi,r12
  00c9d: c8 	movabs rax,0x55c84f4b6c00
  00ca7:    	call   rax
  00ca9:    	movq   xmm2,QWORD PTR [rsp]
  00cae:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cb4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cba:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cc0:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00cc6: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00ccd: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00cd4:    	add    rsp,0x40
  00cd8: c8 	movabs r13,0x55c850b2a400
  00ce2:    	test   rax,rax
  00ce5:    	je     0xffff48cb
  00ceb: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00073 %14 = %15.call y()                   [Vec]
:00074 
  00cf2: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00cf9: 00 	test   rdi,0x7
  00d00:    	jne    0x3a495
  00d06:    	cmp    DWORD PTR [rdi+0x4],0x25
  00d0a:    	jne    0x3a495
  00d10: 26 	cmp    DWORD PTR [rip+0xffffffffffff6584],0x26        # 0xffff729b
  00d17:    	jne    0x3a495
  00d1d:    	mov    esi,DWORD PTR [rip+0x16a9]        # 0x23cc
  00d23:    	cmp    esi,0xffffffff
  00d26:    	je     0x3a4f7
  00d2c:    	cmp    WORD PTR [rdi+0x2],0x3
  00d31:    	jne    0xd4a
  00d37:    	cmp    esi,0x6
  00d3a:    	jge    0xd4a
  00d40:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d45:    	jmp    0xdb4
  00d4a:    	sub    rsp,0x40
  00d4e:    	movq   QWORD PTR [rsp],xmm2
  00d53:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d59:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d5f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d65:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d6b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00d72: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d79: c8 	movabs rax,0x55c84f4d3440
  00d83:    	call   rax
  00d85:    	movq   xmm2,QWORD PTR [rsp]
  00d8a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d90:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d96:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d9c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00da2: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00da9: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00db0:    	add    rsp,0x40
  00db4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00076 %14 = %5 * %14                       [Float][Float]
  00dbb: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00dc2: 00 	test   rdi,0x1
  00dc9:    	jne    0x3a57e
  00dcf: 00 	test   rdi,0x2
  00dd6:    	je     0xe12
  00ddc:    	xorps  xmm6,xmm6
  00ddf: 00 	movabs rax,0x8000000000000002
  00de9:    	cmp    rdi,rax
  00dec:    	je     0xe24
  00df2:    	mov    rax,rdi
  00df5:    	sar    rax,0x3f
  00df9:    	add    rax,0x2
  00dfd:    	and    rdi,0xfffffffffffffffc
  00e01:    	or     rdi,rax
  00e04:    	rol    rdi,0x3d
  00e08:    	movq   xmm6,rdi
  00e0d:    	jmp    0xe24
  00e12:    	call   0xffff4904
  00e17:    	test   rax,rax
  00e1a:    	je     0x3a57e
  00e20:    	movq   xmm6,xmm0
  00e24:    	mulsd  xmm6,xmm8
:00077 %13 = %13 + %14                      [Float][Float]
  00e29:    	addsd  xmm3,xmm6
:00078 %15 = dynvar(2, %2)
  00e2d:    	mov    rax,QWORD PTR [rbp-0x10]
  00e31:    	mov    rax,QWORD PTR [rax]
  00e34:    	mov    rax,QWORD PTR [rax-0x28]
  00e38: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00079 %16 = 2: i32
  00e3f: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00080 %15 = %15.[%16]
  00e4a:    	sub    rsp,0x40
  00e4e:    	movq   QWORD PTR [rsp],xmm2
  00e53:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e59:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e5f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e65:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e6b:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e71: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e78: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e7f: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00e86: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00e8d:    	mov    rdi,rbx
  00e90:    	mov    rsi,r12
  00e93: c8 	movabs rax,0x55c84f4b6c00
  00e9d:    	call   rax
  00e9f:    	movq   xmm2,QWORD PTR [rsp]
  00ea4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00eaa:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00eb0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00eb6:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ebc:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00ec2: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00ec9: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00ed0:    	add    rsp,0x40
  00ed4: c8 	movabs r13,0x55c850b2a480
  00ede:    	test   rax,rax
  00ee1:    	je     0xffff48cb
  00ee7: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00081 %14 = %15.call y()                   [Vec]
:00082 
  00eee: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00ef5: 00 	test   rdi,0x7
  00efc:    	jne    0x3a5e0
  00f02:    	cmp    DWORD PTR [rdi+0x4],0x25
  00f06:    	jne    0x3a5e0
  00f0c: 26 	cmp    DWORD PTR [rip+0xffffffffffff6388],0x26        # 0xffff729b
  00f13:    	jne    0x3a5e0
  00f19:    	mov    esi,DWORD PTR [rip+0x14b5]        # 0x23d4
  00f1f:    	cmp    esi,0xffffffff
  00f22:    	je     0x3a642
  00f28:    	cmp    WORD PTR [rdi+0x2],0x3
  00f2d:    	jne    0xf46
  00f33:    	cmp    esi,0x6
  00f36:    	jge    0xf46
  00f3c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f41:    	jmp    0xfb0
  00f46:    	sub    rsp,0x40
  00f4a:    	movq   QWORD PTR [rsp],xmm2
  00f4f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f55:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f5b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f61:    	movq   QWORD PTR [rsp+0x20],xmm7
  00f67: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00f6e: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00f75: c8 	movabs rax,0x55c84f4d3440
  00f7f:    	call   rax
  00f81:    	movq   xmm2,QWORD PTR [rsp]
  00f86:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f8c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f92:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f98:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00f9e: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00fa5: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00fac:    	add    rsp,0x40
  00fb0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00084 %14 = %6 * %14                       [Float][Float]
  00fb7: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00fbe: 00 	test   rdi,0x1
  00fc5:    	jne    0x3a6c9
  00fcb: 00 	test   rdi,0x2
  00fd2:    	je     0x100e
  00fd8:    	xorps  xmm6,xmm6
  00fdb: 00 	movabs rax,0x8000000000000002
  00fe5:    	cmp    rdi,rax
  00fe8:    	je     0x1020
  00fee:    	mov    rax,rdi
  00ff1:    	sar    rax,0x3f
  00ff5:    	add    rax,0x2
  00ff9:    	and    rdi,0xfffffffffffffffc
  00ffd:    	or     rdi,rax
  01000:    	rol    rdi,0x3d
  01004:    	movq   xmm6,rdi
  01009:    	jmp    0x1020
  0100e:    	call   0xffff4904
  01013:    	test   rax,rax
  01016:    	je     0x3a6c9
  0101c:    	movq   xmm6,xmm0
  01020:    	mulsd  xmm6,xmm2
:00085 %8 = %13 + %14                       [Float][Float]
  01024:    	movq   xmm10,xmm3
  01029:    	addsd  xmm10,xmm6
:00086 %14 = dynvar(2, %2)
  0102e:    	mov    rax,QWORD PTR [rbp-0x10]
  01032:    	mov    rax,QWORD PTR [rax]
  01035:    	mov    rax,QWORD PTR [rax-0x28]
  01039: ff 	mov    QWORD PTR [rbp-0x98],rax
:00087 %15 = 0: i32
  01040: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00088 %14 = %14.[%15]
  0104b:    	sub    rsp,0x40
  0104f:    	movq   QWORD PTR [rsp],xmm2
  01054:    	movq   QWORD PTR [rsp+0x8],xmm3
  0105a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01060:    	movq   QWORD PTR [rsp+0x18],xmm5
  01066:    	movq   QWORD PTR [rsp+0x20],xmm7
  0106c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01073: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0107a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01081: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01088: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0108f:    	mov    rdi,rbx
  01092:    	mov    rsi,r12
  01095: c8 	movabs rax,0x55c84f4b6c00
  0109f:    	call   rax
  010a1:    	movq   xmm2,QWORD PTR [rsp]
  010a6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010ac:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010b2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010b8:    	movq   xmm7,QWORD PTR [rsp+0x20]
  010be: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  010c5: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  010cc: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  010d3:    	add    rsp,0x40
  010d7: c8 	movabs r13,0x55c850b2a500
  010e1:    	test   rax,rax
  010e4:    	je     0xffff48cb
  010ea: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %13 = %14.call z()                   [Vec]
:00090 
  010f1: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  010f8: 00 	test   rdi,0x7
  010ff:    	jne    0x3a72b
  01105:    	cmp    DWORD PTR [rdi+0x4],0x25
  01109:    	jne    0x3a72b
  0110f: 26 	cmp    DWORD PTR [rip+0xffffffffffff6185],0x26        # 0xffff729b
  01116:    	jne    0x3a72b
  0111c:    	mov    esi,DWORD PTR [rip+0x12ba]        # 0x23dc
  01122:    	cmp    esi,0xffffffff
  01125:    	je     0x3a78b
  0112b:    	cmp    WORD PTR [rdi+0x2],0x3
  01130:    	jne    0x1149
  01136:    	cmp    esi,0x6
  01139:    	jge    0x1149
  0113f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01144:    	jmp    0x11b5
  01149:    	sub    rsp,0x40
  0114d:    	movq   QWORD PTR [rsp],xmm2
  01152:    	movq   QWORD PTR [rsp+0x8],xmm4
  01158:    	movq   QWORD PTR [rsp+0x10],xmm5
  0115e:    	movq   QWORD PTR [rsp+0x18],xmm7
  01164: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0116b: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01172: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01179: c8 	movabs rax,0x55c84f4d3440
  01183:    	call   rax
  01185:    	movq   xmm2,QWORD PTR [rsp]
  0118a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01190:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01196:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0119c: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  011a3: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  011aa: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  011b1:    	add    rsp,0x40
  011b5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 %13 = %4 * %13                       [Float][Float]
  011bc: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  011c3: 00 	test   rdi,0x1
  011ca:    	jne    0x3a814
  011d0: 00 	test   rdi,0x2
  011d7:    	je     0x1213
  011dd:    	xorps  xmm3,xmm3
  011e0: 00 	movabs rax,0x8000000000000002
  011ea:    	cmp    rdi,rax
  011ed:    	je     0x1225
  011f3:    	mov    rax,rdi
  011f6:    	sar    rax,0x3f
  011fa:    	add    rax,0x2
  011fe:    	and    rdi,0xfffffffffffffffc
  01202:    	or     rdi,rax
  01205:    	rol    rdi,0x3d
  01209:    	movq   xmm3,rdi
  0120e:    	jmp    0x1225
  01213:    	call   0xffff4904
  01218:    	test   rax,rax
  0121b:    	je     0x3a814
  01221:    	movq   xmm3,xmm0
  01225:    	mulsd  xmm3,xmm7
:00093 %15 = dynvar(2, %2)
  01229:    	mov    rax,QWORD PTR [rbp-0x10]
  0122d:    	mov    rax,QWORD PTR [rax]
  01230:    	mov    rax,QWORD PTR [rax-0x28]
  01234: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00094 %16 = 1: i32
  0123b: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00095 %15 = %15.[%16]
  01246:    	sub    rsp,0x40
  0124a:    	movq   QWORD PTR [rsp],xmm2
  0124f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01255:    	movq   QWORD PTR [rsp+0x10],xmm4
  0125b:    	movq   QWORD PTR [rsp+0x18],xmm5
  01261:    	movq   QWORD PTR [rsp+0x20],xmm7
  01267: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0126e: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01275: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0127c: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01283: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0128a:    	mov    rdi,rbx
  0128d:    	mov    rsi,r12
  01290: c8 	movabs rax,0x55c84f4b6c00
  0129a:    	call   rax
  0129c:    	movq   xmm2,QWORD PTR [rsp]
  012a1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  012a7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  012ad:    	movq   xmm5,QWORD PTR [rsp+0x18]
  012b3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  012b9: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  012c0: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  012c7: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  012ce:    	add    rsp,0x40
  012d2: c8 	movabs r13,0x55c850b2a570
  012dc:    	test   rax,rax
  012df:    	je     0xffff48cb
  012e5: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00096 %14 = %15.call z()                   [Vec]
:00097 
  012ec: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  012f3: 00 	test   rdi,0x7
  012fa:    	jne    0x3a874
  01300:    	cmp    DWORD PTR [rdi+0x4],0x25
  01304:    	jne    0x3a874
  0130a: 26 	cmp    DWORD PTR [rip+0xffffffffffff5f8a],0x26        # 0xffff729b
  01311:    	jne    0x3a874
  01317:    	mov    esi,DWORD PTR [rip+0x10c7]        # 0x23e4
  0131d:    	cmp    esi,0xffffffff
  01320:    	je     0x3a8e4
  01326:    	cmp    WORD PTR [rdi+0x2],0x3
  0132b:    	jne    0x1344
  01331:    	cmp    esi,0x6
  01334:    	jge    0x1344
  0133a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0133f:    	jmp    0x13bc
  01344:    	sub    rsp,0x40
  01348:    	movq   QWORD PTR [rsp],xmm2
  0134d:    	movq   QWORD PTR [rsp+0x8],xmm3
  01353:    	movq   QWORD PTR [rsp+0x10],xmm4
  01359:    	movq   QWORD PTR [rsp+0x18],xmm5
  0135f:    	movq   QWORD PTR [rsp+0x20],xmm7
  01365: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0136c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01373: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0137a: c8 	movabs rax,0x55c84f4d3440
  01384:    	call   rax
  01386:    	movq   xmm2,QWORD PTR [rsp]
  0138b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01391:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01397:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0139d:    	movq   xmm7,QWORD PTR [rsp+0x20]
  013a3: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  013aa: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  013b1: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  013b8:    	add    rsp,0x40
  013bc: ff 	mov    QWORD PTR [rbp-0x98],rax
:00099 %14 = %5 * %14                       [Float][Float]
  013c3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  013ca: 00 	test   rdi,0x1
  013d1:    	jne    0x3a979
  013d7: 00 	test   rdi,0x2
  013de:    	je     0x141a
  013e4:    	xorps  xmm6,xmm6
  013e7: 00 	movabs rax,0x8000000000000002
  013f1:    	cmp    rdi,rax
  013f4:    	je     0x142c
  013fa:    	mov    rax,rdi
  013fd:    	sar    rax,0x3f
  01401:    	add    rax,0x2
  01405:    	and    rdi,0xfffffffffffffffc
  01409:    	or     rdi,rax
  0140c:    	rol    rdi,0x3d
  01410:    	movq   xmm6,rdi
  01415:    	jmp    0x142c
  0141a:    	call   0xffff4904
  0141f:    	test   rax,rax
  01422:    	je     0x3a979
  01428:    	movq   xmm6,xmm0
  0142c:    	mulsd  xmm6,xmm8
:00100 %13 = %13 + %14                      [Float][Float]
  01431:    	addsd  xmm3,xmm6
:00101 %15 = dynvar(2, %2)
  01435:    	mov    rax,QWORD PTR [rbp-0x10]
  01439:    	mov    rax,QWORD PTR [rax]
  0143c:    	mov    rax,QWORD PTR [rax-0x28]
  01440: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00102 %16 = 2: i32
  01447: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00103 %15 = %15.[%16]
  01452:    	sub    rsp,0x50
  01456:    	movq   QWORD PTR [rsp],xmm2
  0145b:    	movq   QWORD PTR [rsp+0x8],xmm3
  01461:    	movq   QWORD PTR [rsp+0x10],xmm4
  01467:    	movq   QWORD PTR [rsp+0x18],xmm5
  0146d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01473:    	movq   QWORD PTR [rsp+0x28],xmm7
  01479: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01480: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01487: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0148e: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01495: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0149c:    	mov    rdi,rbx
  0149f:    	mov    rsi,r12
  014a2: c8 	movabs rax,0x55c84f4b6c00
  014ac:    	call   rax
  014ae:    	movq   xmm2,QWORD PTR [rsp]
  014b3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014b9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014bf:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014c5:    	movq   xmm6,QWORD PTR [rsp+0x20]
  014cb:    	movq   xmm7,QWORD PTR [rsp+0x28]
  014d1: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  014d8: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  014df: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  014e6:    	add    rsp,0x50
  014ea: c8 	movabs r13,0x55c850b2a5f0
  014f4:    	test   rax,rax
  014f7:    	je     0xffff48cb
  014fd: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00104 %14 = %15.call z()                   [Vec]
:00105 
  01504: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0150b: 00 	test   rdi,0x7
  01512:    	jne    0x3a9e9
  01518:    	cmp    DWORD PTR [rdi+0x4],0x25
  0151c:    	jne    0x3a9e9
  01522: 26 	cmp    DWORD PTR [rip+0xffffffffffff5d72],0x26        # 0xffff729b
  01529:    	jne    0x3a9e9
  0152f:    	mov    esi,DWORD PTR [rip+0xeb7]        # 0x23ec
  01535:    	cmp    esi,0xffffffff
  01538:    	je     0x3aa59
  0153e:    	cmp    WORD PTR [rdi+0x2],0x3
  01543:    	jne    0x155c
  01549:    	cmp    esi,0x6
  0154c:    	jge    0x155c
  01552:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01557:    	jmp    0x15d4
  0155c:    	sub    rsp,0x40
  01560:    	movq   QWORD PTR [rsp],xmm2
  01565:    	movq   QWORD PTR [rsp+0x8],xmm3
  0156b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01571:    	movq   QWORD PTR [rsp+0x18],xmm5
  01577:    	movq   QWORD PTR [rsp+0x20],xmm7
  0157d: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01584: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0158b: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01592: c8 	movabs rax,0x55c84f4d3440
  0159c:    	call   rax
  0159e:    	movq   xmm2,QWORD PTR [rsp]
  015a3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015a9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015af:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015b5:    	movq   xmm7,QWORD PTR [rsp+0x20]
  015bb: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  015c2: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  015c9: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  015d0:    	add    rsp,0x40
  015d4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00107 %14 = %6 * %14                       [Float][Float]
  015db: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  015e2: 00 	test   rdi,0x1
  015e9:    	jne    0x3aaee
  015ef: 00 	test   rdi,0x2
  015f6:    	je     0x1632
  015fc:    	xorps  xmm6,xmm6
  015ff: 00 	movabs rax,0x8000000000000002
  01609:    	cmp    rdi,rax
  0160c:    	je     0x1644
  01612:    	mov    rax,rdi
  01615:    	sar    rax,0x3f
  01619:    	add    rax,0x2
  0161d:    	and    rdi,0xfffffffffffffffc
  01621:    	or     rdi,rax
  01624:    	rol    rdi,0x3d
  01628:    	movq   xmm6,rdi
  0162d:    	jmp    0x1644
  01632:    	call   0xffff4904
  01637:    	test   rax,rax
  0163a:    	je     0x3aaee
  01640:    	movq   xmm6,xmm0
  01644:    	mulsd  xmm6,xmm2
:00108 %9 = %13 + %14                       [Float][Float]
  01648:    	movq   xmm11,xmm3
  0164d:    	addsd  xmm11,xmm6
:00109 %13 = const[Vec]                     [Vec]
  01652: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5c47]        # 0xffff72a0
  01659: 00 	cmp    rax,QWORD PTR [rip+0xda0]        # 0x2400
  01660:    	jne    0x3ab5e
  01666: 00 	mov    rax,QWORD PTR [rip+0xd83]        # 0x23f0
  0166d: ff 	mov    QWORD PTR [rbp-0x90],rax
:00110 %14 = %7
:00111 %15 = %8
:00112 %16 = %9
:00113 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
:00114 
  01674:    	movq   xmm0,xmm9
  01679:    	call   0xffff49f7
  0167e: ff 	mov    QWORD PTR [rbp-0x98],rax
  01685:    	movq   xmm0,xmm10
  0168a:    	call   0xffff49f7
  0168f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01696:    	movq   xmm0,xmm11
  0169b:    	call   0xffff49f7
  016a0: ff 	mov    QWORD PTR [rbp-0xa8],rax
  016a7: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  016ae: 00 	test   rdi,0x7
  016b5:    	jne    0x3ac1e
  016bb:    	cmp    DWORD PTR [rdi+0x4],0x26
  016bf:    	jne    0x3ac1e
  016c5: 26 	cmp    DWORD PTR [rip+0xffffffffffff5bcf],0x26        # 0xffff729b
  016cc:    	jne    0x3ac1e
  016d2: 00 	mov    r9,0x0
  016d9:    	sub    rsp,0x40
  016dd:    	movq   QWORD PTR [rsp],xmm2
  016e2:    	movq   QWORD PTR [rsp+0x8],xmm4
  016e8:    	movq   QWORD PTR [rsp+0x10],xmm5
  016ee:    	movq   QWORD PTR [rsp+0x18],xmm7
  016f4: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  016fb: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01702: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01709: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01710:    	mov    rdx,rdi
  01713:    	mov    rax,QWORD PTR [rbx]
  01716:    	lea    rdi,[rsp-0x18]
  0171b:    	mov    QWORD PTR [rdi],rax
  0171e:    	mov    QWORD PTR [rbx],rdi
  01721: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0172a:    	mov    QWORD PTR [rsp-0x38],rcx
  0172f: ff 	lea    rcx,[rbp-0x98]
  01736: 00 	mov    r8,0x3
  0173d:    	call   0x3ac8c
  01742:    	lea    rdi,[rbp-0x8]
  01746:    	mov    QWORD PTR [rbx],rdi
  01749:    	movq   xmm2,QWORD PTR [rsp]
  0174e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01754:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0175a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01760: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01767: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0176e: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01775: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0177c:    	add    rsp,0x40
  01780: c8 	movabs r13,0x55c850b2a6a0
  0178a:    	test   rax,rax
  0178d:    	je     0xffff48cb
  01793:    	mov    QWORD PTR [rbp-0x78],rax
:00116 %13 = const[Ray]                     [Ray]
  01797: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5b02]        # 0xffff72a0
  0179e: 00 	cmp    rax,QWORD PTR [rip+0xc7b]        # 0x2420
  017a5:    	jne    0x3acbe
  017ab: 00 	mov    rax,QWORD PTR [rip+0xc5e]        # 0x2410
  017b2: ff 	mov    QWORD PTR [rbp-0x90],rax
:00117 %14 = dynvar(2, %7)
  017b9:    	mov    rax,QWORD PTR [rbp-0x10]
  017bd:    	mov    rax,QWORD PTR [rax]
  017c0:    	mov    rax,QWORD PTR [rax-0x50]
  017c4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00118 %15 = %10
  017cb:    	mov    rax,QWORD PTR [rbp-0x78]
  017cf: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00119 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
:00120 
  017d6: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  017dd: 00 	test   rdi,0x7
  017e4:    	jne    0x3ad72
  017ea:    	cmp    DWORD PTR [rdi+0x4],0x2c
  017ee:    	jne    0x3ad72
  017f4: 26 	cmp    DWORD PTR [rip+0xffffffffffff5aa0],0x26        # 0xffff729b
  017fb:    	jne    0x3ad72
  01801: 00 	mov    r9,0x0
  01808:    	sub    rsp,0x40
  0180c:    	movq   QWORD PTR [rsp],xmm2
  01811:    	movq   QWORD PTR [rsp+0x8],xmm4
  01817:    	movq   QWORD PTR [rsp+0x10],xmm5
  0181d:    	movq   QWORD PTR [rsp+0x18],xmm7
  01823: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0182a: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01831: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01838: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  0183f:    	mov    rdx,rdi
  01842:    	mov    rax,QWORD PTR [rbx]
  01845:    	lea    rdi,[rsp-0x18]
  0184a:    	mov    QWORD PTR [rdi],rax
  0184d:    	mov    QWORD PTR [rbx],rdi
  01850: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01859:    	mov    QWORD PTR [rsp-0x38],rcx
  0185e: ff 	lea    rcx,[rbp-0x98]
  01865: 00 	mov    r8,0x2
  0186c:    	call   0x3ade0
  01871:    	lea    rdi,[rbp-0x8]
  01875:    	mov    QWORD PTR [rbx],rdi
  01878:    	movq   xmm2,QWORD PTR [rsp]
  0187d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01883:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01889:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0188f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01896: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0189d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  018a4: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  018ab:    	add    rsp,0x40
  018af: c8 	movabs r13,0x55c850b2a700
  018b9:    	test   rax,rax
  018bc:    	je     0xffff48cb
  018c2:    	mov    QWORD PTR [rbp-0x80],rax
:00122 %13 = const[Isect]                   [Isect]
  018c6: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff59d3]        # 0xffff72a0
  018cd: 00 	cmp    rax,QWORD PTR [rip+0xb6c]        # 0x2440
  018d4:    	jne    0x3ae12
  018da: 00 	mov    rax,QWORD PTR [rip+0xb4f]        # 0x2430
  018e1: ff 	mov    QWORD PTR [rbp-0x90],rax
:00123 %12 = %13.call new()                 [#<Class:Isect>]
:00124 
  018e8: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  018ef: 00 	test   rdi,0x7
  018f6:    	jne    0x3aec6
  018fc:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01900:    	jne    0x3aec6
  01906: 26 	cmp    DWORD PTR [rip+0xffffffffffff598e],0x26        # 0xffff729b
  0190d:    	jne    0x3aec6
  01913: 00 	mov    r9,0x0
  0191a:    	sub    rsp,0x40
  0191e:    	movq   QWORD PTR [rsp],xmm2
  01923:    	movq   QWORD PTR [rsp+0x8],xmm4
  01929:    	movq   QWORD PTR [rsp+0x10],xmm5
  0192f:    	movq   QWORD PTR [rsp+0x18],xmm7
  01935: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0193c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01943: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0194a: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01951:    	mov    rdx,rdi
  01954:    	mov    rax,QWORD PTR [rbx]
  01957:    	lea    rdi,[rsp-0x18]
  0195c:    	mov    QWORD PTR [rdi],rax
  0195f:    	mov    QWORD PTR [rbx],rdi
  01962: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0196b:    	mov    QWORD PTR [rsp-0x38],rcx
  01970: ff 	lea    rcx,[rbp-0x98]
  01977: 00 	mov    r8,0x0
  0197e:    	call   0x3af34
  01983:    	lea    rdi,[rbp-0x8]
  01987:    	mov    QWORD PTR [rbx],rdi
  0198a:    	movq   xmm2,QWORD PTR [rsp]
  0198f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01995:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0199b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  019a1: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  019a8: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  019af: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  019b6: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  019bd:    	add    rsp,0x40
  019c1: c8 	movabs r13,0x55c850b2a740
  019cb:    	test   rax,rax
  019ce:    	je     0xffff48cb
  019d4: ff 	mov    QWORD PTR [rbp-0x88],rax
:00126 %13 = @spheres: Scene[IvarId(0)]
  019db:    	mov    rdi,QWORD PTR [rbp-0x28]
  019df:    	cmp    WORD PTR [rdi+0x2],0x3
  019e4:    	jne    0x3af66
  019ea:    	mov    rax,QWORD PTR [rdi+0x10]
  019ee: ff 	mov    QWORD PTR [rbp-0x90],rax
:00127 %14 = 0: i32
  019f5: ff 	mov    QWORD PTR [rbp-0x98],0x1
:00128 %13 = %13.[%14]
  01a00:    	sub    rsp,0x40
  01a04:    	movq   QWORD PTR [rsp],xmm2
  01a09:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a0f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01a15:    	movq   QWORD PTR [rsp+0x18],xmm7
  01a1b: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01a22: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01a29: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01a30: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01a37: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01a3e: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01a45:    	mov    rdi,rbx
  01a48:    	mov    rsi,r12
  01a4b: c8 	movabs rax,0x55c84f4b6c00
  01a55:    	call   rax
  01a57:    	movq   xmm2,QWORD PTR [rsp]
  01a5c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a62:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a68:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a6e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a75: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a7c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a83: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a8a:    	add    rsp,0x40
  01a8e: c8 	movabs r13,0x55c850b2a780
  01a98:    	test   rax,rax
  01a9b:    	je     0xffff48cb
  01aa1: ff 	mov    QWORD PTR [rbp-0x90],rax
:00129 %14 = %11
  01aa8:    	mov    rax,QWORD PTR [rbp-0x80]
  01aac: ff 	mov    QWORD PTR [rbp-0x98],rax
:00130 %15 = %12
  01ab3: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01aba: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00131 _ = %13.call intersect(%14; 2)       [Sphere]
:00132 
  01ac1: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01ac8: 00 	test   rdi,0x7
  01acf:    	jne    0x3afea
  01ad5:    	cmp    DWORD PTR [rdi+0x4],0x27
  01ad9:    	jne    0x3afea
  01adf: 26 	cmp    DWORD PTR [rip+0xffffffffffff57b5],0x26        # 0xffff729b
  01ae6:    	jne    0x3afea
  01aec:    	sub    rsp,0x40
  01af0:    	movq   QWORD PTR [rsp],xmm2
  01af5:    	movq   QWORD PTR [rsp+0x8],xmm4
  01afb:    	movq   QWORD PTR [rsp+0x10],xmm5
  01b01:    	movq   QWORD PTR [rsp+0x18],xmm7
  01b07: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01b0e: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01b15: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01b1c: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01b23:    	mov    rax,QWORD PTR [rbx]
  01b26:    	lea    rdi,[rsp-0x18]
  01b2b:    	mov    QWORD PTR [rdi],rax
  01b2e:    	mov    QWORD PTR [rbx],rdi
  01b31: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b3a:    	mov    QWORD PTR [rsp-0x38],rcx
  01b3f: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01b46:    	mov    QWORD PTR [rsp-0x38],rax
  01b4b: 00 	mov    rdi,0x2
  01b52: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01b59:    	mov    QWORD PTR [rsp-0x40],rax
  01b5e: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01b65:    	mov    QWORD PTR [rsp-0x48],rax
  01b6a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b73: 10 	movabs rax,0x100100000003f
  01b7d:    	mov    QWORD PTR [rsp-0x28],rax
  01b82: c8 	movabs r13,0x55c850b316a0
  01b8c:    	call   0xffff7e61
  01b91:    	lea    rdi,[rbp-0x8]
  01b95:    	mov    QWORD PTR [rbx],rdi
  01b98:    	movq   xmm2,QWORD PTR [rsp]
  01b9d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ba3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01ba9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01baf: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01bb6: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01bbd: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01bc4: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01bcb:    	add    rsp,0x40
  01bcf: c8 	movabs r13,0x55c850b2a7c0
  01bd9:    	test   rax,rax
  01bdc:    	je     0xffff48cb
:00134 %13 = @spheres: Scene[IvarId(0)]
  01be2:    	mov    rdi,QWORD PTR [rbp-0x28]
  01be6:    	cmp    WORD PTR [rdi+0x2],0x3
  01beb:    	jne    0x3b058
  01bf1:    	mov    rax,QWORD PTR [rdi+0x10]
  01bf5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00135 %14 = 1: i32
  01bfc: ff 	mov    QWORD PTR [rbp-0x98],0x3
:00136 %13 = %13.[%14]
  01c07:    	sub    rsp,0x40
  01c0b:    	movq   QWORD PTR [rsp],xmm2
  01c10:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c16:    	movq   QWORD PTR [rsp+0x10],xmm5
  01c1c:    	movq   QWORD PTR [rsp+0x18],xmm7
  01c22: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01c29: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01c30: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01c37: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01c3e: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01c45: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01c4c:    	mov    rdi,rbx
  01c4f:    	mov    rsi,r12
  01c52: c8 	movabs rax,0x55c84f4b6c00
  01c5c:    	call   rax
  01c5e:    	movq   xmm2,QWORD PTR [rsp]
  01c63:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c69:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01c6f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c75: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01c7c: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01c83: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01c8a: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01c91:    	add    rsp,0x40
  01c95: c8 	movabs r13,0x55c850b2a800
  01c9f:    	test   rax,rax
  01ca2:    	je     0xffff48cb
  01ca8: ff 	mov    QWORD PTR [rbp-0x90],rax
:00137 %14 = %11
  01caf:    	mov    rax,QWORD PTR [rbp-0x80]
  01cb3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00138 %15 = %12
  01cba: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01cc1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00139 _ = %13.call intersect(%14; 2)       [Sphere]
:00140 
  01cc8: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01ccf: 00 	test   rdi,0x7
  01cd6:    	jne    0x3b0dc
  01cdc:    	cmp    DWORD PTR [rdi+0x4],0x27
  01ce0:    	jne    0x3b0dc
  01ce6: 26 	cmp    DWORD PTR [rip+0xffffffffffff55ae],0x26        # 0xffff729b
  01ced:    	jne    0x3b0dc
  01cf3:    	sub    rsp,0x40
  01cf7:    	movq   QWORD PTR [rsp],xmm2
  01cfc:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d02:    	movq   QWORD PTR [rsp+0x10],xmm5
  01d08:    	movq   QWORD PTR [rsp+0x18],xmm7
  01d0e: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01d15: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01d1c: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01d23: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01d2a:    	mov    rax,QWORD PTR [rbx]
  01d2d:    	lea    rdi,[rsp-0x18]
  01d32:    	mov    QWORD PTR [rdi],rax
  01d35:    	mov    QWORD PTR [rbx],rdi
  01d38: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01d41:    	mov    QWORD PTR [rsp-0x38],rcx
  01d46: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01d4d:    	mov    QWORD PTR [rsp-0x38],rax
  01d52: 00 	mov    rdi,0x2
  01d59: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01d60:    	mov    QWORD PTR [rsp-0x40],rax
  01d65: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01d6c:    	mov    QWORD PTR [rsp-0x48],rax
  01d71: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01d7a: 10 	movabs rax,0x100100000003f
  01d84:    	mov    QWORD PTR [rsp-0x28],rax
  01d89: c8 	movabs r13,0x55c850b316a0
  01d93:    	call   0xffff7e61
  01d98:    	lea    rdi,[rbp-0x8]
  01d9c:    	mov    QWORD PTR [rbx],rdi
  01d9f:    	movq   xmm2,QWORD PTR [rsp]
  01da4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01daa:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01db0:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01db6: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01dbd: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01dc4: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01dcb: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01dd2:    	add    rsp,0x40
  01dd6: c8 	movabs r13,0x55c850b2a840
  01de0:    	test   rax,rax
  01de3:    	je     0xffff48cb
:00142 %13 = @spheres: Scene[IvarId(0)]
  01de9:    	mov    rdi,QWORD PTR [rbp-0x28]
  01ded:    	cmp    WORD PTR [rdi+0x2],0x3
  01df2:    	jne    0x3b14a
  01df8:    	mov    rax,QWORD PTR [rdi+0x10]
  01dfc: ff 	mov    QWORD PTR [rbp-0x90],rax
:00143 %14 = 2: i32
  01e03: ff 	mov    QWORD PTR [rbp-0x98],0x5
:00144 %13 = %13.[%14]
  01e0e:    	sub    rsp,0x40
  01e12:    	movq   QWORD PTR [rsp],xmm2
  01e17:    	movq   QWORD PTR [rsp+0x8],xmm4
  01e1d:    	movq   QWORD PTR [rsp+0x10],xmm5
  01e23:    	movq   QWORD PTR [rsp+0x18],xmm7
  01e29: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01e30: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01e37: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01e3e: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01e45: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01e4c: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01e53:    	mov    rdi,rbx
  01e56:    	mov    rsi,r12
  01e59: c8 	movabs rax,0x55c84f4b6c00
  01e63:    	call   rax
  01e65:    	movq   xmm2,QWORD PTR [rsp]
  01e6a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e70:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01e76:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01e7c: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01e83: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01e8a: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01e91: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01e98:    	add    rsp,0x40
  01e9c: c8 	movabs r13,0x55c850b2a880
  01ea6:    	test   rax,rax
  01ea9:    	je     0xffff48cb
  01eaf: ff 	mov    QWORD PTR [rbp-0x90],rax
:00145 %14 = %11
  01eb6:    	mov    rax,QWORD PTR [rbp-0x80]
  01eba: ff 	mov    QWORD PTR [rbp-0x98],rax
:00146 %15 = %12
  01ec1: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01ec8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00147 _ = %13.call intersect(%14; 2)       [Sphere]
:00148 
  01ecf: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01ed6: 00 	test   rdi,0x7
  01edd:    	jne    0x3b1ce
  01ee3:    	cmp    DWORD PTR [rdi+0x4],0x27
  01ee7:    	jne    0x3b1ce
  01eed: 26 	cmp    DWORD PTR [rip+0xffffffffffff53a7],0x26        # 0xffff729b
  01ef4:    	jne    0x3b1ce
  01efa:    	sub    rsp,0x40
  01efe:    	movq   QWORD PTR [rsp],xmm2
  01f03:    	movq   QWORD PTR [rsp+0x8],xmm4
  01f09:    	movq   QWORD PTR [rsp+0x10],xmm5
  01f0f:    	movq   QWORD PTR [rsp+0x18],xmm7
  01f15: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01f1c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01f23: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01f2a: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01f31:    	mov    rax,QWORD PTR [rbx]
  01f34:    	lea    rdi,[rsp-0x18]
  01f39:    	mov    QWORD PTR [rdi],rax
  01f3c:    	mov    QWORD PTR [rbx],rdi
  01f3f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01f48:    	mov    QWORD PTR [rsp-0x38],rcx
  01f4d: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01f54:    	mov    QWORD PTR [rsp-0x38],rax
  01f59: 00 	mov    rdi,0x2
  01f60: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01f67:    	mov    QWORD PTR [rsp-0x40],rax
  01f6c: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01f73:    	mov    QWORD PTR [rsp-0x48],rax
  01f78: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01f81: 10 	movabs rax,0x100100000003f
  01f8b:    	mov    QWORD PTR [rsp-0x28],rax
  01f90: c8 	movabs r13,0x55c850b316a0
  01f9a:    	call   0xffff7e61
  01f9f:    	lea    rdi,[rbp-0x8]
  01fa3:    	mov    QWORD PTR [rbx],rdi
  01fa6:    	movq   xmm2,QWORD PTR [rsp]
  01fab:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01fb1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01fb7:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01fbd: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01fc4: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01fcb: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01fd2: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01fd9:    	add    rsp,0x40
  01fdd: c8 	movabs r13,0x55c850b2a8c0
  01fe7:    	test   rax,rax
  01fea:    	je     0xffff48cb
:00150 %13 = @plane: Scene[IvarId(1)]
  01ff0:    	mov    rdi,QWORD PTR [rbp-0x28]
  01ff4:    	cmp    WORD PTR [rdi+0x2],0x3
  01ff9:    	jne    0x3b23c
  01fff:    	mov    rax,QWORD PTR [rdi+0x18]
  02003: ff 	mov    QWORD PTR [rbp-0x90],rax
:00151 %14 = %11
  0200a:    	mov    rax,QWORD PTR [rbp-0x80]
  0200e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00152 %15 = %12
  02015: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0201c: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00153 _ = %13.call intersect(%14; 2)       [Plane]
:00154 
  02023: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0202a: 00 	test   rdi,0x7
  02031:    	jne    0x3b2c0
  02037:    	cmp    DWORD PTR [rdi+0x4],0x29
  0203b:    	jne    0x3b2c0
  02041: 26 	cmp    DWORD PTR [rip+0xffffffffffff5253],0x26        # 0xffff729b
  02048:    	jne    0x3b2c0
  0204e:    	sub    rsp,0x40
  02052:    	movq   QWORD PTR [rsp],xmm2
  02057:    	movq   QWORD PTR [rsp+0x8],xmm4
  0205d:    	movq   QWORD PTR [rsp+0x10],xmm5
  02063:    	movq   QWORD PTR [rsp+0x18],xmm7
  02069: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02070: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02077: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0207e: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02085:    	mov    rax,QWORD PTR [rbx]
  02088:    	lea    rdi,[rsp-0x18]
  0208d:    	mov    QWORD PTR [rdi],rax
  02090:    	mov    QWORD PTR [rbx],rdi
  02093: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0209c:    	mov    QWORD PTR [rsp-0x38],rcx
  020a1: ff 	mov    rax,QWORD PTR [rbp-0x90]
  020a8:    	mov    QWORD PTR [rsp-0x38],rax
  020ad: 00 	mov    rdi,0x2
  020b4: ff 	mov    rax,QWORD PTR [rbp-0x98]
  020bb:    	mov    QWORD PTR [rsp-0x40],rax
  020c0: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  020c7:    	mov    QWORD PTR [rsp-0x48],rax
  020cc: 00 	mov    QWORD PTR [rsp-0x30],0x0
  020d5: 0e 	movabs rax,0x1000e00000041
  020df:    	mov    QWORD PTR [rsp-0x28],rax
  020e4: c8 	movabs r13,0x55c850b33540
  020ee:    	call   0xffff844e
  020f3:    	lea    rdi,[rbp-0x8]
  020f7:    	mov    QWORD PTR [rbx],rdi
  020fa:    	movq   xmm2,QWORD PTR [rsp]
  020ff:    	movq   xmm4,QWORD PTR [rsp+0x8]
  02105:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0210b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02111: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02118: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0211f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  02126: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0212d:    	add    rsp,0x40
  02131: c8 	movabs r13,0x55c850b2a920
  0213b:    	test   rax,rax
  0213e:    	je     0xffff48cb
:00156 %13 = %12.call hit()                 [Isect]
:00157 
  02144: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0214b: 00 	test   rdi,0x7
  02152:    	jne    0x3b32e
  02158:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0215c:    	jne    0x3b32e
  02162: 26 	cmp    DWORD PTR [rip+0xffffffffffff5132],0x26        # 0xffff729b
  02169:    	jne    0x3b32e
  0216f:    	mov    esi,DWORD PTR [rip+0x2d7]        # 0x244c
  02175:    	cmp    esi,0xffffffff
  02178:    	je     0x3b39c
  0217e:    	cmp    WORD PTR [rdi+0x2],0x3
  02183:    	jne    0x219c
  02189:    	cmp    esi,0x6
  0218c:    	jge    0x219c
  02192:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  02197:    	jmp    0x2216
  0219c:    	sub    rsp,0x40
  021a0:    	movq   QWORD PTR [rsp],xmm2
  021a5:    	movq   QWORD PTR [rsp+0x8],xmm4
  021ab:    	movq   QWORD PTR [rsp+0x10],xmm5
  021b1:    	movq   QWORD PTR [rsp+0x18],xmm7
  021b7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  021be: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  021c5: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  021cc: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  021d3: c8 	movabs rax,0x55c84f4d3440
  021dd:    	call   rax
  021df:    	movq   xmm2,QWORD PTR [rsp]
  021e4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  021ea:    	movq   xmm5,QWORD PTR [rsp+0x10]
  021f0:    	movq   xmm7,QWORD PTR [rsp+0x18]
  021f6: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  021fd: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02204: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0220b: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02212:    	add    rsp,0x40
  02216: ff 	mov    QWORD PTR [rbp-0x90],rax
:00159 condnotbr %13 =>:00165
  0221d: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02224:    	or     rax,0x10
  02228:    	cmp    rax,0x14
  0222c:    	je     0x22ae
:00160 %13 = dynvar(2, %6)
  02232:    	mov    rax,QWORD PTR [rbp-0x10]
  02236:    	mov    rax,QWORD PTR [rax]
  02239:    	mov    rax,QWORD PTR [rax-0x48]
  0223d: ff 	mov    QWORD PTR [rbp-0x90],rax
:00161 %14 = literal[1.0]
  02244: 00 	movq   xmm3,QWORD PTR [rip+0x204]        # 0x2450
  0224c: 00 	movabs rax,0xff80000000000002
  02256: ff 	mov    QWORD PTR [rbp-0x98],rax
:00162 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  0225d: 00 	mov    rdi,0x4
  02264: 01 	sub    DWORD PTR [rip+0x1ed],0x1        # 0x2458
  0226b:    	jne    0x3b433
  02271:    	mov    rdi,r12
  02274:    	mov    esi,DWORD PTR [rbp-0x18]
  02277:    	mov    rdx,QWORD PTR [rbp-0x28]
  0227b: c8 	movabs rax,0x55c84f4bca80
  02285:    	call   rax
  02287: 00 	mov    rdi,0x4
  0228e:    	jmp    0x3b433
:00163 dynvar(2, %6) = %13
  02293:    	mov    rax,QWORD PTR [rbp-0x10]
  02297:    	mov    rax,QWORD PTR [rax]
  0229a: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  022a1:    	mov    QWORD PTR [rax-0x48],rdi
:00164 ret %13
  022a5: ff 	mov    rax,QWORD PTR [rbp-0x90]
  022ac:    	leave  
  022ad:    	ret    
:00165 %13 = literal[0.0]
  022ae: 00 	movq   xmm3,QWORD PTR [rip+0x1aa]        # 0x2460
  022b6: 00 	movabs rax,0x8000000000000002
  022c0: ff 	mov    QWORD PTR [rbp-0x90],rax
:00166 ret %13
  022c7: ff 	mov    rax,QWORD PTR [rbp-0x90]
  022ce:    	leave  
  022cf:    	ret    
==> start whole compile: <unnamed> FuncId(71) self_class:Scene start:[00000] bytecode:0x55c850b0c5d0
<== finished compile. elapsed:23.9µs
offset:Pos(56280) code: 217 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x39039
  0002c: cmp    DWORD PTR [rdi+0x4],0x2f
  00030: jne    0x39039
:00000 %3 = dynvar(1, %3)
  00036: mov    rax,QWORD PTR [rbp-0x10]
  0003a: mov    rax,QWORD PTR [rax-0x30]
  0003e: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = literal[73]
  00042: mov    rax,0x93
  00049: mov    QWORD PTR [rbp-0x48],rax
:00002 %2 = %3.call times(&%4)              [Integer]
:00003 
  0004d: mov    rdi,QWORD PTR [rbp-0x40]
  00051: test   rdi,0x1
  00058: jne    0x75
  0005e: test   rdi,0x7
  00065: jne    0x39048
  0006b: cmp    DWORD PTR [rdi+0x4],0x6
  0006f: jne    0x39048
  00075: cmp    DWORD PTR [rip+0xffffffffffff4db7],0x26        # 0xffff4e33
  0007c: jne    0x39048
  00082: mov    r9,QWORD PTR [rbp-0x48]
  00086: mov    rdx,rdi
  00089: mov    rax,QWORD PTR [rbx]
  0008c: lea    rdi,[rsp-0x18]
  00091: mov    QWORD PTR [rdi],rax
  00094: mov    QWORD PTR [rbx],rdi
  00097: mov    QWORD PTR [rsp-0x20],0x0
  000a0: mov    QWORD PTR [rsp-0x38],rcx
  000a5: lea    rcx,[rbp-0x50]
  000a9: mov    r8,0x0
  000b0: call   0x39057
  000b5: lea    rdi,[rbp-0x8]
  000b9: mov    QWORD PTR [rbx],rdi
  000bc: movabs r13,0x55c850b0c610
  000c6: test   rax,rax
  000c9: je     0xffff2463
  000cf: mov    QWORD PTR [rbp-0x38],rax
:00005 ret %2
  000d3: mov    rax,QWORD PTR [rbp-0x38]
  000d7: leave  
  000d8: ret    
==> start whole compile: vcross FuncId(58) self_class:Vec start:[00000] bytecode:0x55c850b2eeb0
<== finished compile. elapsed:60.7µs
offset:Pos(56497) code: 2478 bytes  data: 73 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x70
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    QWORD PTR [rbp-0x50],rax
  0001f: mov    QWORD PTR [rbp-0x58],rax
  00023: mov    QWORD PTR [rbp-0x60],rax
  00027: mov    QWORD PTR [rbp-0x68],rax
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: test   rdi,0x7
  00036: jne    0x38fb0
  0003c: cmp    DWORD PTR [rdi+0x4],0x25
  00040: jne    0x38fb0
:00000 %3 = const[Vec]                      [Vec]
  00046: mov    rax,QWORD PTR [rip+0xffffffffffff4d12]        # 0xffff4d5f
  0004d: cmp    rax,QWORD PTR [rip+0x96b]        # 0x9bf
  00054: jne    0x38fbf
  0005a: mov    rax,QWORD PTR [rip+0x94e]        # 0x9af
  00061: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = @y: Vec[IvarId(1)]
  00065: mov    rdi,QWORD PTR [rbp-0x28]
  00069: cmp    WORD PTR [rdi+0x2],0x3
  0006e: jne    0x39005
  00074: mov    rax,QWORD PTR [rdi+0x18]
  00078: mov    QWORD PTR [rbp-0x48],rax
:00002 %5 = %1.call z()                     [Vec]
:00003 
  0007c: mov    rdi,QWORD PTR [rbp-0x30]
  00080: test   rdi,0x7
  00087: jne    0x3901b
  0008d: cmp    DWORD PTR [rdi+0x4],0x25
  00091: jne    0x3901b
  00097: cmp    DWORD PTR [rip+0xffffffffffff4cbc],0x26        # 0xffff4d5a
  0009e: jne    0x3901b
  000a4: mov    esi,DWORD PTR [rip+0x921]        # 0x9cb
  000aa: cmp    esi,0xffffffff
  000ad: je     0x3902a
  000b3: cmp    WORD PTR [rdi+0x2],0x3
  000b8: jne    0xd1
  000be: cmp    esi,0x6
  000c1: jge    0xd1
  000c7: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000cc: jmp    0xdd
  000d1: movabs rax,0x55c84f4d3440
  000db: call   rax
  000dd: mov    QWORD PTR [rbp-0x50],rax
:00005 %4 = %4 * %5                         [Float][Float]
  000e1: mov    rdi,QWORD PTR [rbp-0x48]
  000e5: test   rdi,0x1
  000ec: jne    0x39053
  000f2: test   rdi,0x2
  000f9: je     0x135
  000ff: xorps  xmm2,xmm2
  00102: movabs rax,0x8000000000000002
  0010c: cmp    rdi,rax
  0010f: je     0x147
  00115: mov    rax,rdi
  00118: sar    rax,0x3f
  0011c: add    rax,0x2
  00120: and    rdi,0xfffffffffffffffc
  00124: or     rdi,rax
  00127: rol    rdi,0x3d
  0012b: movq   xmm2,rdi
  00130: jmp    0x147
  00135: call   0xffff23c3
  0013a: test   rax,rax
  0013d: je     0x39053
  00143: movq   xmm2,xmm0
  00147: mov    rdi,QWORD PTR [rbp-0x50]
  0014b: test   rdi,0x1
  00152: jne    0x39062
  00158: test   rdi,0x2
  0015f: je     0x19b
  00165: xorps  xmm3,xmm3
  00168: movabs rax,0x8000000000000002
  00172: cmp    rdi,rax
  00175: je     0x1ad
  0017b: mov    rax,rdi
  0017e: sar    rax,0x3f
  00182: add    rax,0x2
  00186: and    rdi,0xfffffffffffffffc
  0018a: or     rdi,rax
  0018d: rol    rdi,0x3d
  00191: movq   xmm3,rdi
  00196: jmp    0x1ad
  0019b: call   0xffff23c3
  001a0: test   rax,rax
  001a3: je     0x39062
  001a9: movq   xmm3,xmm0
  001ad: mulsd  xmm2,xmm3
:00006 %5 = @z: Vec[IvarId(2)]
  001b1: mov    rdi,QWORD PTR [rbp-0x28]
  001b5: cmp    WORD PTR [rdi+0x2],0x3
  001ba: jne    0x39071
  001c0: mov    rax,QWORD PTR [rdi+0x20]
  001c4: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = %1.call y()                     [Vec]
:00008 
  001c8: mov    rdi,QWORD PTR [rbp-0x30]
  001cc: test   rdi,0x7
  001d3: jne    0x39099
  001d9: cmp    DWORD PTR [rdi+0x4],0x25
  001dd: jne    0x39099
  001e3: cmp    DWORD PTR [rip+0xffffffffffff4b70],0x26        # 0xffff4d5a
  001ea: jne    0x39099
  001f0: mov    esi,DWORD PTR [rip+0x7dd]        # 0x9d3
  001f6: cmp    esi,0xffffffff
  001f9: je     0x390b5
  001ff: cmp    WORD PTR [rdi+0x2],0x3
  00204: jne    0x21d
  0020a: cmp    esi,0x6
  0020d: jge    0x21d
  00213: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00218: jmp    0x23b
  0021d: sub    rsp,0x10
  00221: movq   QWORD PTR [rsp],xmm2
  00226: movabs rax,0x55c84f4d3440
  00230: call   rax
  00232: movq   xmm2,QWORD PTR [rsp]
  00237: add    rsp,0x10
  0023b: mov    QWORD PTR [rbp-0x58],rax
:00010 %5 = %5 * %6                         [Float][Float]
  0023f: mov    rdi,QWORD PTR [rbp-0x50]
  00243: test   rdi,0x1
  0024a: jne    0x390f0
  00250: test   rdi,0x2
  00257: je     0x293
  0025d: xorps  xmm3,xmm3
  00260: movabs rax,0x8000000000000002
  0026a: cmp    rdi,rax
  0026d: je     0x2a5
  00273: mov    rax,rdi
  00276: sar    rax,0x3f
  0027a: add    rax,0x2
  0027e: and    rdi,0xfffffffffffffffc
  00282: or     rdi,rax
  00285: rol    rdi,0x3d
  00289: movq   xmm3,rdi
  0028e: jmp    0x2a5
  00293: call   0xffff23c3
  00298: test   rax,rax
  0029b: je     0x390f0
  002a1: movq   xmm3,xmm0
  002a5: mov    rdi,QWORD PTR [rbp-0x58]
  002a9: test   rdi,0x1
  002b0: jne    0x3910c
  002b6: test   rdi,0x2
  002bd: je     0x2f9
  002c3: xorps  xmm4,xmm4
  002c6: movabs rax,0x8000000000000002
  002d0: cmp    rdi,rax
  002d3: je     0x30b
  002d9: mov    rax,rdi
  002dc: sar    rax,0x3f
  002e0: add    rax,0x2
  002e4: and    rdi,0xfffffffffffffffc
  002e8: or     rdi,rax
  002eb: rol    rdi,0x3d
  002ef: movq   xmm4,rdi
  002f4: jmp    0x30b
  002f9: call   0xffff23c3
  002fe: test   rax,rax
  00301: je     0x3910c
  00307: movq   xmm4,xmm0
  0030b: mulsd  xmm3,xmm4
:00011 %4 = %4 - %5                         [Float][Float]
  0030f: subsd  xmm2,xmm3
:00012 %5 = @z: Vec[IvarId(2)]
  00313: mov    rdi,QWORD PTR [rbp-0x28]
  00317: cmp    WORD PTR [rdi+0x2],0x3
  0031c: jne    0x39128
  00322: mov    rax,QWORD PTR [rdi+0x20]
  00326: mov    QWORD PTR [rbp-0x50],rax
:00013 %6 = %1.call x()                     [Vec]
:00014 
  0032a: mov    rdi,QWORD PTR [rbp-0x30]
  0032e: test   rdi,0x7
  00335: jne    0x3915c
  0033b: cmp    DWORD PTR [rdi+0x4],0x25
  0033f: jne    0x3915c
  00345: cmp    DWORD PTR [rip+0xffffffffffff4a0e],0x26        # 0xffff4d5a
  0034c: jne    0x3915c
  00352: mov    esi,DWORD PTR [rip+0x683]        # 0x9db
  00358: cmp    esi,0xffffffff
  0035b: je     0x39178
  00361: cmp    WORD PTR [rdi+0x2],0x3
  00366: jne    0x37f
  0036c: cmp    esi,0x6
  0036f: jge    0x37f
  00375: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0037a: jmp    0x39d
  0037f: sub    rsp,0x10
  00383: movq   QWORD PTR [rsp],xmm2
  00388: movabs rax,0x55c84f4d3440
  00392: call   rax
  00394: movq   xmm2,QWORD PTR [rsp]
  00399: add    rsp,0x10
  0039d: mov    QWORD PTR [rbp-0x58],rax
:00016 %5 = %5 * %6                         [Float][Float]
  003a1: mov    rdi,QWORD PTR [rbp-0x50]
  003a5: test   rdi,0x1
  003ac: jne    0x391b3
  003b2: test   rdi,0x2
  003b9: je     0x3f5
  003bf: xorps  xmm3,xmm3
  003c2: movabs rax,0x8000000000000002
  003cc: cmp    rdi,rax
  003cf: je     0x407
  003d5: mov    rax,rdi
  003d8: sar    rax,0x3f
  003dc: add    rax,0x2
  003e0: and    rdi,0xfffffffffffffffc
  003e4: or     rdi,rax
  003e7: rol    rdi,0x3d
  003eb: movq   xmm3,rdi
  003f0: jmp    0x407
  003f5: call   0xffff23c3
  003fa: test   rax,rax
  003fd: je     0x391b3
  00403: movq   xmm3,xmm0
  00407: mov    rdi,QWORD PTR [rbp-0x58]
  0040b: test   rdi,0x1
  00412: jne    0x391cf
  00418: test   rdi,0x2
  0041f: je     0x45b
  00425: xorps  xmm4,xmm4
  00428: movabs rax,0x8000000000000002
  00432: cmp    rdi,rax
  00435: je     0x46d
  0043b: mov    rax,rdi
  0043e: sar    rax,0x3f
  00442: add    rax,0x2
  00446: and    rdi,0xfffffffffffffffc
  0044a: or     rdi,rax
  0044d: rol    rdi,0x3d
  00451: movq   xmm4,rdi
  00456: jmp    0x46d
  0045b: call   0xffff23c3
  00460: test   rax,rax
  00463: je     0x391cf
  00469: movq   xmm4,xmm0
  0046d: mulsd  xmm3,xmm4
:00017 %6 = @x: Vec[IvarId(0)]
  00471: mov    rdi,QWORD PTR [rbp-0x28]
  00475: cmp    WORD PTR [rdi+0x2],0x3
  0047a: jne    0x391eb
  00480: mov    rax,QWORD PTR [rdi+0x10]
  00484: mov    QWORD PTR [rbp-0x58],rax
:00018 %7 = %1.call z()                     [Vec]
:00019 
  00488: mov    rdi,QWORD PTR [rbp-0x30]
  0048c: test   rdi,0x7
  00493: jne    0x3921f
  00499: cmp    DWORD PTR [rdi+0x4],0x25
  0049d: jne    0x3921f
  004a3: cmp    DWORD PTR [rip+0xffffffffffff48b0],0x26        # 0xffff4d5a
  004aa: jne    0x3921f
  004b0: mov    esi,DWORD PTR [rip+0x52d]        # 0x9e3
  004b6: cmp    esi,0xffffffff
  004b9: je     0x39248
  004bf: cmp    WORD PTR [rdi+0x2],0x3
  004c4: jne    0x4dd
  004ca: cmp    esi,0x6
  004cd: jge    0x4dd
  004d3: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004d8: jmp    0x507
  004dd: sub    rsp,0x10
  004e1: movq   QWORD PTR [rsp],xmm2
  004e6: movq   QWORD PTR [rsp+0x8],xmm3
  004ec: movabs rax,0x55c84f4d3440
  004f6: call   rax
  004f8: movq   xmm2,QWORD PTR [rsp]
  004fd: movq   xmm3,QWORD PTR [rsp+0x8]
  00503: add    rsp,0x10
  00507: mov    QWORD PTR [rbp-0x60],rax
:00021 %6 = %6 * %7                         [Float][Float]
  0050b: mov    rdi,QWORD PTR [rbp-0x58]
  0050f: test   rdi,0x1
  00516: jne    0x3928f
  0051c: test   rdi,0x2
  00523: je     0x55f
  00529: xorps  xmm4,xmm4
  0052c: movabs rax,0x8000000000000002
  00536: cmp    rdi,rax
  00539: je     0x571
  0053f: mov    rax,rdi
  00542: sar    rax,0x3f
  00546: add    rax,0x2
  0054a: and    rdi,0xfffffffffffffffc
  0054e: or     rdi,rax
  00551: rol    rdi,0x3d
  00555: movq   xmm4,rdi
  0055a: jmp    0x571
  0055f: call   0xffff23c3
  00564: test   rax,rax
  00567: je     0x3928f
  0056d: movq   xmm4,xmm0
  00571: mov    rdi,QWORD PTR [rbp-0x60]
  00575: test   rdi,0x1
  0057c: jne    0x392b8
  00582: test   rdi,0x2
  00589: je     0x5c5
  0058f: xorps  xmm5,xmm5
  00592: movabs rax,0x8000000000000002
  0059c: cmp    rdi,rax
  0059f: je     0x5d7
  005a5: mov    rax,rdi
  005a8: sar    rax,0x3f
  005ac: add    rax,0x2
  005b0: and    rdi,0xfffffffffffffffc
  005b4: or     rdi,rax
  005b7: rol    rdi,0x3d
  005bb: movq   xmm5,rdi
  005c0: jmp    0x5d7
  005c5: call   0xffff23c3
  005ca: test   rax,rax
  005cd: je     0x392b8
  005d3: movq   xmm5,xmm0
  005d7: mulsd  xmm4,xmm5
:00022 %5 = %5 - %6                         [Float][Float]
  005db: subsd  xmm3,xmm4
:00023 %6 = @x: Vec[IvarId(0)]
  005df: mov    rdi,QWORD PTR [rbp-0x28]
  005e3: cmp    WORD PTR [rdi+0x2],0x3
  005e8: jne    0x392e1
  005ee: mov    rax,QWORD PTR [rdi+0x10]
  005f2: mov    QWORD PTR [rbp-0x58],rax
:00024 %7 = %1.call y()                     [Vec]
:00025 
  005f6: mov    rdi,QWORD PTR [rbp-0x30]
  005fa: test   rdi,0x7
  00601: jne    0x39321
  00607: cmp    DWORD PTR [rdi+0x4],0x25
  0060b: jne    0x39321
  00611: cmp    DWORD PTR [rip+0xffffffffffff4742],0x26        # 0xffff4d5a
  00618: jne    0x39321
  0061e: mov    esi,DWORD PTR [rip+0x3c7]        # 0x9eb
  00624: cmp    esi,0xffffffff
  00627: je     0x3934a
  0062d: cmp    WORD PTR [rdi+0x2],0x3
  00632: jne    0x64b
  00638: cmp    esi,0x6
  0063b: jge    0x64b
  00641: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00646: jmp    0x675
  0064b: sub    rsp,0x10
  0064f: movq   QWORD PTR [rsp],xmm2
  00654: movq   QWORD PTR [rsp+0x8],xmm3
  0065a: movabs rax,0x55c84f4d3440
  00664: call   rax
  00666: movq   xmm2,QWORD PTR [rsp]
  0066b: movq   xmm3,QWORD PTR [rsp+0x8]
  00671: add    rsp,0x10
  00675: mov    QWORD PTR [rbp-0x60],rax
:00027 %6 = %6 * %7                         [Float][Float]
  00679: mov    rdi,QWORD PTR [rbp-0x58]
  0067d: test   rdi,0x1
  00684: jne    0x39391
  0068a: test   rdi,0x2
  00691: je     0x6cd
  00697: xorps  xmm4,xmm4
  0069a: movabs rax,0x8000000000000002
  006a4: cmp    rdi,rax
  006a7: je     0x6df
  006ad: mov    rax,rdi
  006b0: sar    rax,0x3f
  006b4: add    rax,0x2
  006b8: and    rdi,0xfffffffffffffffc
  006bc: or     rdi,rax
  006bf: rol    rdi,0x3d
  006c3: movq   xmm4,rdi
  006c8: jmp    0x6df
  006cd: call   0xffff23c3
  006d2: test   rax,rax
  006d5: je     0x39391
  006db: movq   xmm4,xmm0
  006df: mov    rdi,QWORD PTR [rbp-0x60]
  006e3: test   rdi,0x1
  006ea: jne    0x393ba
  006f0: test   rdi,0x2
  006f7: je     0x733
  006fd: xorps  xmm5,xmm5
  00700: movabs rax,0x8000000000000002
  0070a: cmp    rdi,rax
  0070d: je     0x745
  00713: mov    rax,rdi
  00716: sar    rax,0x3f
  0071a: add    rax,0x2
  0071e: and    rdi,0xfffffffffffffffc
  00722: or     rdi,rax
  00725: rol    rdi,0x3d
  00729: movq   xmm5,rdi
  0072e: jmp    0x745
  00733: call   0xffff23c3
  00738: test   rax,rax
  0073b: je     0x393ba
  00741: movq   xmm5,xmm0
  00745: mulsd  xmm4,xmm5
:00028 %7 = @y: Vec[IvarId(1)]
  00749: mov    rdi,QWORD PTR [rbp-0x28]
  0074d: cmp    WORD PTR [rdi+0x2],0x3
  00752: jne    0x393e3
  00758: mov    rax,QWORD PTR [rdi+0x18]
  0075c: mov    QWORD PTR [rbp-0x60],rax
:00029 %8 = %1.call x()                     [Vec]
:00030 
  00760: mov    rdi,QWORD PTR [rbp-0x30]
  00764: test   rdi,0x7
  0076b: jne    0x39423
  00771: cmp    DWORD PTR [rdi+0x4],0x25
  00775: jne    0x39423
  0077b: cmp    DWORD PTR [rip+0xffffffffffff45d8],0x26        # 0xffff4d5a
  00782: jne    0x39423
  00788: mov    esi,DWORD PTR [rip+0x265]        # 0x9f3
  0078e: cmp    esi,0xffffffff
  00791: je     0x39459
  00797: cmp    WORD PTR [rdi+0x2],0x3
  0079c: jne    0x7b5
  007a2: cmp    esi,0x6
  007a5: jge    0x7b5
  007ab: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007b0: jmp    0x7eb
  007b5: sub    rsp,0x20
  007b9: movq   QWORD PTR [rsp],xmm2
  007be: movq   QWORD PTR [rsp+0x8],xmm3
  007c4: movq   QWORD PTR [rsp+0x10],xmm4
  007ca: movabs rax,0x55c84f4d3440
  007d4: call   rax
  007d6: movq   xmm2,QWORD PTR [rsp]
  007db: movq   xmm3,QWORD PTR [rsp+0x8]
  007e1: movq   xmm4,QWORD PTR [rsp+0x10]
  007e7: add    rsp,0x20
  007eb: mov    QWORD PTR [rbp-0x68],rax
:00032 %7 = %7 * %8                         [Float][Float]
  007ef: mov    rdi,QWORD PTR [rbp-0x60]
  007f3: test   rdi,0x1
  007fa: jne    0x394ac
  00800: test   rdi,0x2
  00807: je     0x843
  0080d: xorps  xmm5,xmm5
  00810: movabs rax,0x8000000000000002
  0081a: cmp    rdi,rax
  0081d: je     0x855
  00823: mov    rax,rdi
  00826: sar    rax,0x3f
  0082a: add    rax,0x2
  0082e: and    rdi,0xfffffffffffffffc
  00832: or     rdi,rax
  00835: rol    rdi,0x3d
  00839: movq   xmm5,rdi
  0083e: jmp    0x855
  00843: call   0xffff23c3
  00848: test   rax,rax
  0084b: je     0x394ac
  00851: movq   xmm5,xmm0
  00855: mov    rdi,QWORD PTR [rbp-0x68]
  00859: test   rdi,0x1
  00860: jne    0x394e2
  00866: test   rdi,0x2
  0086d: je     0x8a9
  00873: xorps  xmm6,xmm6
  00876: movabs rax,0x8000000000000002
  00880: cmp    rdi,rax
  00883: je     0x8bb
  00889: mov    rax,rdi
  0088c: sar    rax,0x3f
  00890: add    rax,0x2
  00894: and    rdi,0xfffffffffffffffc
  00898: or     rdi,rax
  0089b: rol    rdi,0x3d
  0089f: movq   xmm6,rdi
  008a4: jmp    0x8bb
  008a9: call   0xffff23c3
  008ae: test   rax,rax
  008b1: je     0x394e2
  008b7: movq   xmm6,xmm0
  008bb: mulsd  xmm5,xmm6
:00033 %6 = %6 - %7                         [Float][Float]
  008bf: subsd  xmm4,xmm5
:00034 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00035 
  008c3: movq   xmm0,xmm2
  008c7: call   0xffff24b6
  008cc: mov    QWORD PTR [rbp-0x48],rax
  008d0: movq   xmm0,xmm3
  008d4: call   0xffff24b6
  008d9: mov    QWORD PTR [rbp-0x50],rax
  008dd: movq   xmm0,xmm4
  008e1: call   0xffff24b6
  008e6: mov    QWORD PTR [rbp-0x58],rax
  008ea: mov    rdi,QWORD PTR [rbp-0x40]
  008ee: test   rdi,0x7
  008f5: jne    0x39518
  008fb: cmp    DWORD PTR [rdi+0x4],0x26
  008ff: jne    0x39518
  00905: cmp    DWORD PTR [rip+0xffffffffffff444e],0x26        # 0xffff4d5a
  0090c: jne    0x39518
  00912: mov    r9,0x0
  00919: sub    rsp,0x30
  0091d: movq   QWORD PTR [rsp],xmm2
  00922: movq   QWORD PTR [rsp+0x8],xmm3
  00928: movq   QWORD PTR [rsp+0x10],xmm4
  0092e: movq   QWORD PTR [rsp+0x18],xmm5
  00934: movq   QWORD PTR [rsp+0x20],xmm6
  0093a: mov    rdx,rdi
  0093d: mov    rax,QWORD PTR [rbx]
  00940: lea    rdi,[rsp-0x18]
  00945: mov    QWORD PTR [rdi],rax
  00948: mov    QWORD PTR [rbx],rdi
  0094b: mov    QWORD PTR [rsp-0x20],0x0
  00954: mov    QWORD PTR [rsp-0x38],rcx
  00959: lea    rcx,[rbp-0x48]
  0095d: mov    r8,0x3
  00964: call   0x39534
  00969: lea    rdi,[rbp-0x8]
  0096d: mov    QWORD PTR [rbx],rdi
  00970: movq   xmm2,QWORD PTR [rsp]
  00975: movq   xmm3,QWORD PTR [rsp+0x8]
  0097b: movq   xmm4,QWORD PTR [rsp+0x10]
  00981: movq   xmm5,QWORD PTR [rsp+0x18]
  00987: movq   xmm6,QWORD PTR [rsp+0x20]
  0098d: add    rsp,0x30
  00991: movabs r13,0x55c850b2f0f0
  0099b: test   rax,rax
  0099e: je     0xffff238a
  009a4: mov    QWORD PTR [rbp-0x38],rax
:00037 ret %2
  009a8: mov    rax,QWORD PTR [rbp-0x38]
  009ac: leave  
  009ad: ret    
==> start whole compile: <unnamed> FuncId(76) self_class:Scene start:[00000] bytecode:0x55c850b77c10
<== finished compile. elapsed:160µs
offset:Pos(59048) code: 9029 bytes  data: 347 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xd0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00064: ff 	mov    QWORD PTR [rbp-0xb8],rax
  0006b: ff 	mov    QWORD PTR [rbp-0xc0],rax
  00072:    	mov    rdi,QWORD PTR [rbp-0x28]
  00076: 00 	test   rdi,0x7
  0007d:    	jne    0x38b6f
  00083:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00087:    	jne    0x38b6f
:00000 %14 = dynvar(4, %4)
  0008d:    	mov    rax,QWORD PTR [rbp-0x10]
  00091:    	mov    rax,QWORD PTR [rax]
  00094:    	mov    rax,QWORD PTR [rax]
  00097:    	mov    rax,QWORD PTR [rax]
  0009a:    	mov    rax,QWORD PTR [rax-0x38]
  0009e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00001 %14 = %14 + 1: i16                   [Integer][Integer]
  000a5: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000ac: 00 	test   rdi,0x1
  000b3:    	je     0x38b7e
  000b9:    	add    rdi,0x2
  000bd:    	jo     0x38b7e
  000c3: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00002 dynvar(4, %4) = %14
  000ca:    	mov    rax,QWORD PTR [rbp-0x10]
  000ce:    	mov    rax,QWORD PTR [rax]
  000d1:    	mov    rax,QWORD PTR [rax]
  000d4:    	mov    rax,QWORD PTR [rax]
  000d7: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000de:    	mov    QWORD PTR [rax-0x38],rdi
:00003 %14 = dynvar(4, %1)
  000e2:    	mov    rax,QWORD PTR [rbp-0x10]
  000e6:    	mov    rax,QWORD PTR [rax]
  000e9:    	mov    rax,QWORD PTR [rax]
  000ec:    	mov    rax,QWORD PTR [rax]
  000ef:    	mov    rax,QWORD PTR [rax-0x20]
  000f3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00004 %2 = %14.call to_f()                 [Integer]
:00005 
  000fa: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00101: 00 	test   rdi,0x1
  00108:    	jne    0x125
  0010e: 00 	test   rdi,0x7
  00115:    	jne    0x38b8d
  0011b:    	cmp    DWORD PTR [rdi+0x4],0x6
  0011f:    	jne    0x38b8d
  00125: 26 	cmp    DWORD PTR [rip+0xffffffffffff4237],0x26        # 0xffff4363
  0012c:    	jne    0x38b8d
  00132:    	sar    rdi,1
  00135:    	cvtsi2sd xmm2,rdi
:00007 %14 = dynvar(4, %2)
  0013a:    	mov    rax,QWORD PTR [rbp-0x10]
  0013e:    	mov    rax,QWORD PTR [rax]
  00141:    	mov    rax,QWORD PTR [rax]
  00144:    	mov    rax,QWORD PTR [rax]
  00147:    	mov    rax,QWORD PTR [rax-0x28]
  0014b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00008 %3 = %14.call to_f()                 [Integer]
:00009 
  00152: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00159: 00 	test   rdi,0x1
  00160:    	jne    0x17d
  00166: 00 	test   rdi,0x7
  0016d:    	jne    0x38b9c
  00173:    	cmp    DWORD PTR [rdi+0x4],0x6
  00177:    	jne    0x38b9c
  0017d: 26 	cmp    DWORD PTR [rip+0xffffffffffff41df],0x26        # 0xffff4363
  00184:    	jne    0x38b9c
  0018a:    	sar    rdi,1
  0018d:    	cvtsi2sd xmm3,rdi
:00011 %14 = dynvar(2, %1)
  00192:    	mov    rax,QWORD PTR [rbp-0x10]
  00196:    	mov    rax,QWORD PTR [rax]
  00199:    	mov    rax,QWORD PTR [rax-0x20]
  0019d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %4 = %14.call to_f()                 [Integer]
:00013 
  001a4: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001ab: 00 	test   rdi,0x1
  001b2:    	jne    0x1cf
  001b8: 00 	test   rdi,0x7
  001bf:    	jne    0x38bb8
  001c5:    	cmp    DWORD PTR [rdi+0x4],0x6
  001c9:    	jne    0x38bb8
  001cf: 26 	cmp    DWORD PTR [rip+0xffffffffffff418d],0x26        # 0xffff4363
  001d6:    	jne    0x38bb8
  001dc:    	sar    rdi,1
  001df:    	cvtsi2sd xmm4,rdi
:00015 %14 = dynvar(3, %1)
  001e4:    	mov    rax,QWORD PTR [rbp-0x10]
  001e8:    	mov    rax,QWORD PTR [rax]
  001eb:    	mov    rax,QWORD PTR [rax]
  001ee:    	mov    rax,QWORD PTR [rax-0x20]
  001f2: ff 	mov    QWORD PTR [rbp-0x98],rax
:00016 %5 = %14.call to_f()                 [Integer]
:00017 
  001f9: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00200: 00 	test   rdi,0x1
  00207:    	jne    0x224
  0020d: 00 	test   rdi,0x7
  00214:    	jne    0x38be1
  0021a:    	cmp    DWORD PTR [rdi+0x4],0x6
  0021e:    	jne    0x38be1
  00224: 26 	cmp    DWORD PTR [rip+0xffffffffffff4138],0x26        # 0xffff4363
  0022b:    	jne    0x38be1
  00231:    	sar    rdi,1
  00234:    	cvtsi2sd xmm5,rdi
:00019 %6 = %1.call to_f()                  [Integer]
:00020 
  00239:    	mov    rdi,QWORD PTR [rbp-0x30]
  0023d: 00 	test   rdi,0x1
  00244:    	jne    0x261
  0024a: 00 	test   rdi,0x7
  00251:    	jne    0x38c17
  00257:    	cmp    DWORD PTR [rdi+0x4],0x6
  0025b:    	jne    0x38c17
  00261: 26 	cmp    DWORD PTR [rip+0xffffffffffff40fb],0x26        # 0xffff4363
  00268:    	jne    0x38c17
  0026e:    	sar    rdi,1
  00271:    	cvtsi2sd xmm6,rdi
:00022 %14 = dynvar(1, %1)
  00276:    	mov    rax,QWORD PTR [rbp-0x10]
  0027a:    	mov    rax,QWORD PTR [rax-0x20]
  0027e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00023 %7 = %14.call to_f()                 [Integer]
:00024 
  00285: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0028c: 00 	test   rdi,0x1
  00293:    	jne    0x2b0
  00299: 00 	test   rdi,0x7
  002a0:    	jne    0x38c5a
  002a6:    	cmp    DWORD PTR [rdi+0x4],0x6
  002aa:    	jne    0x38c5a
  002b0: 26 	cmp    DWORD PTR [rip+0xffffffffffff40ac],0x26        # 0xffff4363
  002b7:    	jne    0x38c5a
  002bd:    	sar    rdi,1
  002c0:    	cvtsi2sd xmm7,rdi
:00026 %14 = dynvar(4, %5)
  002c5:    	mov    rax,QWORD PTR [rbp-0x10]
  002c9:    	mov    rax,QWORD PTR [rax]
  002cc:    	mov    rax,QWORD PTR [rax]
  002cf:    	mov    rax,QWORD PTR [rax]
  002d2:    	mov    rax,QWORD PTR [rax-0x40]
  002d6: ff 	mov    QWORD PTR [rbp-0x98],rax
:00027 %14 = %6 / %14                       [Float][Float]
  002dd: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  002e4: 00 	test   rdi,0x1
  002eb:    	jne    0x38caa
  002f1: 00 	test   rdi,0x2
  002f8:    	je     0x335
  002fe:    	xorps  xmm8,xmm8
  00302: 00 	movabs rax,0x8000000000000002
  0030c:    	cmp    rdi,rax
  0030f:    	je     0x348
  00315:    	mov    rax,rdi
  00318:    	sar    rax,0x3f
  0031c:    	add    rax,0x2
  00320:    	and    rdi,0xfffffffffffffffc
  00324:    	or     rdi,rax
  00327:    	rol    rdi,0x3d
  0032b:    	movq   xmm8,rdi
  00330:    	jmp    0x348
  00335:    	call   0xffff19cc
  0033a:    	test   rax,rax
  0033d:    	je     0x38caa
  00343:    	movq   xmm8,xmm0
  00348:    	movq   rax,xmm8
  0034d:    	test   rax,rax
  00350:    	je     0xffff19b8
  00356:    	movq   xmm0,xmm6
  0035a:    	divsd  xmm0,xmm8
  0035f:    	movq   xmm8,xmm0
:00028 %14 = %4 + %14                       [Float][Float]
  00364:    	addsd  xmm8,xmm4
:00029 %15 = literal[2.0]
  00369: 1f 	movq   xmm9,QWORD PTR [rip+0x1fd6]        # 0x2348
  00372: 00 	mov    rax,0x2
  00379: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00030 %15 = %2 / %15                       [Float][Float]
  00380:    	movq   rax,xmm9
  00385:    	test   rax,rax
  00388:    	je     0xffff19b8
  0038e:    	movq   xmm0,xmm2
  00392:    	divsd  xmm0,xmm9
  00397:    	movq   xmm9,xmm0
:00031 %14 = %14 - %15                      [Float][Float]
  0039c:    	subsd  xmm8,xmm9
:00032 %15 = literal[2.0]
  003a1: 1f 	movq   xmm9,QWORD PTR [rip+0x1fae]        # 0x2358
  003aa: 00 	mov    rax,0x2
  003b1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00033 %15 = %2 / %15                       [Float][Float]
  003b8:    	movq   rax,xmm9
  003bd:    	test   rax,rax
  003c0:    	je     0xffff19b8
  003c6:    	movq   xmm0,xmm2
  003ca:    	divsd  xmm0,xmm9
  003cf:    	movq   xmm9,xmm0
:00034 %8 = %14 / %15                       [Float][Float]
  003d4:    	movq   xmm10,xmm8
  003d9:    	movq   rax,xmm9
  003de:    	test   rax,rax
  003e1:    	je     0xffff19b8
  003e7:    	divsd  xmm10,xmm9
:00035 %14 = dynvar(4, %5)
  003ec:    	mov    rax,QWORD PTR [rbp-0x10]
  003f0:    	mov    rax,QWORD PTR [rax]
  003f3:    	mov    rax,QWORD PTR [rax]
  003f6:    	mov    rax,QWORD PTR [rax]
  003f9:    	mov    rax,QWORD PTR [rax-0x40]
  003fd: ff 	mov    QWORD PTR [rbp-0x98],rax
:00036 %14 = %7 / %14                       [Float][Float]
  00404: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0040b: 00 	test   rdi,0x1
  00412:    	jne    0x38d07
  00418: 00 	test   rdi,0x2
  0041f:    	je     0x45c
  00425:    	xorps  xmm8,xmm8
  00429: 00 	movabs rax,0x8000000000000002
  00433:    	cmp    rdi,rax
  00436:    	je     0x46f
  0043c:    	mov    rax,rdi
  0043f:    	sar    rax,0x3f
  00443:    	add    rax,0x2
  00447:    	and    rdi,0xfffffffffffffffc
  0044b:    	or     rdi,rax
  0044e:    	rol    rdi,0x3d
  00452:    	movq   xmm8,rdi
  00457:    	jmp    0x46f
  0045c:    	call   0xffff19cc
  00461:    	test   rax,rax
  00464:    	je     0x38d07
  0046a:    	movq   xmm8,xmm0
  0046f:    	movq   rax,xmm8
  00474:    	test   rax,rax
  00477:    	je     0xffff19b8
  0047d:    	movq   xmm0,xmm7
  00481:    	divsd  xmm0,xmm8
  00486:    	movq   xmm8,xmm0
:00037 %14 = %5 + %14                       [Float][Float]
  0048b:    	addsd  xmm8,xmm5
:00038 %15 = literal[2.0]
  00490: 1e 	movq   xmm9,QWORD PTR [rip+0x1ecf]        # 0x2368
  00499: 00 	mov    rax,0x2
  004a0: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00039 %15 = %3 / %15                       [Float][Float]
  004a7:    	movq   rax,xmm9
  004ac:    	test   rax,rax
  004af:    	je     0xffff19b8
  004b5:    	movq   xmm0,xmm3
  004b9:    	divsd  xmm0,xmm9
  004be:    	movq   xmm9,xmm0
:00040 %14 = %14 - %15                      [Float][Float]
  004c3:    	subsd  xmm8,xmm9
:00041 %14 = neg %14                        [Float]
  004c8: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1ea8]        # 0x2378
:00042 %15 = literal[2.0]
  004d0: 1e 	movq   xmm9,QWORD PTR [rip+0x1eaf]        # 0x2388
  004d9: 00 	mov    rax,0x2
  004e0: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00043 %15 = %3 / %15                       [Float][Float]
  004e7:    	movq   rax,xmm9
  004ec:    	test   rax,rax
  004ef:    	je     0xffff19b8
  004f5:    	movq   xmm0,xmm3
  004f9:    	divsd  xmm0,xmm9
  004fe:    	movq   xmm9,xmm0
:00044 %9 = %14 / %15                       [Float][Float]
  00503:    	movq   xmm11,xmm8
  00508:    	movq   rax,xmm9
  0050d:    	test   rax,rax
  00510:    	je     0xffff19b8
  00516:    	divsd  xmm11,xmm9
:00045 %15 = const[Vec]                     [Vec]
  0051b: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3e46]        # 0xffff4368
  00522: 00 	cmp    rax,QWORD PTR [rip+0x1e7f]        # 0x23a8
  00529:    	jne    0x38d83
  0052f: 00 	mov    rax,QWORD PTR [rip+0x1e62]        # 0x2398
  00536: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00046 %16 = %8
:00047 %17 = %9
:00048 %18 = literal[-1.0]
  0053d: 1e 	movq   xmm9,QWORD PTR [rip+0x1e72]        # 0x23b8
  00546: 00 	movabs rax,0xff80000000000006
  00550: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00049 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
:00050 
  00557:    	movq   xmm0,xmm10
  0055c:    	call   0xffff1abf
  00561: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00568:    	movq   xmm0,xmm11
  0056d:    	call   0xffff1abf
  00572: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00579: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00580: 00 	test   rdi,0x7
  00587:    	jne    0x38e41
  0058d:    	cmp    DWORD PTR [rdi+0x4],0x26
  00591:    	jne    0x38e41
  00597: 26 	cmp    DWORD PTR [rip+0xffffffffffff3dc5],0x26        # 0xffff4363
  0059e:    	jne    0x38e41
  005a4: 00 	mov    r9,0x0
  005ab:    	sub    rsp,0x50
  005af:    	movq   QWORD PTR [rsp],xmm2
  005b4:    	movq   QWORD PTR [rsp+0x8],xmm3
  005ba:    	movq   QWORD PTR [rsp+0x10],xmm4
  005c0:    	movq   QWORD PTR [rsp+0x18],xmm5
  005c6:    	movq   QWORD PTR [rsp+0x20],xmm6
  005cc:    	movq   QWORD PTR [rsp+0x28],xmm7
  005d2: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  005d9: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  005e0: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  005e7:    	mov    rdx,rdi
  005ea:    	mov    rax,QWORD PTR [rbx]
  005ed:    	lea    rdi,[rsp-0x18]
  005f2:    	mov    QWORD PTR [rdi],rax
  005f5:    	mov    QWORD PTR [rbx],rdi
  005f8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00601:    	mov    QWORD PTR [rsp-0x38],rcx
  00606: ff 	lea    rcx,[rbp-0xa8]
  0060d: 00 	mov    r8,0x3
  00614:    	call   0x38eba
  00619:    	lea    rdi,[rbp-0x8]
  0061d:    	mov    QWORD PTR [rbx],rdi
  00620:    	movq   xmm2,QWORD PTR [rsp]
  00625:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0062b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00631:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00637:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0063d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00643: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0064a: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00651: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00658:    	add    rsp,0x50
  0065c: c8 	movabs r13,0x55c850b77f40
  00666:    	test   rax,rax
  00669:    	je     0xffff1993
  0066f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00052 %10 = %14.call vnormalize()          [Vec]
:00053 
  00676: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0067d: 00 	test   rdi,0x7
  00684:    	jne    0x38eec
  0068a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0068e:    	jne    0x38eec
  00694: 26 	cmp    DWORD PTR [rip+0xffffffffffff3cc8],0x26        # 0xffff4363
  0069b:    	jne    0x38eec
  006a1:    	sub    rsp,0x50
  006a5:    	movq   QWORD PTR [rsp],xmm2
  006aa:    	movq   QWORD PTR [rsp+0x8],xmm3
  006b0:    	movq   QWORD PTR [rsp+0x10],xmm4
  006b6:    	movq   QWORD PTR [rsp+0x18],xmm5
  006bc:    	movq   QWORD PTR [rsp+0x20],xmm6
  006c2:    	movq   QWORD PTR [rsp+0x28],xmm7
  006c8: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  006cf: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  006d6: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  006dd:    	mov    rax,QWORD PTR [rbx]
  006e0:    	lea    rdi,[rsp-0x18]
  006e5:    	mov    QWORD PTR [rdi],rax
  006e8:    	mov    QWORD PTR [rbx],rdi
  006eb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  006f4:    	mov    QWORD PTR [rsp-0x38],rcx
  006f9: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00700:    	mov    QWORD PTR [rsp-0x38],rax
  00705: 00 	mov    rdi,0x0
  0070c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00715: 07 	movabs rax,0x70000003d
  0071f:    	mov    QWORD PTR [rsp-0x28],rax
  00724: c8 	movabs r13,0x55c850b416a0
  0072e:    	call   0xffff4c21
  00733:    	lea    rdi,[rbp-0x8]
  00737:    	mov    QWORD PTR [rbx],rdi
  0073a:    	movq   xmm2,QWORD PTR [rsp]
  0073f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00745:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0074b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00751:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00757:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0075d: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00764: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0076b: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00772:    	add    rsp,0x50
  00776: c8 	movabs r13,0x55c850b77f70
  00780:    	test   rax,rax
  00783:    	je     0xffff1993
  00789:    	mov    QWORD PTR [rbp-0x78],rax
:00055 %14 = const[Ray]                     [Ray]
  0078d: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3bd4]        # 0xffff4368
  00794: 00 	cmp    rax,QWORD PTR [rip+0x1c3d]        # 0x23d8
  0079b:    	jne    0x38f65
  007a1: 00 	mov    rax,QWORD PTR [rip+0x1c20]        # 0x23c8
  007a8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00056 %16 = const[Vec]                     [Vec]
  007af: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3bb2]        # 0xffff4368
  007b6: 00 	cmp    rax,QWORD PTR [rip+0x1c3b]        # 0x23f8
  007bd:    	jne    0x39023
  007c3: 00 	mov    rax,QWORD PTR [rip+0x1c1e]        # 0x23e8
  007ca: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00057 %17 = literal[0.0]
  007d1: 1c 	movq   xmm8,QWORD PTR [rip+0x1c2e]        # 0x2408
  007da: 00 	movabs rax,0x8000000000000002
  007e4: ff 	mov    QWORD PTR [rbp-0xb0],rax
:00058 %18 = literal[0.0]
  007eb: 1c 	movq   xmm9,QWORD PTR [rip+0x1c24]        # 0x2418
  007f4: 00 	movabs rax,0x8000000000000002
  007fe: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00059 %19 = literal[0.0]
  00805: 1c 	movq   xmm12,QWORD PTR [rip+0x1c1a]        # 0x2428
  0080e: 00 	movabs rax,0x8000000000000002
  00818: ff 	mov    QWORD PTR [rbp-0xc0],rax
:00060 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
:00061 
  0081f: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  00826: 00 	test   rdi,0x7
  0082d:    	jne    0x390e1
  00833:    	cmp    DWORD PTR [rdi+0x4],0x26
  00837:    	jne    0x390e1
  0083d: 26 	cmp    DWORD PTR [rip+0xffffffffffff3b1f],0x26        # 0xffff4363
  00844:    	jne    0x390e1
  0084a: 00 	mov    r9,0x0
  00851:    	sub    rsp,0x60
  00855:    	movq   QWORD PTR [rsp],xmm2
  0085a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00860:    	movq   QWORD PTR [rsp+0x10],xmm4
  00866:    	movq   QWORD PTR [rsp+0x18],xmm5
  0086c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00872:    	movq   QWORD PTR [rsp+0x28],xmm7
  00878: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0087f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00886: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0088d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00894: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0089b:    	mov    rdx,rdi
  0089e:    	mov    rax,QWORD PTR [rbx]
  008a1:    	lea    rdi,[rsp-0x18]
  008a6:    	mov    QWORD PTR [rdi],rax
  008a9:    	mov    QWORD PTR [rbx],rdi
  008ac: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008b5:    	mov    QWORD PTR [rsp-0x38],rcx
  008ba: ff 	lea    rcx,[rbp-0xb0]
  008c1: 00 	mov    r8,0x3
  008c8:    	call   0x3915a
  008cd:    	lea    rdi,[rbp-0x8]
  008d1:    	mov    QWORD PTR [rbx],rdi
  008d4:    	movq   xmm2,QWORD PTR [rsp]
  008d9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008df:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008e5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008eb:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008f1:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008f7: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008fe: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00905: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0090c: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00913: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0091a:    	add    rsp,0x60
  0091e: c8 	movabs r13,0x55c850b77ff0
  00928:    	test   rax,rax
  0092b:    	je     0xffff1993
  00931: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00063 %16 = %10
  00938:    	mov    rax,QWORD PTR [rbp-0x78]
  0093c: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00064 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
:00065 
  00943: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0094a: 00 	test   rdi,0x7
  00951:    	jne    0x3918c
  00957:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0095b:    	jne    0x3918c
  00961: 26 	cmp    DWORD PTR [rip+0xffffffffffff39fb],0x26        # 0xffff4363
  00968:    	jne    0x3918c
  0096e: 00 	mov    r9,0x0
  00975:    	sub    rsp,0x60
  00979:    	movq   QWORD PTR [rsp],xmm2
  0097e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00984:    	movq   QWORD PTR [rsp+0x10],xmm4
  0098a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00990:    	movq   QWORD PTR [rsp+0x20],xmm6
  00996:    	movq   QWORD PTR [rsp+0x28],xmm7
  0099c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  009a3: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  009aa: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  009b1: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  009b8: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  009bf:    	mov    rdx,rdi
  009c2:    	mov    rax,QWORD PTR [rbx]
  009c5:    	lea    rdi,[rsp-0x18]
  009ca:    	mov    QWORD PTR [rdi],rax
  009cd:    	mov    QWORD PTR [rbx],rdi
  009d0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009d9:    	mov    QWORD PTR [rsp-0x38],rcx
  009de: ff 	lea    rcx,[rbp-0xa0]
  009e5: 00 	mov    r8,0x2
  009ec:    	call   0x39205
  009f1:    	lea    rdi,[rbp-0x8]
  009f5:    	mov    QWORD PTR [rbx],rdi
  009f8:    	movq   xmm2,QWORD PTR [rsp]
  009fd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a03:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a09:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a0f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00a15:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00a1b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00a22: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00a29: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00a30: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00a37: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a3e:    	add    rsp,0x60
  00a42: c8 	movabs r13,0x55c850b78030
  00a4c:    	test   rax,rax
  00a4f:    	je     0xffff1993
  00a55:    	mov    QWORD PTR [rbp-0x80],rax
:00067 %14 = const[Isect]                   [Isect]
  00a59: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3908]        # 0xffff4368
  00a60: 00 	cmp    rax,QWORD PTR [rip+0x19e1]        # 0x2448
  00a67:    	jne    0x39237
  00a6d: 00 	mov    rax,QWORD PTR [rip+0x19c4]        # 0x2438
  00a74: ff 	mov    QWORD PTR [rbp-0x98],rax
:00068 %12 = %14.call new()                 [#<Class:Isect>]
:00069 
  00a7b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a82: 00 	test   rdi,0x7
  00a89:    	jne    0x39311
  00a8f:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00a93:    	jne    0x39311
  00a99: 26 	cmp    DWORD PTR [rip+0xffffffffffff38c3],0x26        # 0xffff4363
  00aa0:    	jne    0x39311
  00aa6: 00 	mov    r9,0x0
  00aad:    	sub    rsp,0x60
  00ab1:    	movq   QWORD PTR [rsp],xmm2
  00ab6:    	movq   QWORD PTR [rsp+0x8],xmm3
  00abc:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ac2:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ac8:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ace:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ad4: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00adb: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00ae2: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ae9: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00af0: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00af7:    	mov    rdx,rdi
  00afa:    	mov    rax,QWORD PTR [rbx]
  00afd:    	lea    rdi,[rsp-0x18]
  00b02:    	mov    QWORD PTR [rdi],rax
  00b05:    	mov    QWORD PTR [rbx],rdi
  00b08: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b11:    	mov    QWORD PTR [rsp-0x38],rcx
  00b16: ff 	lea    rcx,[rbp-0xa0]
  00b1d: 00 	mov    r8,0x0
  00b24:    	call   0x3938a
  00b29:    	lea    rdi,[rbp-0x8]
  00b2d:    	mov    QWORD PTR [rbx],rdi
  00b30:    	movq   xmm2,QWORD PTR [rsp]
  00b35:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b3b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b41:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b47:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b4d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b53: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b5a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b61: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b68: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b6f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b76:    	add    rsp,0x60
  00b7a: c8 	movabs r13,0x55c850b78070
  00b84:    	test   rax,rax
  00b87:    	je     0xffff1993
  00b8d: ff 	mov    QWORD PTR [rbp-0x88],rax
:00071 %14 = @spheres: Scene[IvarId(0)]
  00b94:    	mov    rdi,QWORD PTR [rbp-0x28]
  00b98:    	cmp    WORD PTR [rdi+0x2],0x3
  00b9d:    	jne    0x393bc
  00ba3:    	mov    rax,QWORD PTR [rdi+0x10]
  00ba7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 %15 = 0: i32
  00bae: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00073 %14 = %14.[%15]
  00bb9:    	sub    rsp,0x60
  00bbd:    	movq   QWORD PTR [rsp],xmm2
  00bc2:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bc8:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bce:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bd4:    	movq   QWORD PTR [rsp+0x20],xmm6
  00bda:    	movq   QWORD PTR [rsp+0x28],xmm7
  00be0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00be7: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00bee: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00bf5: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00bfc: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00c03: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00c0a: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00c11:    	mov    rdi,rbx
  00c14:    	mov    rsi,r12
  00c17: c8 	movabs rax,0x55c84f4b6c00
  00c21:    	call   rax
  00c23:    	movq   xmm2,QWORD PTR [rsp]
  00c28:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c2e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c34:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c3a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c40:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c46: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00c4d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00c54: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00c5b: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c62: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c69:    	add    rsp,0x60
  00c6d: c8 	movabs r13,0x55c850b780b0
  00c77:    	test   rax,rax
  00c7a:    	je     0xffff1993
  00c80: ff 	mov    QWORD PTR [rbp-0x98],rax
:00074 %15 = %11
  00c87:    	mov    rax,QWORD PTR [rbp-0x80]
  00c8b: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00075 %16 = %12
  00c92: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00c99: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00076 _ = %14.call intersect(%15; 2)       [Sphere]
:00077 
  00ca0: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00ca7: 00 	test   rdi,0x7
  00cae:    	jne    0x39466
  00cb4:    	cmp    DWORD PTR [rdi+0x4],0x27
  00cb8:    	jne    0x39466
  00cbe: 26 	cmp    DWORD PTR [rip+0xffffffffffff369e],0x26        # 0xffff4363
  00cc5:    	jne    0x39466
  00ccb:    	sub    rsp,0x60
  00ccf:    	movq   QWORD PTR [rsp],xmm2
  00cd4:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cda:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ce0:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ce6:    	movq   QWORD PTR [rsp+0x20],xmm6
  00cec:    	movq   QWORD PTR [rsp+0x28],xmm7
  00cf2: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00cf9: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00d00: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00d07: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00d0e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00d15:    	mov    rax,QWORD PTR [rbx]
  00d18:    	lea    rdi,[rsp-0x18]
  00d1d:    	mov    QWORD PTR [rdi],rax
  00d20:    	mov    QWORD PTR [rbx],rdi
  00d23: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d2c:    	mov    QWORD PTR [rsp-0x38],rcx
  00d31: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00d38:    	mov    QWORD PTR [rsp-0x38],rax
  00d3d: 00 	mov    rdi,0x2
  00d44: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00d4b:    	mov    QWORD PTR [rsp-0x40],rax
  00d50: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00d57:    	mov    QWORD PTR [rsp-0x48],rax
  00d5c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d65: 10 	movabs rax,0x100000003f
  00d6f:    	mov    QWORD PTR [rsp-0x28],rax
  00d74: c8 	movabs r13,0x55c850b316a0
  00d7e:    	call   0xffff4f29
  00d83:    	lea    rdi,[rbp-0x8]
  00d87:    	mov    QWORD PTR [rbx],rdi
  00d8a:    	movq   xmm2,QWORD PTR [rsp]
  00d8f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d95:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d9b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00da1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00da7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00dad: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00db4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00dbb: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00dc2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00dc9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00dd0:    	add    rsp,0x60
  00dd4: c8 	movabs r13,0x55c850b780f0
  00dde:    	test   rax,rax
  00de1:    	je     0xffff1993
:00079 %14 = @spheres: Scene[IvarId(0)]
  00de7:    	mov    rdi,QWORD PTR [rbp-0x28]
  00deb:    	cmp    WORD PTR [rdi+0x2],0x3
  00df0:    	jne    0x394df
  00df6:    	mov    rax,QWORD PTR [rdi+0x10]
  00dfa: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 %15 = 1: i32
  00e01: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00081 %14 = %14.[%15]
  00e0c:    	sub    rsp,0x60
  00e10:    	movq   QWORD PTR [rsp],xmm2
  00e15:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e1b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e21:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e27:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e2d:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e33: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e3a: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e41: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e48: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e4f: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e56: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00e5d: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00e64:    	mov    rdi,rbx
  00e67:    	mov    rsi,r12
  00e6a: c8 	movabs rax,0x55c84f4b6c00
  00e74:    	call   rax
  00e76:    	movq   xmm2,QWORD PTR [rsp]
  00e7b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e81:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e87:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e8d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e93:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e99: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00ea0: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00ea7: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00eae: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00eb5: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00ebc:    	add    rsp,0x60
  00ec0: c8 	movabs r13,0x55c850b78130
  00eca:    	test   rax,rax
  00ecd:    	je     0xffff1993
  00ed3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00082 %15 = %11
  00eda:    	mov    rax,QWORD PTR [rbp-0x80]
  00ede: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00083 %16 = %12
  00ee5: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00eec: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00084 _ = %14.call intersect(%15; 2)       [Sphere]
:00085 
  00ef3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00efa: 00 	test   rdi,0x7
  00f01:    	jne    0x39589
  00f07:    	cmp    DWORD PTR [rdi+0x4],0x27
  00f0b:    	jne    0x39589
  00f11: 26 	cmp    DWORD PTR [rip+0xffffffffffff344b],0x26        # 0xffff4363
  00f18:    	jne    0x39589
  00f1e:    	sub    rsp,0x60
  00f22:    	movq   QWORD PTR [rsp],xmm2
  00f27:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f2d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f33:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f39:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f3f:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f45: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f4c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f53: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f5a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f61: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f68:    	mov    rax,QWORD PTR [rbx]
  00f6b:    	lea    rdi,[rsp-0x18]
  00f70:    	mov    QWORD PTR [rdi],rax
  00f73:    	mov    QWORD PTR [rbx],rdi
  00f76: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f7f:    	mov    QWORD PTR [rsp-0x38],rcx
  00f84: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00f8b:    	mov    QWORD PTR [rsp-0x38],rax
  00f90: 00 	mov    rdi,0x2
  00f97: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00f9e:    	mov    QWORD PTR [rsp-0x40],rax
  00fa3: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00faa:    	mov    QWORD PTR [rsp-0x48],rax
  00faf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fb8: 10 	movabs rax,0x100000003f
  00fc2:    	mov    QWORD PTR [rsp-0x28],rax
  00fc7: c8 	movabs r13,0x55c850b316a0
  00fd1:    	call   0xffff4f29
  00fd6:    	lea    rdi,[rbp-0x8]
  00fda:    	mov    QWORD PTR [rbx],rdi
  00fdd:    	movq   xmm2,QWORD PTR [rsp]
  00fe2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fe8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fee:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ff4:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ffa:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01000: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01007: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0100e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01015: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0101c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01023:    	add    rsp,0x60
  01027: c8 	movabs r13,0x55c850b78170
  01031:    	test   rax,rax
  01034:    	je     0xffff1993
:00087 %14 = @spheres: Scene[IvarId(0)]
  0103a:    	mov    rdi,QWORD PTR [rbp-0x28]
  0103e:    	cmp    WORD PTR [rdi+0x2],0x3
  01043:    	jne    0x39602
  01049:    	mov    rax,QWORD PTR [rdi+0x10]
  0104d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00088 %15 = 2: i32
  01054: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00089 %14 = %14.[%15]
  0105f:    	sub    rsp,0x60
  01063:    	movq   QWORD PTR [rsp],xmm2
  01068:    	movq   QWORD PTR [rsp+0x8],xmm3
  0106e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01074:    	movq   QWORD PTR [rsp+0x18],xmm5
  0107a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01080:    	movq   QWORD PTR [rsp+0x28],xmm7
  01086: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0108d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01094: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0109b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  010a2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  010a9: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  010b0: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  010b7:    	mov    rdi,rbx
  010ba:    	mov    rsi,r12
  010bd: c8 	movabs rax,0x55c84f4b6c00
  010c7:    	call   rax
  010c9:    	movq   xmm2,QWORD PTR [rsp]
  010ce:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010d4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010da:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010e0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  010e6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  010ec: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  010f3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  010fa: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01101: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01108: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0110f:    	add    rsp,0x60
  01113: c8 	movabs r13,0x55c850b781b0
  0111d:    	test   rax,rax
  01120:    	je     0xffff1993
  01126: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %15 = %11
  0112d:    	mov    rax,QWORD PTR [rbp-0x80]
  01131: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00091 %16 = %12
  01138: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0113f: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00092 _ = %14.call intersect(%15; 2)       [Sphere]
:00093 
  01146: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0114d: 00 	test   rdi,0x7
  01154:    	jne    0x396ac
  0115a:    	cmp    DWORD PTR [rdi+0x4],0x27
  0115e:    	jne    0x396ac
  01164: 26 	cmp    DWORD PTR [rip+0xffffffffffff31f8],0x26        # 0xffff4363
  0116b:    	jne    0x396ac
  01171:    	sub    rsp,0x60
  01175:    	movq   QWORD PTR [rsp],xmm2
  0117a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01180:    	movq   QWORD PTR [rsp+0x10],xmm4
  01186:    	movq   QWORD PTR [rsp+0x18],xmm5
  0118c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01192:    	movq   QWORD PTR [rsp+0x28],xmm7
  01198: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0119f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  011a6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  011ad: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  011b4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  011bb:    	mov    rax,QWORD PTR [rbx]
  011be:    	lea    rdi,[rsp-0x18]
  011c3:    	mov    QWORD PTR [rdi],rax
  011c6:    	mov    QWORD PTR [rbx],rdi
  011c9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011d2:    	mov    QWORD PTR [rsp-0x38],rcx
  011d7: ff 	mov    rax,QWORD PTR [rbp-0x98]
  011de:    	mov    QWORD PTR [rsp-0x38],rax
  011e3: 00 	mov    rdi,0x2
  011ea: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  011f1:    	mov    QWORD PTR [rsp-0x40],rax
  011f6: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  011fd:    	mov    QWORD PTR [rsp-0x48],rax
  01202: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0120b: 10 	movabs rax,0x100000003f
  01215:    	mov    QWORD PTR [rsp-0x28],rax
  0121a: c8 	movabs r13,0x55c850b316a0
  01224:    	call   0xffff4f29
  01229:    	lea    rdi,[rbp-0x8]
  0122d:    	mov    QWORD PTR [rbx],rdi
  01230:    	movq   xmm2,QWORD PTR [rsp]
  01235:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0123b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01241:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01247:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0124d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01253: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0125a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01261: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01268: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0126f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01276:    	add    rsp,0x60
  0127a: c8 	movabs r13,0x55c850b781f0
  01284:    	test   rax,rax
  01287:    	je     0xffff1993
:00095 %14 = @plane: Scene[IvarId(1)]
  0128d:    	mov    rdi,QWORD PTR [rbp-0x28]
  01291:    	cmp    WORD PTR [rdi+0x2],0x3
  01296:    	jne    0x39725
  0129c:    	mov    rax,QWORD PTR [rdi+0x18]
  012a0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00096 %15 = %11
  012a7:    	mov    rax,QWORD PTR [rbp-0x80]
  012ab: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00097 %16 = %12
  012b2: ff 	mov    rax,QWORD PTR [rbp-0x88]
  012b9: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00098 _ = %14.call intersect(%15; 2)       [Plane]
:00099 
  012c0: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  012c7: 00 	test   rdi,0x7
  012ce:    	jne    0x397cf
  012d4:    	cmp    DWORD PTR [rdi+0x4],0x29
  012d8:    	jne    0x397cf
  012de: 26 	cmp    DWORD PTR [rip+0xffffffffffff307e],0x26        # 0xffff4363
  012e5:    	jne    0x397cf
  012eb:    	sub    rsp,0x60
  012ef:    	movq   QWORD PTR [rsp],xmm2
  012f4:    	movq   QWORD PTR [rsp+0x8],xmm3
  012fa:    	movq   QWORD PTR [rsp+0x10],xmm4
  01300:    	movq   QWORD PTR [rsp+0x18],xmm5
  01306:    	movq   QWORD PTR [rsp+0x20],xmm6
  0130c:    	movq   QWORD PTR [rsp+0x28],xmm7
  01312: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01319: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01320: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01327: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0132e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01335:    	mov    rax,QWORD PTR [rbx]
  01338:    	lea    rdi,[rsp-0x18]
  0133d:    	mov    QWORD PTR [rdi],rax
  01340:    	mov    QWORD PTR [rbx],rdi
  01343: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0134c:    	mov    QWORD PTR [rsp-0x38],rcx
  01351: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01358:    	mov    QWORD PTR [rsp-0x38],rax
  0135d: 00 	mov    rdi,0x2
  01364: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0136b:    	mov    QWORD PTR [rsp-0x40],rax
  01370: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01377:    	mov    QWORD PTR [rsp-0x48],rax
  0137c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01385: 0e 	movabs rax,0xe00000041
  0138f:    	mov    QWORD PTR [rsp-0x28],rax
  01394: c8 	movabs r13,0x55c850b33540
  0139e:    	call   0xffff5516
  013a3:    	lea    rdi,[rbp-0x8]
  013a7:    	mov    QWORD PTR [rbx],rdi
  013aa:    	movq   xmm2,QWORD PTR [rsp]
  013af:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013b5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  013bb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  013c1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  013c7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  013cd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  013d4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  013db: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  013e2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  013e9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  013f0:    	add    rsp,0x60
  013f4: c8 	movabs r13,0x55c850b78250
  013fe:    	test   rax,rax
  01401:    	je     0xffff1993
:00101 %14 = %12.call hit()                 [Isect]
:00102 
  01407: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0140e: 00 	test   rdi,0x7
  01415:    	jne    0x39848
  0141b:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0141f:    	jne    0x39848
  01425: 26 	cmp    DWORD PTR [rip+0xffffffffffff2f37],0x26        # 0xffff4363
  0142c:    	jne    0x39848
  01432:    	mov    esi,DWORD PTR [rip+0x101c]        # 0x2454
  01438:    	cmp    esi,0xffffffff
  0143b:    	je     0x398c1
  01441:    	cmp    WORD PTR [rdi+0x2],0x3
  01446:    	jne    0x145f
  0144c:    	cmp    esi,0x6
  0144f:    	jge    0x145f
  01455:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0145a:    	jmp    0x14ff
  0145f:    	sub    rsp,0x60
  01463:    	movq   QWORD PTR [rsp],xmm2
  01468:    	movq   QWORD PTR [rsp+0x8],xmm3
  0146e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01474:    	movq   QWORD PTR [rsp+0x18],xmm5
  0147a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01480:    	movq   QWORD PTR [rsp+0x28],xmm7
  01486: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0148d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01494: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0149b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  014a2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  014a9: c8 	movabs rax,0x55c84f4d3440
  014b3:    	call   rax
  014b5:    	movq   xmm2,QWORD PTR [rsp]
  014ba:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014c0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014c6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014cc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  014d2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  014d8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  014df: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  014e6: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  014ed: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  014f4: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  014fb:    	add    rsp,0x60
  014ff: ff 	mov    QWORD PTR [rbp-0x98],rax
:00104 condnotbr %14 =>:00147
  01506: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0150d:    	or     rax,0x10
  01511:    	cmp    rax,0x14
  01515:    	je     0x2331
:00105 %14 = %12
  0151b: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01522: ff 	mov    QWORD PTR [rbp-0x98],rax
:00106 %13 = %0.call ambient_occlusion(%14; 1) [Scene]
:00107 
  01529:    	mov    rdi,QWORD PTR [rbp-0x28]
  0152d: 26 	cmp    DWORD PTR [rip+0xffffffffffff2e2f],0x26        # 0xffff4363
  01534:    	jne    0x3997e
  0153a:    	sub    rsp,0x60
  0153e:    	movq   QWORD PTR [rsp],xmm2
  01543:    	movq   QWORD PTR [rsp+0x8],xmm3
  01549:    	movq   QWORD PTR [rsp+0x10],xmm4
  0154f:    	movq   QWORD PTR [rsp+0x18],xmm5
  01555:    	movq   QWORD PTR [rsp+0x20],xmm6
  0155b:    	movq   QWORD PTR [rsp+0x28],xmm7
  01561: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01568: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0156f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01576: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0157d: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01584:    	mov    rax,QWORD PTR [rbx]
  01587:    	lea    rdi,[rsp-0x18]
  0158c:    	mov    QWORD PTR [rdi],rax
  0158f:    	mov    QWORD PTR [rbx],rdi
  01592: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0159b:    	mov    QWORD PTR [rsp-0x38],rcx
  015a0:    	mov    rax,QWORD PTR [rbp-0x28]
  015a4:    	mov    QWORD PTR [rsp-0x38],rax
  015a9: 00 	mov    rdi,0x1
  015b0: ff 	mov    rax,QWORD PTR [rbp-0x98]
  015b7:    	mov    QWORD PTR [rsp-0x40],rax
  015bc: 00 	mov    QWORD PTR [rsp-0x30],0x0
  015c5: 0e 	movabs rax,0xe00000045
  015cf:    	mov    QWORD PTR [rsp-0x28],rax
  015d4: c8 	movabs r13,0x55c850b33c50
  015de:    	call   0xffffb3e2
  015e3:    	lea    rdi,[rbp-0x8]
  015e7:    	mov    QWORD PTR [rbx],rdi
  015ea:    	movq   xmm2,QWORD PTR [rsp]
  015ef:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015f5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015fb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01601:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01607:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0160d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01614: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0161b: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01622: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01629: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01630:    	add    rsp,0x60
  01634: c8 	movabs r13,0x55c850b782d0
  0163e:    	test   rax,rax
  01641:    	je     0xffff1993
  01647: ff 	mov    QWORD PTR [rbp-0x90],rax
:00109 %14 = dynvar(2, %2)
  0164e:    	mov    rax,QWORD PTR [rbp-0x10]
  01652:    	mov    rax,QWORD PTR [rax]
  01655:    	mov    rax,QWORD PTR [rax-0x28]
  01659: ff 	mov    QWORD PTR [rbp-0x98],rax
:00110 %16 = dynvar(2, %2)
  01660:    	mov    rax,QWORD PTR [rbp-0x10]
  01664:    	mov    rax,QWORD PTR [rax]
  01667:    	mov    rax,QWORD PTR [rax-0x28]
  0166b: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00111 %15 = %16.call x()                   [Vec]
:00112 
  01672: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01679: 00 	test   rdi,0x7
  01680:    	jne    0x399f7
  01686:    	cmp    DWORD PTR [rdi+0x4],0x25
  0168a:    	jne    0x399f7
  01690: 26 	cmp    DWORD PTR [rip+0xffffffffffff2ccc],0x26        # 0xffff4363
  01697:    	jne    0x399f7
  0169d:    	mov    esi,DWORD PTR [rip+0xdb9]        # 0x245c
  016a3:    	cmp    esi,0xffffffff
  016a6:    	je     0x39a70
  016ac:    	cmp    WORD PTR [rdi+0x2],0x3
  016b1:    	jne    0x16ca
  016b7:    	cmp    esi,0x6
  016ba:    	jge    0x16ca
  016c0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  016c5:    	jmp    0x176a
  016ca:    	sub    rsp,0x60
  016ce:    	movq   QWORD PTR [rsp],xmm2
  016d3:    	movq   QWORD PTR [rsp+0x8],xmm3
  016d9:    	movq   QWORD PTR [rsp+0x10],xmm4
  016df:    	movq   QWORD PTR [rsp+0x18],xmm5
  016e5:    	movq   QWORD PTR [rsp+0x20],xmm6
  016eb:    	movq   QWORD PTR [rsp+0x28],xmm7
  016f1: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  016f8: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  016ff: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01706: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0170d: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01714: c8 	movabs rax,0x55c84f4d3440
  0171e:    	call   rax
  01720:    	movq   xmm2,QWORD PTR [rsp]
  01725:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0172b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01731:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01737:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0173d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01743: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0174a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01751: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01758: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0175f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01766:    	add    rsp,0x60
  0176a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00114 %16 = %13.call x()                   [Vec]
:00115 
  01771: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01778: 00 	test   rdi,0x7
  0177f:    	jne    0x39b2d
  01785:    	cmp    DWORD PTR [rdi+0x4],0x25
  01789:    	jne    0x39b2d
  0178f: 26 	cmp    DWORD PTR [rip+0xffffffffffff2bcd],0x26        # 0xffff4363
  01796:    	jne    0x39b2d
  0179c:    	mov    esi,DWORD PTR [rip+0xcc2]        # 0x2464
  017a2:    	cmp    esi,0xffffffff
  017a5:    	je     0x39ba6
  017ab:    	cmp    WORD PTR [rdi+0x2],0x3
  017b0:    	jne    0x17c9
  017b6:    	cmp    esi,0x6
  017b9:    	jge    0x17c9
  017bf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  017c4:    	jmp    0x1869
  017c9:    	sub    rsp,0x60
  017cd:    	movq   QWORD PTR [rsp],xmm2
  017d2:    	movq   QWORD PTR [rsp+0x8],xmm3
  017d8:    	movq   QWORD PTR [rsp+0x10],xmm4
  017de:    	movq   QWORD PTR [rsp+0x18],xmm5
  017e4:    	movq   QWORD PTR [rsp+0x20],xmm6
  017ea:    	movq   QWORD PTR [rsp+0x28],xmm7
  017f0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  017f7: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  017fe: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01805: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0180c: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01813: c8 	movabs rax,0x55c84f4d3440
  0181d:    	call   rax
  0181f:    	movq   xmm2,QWORD PTR [rsp]
  01824:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0182a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01830:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01836:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0183c:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01842: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01849: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01850: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01857: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0185e: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01865:    	add    rsp,0x60
  01869: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00117 %15 = %15 + %16                      [Float][Float]
  01870: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01877: 00 	test   rdi,0x1
  0187e:    	jne    0x39c63
  01884: 00 	test   rdi,0x2
  0188b:    	je     0x18c8
  01891:    	xorps  xmm13,xmm13
  01895: 00 	movabs rax,0x8000000000000002
  0189f:    	cmp    rdi,rax
  018a2:    	je     0x18db
  018a8:    	mov    rax,rdi
  018ab:    	sar    rax,0x3f
  018af:    	add    rax,0x2
  018b3:    	and    rdi,0xfffffffffffffffc
  018b7:    	or     rdi,rax
  018ba:    	rol    rdi,0x3d
  018be:    	movq   xmm13,rdi
  018c3:    	jmp    0x18db
  018c8:    	call   0xffff19cc
  018cd:    	test   rax,rax
  018d0:    	je     0x39c63
  018d6:    	movq   xmm13,xmm0
  018db: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  018e2: 00 	test   rdi,0x1
  018e9:    	jne    0x39cdc
  018ef: 00 	test   rdi,0x2
  018f6:    	je     0x1933
  018fc:    	xorps  xmm14,xmm14
  01900: 00 	movabs rax,0x8000000000000002
  0190a:    	cmp    rdi,rax
  0190d:    	je     0x1946
  01913:    	mov    rax,rdi
  01916:    	sar    rax,0x3f
  0191a:    	add    rax,0x2
  0191e:    	and    rdi,0xfffffffffffffffc
  01922:    	or     rdi,rax
  01925:    	rol    rdi,0x3d
  01929:    	movq   xmm14,rdi
  0192e:    	jmp    0x1946
  01933:    	call   0xffff19cc
  01938:    	test   rax,rax
  0193b:    	je     0x39cdc
  01941:    	movq   xmm14,xmm0
  01946:    	addsd  xmm13,xmm14
:00118 _ = %14.call x=(%15; 1)              [Vec]
:00119 
  0194b:    	movq   xmm0,xmm13
  01950:    	call   0xffff1abf
  01955: ff 	mov    QWORD PTR [rbp-0xa0],rax
  0195c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01963: 00 	test   rdi,0x7
  0196a:    	jne    0x39d55
  01970:    	cmp    DWORD PTR [rdi+0x4],0x25
  01974:    	jne    0x39d55
  0197a: 26 	cmp    DWORD PTR [rip+0xffffffffffff29e2],0x26        # 0xffff4363
  01981:    	jne    0x39d55
  01987:    	mov    esi,DWORD PTR [rip+0xadf]        # 0x246c
  0198d:    	cmp    esi,0xffffffff
  01990:    	je     0x39dce
  01996:    	cmp    WORD PTR [rdi+0x2],0x3
  0199b:    	jne    0x19bb
  019a1:    	cmp    esi,0x6
  019a4:    	jge    0x19bb
  019aa: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  019b1:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  019b6:    	jmp    0x1a91
  019bb:    	sub    rsp,0x70
  019bf:    	movq   QWORD PTR [rsp],xmm2
  019c4:    	movq   QWORD PTR [rsp+0x8],xmm3
  019ca:    	movq   QWORD PTR [rsp+0x10],xmm4
  019d0:    	movq   QWORD PTR [rsp+0x18],xmm5
  019d6:    	movq   QWORD PTR [rsp+0x20],xmm6
  019dc:    	movq   QWORD PTR [rsp+0x28],xmm7
  019e2: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  019e9: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  019f0: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  019f7: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  019fe: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01a05: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  01a0c: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  01a13: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01a1a: c8 	movabs rax,0x55c84f4d36c0
  01a24:    	call   rax
  01a26:    	movq   xmm2,QWORD PTR [rsp]
  01a2b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01a31:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01a37:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01a3d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01a43:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01a49: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01a50: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01a57: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01a5e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01a65: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01a6c: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  01a73: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  01a7a:    	add    rsp,0x70
  01a7e: c8 	movabs r13,0x55c850b78390
  01a88:    	test   rax,rax
  01a8b:    	je     0xffff1993
:00121 %14 = dynvar(2, %2)
  01a91:    	mov    rax,QWORD PTR [rbp-0x10]
  01a95:    	mov    rax,QWORD PTR [rax]
  01a98:    	mov    rax,QWORD PTR [rax-0x28]
  01a9c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00122 %16 = dynvar(2, %2)
  01aa3:    	mov    rax,QWORD PTR [rbp-0x10]
  01aa7:    	mov    rax,QWORD PTR [rax]
  01aaa:    	mov    rax,QWORD PTR [rax-0x28]
  01aae: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00123 %15 = %16.call y()                   [Vec]
:00124 
  01ab5: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01abc: 00 	test   rdi,0x7
  01ac3:    	jne    0x39eb1
  01ac9:    	cmp    DWORD PTR [rdi+0x4],0x25
  01acd:    	jne    0x39eb1
  01ad3: 26 	cmp    DWORD PTR [rip+0xffffffffffff2889],0x26        # 0xffff4363
  01ada:    	jne    0x39eb1
  01ae0:    	mov    esi,DWORD PTR [rip+0x98e]        # 0x2474
  01ae6:    	cmp    esi,0xffffffff
  01ae9:    	je     0x39f2a
  01aef:    	cmp    WORD PTR [rdi+0x2],0x3
  01af4:    	jne    0x1b0d
  01afa:    	cmp    esi,0x6
  01afd:    	jge    0x1b0d
  01b03:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01b08:    	jmp    0x1bad
  01b0d:    	sub    rsp,0x60
  01b11:    	movq   QWORD PTR [rsp],xmm2
  01b16:    	movq   QWORD PTR [rsp+0x8],xmm3
  01b1c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01b22:    	movq   QWORD PTR [rsp+0x18],xmm5
  01b28:    	movq   QWORD PTR [rsp+0x20],xmm6
  01b2e:    	movq   QWORD PTR [rsp+0x28],xmm7
  01b34: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01b3b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01b42: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01b49: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01b50: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01b57: c8 	movabs rax,0x55c84f4d3440
  01b61:    	call   rax
  01b63:    	movq   xmm2,QWORD PTR [rsp]
  01b68:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01b6e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01b74:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01b7a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01b80:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01b86: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01b8d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01b94: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01b9b: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01ba2: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01ba9:    	add    rsp,0x60
  01bad: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00126 %16 = %13.call y()                   [Vec]
:00127 
  01bb4: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01bbb: 00 	test   rdi,0x7
  01bc2:    	jne    0x39fe7
  01bc8:    	cmp    DWORD PTR [rdi+0x4],0x25
  01bcc:    	jne    0x39fe7
  01bd2: 26 	cmp    DWORD PTR [rip+0xffffffffffff278a],0x26        # 0xffff4363
  01bd9:    	jne    0x39fe7
  01bdf:    	mov    esi,DWORD PTR [rip+0x897]        # 0x247c
  01be5:    	cmp    esi,0xffffffff
  01be8:    	je     0x3a060
  01bee:    	cmp    WORD PTR [rdi+0x2],0x3
  01bf3:    	jne    0x1c0c
  01bf9:    	cmp    esi,0x6
  01bfc:    	jge    0x1c0c
  01c02:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01c07:    	jmp    0x1cac
  01c0c:    	sub    rsp,0x60
  01c10:    	movq   QWORD PTR [rsp],xmm2
  01c15:    	movq   QWORD PTR [rsp+0x8],xmm3
  01c1b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01c21:    	movq   QWORD PTR [rsp+0x18],xmm5
  01c27:    	movq   QWORD PTR [rsp+0x20],xmm6
  01c2d:    	movq   QWORD PTR [rsp+0x28],xmm7
  01c33: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01c3a: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01c41: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01c48: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01c4f: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01c56: c8 	movabs rax,0x55c84f4d3440
  01c60:    	call   rax
  01c62:    	movq   xmm2,QWORD PTR [rsp]
  01c67:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01c6d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01c73:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01c79:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01c7f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01c85: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01c8c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01c93: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01c9a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01ca1: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01ca8:    	add    rsp,0x60
  01cac: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00129 %15 = %15 + %16                      [Float][Float]
  01cb3: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01cba: 00 	test   rdi,0x1
  01cc1:    	jne    0x3a11d
  01cc7: 00 	test   rdi,0x2
  01cce:    	je     0x1d0b
  01cd4:    	xorps  xmm13,xmm13
  01cd8: 00 	movabs rax,0x8000000000000002
  01ce2:    	cmp    rdi,rax
  01ce5:    	je     0x1d1e
  01ceb:    	mov    rax,rdi
  01cee:    	sar    rax,0x3f
  01cf2:    	add    rax,0x2
  01cf6:    	and    rdi,0xfffffffffffffffc
  01cfa:    	or     rdi,rax
  01cfd:    	rol    rdi,0x3d
  01d01:    	movq   xmm13,rdi
  01d06:    	jmp    0x1d1e
  01d0b:    	call   0xffff19cc
  01d10:    	test   rax,rax
  01d13:    	je     0x3a11d
  01d19:    	movq   xmm13,xmm0
  01d1e: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01d25: 00 	test   rdi,0x1
  01d2c:    	jne    0x3a196
  01d32: 00 	test   rdi,0x2
  01d39:    	je     0x1d76
  01d3f:    	xorps  xmm14,xmm14
  01d43: 00 	movabs rax,0x8000000000000002
  01d4d:    	cmp    rdi,rax
  01d50:    	je     0x1d89
  01d56:    	mov    rax,rdi
  01d59:    	sar    rax,0x3f
  01d5d:    	add    rax,0x2
  01d61:    	and    rdi,0xfffffffffffffffc
  01d65:    	or     rdi,rax
  01d68:    	rol    rdi,0x3d
  01d6c:    	movq   xmm14,rdi
  01d71:    	jmp    0x1d89
  01d76:    	call   0xffff19cc
  01d7b:    	test   rax,rax
  01d7e:    	je     0x3a196
  01d84:    	movq   xmm14,xmm0
  01d89:    	addsd  xmm13,xmm14
:00130 _ = %14.call y=(%15; 1)              [Vec]
:00131 
  01d8e:    	movq   xmm0,xmm13
  01d93:    	call   0xffff1abf
  01d98: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01d9f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01da6: 00 	test   rdi,0x7
  01dad:    	jne    0x3a20f
  01db3:    	cmp    DWORD PTR [rdi+0x4],0x25
  01db7:    	jne    0x3a20f
  01dbd: 26 	cmp    DWORD PTR [rip+0xffffffffffff259f],0x26        # 0xffff4363
  01dc4:    	jne    0x3a20f
  01dca:    	mov    esi,DWORD PTR [rip+0x6b4]        # 0x2484
  01dd0:    	cmp    esi,0xffffffff
  01dd3:    	je     0x3a288
  01dd9:    	cmp    WORD PTR [rdi+0x2],0x3
  01dde:    	jne    0x1dfe
  01de4:    	cmp    esi,0x6
  01de7:    	jge    0x1dfe
  01ded: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01df4:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01df9:    	jmp    0x1ed4
  01dfe:    	sub    rsp,0x70
  01e02:    	movq   QWORD PTR [rsp],xmm2
  01e07:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e0d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e13:    	movq   QWORD PTR [rsp+0x18],xmm5
  01e19:    	movq   QWORD PTR [rsp+0x20],xmm6
  01e1f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01e25: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01e2c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01e33: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01e3a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01e41: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01e48: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  01e4f: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  01e56: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01e5d: c8 	movabs rax,0x55c84f4d36c0
  01e67:    	call   rax
  01e69:    	movq   xmm2,QWORD PTR [rsp]
  01e6e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01e74:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e7a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e80:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e86:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e8c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e93: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01e9a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01ea1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01ea8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01eaf: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  01eb6: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  01ebd:    	add    rsp,0x70
  01ec1: c8 	movabs r13,0x55c850b78450
  01ecb:    	test   rax,rax
  01ece:    	je     0xffff1993
:00133 %14 = dynvar(2, %2)
  01ed4:    	mov    rax,QWORD PTR [rbp-0x10]
  01ed8:    	mov    rax,QWORD PTR [rax]
  01edb:    	mov    rax,QWORD PTR [rax-0x28]
  01edf: ff 	mov    QWORD PTR [rbp-0x98],rax
:00134 %16 = dynvar(2, %2)
  01ee6:    	mov    rax,QWORD PTR [rbp-0x10]
  01eea:    	mov    rax,QWORD PTR [rax]
  01eed:    	mov    rax,QWORD PTR [rax-0x28]
  01ef1: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00135 %15 = %16.call z()                   [Vec]
:00136 
  01ef8: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01eff: 00 	test   rdi,0x7
  01f06:    	jne    0x3a36b
  01f0c:    	cmp    DWORD PTR [rdi+0x4],0x25
  01f10:    	jne    0x3a36b
  01f16: 26 	cmp    DWORD PTR [rip+0xffffffffffff2446],0x26        # 0xffff4363
  01f1d:    	jne    0x3a36b
  01f23:    	mov    esi,DWORD PTR [rip+0x563]        # 0x248c
  01f29:    	cmp    esi,0xffffffff
  01f2c:    	je     0x3a3e4
  01f32:    	cmp    WORD PTR [rdi+0x2],0x3
  01f37:    	jne    0x1f50
  01f3d:    	cmp    esi,0x6
  01f40:    	jge    0x1f50
  01f46:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01f4b:    	jmp    0x1ff0
  01f50:    	sub    rsp,0x60
  01f54:    	movq   QWORD PTR [rsp],xmm2
  01f59:    	movq   QWORD PTR [rsp+0x8],xmm3
  01f5f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01f65:    	movq   QWORD PTR [rsp+0x18],xmm5
  01f6b:    	movq   QWORD PTR [rsp+0x20],xmm6
  01f71:    	movq   QWORD PTR [rsp+0x28],xmm7
  01f77: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01f7e: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01f85: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01f8c: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01f93: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01f9a: c8 	movabs rax,0x55c84f4d3440
  01fa4:    	call   rax
  01fa6:    	movq   xmm2,QWORD PTR [rsp]
  01fab:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01fb1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01fb7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01fbd:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01fc3:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01fc9: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01fd0: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01fd7: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01fde: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01fe5: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01fec:    	add    rsp,0x60
  01ff0: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00138 %16 = %13.call z()                   [Vec]
:00139 
  01ff7: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01ffe: 00 	test   rdi,0x7
  02005:    	jne    0x3a4a1
  0200b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0200f:    	jne    0x3a4a1
  02015: 26 	cmp    DWORD PTR [rip+0xffffffffffff2347],0x26        # 0xffff4363
  0201c:    	jne    0x3a4a1
  02022:    	mov    esi,DWORD PTR [rip+0x46c]        # 0x2494
  02028:    	cmp    esi,0xffffffff
  0202b:    	je     0x3a51a
  02031:    	cmp    WORD PTR [rdi+0x2],0x3
  02036:    	jne    0x204f
  0203c:    	cmp    esi,0x6
  0203f:    	jge    0x204f
  02045:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0204a:    	jmp    0x20ef
  0204f:    	sub    rsp,0x60
  02053:    	movq   QWORD PTR [rsp],xmm2
  02058:    	movq   QWORD PTR [rsp+0x8],xmm3
  0205e:    	movq   QWORD PTR [rsp+0x10],xmm4
  02064:    	movq   QWORD PTR [rsp+0x18],xmm5
  0206a:    	movq   QWORD PTR [rsp+0x20],xmm6
  02070:    	movq   QWORD PTR [rsp+0x28],xmm7
  02076: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0207d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02084: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0208b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02092: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02099: c8 	movabs rax,0x55c84f4d3440
  020a3:    	call   rax
  020a5:    	movq   xmm2,QWORD PTR [rsp]
  020aa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  020b0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  020b6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  020bc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  020c2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  020c8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  020cf: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  020d6: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  020dd: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  020e4: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  020eb:    	add    rsp,0x60
  020ef: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00141 %15 = %15 + %16                      [Float][Float]
  020f6: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  020fd: 00 	test   rdi,0x1
  02104:    	jne    0x3a5d7
  0210a: 00 	test   rdi,0x2
  02111:    	je     0x214e
  02117:    	xorps  xmm13,xmm13
  0211b: 00 	movabs rax,0x8000000000000002
  02125:    	cmp    rdi,rax
  02128:    	je     0x2161
  0212e:    	mov    rax,rdi
  02131:    	sar    rax,0x3f
  02135:    	add    rax,0x2
  02139:    	and    rdi,0xfffffffffffffffc
  0213d:    	or     rdi,rax
  02140:    	rol    rdi,0x3d
  02144:    	movq   xmm13,rdi
  02149:    	jmp    0x2161
  0214e:    	call   0xffff19cc
  02153:    	test   rax,rax
  02156:    	je     0x3a5d7
  0215c:    	movq   xmm13,xmm0
  02161: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  02168: 00 	test   rdi,0x1
  0216f:    	jne    0x3a650
  02175: 00 	test   rdi,0x2
  0217c:    	je     0x21b9
  02182:    	xorps  xmm14,xmm14
  02186: 00 	movabs rax,0x8000000000000002
  02190:    	cmp    rdi,rax
  02193:    	je     0x21cc
  02199:    	mov    rax,rdi
  0219c:    	sar    rax,0x3f
  021a0:    	add    rax,0x2
  021a4:    	and    rdi,0xfffffffffffffffc
  021a8:    	or     rdi,rax
  021ab:    	rol    rdi,0x3d
  021af:    	movq   xmm14,rdi
  021b4:    	jmp    0x21cc
  021b9:    	call   0xffff19cc
  021be:    	test   rax,rax
  021c1:    	je     0x3a650
  021c7:    	movq   xmm14,xmm0
  021cc:    	addsd  xmm13,xmm14
:00142 _ = %14.call z=(%15; 1)              [Vec]
:00143 
  021d1:    	movq   xmm0,xmm13
  021d6:    	call   0xffff1abf
  021db: ff 	mov    QWORD PTR [rbp-0xa0],rax
  021e2: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  021e9: 00 	test   rdi,0x7
  021f0:    	jne    0x3a6c9
  021f6:    	cmp    DWORD PTR [rdi+0x4],0x25
  021fa:    	jne    0x3a6c9
  02200: 26 	cmp    DWORD PTR [rip+0xffffffffffff215c],0x26        # 0xffff4363
  02207:    	jne    0x3a6c9
  0220d:    	mov    esi,DWORD PTR [rip+0x289]        # 0x249c
  02213:    	cmp    esi,0xffffffff
  02216:    	je     0x3a742
  0221c:    	cmp    WORD PTR [rdi+0x2],0x3
  02221:    	jne    0x2241
  02227:    	cmp    esi,0x6
  0222a:    	jge    0x2241
  02230: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02237:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0223c:    	jmp    0x2317
  02241:    	sub    rsp,0x70
  02245:    	movq   QWORD PTR [rsp],xmm2
  0224a:    	movq   QWORD PTR [rsp+0x8],xmm3
  02250:    	movq   QWORD PTR [rsp+0x10],xmm4
  02256:    	movq   QWORD PTR [rsp+0x18],xmm5
  0225c:    	movq   QWORD PTR [rsp+0x20],xmm6
  02262:    	movq   QWORD PTR [rsp+0x28],xmm7
  02268: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0226f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02276: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0227d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02284: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0228b: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  02292: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  02299: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  022a0: c8 	movabs rax,0x55c84f4d36c0
  022aa:    	call   rax
  022ac:    	movq   xmm2,QWORD PTR [rsp]
  022b1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  022b7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  022bd:    	movq   xmm5,QWORD PTR [rsp+0x18]
  022c3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  022c9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  022cf: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  022d6: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  022dd: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  022e4: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  022eb: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  022f2: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  022f9: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  02300:    	add    rsp,0x70
  02304: c8 	movabs r13,0x55c850b78510
  0230e:    	test   rax,rax
  02311:    	je     0xffff1993
:00145 %14 = %15
:00146 ret %14
  02317:    	movq   xmm0,xmm13
  0231c:    	call   0xffff1abf
  02321: ff 	mov    QWORD PTR [rbp-0x98],rax
  02328: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0232f:    	leave  
  02330:    	ret    
:00147 %14 = nil
  02331: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00148 ret %14
  0233c: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02343:    	leave  
  02344:    	ret    
==> start whole compile: ambient_occlusion FuncId(69) self_class:Scene start:[00000] bytecode:0x55c850b33c50
<== finished compile. elapsed:91.4µs
offset:Pos(68424) code: 4081 bytes  data: 287 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0xa0
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x38],rax
  00016: mov    QWORD PTR [rbp-0x40],rax
  0001a: mov    QWORD PTR [rbp-0x48],rax
  0001e: mov    QWORD PTR [rbp-0x50],rax
  00022: mov    QWORD PTR [rbp-0x58],rax
  00026: mov    QWORD PTR [rbp-0x60],rax
  0002a: mov    QWORD PTR [rbp-0x68],rax
  0002e: mov    QWORD PTR [rbp-0x70],rax
  00032: mov    QWORD PTR [rbp-0x78],rax
  00036: mov    QWORD PTR [rbp-0x80],rax
  0003a: mov    QWORD PTR [rbp-0x88],rax
  00041: mov    QWORD PTR [rbp-0x90],rax
  00048: mov    rdi,QWORD PTR [rbp-0x28]
  0004c: test   rdi,0x7
  00053: jne    0x38385
  00059: cmp    DWORD PTR [rdi+0x4],0x2f
  0005d: jne    0x38385
:00000 %8 = const[Array]                    [Array]
  00063: mov    rax,QWORD PTR [rip+0xffffffffffff1e5e]        # 0xffff1ec8
  0006a: cmp    rax,QWORD PTR [rip+0xf97]        # 0x1008
  00071: jne    0x38394
  00077: mov    rax,QWORD PTR [rip+0xf7a]        # 0xff8
  0007e: mov    QWORD PTR [rbp-0x68],rax
:00001 %2 = %8.call new()                   [#<Class:Array>]
:00002 
  00082: mov    rdi,QWORD PTR [rbp-0x68]
  00086: test   rdi,0x7
  0008d: jne    0x383da
  00093: cmp    DWORD PTR [rdi+0x4],0x1e
  00097: jne    0x383da
  0009d: cmp    DWORD PTR [rip+0xffffffffffff1e1f],0x26        # 0xffff1ec3
  000a4: jne    0x383da
  000aa: mov    r9,0x0
  000b1: mov    rdx,rdi
  000b4: mov    rax,QWORD PTR [rbx]
  000b7: lea    rdi,[rsp-0x18]
  000bc: mov    QWORD PTR [rdi],rax
  000bf: mov    QWORD PTR [rbx],rdi
  000c2: mov    QWORD PTR [rsp-0x20],0x0
  000cb: mov    QWORD PTR [rsp-0x38],rcx
  000d0: lea    rcx,[rbp-0x70]
  000d4: mov    r8,0x0
  000db: call   0x383e9
  000e0: lea    rdi,[rbp-0x8]
  000e4: mov    QWORD PTR [rbx],rdi
  000e7: movabs r13,0x55c850b33c80
  000f1: test   rax,rax
  000f4: je     0xfffef4f3
  000fa: mov    QWORD PTR [rbp-0x38],rax
:00004 %8 = %2
  000fe: mov    rax,QWORD PTR [rbp-0x38]
  00102: mov    QWORD PTR [rbp-0x68],rax
:00005 %9 = %1.call n()                     [Isect]
:00006 
  00106: mov    rdi,QWORD PTR [rbp-0x30]
  0010a: test   rdi,0x7
  00111: jne    0x3841b
  00117: cmp    DWORD PTR [rdi+0x4],0x2d
  0011b: jne    0x3841b
  00121: cmp    DWORD PTR [rip+0xffffffffffff1d9b],0x26        # 0xffff1ec3
  00128: jne    0x3841b
  0012e: mov    esi,DWORD PTR [rip+0xee0]        # 0x1014
  00134: cmp    esi,0xffffffff
  00137: je     0x3842a
  0013d: cmp    WORD PTR [rdi+0x2],0x3
  00142: jne    0x15b
  00148: cmp    esi,0x6
  0014b: jge    0x15b
  00151: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00156: jmp    0x167
  0015b: movabs rax,0x55c84f4d3440
  00165: call   rax
  00167: mov    QWORD PTR [rbp-0x70],rax
:00008 _ = %0.call otherBasis(%8; 2)        [Scene]
:00009 
  0016b: mov    rdi,QWORD PTR [rbp-0x28]
  0016f: cmp    DWORD PTR [rip+0xffffffffffff1d4d],0x26        # 0xffff1ec3
  00176: jne    0x38453
  0017c: mov    rax,QWORD PTR [rbx]
  0017f: lea    rdi,[rsp-0x18]
  00184: mov    QWORD PTR [rdi],rax
  00187: mov    QWORD PTR [rbx],rdi
  0018a: mov    QWORD PTR [rsp-0x20],0x0
  00193: mov    QWORD PTR [rsp-0x38],rcx
  00198: mov    rax,QWORD PTR [rbp-0x28]
  0019c: mov    QWORD PTR [rsp-0x38],rax
  001a1: mov    rdi,0x2
  001a8: mov    rax,QWORD PTR [rbp-0x68]
  001ac: mov    QWORD PTR [rsp-0x40],rax
  001b1: mov    rax,QWORD PTR [rbp-0x70]
  001b5: mov    QWORD PTR [rsp-0x48],rax
  001ba: mov    QWORD PTR [rsp-0x30],0x0
  001c3: movabs rax,0x900000035
  001cd: mov    QWORD PTR [rsp-0x28],rax
  001d2: movabs r13,0x55c850b4a280
  001dc: call   0xffff8fd4
  001e1: lea    rdi,[rbp-0x8]
  001e5: mov    QWORD PTR [rbx],rdi
  001e8: movabs r13,0x55c850b33cf0
  001f2: test   rax,rax
  001f5: je     0xfffef4f3
:00011 %3 = const[NAO_SAMPLES]              [8]
  001fb: mov    rax,QWORD PTR [rip+0xffffffffffff1cc6]        # 0xffff1ec8
  00202: cmp    rax,QWORD PTR [rip+0xe1f]        # 0x1028
  00209: jne    0x38462
  0020f: mov    rax,QWORD PTR [rip+0xe02]        # 0x1018
  00216: mov    QWORD PTR [rbp-0x40],rax
:00012 %4 = const[NAO_SAMPLES]              [8]
  0021a: mov    rax,QWORD PTR [rip+0xffffffffffff1ca7]        # 0xffff1ec8
  00221: cmp    rax,QWORD PTR [rip+0xe20]        # 0x1048
  00228: jne    0x384a8
  0022e: mov    rax,QWORD PTR [rip+0xe03]        # 0x1038
  00235: mov    QWORD PTR [rbp-0x48],rax
:00013 %5 = literal[0.0001]
  00239: movq   xmm2,QWORD PTR [rip+0xe17]        # 0x1058
  00241: movabs rax,0xf8d1b71758e2196a
  0024b: mov    QWORD PTR [rbp-0x50],rax
:00014 %6 = literal[0.0]
  0024f: movq   xmm3,QWORD PTR [rip+0xe11]        # 0x1068
  00257: movabs rax,0x8000000000000002
  00261: mov    QWORD PTR [rbp-0x58],rax
:00015 %8 = const[Vec]                      [Vec]
  00265: mov    rax,QWORD PTR [rip+0xffffffffffff1c5c]        # 0xffff1ec8
  0026c: cmp    rax,QWORD PTR [rip+0xe15]        # 0x1088
  00273: jne    0x384ee
  00279: mov    rax,QWORD PTR [rip+0xdf8]        # 0x1078
  00280: mov    QWORD PTR [rbp-0x68],rax
:00016 %10 = %1.call pl()                   [Isect]
:00017 
  00284: mov    rdi,QWORD PTR [rbp-0x30]
  00288: test   rdi,0x7
  0028f: jne    0x38552
  00295: cmp    DWORD PTR [rdi+0x4],0x2d
  00299: jne    0x38552
  0029f: cmp    DWORD PTR [rip+0xffffffffffff1c1d],0x26        # 0xffff1ec3
  002a6: jne    0x38552
  002ac: mov    esi,DWORD PTR [rip+0xde2]        # 0x1094
  002b2: cmp    esi,0xffffffff
  002b5: je     0x38561
  002bb: cmp    WORD PTR [rdi+0x2],0x3
  002c0: jne    0x2d9
  002c6: cmp    esi,0x6
  002c9: jge    0x2d9
  002cf: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  002d4: jmp    0x303
  002d9: sub    rsp,0x10
  002dd: movq   QWORD PTR [rsp],xmm2
  002e2: movq   QWORD PTR [rsp+0x8],xmm3
  002e8: movabs rax,0x55c84f4d3440
  002f2: call   rax
  002f4: movq   xmm2,QWORD PTR [rsp]
  002f9: movq   xmm3,QWORD PTR [rsp+0x8]
  002ff: add    rsp,0x10
  00303: mov    QWORD PTR [rbp-0x78],rax
:00019 %9 = %10.call x()                    [Vec]
:00020 
  00307: mov    rdi,QWORD PTR [rbp-0x78]
  0030b: test   rdi,0x7
  00312: jne    0x385a8
  00318: cmp    DWORD PTR [rdi+0x4],0x25
  0031c: jne    0x385a8
  00322: cmp    DWORD PTR [rip+0xffffffffffff1b9a],0x26        # 0xffff1ec3
  00329: jne    0x385a8
  0032f: mov    esi,DWORD PTR [rip+0xd67]        # 0x109c
  00335: cmp    esi,0xffffffff
  00338: je     0x385b7
  0033e: cmp    WORD PTR [rdi+0x2],0x3
  00343: jne    0x35c
  00349: cmp    esi,0x6
  0034c: jge    0x35c
  00352: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00357: jmp    0x386
  0035c: sub    rsp,0x10
  00360: movq   QWORD PTR [rsp],xmm2
  00365: movq   QWORD PTR [rsp+0x8],xmm3
  0036b: movabs rax,0x55c84f4d3440
  00375: call   rax
  00377: movq   xmm2,QWORD PTR [rsp]
  0037c: movq   xmm3,QWORD PTR [rsp+0x8]
  00382: add    rsp,0x10
  00386: mov    QWORD PTR [rbp-0x70],rax
:00022 %11 = %1.call n()                    [Isect]
:00023 
  0038a: mov    rdi,QWORD PTR [rbp-0x30]
  0038e: test   rdi,0x7
  00395: jne    0x385fe
  0039b: cmp    DWORD PTR [rdi+0x4],0x2d
  0039f: jne    0x385fe
  003a5: cmp    DWORD PTR [rip+0xffffffffffff1b17],0x26        # 0xffff1ec3
  003ac: jne    0x385fe
  003b2: mov    esi,DWORD PTR [rip+0xcec]        # 0x10a4
  003b8: cmp    esi,0xffffffff
  003bb: je     0x3860d
  003c1: cmp    WORD PTR [rdi+0x2],0x3
  003c6: jne    0x3df
  003cc: cmp    esi,0x6
  003cf: jge    0x3df
  003d5: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003da: jmp    0x409
  003df: sub    rsp,0x10
  003e3: movq   QWORD PTR [rsp],xmm2
  003e8: movq   QWORD PTR [rsp+0x8],xmm3
  003ee: movabs rax,0x55c84f4d3440
  003f8: call   rax
  003fa: movq   xmm2,QWORD PTR [rsp]
  003ff: movq   xmm3,QWORD PTR [rsp+0x8]
  00405: add    rsp,0x10
  00409: mov    QWORD PTR [rbp-0x80],rax
:00025 %10 = %11.call x()                   [Vec]
:00026 
  0040d: mov    rdi,QWORD PTR [rbp-0x80]
  00411: test   rdi,0x7
  00418: jne    0x38654
  0041e: cmp    DWORD PTR [rdi+0x4],0x25
  00422: jne    0x38654
  00428: cmp    DWORD PTR [rip+0xffffffffffff1a94],0x26        # 0xffff1ec3
  0042f: jne    0x38654
  00435: mov    esi,DWORD PTR [rip+0xc71]        # 0x10ac
  0043b: cmp    esi,0xffffffff
  0043e: je     0x38663
  00444: cmp    WORD PTR [rdi+0x2],0x3
  00449: jne    0x462
  0044f: cmp    esi,0x6
  00452: jge    0x462
  00458: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0045d: jmp    0x48c
  00462: sub    rsp,0x10
  00466: movq   QWORD PTR [rsp],xmm2
  0046b: movq   QWORD PTR [rsp+0x8],xmm3
  00471: movabs rax,0x55c84f4d3440
  0047b: call   rax
  0047d: movq   xmm2,QWORD PTR [rsp]
  00482: movq   xmm3,QWORD PTR [rsp+0x8]
  00488: add    rsp,0x10
  0048c: mov    QWORD PTR [rbp-0x78],rax
:00028 %10 = %5 * %10                       [Float][Float]
  00490: mov    rdi,QWORD PTR [rbp-0x78]
  00494: test   rdi,0x1
  0049b: jne    0x386aa
  004a1: test   rdi,0x2
  004a8: je     0x4e4
  004ae: xorps  xmm4,xmm4
  004b1: movabs rax,0x8000000000000002
  004bb: cmp    rdi,rax
  004be: je     0x4f6
  004c4: mov    rax,rdi
  004c7: sar    rax,0x3f
  004cb: add    rax,0x2
  004cf: and    rdi,0xfffffffffffffffc
  004d3: or     rdi,rax
  004d6: rol    rdi,0x3d
  004da: movq   xmm4,rdi
  004df: jmp    0x4f6
  004e4: call   0xfffef52c
  004e9: test   rax,rax
  004ec: je     0x386aa
  004f2: movq   xmm4,xmm0
  004f6: mulsd  xmm4,xmm2
:00029 %9 = %9 + %10                        [Float][Float]
  004fa: mov    rdi,QWORD PTR [rbp-0x70]
  004fe: test   rdi,0x1
  00505: jne    0x386b9
  0050b: test   rdi,0x2
  00512: je     0x54e
  00518: xorps  xmm5,xmm5
  0051b: movabs rax,0x8000000000000002
  00525: cmp    rdi,rax
  00528: je     0x560
  0052e: mov    rax,rdi
  00531: sar    rax,0x3f
  00535: add    rax,0x2
  00539: and    rdi,0xfffffffffffffffc
  0053d: or     rdi,rax
  00540: rol    rdi,0x3d
  00544: movq   xmm5,rdi
  00549: jmp    0x560
  0054e: call   0xfffef52c
  00553: test   rax,rax
  00556: je     0x386b9
  0055c: movq   xmm5,xmm0
  00560: addsd  xmm5,xmm4
:00030 %11 = %1.call pl()                   [Isect]
:00031 
  00564: mov    rdi,QWORD PTR [rbp-0x30]
  00568: test   rdi,0x7
  0056f: jne    0x386d5
  00575: cmp    DWORD PTR [rdi+0x4],0x2d
  00579: jne    0x386d5
  0057f: cmp    DWORD PTR [rip+0xffffffffffff193d],0x26        # 0xffff1ec3
  00586: jne    0x386d5
  0058c: mov    esi,DWORD PTR [rip+0xb22]        # 0x10b4
  00592: cmp    esi,0xffffffff
  00595: je     0x386fe
  0059b: cmp    WORD PTR [rdi+0x2],0x3
  005a0: jne    0x5b9
  005a6: cmp    esi,0x6
  005a9: jge    0x5b9
  005af: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005b4: jmp    0x5fb
  005b9: sub    rsp,0x20
  005bd: movq   QWORD PTR [rsp],xmm2
  005c2: movq   QWORD PTR [rsp+0x8],xmm3
  005c8: movq   QWORD PTR [rsp+0x10],xmm4
  005ce: movq   QWORD PTR [rsp+0x18],xmm5
  005d4: movabs rax,0x55c84f4d3440
  005de: call   rax
  005e0: movq   xmm2,QWORD PTR [rsp]
  005e5: movq   xmm3,QWORD PTR [rsp+0x8]
  005eb: movq   xmm4,QWORD PTR [rsp+0x10]
  005f1: movq   xmm5,QWORD PTR [rsp+0x18]
  005f7: add    rsp,0x20
  005fb: mov    QWORD PTR [rbp-0x80],rax
:00033 %10 = %11.call y()                   [Vec]
:00034 
  005ff: mov    rdi,QWORD PTR [rbp-0x80]
  00603: test   rdi,0x7
  0060a: jne    0x3875d
  00610: cmp    DWORD PTR [rdi+0x4],0x25
  00614: jne    0x3875d
  0061a: cmp    DWORD PTR [rip+0xffffffffffff18a2],0x26        # 0xffff1ec3
  00621: jne    0x3875d
  00627: mov    esi,DWORD PTR [rip+0xa8f]        # 0x10bc
  0062d: cmp    esi,0xffffffff
  00630: je     0x38779
  00636: cmp    WORD PTR [rdi+0x2],0x3
  0063b: jne    0x654
  00641: cmp    esi,0x6
  00644: jge    0x654
  0064a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0064f: jmp    0x68a
  00654: sub    rsp,0x20
  00658: movq   QWORD PTR [rsp],xmm2
  0065d: movq   QWORD PTR [rsp+0x8],xmm3
  00663: movq   QWORD PTR [rsp+0x10],xmm5
  00669: movabs rax,0x55c84f4d3440
  00673: call   rax
  00675: movq   xmm2,QWORD PTR [rsp]
  0067a: movq   xmm3,QWORD PTR [rsp+0x8]
  00680: movq   xmm5,QWORD PTR [rsp+0x10]
  00686: add    rsp,0x20
  0068a: mov    QWORD PTR [rbp-0x78],rax
:00036 %12 = %1.call n()                    [Isect]
:00037 
  0068e: mov    rdi,QWORD PTR [rbp-0x30]
  00692: test   rdi,0x7
  00699: jne    0x387cc
  0069f: cmp    DWORD PTR [rdi+0x4],0x2d
  006a3: jne    0x387cc
  006a9: cmp    DWORD PTR [rip+0xffffffffffff1813],0x26        # 0xffff1ec3
  006b0: jne    0x387cc
  006b6: mov    esi,DWORD PTR [rip+0xa08]        # 0x10c4
  006bc: cmp    esi,0xffffffff
  006bf: je     0x387e8
  006c5: cmp    WORD PTR [rdi+0x2],0x3
  006ca: jne    0x6e3
  006d0: cmp    esi,0x6
  006d3: jge    0x6e3
  006d9: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  006de: jmp    0x719
  006e3: sub    rsp,0x20
  006e7: movq   QWORD PTR [rsp],xmm2
  006ec: movq   QWORD PTR [rsp+0x8],xmm3
  006f2: movq   QWORD PTR [rsp+0x10],xmm5
  006f8: movabs rax,0x55c84f4d3440
  00702: call   rax
  00704: movq   xmm2,QWORD PTR [rsp]
  00709: movq   xmm3,QWORD PTR [rsp+0x8]
  0070f: movq   xmm5,QWORD PTR [rsp+0x10]
  00715: add    rsp,0x20
  00719: mov    QWORD PTR [rbp-0x88],rax
:00039 %11 = %12.call y()                   [Vec]
:00040 
  00720: mov    rdi,QWORD PTR [rbp-0x88]
  00727: test   rdi,0x7
  0072e: jne    0x3883b
  00734: cmp    DWORD PTR [rdi+0x4],0x25
  00738: jne    0x3883b
  0073e: cmp    DWORD PTR [rip+0xffffffffffff177e],0x26        # 0xffff1ec3
  00745: jne    0x3883b
  0074b: mov    esi,DWORD PTR [rip+0x97b]        # 0x10cc
  00751: cmp    esi,0xffffffff
  00754: je     0x38857
  0075a: cmp    WORD PTR [rdi+0x2],0x3
  0075f: jne    0x778
  00765: cmp    esi,0x6
  00768: jge    0x778
  0076e: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00773: jmp    0x7ae
  00778: sub    rsp,0x20
  0077c: movq   QWORD PTR [rsp],xmm2
  00781: movq   QWORD PTR [rsp+0x8],xmm3
  00787: movq   QWORD PTR [rsp+0x10],xmm5
  0078d: movabs rax,0x55c84f4d3440
  00797: call   rax
  00799: movq   xmm2,QWORD PTR [rsp]
  0079e: movq   xmm3,QWORD PTR [rsp+0x8]
  007a4: movq   xmm5,QWORD PTR [rsp+0x10]
  007aa: add    rsp,0x20
  007ae: mov    QWORD PTR [rbp-0x80],rax
:00042 %11 = %5 * %11                       [Float][Float]
  007b2: mov    rdi,QWORD PTR [rbp-0x80]
  007b6: test   rdi,0x1
  007bd: jne    0x388aa
  007c3: test   rdi,0x2
  007ca: je     0x806
  007d0: xorps  xmm4,xmm4
  007d3: movabs rax,0x8000000000000002
  007dd: cmp    rdi,rax
  007e0: je     0x818
  007e6: mov    rax,rdi
  007e9: sar    rax,0x3f
  007ed: add    rax,0x2
  007f1: and    rdi,0xfffffffffffffffc
  007f5: or     rdi,rax
  007f8: rol    rdi,0x3d
  007fc: movq   xmm4,rdi
  00801: jmp    0x818
  00806: call   0xfffef52c
  0080b: test   rax,rax
  0080e: je     0x388aa
  00814: movq   xmm4,xmm0
  00818: mulsd  xmm4,xmm2
:00043 %10 = %10 + %11                      [Float][Float]
  0081c: mov    rdi,QWORD PTR [rbp-0x78]
  00820: test   rdi,0x1
  00827: jne    0x388c6
  0082d: test   rdi,0x2
  00834: je     0x870
  0083a: xorps  xmm6,xmm6
  0083d: movabs rax,0x8000000000000002
  00847: cmp    rdi,rax
  0084a: je     0x882
  00850: mov    rax,rdi
  00853: sar    rax,0x3f
  00857: add    rax,0x2
  0085b: and    rdi,0xfffffffffffffffc
  0085f: or     rdi,rax
  00862: rol    rdi,0x3d
  00866: movq   xmm6,rdi
  0086b: jmp    0x882
  00870: call   0xfffef52c
  00875: test   rax,rax
  00878: je     0x388c6
  0087e: movq   xmm6,xmm0
  00882: addsd  xmm6,xmm4
:00044 %12 = %1.call pl()                   [Isect]
:00045 
  00886: mov    rdi,QWORD PTR [rbp-0x30]
  0088a: test   rdi,0x7
  00891: jne    0x388ef
  00897: cmp    DWORD PTR [rdi+0x4],0x2d
  0089b: jne    0x388ef
  008a1: cmp    DWORD PTR [rip+0xffffffffffff161b],0x26        # 0xffff1ec3
  008a8: jne    0x388ef
  008ae: mov    esi,DWORD PTR [rip+0x820]        # 0x10d4
  008b4: cmp    esi,0xffffffff
  008b7: je     0x38925
  008bd: cmp    WORD PTR [rdi+0x2],0x3
  008c2: jne    0x8db
  008c8: cmp    esi,0x6
  008cb: jge    0x8db
  008d1: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008d6: jmp    0x929
  008db: sub    rsp,0x30
  008df: movq   QWORD PTR [rsp],xmm2
  008e4: movq   QWORD PTR [rsp+0x8],xmm3
  008ea: movq   QWORD PTR [rsp+0x10],xmm4
  008f0: movq   QWORD PTR [rsp+0x18],xmm5
  008f6: movq   QWORD PTR [rsp+0x20],xmm6
  008fc: movabs rax,0x55c84f4d3440
  00906: call   rax
  00908: movq   xmm2,QWORD PTR [rsp]
  0090d: movq   xmm3,QWORD PTR [rsp+0x8]
  00913: movq   xmm4,QWORD PTR [rsp+0x10]
  00919: movq   xmm5,QWORD PTR [rsp+0x18]
  0091f: movq   xmm6,QWORD PTR [rsp+0x20]
  00925: add    rsp,0x30
  00929: mov    QWORD PTR [rbp-0x88],rax
:00047 %11 = %12.call z()                   [Vec]
:00048 
  00930: mov    rdi,QWORD PTR [rbp-0x88]
  00937: test   rdi,0x7
  0093e: jne    0x38990
  00944: cmp    DWORD PTR [rdi+0x4],0x25
  00948: jne    0x38990
  0094e: cmp    DWORD PTR [rip+0xffffffffffff156e],0x26        # 0xffff1ec3
  00955: jne    0x38990
  0095b: mov    esi,DWORD PTR [rip+0x77b]        # 0x10dc
  00961: cmp    esi,0xffffffff
  00964: je     0x389b9
  0096a: cmp    WORD PTR [rdi+0x2],0x3
  0096f: jne    0x988
  00975: cmp    esi,0x6
  00978: jge    0x988
  0097e: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00983: jmp    0x9ca
  00988: sub    rsp,0x20
  0098c: movq   QWORD PTR [rsp],xmm2
  00991: movq   QWORD PTR [rsp+0x8],xmm3
  00997: movq   QWORD PTR [rsp+0x10],xmm5
  0099d: movq   QWORD PTR [rsp+0x18],xmm6
  009a3: movabs rax,0x55c84f4d3440
  009ad: call   rax
  009af: movq   xmm2,QWORD PTR [rsp]
  009b4: movq   xmm3,QWORD PTR [rsp+0x8]
  009ba: movq   xmm5,QWORD PTR [rsp+0x10]
  009c0: movq   xmm6,QWORD PTR [rsp+0x18]
  009c6: add    rsp,0x20
  009ca: mov    QWORD PTR [rbp-0x80],rax
:00050 %13 = %1.call n()                    [Isect]
:00051 
  009ce: mov    rdi,QWORD PTR [rbp-0x30]
  009d2: test   rdi,0x7
  009d9: jne    0x38a18
  009df: cmp    DWORD PTR [rdi+0x4],0x2d
  009e3: jne    0x38a18
  009e9: cmp    DWORD PTR [rip+0xffffffffffff14d3],0x26        # 0xffff1ec3
  009f0: jne    0x38a18
  009f6: mov    esi,DWORD PTR [rip+0x6e8]        # 0x10e4
  009fc: cmp    esi,0xffffffff
  009ff: je     0x38a41
  00a05: cmp    WORD PTR [rdi+0x2],0x3
  00a0a: jne    0xa23
  00a10: cmp    esi,0x6
  00a13: jge    0xa23
  00a19: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a1e: jmp    0xa65
  00a23: sub    rsp,0x20
  00a27: movq   QWORD PTR [rsp],xmm2
  00a2c: movq   QWORD PTR [rsp+0x8],xmm3
  00a32: movq   QWORD PTR [rsp+0x10],xmm5
  00a38: movq   QWORD PTR [rsp+0x18],xmm6
  00a3e: movabs rax,0x55c84f4d3440
  00a48: call   rax
  00a4a: movq   xmm2,QWORD PTR [rsp]
  00a4f: movq   xmm3,QWORD PTR [rsp+0x8]
  00a55: movq   xmm5,QWORD PTR [rsp+0x10]
  00a5b: movq   xmm6,QWORD PTR [rsp+0x18]
  00a61: add    rsp,0x20
  00a65: mov    QWORD PTR [rbp-0x90],rax
:00053 %12 = %13.call z()                   [Vec]
:00054 
  00a6c: mov    rdi,QWORD PTR [rbp-0x90]
  00a73: test   rdi,0x7
  00a7a: jne    0x38aa0
  00a80: cmp    DWORD PTR [rdi+0x4],0x25
  00a84: jne    0x38aa0
  00a8a: cmp    DWORD PTR [rip+0xffffffffffff1432],0x26        # 0xffff1ec3
  00a91: jne    0x38aa0
  00a97: mov    esi,DWORD PTR [rip+0x64f]        # 0x10ec
  00a9d: cmp    esi,0xffffffff
  00aa0: je     0x38ac9
  00aa6: cmp    WORD PTR [rdi+0x2],0x3
  00aab: jne    0xac4
  00ab1: cmp    esi,0x6
  00ab4: jge    0xac4
  00aba: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00abf: jmp    0xb06
  00ac4: sub    rsp,0x20
  00ac8: movq   QWORD PTR [rsp],xmm2
  00acd: movq   QWORD PTR [rsp+0x8],xmm3
  00ad3: movq   QWORD PTR [rsp+0x10],xmm5
  00ad9: movq   QWORD PTR [rsp+0x18],xmm6
  00adf: movabs rax,0x55c84f4d3440
  00ae9: call   rax
  00aeb: movq   xmm2,QWORD PTR [rsp]
  00af0: movq   xmm3,QWORD PTR [rsp+0x8]
  00af6: movq   xmm5,QWORD PTR [rsp+0x10]
  00afc: movq   xmm6,QWORD PTR [rsp+0x18]
  00b02: add    rsp,0x20
  00b06: mov    QWORD PTR [rbp-0x88],rax
:00056 %12 = %5 * %12                       [Float][Float]
  00b0d: mov    rdi,QWORD PTR [rbp-0x88]
  00b14: test   rdi,0x1
  00b1b: jne    0x38b28
  00b21: test   rdi,0x2
  00b28: je     0xb64
  00b2e: xorps  xmm4,xmm4
  00b31: movabs rax,0x8000000000000002
  00b3b: cmp    rdi,rax
  00b3e: je     0xb76
  00b44: mov    rax,rdi
  00b47: sar    rax,0x3f
  00b4b: add    rax,0x2
  00b4f: and    rdi,0xfffffffffffffffc
  00b53: or     rdi,rax
  00b56: rol    rdi,0x3d
  00b5a: movq   xmm4,rdi
  00b5f: jmp    0xb76
  00b64: call   0xfffef52c
  00b69: test   rax,rax
  00b6c: je     0x38b28
  00b72: movq   xmm4,xmm0
  00b76: mulsd  xmm4,xmm2
:00057 %11 = %11 + %12                      [Float][Float]
  00b7a: mov    rdi,QWORD PTR [rbp-0x80]
  00b7e: test   rdi,0x1
  00b85: jne    0x38b51
  00b8b: test   rdi,0x2
  00b92: je     0xbce
  00b98: xorps  xmm7,xmm7
  00b9b: movabs rax,0x8000000000000002
  00ba5: cmp    rdi,rax
  00ba8: je     0xbe0
  00bae: mov    rax,rdi
  00bb1: sar    rax,0x3f
  00bb5: add    rax,0x2
  00bb9: and    rdi,0xfffffffffffffffc
  00bbd: or     rdi,rax
  00bc0: rol    rdi,0x3d
  00bc4: movq   xmm7,rdi
  00bc9: jmp    0xbe0
  00bce: call   0xfffef52c
  00bd3: test   rax,rax
  00bd6: je     0x38b51
  00bdc: movq   xmm7,xmm0
  00be0: addsd  xmm7,xmm4
:00058 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
:00059 
  00be4: movq   xmm0,xmm5
  00be8: call   0xfffef61f
  00bed: mov    QWORD PTR [rbp-0x70],rax
  00bf1: movq   xmm0,xmm6
  00bf5: call   0xfffef61f
  00bfa: mov    QWORD PTR [rbp-0x78],rax
  00bfe: movq   xmm0,xmm7
  00c02: call   0xfffef61f
  00c07: mov    QWORD PTR [rbp-0x80],rax
  00c0b: mov    rdi,QWORD PTR [rbp-0x68]
  00c0f: test   rdi,0x7
  00c16: jne    0x38b8a
  00c1c: cmp    DWORD PTR [rdi+0x4],0x26
  00c20: jne    0x38b8a
  00c26: cmp    DWORD PTR [rip+0xffffffffffff1296],0x26        # 0xffff1ec3
  00c2d: jne    0x38b8a
  00c33: mov    r9,0x0
  00c3a: sub    rsp,0x30
  00c3e: movq   QWORD PTR [rsp],xmm2
  00c43: movq   QWORD PTR [rsp+0x8],xmm3
  00c49: movq   QWORD PTR [rsp+0x10],xmm4
  00c4f: movq   QWORD PTR [rsp+0x18],xmm5
  00c55: movq   QWORD PTR [rsp+0x20],xmm6
  00c5b: movq   QWORD PTR [rsp+0x28],xmm7
  00c61: mov    rdx,rdi
  00c64: mov    rax,QWORD PTR [rbx]
  00c67: lea    rdi,[rsp-0x18]
  00c6c: mov    QWORD PTR [rdi],rax
  00c6f: mov    QWORD PTR [rbx],rdi
  00c72: mov    QWORD PTR [rsp-0x20],0x0
  00c7b: mov    QWORD PTR [rsp-0x38],rcx
  00c80: lea    rcx,[rbp-0x70]
  00c84: mov    r8,0x3
  00c8b: call   0x38ba9
  00c90: lea    rdi,[rbp-0x8]
  00c94: mov    QWORD PTR [rbx],rdi
  00c97: movq   xmm2,QWORD PTR [rsp]
  00c9c: movq   xmm3,QWORD PTR [rsp+0x8]
  00ca2: movq   xmm4,QWORD PTR [rsp+0x10]
  00ca8: movq   xmm5,QWORD PTR [rsp+0x18]
  00cae: movq   xmm6,QWORD PTR [rsp+0x20]
  00cb4: movq   xmm7,QWORD PTR [rsp+0x28]
  00cba: add    rsp,0x30
  00cbe: movabs r13,0x55c850b34010
  00cc8: test   rax,rax
  00ccb: je     0xfffef4f3
  00cd1: mov    QWORD PTR [rbp-0x60],rax
:00061 %8 = literal[71]
  00cd5: mov    rax,0x8f
  00cdc: mov    QWORD PTR [rbp-0x68],rax
:00062 _ = %4.call times(&%8)               [Integer]
:00063 
  00ce0: mov    rdi,QWORD PTR [rbp-0x48]
  00ce4: test   rdi,0x1
  00ceb: jne    0xd08
  00cf1: test   rdi,0x7
  00cf8: jne    0x38bdb
  00cfe: cmp    DWORD PTR [rdi+0x4],0x6
  00d02: jne    0x38bdb
  00d08: cmp    DWORD PTR [rip+0xffffffffffff11b4],0x26        # 0xffff1ec3
  00d0f: jne    0x38bdb
  00d15: mov    r9,QWORD PTR [rbp-0x68]
  00d19: sub    rsp,0x20
  00d1d: movq   QWORD PTR [rsp],xmm4
  00d22: movq   QWORD PTR [rsp+0x8],xmm5
  00d28: movq   QWORD PTR [rsp+0x10],xmm6
  00d2e: movq   QWORD PTR [rsp+0x18],xmm7
  00d34: mov    rdx,rdi
  00d37: mov    rax,QWORD PTR [rbx]
  00d3a: lea    rdi,[rsp-0x18]
  00d3f: mov    QWORD PTR [rdi],rax
  00d42: mov    QWORD PTR [rbx],rdi
  00d45: mov    QWORD PTR [rsp-0x20],0x0
  00d4e: mov    QWORD PTR [rsp-0x38],rcx
  00d53: lea    rcx,[rbp-0x70]
  00d57: mov    r8,0x0
  00d5e: call   0x38bfa
  00d63: lea    rdi,[rbp-0x8]
  00d67: mov    QWORD PTR [rbx],rdi
  00d6a: movq   xmm4,QWORD PTR [rsp]
  00d6f: movq   xmm5,QWORD PTR [rsp+0x8]
  00d75: movq   xmm6,QWORD PTR [rsp+0x10]
  00d7b: movq   xmm7,QWORD PTR [rsp+0x18]
  00d81: add    rsp,0x20
  00d85: movabs r13,0x55c850b34050
  00d8f: test   rax,rax
  00d92: je     0xfffef4f3
:00065 %8 = %3.call to_f()                  [Integer]
:00066 
  00d98: mov    rdi,QWORD PTR [rbp-0x40]
  00d9c: test   rdi,0x1
  00da3: jne    0xdc0
  00da9: test   rdi,0x7
  00db0: jne    0x38c2c
  00db6: cmp    DWORD PTR [rdi+0x4],0x6
  00dba: jne    0x38c2c
  00dc0: cmp    DWORD PTR [rip+0xffffffffffff10fc],0x26        # 0xffff1ec3
  00dc7: jne    0x38c2c
  00dcd: sar    rdi,1
  00dd0: cvtsi2sd xmm2,rdi
:00068 %9 = %4.call to_f()                  [Integer]
:00069 
  00dd5: mov    rdi,QWORD PTR [rbp-0x48]
  00dd9: test   rdi,0x1
  00de0: jne    0xdfd
  00de6: test   rdi,0x7
  00ded: jne    0x38c4b
  00df3: cmp    DWORD PTR [rdi+0x4],0x6
  00df7: jne    0x38c4b
  00dfd: cmp    DWORD PTR [rip+0xffffffffffff10bf],0x26        # 0xffff1ec3
  00e04: jne    0x38c4b
  00e0a: sar    rdi,1
  00e0d: cvtsi2sd xmm3,rdi
:00071 %8 = %8 * %9                         [Float][Float]
  00e12: mulsd  xmm2,xmm3
:00072 %8 = %8 - %6                         [Float][Float]
  00e16: mov    rdi,QWORD PTR [rbp-0x58]
  00e1a: test   rdi,0x1
  00e21: jne    0x38c77
  00e27: test   rdi,0x2
  00e2e: je     0xe6a
  00e34: xorps  xmm5,xmm5
  00e37: movabs rax,0x8000000000000002
  00e41: cmp    rdi,rax
  00e44: je     0xe7c
  00e4a: mov    rax,rdi
  00e4d: sar    rax,0x3f
  00e51: add    rax,0x2
  00e55: and    rdi,0xfffffffffffffffc
  00e59: or     rdi,rax
  00e5c: rol    rdi,0x3d
  00e60: movq   xmm5,rdi
  00e65: jmp    0xe7c
  00e6a: call   0xfffef52c
  00e6f: test   rax,rax
  00e72: je     0x38c77
  00e78: movq   xmm5,xmm0
  00e7c: subsd  xmm2,xmm5
:00073 %9 = %3.call to_f()                  [Integer]
:00074 
  00e80: mov    rdi,QWORD PTR [rbp-0x40]
  00e84: test   rdi,0x1
  00e8b: jne    0xea8
  00e91: test   rdi,0x7
  00e98: jne    0x38cb0
  00e9e: cmp    DWORD PTR [rdi+0x4],0x6
  00ea2: jne    0x38cb0
  00ea8: cmp    DWORD PTR [rip+0xffffffffffff1014],0x26        # 0xffff1ec3
  00eaf: jne    0x38cb0
  00eb5: sar    rdi,1
  00eb8: cvtsi2sd xmm3,rdi
:00076 %10 = %4.call to_f()                 [Integer]
:00077 
  00ebd: mov    rdi,QWORD PTR [rbp-0x48]
  00ec1: test   rdi,0x1
  00ec8: jne    0xee5
  00ece: test   rdi,0x7
  00ed5: jne    0x38cdc
  00edb: cmp    DWORD PTR [rdi+0x4],0x6
  00edf: jne    0x38cdc
  00ee5: cmp    DWORD PTR [rip+0xffffffffffff0fd7],0x26        # 0xffff1ec3
  00eec: jne    0x38cdc
  00ef2: sar    rdi,1
  00ef5: cvtsi2sd xmm6,rdi
:00079 %9 = %9 * %10                        [Float][Float]
  00efa: mulsd  xmm3,xmm6
:00080 %6 = %8 / %9                         [Float][Float]
  00efe: movq   xmm5,xmm2
  00f02: movq   rax,xmm3
  00f07: test   rax,rax
  00f0a: je     0xfffef518
  00f10: divsd  xmm5,xmm3
:00081 %9 = const[Vec]                      [Vec]
  00f14: mov    rax,QWORD PTR [rip+0xffffffffffff0fad]        # 0xffff1ec8
  00f1b: cmp    rax,QWORD PTR [rip+0x1e6]        # 0x1108
  00f22: jne    0x38d15
  00f28: mov    rax,QWORD PTR [rip+0x1c9]        # 0x10f8
  00f2f: mov    QWORD PTR [rbp-0x70],rax
:00082 %10 = %6
:00083 %11 = %6
:00084 %12 = %6
:00085 %8 = %9.call new(%10; 3)             [#<Class:Vec>]
:00086 
  00f33: movq   xmm0,xmm5
  00f37: call   0xfffef61f
  00f3c: mov    QWORD PTR [rbp-0x78],rax
  00f40: movq   xmm0,xmm5
  00f44: call   0xfffef61f
  00f49: mov    QWORD PTR [rbp-0x80],rax
  00f4d: movq   xmm0,xmm5
  00f51: call   0xfffef61f
  00f56: mov    QWORD PTR [rbp-0x88],rax
  00f5d: mov    rdi,QWORD PTR [rbp-0x70]
  00f61: test   rdi,0x7
  00f68: jne    0x38d9d
  00f6e: cmp    DWORD PTR [rdi+0x4],0x26
  00f72: jne    0x38d9d
  00f78: cmp    DWORD PTR [rip+0xffffffffffff0f44],0x26        # 0xffff1ec3
  00f7f: jne    0x38d9d
  00f85: mov    r9,0x0
  00f8c: sub    rsp,0x10
  00f90: movq   QWORD PTR [rsp],xmm5
  00f95: mov    rdx,rdi
  00f98: mov    rax,QWORD PTR [rbx]
  00f9b: lea    rdi,[rsp-0x18]
  00fa0: mov    QWORD PTR [rdi],rax
  00fa3: mov    QWORD PTR [rbx],rdi
  00fa6: mov    QWORD PTR [rsp-0x20],0x0
  00faf: mov    QWORD PTR [rsp-0x38],rcx
  00fb4: lea    rcx,[rbp-0x78]
  00fb8: mov    r8,0x3
  00fbf: call   0x38db9
  00fc4: lea    rdi,[rbp-0x8]
  00fc8: mov    QWORD PTR [rbx],rdi
  00fcb: movq   xmm5,QWORD PTR [rsp]
  00fd0: add    rsp,0x10
  00fd4: movabs r13,0x55c850b341c0
  00fde: test   rax,rax
  00fe1: je     0xfffef4f3
  00fe7: mov    QWORD PTR [rbp-0x68],rax
:00088 ret %8
  00feb: mov    rax,QWORD PTR [rbp-0x68]
  00fef: leave  
  00ff0: ret    
==> start whole compile: otherBasis FuncId(53) self_class:Scene start:[00000] bytecode:0x55c850b4a280
<== finished compile. elapsed:104.5µs
offset:Pos(72792) code: 6212 bytes  data: 304 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	sub    rsp,0x70
  00008: 00 	mov    rax,0x4
  0000f:    	mov    QWORD PTR [rbp-0x40],rax
  00013:    	mov    QWORD PTR [rbp-0x48],rax
  00017:    	mov    QWORD PTR [rbp-0x50],rax
  0001b:    	mov    QWORD PTR [rbp-0x58],rax
  0001f:    	mov    QWORD PTR [rbp-0x60],rax
  00023:    	mov    QWORD PTR [rbp-0x68],rax
  00027:    	mov    rdi,QWORD PTR [rbp-0x28]
  0002b: 00 	test   rdi,0x7
  00032:    	jne    0x37cdb
  00038:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0003c:    	jne    0x37cdb
:00000 %3 = 2: i32
  00042: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00001 %5 = const[Vec]                      [Vec]
  0004a: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff0d67]        # 0xffff0db8
  00051: 00 	cmp    rax,QWORD PTR [rip+0x1800]        # 0x1858
  00058:    	jne    0x37cea
  0005e: 00 	mov    rax,QWORD PTR [rip+0x17e3]        # 0x1848
  00065:    	mov    QWORD PTR [rbp-0x50],rax
:00002 %6 = %2.call x()                     [Vec]
:00003 
  00069:    	mov    rdi,QWORD PTR [rbp-0x38]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x37d30
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0007e:    	jne    0x37d30
  00084: 26 	cmp    DWORD PTR [rip+0xffffffffffff0d28],0x26        # 0xffff0db3
  0008b:    	jne    0x37d30
  00091:    	mov    esi,DWORD PTR [rip+0x17cd]        # 0x1864
  00097:    	cmp    esi,0xffffffff
  0009a:    	je     0x37d3f
  000a0:    	cmp    WORD PTR [rdi+0x2],0x3
  000a5:    	jne    0xbe
  000ab:    	cmp    esi,0x6
  000ae:    	jge    0xbe
  000b4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000b9:    	jmp    0xca
  000be: c8 	movabs rax,0x55c84f4d3440
  000c8:    	call   rax
  000ca:    	mov    QWORD PTR [rbp-0x58],rax
:00005 %7 = %2.call y()                     [Vec]
:00006 
  000ce:    	mov    rdi,QWORD PTR [rbp-0x38]
  000d2: 00 	test   rdi,0x7
  000d9:    	jne    0x37d68
  000df:    	cmp    DWORD PTR [rdi+0x4],0x25
  000e3:    	jne    0x37d68
  000e9: 26 	cmp    DWORD PTR [rip+0xffffffffffff0cc3],0x26        # 0xffff0db3
  000f0:    	jne    0x37d68
  000f6:    	mov    esi,DWORD PTR [rip+0x1770]        # 0x186c
  000fc:    	cmp    esi,0xffffffff
  000ff:    	je     0x37d77
  00105:    	cmp    WORD PTR [rdi+0x2],0x3
  0010a:    	jne    0x123
  00110:    	cmp    esi,0x6
  00113:    	jge    0x123
  00119:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0011e:    	jmp    0x12f
  00123: c8 	movabs rax,0x55c84f4d3440
  0012d:    	call   rax
  0012f:    	mov    QWORD PTR [rbp-0x60],rax
:00008 %8 = %2.call z()                     [Vec]
:00009 
  00133:    	mov    rdi,QWORD PTR [rbp-0x38]
  00137: 00 	test   rdi,0x7
  0013e:    	jne    0x37da0
  00144:    	cmp    DWORD PTR [rdi+0x4],0x25
  00148:    	jne    0x37da0
  0014e: 26 	cmp    DWORD PTR [rip+0xffffffffffff0c5e],0x26        # 0xffff0db3
  00155:    	jne    0x37da0
  0015b:    	mov    esi,DWORD PTR [rip+0x1713]        # 0x1874
  00161:    	cmp    esi,0xffffffff
  00164:    	je     0x37daf
  0016a:    	cmp    WORD PTR [rdi+0x2],0x3
  0016f:    	jne    0x188
  00175:    	cmp    esi,0x6
  00178:    	jge    0x188
  0017e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00183:    	jmp    0x194
  00188: c8 	movabs rax,0x55c84f4d3440
  00192:    	call   rax
  00194:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00012 
  00198:    	mov    rdi,QWORD PTR [rbp-0x50]
  0019c: 00 	test   rdi,0x7
  001a3:    	jne    0x37dd8
  001a9:    	cmp    DWORD PTR [rdi+0x4],0x26
  001ad:    	jne    0x37dd8
  001b3: 26 	cmp    DWORD PTR [rip+0xffffffffffff0bf9],0x26        # 0xffff0db3
  001ba:    	jne    0x37dd8
  001c0: 00 	mov    r9,0x0
  001c7:    	mov    rdx,rdi
  001ca:    	mov    rax,QWORD PTR [rbx]
  001cd:    	lea    rdi,[rsp-0x18]
  001d2:    	mov    QWORD PTR [rdi],rax
  001d5:    	mov    QWORD PTR [rbx],rdi
  001d8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  001e1:    	mov    QWORD PTR [rsp-0x38],rcx
  001e6:    	lea    rcx,[rbp-0x58]
  001ea: 00 	mov    r8,0x3
  001f1:    	call   0x37de7
  001f6:    	lea    rdi,[rbp-0x8]
  001fa:    	mov    QWORD PTR [rbx],rdi
  001fd: c8 	movabs r13,0x55c850b4a350
  00207:    	test   rax,rax
  0020a:    	je     0xfffee3e3
  00210:    	mov    QWORD PTR [rbp-0x48],rax
:00014 %1.[%3] = %4
  00214:    	mov    rdx,QWORD PTR [rbp-0x30]
  00218:    	mov    rcx,QWORD PTR [rbp-0x40]
  0021c:    	mov    r8,QWORD PTR [rbp-0x48]
  00220:    	mov    rdi,rbx
  00223:    	mov    rsi,r12
  00226: c8 	movabs rax,0x55c84f4b6d10
  00230:    	call   rax
  00232: c8 	movabs r13,0x55c850b4a370
  0023c:    	test   rax,rax
  0023f:    	je     0xfffee3e3
:00015 %3 = 1: i32
  00245: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00016 %5 = const[Vec]                      [Vec]
  0024d: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff0b64]        # 0xffff0db8
  00254: 00 	cmp    rax,QWORD PTR [rip+0x162d]        # 0x1888
  0025b:    	jne    0x37e19
  00261: 00 	mov    rax,QWORD PTR [rip+0x1610]        # 0x1878
  00268:    	mov    QWORD PTR [rbp-0x50],rax
:00017 %6 = literal[0.0]
  0026c: 00 	movq   xmm2,QWORD PTR [rip+0x1624]        # 0x1898
  00274: 00 	movabs rax,0x8000000000000002
  0027e:    	mov    QWORD PTR [rbp-0x58],rax
:00018 %7 = literal[0.0]
  00282: 00 	movq   xmm3,QWORD PTR [rip+0x161e]        # 0x18a8
  0028a: 00 	movabs rax,0x8000000000000002
  00294:    	mov    QWORD PTR [rbp-0x60],rax
:00019 %8 = literal[0.0]
  00298: 00 	movq   xmm4,QWORD PTR [rip+0x1618]        # 0x18b8
  002a0: 00 	movabs rax,0x8000000000000002
  002aa:    	mov    QWORD PTR [rbp-0x68],rax
:00020 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00021 
  002ae:    	mov    rdi,QWORD PTR [rbp-0x50]
  002b2: 00 	test   rdi,0x7
  002b9:    	jne    0x37e5f
  002bf:    	cmp    DWORD PTR [rdi+0x4],0x26
  002c3:    	jne    0x37e5f
  002c9: 26 	cmp    DWORD PTR [rip+0xffffffffffff0ae3],0x26        # 0xffff0db3
  002d0:    	jne    0x37e5f
  002d6: 00 	mov    r9,0x0
  002dd:    	sub    rsp,0x20
  002e1:    	movq   QWORD PTR [rsp],xmm2
  002e6:    	movq   QWORD PTR [rsp+0x8],xmm3
  002ec:    	movq   QWORD PTR [rsp+0x10],xmm4
  002f2:    	mov    rdx,rdi
  002f5:    	mov    rax,QWORD PTR [rbx]
  002f8:    	lea    rdi,[rsp-0x18]
  002fd:    	mov    QWORD PTR [rdi],rax
  00300:    	mov    QWORD PTR [rbx],rdi
  00303: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0030c:    	mov    QWORD PTR [rsp-0x38],rcx
  00311:    	lea    rcx,[rbp-0x58]
  00315: 00 	mov    r8,0x3
  0031c:    	call   0x37e6e
  00321:    	lea    rdi,[rbp-0x8]
  00325:    	mov    QWORD PTR [rbx],rdi
  00328:    	movq   xmm2,QWORD PTR [rsp]
  0032d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00333:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00339:    	add    rsp,0x20
  0033d: c8 	movabs r13,0x55c850b4a3e0
  00347:    	test   rax,rax
  0034a:    	je     0xfffee3e3
  00350:    	mov    QWORD PTR [rbp-0x48],rax
:00023 %1.[%3] = %4
  00354:    	sub    rsp,0x20
  00358:    	movq   QWORD PTR [rsp],xmm2
  0035d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00363:    	movq   QWORD PTR [rsp+0x10],xmm4
  00369:    	mov    rdx,QWORD PTR [rbp-0x30]
  0036d:    	mov    rcx,QWORD PTR [rbp-0x40]
  00371:    	mov    r8,QWORD PTR [rbp-0x48]
  00375:    	mov    rdi,rbx
  00378:    	mov    rsi,r12
  0037b: c8 	movabs rax,0x55c84f4b6d10
  00385:    	call   rax
  00387:    	movq   xmm2,QWORD PTR [rsp]
  0038c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00392:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00398:    	add    rsp,0x20
  0039c: c8 	movabs r13,0x55c850b4a400
  003a6:    	test   rax,rax
  003a9:    	je     0xfffee3e3
:00024 %3 = %2.call x()                     [Vec]
:00025 
  003af:    	mov    rdi,QWORD PTR [rbp-0x38]
  003b3: 00 	test   rdi,0x7
  003ba:    	jne    0x37ea0
  003c0:    	cmp    DWORD PTR [rdi+0x4],0x25
  003c4:    	jne    0x37ea0
  003ca: 26 	cmp    DWORD PTR [rip+0xffffffffffff09e2],0x26        # 0xffff0db3
  003d1:    	jne    0x37ea0
  003d7:    	mov    esi,DWORD PTR [rip+0x14e7]        # 0x18c4
  003dd:    	cmp    esi,0xffffffff
  003e0:    	je     0x37eaf
  003e6:    	cmp    WORD PTR [rdi+0x2],0x3
  003eb:    	jne    0x404
  003f1:    	cmp    esi,0x6
  003f4:    	jge    0x404
  003fa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003ff:    	jmp    0x43a
  00404:    	sub    rsp,0x20
  00408:    	movq   QWORD PTR [rsp],xmm2
  0040d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00413:    	movq   QWORD PTR [rsp+0x10],xmm4
  00419: c8 	movabs rax,0x55c84f4d3440
  00423:    	call   rax
  00425:    	movq   xmm2,QWORD PTR [rsp]
  0042a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00430:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00436:    	add    rsp,0x20
  0043a:    	mov    QWORD PTR [rbp-0x40],rax
:00027 %4 = literal[0.6]
  0043e: 00 	movq   xmm5,QWORD PTR [rip+0x1482]        # 0x18c8
  00446: 99 	movabs rax,0xff1999999999999a
  00450:    	mov    QWORD PTR [rbp-0x48],rax
:00028 _%3 = %3 < %4                        [Float][Float]
:00029 condnotbr _%3 =>:00043
  00454:    	mov    rdi,QWORD PTR [rbp-0x40]
  00458: 00 	test   rdi,0x1
  0045f:    	jne    0x37f02
  00465: 00 	test   rdi,0x2
  0046c:    	je     0x4a8
  00472:    	xorps  xmm6,xmm6
  00475: 00 	movabs rax,0x8000000000000002
  0047f:    	cmp    rdi,rax
  00482:    	je     0x4ba
  00488:    	mov    rax,rdi
  0048b:    	sar    rax,0x3f
  0048f:    	add    rax,0x2
  00493:    	and    rdi,0xfffffffffffffffc
  00497:    	or     rdi,rax
  0049a:    	rol    rdi,0x3d
  0049e:    	movq   xmm6,rdi
  004a3:    	jmp    0x4ba
  004a8:    	call   0xfffee41c
  004ad:    	test   rax,rax
  004b0:    	je     0x37f02
  004b6:    	movq   xmm6,xmm0
  004ba:    	ucomisd xmm6,xmm5
  004be:    	jae    0x38003
:00030 %3 = %2.call x()                     [Vec]
:00031 
  004c4:    	mov    rdi,QWORD PTR [rbp-0x38]
  004c8: 00 	test   rdi,0x7
  004cf:    	jne    0x37f11
  004d5:    	cmp    DWORD PTR [rdi+0x4],0x25
  004d9:    	jne    0x37f11
  004df: 26 	cmp    DWORD PTR [rip+0xffffffffffff08cd],0x26        # 0xffff0db3
  004e6:    	jne    0x37f11
  004ec:    	mov    esi,DWORD PTR [rip+0x13e2]        # 0x18d4
  004f2:    	cmp    esi,0xffffffff
  004f5:    	je     0x37f20
  004fb:    	cmp    WORD PTR [rdi+0x2],0x3
  00500:    	jne    0x519
  00506:    	cmp    esi,0x6
  00509:    	jge    0x519
  0050f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00514:    	jmp    0x55b
  00519:    	sub    rsp,0x20
  0051d:    	movq   QWORD PTR [rsp],xmm2
  00522:    	movq   QWORD PTR [rsp+0x8],xmm3
  00528:    	movq   QWORD PTR [rsp+0x10],xmm4
  0052e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00534: c8 	movabs rax,0x55c84f4d3440
  0053e:    	call   rax
  00540:    	movq   xmm2,QWORD PTR [rsp]
  00545:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0054b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00551:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00557:    	add    rsp,0x20
  0055b:    	mov    QWORD PTR [rbp-0x40],rax
:00033 %4 = literal[-0.6]
  0055f: 00 	movq   xmm5,QWORD PTR [rip+0x1371]        # 0x18d8
  00567: 99 	movabs rax,0xff1999999999999e
  00571:    	mov    QWORD PTR [rbp-0x48],rax
:00034 _%3 = %3 > %4                        [Float][Float]
:00035 condnotbr _%3 =>:00043
  00575:    	mov    rdi,QWORD PTR [rbp-0x40]
  00579: 00 	test   rdi,0x1
  00580:    	jne    0x37f7f
  00586: 00 	test   rdi,0x2
  0058d:    	je     0x5c9
  00593:    	xorps  xmm6,xmm6
  00596: 00 	movabs rax,0x8000000000000002
  005a0:    	cmp    rdi,rax
  005a3:    	je     0x5db
  005a9:    	mov    rax,rdi
  005ac:    	sar    rax,0x3f
  005b0:    	add    rax,0x2
  005b4:    	and    rdi,0xfffffffffffffffc
  005b8:    	or     rdi,rax
  005bb:    	rol    rdi,0x3d
  005bf:    	movq   xmm6,rdi
  005c4:    	jmp    0x5db
  005c9:    	call   0xfffee41c
  005ce:    	test   rax,rax
  005d1:    	je     0x37f7f
  005d7:    	movq   xmm6,xmm0
  005db:    	ucomisd xmm6,xmm5
  005df:    	jbe    0x3801c
:00036 %3 = 1: i32
  005e5: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00037 %3 = %1.[%3]
  005ed:    	sub    rsp,0x20
  005f1:    	movq   QWORD PTR [rsp],xmm2
  005f6:    	movq   QWORD PTR [rsp+0x8],xmm3
  005fc:    	movq   QWORD PTR [rsp+0x10],xmm4
  00602:    	movq   QWORD PTR [rsp+0x18],xmm5
  00608:    	mov    rdx,QWORD PTR [rbp-0x30]
  0060c:    	mov    rcx,QWORD PTR [rbp-0x40]
  00610:    	mov    rdi,rbx
  00613:    	mov    rsi,r12
  00616: c8 	movabs rax,0x55c84f4b6c00
  00620:    	call   rax
  00622:    	movq   xmm2,QWORD PTR [rsp]
  00627:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0062d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00633:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00639:    	add    rsp,0x20
  0063d: c8 	movabs r13,0x55c850b4a4e0
  00647:    	test   rax,rax
  0064a:    	je     0xfffee3e3
  00650:    	mov    QWORD PTR [rbp-0x40],rax
:00038 %4 = literal[1.0]
  00654: 00 	movq   xmm5,QWORD PTR [rip+0x128c]        # 0x18e8
  0065c: 00 	movabs rax,0xff80000000000002
  00666:    	mov    QWORD PTR [rbp-0x48],rax
:00039 _ = %3.call x=(%4; 1)                [Vec]
:00040 
  0066a:    	mov    rdi,QWORD PTR [rbp-0x40]
  0066e: 00 	test   rdi,0x7
  00675:    	jne    0x37f8e
  0067b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0067f:    	jne    0x37f8e
  00685: 26 	cmp    DWORD PTR [rip+0xffffffffffff0727],0x26        # 0xffff0db3
  0068c:    	jne    0x37f8e
  00692:    	mov    esi,DWORD PTR [rip+0x125c]        # 0x18f4
  00698:    	cmp    esi,0xffffffff
  0069b:    	je     0x37f9d
  006a1:    	cmp    WORD PTR [rdi+0x2],0x3
  006a6:    	jne    0x6c3
  006ac:    	cmp    esi,0x6
  006af:    	jge    0x6c3
  006b5:    	mov    rax,QWORD PTR [rbp-0x48]
  006b9:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006be:    	jmp    0x71c
  006c3:    	sub    rsp,0x20
  006c7:    	movq   QWORD PTR [rsp],xmm2
  006cc:    	movq   QWORD PTR [rsp+0x8],xmm3
  006d2:    	movq   QWORD PTR [rsp+0x10],xmm4
  006d8:    	movq   QWORD PTR [rsp+0x18],xmm5
  006de:    	mov    rdx,QWORD PTR [rbp-0x48]
  006e2: c8 	movabs rax,0x55c84f4d36c0
  006ec:    	call   rax
  006ee:    	movq   xmm2,QWORD PTR [rsp]
  006f3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006f9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006ff:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00705:    	add    rsp,0x20
  00709: c8 	movabs r13,0x55c850b4a510
  00713:    	test   rax,rax
  00716:    	je     0xfffee3e3
:00042 br =>:00087
  0071c:    	jmp    0x38292
:00043 %3 = %2.call y()                     [<INVALID>]
:00044 
  00721: 00 	mov    rdi,0x4
  00728: 01 	sub    DWORD PTR [rip+0x11c9],0x1        # 0x18f8
  0072f:    	jne    0x38035
  00735:    	mov    rdi,r12
  00738:    	mov    esi,DWORD PTR [rbp-0x18]
  0073b:    	mov    rdx,QWORD PTR [rbp-0x28]
  0073f: c8 	movabs rax,0x55c84f4bca80
  00749:    	call   rax
  0074b: 00 	mov    rdi,0x4
  00752:    	jmp    0x38035
:00046 %4 = literal[0.6]
  00757: 00 	movq   xmm5,QWORD PTR [rip+0x11a9]        # 0x1908
  0075f: 99 	movabs rax,0xff1999999999999a
  00769:    	mov    QWORD PTR [rbp-0x48],rax
:00047 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00048 condnotbr _%3 =>:00062
  0076d:    	mov    rdi,QWORD PTR [rbp-0x40]
  00771:    	mov    rsi,QWORD PTR [rbp-0x48]
  00775: 00 	test   rdi,0x1
  0077c:    	je     0x38044
  00782: 00 	test   rsi,0x1
  00789:    	je     0x38044
  0078f:    	cmp    rdi,rsi
  00792:    	jge    0x3810c
:00049 %3 = %2.call y()                     [<INVALID>]
:00050 
  00798: 00 	mov    rdi,0x4
  0079f: 01 	sub    DWORD PTR [rip+0x116a],0x1        # 0x1910
  007a6:    	jne    0x38099
  007ac:    	mov    rdi,r12
  007af:    	mov    esi,DWORD PTR [rbp-0x18]
  007b2:    	mov    rdx,QWORD PTR [rbp-0x28]
  007b6: c8 	movabs rax,0x55c84f4bca80
  007c0:    	call   rax
  007c2: 00 	mov    rdi,0x4
  007c9:    	jmp    0x38099
:00052 %4 = literal[-0.6]
  007ce: 00 	movq   xmm5,QWORD PTR [rip+0x1142]        # 0x1918
  007d6: 99 	movabs rax,0xff1999999999999e
  007e0:    	mov    QWORD PTR [rbp-0x48],rax
:00053 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00054 condnotbr _%3 =>:00062
  007e4:    	mov    rdi,QWORD PTR [rbp-0x40]
  007e8:    	mov    rsi,QWORD PTR [rbp-0x48]
  007ec: 00 	test   rdi,0x1
  007f3:    	je     0x380a8
  007f9: 00 	test   rsi,0x1
  00800:    	je     0x380a8
  00806:    	cmp    rdi,rsi
  00809:    	jle    0x38125
:00055 %3 = 1: i32
  0080f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00056 %3 = %1.[%3]
  00817:    	sub    rsp,0x20
  0081b:    	movq   QWORD PTR [rsp],xmm2
  00820:    	movq   QWORD PTR [rsp+0x8],xmm3
  00826:    	movq   QWORD PTR [rsp+0x10],xmm4
  0082c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00832:    	mov    rdx,QWORD PTR [rbp-0x30]
  00836:    	mov    rcx,QWORD PTR [rbp-0x40]
  0083a:    	mov    rdi,rbx
  0083d:    	mov    rsi,r12
  00840: c8 	movabs rax,0x55c84f4b6c00
  0084a:    	call   rax
  0084c:    	movq   xmm2,QWORD PTR [rsp]
  00851:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00857:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0085d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00863:    	add    rsp,0x20
  00867: c8 	movabs r13,0x55c850b4a610
  00871:    	test   rax,rax
  00874:    	je     0xfffee3e3
  0087a:    	mov    QWORD PTR [rbp-0x40],rax
:00057 %4 = literal[1.0]
  0087e: 00 	movq   xmm5,QWORD PTR [rip+0x10a2]        # 0x1928
  00886: 00 	movabs rax,0xff80000000000002
  00890:    	mov    QWORD PTR [rbp-0x48],rax
:00058 _ = %3.call y=(%4; 1)                [<INVALID>]
:00059 
  00894: 00 	mov    rdi,0x4
  0089b: 01 	sub    DWORD PTR [rip+0x108e],0x1        # 0x1930
  008a2:    	jne    0x380fd
  008a8:    	mov    rdi,r12
  008ab:    	mov    esi,DWORD PTR [rbp-0x18]
  008ae:    	mov    rdx,QWORD PTR [rbp-0x28]
  008b2: c8 	movabs rax,0x55c84f4bca80
  008bc:    	call   rax
  008be: 00 	mov    rdi,0x4
  008c5:    	jmp    0x380fd
:00061 br =>:00087
  008ca:    	jmp    0x382ab
:00062 %3 = %2.call z()                     [<INVALID>]
:00063 
  008cf: 00 	mov    rdi,0x4
  008d6: 01 	sub    DWORD PTR [rip+0x1057],0x1        # 0x1934
  008dd:    	jne    0x3813e
  008e3:    	mov    rdi,r12
  008e6:    	mov    esi,DWORD PTR [rbp-0x18]
  008e9:    	mov    rdx,QWORD PTR [rbp-0x28]
  008ed: c8 	movabs rax,0x55c84f4bca80
  008f7:    	call   rax
  008f9: 00 	mov    rdi,0x4
  00900:    	jmp    0x3813e
:00065 %4 = literal[0.6]
  00905: 00 	movq   xmm5,QWORD PTR [rip+0x102b]        # 0x1938
  0090d: 99 	movabs rax,0xff1999999999999a
  00917:    	mov    QWORD PTR [rbp-0x48],rax
:00066 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00067 condnotbr _%3 =>:00081
  0091b:    	mov    rdi,QWORD PTR [rbp-0x40]
  0091f:    	mov    rsi,QWORD PTR [rbp-0x48]
  00923: 00 	test   rdi,0x1
  0092a:    	je     0x3814d
  00930: 00 	test   rsi,0x1
  00937:    	je     0x3814d
  0093d:    	cmp    rdi,rsi
  00940:    	jge    0x38215
:00068 %3 = %2.call z()                     [<INVALID>]
:00069 
  00946: 00 	mov    rdi,0x4
  0094d: 01 	sub    DWORD PTR [rip+0xfec],0x1        # 0x1940
  00954:    	jne    0x381a2
  0095a:    	mov    rdi,r12
  0095d:    	mov    esi,DWORD PTR [rbp-0x18]
  00960:    	mov    rdx,QWORD PTR [rbp-0x28]
  00964: c8 	movabs rax,0x55c84f4bca80
  0096e:    	call   rax
  00970: 00 	mov    rdi,0x4
  00977:    	jmp    0x381a2
:00071 %4 = literal[-0.6]
  0097c: 00 	movq   xmm5,QWORD PTR [rip+0xfc4]        # 0x1948
  00984: 99 	movabs rax,0xff1999999999999e
  0098e:    	mov    QWORD PTR [rbp-0x48],rax
:00072 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00073 condnotbr _%3 =>:00081
  00992:    	mov    rdi,QWORD PTR [rbp-0x40]
  00996:    	mov    rsi,QWORD PTR [rbp-0x48]
  0099a: 00 	test   rdi,0x1
  009a1:    	je     0x381b1
  009a7: 00 	test   rsi,0x1
  009ae:    	je     0x381b1
  009b4:    	cmp    rdi,rsi
  009b7:    	jle    0x3822e
:00074 %3 = 1: i32
  009bd: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00075 %3 = %1.[%3]
  009c5:    	sub    rsp,0x20
  009c9:    	movq   QWORD PTR [rsp],xmm2
  009ce:    	movq   QWORD PTR [rsp+0x8],xmm3
  009d4:    	movq   QWORD PTR [rsp+0x10],xmm4
  009da:    	movq   QWORD PTR [rsp+0x18],xmm5
  009e0:    	mov    rdx,QWORD PTR [rbp-0x30]
  009e4:    	mov    rcx,QWORD PTR [rbp-0x40]
  009e8:    	mov    rdi,rbx
  009eb:    	mov    rsi,r12
  009ee: c8 	movabs rax,0x55c84f4b6c00
  009f8:    	call   rax
  009fa:    	movq   xmm2,QWORD PTR [rsp]
  009ff:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a05:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a0b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a11:    	add    rsp,0x20
  00a15: c8 	movabs r13,0x55c850b4a740
  00a1f:    	test   rax,rax
  00a22:    	je     0xfffee3e3
  00a28:    	mov    QWORD PTR [rbp-0x40],rax
:00076 %4 = literal[1.0]
  00a2c: 00 	movq   xmm5,QWORD PTR [rip+0xf24]        # 0x1958
  00a34: 00 	movabs rax,0xff80000000000002
  00a3e:    	mov    QWORD PTR [rbp-0x48],rax
:00077 _ = %3.call z=(%4; 1)                [<INVALID>]
:00078 
  00a42: 00 	mov    rdi,0x4
  00a49: 01 	sub    DWORD PTR [rip+0xf10],0x1        # 0x1960
  00a50:    	jne    0x38206
  00a56:    	mov    rdi,r12
  00a59:    	mov    esi,DWORD PTR [rbp-0x18]
  00a5c:    	mov    rdx,QWORD PTR [rbp-0x28]
  00a60: c8 	movabs rax,0x55c84f4bca80
  00a6a:    	call   rax
  00a6c: 00 	mov    rdi,0x4
  00a73:    	jmp    0x38206
:00080 br =>:00087
  00a78:    	jmp    0x382c4
:00081 %3 = 1: i32
  00a7d: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00082 %3 = %1.[%3]
  00a85:    	sub    rsp,0x20
  00a89:    	movq   QWORD PTR [rsp],xmm2
  00a8e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a94:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a9a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00aa0:    	mov    rdx,QWORD PTR [rbp-0x30]
  00aa4:    	mov    rcx,QWORD PTR [rbp-0x40]
  00aa8:    	mov    rdi,rbx
  00aab:    	mov    rsi,r12
  00aae: c8 	movabs rax,0x55c84f4b6c00
  00ab8:    	call   rax
  00aba:    	movq   xmm2,QWORD PTR [rsp]
  00abf:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ac5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00acb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ad1:    	add    rsp,0x20
  00ad5: c8 	movabs r13,0x55c850b4a7b0
  00adf:    	test   rax,rax
  00ae2:    	je     0xfffee3e3
  00ae8:    	mov    QWORD PTR [rbp-0x40],rax
:00083 %4 = literal[1.0]
  00aec: 00 	movq   xmm5,QWORD PTR [rip+0xe74]        # 0x1968
  00af4: 00 	movabs rax,0xff80000000000002
  00afe:    	mov    QWORD PTR [rbp-0x48],rax
:00084 _ = %3.call x=(%4; 1)                [<INVALID>]
:00085 
  00b02: 00 	mov    rdi,0x4
  00b09: 01 	sub    DWORD PTR [rip+0xe60],0x1        # 0x1970
  00b10:    	jne    0x38247
  00b16:    	mov    rdi,r12
  00b19:    	mov    esi,DWORD PTR [rbp-0x18]
  00b1c:    	mov    rdx,QWORD PTR [rbp-0x28]
  00b20: c8 	movabs rax,0x55c84f4bca80
  00b2a:    	call   rax
  00b2c: 00 	mov    rdi,0x4
  00b33:    	jmp    0x38247
:00087 %3 = 0: i32
  00b38: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  00b40: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  00b48:    	sub    rsp,0x20
  00b4c:    	movq   QWORD PTR [rsp],xmm2
  00b51:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b57:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b5d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b63:    	mov    rdx,QWORD PTR [rbp-0x30]
  00b67:    	mov    rcx,QWORD PTR [rbp-0x50]
  00b6b:    	mov    rdi,rbx
  00b6e:    	mov    rsi,r12
  00b71: c8 	movabs rax,0x55c84f4b6c00
  00b7b:    	call   rax
  00b7d:    	movq   xmm2,QWORD PTR [rsp]
  00b82:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b88:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b8e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b94:    	add    rsp,0x20
  00b98: c8 	movabs r13,0x55c850b4a820
  00ba2:    	test   rax,rax
  00ba5:    	je     0xfffee3e3
  00bab:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  00baf: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  00bb7:    	sub    rsp,0x20
  00bbb:    	movq   QWORD PTR [rsp],xmm3
  00bc0:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bc6:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bcc:    	mov    rdx,QWORD PTR [rbp-0x30]
  00bd0:    	mov    rcx,QWORD PTR [rbp-0x58]
  00bd4:    	mov    rdi,rbx
  00bd7:    	mov    rsi,r12
  00bda: c8 	movabs rax,0x55c84f4b6c00
  00be4:    	call   rax
  00be6:    	movq   xmm3,QWORD PTR [rsp]
  00beb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bf1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00bf7:    	add    rsp,0x20
  00bfb: c8 	movabs r13,0x55c850b4a840
  00c05:    	test   rax,rax
  00c08:    	je     0xfffee3e3
  00c0e:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  00c12:    	mov    rdi,QWORD PTR [rbp-0x50]
  00c16: 00 	test   rdi,0x7
  00c1d:    	jne    0x38256
  00c23:    	cmp    DWORD PTR [rdi+0x4],0x25
  00c27:    	jne    0x38256
  00c2d: 26 	cmp    DWORD PTR [rip+0xffffffffffff017f],0x26        # 0xffff0db3
  00c34:    	jne    0x38256
  00c3a:    	sub    rsp,0x10
  00c3e:    	movq   QWORD PTR [rsp],xmm3
  00c43:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c49:    	mov    rax,QWORD PTR [rbx]
  00c4c:    	lea    rdi,[rsp-0x18]
  00c51:    	mov    QWORD PTR [rdi],rax
  00c54:    	mov    QWORD PTR [rbx],rdi
  00c57: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c60:    	mov    QWORD PTR [rsp-0x38],rcx
  00c65:    	mov    rax,QWORD PTR [rbp-0x50]
  00c69:    	mov    QWORD PTR [rsp-0x38],rax
  00c6e: 00 	mov    rdi,0x1
  00c75:    	mov    rax,QWORD PTR [rbp-0x58]
  00c79:    	mov    QWORD PTR [rsp-0x40],rax
  00c7e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c87: 09 	movabs rax,0x90000003a
  00c91:    	mov    QWORD PTR [rsp-0x28],rax
  00c96: c8 	movabs r13,0x55c850b2eeb0
  00ca0:    	call   0xffff7f1c
  00ca5:    	lea    rdi,[rbp-0x8]
  00ca9:    	mov    QWORD PTR [rbx],rdi
  00cac:    	movq   xmm3,QWORD PTR [rsp]
  00cb1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00cb7:    	add    rsp,0x10
  00cbb: c8 	movabs r13,0x55c850b4a860
  00cc5:    	test   rax,rax
  00cc8:    	je     0xfffee3e3
  00cce:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  00cd2:    	sub    rsp,0x10
  00cd6:    	movq   QWORD PTR [rsp],xmm3
  00cdb:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ce1:    	mov    rdx,QWORD PTR [rbp-0x30]
  00ce5:    	mov    rcx,QWORD PTR [rbp-0x40]
  00ce9:    	mov    r8,QWORD PTR [rbp-0x48]
  00ced:    	mov    rdi,rbx
  00cf0:    	mov    rsi,r12
  00cf3: c8 	movabs rax,0x55c84f4b6d10
  00cfd:    	call   rax
  00cff:    	movq   xmm3,QWORD PTR [rsp]
  00d04:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d0a:    	add    rsp,0x10
  00d0e: c8 	movabs r13,0x55c850b4a880
  00d18:    	test   rax,rax
  00d1b:    	je     0xfffee3e3
:00096 %3 = 0: i32
  00d21: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  00d29: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  00d31:    	sub    rsp,0x10
  00d35:    	movq   QWORD PTR [rsp],xmm3
  00d3a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d40:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d44:    	mov    rcx,QWORD PTR [rbp-0x50]
  00d48:    	mov    rdi,rbx
  00d4b:    	mov    rsi,r12
  00d4e: c8 	movabs rax,0x55c84f4b6c00
  00d58:    	call   rax
  00d5a:    	movq   xmm3,QWORD PTR [rsp]
  00d5f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d65:    	add    rsp,0x10
  00d69: c8 	movabs r13,0x55c850b4a8b0
  00d73:    	test   rax,rax
  00d76:    	je     0xfffee3e3
  00d7c:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  00d80:    	mov    rdi,QWORD PTR [rbp-0x50]
  00d84: 00 	test   rdi,0x7
  00d8b:    	jne    0x38265
  00d91:    	cmp    DWORD PTR [rdi+0x4],0x25
  00d95:    	jne    0x38265
  00d9b: 26 	cmp    DWORD PTR [rip+0xffffffffffff0011],0x26        # 0xffff0db3
  00da2:    	jne    0x38265
  00da8:    	sub    rsp,0x10
  00dac:    	movq   QWORD PTR [rsp],xmm3
  00db1:    	movq   QWORD PTR [rsp+0x8],xmm4
  00db7:    	mov    rax,QWORD PTR [rbx]
  00dba:    	lea    rdi,[rsp-0x18]
  00dbf:    	mov    QWORD PTR [rdi],rax
  00dc2:    	mov    QWORD PTR [rbx],rdi
  00dc5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00dce:    	mov    QWORD PTR [rsp-0x38],rcx
  00dd3:    	mov    rax,QWORD PTR [rbp-0x50]
  00dd7:    	mov    QWORD PTR [rsp-0x38],rax
  00ddc: 00 	mov    rdi,0x0
  00de3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00dec: 07 	movabs rax,0x100070000003d
  00df6:    	mov    QWORD PTR [rsp-0x28],rax
  00dfb: c8 	movabs r13,0x55c850b416a0
  00e05:    	call   0xffff1671
  00e0a:    	lea    rdi,[rbp-0x8]
  00e0e:    	mov    QWORD PTR [rbx],rdi
  00e11:    	movq   xmm3,QWORD PTR [rsp]
  00e16:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e1c:    	add    rsp,0x10
  00e20: c8 	movabs r13,0x55c850b4a8d0
  00e2a:    	test   rax,rax
  00e2d:    	je     0xfffee3e3
  00e33:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  00e37:    	sub    rsp,0x10
  00e3b:    	movq   QWORD PTR [rsp],xmm3
  00e40:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e46:    	mov    rdx,QWORD PTR [rbp-0x30]
  00e4a:    	mov    rcx,QWORD PTR [rbp-0x40]
  00e4e:    	mov    r8,QWORD PTR [rbp-0x48]
  00e52:    	mov    rdi,rbx
  00e55:    	mov    rsi,r12
  00e58: c8 	movabs rax,0x55c84f4b6d10
  00e62:    	call   rax
  00e64:    	movq   xmm3,QWORD PTR [rsp]
  00e69:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e6f:    	add    rsp,0x10
  00e73: c8 	movabs r13,0x55c850b4a8f0
  00e7d:    	test   rax,rax
  00e80:    	je     0xfffee3e3
:00103 %3 = 1: i32
  00e86: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  00e8e: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  00e96:    	sub    rsp,0x10
  00e9a:    	movq   QWORD PTR [rsp],xmm3
  00e9f:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ea5:    	mov    rdx,QWORD PTR [rbp-0x30]
  00ea9:    	mov    rcx,QWORD PTR [rbp-0x50]
  00ead:    	mov    rdi,rbx
  00eb0:    	mov    rsi,r12
  00eb3: c8 	movabs rax,0x55c84f4b6c00
  00ebd:    	call   rax
  00ebf:    	movq   xmm3,QWORD PTR [rsp]
  00ec4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00eca:    	add    rsp,0x10
  00ece: c8 	movabs r13,0x55c850b4a920
  00ed8:    	test   rax,rax
  00edb:    	je     0xfffee3e3
  00ee1:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  00ee5: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  00eed:    	sub    rsp,0x10
  00ef1:    	movq   QWORD PTR [rsp],xmm3
  00ef6:    	movq   QWORD PTR [rsp+0x8],xmm4
  00efc:    	mov    rdx,QWORD PTR [rbp-0x30]
  00f00:    	mov    rcx,QWORD PTR [rbp-0x58]
  00f04:    	mov    rdi,rbx
  00f07:    	mov    rsi,r12
  00f0a: c8 	movabs rax,0x55c84f4b6c00
  00f14:    	call   rax
  00f16:    	movq   xmm3,QWORD PTR [rsp]
  00f1b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f21:    	add    rsp,0x10
  00f25: c8 	movabs r13,0x55c850b4a940
  00f2f:    	test   rax,rax
  00f32:    	je     0xfffee3e3
  00f38:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  00f3c:    	mov    rdi,QWORD PTR [rbp-0x50]
  00f40: 00 	test   rdi,0x7
  00f47:    	jne    0x38274
  00f4d:    	cmp    DWORD PTR [rdi+0x4],0x25
  00f51:    	jne    0x38274
  00f57: 26 	cmp    DWORD PTR [rip+0xfffffffffffefe55],0x26        # 0xffff0db3
  00f5e:    	jne    0x38274
  00f64:    	sub    rsp,0x10
  00f68:    	movq   QWORD PTR [rsp],xmm3
  00f6d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f73:    	mov    rax,QWORD PTR [rbx]
  00f76:    	lea    rdi,[rsp-0x18]
  00f7b:    	mov    QWORD PTR [rdi],rax
  00f7e:    	mov    QWORD PTR [rbx],rdi
  00f81: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f8a:    	mov    QWORD PTR [rsp-0x38],rcx
  00f8f:    	mov    rax,QWORD PTR [rbp-0x50]
  00f93:    	mov    QWORD PTR [rsp-0x38],rax
  00f98: 00 	mov    rdi,0x1
  00f9f:    	mov    rax,QWORD PTR [rbp-0x58]
  00fa3:    	mov    QWORD PTR [rsp-0x40],rax
  00fa8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fb1: 09 	movabs rax,0x90000003a
  00fbb:    	mov    QWORD PTR [rsp-0x28],rax
  00fc0: c8 	movabs r13,0x55c850b2eeb0
  00fca:    	call   0xffff7f1c
  00fcf:    	lea    rdi,[rbp-0x8]
  00fd3:    	mov    QWORD PTR [rbx],rdi
  00fd6:    	movq   xmm3,QWORD PTR [rsp]
  00fdb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fe1:    	add    rsp,0x10
  00fe5: c8 	movabs r13,0x55c850b4a960
  00fef:    	test   rax,rax
  00ff2:    	je     0xfffee3e3
  00ff8:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  00ffc:    	sub    rsp,0x10
  01000:    	movq   QWORD PTR [rsp],xmm3
  01005:    	movq   QWORD PTR [rsp+0x8],xmm4
  0100b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0100f:    	mov    rcx,QWORD PTR [rbp-0x40]
  01013:    	mov    r8,QWORD PTR [rbp-0x48]
  01017:    	mov    rdi,rbx
  0101a:    	mov    rsi,r12
  0101d: c8 	movabs rax,0x55c84f4b6d10
  01027:    	call   rax
  01029:    	movq   xmm3,QWORD PTR [rsp]
  0102e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01034:    	add    rsp,0x10
  01038: c8 	movabs r13,0x55c850b4a980
  01042:    	test   rax,rax
  01045:    	je     0xfffee3e3
:00112 %3 = 1: i32
  0104b: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  01053: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  0105b:    	sub    rsp,0x10
  0105f:    	movq   QWORD PTR [rsp],xmm3
  01064:    	movq   QWORD PTR [rsp+0x8],xmm4
  0106a:    	mov    rdx,QWORD PTR [rbp-0x30]
  0106e:    	mov    rcx,QWORD PTR [rbp-0x50]
  01072:    	mov    rdi,rbx
  01075:    	mov    rsi,r12
  01078: c8 	movabs rax,0x55c84f4b6c00
  01082:    	call   rax
  01084:    	movq   xmm3,QWORD PTR [rsp]
  01089:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0108f:    	add    rsp,0x10
  01093: c8 	movabs r13,0x55c850b4a9b0
  0109d:    	test   rax,rax
  010a0:    	je     0xfffee3e3
  010a6:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  010aa:    	mov    rdi,QWORD PTR [rbp-0x50]
  010ae: 00 	test   rdi,0x7
  010b5:    	jne    0x38283
  010bb:    	cmp    DWORD PTR [rdi+0x4],0x25
  010bf:    	jne    0x38283
  010c5: 26 	cmp    DWORD PTR [rip+0xfffffffffffefce7],0x26        # 0xffff0db3
  010cc:    	jne    0x38283
  010d2:    	sub    rsp,0x10
  010d6:    	movq   QWORD PTR [rsp],xmm3
  010db:    	movq   QWORD PTR [rsp+0x8],xmm4
  010e1:    	mov    rax,QWORD PTR [rbx]
  010e4:    	lea    rdi,[rsp-0x18]
  010e9:    	mov    QWORD PTR [rdi],rax
  010ec:    	mov    QWORD PTR [rbx],rdi
  010ef: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010f8:    	mov    QWORD PTR [rsp-0x38],rcx
  010fd:    	mov    rax,QWORD PTR [rbp-0x50]
  01101:    	mov    QWORD PTR [rsp-0x38],rax
  01106: 00 	mov    rdi,0x0
  0110d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01116: 07 	movabs rax,0x100070000003d
  01120:    	mov    QWORD PTR [rsp-0x28],rax
  01125: c8 	movabs r13,0x55c850b416a0
  0112f:    	call   0xffff1671
  01134:    	lea    rdi,[rbp-0x8]
  01138:    	mov    QWORD PTR [rbx],rdi
  0113b:    	movq   xmm3,QWORD PTR [rsp]
  01140:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01146:    	add    rsp,0x10
  0114a: c8 	movabs r13,0x55c850b4a9d0
  01154:    	test   rax,rax
  01157:    	je     0xfffee3e3
  0115d:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  01161:    	sub    rsp,0x10
  01165:    	movq   QWORD PTR [rsp],xmm3
  0116a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01170:    	mov    rdx,QWORD PTR [rbp-0x30]
  01174:    	mov    rcx,QWORD PTR [rbp-0x40]
  01178:    	mov    r8,QWORD PTR [rbp-0x48]
  0117c:    	mov    rdi,rbx
  0117f:    	mov    rsi,r12
  01182: c8 	movabs rax,0x55c84f4b6d10
  0118c:    	call   rax
  0118e:    	movq   xmm3,QWORD PTR [rsp]
  01193:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01199:    	add    rsp,0x10
  0119d: c8 	movabs r13,0x55c850b4a9f0
  011a7:    	test   rax,rax
  011aa:    	je     0xfffee3e3
:00119 %3 = %4
  011b0:    	mov    rax,QWORD PTR [rbp-0x48]
  011b4:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  011b8:    	mov    rax,QWORD PTR [rbp-0x40]
  011bc:    	leave  
  011bd:    	ret    
:00087 %3 = 0: i32
  011be: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  011c6: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  011ce:    	sub    rsp,0x20
  011d2:    	movq   QWORD PTR [rsp],xmm2
  011d7:    	movq   QWORD PTR [rsp+0x8],xmm3
  011dd:    	movq   QWORD PTR [rsp+0x10],xmm4
  011e3:    	movq   QWORD PTR [rsp+0x18],xmm5
  011e9:    	mov    rdx,QWORD PTR [rbp-0x30]
  011ed:    	mov    rcx,QWORD PTR [rbp-0x50]
  011f1:    	mov    rdi,rbx
  011f4:    	mov    rsi,r12
  011f7: c8 	movabs rax,0x55c84f4b6c00
  01201:    	call   rax
  01203:    	movq   xmm2,QWORD PTR [rsp]
  01208:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0120e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01214:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0121a:    	add    rsp,0x20
  0121e: c8 	movabs r13,0x55c850b4a820
  01228:    	test   rax,rax
  0122b:    	je     0xfffee3e3
  01231:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  01235: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  0123d:    	sub    rsp,0x20
  01241:    	movq   QWORD PTR [rsp],xmm3
  01246:    	movq   QWORD PTR [rsp+0x8],xmm4
  0124c:    	movq   QWORD PTR [rsp+0x10],xmm5
  01252:    	mov    rdx,QWORD PTR [rbp-0x30]
  01256:    	mov    rcx,QWORD PTR [rbp-0x58]
  0125a:    	mov    rdi,rbx
  0125d:    	mov    rsi,r12
  01260: c8 	movabs rax,0x55c84f4b6c00
  0126a:    	call   rax
  0126c:    	movq   xmm3,QWORD PTR [rsp]
  01271:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01277:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0127d:    	add    rsp,0x20
  01281: c8 	movabs r13,0x55c850b4a840
  0128b:    	test   rax,rax
  0128e:    	je     0xfffee3e3
  01294:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  01298:    	mov    rdi,QWORD PTR [rbp-0x50]
  0129c: 00 	test   rdi,0x7
  012a3:    	jne    0x382dd
  012a9:    	cmp    DWORD PTR [rdi+0x4],0x25
  012ad:    	jne    0x382dd
  012b3: 26 	cmp    DWORD PTR [rip+0xfffffffffffefaf9],0x26        # 0xffff0db3
  012ba:    	jne    0x382dd
  012c0:    	sub    rsp,0x10
  012c4:    	movq   QWORD PTR [rsp],xmm3
  012c9:    	movq   QWORD PTR [rsp+0x8],xmm4
  012cf:    	mov    rax,QWORD PTR [rbx]
  012d2:    	lea    rdi,[rsp-0x18]
  012d7:    	mov    QWORD PTR [rdi],rax
  012da:    	mov    QWORD PTR [rbx],rdi
  012dd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012e6:    	mov    QWORD PTR [rsp-0x38],rcx
  012eb:    	mov    rax,QWORD PTR [rbp-0x50]
  012ef:    	mov    QWORD PTR [rsp-0x38],rax
  012f4: 00 	mov    rdi,0x1
  012fb:    	mov    rax,QWORD PTR [rbp-0x58]
  012ff:    	mov    QWORD PTR [rsp-0x40],rax
  01304: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0130d: 09 	movabs rax,0x90000003a
  01317:    	mov    QWORD PTR [rsp-0x28],rax
  0131c: c8 	movabs r13,0x55c850b2eeb0
  01326:    	call   0xffff7f1c
  0132b:    	lea    rdi,[rbp-0x8]
  0132f:    	mov    QWORD PTR [rbx],rdi
  01332:    	movq   xmm3,QWORD PTR [rsp]
  01337:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0133d:    	add    rsp,0x10
  01341: c8 	movabs r13,0x55c850b4a860
  0134b:    	test   rax,rax
  0134e:    	je     0xfffee3e3
  01354:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  01358:    	sub    rsp,0x10
  0135c:    	movq   QWORD PTR [rsp],xmm3
  01361:    	movq   QWORD PTR [rsp+0x8],xmm4
  01367:    	mov    rdx,QWORD PTR [rbp-0x30]
  0136b:    	mov    rcx,QWORD PTR [rbp-0x40]
  0136f:    	mov    r8,QWORD PTR [rbp-0x48]
  01373:    	mov    rdi,rbx
  01376:    	mov    rsi,r12
  01379: c8 	movabs rax,0x55c84f4b6d10
  01383:    	call   rax
  01385:    	movq   xmm3,QWORD PTR [rsp]
  0138a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01390:    	add    rsp,0x10
  01394: c8 	movabs r13,0x55c850b4a880
  0139e:    	test   rax,rax
  013a1:    	je     0xfffee3e3
:00096 %3 = 0: i32
  013a7: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  013af: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  013b7:    	sub    rsp,0x10
  013bb:    	movq   QWORD PTR [rsp],xmm3
  013c0:    	movq   QWORD PTR [rsp+0x8],xmm4
  013c6:    	mov    rdx,QWORD PTR [rbp-0x30]
  013ca:    	mov    rcx,QWORD PTR [rbp-0x50]
  013ce:    	mov    rdi,rbx
  013d1:    	mov    rsi,r12
  013d4: c8 	movabs rax,0x55c84f4b6c00
  013de:    	call   rax
  013e0:    	movq   xmm3,QWORD PTR [rsp]
  013e5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013eb:    	add    rsp,0x10
  013ef: c8 	movabs r13,0x55c850b4a8b0
  013f9:    	test   rax,rax
  013fc:    	je     0xfffee3e3
  01402:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  01406:    	mov    rdi,QWORD PTR [rbp-0x50]
  0140a: 00 	test   rdi,0x7
  01411:    	jne    0x382ec
  01417:    	cmp    DWORD PTR [rdi+0x4],0x25
  0141b:    	jne    0x382ec
  01421: 26 	cmp    DWORD PTR [rip+0xfffffffffffef98b],0x26        # 0xffff0db3
  01428:    	jne    0x382ec
  0142e:    	sub    rsp,0x10
  01432:    	movq   QWORD PTR [rsp],xmm3
  01437:    	movq   QWORD PTR [rsp+0x8],xmm4
  0143d:    	mov    rax,QWORD PTR [rbx]
  01440:    	lea    rdi,[rsp-0x18]
  01445:    	mov    QWORD PTR [rdi],rax
  01448:    	mov    QWORD PTR [rbx],rdi
  0144b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01454:    	mov    QWORD PTR [rsp-0x38],rcx
  01459:    	mov    rax,QWORD PTR [rbp-0x50]
  0145d:    	mov    QWORD PTR [rsp-0x38],rax
  01462: 00 	mov    rdi,0x0
  01469: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01472: 07 	movabs rax,0x100070000003d
  0147c:    	mov    QWORD PTR [rsp-0x28],rax
  01481: c8 	movabs r13,0x55c850b416a0
  0148b:    	call   0xffff1671
  01490:    	lea    rdi,[rbp-0x8]
  01494:    	mov    QWORD PTR [rbx],rdi
  01497:    	movq   xmm3,QWORD PTR [rsp]
  0149c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014a2:    	add    rsp,0x10
  014a6: c8 	movabs r13,0x55c850b4a8d0
  014b0:    	test   rax,rax
  014b3:    	je     0xfffee3e3
  014b9:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  014bd:    	sub    rsp,0x10
  014c1:    	movq   QWORD PTR [rsp],xmm3
  014c6:    	movq   QWORD PTR [rsp+0x8],xmm4
  014cc:    	mov    rdx,QWORD PTR [rbp-0x30]
  014d0:    	mov    rcx,QWORD PTR [rbp-0x40]
  014d4:    	mov    r8,QWORD PTR [rbp-0x48]
  014d8:    	mov    rdi,rbx
  014db:    	mov    rsi,r12
  014de: c8 	movabs rax,0x55c84f4b6d10
  014e8:    	call   rax
  014ea:    	movq   xmm3,QWORD PTR [rsp]
  014ef:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014f5:    	add    rsp,0x10
  014f9: c8 	movabs r13,0x55c850b4a8f0
  01503:    	test   rax,rax
  01506:    	je     0xfffee3e3
:00103 %3 = 1: i32
  0150c: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  01514: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  0151c:    	sub    rsp,0x10
  01520:    	movq   QWORD PTR [rsp],xmm3
  01525:    	movq   QWORD PTR [rsp+0x8],xmm4
  0152b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0152f:    	mov    rcx,QWORD PTR [rbp-0x50]
  01533:    	mov    rdi,rbx
  01536:    	mov    rsi,r12
  01539: c8 	movabs rax,0x55c84f4b6c00
  01543:    	call   rax
  01545:    	movq   xmm3,QWORD PTR [rsp]
  0154a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01550:    	add    rsp,0x10
  01554: c8 	movabs r13,0x55c850b4a920
  0155e:    	test   rax,rax
  01561:    	je     0xfffee3e3
  01567:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  0156b: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  01573:    	sub    rsp,0x10
  01577:    	movq   QWORD PTR [rsp],xmm3
  0157c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01582:    	mov    rdx,QWORD PTR [rbp-0x30]
  01586:    	mov    rcx,QWORD PTR [rbp-0x58]
  0158a:    	mov    rdi,rbx
  0158d:    	mov    rsi,r12
  01590: c8 	movabs rax,0x55c84f4b6c00
  0159a:    	call   rax
  0159c:    	movq   xmm3,QWORD PTR [rsp]
  015a1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015a7:    	add    rsp,0x10
  015ab: c8 	movabs r13,0x55c850b4a940
  015b5:    	test   rax,rax
  015b8:    	je     0xfffee3e3
  015be:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  015c2:    	mov    rdi,QWORD PTR [rbp-0x50]
  015c6: 00 	test   rdi,0x7
  015cd:    	jne    0x382fb
  015d3:    	cmp    DWORD PTR [rdi+0x4],0x25
  015d7:    	jne    0x382fb
  015dd: 26 	cmp    DWORD PTR [rip+0xfffffffffffef7cf],0x26        # 0xffff0db3
  015e4:    	jne    0x382fb
  015ea:    	sub    rsp,0x10
  015ee:    	movq   QWORD PTR [rsp],xmm3
  015f3:    	movq   QWORD PTR [rsp+0x8],xmm4
  015f9:    	mov    rax,QWORD PTR [rbx]
  015fc:    	lea    rdi,[rsp-0x18]
  01601:    	mov    QWORD PTR [rdi],rax
  01604:    	mov    QWORD PTR [rbx],rdi
  01607: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01610:    	mov    QWORD PTR [rsp-0x38],rcx
  01615:    	mov    rax,QWORD PTR [rbp-0x50]
  01619:    	mov    QWORD PTR [rsp-0x38],rax
  0161e: 00 	mov    rdi,0x1
  01625:    	mov    rax,QWORD PTR [rbp-0x58]
  01629:    	mov    QWORD PTR [rsp-0x40],rax
  0162e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01637: 09 	movabs rax,0x90000003a
  01641:    	mov    QWORD PTR [rsp-0x28],rax
  01646: c8 	movabs r13,0x55c850b2eeb0
  01650:    	call   0xffff7f1c
  01655:    	lea    rdi,[rbp-0x8]
  01659:    	mov    QWORD PTR [rbx],rdi
  0165c:    	movq   xmm3,QWORD PTR [rsp]
  01661:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01667:    	add    rsp,0x10
  0166b: c8 	movabs r13,0x55c850b4a960
  01675:    	test   rax,rax
  01678:    	je     0xfffee3e3
  0167e:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  01682:    	sub    rsp,0x10
  01686:    	movq   QWORD PTR [rsp],xmm3
  0168b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01691:    	mov    rdx,QWORD PTR [rbp-0x30]
  01695:    	mov    rcx,QWORD PTR [rbp-0x40]
  01699:    	mov    r8,QWORD PTR [rbp-0x48]
  0169d:    	mov    rdi,rbx
  016a0:    	mov    rsi,r12
  016a3: c8 	movabs rax,0x55c84f4b6d10
  016ad:    	call   rax
  016af:    	movq   xmm3,QWORD PTR [rsp]
  016b4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016ba:    	add    rsp,0x10
  016be: c8 	movabs r13,0x55c850b4a980
  016c8:    	test   rax,rax
  016cb:    	je     0xfffee3e3
:00112 %3 = 1: i32
  016d1: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  016d9: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  016e1:    	sub    rsp,0x10
  016e5:    	movq   QWORD PTR [rsp],xmm3
  016ea:    	movq   QWORD PTR [rsp+0x8],xmm4
  016f0:    	mov    rdx,QWORD PTR [rbp-0x30]
  016f4:    	mov    rcx,QWORD PTR [rbp-0x50]
  016f8:    	mov    rdi,rbx
  016fb:    	mov    rsi,r12
  016fe: c8 	movabs rax,0x55c84f4b6c00
  01708:    	call   rax
  0170a:    	movq   xmm3,QWORD PTR [rsp]
  0170f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01715:    	add    rsp,0x10
  01719: c8 	movabs r13,0x55c850b4a9b0
  01723:    	test   rax,rax
  01726:    	je     0xfffee3e3
  0172c:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  01730:    	mov    rdi,QWORD PTR [rbp-0x50]
  01734: 00 	test   rdi,0x7
  0173b:    	jne    0x3830a
  01741:    	cmp    DWORD PTR [rdi+0x4],0x25
  01745:    	jne    0x3830a
  0174b: 26 	cmp    DWORD PTR [rip+0xfffffffffffef661],0x26        # 0xffff0db3
  01752:    	jne    0x3830a
  01758:    	sub    rsp,0x10
  0175c:    	movq   QWORD PTR [rsp],xmm3
  01761:    	movq   QWORD PTR [rsp+0x8],xmm4
  01767:    	mov    rax,QWORD PTR [rbx]
  0176a:    	lea    rdi,[rsp-0x18]
  0176f:    	mov    QWORD PTR [rdi],rax
  01772:    	mov    QWORD PTR [rbx],rdi
  01775: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0177e:    	mov    QWORD PTR [rsp-0x38],rcx
  01783:    	mov    rax,QWORD PTR [rbp-0x50]
  01787:    	mov    QWORD PTR [rsp-0x38],rax
  0178c: 00 	mov    rdi,0x0
  01793: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0179c: 07 	movabs rax,0x100070000003d
  017a6:    	mov    QWORD PTR [rsp-0x28],rax
  017ab: c8 	movabs r13,0x55c850b416a0
  017b5:    	call   0xffff1671
  017ba:    	lea    rdi,[rbp-0x8]
  017be:    	mov    QWORD PTR [rbx],rdi
  017c1:    	movq   xmm3,QWORD PTR [rsp]
  017c6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017cc:    	add    rsp,0x10
  017d0: c8 	movabs r13,0x55c850b4a9d0
  017da:    	test   rax,rax
  017dd:    	je     0xfffee3e3
  017e3:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  017e7:    	sub    rsp,0x10
  017eb:    	movq   QWORD PTR [rsp],xmm3
  017f0:    	movq   QWORD PTR [rsp+0x8],xmm4
  017f6:    	mov    rdx,QWORD PTR [rbp-0x30]
  017fa:    	mov    rcx,QWORD PTR [rbp-0x40]
  017fe:    	mov    r8,QWORD PTR [rbp-0x48]
  01802:    	mov    rdi,rbx
  01805:    	mov    rsi,r12
  01808: c8 	movabs rax,0x55c84f4b6d10
  01812:    	call   rax
  01814:    	movq   xmm3,QWORD PTR [rsp]
  01819:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0181f:    	add    rsp,0x10
  01823: c8 	movabs r13,0x55c850b4a9f0
  0182d:    	test   rax,rax
  01830:    	je     0xfffee3e3
:00119 %3 = %4
  01836:    	mov    rax,QWORD PTR [rbp-0x48]
  0183a:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  0183e:    	mov    rax,QWORD PTR [rbp-0x40]
  01842:    	leave  
  01843:    	ret    
==> start whole compile: intersect FuncId(65) self_class:Plane start:[00000] bytecode:0x55c850b33540
<== finished compile. elapsed:248.5µs
offset:Pos(79308) code: 5690 bytes  data: 266 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xa0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x40],rax
  00016:    	mov    QWORD PTR [rbp-0x48],rax
  0001a:    	mov    QWORD PTR [rbp-0x50],rax
  0001e:    	mov    QWORD PTR [rbp-0x58],rax
  00022:    	mov    QWORD PTR [rbp-0x60],rax
  00026:    	mov    QWORD PTR [rbp-0x68],rax
  0002a:    	mov    QWORD PTR [rbp-0x70],rax
  0002e:    	mov    QWORD PTR [rbp-0x78],rax
  00032:    	mov    QWORD PTR [rbp-0x80],rax
  00036: ff 	mov    QWORD PTR [rbp-0x88],rax
  0003d: ff 	mov    QWORD PTR [rbp-0x90],rax
  00044:    	mov    rdi,QWORD PTR [rbp-0x28]
  00048: 00 	test   rdi,0x7
  0004f:    	jne    0x369a5
  00055:    	cmp    DWORD PTR [rdi+0x4],0x29
  00059:    	jne    0x369a5
:00000 %7 = @p: Plane[IvarId(0)]
  0005f:    	mov    rdi,QWORD PTR [rbp-0x28]
  00063:    	cmp    WORD PTR [rdi+0x2],0x3
  00068:    	jne    0x369b4
  0006e:    	mov    rax,QWORD PTR [rdi+0x10]
  00072:    	mov    QWORD PTR [rbp-0x60],rax
:00001 %8 = @n: Plane[IvarId(1)]
  00076:    	mov    rdi,QWORD PTR [rbp-0x28]
  0007a:    	cmp    WORD PTR [rdi+0x2],0x3
  0007f:    	jne    0x369ca
  00085:    	mov    rax,QWORD PTR [rdi+0x18]
  00089:    	mov    QWORD PTR [rbp-0x68],rax
:00002 %3 = %7.call vdot(%8; 1)             [Vec]
:00003 
  0008d:    	mov    rdi,QWORD PTR [rbp-0x60]
  00091: 00 	test   rdi,0x7
  00098:    	jne    0x369e0
  0009e:    	cmp    DWORD PTR [rdi+0x4],0x25
  000a2:    	jne    0x369e0
  000a8: 26 	cmp    DWORD PTR [rip+0xfffffffffffef390],0x26        # 0xfffef43f
  000af:    	jne    0x369e0
  000b5:    	mov    rax,QWORD PTR [rbx]
  000b8:    	lea    rdi,[rsp-0x18]
  000bd:    	mov    QWORD PTR [rdi],rax
  000c0:    	mov    QWORD PTR [rbx],rdi
  000c3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000cc:    	mov    QWORD PTR [rsp-0x38],rcx
  000d1:    	mov    rax,QWORD PTR [rbp-0x60]
  000d5:    	mov    QWORD PTR [rsp-0x38],rax
  000da: 00 	mov    rdi,0x1
  000e1:    	mov    rax,QWORD PTR [rbp-0x68]
  000e5:    	mov    QWORD PTR [rsp-0x40],rax
  000ea: 00 	mov    QWORD PTR [rsp-0x30],0x0
  000f3: 05 	movabs rax,0x100050000003b
  000fd:    	mov    QWORD PTR [rsp-0x28],rax
  00102: c8 	movabs r13,0x55c850b7b010
  0010c:    	call   0xffff0129
  00111:    	lea    rdi,[rbp-0x8]
  00115:    	mov    QWORD PTR [rbx],rdi
  00118: c8 	movabs r13,0x55c850b33580
  00122:    	test   rax,rax
  00125:    	je     0xfffeca6f
  0012b:    	mov    QWORD PTR [rbp-0x40],rax
:00005 %3 = neg %3                          [Float]
  0012f:    	mov    rdi,QWORD PTR [rbp-0x40]
  00133: 00 	test   rdi,0x1
  0013a:    	jne    0x369ef
  00140: 00 	test   rdi,0x2
  00147:    	je     0x183
  0014d:    	xorps  xmm2,xmm2
  00150: 00 	movabs rax,0x8000000000000002
  0015a:    	cmp    rdi,rax
  0015d:    	je     0x195
  00163:    	mov    rax,rdi
  00166:    	sar    rax,0x3f
  0016a:    	add    rax,0x2
  0016e:    	and    rdi,0xfffffffffffffffc
  00172:    	or     rdi,rax
  00175:    	rol    rdi,0x3d
  00179:    	movq   xmm2,rdi
  0017e:    	jmp    0x195
  00183:    	call   0xfffecaa8
  00188:    	test   rax,rax
  0018b:    	je     0x369ef
  00191:    	movq   xmm2,xmm0
  00195: 00 	xorps  xmm2,XMMWORD PTR [rip+0x14a8]        # 0x1644
:00006 %7 = %1.call dir()                   [Ray]
:00007 
  0019c:    	mov    rdi,QWORD PTR [rbp-0x30]
  001a0: 00 	test   rdi,0x7
  001a7:    	jne    0x369fe
  001ad:    	cmp    DWORD PTR [rdi+0x4],0x2b
  001b1:    	jne    0x369fe
  001b7: 26 	cmp    DWORD PTR [rip+0xfffffffffffef281],0x26        # 0xfffef43f
  001be:    	jne    0x369fe
  001c4:    	mov    esi,DWORD PTR [rip+0x1486]        # 0x1650
  001ca:    	cmp    esi,0xffffffff
  001cd:    	je     0x36a1a
  001d3:    	cmp    WORD PTR [rdi+0x2],0x3
  001d8:    	jne    0x1f1
  001de:    	cmp    esi,0x6
  001e1:    	jge    0x1f1
  001e7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ec:    	jmp    0x20f
  001f1:    	sub    rsp,0x10
  001f5:    	movq   QWORD PTR [rsp],xmm2
  001fa: c8 	movabs rax,0x55c84f4d3440
  00204:    	call   rax
  00206:    	movq   xmm2,QWORD PTR [rsp]
  0020b:    	add    rsp,0x10
  0020f:    	mov    QWORD PTR [rbp-0x60],rax
:00009 %8 = @n: Plane[IvarId(1)]
  00213:    	mov    rdi,QWORD PTR [rbp-0x28]
  00217:    	cmp    WORD PTR [rdi+0x2],0x3
  0021c:    	jne    0x36a55
  00222:    	mov    rax,QWORD PTR [rdi+0x18]
  00226:    	mov    QWORD PTR [rbp-0x68],rax
:00010 %4 = %7.call vdot(%8; 1)             [Vec]
:00011 
  0022a:    	mov    rdi,QWORD PTR [rbp-0x60]
  0022e: 00 	test   rdi,0x7
  00235:    	jne    0x36a7d
  0023b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0023f:    	jne    0x36a7d
  00245: 26 	cmp    DWORD PTR [rip+0xfffffffffffef1f3],0x26        # 0xfffef43f
  0024c:    	jne    0x36a7d
  00252:    	sub    rsp,0x10
  00256:    	movq   QWORD PTR [rsp],xmm2
  0025b:    	mov    rax,QWORD PTR [rbx]
  0025e:    	lea    rdi,[rsp-0x18]
  00263:    	mov    QWORD PTR [rdi],rax
  00266:    	mov    QWORD PTR [rbx],rdi
  00269: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00272:    	mov    QWORD PTR [rsp-0x38],rcx
  00277:    	mov    rax,QWORD PTR [rbp-0x60]
  0027b:    	mov    QWORD PTR [rsp-0x38],rax
  00280: 00 	mov    rdi,0x1
  00287:    	mov    rax,QWORD PTR [rbp-0x68]
  0028b:    	mov    QWORD PTR [rsp-0x40],rax
  00290: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00299: 05 	movabs rax,0x100050000003b
  002a3:    	mov    QWORD PTR [rsp-0x28],rax
  002a8: c8 	movabs r13,0x55c850b7b010
  002b2:    	call   0xffff0129
  002b7:    	lea    rdi,[rbp-0x8]
  002bb:    	mov    QWORD PTR [rbx],rdi
  002be:    	movq   xmm2,QWORD PTR [rsp]
  002c3:    	add    rsp,0x10
  002c7: c8 	movabs r13,0x55c850b33600
  002d1:    	test   rax,rax
  002d4:    	je     0xfffeca6f
  002da:    	mov    QWORD PTR [rbp-0x48],rax
:00013 %5 = %4
  002de:    	mov    rax,QWORD PTR [rbp-0x48]
  002e2:    	mov    QWORD PTR [rbp-0x50],rax
:00014 %7 = literal[0.0]
  002e6: 00 	movq   xmm3,QWORD PTR [rip+0x1366]        # 0x1654
  002ee: 00 	movabs rax,0x8000000000000002
  002f8:    	mov    QWORD PTR [rbp-0x60],rax
:00015 _%7 = %4 < %7                        [Float][Float]
:00016 condnotbr _%7 =>:00020
  002fc:    	mov    rdi,QWORD PTR [rbp-0x48]
  00300: 00 	test   rdi,0x1
  00307:    	jne    0x36a99
  0030d: 00 	test   rdi,0x2
  00314:    	je     0x350
  0031a:    	xorps  xmm4,xmm4
  0031d: 00 	movabs rax,0x8000000000000002
  00327:    	cmp    rdi,rax
  0032a:    	je     0x362
  00330:    	mov    rax,rdi
  00333:    	sar    rax,0x3f
  00337:    	add    rax,0x2
  0033b:    	and    rdi,0xfffffffffffffffc
  0033f:    	or     rdi,rax
  00342:    	rol    rdi,0x3d
  00346:    	movq   xmm4,rdi
  0034b:    	jmp    0x362
  00350:    	call   0xfffecaa8
  00355:    	test   rax,rax
  00358:    	je     0x36a99
  0035e:    	movq   xmm4,xmm0
  00362:    	ucomisd xmm4,xmm3
  00366:    	jae    0x36ab5
:00017 %5 = %4
:00018 %5 = neg %5                          [Float]
  0036c:    	movq   xmm5,xmm4
  00370: 00 	xorps  xmm5,XMMWORD PTR [rip+0x12ed]        # 0x1664
:00019 br =>:00020
  00377:    	jmp    0x36adb
:00020 %7 = literal[1e-17]
  0037c: 00 	movq   xmm3,QWORD PTR [rip+0x12f0]        # 0x1674
  00384: aa 	movabs rax,0xe33877aa3236a4ba
  0038e:    	mov    QWORD PTR [rbp-0x60],rax
:00021 _%7 = %5 < %7                        [Float][Float]
:00022 condnotbr _%7 =>:00026
  00392:    	mov    rdi,QWORD PTR [rbp-0x50]
  00396: 00 	test   rdi,0x1
  0039d:    	jne    0x36b0e
  003a3: 00 	test   rdi,0x2
  003aa:    	je     0x3e6
  003b0:    	xorps  xmm5,xmm5
  003b3: 00 	movabs rax,0x8000000000000002
  003bd:    	cmp    rdi,rax
  003c0:    	je     0x3f8
  003c6:    	mov    rax,rdi
  003c9:    	sar    rax,0x3f
  003cd:    	add    rax,0x2
  003d1:    	and    rdi,0xfffffffffffffffc
  003d5:    	or     rdi,rax
  003d8:    	rol    rdi,0x3d
  003dc:    	movq   xmm5,rdi
  003e1:    	jmp    0x3f8
  003e6:    	call   0xfffecaa8
  003eb:    	test   rax,rax
  003ee:    	je     0x36b0e
  003f4:    	movq   xmm5,xmm0
  003f8:    	ucomisd xmm5,xmm3
  003fc:    	jae    0x410
:00023 %7 = nil
  00402: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00024 ret %7
  0040a:    	mov    rax,QWORD PTR [rbp-0x60]
  0040e:    	leave  
  0040f:    	ret    
:00026 %8 = %1.call org()                   [Ray]
:00027 
  00410:    	mov    rdi,QWORD PTR [rbp-0x30]
  00414: 00 	test   rdi,0x7
  0041b:    	jne    0x36b2a
  00421:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00425:    	jne    0x36b2a
  0042b: 26 	cmp    DWORD PTR [rip+0xfffffffffffef00d],0x26        # 0xfffef43f
  00432:    	jne    0x36b2a
  00438:    	mov    esi,DWORD PTR [rip+0x1242]        # 0x1680
  0043e:    	cmp    esi,0xffffffff
  00441:    	je     0x36b46
  00447:    	cmp    WORD PTR [rdi+0x2],0x3
  0044c:    	jne    0x465
  00452:    	cmp    esi,0x6
  00455:    	jge    0x465
  0045b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00460:    	jmp    0x4a7
  00465:    	sub    rsp,0x20
  00469:    	movq   QWORD PTR [rsp],xmm2
  0046e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00474:    	movq   QWORD PTR [rsp+0x10],xmm4
  0047a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00480: c8 	movabs rax,0x55c84f4d3440
  0048a:    	call   rax
  0048c:    	movq   xmm2,QWORD PTR [rsp]
  00491:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00497:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0049d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  004a3:    	add    rsp,0x20
  004a7:    	mov    QWORD PTR [rbp-0x68],rax
:00029 %9 = @n: Plane[IvarId(1)]
  004ab:    	mov    rdi,QWORD PTR [rbp-0x28]
  004af:    	cmp    WORD PTR [rdi+0x2],0x3
  004b4:    	jne    0x36ba5
  004ba:    	mov    rax,QWORD PTR [rdi+0x18]
  004be:    	mov    QWORD PTR [rbp-0x70],rax
:00030 %7 = %8.call vdot(%9; 1)             [Vec]
:00031 
  004c2:    	mov    rdi,QWORD PTR [rbp-0x68]
  004c6: 00 	test   rdi,0x7
  004cd:    	jne    0x36bf1
  004d3:    	cmp    DWORD PTR [rdi+0x4],0x25
  004d7:    	jne    0x36bf1
  004dd: 26 	cmp    DWORD PTR [rip+0xfffffffffffeef5b],0x26        # 0xfffef43f
  004e4:    	jne    0x36bf1
  004ea:    	sub    rsp,0x20
  004ee:    	movq   QWORD PTR [rsp],xmm2
  004f3:    	movq   QWORD PTR [rsp+0x8],xmm4
  004f9:    	movq   QWORD PTR [rsp+0x10],xmm5
  004ff:    	mov    rax,QWORD PTR [rbx]
  00502:    	lea    rdi,[rsp-0x18]
  00507:    	mov    QWORD PTR [rdi],rax
  0050a:    	mov    QWORD PTR [rbx],rdi
  0050d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00516:    	mov    QWORD PTR [rsp-0x38],rcx
  0051b:    	mov    rax,QWORD PTR [rbp-0x68]
  0051f:    	mov    QWORD PTR [rsp-0x38],rax
  00524: 00 	mov    rdi,0x1
  0052b:    	mov    rax,QWORD PTR [rbp-0x70]
  0052f:    	mov    QWORD PTR [rsp-0x40],rax
  00534: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0053d: 05 	movabs rax,0x100050000003b
  00547:    	mov    QWORD PTR [rsp-0x28],rax
  0054c: c8 	movabs r13,0x55c850b7b010
  00556:    	call   0xffff0129
  0055b:    	lea    rdi,[rbp-0x8]
  0055f:    	mov    QWORD PTR [rbx],rdi
  00562:    	movq   xmm2,QWORD PTR [rsp]
  00567:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0056d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00573:    	add    rsp,0x20
  00577: c8 	movabs r13,0x55c850b33740
  00581:    	test   rax,rax
  00584:    	je     0xfffeca6f
  0058a:    	mov    QWORD PTR [rbp-0x60],rax
:00033 %7 = %7 + %3                         [Float][Float]
  0058e:    	mov    rdi,QWORD PTR [rbp-0x60]
  00592: 00 	test   rdi,0x1
  00599:    	jne    0x36c0d
  0059f: 00 	test   rdi,0x2
  005a6:    	je     0x5e2
  005ac:    	xorps  xmm3,xmm3
  005af: 00 	movabs rax,0x8000000000000002
  005b9:    	cmp    rdi,rax
  005bc:    	je     0x5f4
  005c2:    	mov    rax,rdi
  005c5:    	sar    rax,0x3f
  005c9:    	add    rax,0x2
  005cd:    	and    rdi,0xfffffffffffffffc
  005d1:    	or     rdi,rax
  005d4:    	rol    rdi,0x3d
  005d8:    	movq   xmm3,rdi
  005dd:    	jmp    0x5f4
  005e2:    	call   0xfffecaa8
  005e7:    	test   rax,rax
  005ea:    	je     0x36c0d
  005f0:    	movq   xmm3,xmm0
  005f4:    	addsd  xmm3,xmm2
:00034 %7 = neg %7                          [Float]
  005f8: 00 	xorps  xmm3,XMMWORD PTR [rip+0x1085]        # 0x1684
:00035 %6 = %7 / %4                         [Float][Float]
  005ff:    	movq   xmm6,xmm3
  00603:    	movq   rax,xmm4
  00608:    	test   rax,rax
  0060b:    	je     0xfffeca94
  00611:    	divsd  xmm6,xmm4
:00036 %7 = literal[0.0]
  00615: 00 	movq   xmm3,QWORD PTR [rip+0x1077]        # 0x1694
  0061d: 00 	movabs rax,0x8000000000000002
  00627:    	mov    QWORD PTR [rbp-0x60],rax
:00037 _%7 = %6 > %7                        [Float][Float]
:00038 condnotbr _%7 =>:00105
  0062b:    	ucomisd xmm6,xmm3
  0062f:    	jbe    0x378a9
:00039 %7 = %2.call t()                     [Isect]
:00040 
  00635:    	mov    rdi,QWORD PTR [rbp-0x38]
  00639: 00 	test   rdi,0x7
  00640:    	jne    0x36c29
  00646:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0064a:    	jne    0x36c29
  00650: 26 	cmp    DWORD PTR [rip+0xfffffffffffeede8],0x26        # 0xfffef43f
  00657:    	jne    0x36c29
  0065d:    	mov    esi,DWORD PTR [rip+0x103d]        # 0x16a0
  00663:    	cmp    esi,0xffffffff
  00666:    	je     0x36c52
  0066c:    	cmp    WORD PTR [rdi+0x2],0x3
  00671:    	jne    0x68a
  00677:    	cmp    esi,0x6
  0067a:    	jge    0x68a
  00680:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00685:    	jmp    0x6cc
  0068a:    	sub    rsp,0x20
  0068e:    	movq   QWORD PTR [rsp],xmm2
  00693:    	movq   QWORD PTR [rsp+0x8],xmm4
  00699:    	movq   QWORD PTR [rsp+0x10],xmm5
  0069f:    	movq   QWORD PTR [rsp+0x18],xmm6
  006a5: c8 	movabs rax,0x55c84f4d3440
  006af:    	call   rax
  006b1:    	movq   xmm2,QWORD PTR [rsp]
  006b6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  006bc:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006c2:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006c8:    	add    rsp,0x20
  006cc:    	mov    QWORD PTR [rbp-0x60],rax
:00042 _%7 = %6 < %7                        [Float][Float]
:00043 condnotbr _%7 =>:00105
  006d0:    	mov    rdi,QWORD PTR [rbp-0x60]
  006d4: 00 	test   rdi,0x1
  006db:    	jne    0x36cb1
  006e1: 00 	test   rdi,0x2
  006e8:    	je     0x724
  006ee:    	xorps  xmm3,xmm3
  006f1: 00 	movabs rax,0x8000000000000002
  006fb:    	cmp    rdi,rax
  006fe:    	je     0x736
  00704:    	mov    rax,rdi
  00707:    	sar    rax,0x3f
  0070b:    	add    rax,0x2
  0070f:    	and    rdi,0xfffffffffffffffc
  00713:    	or     rdi,rax
  00716:    	rol    rdi,0x3d
  0071a:    	movq   xmm3,rdi
  0071f:    	jmp    0x736
  00724:    	call   0xfffecaa8
  00729:    	test   rax,rax
  0072c:    	je     0x36cb1
  00732:    	movq   xmm3,xmm0
  00736:    	ucomisd xmm6,xmm3
  0073a:    	jae    0x378dc
:00044 %7 = literal[true]
  00740: 00 	mov    rax,0x1c
  00747:    	mov    QWORD PTR [rbp-0x60],rax
:00045 _ = %2.call hit=(%7; 1)              [Isect]
:00046 
  0074b:    	mov    rdi,QWORD PTR [rbp-0x38]
  0074f: 00 	test   rdi,0x7
  00756:    	jne    0x36cda
  0075c:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00760:    	jne    0x36cda
  00766: 26 	cmp    DWORD PTR [rip+0xfffffffffffeecd2],0x26        # 0xfffef43f
  0076d:    	jne    0x36cda
  00773:    	mov    esi,DWORD PTR [rip+0xf2f]        # 0x16a8
  00779:    	cmp    esi,0xffffffff
  0077c:    	je     0x36d03
  00782:    	cmp    WORD PTR [rdi+0x2],0x3
  00787:    	jne    0x7a4
  0078d:    	cmp    esi,0x6
  00790:    	jge    0x7a4
  00796:    	mov    rax,QWORD PTR [rbp-0x60]
  0079a:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0079f:    	jmp    0x7fd
  007a4:    	sub    rsp,0x20
  007a8:    	movq   QWORD PTR [rsp],xmm2
  007ad:    	movq   QWORD PTR [rsp+0x8],xmm4
  007b3:    	movq   QWORD PTR [rsp+0x10],xmm5
  007b9:    	movq   QWORD PTR [rsp+0x18],xmm6
  007bf:    	mov    rdx,QWORD PTR [rbp-0x60]
  007c3: c8 	movabs rax,0x55c84f4d36c0
  007cd:    	call   rax
  007cf:    	movq   xmm2,QWORD PTR [rsp]
  007d4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007da:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007e0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007e6:    	add    rsp,0x20
  007ea: c8 	movabs r13,0x55c850b33830
  007f4:    	test   rax,rax
  007f7:    	je     0xfffeca6f
:00048 _ = %2.call t=(%6; 1)                [Isect]
:00049 
  007fd:    	movq   xmm0,xmm6
  00801:    	call   0xfffecb9b
  00806:    	mov    QWORD PTR [rbp-0x58],rax
  0080a:    	mov    rdi,QWORD PTR [rbp-0x38]
  0080e: 00 	test   rdi,0x7
  00815:    	jne    0x36d69
  0081b:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0081f:    	jne    0x36d69
  00825: 26 	cmp    DWORD PTR [rip+0xfffffffffffeec13],0x26        # 0xfffef43f
  0082c:    	jne    0x36d69
  00832:    	mov    esi,DWORD PTR [rip+0xe78]        # 0x16b0
  00838:    	cmp    esi,0xffffffff
  0083b:    	je     0x36d85
  00841:    	cmp    WORD PTR [rdi+0x2],0x3
  00846:    	jne    0x863
  0084c:    	cmp    esi,0x6
  0084f:    	jge    0x863
  00855:    	mov    rax,QWORD PTR [rbp-0x58]
  00859:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0085e:    	jmp    0x8bc
  00863:    	sub    rsp,0x20
  00867:    	movq   QWORD PTR [rsp],xmm2
  0086c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00872:    	movq   QWORD PTR [rsp+0x10],xmm5
  00878:    	movq   QWORD PTR [rsp+0x18],xmm6
  0087e:    	mov    rdx,QWORD PTR [rbp-0x58]
  00882: c8 	movabs rax,0x55c84f4d36c0
  0088c:    	call   rax
  0088e:    	movq   xmm2,QWORD PTR [rsp]
  00893:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00899:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0089f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008a5:    	add    rsp,0x20
  008a9: c8 	movabs r13,0x55c850b33860
  008b3:    	test   rax,rax
  008b6:    	je     0xfffeca6f
:00051 %7 = @n: Plane[IvarId(1)]
  008bc:    	mov    rdi,QWORD PTR [rbp-0x28]
  008c0:    	cmp    WORD PTR [rdi+0x2],0x3
  008c5:    	jne    0x36deb
  008cb:    	mov    rax,QWORD PTR [rdi+0x18]
  008cf:    	mov    QWORD PTR [rbp-0x60],rax
:00052 _ = %2.call n=(%7; 1)                [Isect]
:00053 
  008d3:    	mov    rdi,QWORD PTR [rbp-0x38]
  008d7: 00 	test   rdi,0x7
  008de:    	jne    0x36e37
  008e4:    	cmp    DWORD PTR [rdi+0x4],0x2d
  008e8:    	jne    0x36e37
  008ee: 26 	cmp    DWORD PTR [rip+0xfffffffffffeeb4a],0x26        # 0xfffef43f
  008f5:    	jne    0x36e37
  008fb:    	mov    esi,DWORD PTR [rip+0xdb7]        # 0x16b8
  00901:    	cmp    esi,0xffffffff
  00904:    	je     0x36e53
  0090a:    	cmp    WORD PTR [rdi+0x2],0x3
  0090f:    	jne    0x92c
  00915:    	cmp    esi,0x6
  00918:    	jge    0x92c
  0091e:    	mov    rax,QWORD PTR [rbp-0x60]
  00922:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00927:    	jmp    0x985
  0092c:    	sub    rsp,0x20
  00930:    	movq   QWORD PTR [rsp],xmm2
  00935:    	movq   QWORD PTR [rsp+0x8],xmm4
  0093b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00941:    	movq   QWORD PTR [rsp+0x18],xmm6
  00947:    	mov    rdx,QWORD PTR [rbp-0x60]
  0094b: c8 	movabs rax,0x55c84f4d36c0
  00955:    	call   rax
  00957:    	movq   xmm2,QWORD PTR [rsp]
  0095c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00962:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00968:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0096e:    	add    rsp,0x20
  00972: c8 	movabs r13,0x55c850b338a0
  0097c:    	test   rax,rax
  0097f:    	je     0xfffeca6f
:00055 %8 = const[Vec]                      [Vec]
  00985: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeeab8]        # 0xfffef444
  0098c: 00 	cmp    rax,QWORD PTR [rip+0xd41]        # 0x16d4
  00993:    	jne    0x36eb9
  00999: 00 	mov    rax,QWORD PTR [rip+0xd24]        # 0x16c4
  009a0:    	mov    QWORD PTR [rbp-0x68],rax
:00056 %10 = %1.call org()                  [Ray]
:00057 
  009a4:    	mov    rdi,QWORD PTR [rbp-0x30]
  009a8: 00 	test   rdi,0x7
  009af:    	jne    0x36f35
  009b5:    	cmp    DWORD PTR [rdi+0x4],0x2b
  009b9:    	jne    0x36f35
  009bf: 26 	cmp    DWORD PTR [rip+0xfffffffffffeea79],0x26        # 0xfffef43f
  009c6:    	jne    0x36f35
  009cc:    	mov    esi,DWORD PTR [rip+0xd0e]        # 0x16e0
  009d2:    	cmp    esi,0xffffffff
  009d5:    	je     0x36f51
  009db:    	cmp    WORD PTR [rdi+0x2],0x3
  009e0:    	jne    0x9f9
  009e6:    	cmp    esi,0x6
  009e9:    	jge    0x9f9
  009ef:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009f4:    	jmp    0xa3b
  009f9:    	sub    rsp,0x20
  009fd:    	movq   QWORD PTR [rsp],xmm2
  00a02:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a08:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a0e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a14: c8 	movabs rax,0x55c84f4d3440
  00a1e:    	call   rax
  00a20:    	movq   xmm2,QWORD PTR [rsp]
  00a25:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a2b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a31:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a37:    	add    rsp,0x20
  00a3b:    	mov    QWORD PTR [rbp-0x78],rax
:00059 %9 = %10.call x()                    [Vec]
:00060 
  00a3f:    	mov    rdi,QWORD PTR [rbp-0x78]
  00a43: 00 	test   rdi,0x7
  00a4a:    	jne    0x36fb0
  00a50:    	cmp    DWORD PTR [rdi+0x4],0x25
  00a54:    	jne    0x36fb0
  00a5a: 26 	cmp    DWORD PTR [rip+0xfffffffffffee9de],0x26        # 0xfffef43f
  00a61:    	jne    0x36fb0
  00a67:    	mov    esi,DWORD PTR [rip+0xc7b]        # 0x16e8
  00a6d:    	cmp    esi,0xffffffff
  00a70:    	je     0x36fcc
  00a76:    	cmp    WORD PTR [rdi+0x2],0x3
  00a7b:    	jne    0xa94
  00a81:    	cmp    esi,0x6
  00a84:    	jge    0xa94
  00a8a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a8f:    	jmp    0xad6
  00a94:    	sub    rsp,0x20
  00a98:    	movq   QWORD PTR [rsp],xmm2
  00a9d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00aa3:    	movq   QWORD PTR [rsp+0x10],xmm5
  00aa9:    	movq   QWORD PTR [rsp+0x18],xmm6
  00aaf: c8 	movabs rax,0x55c84f4d3440
  00ab9:    	call   rax
  00abb:    	movq   xmm2,QWORD PTR [rsp]
  00ac0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ac6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00acc:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ad2:    	add    rsp,0x20
  00ad6:    	mov    QWORD PTR [rbp-0x70],rax
:00062 %11 = %1.call dir()                  [Ray]
:00063 
  00ada:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ade: 00 	test   rdi,0x7
  00ae5:    	jne    0x3702b
  00aeb:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00aef:    	jne    0x3702b
  00af5: 26 	cmp    DWORD PTR [rip+0xfffffffffffee943],0x26        # 0xfffef43f
  00afc:    	jne    0x3702b
  00b02:    	mov    esi,DWORD PTR [rip+0xbe8]        # 0x16f0
  00b08:    	cmp    esi,0xffffffff
  00b0b:    	je     0x37047
  00b11:    	cmp    WORD PTR [rdi+0x2],0x3
  00b16:    	jne    0xb2f
  00b1c:    	cmp    esi,0x6
  00b1f:    	jge    0xb2f
  00b25:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b2a:    	jmp    0xb71
  00b2f:    	sub    rsp,0x20
  00b33:    	movq   QWORD PTR [rsp],xmm2
  00b38:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b3e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b44:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b4a: c8 	movabs rax,0x55c84f4d3440
  00b54:    	call   rax
  00b56:    	movq   xmm2,QWORD PTR [rsp]
  00b5b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b61:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b67:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b6d:    	add    rsp,0x20
  00b71:    	mov    QWORD PTR [rbp-0x80],rax
:00065 %10 = %11.call x()                   [Vec]
:00066 
  00b75:    	mov    rdi,QWORD PTR [rbp-0x80]
  00b79: 00 	test   rdi,0x7
  00b80:    	jne    0x370a6
  00b86:    	cmp    DWORD PTR [rdi+0x4],0x25
  00b8a:    	jne    0x370a6
  00b90: 26 	cmp    DWORD PTR [rip+0xfffffffffffee8a8],0x26        # 0xfffef43f
  00b97:    	jne    0x370a6
  00b9d:    	mov    esi,DWORD PTR [rip+0xb55]        # 0x16f8
  00ba3:    	cmp    esi,0xffffffff
  00ba6:    	je     0x370c2
  00bac:    	cmp    WORD PTR [rdi+0x2],0x3
  00bb1:    	jne    0xbca
  00bb7:    	cmp    esi,0x6
  00bba:    	jge    0xbca
  00bc0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00bc5:    	jmp    0xc0c
  00bca:    	sub    rsp,0x20
  00bce:    	movq   QWORD PTR [rsp],xmm2
  00bd3:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bd9:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bdf:    	movq   QWORD PTR [rsp+0x18],xmm6
  00be5: c8 	movabs rax,0x55c84f4d3440
  00bef:    	call   rax
  00bf1:    	movq   xmm2,QWORD PTR [rsp]
  00bf6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bfc:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c02:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c08:    	add    rsp,0x20
  00c0c:    	mov    QWORD PTR [rbp-0x78],rax
:00068 %10 = %6 * %10                       [Float][Float]
  00c10:    	mov    rdi,QWORD PTR [rbp-0x78]
  00c14: 00 	test   rdi,0x1
  00c1b:    	jne    0x37121
  00c21: 00 	test   rdi,0x2
  00c28:    	je     0xc64
  00c2e:    	xorps  xmm3,xmm3
  00c31: 00 	movabs rax,0x8000000000000002
  00c3b:    	cmp    rdi,rax
  00c3e:    	je     0xc76
  00c44:    	mov    rax,rdi
  00c47:    	sar    rax,0x3f
  00c4b:    	add    rax,0x2
  00c4f:    	and    rdi,0xfffffffffffffffc
  00c53:    	or     rdi,rax
  00c56:    	rol    rdi,0x3d
  00c5a:    	movq   xmm3,rdi
  00c5f:    	jmp    0xc76
  00c64:    	call   0xfffecaa8
  00c69:    	test   rax,rax
  00c6c:    	je     0x37121
  00c72:    	movq   xmm3,xmm0
  00c76:    	mulsd  xmm3,xmm6
:00069 %9 = %9 + %10                        [Float][Float]
  00c7a:    	mov    rdi,QWORD PTR [rbp-0x70]
  00c7e: 00 	test   rdi,0x1
  00c85:    	jne    0x3713d
  00c8b: 00 	test   rdi,0x2
  00c92:    	je     0xcce
  00c98:    	xorps  xmm7,xmm7
  00c9b: 00 	movabs rax,0x8000000000000002
  00ca5:    	cmp    rdi,rax
  00ca8:    	je     0xce0
  00cae:    	mov    rax,rdi
  00cb1:    	sar    rax,0x3f
  00cb5:    	add    rax,0x2
  00cb9:    	and    rdi,0xfffffffffffffffc
  00cbd:    	or     rdi,rax
  00cc0:    	rol    rdi,0x3d
  00cc4:    	movq   xmm7,rdi
  00cc9:    	jmp    0xce0
  00cce:    	call   0xfffecaa8
  00cd3:    	test   rax,rax
  00cd6:    	je     0x3713d
  00cdc:    	movq   xmm7,xmm0
  00ce0:    	addsd  xmm7,xmm3
:00070 %11 = %1.call org()                  [Ray]
:00071 
  00ce4:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ce8: 00 	test   rdi,0x7
  00cef:    	jne    0x37166
  00cf5:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00cf9:    	jne    0x37166
  00cff: 26 	cmp    DWORD PTR [rip+0xfffffffffffee739],0x26        # 0xfffef43f
  00d06:    	jne    0x37166
  00d0c:    	mov    esi,DWORD PTR [rip+0x9ee]        # 0x1700
  00d12:    	cmp    esi,0xffffffff
  00d15:    	je     0x3719c
  00d1b:    	cmp    WORD PTR [rdi+0x2],0x3
  00d20:    	jne    0xd39
  00d26:    	cmp    esi,0x6
  00d29:    	jge    0xd39
  00d2f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d34:    	jmp    0xd93
  00d39:    	sub    rsp,0x30
  00d3d:    	movq   QWORD PTR [rsp],xmm2
  00d42:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d48:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d4e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d54:    	movq   QWORD PTR [rsp+0x20],xmm6
  00d5a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00d60: c8 	movabs rax,0x55c84f4d3440
  00d6a:    	call   rax
  00d6c:    	movq   xmm2,QWORD PTR [rsp]
  00d71:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d77:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d7d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d83:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d89:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d8f:    	add    rsp,0x30
  00d93:    	mov    QWORD PTR [rbp-0x80],rax
:00073 %10 = %11.call y()                   [Vec]
:00074 
  00d97:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d9b: 00 	test   rdi,0x7
  00da2:    	jne    0x37213
  00da8:    	cmp    DWORD PTR [rdi+0x4],0x25
  00dac:    	jne    0x37213
  00db2: 26 	cmp    DWORD PTR [rip+0xfffffffffffee686],0x26        # 0xfffef43f
  00db9:    	jne    0x37213
  00dbf:    	mov    esi,DWORD PTR [rip+0x943]        # 0x1708
  00dc5:    	cmp    esi,0xffffffff
  00dc8:    	je     0x3723c
  00dce:    	cmp    WORD PTR [rdi+0x2],0x3
  00dd3:    	jne    0xdec
  00dd9:    	cmp    esi,0x6
  00ddc:    	jge    0xdec
  00de2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00de7:    	jmp    0xe3a
  00dec:    	sub    rsp,0x30
  00df0:    	movq   QWORD PTR [rsp],xmm2
  00df5:    	movq   QWORD PTR [rsp+0x8],xmm4
  00dfb:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e01:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e07:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e0d: c8 	movabs rax,0x55c84f4d3440
  00e17:    	call   rax
  00e19:    	movq   xmm2,QWORD PTR [rsp]
  00e1e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e24:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e2a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e30:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e36:    	add    rsp,0x30
  00e3a:    	mov    QWORD PTR [rbp-0x78],rax
:00076 %12 = %1.call dir()                  [Ray]
:00077 
  00e3e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00e42: 00 	test   rdi,0x7
  00e49:    	jne    0x372a7
  00e4f:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00e53:    	jne    0x372a7
  00e59: 26 	cmp    DWORD PTR [rip+0xfffffffffffee5df],0x26        # 0xfffef43f
  00e60:    	jne    0x372a7
  00e66:    	mov    esi,DWORD PTR [rip+0x8a4]        # 0x1710
  00e6c:    	cmp    esi,0xffffffff
  00e6f:    	je     0x372d0
  00e75:    	cmp    WORD PTR [rdi+0x2],0x3
  00e7a:    	jne    0xe93
  00e80:    	cmp    esi,0x6
  00e83:    	jge    0xe93
  00e89:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e8e:    	jmp    0xee1
  00e93:    	sub    rsp,0x30
  00e97:    	movq   QWORD PTR [rsp],xmm2
  00e9c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ea2:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ea8:    	movq   QWORD PTR [rsp+0x18],xmm6
  00eae:    	movq   QWORD PTR [rsp+0x20],xmm7
  00eb4: c8 	movabs rax,0x55c84f4d3440
  00ebe:    	call   rax
  00ec0:    	movq   xmm2,QWORD PTR [rsp]
  00ec5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ecb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ed1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ed7:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00edd:    	add    rsp,0x30
  00ee1: ff 	mov    QWORD PTR [rbp-0x88],rax
:00079 %11 = %12.call y()                   [Vec]
:00080 
  00ee8: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00eef: 00 	test   rdi,0x7
  00ef6:    	jne    0x3733b
  00efc:    	cmp    DWORD PTR [rdi+0x4],0x25
  00f00:    	jne    0x3733b
  00f06: 26 	cmp    DWORD PTR [rip+0xfffffffffffee532],0x26        # 0xfffef43f
  00f0d:    	jne    0x3733b
  00f13:    	mov    esi,DWORD PTR [rip+0x7ff]        # 0x1718
  00f19:    	cmp    esi,0xffffffff
  00f1c:    	je     0x37364
  00f22:    	cmp    WORD PTR [rdi+0x2],0x3
  00f27:    	jne    0xf40
  00f2d:    	cmp    esi,0x6
  00f30:    	jge    0xf40
  00f36:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f3b:    	jmp    0xf8e
  00f40:    	sub    rsp,0x30
  00f44:    	movq   QWORD PTR [rsp],xmm2
  00f49:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f4f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f55:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f5b:    	movq   QWORD PTR [rsp+0x20],xmm7
  00f61: c8 	movabs rax,0x55c84f4d3440
  00f6b:    	call   rax
  00f6d:    	movq   xmm2,QWORD PTR [rsp]
  00f72:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f78:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f7e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f84:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00f8a:    	add    rsp,0x30
  00f8e:    	mov    QWORD PTR [rbp-0x80],rax
:00082 %11 = %6 * %11                       [Float][Float]
  00f92:    	mov    rdi,QWORD PTR [rbp-0x80]
  00f96: 00 	test   rdi,0x1
  00f9d:    	jne    0x373cf
  00fa3: 00 	test   rdi,0x2
  00faa:    	je     0xfe6
  00fb0:    	xorps  xmm3,xmm3
  00fb3: 00 	movabs rax,0x8000000000000002
  00fbd:    	cmp    rdi,rax
  00fc0:    	je     0xff8
  00fc6:    	mov    rax,rdi
  00fc9:    	sar    rax,0x3f
  00fcd:    	add    rax,0x2
  00fd1:    	and    rdi,0xfffffffffffffffc
  00fd5:    	or     rdi,rax
  00fd8:    	rol    rdi,0x3d
  00fdc:    	movq   xmm3,rdi
  00fe1:    	jmp    0xff8
  00fe6:    	call   0xfffecaa8
  00feb:    	test   rax,rax
  00fee:    	je     0x373cf
  00ff4:    	movq   xmm3,xmm0
  00ff8:    	mulsd  xmm3,xmm6
:00083 %10 = %10 + %11                      [Float][Float]
  00ffc:    	mov    rdi,QWORD PTR [rbp-0x78]
  01000: 00 	test   rdi,0x1
  01007:    	jne    0x373f8
  0100d: 00 	test   rdi,0x2
  01014:    	je     0x1051
  0101a:    	xorps  xmm8,xmm8
  0101e: 00 	movabs rax,0x8000000000000002
  01028:    	cmp    rdi,rax
  0102b:    	je     0x1064
  01031:    	mov    rax,rdi
  01034:    	sar    rax,0x3f
  01038:    	add    rax,0x2
  0103c:    	and    rdi,0xfffffffffffffffc
  01040:    	or     rdi,rax
  01043:    	rol    rdi,0x3d
  01047:    	movq   xmm8,rdi
  0104c:    	jmp    0x1064
  01051:    	call   0xfffecaa8
  01056:    	test   rax,rax
  01059:    	je     0x373f8
  0105f:    	movq   xmm8,xmm0
  01064:    	addsd  xmm8,xmm3
:00084 %12 = %1.call org()                  [Ray]
:00085 
  01069:    	mov    rdi,QWORD PTR [rbp-0x30]
  0106d: 00 	test   rdi,0x7
  01074:    	jne    0x3742e
  0107a:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0107e:    	jne    0x3742e
  01084: 26 	cmp    DWORD PTR [rip+0xfffffffffffee3b4],0x26        # 0xfffef43f
  0108b:    	jne    0x3742e
  01091:    	mov    esi,DWORD PTR [rip+0x689]        # 0x1720
  01097:    	cmp    esi,0xffffffff
  0109a:    	je     0x37472
  010a0:    	cmp    WORD PTR [rdi+0x2],0x3
  010a5:    	jne    0x10be
  010ab:    	cmp    esi,0x6
  010ae:    	jge    0x10be
  010b4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010b9:    	jmp    0x1126
  010be:    	sub    rsp,0x40
  010c2:    	movq   QWORD PTR [rsp],xmm2
  010c7:    	movq   QWORD PTR [rsp+0x8],xmm3
  010cd:    	movq   QWORD PTR [rsp+0x10],xmm4
  010d3:    	movq   QWORD PTR [rsp+0x18],xmm5
  010d9:    	movq   QWORD PTR [rsp+0x20],xmm6
  010df:    	movq   QWORD PTR [rsp+0x28],xmm7
  010e5: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  010ec: c8 	movabs rax,0x55c84f4d3440
  010f6:    	call   rax
  010f8:    	movq   xmm2,QWORD PTR [rsp]
  010fd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01103:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01109:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0110f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01115:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0111b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01122:    	add    rsp,0x40
  01126: ff 	mov    QWORD PTR [rbp-0x88],rax
:00087 %11 = %12.call z()                   [Vec]
:00088 
  0112d: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01134: 00 	test   rdi,0x7
  0113b:    	jne    0x374f7
  01141:    	cmp    DWORD PTR [rdi+0x4],0x25
  01145:    	jne    0x374f7
  0114b: 26 	cmp    DWORD PTR [rip+0xfffffffffffee2ed],0x26        # 0xfffef43f
  01152:    	jne    0x374f7
  01158:    	mov    esi,DWORD PTR [rip+0x5ca]        # 0x1728
  0115e:    	cmp    esi,0xffffffff
  01161:    	je     0x3752e
  01167:    	cmp    WORD PTR [rdi+0x2],0x3
  0116c:    	jne    0x1185
  01172:    	cmp    esi,0x6
  01175:    	jge    0x1185
  0117b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01180:    	jmp    0x11e1
  01185:    	sub    rsp,0x30
  01189:    	movq   QWORD PTR [rsp],xmm2
  0118e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01194:    	movq   QWORD PTR [rsp+0x10],xmm5
  0119a:    	movq   QWORD PTR [rsp+0x18],xmm6
  011a0:    	movq   QWORD PTR [rsp+0x20],xmm7
  011a6: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  011ad: c8 	movabs rax,0x55c84f4d3440
  011b7:    	call   rax
  011b9:    	movq   xmm2,QWORD PTR [rsp]
  011be:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011c4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011ca:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011d0:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011d6: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  011dd:    	add    rsp,0x30
  011e1:    	mov    QWORD PTR [rbp-0x80],rax
:00090 %13 = %1.call dir()                  [Ray]
:00091 
  011e5:    	mov    rdi,QWORD PTR [rbp-0x30]
  011e9: 00 	test   rdi,0x7
  011f0:    	jne    0x375a7
  011f6:    	cmp    DWORD PTR [rdi+0x4],0x2b
  011fa:    	jne    0x375a7
  01200: 26 	cmp    DWORD PTR [rip+0xfffffffffffee238],0x26        # 0xfffef43f
  01207:    	jne    0x375a7
  0120d:    	mov    esi,DWORD PTR [rip+0x51d]        # 0x1730
  01213:    	cmp    esi,0xffffffff
  01216:    	je     0x375de
  0121c:    	cmp    WORD PTR [rdi+0x2],0x3
  01221:    	jne    0x123a
  01227:    	cmp    esi,0x6
  0122a:    	jge    0x123a
  01230:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01235:    	jmp    0x1296
  0123a:    	sub    rsp,0x30
  0123e:    	movq   QWORD PTR [rsp],xmm2
  01243:    	movq   QWORD PTR [rsp+0x8],xmm4
  01249:    	movq   QWORD PTR [rsp+0x10],xmm5
  0124f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01255:    	movq   QWORD PTR [rsp+0x20],xmm7
  0125b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01262: c8 	movabs rax,0x55c84f4d3440
  0126c:    	call   rax
  0126e:    	movq   xmm2,QWORD PTR [rsp]
  01273:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01279:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0127f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01285:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0128b: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01292:    	add    rsp,0x30
  01296: ff 	mov    QWORD PTR [rbp-0x90],rax
:00093 %12 = %13.call z()                   [Vec]
:00094 
  0129d: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  012a4: 00 	test   rdi,0x7
  012ab:    	jne    0x37657
  012b1:    	cmp    DWORD PTR [rdi+0x4],0x25
  012b5:    	jne    0x37657
  012bb: 26 	cmp    DWORD PTR [rip+0xfffffffffffee17d],0x26        # 0xfffef43f
  012c2:    	jne    0x37657
  012c8:    	mov    esi,DWORD PTR [rip+0x46a]        # 0x1738
  012ce:    	cmp    esi,0xffffffff
  012d1:    	je     0x3768e
  012d7:    	cmp    WORD PTR [rdi+0x2],0x3
  012dc:    	jne    0x12f5
  012e2:    	cmp    esi,0x6
  012e5:    	jge    0x12f5
  012eb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  012f0:    	jmp    0x1351
  012f5:    	sub    rsp,0x30
  012f9:    	movq   QWORD PTR [rsp],xmm2
  012fe:    	movq   QWORD PTR [rsp+0x8],xmm4
  01304:    	movq   QWORD PTR [rsp+0x10],xmm5
  0130a:    	movq   QWORD PTR [rsp+0x18],xmm6
  01310:    	movq   QWORD PTR [rsp+0x20],xmm7
  01316: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0131d: c8 	movabs rax,0x55c84f4d3440
  01327:    	call   rax
  01329:    	movq   xmm2,QWORD PTR [rsp]
  0132e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01334:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0133a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01340:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01346: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0134d:    	add    rsp,0x30
  01351: ff 	mov    QWORD PTR [rbp-0x88],rax
:00096 %12 = %6 * %12                       [Float][Float]
  01358: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0135f: 00 	test   rdi,0x1
  01366:    	jne    0x37707
  0136c: 00 	test   rdi,0x2
  01373:    	je     0x13af
  01379:    	xorps  xmm3,xmm3
  0137c: 00 	movabs rax,0x8000000000000002
  01386:    	cmp    rdi,rax
  01389:    	je     0x13c1
  0138f:    	mov    rax,rdi
  01392:    	sar    rax,0x3f
  01396:    	add    rax,0x2
  0139a:    	and    rdi,0xfffffffffffffffc
  0139e:    	or     rdi,rax
  013a1:    	rol    rdi,0x3d
  013a5:    	movq   xmm3,rdi
  013aa:    	jmp    0x13c1
  013af:    	call   0xfffecaa8
  013b4:    	test   rax,rax
  013b7:    	je     0x37707
  013bd:    	movq   xmm3,xmm0
  013c1:    	mulsd  xmm3,xmm6
:00097 %11 = %11 + %12                      [Float][Float]
  013c5:    	mov    rdi,QWORD PTR [rbp-0x80]
  013c9: 00 	test   rdi,0x1
  013d0:    	jne    0x3773e
  013d6: 00 	test   rdi,0x2
  013dd:    	je     0x141a
  013e3:    	xorps  xmm9,xmm9
  013e7: 00 	movabs rax,0x8000000000000002
  013f1:    	cmp    rdi,rax
  013f4:    	je     0x142d
  013fa:    	mov    rax,rdi
  013fd:    	sar    rax,0x3f
  01401:    	add    rax,0x2
  01405:    	and    rdi,0xfffffffffffffffc
  01409:    	or     rdi,rax
  0140c:    	rol    rdi,0x3d
  01410:    	movq   xmm9,rdi
  01415:    	jmp    0x142d
  0141a:    	call   0xfffecaa8
  0141f:    	test   rax,rax
  01422:    	je     0x3773e
  01428:    	movq   xmm9,xmm0
  0142d:    	addsd  xmm9,xmm3
:00098 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
:00099 
  01432:    	movq   xmm0,xmm7
  01436:    	call   0xfffecb9b
  0143b:    	mov    QWORD PTR [rbp-0x70],rax
  0143f:    	movq   xmm0,xmm8
  01444:    	call   0xfffecb9b
  01449:    	mov    QWORD PTR [rbp-0x78],rax
  0144d:    	movq   xmm0,xmm9
  01452:    	call   0xfffecb9b
  01457:    	mov    QWORD PTR [rbp-0x80],rax
  0145b:    	mov    rdi,QWORD PTR [rbp-0x68]
  0145f: 00 	test   rdi,0x7
  01466:    	jne    0x37785
  0146c:    	cmp    DWORD PTR [rdi+0x4],0x26
  01470:    	jne    0x37785
  01476: 26 	cmp    DWORD PTR [rip+0xfffffffffffedfc2],0x26        # 0xfffef43f
  0147d:    	jne    0x37785
  01483: 00 	mov    r9,0x0
  0148a:    	sub    rsp,0x40
  0148e:    	movq   QWORD PTR [rsp],xmm2
  01493:    	movq   QWORD PTR [rsp+0x8],xmm3
  01499:    	movq   QWORD PTR [rsp+0x10],xmm4
  0149f:    	movq   QWORD PTR [rsp+0x18],xmm5
  014a5:    	movq   QWORD PTR [rsp+0x20],xmm6
  014ab:    	movq   QWORD PTR [rsp+0x28],xmm7
  014b1: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014b8: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014bf:    	mov    rdx,rdi
  014c2:    	mov    rax,QWORD PTR [rbx]
  014c5:    	lea    rdi,[rsp-0x18]
  014ca:    	mov    QWORD PTR [rdi],rax
  014cd:    	mov    QWORD PTR [rbx],rdi
  014d0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014d9:    	mov    QWORD PTR [rsp-0x38],rcx
  014de:    	lea    rcx,[rbp-0x70]
  014e2: 00 	mov    r8,0x3
  014e9:    	call   0x377b1
  014ee:    	lea    rdi,[rbp-0x8]
  014f2:    	mov    QWORD PTR [rbx],rdi
  014f5:    	movq   xmm2,QWORD PTR [rsp]
  014fa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01500:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01506:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0150c:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01512:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01518: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0151f: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01526:    	add    rsp,0x40
  0152a: c8 	movabs r13,0x55c850b33b80
  01534:    	test   rax,rax
  01537:    	je     0xfffeca6f
  0153d:    	mov    QWORD PTR [rbp-0x60],rax
:00101 _ = %2.call pl=(%7; 1)               [Isect]
:00102 
  01541:    	mov    rdi,QWORD PTR [rbp-0x38]
  01545: 00 	test   rdi,0x7
  0154c:    	jne    0x377e3
  01552:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01556:    	jne    0x377e3
  0155c: 26 	cmp    DWORD PTR [rip+0xfffffffffffededc],0x26        # 0xfffef43f
  01563:    	jne    0x377e3
  01569:    	mov    esi,DWORD PTR [rip+0x1d1]        # 0x1740
  0156f:    	cmp    esi,0xffffffff
  01572:    	je     0x3780f
  01578:    	cmp    WORD PTR [rdi+0x2],0x3
  0157d:    	jne    0x159a
  01583:    	cmp    esi,0x6
  01586:    	jge    0x159a
  0158c:    	mov    rax,QWORD PTR [rbp-0x60]
  01590:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01595:    	jmp    0x1627
  0159a:    	sub    rsp,0x40
  0159e:    	movq   QWORD PTR [rsp],xmm2
  015a3:    	movq   QWORD PTR [rsp+0x8],xmm3
  015a9:    	movq   QWORD PTR [rsp+0x10],xmm4
  015af:    	movq   QWORD PTR [rsp+0x18],xmm5
  015b5:    	movq   QWORD PTR [rsp+0x20],xmm6
  015bb:    	movq   QWORD PTR [rsp+0x28],xmm7
  015c1: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015c8: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015cf:    	mov    rdx,QWORD PTR [rbp-0x60]
  015d3: c8 	movabs rax,0x55c84f4d36c0
  015dd:    	call   rax
  015df:    	movq   xmm2,QWORD PTR [rsp]
  015e4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015ea:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015f0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015f6:    	movq   xmm6,QWORD PTR [rsp+0x20]
  015fc:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01602: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01609: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01610:    	add    rsp,0x40
  01614: c8 	movabs r13,0x55c850b33bb0
  0161e:    	test   rax,rax
  01621:    	je     0xfffeca6f
:00104 br =>:00105
  01627:    	jmp    0x3790f
:00105 %7 = nil
  0162c: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00106 ret %7
  01634:    	mov    rax,QWORD PTR [rbp-0x60]
  01638:    	leave  
  01639:    	ret    
==> start whole compile: <unnamed> FuncId(73) self_class:Scene start:[00000] bytecode:0x55c850b29f70
<== finished compile. elapsed:162.4µs
offset:Pos(85264) code: 8983 bytes  data: 417 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xb0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d:    	mov    rdi,QWORD PTR [rbp-0x28]
  00061: 00 	test   rdi,0x7
  00068:    	jne    0x36201
  0006e:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00072:    	jne    0x36201
:00000 %13 = %0.call rand()                 [Scene]
:00001 
  00078:    	mov    rdi,QWORD PTR [rbp-0x28]
  0007c: 26 	cmp    DWORD PTR [rip+0xfffffffffffedc78],0x26        # 0xfffedcfb
  00083:    	jne    0x36210
  00089: 00 	mov    r9,0x0
  00090:    	mov    rdx,rdi
  00093:    	mov    rax,QWORD PTR [rbx]
  00096:    	lea    rdi,[rsp-0x18]
  0009b:    	mov    QWORD PTR [rdi],rax
  0009e:    	mov    QWORD PTR [rbx],rdi
  000a1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000aa:    	mov    QWORD PTR [rsp-0x38],rcx
  000af: ff 	lea    rcx,[rbp-0x98]
  000b6: 00 	mov    r8,0x0
  000bd:    	call   0x3621f
  000c2:    	lea    rdi,[rbp-0x8]
  000c6:    	mov    QWORD PTR [rbx],rdi
  000c9: c8 	movabs r13,0x55c850b29f90
  000d3:    	test   rax,rax
  000d6:    	je     0xfffeb32b
  000dc: ff 	mov    QWORD PTR [rbp-0x90],rax
:00003 %2 = %13
  000e3: ff 	mov    rax,QWORD PTR [rbp-0x90]
  000ea:    	mov    QWORD PTR [rbp-0x38],rax
:00004 %13 = literal[2.0]
  000ee: 00 	movq   xmm2,QWORD PTR [rip+0x222a]        # 0x2320
  000f6: 00 	mov    rax,0x2
  000fd: ff 	mov    QWORD PTR [rbp-0x90],rax
:00005 %14 = literal[3.14159265]
  00104: 00 	movq   xmm3,QWORD PTR [rip+0x2224]        # 0x2330
  0010c: da 	movabs rax,0x490fda9e46a78a
  00116: ff 	mov    QWORD PTR [rbp-0x98],rax
:00006 %13 = %13 * %14                      [Float][Float]
  0011d:    	mulsd  xmm2,xmm3
:00007 %14 = %0.call rand()                 [Scene]
:00008 
  00121:    	mov    rdi,QWORD PTR [rbp-0x28]
  00125: 26 	cmp    DWORD PTR [rip+0xfffffffffffedbcf],0x26        # 0xfffedcfb
  0012c:    	jne    0x36251
  00132: 00 	mov    r9,0x0
  00139:    	sub    rsp,0x10
  0013d:    	movq   QWORD PTR [rsp],xmm2
  00142:    	mov    rdx,rdi
  00145:    	mov    rax,QWORD PTR [rbx]
  00148:    	lea    rdi,[rsp-0x18]
  0014d:    	mov    QWORD PTR [rdi],rax
  00150:    	mov    QWORD PTR [rbx],rdi
  00153: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0015c:    	mov    QWORD PTR [rsp-0x38],rcx
  00161: ff 	lea    rcx,[rbp-0xa0]
  00168: 00 	mov    r8,0x0
  0016f:    	call   0x36270
  00174:    	lea    rdi,[rbp-0x8]
  00178:    	mov    QWORD PTR [rbx],rdi
  0017b:    	movq   xmm2,QWORD PTR [rsp]
  00180:    	add    rsp,0x10
  00184: c8 	movabs r13,0x55c850b2a000
  0018e:    	test   rax,rax
  00191:    	je     0xfffeb32b
  00197: ff 	mov    QWORD PTR [rbp-0x98],rax
:00010 %3 = %13 * %14                       [Float][Float]
  0019e: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001a5: 00 	test   rdi,0x1
  001ac:    	jne    0x362a2
  001b2: 00 	test   rdi,0x2
  001b9:    	je     0x1f5
  001bf:    	xorps  xmm3,xmm3
  001c2: 00 	movabs rax,0x8000000000000002
  001cc:    	cmp    rdi,rax
  001cf:    	je     0x207
  001d5:    	mov    rax,rdi
  001d8:    	sar    rax,0x3f
  001dc:    	add    rax,0x2
  001e0:    	and    rdi,0xfffffffffffffffc
  001e4:    	or     rdi,rax
  001e7:    	rol    rdi,0x3d
  001eb:    	movq   xmm3,rdi
  001f0:    	jmp    0x207
  001f5:    	call   0xfffeb364
  001fa:    	test   rax,rax
  001fd:    	je     0x362a2
  00203:    	movq   xmm3,xmm0
  00207:    	movq   xmm4,xmm2
  0020b:    	mulsd  xmm4,xmm3
:00011 %14 = const[Math]                    [Math]
  0020f: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffedaea]        # 0xfffedd00
  00216: 00 	cmp    rax,QWORD PTR [rip+0x2133]        # 0x2350
  0021d:    	jne    0x362c1
  00223: 00 	mov    rax,QWORD PTR [rip+0x2116]        # 0x2340
  0022a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %15 = %3
:00013 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
:00014 
  00231: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00238: 00 	test   rdi,0x7
  0023f:    	jne    0x36325
  00245:    	cmp    DWORD PTR [rdi+0x4],0x20
  00249:    	jne    0x36325
  0024f: 26 	cmp    DWORD PTR [rip+0xfffffffffffedaa5],0x26        # 0xfffedcfb
  00256:    	jne    0x36325
  0025c:    	sub    rsp,0x10
  00260:    	movq   QWORD PTR [rsp],xmm2
  00265:    	movq   QWORD PTR [rsp+0x8],xmm4
  0026b:    	movq   xmm0,xmm4
  0026f: c8 	movabs rax,0x55c84f49b6f0
  00279:    	call   rax
  0027b:    	movq   xmm2,QWORD PTR [rsp]
  00280:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00286:    	add    rsp,0x10
  0028a:    	movq   xmm2,xmm0
:00016 %15 = const[Math]                    [Math]
  0028e: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeda6b]        # 0xfffedd00
  00295: 00 	cmp    rax,QWORD PTR [rip+0x20d4]        # 0x2370
  0029c:    	jne    0x36348
  002a2: 00 	mov    rax,QWORD PTR [rip+0x20b7]        # 0x2360
  002a9: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00017 %16 = literal[1.0]
  002b0: 00 	movq   xmm3,QWORD PTR [rip+0x20c8]        # 0x2380
  002b8: 00 	movabs rax,0xff80000000000002
  002c2: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00018 %16 = %16 - %2                       [Float][Float]
  002c9:    	mov    rdi,QWORD PTR [rbp-0x38]
  002cd: 00 	test   rdi,0x1
  002d4:    	jne    0x363ac
  002da: 00 	test   rdi,0x2
  002e1:    	je     0x31d
  002e7:    	xorps  xmm5,xmm5
  002ea: 00 	movabs rax,0x8000000000000002
  002f4:    	cmp    rdi,rax
  002f7:    	je     0x32f
  002fd:    	mov    rax,rdi
  00300:    	sar    rax,0x3f
  00304:    	add    rax,0x2
  00308:    	and    rdi,0xfffffffffffffffc
  0030c:    	or     rdi,rax
  0030f:    	rol    rdi,0x3d
  00313:    	movq   xmm5,rdi
  00318:    	jmp    0x32f
  0031d:    	call   0xfffeb364
  00322:    	test   rax,rax
  00325:    	je     0x363ac
  0032b:    	movq   xmm5,xmm0
  0032f:    	subsd  xmm3,xmm5
:00019 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
:00020 
  00333: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0033a: 00 	test   rdi,0x7
  00341:    	jne    0x363d8
  00347:    	cmp    DWORD PTR [rdi+0x4],0x20
  0034b:    	jne    0x363d8
  00351: 26 	cmp    DWORD PTR [rip+0xfffffffffffed9a3],0x26        # 0xfffedcfb
  00358:    	jne    0x363d8
  0035e:    	sqrtsd xmm6,xmm3
:00022 %4 = %13 * %14                       [Float][Float]
  00362:    	movq   xmm7,xmm2
  00366:    	mulsd  xmm7,xmm6
:00023 %14 = const[Math]                    [Math]
  0036a: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffed98f]        # 0xfffedd00
  00371: 00 	cmp    rax,QWORD PTR [rip+0x2028]        # 0x23a0
  00378:    	jne    0x36414
  0037e: 00 	mov    rax,QWORD PTR [rip+0x200b]        # 0x2390
  00385: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %15 = %3
:00025 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
:00026 
  0038c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00393: 00 	test   rdi,0x7
  0039a:    	jne    0x3649c
  003a0:    	cmp    DWORD PTR [rdi+0x4],0x20
  003a4:    	jne    0x3649c
  003aa: 26 	cmp    DWORD PTR [rip+0xfffffffffffed94a],0x26        # 0xfffedcfb
  003b1:    	jne    0x3649c
  003b7:    	sub    rsp,0x30
  003bb:    	movq   QWORD PTR [rsp],xmm2
  003c0:    	movq   QWORD PTR [rsp+0x8],xmm3
  003c6:    	movq   QWORD PTR [rsp+0x10],xmm4
  003cc:    	movq   QWORD PTR [rsp+0x18],xmm5
  003d2:    	movq   QWORD PTR [rsp+0x20],xmm7
  003d8:    	movq   xmm0,xmm4
  003dc: c8 	movabs rax,0x55c84f49b700
  003e6:    	call   rax
  003e8:    	movq   xmm2,QWORD PTR [rsp]
  003ed:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003f3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003f9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  003ff:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00405:    	add    rsp,0x30
  00409:    	movq   xmm2,xmm0
:00028 %15 = const[Math]                    [Math]
  0040d: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffed8ec]        # 0xfffedd00
  00414: 00 	cmp    rax,QWORD PTR [rip+0x1fa5]        # 0x23c0
  0041b:    	jne    0x364dc
  00421: 00 	mov    rax,QWORD PTR [rip+0x1f88]        # 0x23b0
  00428: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00029 %16 = literal[1.0]
  0042f: 00 	movq   xmm3,QWORD PTR [rip+0x1f99]        # 0x23d0
  00437: 00 	movabs rax,0xff80000000000002
  00441: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00030 %16 = %16 - %2                       [Float][Float]
  00448:    	subsd  xmm3,xmm5
:00031 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
:00032 
  0044c: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00453: 00 	test   rdi,0x7
  0045a:    	jne    0x36564
  00460:    	cmp    DWORD PTR [rdi+0x4],0x20
  00464:    	jne    0x36564
  0046a: 26 	cmp    DWORD PTR [rip+0xfffffffffffed88a],0x26        # 0xfffedcfb
  00471:    	jne    0x36564
  00477:    	sqrtsd xmm6,xmm3
:00034 %5 = %13 * %14                       [Float][Float]
  0047b:    	movq   xmm8,xmm2
  00480:    	mulsd  xmm8,xmm6
:00035 %13 = const[Math]                    [Math]
  00485: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffed874]        # 0xfffedd00
  0048c: 00 	cmp    rax,QWORD PTR [rip+0x1f5d]        # 0x23f0
  00493:    	jne    0x365ad
  00499: 00 	mov    rax,QWORD PTR [rip+0x1f40]        # 0x23e0
  004a0: ff 	mov    QWORD PTR [rbp-0x90],rax
:00036 %14 = %2
:00037 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
:00038 
  004a7: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  004ae: 00 	test   rdi,0x7
  004b5:    	jne    0x36643
  004bb:    	cmp    DWORD PTR [rdi+0x4],0x20
  004bf:    	jne    0x36643
  004c5: 26 	cmp    DWORD PTR [rip+0xfffffffffffed82f],0x26        # 0xfffedcfb
  004cc:    	jne    0x36643
  004d2:    	sqrtsd xmm2,xmm5
:00040 %14 = dynvar(2, %2)
  004d6:    	mov    rax,QWORD PTR [rbp-0x10]
  004da:    	mov    rax,QWORD PTR [rax]
  004dd:    	mov    rax,QWORD PTR [rax-0x28]
  004e1: ff 	mov    QWORD PTR [rbp-0x98],rax
:00041 %15 = 0: i32
  004e8: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00042 %14 = %14.[%15]
  004f3:    	sub    rsp,0x30
  004f7:    	movq   QWORD PTR [rsp],xmm2
  004fc:    	movq   QWORD PTR [rsp+0x8],xmm3
  00502:    	movq   QWORD PTR [rsp+0x10],xmm4
  00508:    	movq   QWORD PTR [rsp+0x18],xmm5
  0050e:    	movq   QWORD PTR [rsp+0x20],xmm7
  00514: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0051b: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00522: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00529:    	mov    rdi,rbx
  0052c:    	mov    rsi,r12
  0052f: c8 	movabs rax,0x55c84f4b6c00
  00539:    	call   rax
  0053b:    	movq   xmm2,QWORD PTR [rsp]
  00540:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00546:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0054c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00552:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00558: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0055f:    	add    rsp,0x30
  00563: c8 	movabs r13,0x55c850b2a220
  0056d:    	test   rax,rax
  00570:    	je     0xfffeb32b
  00576: ff 	mov    QWORD PTR [rbp-0x98],rax
:00043 %13 = %14.call x()                   [Vec]
:00044 
  0057d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00584: 00 	test   rdi,0x7
  0058b:    	jne    0x3669a
  00591:    	cmp    DWORD PTR [rdi+0x4],0x25
  00595:    	jne    0x3669a
  0059b: 26 	cmp    DWORD PTR [rip+0xfffffffffffed759],0x26        # 0xfffedcfb
  005a2:    	jne    0x3669a
  005a8:    	mov    esi,DWORD PTR [rip+0x1e4e]        # 0x23fc
  005ae:    	cmp    esi,0xffffffff
  005b1:    	je     0x366ee
  005b7:    	cmp    WORD PTR [rdi+0x2],0x3
  005bc:    	jne    0x5d5
  005c2:    	cmp    esi,0x6
  005c5:    	jge    0x5d5
  005cb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005d0:    	jmp    0x631
  005d5:    	sub    rsp,0x30
  005d9:    	movq   QWORD PTR [rsp],xmm2
  005de:    	movq   QWORD PTR [rsp+0x8],xmm3
  005e4:    	movq   QWORD PTR [rsp+0x10],xmm4
  005ea:    	movq   QWORD PTR [rsp+0x18],xmm5
  005f0:    	movq   QWORD PTR [rsp+0x20],xmm7
  005f6: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  005fd: c8 	movabs rax,0x55c84f4d3440
  00607:    	call   rax
  00609:    	movq   xmm2,QWORD PTR [rsp]
  0060e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00614:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0061a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00620:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00626: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0062d:    	add    rsp,0x30
  00631: ff 	mov    QWORD PTR [rbp-0x90],rax
:00046 %13 = %4 * %13                       [Float][Float]
  00638: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0063f: 00 	test   rdi,0x1
  00646:    	jne    0x36767
  0064c: 00 	test   rdi,0x2
  00653:    	je     0x68f
  00659:    	xorps  xmm6,xmm6
  0065c: 00 	movabs rax,0x8000000000000002
  00666:    	cmp    rdi,rax
  00669:    	je     0x6a1
  0066f:    	mov    rax,rdi
  00672:    	sar    rax,0x3f
  00676:    	add    rax,0x2
  0067a:    	and    rdi,0xfffffffffffffffc
  0067e:    	or     rdi,rax
  00681:    	rol    rdi,0x3d
  00685:    	movq   xmm6,rdi
  0068a:    	jmp    0x6a1
  0068f:    	call   0xfffeb364
  00694:    	test   rax,rax
  00697:    	je     0x36767
  0069d:    	movq   xmm6,xmm0
  006a1:    	mulsd  xmm6,xmm7
:00047 %15 = dynvar(2, %2)
  006a5:    	mov    rax,QWORD PTR [rbp-0x10]
  006a9:    	mov    rax,QWORD PTR [rax]
  006ac:    	mov    rax,QWORD PTR [rax-0x28]
  006b0: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00048 %16 = 1: i32
  006b7: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00049 %15 = %15.[%16]
  006c2:    	sub    rsp,0x30
  006c6:    	movq   QWORD PTR [rsp],xmm2
  006cb:    	movq   QWORD PTR [rsp+0x8],xmm4
  006d1:    	movq   QWORD PTR [rsp+0x10],xmm5
  006d7:    	movq   QWORD PTR [rsp+0x18],xmm6
  006dd:    	movq   QWORD PTR [rsp+0x20],xmm7
  006e3: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  006ea: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  006f1: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  006f8:    	mov    rdi,rbx
  006fb:    	mov    rsi,r12
  006fe: c8 	movabs rax,0x55c84f4b6c00
  00708:    	call   rax
  0070a:    	movq   xmm2,QWORD PTR [rsp]
  0070f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00715:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0071b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00721:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00727: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0072e:    	add    rsp,0x30
  00732: c8 	movabs r13,0x55c850b2a290
  0073c:    	test   rax,rax
  0073f:    	je     0xfffeb32b
  00745: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00050 %14 = %15.call x()                   [Vec]
:00051 
  0074c: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00753: 00 	test   rdi,0x7
  0075a:    	jne    0x367bb
  00760:    	cmp    DWORD PTR [rdi+0x4],0x25
  00764:    	jne    0x367bb
  0076a: 26 	cmp    DWORD PTR [rip+0xfffffffffffed58a],0x26        # 0xfffedcfb
  00771:    	jne    0x367bb
  00777:    	mov    esi,DWORD PTR [rip+0x1c87]        # 0x2404
  0077d:    	cmp    esi,0xffffffff
  00780:    	je     0x3680f
  00786:    	cmp    WORD PTR [rdi+0x2],0x3
  0078b:    	jne    0x7a4
  00791:    	cmp    esi,0x6
  00794:    	jge    0x7a4
  0079a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0079f:    	jmp    0x800
  007a4:    	sub    rsp,0x30
  007a8:    	movq   QWORD PTR [rsp],xmm2
  007ad:    	movq   QWORD PTR [rsp+0x8],xmm4
  007b3:    	movq   QWORD PTR [rsp+0x10],xmm5
  007b9:    	movq   QWORD PTR [rsp+0x18],xmm6
  007bf:    	movq   QWORD PTR [rsp+0x20],xmm7
  007c5: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  007cc: c8 	movabs rax,0x55c84f4d3440
  007d6:    	call   rax
  007d8:    	movq   xmm2,QWORD PTR [rsp]
  007dd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007e3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007e9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007ef:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007f5: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  007fc:    	add    rsp,0x30
  00800: ff 	mov    QWORD PTR [rbp-0x98],rax
:00053 %14 = %5 * %14                       [Float][Float]
  00807: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0080e: 00 	test   rdi,0x1
  00815:    	jne    0x36888
  0081b: 00 	test   rdi,0x2
  00822:    	je     0x85e
  00828:    	xorps  xmm3,xmm3
  0082b: 00 	movabs rax,0x8000000000000002
  00835:    	cmp    rdi,rax
  00838:    	je     0x870
  0083e:    	mov    rax,rdi
  00841:    	sar    rax,0x3f
  00845:    	add    rax,0x2
  00849:    	and    rdi,0xfffffffffffffffc
  0084d:    	or     rdi,rax
  00850:    	rol    rdi,0x3d
  00854:    	movq   xmm3,rdi
  00859:    	jmp    0x870
  0085e:    	call   0xfffeb364
  00863:    	test   rax,rax
  00866:    	je     0x36888
  0086c:    	movq   xmm3,xmm0
  00870:    	mulsd  xmm3,xmm8
:00054 %13 = %13 + %14                      [Float][Float]
  00875:    	addsd  xmm6,xmm3
:00055 %15 = dynvar(2, %2)
  00879:    	mov    rax,QWORD PTR [rbp-0x10]
  0087d:    	mov    rax,QWORD PTR [rax]
  00880:    	mov    rax,QWORD PTR [rax-0x28]
  00884: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00056 %16 = 2: i32
  0088b: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00057 %15 = %15.[%16]
  00896:    	sub    rsp,0x40
  0089a:    	movq   QWORD PTR [rsp],xmm2
  0089f:    	movq   QWORD PTR [rsp+0x8],xmm3
  008a5:    	movq   QWORD PTR [rsp+0x10],xmm4
  008ab:    	movq   QWORD PTR [rsp+0x18],xmm5
  008b1:    	movq   QWORD PTR [rsp+0x20],xmm6
  008b7:    	movq   QWORD PTR [rsp+0x28],xmm7
  008bd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  008c4: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  008cb: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  008d2:    	mov    rdi,rbx
  008d5:    	mov    rsi,r12
  008d8: c8 	movabs rax,0x55c84f4b6c00
  008e2:    	call   rax
  008e4:    	movq   xmm2,QWORD PTR [rsp]
  008e9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008ef:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008f5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008fb:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00901:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00907: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0090e:    	add    rsp,0x40
  00912: c8 	movabs r13,0x55c850b2a310
  0091c:    	test   rax,rax
  0091f:    	je     0xfffeb32b
  00925: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00058 %14 = %15.call x()                   [Vec]
:00059 
  0092c: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00933: 00 	test   rdi,0x7
  0093a:    	jne    0x368dc
  00940:    	cmp    DWORD PTR [rdi+0x4],0x25
  00944:    	jne    0x368dc
  0094a: 26 	cmp    DWORD PTR [rip+0xfffffffffffed3aa],0x26        # 0xfffedcfb
  00951:    	jne    0x368dc
  00957:    	mov    esi,DWORD PTR [rip+0x1aaf]        # 0x240c
  0095d:    	cmp    esi,0xffffffff
  00960:    	je     0x36930
  00966:    	cmp    WORD PTR [rdi+0x2],0x3
  0096b:    	jne    0x984
  00971:    	cmp    esi,0x6
  00974:    	jge    0x984
  0097a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0097f:    	jmp    0x9e0
  00984:    	sub    rsp,0x30
  00988:    	movq   QWORD PTR [rsp],xmm2
  0098d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00993:    	movq   QWORD PTR [rsp+0x10],xmm5
  00999:    	movq   QWORD PTR [rsp+0x18],xmm6
  0099f:    	movq   QWORD PTR [rsp+0x20],xmm7
  009a5: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  009ac: c8 	movabs rax,0x55c84f4d3440
  009b6:    	call   rax
  009b8:    	movq   xmm2,QWORD PTR [rsp]
  009bd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009c3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009c9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009cf:    	movq   xmm7,QWORD PTR [rsp+0x20]
  009d5: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  009dc:    	add    rsp,0x30
  009e0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00061 %14 = %6 * %14                       [Float][Float]
  009e7: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  009ee: 00 	test   rdi,0x1
  009f5:    	jne    0x369a9
  009fb: 00 	test   rdi,0x2
  00a02:    	je     0xa3e
  00a08:    	xorps  xmm3,xmm3
  00a0b: 00 	movabs rax,0x8000000000000002
  00a15:    	cmp    rdi,rax
  00a18:    	je     0xa50
  00a1e:    	mov    rax,rdi
  00a21:    	sar    rax,0x3f
  00a25:    	add    rax,0x2
  00a29:    	and    rdi,0xfffffffffffffffc
  00a2d:    	or     rdi,rax
  00a30:    	rol    rdi,0x3d
  00a34:    	movq   xmm3,rdi
  00a39:    	jmp    0xa50
  00a3e:    	call   0xfffeb364
  00a43:    	test   rax,rax
  00a46:    	je     0x369a9
  00a4c:    	movq   xmm3,xmm0
  00a50:    	mulsd  xmm3,xmm2
:00062 %7 = %13 + %14                       [Float][Float]
  00a54:    	movq   xmm9,xmm6
  00a59:    	addsd  xmm9,xmm3
:00063 %14 = dynvar(2, %2)
  00a5e:    	mov    rax,QWORD PTR [rbp-0x10]
  00a62:    	mov    rax,QWORD PTR [rax]
  00a65:    	mov    rax,QWORD PTR [rax-0x28]
  00a69: ff 	mov    QWORD PTR [rbp-0x98],rax
:00064 %15 = 0: i32
  00a70: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00065 %14 = %14.[%15]
  00a7b:    	sub    rsp,0x40
  00a7f:    	movq   QWORD PTR [rsp],xmm2
  00a84:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a8a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a90:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a96:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a9c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00aa3: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00aaa: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00ab1: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00ab8:    	mov    rdi,rbx
  00abb:    	mov    rsi,r12
  00abe: c8 	movabs rax,0x55c84f4b6c00
  00ac8:    	call   rax
  00aca:    	movq   xmm2,QWORD PTR [rsp]
  00acf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ad5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00adb:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ae1:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00ae7: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00aee: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00af5:    	add    rsp,0x40
  00af9: c8 	movabs r13,0x55c850b2a390
  00b03:    	test   rax,rax
  00b06:    	je     0xfffeb32b
  00b0c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00066 %13 = %14.call y()                   [Vec]
:00067 
  00b13: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00b1a: 00 	test   rdi,0x7
  00b21:    	jne    0x369fd
  00b27:    	cmp    DWORD PTR [rdi+0x4],0x25
  00b2b:    	jne    0x369fd
  00b31: 26 	cmp    DWORD PTR [rip+0xfffffffffffed1c3],0x26        # 0xfffedcfb
  00b38:    	jne    0x369fd
  00b3e:    	mov    esi,DWORD PTR [rip+0x18d0]        # 0x2414
  00b44:    	cmp    esi,0xffffffff
  00b47:    	je     0x36a4f
  00b4d:    	cmp    WORD PTR [rdi+0x2],0x3
  00b52:    	jne    0xb6b
  00b58:    	cmp    esi,0x6
  00b5b:    	jge    0xb6b
  00b61:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b66:    	jmp    0xbc9
  00b6b:    	sub    rsp,0x30
  00b6f:    	movq   QWORD PTR [rsp],xmm2
  00b74:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b7a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b80:    	movq   QWORD PTR [rsp+0x18],xmm7
  00b86: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00b8d: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00b94: c8 	movabs rax,0x55c84f4d3440
  00b9e:    	call   rax
  00ba0:    	movq   xmm2,QWORD PTR [rsp]
  00ba5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bab:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00bb1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00bb7: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00bbe: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00bc5:    	add    rsp,0x30
  00bc9: ff 	mov    QWORD PTR [rbp-0x90],rax
:00069 %13 = %4 * %13                       [Float][Float]
  00bd0: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00bd7: 00 	test   rdi,0x1
  00bde:    	jne    0x36aca
  00be4: 00 	test   rdi,0x2
  00beb:    	je     0xc27
  00bf1:    	xorps  xmm3,xmm3
  00bf4: 00 	movabs rax,0x8000000000000002
  00bfe:    	cmp    rdi,rax
  00c01:    	je     0xc39
  00c07:    	mov    rax,rdi
  00c0a:    	sar    rax,0x3f
  00c0e:    	add    rax,0x2
  00c12:    	and    rdi,0xfffffffffffffffc
  00c16:    	or     rdi,rax
  00c19:    	rol    rdi,0x3d
  00c1d:    	movq   xmm3,rdi
  00c22:    	jmp    0xc39
  00c27:    	call   0xfffeb364
  00c2c:    	test   rax,rax
  00c2f:    	je     0x36aca
  00c35:    	movq   xmm3,xmm0
  00c39:    	mulsd  xmm3,xmm7
:00070 %15 = dynvar(2, %2)
  00c3d:    	mov    rax,QWORD PTR [rbp-0x10]
  00c41:    	mov    rax,QWORD PTR [rax]
  00c44:    	mov    rax,QWORD PTR [rax-0x28]
  00c48: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00071 %16 = 1: i32
  00c4f: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00072 %15 = %15.[%16]
  00c5a:    	sub    rsp,0x40
  00c5e:    	movq   QWORD PTR [rsp],xmm2
  00c63:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c69:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c6f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c75:    	movq   QWORD PTR [rsp+0x20],xmm7
  00c7b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00c82: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00c89: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00c90: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00c97:    	mov    rdi,rbx
  00c9a:    	mov    rsi,r12
  00c9d: c8 	movabs rax,0x55c84f4b6c00
  00ca7:    	call   rax
  00ca9:    	movq   xmm2,QWORD PTR [rsp]
  00cae:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cb4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cba:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cc0:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00cc6: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00ccd: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00cd4:    	add    rsp,0x40
  00cd8: c8 	movabs r13,0x55c850b2a400
  00ce2:    	test   rax,rax
  00ce5:    	je     0xfffeb32b
  00ceb: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00073 %14 = %15.call y()                   [Vec]
:00074 
  00cf2: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00cf9: 00 	test   rdi,0x7
  00d00:    	jne    0x36b1c
  00d06:    	cmp    DWORD PTR [rdi+0x4],0x25
  00d0a:    	jne    0x36b1c
  00d10: 26 	cmp    DWORD PTR [rip+0xfffffffffffecfe4],0x26        # 0xfffedcfb
  00d17:    	jne    0x36b1c
  00d1d:    	mov    esi,DWORD PTR [rip+0x16f9]        # 0x241c
  00d23:    	cmp    esi,0xffffffff
  00d26:    	je     0x36b7e
  00d2c:    	cmp    WORD PTR [rdi+0x2],0x3
  00d31:    	jne    0xd4a
  00d37:    	cmp    esi,0x6
  00d3a:    	jge    0xd4a
  00d40:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d45:    	jmp    0xdb4
  00d4a:    	sub    rsp,0x40
  00d4e:    	movq   QWORD PTR [rsp],xmm2
  00d53:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d59:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d5f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d65:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d6b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00d72: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d79: c8 	movabs rax,0x55c84f4d3440
  00d83:    	call   rax
  00d85:    	movq   xmm2,QWORD PTR [rsp]
  00d8a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d90:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d96:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d9c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00da2: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00da9: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00db0:    	add    rsp,0x40
  00db4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00076 %14 = %5 * %14                       [Float][Float]
  00dbb: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00dc2: 00 	test   rdi,0x1
  00dc9:    	jne    0x36c05
  00dcf: 00 	test   rdi,0x2
  00dd6:    	je     0xe12
  00ddc:    	xorps  xmm6,xmm6
  00ddf: 00 	movabs rax,0x8000000000000002
  00de9:    	cmp    rdi,rax
  00dec:    	je     0xe24
  00df2:    	mov    rax,rdi
  00df5:    	sar    rax,0x3f
  00df9:    	add    rax,0x2
  00dfd:    	and    rdi,0xfffffffffffffffc
  00e01:    	or     rdi,rax
  00e04:    	rol    rdi,0x3d
  00e08:    	movq   xmm6,rdi
  00e0d:    	jmp    0xe24
  00e12:    	call   0xfffeb364
  00e17:    	test   rax,rax
  00e1a:    	je     0x36c05
  00e20:    	movq   xmm6,xmm0
  00e24:    	mulsd  xmm6,xmm8
:00077 %13 = %13 + %14                      [Float][Float]
  00e29:    	addsd  xmm3,xmm6
:00078 %15 = dynvar(2, %2)
  00e2d:    	mov    rax,QWORD PTR [rbp-0x10]
  00e31:    	mov    rax,QWORD PTR [rax]
  00e34:    	mov    rax,QWORD PTR [rax-0x28]
  00e38: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00079 %16 = 2: i32
  00e3f: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00080 %15 = %15.[%16]
  00e4a:    	sub    rsp,0x40
  00e4e:    	movq   QWORD PTR [rsp],xmm2
  00e53:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e59:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e5f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e65:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e6b:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e71: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e78: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e7f: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00e86: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00e8d:    	mov    rdi,rbx
  00e90:    	mov    rsi,r12
  00e93: c8 	movabs rax,0x55c84f4b6c00
  00e9d:    	call   rax
  00e9f:    	movq   xmm2,QWORD PTR [rsp]
  00ea4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00eaa:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00eb0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00eb6:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ebc:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00ec2: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00ec9: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00ed0:    	add    rsp,0x40
  00ed4: c8 	movabs r13,0x55c850b2a480
  00ede:    	test   rax,rax
  00ee1:    	je     0xfffeb32b
  00ee7: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00081 %14 = %15.call y()                   [Vec]
:00082 
  00eee: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00ef5: 00 	test   rdi,0x7
  00efc:    	jne    0x36c67
  00f02:    	cmp    DWORD PTR [rdi+0x4],0x25
  00f06:    	jne    0x36c67
  00f0c: 26 	cmp    DWORD PTR [rip+0xfffffffffffecde8],0x26        # 0xfffedcfb
  00f13:    	jne    0x36c67
  00f19:    	mov    esi,DWORD PTR [rip+0x1505]        # 0x2424
  00f1f:    	cmp    esi,0xffffffff
  00f22:    	je     0x36cc9
  00f28:    	cmp    WORD PTR [rdi+0x2],0x3
  00f2d:    	jne    0xf46
  00f33:    	cmp    esi,0x6
  00f36:    	jge    0xf46
  00f3c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f41:    	jmp    0xfb0
  00f46:    	sub    rsp,0x40
  00f4a:    	movq   QWORD PTR [rsp],xmm2
  00f4f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f55:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f5b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f61:    	movq   QWORD PTR [rsp+0x20],xmm7
  00f67: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00f6e: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00f75: c8 	movabs rax,0x55c84f4d3440
  00f7f:    	call   rax
  00f81:    	movq   xmm2,QWORD PTR [rsp]
  00f86:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f8c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f92:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f98:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00f9e: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00fa5: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00fac:    	add    rsp,0x40
  00fb0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00084 %14 = %6 * %14                       [Float][Float]
  00fb7: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00fbe: 00 	test   rdi,0x1
  00fc5:    	jne    0x36d50
  00fcb: 00 	test   rdi,0x2
  00fd2:    	je     0x100e
  00fd8:    	xorps  xmm6,xmm6
  00fdb: 00 	movabs rax,0x8000000000000002
  00fe5:    	cmp    rdi,rax
  00fe8:    	je     0x1020
  00fee:    	mov    rax,rdi
  00ff1:    	sar    rax,0x3f
  00ff5:    	add    rax,0x2
  00ff9:    	and    rdi,0xfffffffffffffffc
  00ffd:    	or     rdi,rax
  01000:    	rol    rdi,0x3d
  01004:    	movq   xmm6,rdi
  01009:    	jmp    0x1020
  0100e:    	call   0xfffeb364
  01013:    	test   rax,rax
  01016:    	je     0x36d50
  0101c:    	movq   xmm6,xmm0
  01020:    	mulsd  xmm6,xmm2
:00085 %8 = %13 + %14                       [Float][Float]
  01024:    	movq   xmm10,xmm3
  01029:    	addsd  xmm10,xmm6
:00086 %14 = dynvar(2, %2)
  0102e:    	mov    rax,QWORD PTR [rbp-0x10]
  01032:    	mov    rax,QWORD PTR [rax]
  01035:    	mov    rax,QWORD PTR [rax-0x28]
  01039: ff 	mov    QWORD PTR [rbp-0x98],rax
:00087 %15 = 0: i32
  01040: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00088 %14 = %14.[%15]
  0104b:    	sub    rsp,0x40
  0104f:    	movq   QWORD PTR [rsp],xmm2
  01054:    	movq   QWORD PTR [rsp+0x8],xmm3
  0105a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01060:    	movq   QWORD PTR [rsp+0x18],xmm5
  01066:    	movq   QWORD PTR [rsp+0x20],xmm7
  0106c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01073: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0107a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01081: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01088: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0108f:    	mov    rdi,rbx
  01092:    	mov    rsi,r12
  01095: c8 	movabs rax,0x55c84f4b6c00
  0109f:    	call   rax
  010a1:    	movq   xmm2,QWORD PTR [rsp]
  010a6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010ac:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010b2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010b8:    	movq   xmm7,QWORD PTR [rsp+0x20]
  010be: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  010c5: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  010cc: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  010d3:    	add    rsp,0x40
  010d7: c8 	movabs r13,0x55c850b2a500
  010e1:    	test   rax,rax
  010e4:    	je     0xfffeb32b
  010ea: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %13 = %14.call z()                   [Vec]
:00090 
  010f1: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  010f8: 00 	test   rdi,0x7
  010ff:    	jne    0x36db2
  01105:    	cmp    DWORD PTR [rdi+0x4],0x25
  01109:    	jne    0x36db2
  0110f: 26 	cmp    DWORD PTR [rip+0xfffffffffffecbe5],0x26        # 0xfffedcfb
  01116:    	jne    0x36db2
  0111c:    	mov    esi,DWORD PTR [rip+0x130a]        # 0x242c
  01122:    	cmp    esi,0xffffffff
  01125:    	je     0x36e12
  0112b:    	cmp    WORD PTR [rdi+0x2],0x3
  01130:    	jne    0x1149
  01136:    	cmp    esi,0x6
  01139:    	jge    0x1149
  0113f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01144:    	jmp    0x11b5
  01149:    	sub    rsp,0x40
  0114d:    	movq   QWORD PTR [rsp],xmm2
  01152:    	movq   QWORD PTR [rsp+0x8],xmm4
  01158:    	movq   QWORD PTR [rsp+0x10],xmm5
  0115e:    	movq   QWORD PTR [rsp+0x18],xmm7
  01164: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0116b: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01172: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01179: c8 	movabs rax,0x55c84f4d3440
  01183:    	call   rax
  01185:    	movq   xmm2,QWORD PTR [rsp]
  0118a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01190:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01196:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0119c: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  011a3: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  011aa: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  011b1:    	add    rsp,0x40
  011b5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 %13 = %4 * %13                       [Float][Float]
  011bc: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  011c3: 00 	test   rdi,0x1
  011ca:    	jne    0x36e9b
  011d0: 00 	test   rdi,0x2
  011d7:    	je     0x1213
  011dd:    	xorps  xmm3,xmm3
  011e0: 00 	movabs rax,0x8000000000000002
  011ea:    	cmp    rdi,rax
  011ed:    	je     0x1225
  011f3:    	mov    rax,rdi
  011f6:    	sar    rax,0x3f
  011fa:    	add    rax,0x2
  011fe:    	and    rdi,0xfffffffffffffffc
  01202:    	or     rdi,rax
  01205:    	rol    rdi,0x3d
  01209:    	movq   xmm3,rdi
  0120e:    	jmp    0x1225
  01213:    	call   0xfffeb364
  01218:    	test   rax,rax
  0121b:    	je     0x36e9b
  01221:    	movq   xmm3,xmm0
  01225:    	mulsd  xmm3,xmm7
:00093 %15 = dynvar(2, %2)
  01229:    	mov    rax,QWORD PTR [rbp-0x10]
  0122d:    	mov    rax,QWORD PTR [rax]
  01230:    	mov    rax,QWORD PTR [rax-0x28]
  01234: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00094 %16 = 1: i32
  0123b: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00095 %15 = %15.[%16]
  01246:    	sub    rsp,0x40
  0124a:    	movq   QWORD PTR [rsp],xmm2
  0124f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01255:    	movq   QWORD PTR [rsp+0x10],xmm4
  0125b:    	movq   QWORD PTR [rsp+0x18],xmm5
  01261:    	movq   QWORD PTR [rsp+0x20],xmm7
  01267: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0126e: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01275: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0127c: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01283: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0128a:    	mov    rdi,rbx
  0128d:    	mov    rsi,r12
  01290: c8 	movabs rax,0x55c84f4b6c00
  0129a:    	call   rax
  0129c:    	movq   xmm2,QWORD PTR [rsp]
  012a1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  012a7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  012ad:    	movq   xmm5,QWORD PTR [rsp+0x18]
  012b3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  012b9: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  012c0: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  012c7: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  012ce:    	add    rsp,0x40
  012d2: c8 	movabs r13,0x55c850b2a570
  012dc:    	test   rax,rax
  012df:    	je     0xfffeb32b
  012e5: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00096 %14 = %15.call z()                   [Vec]
:00097 
  012ec: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  012f3: 00 	test   rdi,0x7
  012fa:    	jne    0x36efb
  01300:    	cmp    DWORD PTR [rdi+0x4],0x25
  01304:    	jne    0x36efb
  0130a: 26 	cmp    DWORD PTR [rip+0xfffffffffffec9ea],0x26        # 0xfffedcfb
  01311:    	jne    0x36efb
  01317:    	mov    esi,DWORD PTR [rip+0x1117]        # 0x2434
  0131d:    	cmp    esi,0xffffffff
  01320:    	je     0x36f6b
  01326:    	cmp    WORD PTR [rdi+0x2],0x3
  0132b:    	jne    0x1344
  01331:    	cmp    esi,0x6
  01334:    	jge    0x1344
  0133a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0133f:    	jmp    0x13bc
  01344:    	sub    rsp,0x40
  01348:    	movq   QWORD PTR [rsp],xmm2
  0134d:    	movq   QWORD PTR [rsp+0x8],xmm3
  01353:    	movq   QWORD PTR [rsp+0x10],xmm4
  01359:    	movq   QWORD PTR [rsp+0x18],xmm5
  0135f:    	movq   QWORD PTR [rsp+0x20],xmm7
  01365: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0136c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01373: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0137a: c8 	movabs rax,0x55c84f4d3440
  01384:    	call   rax
  01386:    	movq   xmm2,QWORD PTR [rsp]
  0138b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01391:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01397:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0139d:    	movq   xmm7,QWORD PTR [rsp+0x20]
  013a3: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  013aa: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  013b1: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  013b8:    	add    rsp,0x40
  013bc: ff 	mov    QWORD PTR [rbp-0x98],rax
:00099 %14 = %5 * %14                       [Float][Float]
  013c3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  013ca: 00 	test   rdi,0x1
  013d1:    	jne    0x37000
  013d7: 00 	test   rdi,0x2
  013de:    	je     0x141a
  013e4:    	xorps  xmm6,xmm6
  013e7: 00 	movabs rax,0x8000000000000002
  013f1:    	cmp    rdi,rax
  013f4:    	je     0x142c
  013fa:    	mov    rax,rdi
  013fd:    	sar    rax,0x3f
  01401:    	add    rax,0x2
  01405:    	and    rdi,0xfffffffffffffffc
  01409:    	or     rdi,rax
  0140c:    	rol    rdi,0x3d
  01410:    	movq   xmm6,rdi
  01415:    	jmp    0x142c
  0141a:    	call   0xfffeb364
  0141f:    	test   rax,rax
  01422:    	je     0x37000
  01428:    	movq   xmm6,xmm0
  0142c:    	mulsd  xmm6,xmm8
:00100 %13 = %13 + %14                      [Float][Float]
  01431:    	addsd  xmm3,xmm6
:00101 %15 = dynvar(2, %2)
  01435:    	mov    rax,QWORD PTR [rbp-0x10]
  01439:    	mov    rax,QWORD PTR [rax]
  0143c:    	mov    rax,QWORD PTR [rax-0x28]
  01440: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00102 %16 = 2: i32
  01447: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00103 %15 = %15.[%16]
  01452:    	sub    rsp,0x50
  01456:    	movq   QWORD PTR [rsp],xmm2
  0145b:    	movq   QWORD PTR [rsp+0x8],xmm3
  01461:    	movq   QWORD PTR [rsp+0x10],xmm4
  01467:    	movq   QWORD PTR [rsp+0x18],xmm5
  0146d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01473:    	movq   QWORD PTR [rsp+0x28],xmm7
  01479: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01480: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01487: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0148e: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01495: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0149c:    	mov    rdi,rbx
  0149f:    	mov    rsi,r12
  014a2: c8 	movabs rax,0x55c84f4b6c00
  014ac:    	call   rax
  014ae:    	movq   xmm2,QWORD PTR [rsp]
  014b3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014b9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014bf:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014c5:    	movq   xmm6,QWORD PTR [rsp+0x20]
  014cb:    	movq   xmm7,QWORD PTR [rsp+0x28]
  014d1: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  014d8: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  014df: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  014e6:    	add    rsp,0x50
  014ea: c8 	movabs r13,0x55c850b2a5f0
  014f4:    	test   rax,rax
  014f7:    	je     0xfffeb32b
  014fd: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00104 %14 = %15.call z()                   [Vec]
:00105 
  01504: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0150b: 00 	test   rdi,0x7
  01512:    	jne    0x37070
  01518:    	cmp    DWORD PTR [rdi+0x4],0x25
  0151c:    	jne    0x37070
  01522: 26 	cmp    DWORD PTR [rip+0xfffffffffffec7d2],0x26        # 0xfffedcfb
  01529:    	jne    0x37070
  0152f:    	mov    esi,DWORD PTR [rip+0xf07]        # 0x243c
  01535:    	cmp    esi,0xffffffff
  01538:    	je     0x370e0
  0153e:    	cmp    WORD PTR [rdi+0x2],0x3
  01543:    	jne    0x155c
  01549:    	cmp    esi,0x6
  0154c:    	jge    0x155c
  01552:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01557:    	jmp    0x15d4
  0155c:    	sub    rsp,0x40
  01560:    	movq   QWORD PTR [rsp],xmm2
  01565:    	movq   QWORD PTR [rsp+0x8],xmm3
  0156b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01571:    	movq   QWORD PTR [rsp+0x18],xmm5
  01577:    	movq   QWORD PTR [rsp+0x20],xmm7
  0157d: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01584: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0158b: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01592: c8 	movabs rax,0x55c84f4d3440
  0159c:    	call   rax
  0159e:    	movq   xmm2,QWORD PTR [rsp]
  015a3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015a9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015af:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015b5:    	movq   xmm7,QWORD PTR [rsp+0x20]
  015bb: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  015c2: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  015c9: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  015d0:    	add    rsp,0x40
  015d4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00107 %14 = %6 * %14                       [Float][Float]
  015db: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  015e2: 00 	test   rdi,0x1
  015e9:    	jne    0x37175
  015ef: 00 	test   rdi,0x2
  015f6:    	je     0x1632
  015fc:    	xorps  xmm6,xmm6
  015ff: 00 	movabs rax,0x8000000000000002
  01609:    	cmp    rdi,rax
  0160c:    	je     0x1644
  01612:    	mov    rax,rdi
  01615:    	sar    rax,0x3f
  01619:    	add    rax,0x2
  0161d:    	and    rdi,0xfffffffffffffffc
  01621:    	or     rdi,rax
  01624:    	rol    rdi,0x3d
  01628:    	movq   xmm6,rdi
  0162d:    	jmp    0x1644
  01632:    	call   0xfffeb364
  01637:    	test   rax,rax
  0163a:    	je     0x37175
  01640:    	movq   xmm6,xmm0
  01644:    	mulsd  xmm6,xmm2
:00108 %9 = %13 + %14                       [Float][Float]
  01648:    	movq   xmm11,xmm3
  0164d:    	addsd  xmm11,xmm6
:00109 %13 = const[Vec]                     [Vec]
  01652: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec6a7]        # 0xfffedd00
  01659: 00 	cmp    rax,QWORD PTR [rip+0xdf0]        # 0x2450
  01660:    	jne    0x371e5
  01666: 00 	mov    rax,QWORD PTR [rip+0xdd3]        # 0x2440
  0166d: ff 	mov    QWORD PTR [rbp-0x90],rax
:00110 %14 = %7
:00111 %15 = %8
:00112 %16 = %9
:00113 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
:00114 
  01674:    	movq   xmm0,xmm9
  01679:    	call   0xfffeb457
  0167e: ff 	mov    QWORD PTR [rbp-0x98],rax
  01685:    	movq   xmm0,xmm10
  0168a:    	call   0xfffeb457
  0168f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01696:    	movq   xmm0,xmm11
  0169b:    	call   0xfffeb457
  016a0: ff 	mov    QWORD PTR [rbp-0xa8],rax
  016a7: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  016ae: 00 	test   rdi,0x7
  016b5:    	jne    0x372a5
  016bb:    	cmp    DWORD PTR [rdi+0x4],0x26
  016bf:    	jne    0x372a5
  016c5: 26 	cmp    DWORD PTR [rip+0xfffffffffffec62f],0x26        # 0xfffedcfb
  016cc:    	jne    0x372a5
  016d2: 00 	mov    r9,0x0
  016d9:    	sub    rsp,0x40
  016dd:    	movq   QWORD PTR [rsp],xmm2
  016e2:    	movq   QWORD PTR [rsp+0x8],xmm4
  016e8:    	movq   QWORD PTR [rsp+0x10],xmm5
  016ee:    	movq   QWORD PTR [rsp+0x18],xmm7
  016f4: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  016fb: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01702: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01709: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01710:    	mov    rdx,rdi
  01713:    	mov    rax,QWORD PTR [rbx]
  01716:    	lea    rdi,[rsp-0x18]
  0171b:    	mov    QWORD PTR [rdi],rax
  0171e:    	mov    QWORD PTR [rbx],rdi
  01721: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0172a:    	mov    QWORD PTR [rsp-0x38],rcx
  0172f: ff 	lea    rcx,[rbp-0x98]
  01736: 00 	mov    r8,0x3
  0173d:    	call   0x37313
  01742:    	lea    rdi,[rbp-0x8]
  01746:    	mov    QWORD PTR [rbx],rdi
  01749:    	movq   xmm2,QWORD PTR [rsp]
  0174e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01754:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0175a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01760: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01767: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0176e: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01775: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0177c:    	add    rsp,0x40
  01780: c8 	movabs r13,0x55c850b2a6a0
  0178a:    	test   rax,rax
  0178d:    	je     0xfffeb32b
  01793:    	mov    QWORD PTR [rbp-0x78],rax
:00116 %13 = const[Ray]                     [Ray]
  01797: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec562]        # 0xfffedd00
  0179e: 00 	cmp    rax,QWORD PTR [rip+0xccb]        # 0x2470
  017a5:    	jne    0x37345
  017ab: 00 	mov    rax,QWORD PTR [rip+0xcae]        # 0x2460
  017b2: ff 	mov    QWORD PTR [rbp-0x90],rax
:00117 %14 = dynvar(2, %7)
  017b9:    	mov    rax,QWORD PTR [rbp-0x10]
  017bd:    	mov    rax,QWORD PTR [rax]
  017c0:    	mov    rax,QWORD PTR [rax-0x50]
  017c4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00118 %15 = %10
  017cb:    	mov    rax,QWORD PTR [rbp-0x78]
  017cf: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00119 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
:00120 
  017d6: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  017dd: 00 	test   rdi,0x7
  017e4:    	jne    0x373f9
  017ea:    	cmp    DWORD PTR [rdi+0x4],0x2c
  017ee:    	jne    0x373f9
  017f4: 26 	cmp    DWORD PTR [rip+0xfffffffffffec500],0x26        # 0xfffedcfb
  017fb:    	jne    0x373f9
  01801: 00 	mov    r9,0x0
  01808:    	sub    rsp,0x40
  0180c:    	movq   QWORD PTR [rsp],xmm2
  01811:    	movq   QWORD PTR [rsp+0x8],xmm4
  01817:    	movq   QWORD PTR [rsp+0x10],xmm5
  0181d:    	movq   QWORD PTR [rsp+0x18],xmm7
  01823: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0182a: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01831: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01838: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  0183f:    	mov    rdx,rdi
  01842:    	mov    rax,QWORD PTR [rbx]
  01845:    	lea    rdi,[rsp-0x18]
  0184a:    	mov    QWORD PTR [rdi],rax
  0184d:    	mov    QWORD PTR [rbx],rdi
  01850: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01859:    	mov    QWORD PTR [rsp-0x38],rcx
  0185e: ff 	lea    rcx,[rbp-0x98]
  01865: 00 	mov    r8,0x2
  0186c:    	call   0x37467
  01871:    	lea    rdi,[rbp-0x8]
  01875:    	mov    QWORD PTR [rbx],rdi
  01878:    	movq   xmm2,QWORD PTR [rsp]
  0187d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01883:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01889:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0188f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01896: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0189d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  018a4: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  018ab:    	add    rsp,0x40
  018af: c8 	movabs r13,0x55c850b2a700
  018b9:    	test   rax,rax
  018bc:    	je     0xfffeb32b
  018c2:    	mov    QWORD PTR [rbp-0x80],rax
:00122 %13 = const[Isect]                   [Isect]
  018c6: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffec433]        # 0xfffedd00
  018cd: 00 	cmp    rax,QWORD PTR [rip+0xbbc]        # 0x2490
  018d4:    	jne    0x37499
  018da: 00 	mov    rax,QWORD PTR [rip+0xb9f]        # 0x2480
  018e1: ff 	mov    QWORD PTR [rbp-0x90],rax
:00123 %12 = %13.call new()                 [#<Class:Isect>]
:00124 
  018e8: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  018ef: 00 	test   rdi,0x7
  018f6:    	jne    0x3754d
  018fc:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01900:    	jne    0x3754d
  01906: 26 	cmp    DWORD PTR [rip+0xfffffffffffec3ee],0x26        # 0xfffedcfb
  0190d:    	jne    0x3754d
  01913: 00 	mov    r9,0x0
  0191a:    	sub    rsp,0x40
  0191e:    	movq   QWORD PTR [rsp],xmm2
  01923:    	movq   QWORD PTR [rsp+0x8],xmm4
  01929:    	movq   QWORD PTR [rsp+0x10],xmm5
  0192f:    	movq   QWORD PTR [rsp+0x18],xmm7
  01935: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0193c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01943: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0194a: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01951:    	mov    rdx,rdi
  01954:    	mov    rax,QWORD PTR [rbx]
  01957:    	lea    rdi,[rsp-0x18]
  0195c:    	mov    QWORD PTR [rdi],rax
  0195f:    	mov    QWORD PTR [rbx],rdi
  01962: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0196b:    	mov    QWORD PTR [rsp-0x38],rcx
  01970: ff 	lea    rcx,[rbp-0x98]
  01977: 00 	mov    r8,0x0
  0197e:    	call   0x375bb
  01983:    	lea    rdi,[rbp-0x8]
  01987:    	mov    QWORD PTR [rbx],rdi
  0198a:    	movq   xmm2,QWORD PTR [rsp]
  0198f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01995:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0199b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  019a1: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  019a8: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  019af: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  019b6: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  019bd:    	add    rsp,0x40
  019c1: c8 	movabs r13,0x55c850b2a740
  019cb:    	test   rax,rax
  019ce:    	je     0xfffeb32b
  019d4: ff 	mov    QWORD PTR [rbp-0x88],rax
:00126 %13 = @spheres: Scene[IvarId(0)]
  019db:    	mov    rdi,QWORD PTR [rbp-0x28]
  019df:    	cmp    WORD PTR [rdi+0x2],0x3
  019e4:    	jne    0x375ed
  019ea:    	mov    rax,QWORD PTR [rdi+0x10]
  019ee: ff 	mov    QWORD PTR [rbp-0x90],rax
:00127 %14 = 0: i32
  019f5: ff 	mov    QWORD PTR [rbp-0x98],0x1
:00128 %13 = %13.[%14]
  01a00:    	sub    rsp,0x40
  01a04:    	movq   QWORD PTR [rsp],xmm2
  01a09:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a0f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01a15:    	movq   QWORD PTR [rsp+0x18],xmm7
  01a1b: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01a22: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01a29: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01a30: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01a37: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01a3e: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01a45:    	mov    rdi,rbx
  01a48:    	mov    rsi,r12
  01a4b: c8 	movabs rax,0x55c84f4b6c00
  01a55:    	call   rax
  01a57:    	movq   xmm2,QWORD PTR [rsp]
  01a5c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a62:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a68:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a6e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a75: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a7c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a83: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a8a:    	add    rsp,0x40
  01a8e: c8 	movabs r13,0x55c850b2a780
  01a98:    	test   rax,rax
  01a9b:    	je     0xfffeb32b
  01aa1: ff 	mov    QWORD PTR [rbp-0x90],rax
:00129 %14 = %11
  01aa8:    	mov    rax,QWORD PTR [rbp-0x80]
  01aac: ff 	mov    QWORD PTR [rbp-0x98],rax
:00130 %15 = %12
  01ab3: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01aba: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00131 _ = %13.call intersect(%14; 2)       [Sphere]
:00132 
  01ac1: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01ac8: 00 	test   rdi,0x7
  01acf:    	jne    0x37671
  01ad5:    	cmp    DWORD PTR [rdi+0x4],0x27
  01ad9:    	jne    0x37671
  01adf: 26 	cmp    DWORD PTR [rip+0xfffffffffffec215],0x26        # 0xfffedcfb
  01ae6:    	jne    0x37671
  01aec:    	sub    rsp,0x40
  01af0:    	movq   QWORD PTR [rsp],xmm2
  01af5:    	movq   QWORD PTR [rsp+0x8],xmm4
  01afb:    	movq   QWORD PTR [rsp+0x10],xmm5
  01b01:    	movq   QWORD PTR [rsp+0x18],xmm7
  01b07: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01b0e: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01b15: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01b1c: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01b23:    	mov    rax,QWORD PTR [rbx]
  01b26:    	lea    rdi,[rsp-0x18]
  01b2b:    	mov    QWORD PTR [rdi],rax
  01b2e:    	mov    QWORD PTR [rbx],rdi
  01b31: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b3a:    	mov    QWORD PTR [rsp-0x38],rcx
  01b3f: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01b46:    	mov    QWORD PTR [rsp-0x38],rax
  01b4b: 00 	mov    rdi,0x2
  01b52: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01b59:    	mov    QWORD PTR [rsp-0x40],rax
  01b5e: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01b65:    	mov    QWORD PTR [rsp-0x48],rax
  01b6a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b73: 10 	movabs rax,0x100100000003f
  01b7d:    	mov    QWORD PTR [rsp-0x28],rax
  01b82: c8 	movabs r13,0x55c850b316a0
  01b8c:    	call   0xfffee8c1
  01b91:    	lea    rdi,[rbp-0x8]
  01b95:    	mov    QWORD PTR [rbx],rdi
  01b98:    	movq   xmm2,QWORD PTR [rsp]
  01b9d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ba3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01ba9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01baf: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01bb6: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01bbd: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01bc4: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01bcb:    	add    rsp,0x40
  01bcf: c8 	movabs r13,0x55c850b2a7c0
  01bd9:    	test   rax,rax
  01bdc:    	je     0xfffeb32b
:00134 %13 = @spheres: Scene[IvarId(0)]
  01be2:    	mov    rdi,QWORD PTR [rbp-0x28]
  01be6:    	cmp    WORD PTR [rdi+0x2],0x3
  01beb:    	jne    0x376df
  01bf1:    	mov    rax,QWORD PTR [rdi+0x10]
  01bf5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00135 %14 = 1: i32
  01bfc: ff 	mov    QWORD PTR [rbp-0x98],0x3
:00136 %13 = %13.[%14]
  01c07:    	sub    rsp,0x40
  01c0b:    	movq   QWORD PTR [rsp],xmm2
  01c10:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c16:    	movq   QWORD PTR [rsp+0x10],xmm5
  01c1c:    	movq   QWORD PTR [rsp+0x18],xmm7
  01c22: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01c29: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01c30: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01c37: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01c3e: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01c45: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01c4c:    	mov    rdi,rbx
  01c4f:    	mov    rsi,r12
  01c52: c8 	movabs rax,0x55c84f4b6c00
  01c5c:    	call   rax
  01c5e:    	movq   xmm2,QWORD PTR [rsp]
  01c63:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c69:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01c6f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c75: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01c7c: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01c83: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01c8a: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01c91:    	add    rsp,0x40
  01c95: c8 	movabs r13,0x55c850b2a800
  01c9f:    	test   rax,rax
  01ca2:    	je     0xfffeb32b
  01ca8: ff 	mov    QWORD PTR [rbp-0x90],rax
:00137 %14 = %11
  01caf:    	mov    rax,QWORD PTR [rbp-0x80]
  01cb3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00138 %15 = %12
  01cba: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01cc1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00139 _ = %13.call intersect(%14; 2)       [Sphere]
:00140 
  01cc8: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01ccf: 00 	test   rdi,0x7
  01cd6:    	jne    0x37763
  01cdc:    	cmp    DWORD PTR [rdi+0x4],0x27
  01ce0:    	jne    0x37763
  01ce6: 26 	cmp    DWORD PTR [rip+0xfffffffffffec00e],0x26        # 0xfffedcfb
  01ced:    	jne    0x37763
  01cf3:    	sub    rsp,0x40
  01cf7:    	movq   QWORD PTR [rsp],xmm2
  01cfc:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d02:    	movq   QWORD PTR [rsp+0x10],xmm5
  01d08:    	movq   QWORD PTR [rsp+0x18],xmm7
  01d0e: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01d15: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01d1c: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01d23: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01d2a:    	mov    rax,QWORD PTR [rbx]
  01d2d:    	lea    rdi,[rsp-0x18]
  01d32:    	mov    QWORD PTR [rdi],rax
  01d35:    	mov    QWORD PTR [rbx],rdi
  01d38: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01d41:    	mov    QWORD PTR [rsp-0x38],rcx
  01d46: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01d4d:    	mov    QWORD PTR [rsp-0x38],rax
  01d52: 00 	mov    rdi,0x2
  01d59: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01d60:    	mov    QWORD PTR [rsp-0x40],rax
  01d65: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01d6c:    	mov    QWORD PTR [rsp-0x48],rax
  01d71: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01d7a: 10 	movabs rax,0x100100000003f
  01d84:    	mov    QWORD PTR [rsp-0x28],rax
  01d89: c8 	movabs r13,0x55c850b316a0
  01d93:    	call   0xfffee8c1
  01d98:    	lea    rdi,[rbp-0x8]
  01d9c:    	mov    QWORD PTR [rbx],rdi
  01d9f:    	movq   xmm2,QWORD PTR [rsp]
  01da4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01daa:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01db0:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01db6: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01dbd: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01dc4: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01dcb: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01dd2:    	add    rsp,0x40
  01dd6: c8 	movabs r13,0x55c850b2a840
  01de0:    	test   rax,rax
  01de3:    	je     0xfffeb32b
:00142 %13 = @spheres: Scene[IvarId(0)]
  01de9:    	mov    rdi,QWORD PTR [rbp-0x28]
  01ded:    	cmp    WORD PTR [rdi+0x2],0x3
  01df2:    	jne    0x377d1
  01df8:    	mov    rax,QWORD PTR [rdi+0x10]
  01dfc: ff 	mov    QWORD PTR [rbp-0x90],rax
:00143 %14 = 2: i32
  01e03: ff 	mov    QWORD PTR [rbp-0x98],0x5
:00144 %13 = %13.[%14]
  01e0e:    	sub    rsp,0x40
  01e12:    	movq   QWORD PTR [rsp],xmm2
  01e17:    	movq   QWORD PTR [rsp+0x8],xmm4
  01e1d:    	movq   QWORD PTR [rsp+0x10],xmm5
  01e23:    	movq   QWORD PTR [rsp+0x18],xmm7
  01e29: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01e30: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01e37: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01e3e: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01e45: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01e4c: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01e53:    	mov    rdi,rbx
  01e56:    	mov    rsi,r12
  01e59: c8 	movabs rax,0x55c84f4b6c00
  01e63:    	call   rax
  01e65:    	movq   xmm2,QWORD PTR [rsp]
  01e6a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e70:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01e76:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01e7c: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01e83: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01e8a: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01e91: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01e98:    	add    rsp,0x40
  01e9c: c8 	movabs r13,0x55c850b2a880
  01ea6:    	test   rax,rax
  01ea9:    	je     0xfffeb32b
  01eaf: ff 	mov    QWORD PTR [rbp-0x90],rax
:00145 %14 = %11
  01eb6:    	mov    rax,QWORD PTR [rbp-0x80]
  01eba: ff 	mov    QWORD PTR [rbp-0x98],rax
:00146 %15 = %12
  01ec1: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01ec8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00147 _ = %13.call intersect(%14; 2)       [Sphere]
:00148 
  01ecf: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01ed6: 00 	test   rdi,0x7
  01edd:    	jne    0x37855
  01ee3:    	cmp    DWORD PTR [rdi+0x4],0x27
  01ee7:    	jne    0x37855
  01eed: 26 	cmp    DWORD PTR [rip+0xfffffffffffebe07],0x26        # 0xfffedcfb
  01ef4:    	jne    0x37855
  01efa:    	sub    rsp,0x40
  01efe:    	movq   QWORD PTR [rsp],xmm2
  01f03:    	movq   QWORD PTR [rsp+0x8],xmm4
  01f09:    	movq   QWORD PTR [rsp+0x10],xmm5
  01f0f:    	movq   QWORD PTR [rsp+0x18],xmm7
  01f15: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01f1c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01f23: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01f2a: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01f31:    	mov    rax,QWORD PTR [rbx]
  01f34:    	lea    rdi,[rsp-0x18]
  01f39:    	mov    QWORD PTR [rdi],rax
  01f3c:    	mov    QWORD PTR [rbx],rdi
  01f3f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01f48:    	mov    QWORD PTR [rsp-0x38],rcx
  01f4d: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01f54:    	mov    QWORD PTR [rsp-0x38],rax
  01f59: 00 	mov    rdi,0x2
  01f60: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01f67:    	mov    QWORD PTR [rsp-0x40],rax
  01f6c: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01f73:    	mov    QWORD PTR [rsp-0x48],rax
  01f78: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01f81: 10 	movabs rax,0x100100000003f
  01f8b:    	mov    QWORD PTR [rsp-0x28],rax
  01f90: c8 	movabs r13,0x55c850b316a0
  01f9a:    	call   0xfffee8c1
  01f9f:    	lea    rdi,[rbp-0x8]
  01fa3:    	mov    QWORD PTR [rbx],rdi
  01fa6:    	movq   xmm2,QWORD PTR [rsp]
  01fab:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01fb1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01fb7:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01fbd: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01fc4: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01fcb: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01fd2: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01fd9:    	add    rsp,0x40
  01fdd: c8 	movabs r13,0x55c850b2a8c0
  01fe7:    	test   rax,rax
  01fea:    	je     0xfffeb32b
:00150 %13 = @plane: Scene[IvarId(1)]
  01ff0:    	mov    rdi,QWORD PTR [rbp-0x28]
  01ff4:    	cmp    WORD PTR [rdi+0x2],0x3
  01ff9:    	jne    0x378c3
  01fff:    	mov    rax,QWORD PTR [rdi+0x18]
  02003: ff 	mov    QWORD PTR [rbp-0x90],rax
:00151 %14 = %11
  0200a:    	mov    rax,QWORD PTR [rbp-0x80]
  0200e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00152 %15 = %12
  02015: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0201c: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00153 _ = %13.call intersect(%14; 2)       [Plane]
:00154 
  02023: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0202a: 00 	test   rdi,0x7
  02031:    	jne    0x37947
  02037:    	cmp    DWORD PTR [rdi+0x4],0x29
  0203b:    	jne    0x37947
  02041: 26 	cmp    DWORD PTR [rip+0xfffffffffffebcb3],0x26        # 0xfffedcfb
  02048:    	jne    0x37947
  0204e:    	sub    rsp,0x40
  02052:    	movq   QWORD PTR [rsp],xmm2
  02057:    	movq   QWORD PTR [rsp+0x8],xmm4
  0205d:    	movq   QWORD PTR [rsp+0x10],xmm5
  02063:    	movq   QWORD PTR [rsp+0x18],xmm7
  02069: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02070: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02077: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0207e: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02085:    	mov    rax,QWORD PTR [rbx]
  02088:    	lea    rdi,[rsp-0x18]
  0208d:    	mov    QWORD PTR [rdi],rax
  02090:    	mov    QWORD PTR [rbx],rdi
  02093: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0209c:    	mov    QWORD PTR [rsp-0x38],rcx
  020a1: ff 	mov    rax,QWORD PTR [rbp-0x90]
  020a8:    	mov    QWORD PTR [rsp-0x38],rax
  020ad: 00 	mov    rdi,0x2
  020b4: ff 	mov    rax,QWORD PTR [rbp-0x98]
  020bb:    	mov    QWORD PTR [rsp-0x40],rax
  020c0: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  020c7:    	mov    QWORD PTR [rsp-0x48],rax
  020cc: 00 	mov    QWORD PTR [rsp-0x30],0x0
  020d5: 0e 	movabs rax,0x1000e00000041
  020df:    	mov    QWORD PTR [rsp-0x28],rax
  020e4: c8 	movabs r13,0x55c850b33540
  020ee:    	call   0xfffeeeae
  020f3:    	lea    rdi,[rbp-0x8]
  020f7:    	mov    QWORD PTR [rbx],rdi
  020fa:    	movq   xmm2,QWORD PTR [rsp]
  020ff:    	movq   xmm4,QWORD PTR [rsp+0x8]
  02105:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0210b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02111: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02118: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0211f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  02126: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0212d:    	add    rsp,0x40
  02131: c8 	movabs r13,0x55c850b2a920
  0213b:    	test   rax,rax
  0213e:    	je     0xfffeb32b
:00156 %13 = %12.call hit()                 [Isect]
:00157 
  02144: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0214b: 00 	test   rdi,0x7
  02152:    	jne    0x379b5
  02158:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0215c:    	jne    0x379b5
  02162: 26 	cmp    DWORD PTR [rip+0xfffffffffffebb92],0x26        # 0xfffedcfb
  02169:    	jne    0x379b5
  0216f:    	mov    esi,DWORD PTR [rip+0x327]        # 0x249c
  02175:    	cmp    esi,0xffffffff
  02178:    	je     0x37a23
  0217e:    	cmp    WORD PTR [rdi+0x2],0x3
  02183:    	jne    0x219c
  02189:    	cmp    esi,0x6
  0218c:    	jge    0x219c
  02192:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  02197:    	jmp    0x2216
  0219c:    	sub    rsp,0x40
  021a0:    	movq   QWORD PTR [rsp],xmm2
  021a5:    	movq   QWORD PTR [rsp+0x8],xmm4
  021ab:    	movq   QWORD PTR [rsp+0x10],xmm5
  021b1:    	movq   QWORD PTR [rsp+0x18],xmm7
  021b7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  021be: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  021c5: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  021cc: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  021d3: c8 	movabs rax,0x55c84f4d3440
  021dd:    	call   rax
  021df:    	movq   xmm2,QWORD PTR [rsp]
  021e4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  021ea:    	movq   xmm5,QWORD PTR [rsp+0x10]
  021f0:    	movq   xmm7,QWORD PTR [rsp+0x18]
  021f6: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  021fd: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02204: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0220b: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02212:    	add    rsp,0x40
  02216: ff 	mov    QWORD PTR [rbp-0x90],rax
:00159 condnotbr %13 =>:00165
  0221d: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02224:    	or     rax,0x10
  02228:    	cmp    rax,0x14
  0222c:    	je     0x22f5
:00160 %13 = dynvar(2, %6)
  02232:    	mov    rax,QWORD PTR [rbp-0x10]
  02236:    	mov    rax,QWORD PTR [rax]
  02239:    	mov    rax,QWORD PTR [rax-0x48]
  0223d: ff 	mov    QWORD PTR [rbp-0x90],rax
:00161 %14 = literal[1.0]
  02244: 00 	movq   xmm3,QWORD PTR [rip+0x254]        # 0x24a0
  0224c: 00 	movabs rax,0xff80000000000002
  02256: ff 	mov    QWORD PTR [rbp-0x98],rax
:00162 %13 = %13 + %14                      [Float][Float]
  0225d: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  02264: 00 	test   rdi,0x1
  0226b:    	jne    0x37aba
  02271: 00 	test   rdi,0x2
  02278:    	je     0x22b4
  0227e:    	xorps  xmm6,xmm6
  02281: 00 	movabs rax,0x8000000000000002
  0228b:    	cmp    rdi,rax
  0228e:    	je     0x22c6
  02294:    	mov    rax,rdi
  02297:    	sar    rax,0x3f
  0229b:    	add    rax,0x2
  0229f:    	and    rdi,0xfffffffffffffffc
  022a3:    	or     rdi,rax
  022a6:    	rol    rdi,0x3d
  022aa:    	movq   xmm6,rdi
  022af:    	jmp    0x22c6
  022b4:    	call   0xfffeb364
  022b9:    	test   rax,rax
  022bc:    	je     0x37aba
  022c2:    	movq   xmm6,xmm0
  022c6:    	addsd  xmm6,xmm3
:00163 dynvar(2, %6) = %13
  022ca:    	movq   xmm0,xmm6
  022ce:    	call   0xfffeb457
  022d3: ff 	mov    QWORD PTR [rbp-0x90],rax
  022da:    	mov    rax,QWORD PTR [rbp-0x10]
  022de:    	mov    rax,QWORD PTR [rax]
  022e1: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  022e8:    	mov    QWORD PTR [rax-0x48],rdi
:00164 ret %13
  022ec: ff 	mov    rax,QWORD PTR [rbp-0x90]
  022f3:    	leave  
  022f4:    	ret    
:00165 %13 = literal[0.0]
  022f5: 00 	movq   xmm3,QWORD PTR [rip+0x1b3]        # 0x24b0
  022fd: 00 	movabs rax,0x8000000000000002
  02307: ff 	mov    QWORD PTR [rbp-0x90],rax
:00166 ret %13
  0230e: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02315:    	leave  
  02316:    	ret    
==> start whole compile: otherBasis FuncId(53) self_class:Scene start:[00000] bytecode:0x55c850b4a280
<== finished compile. elapsed:157.1µs
offset:Pos(94664) code: 6846 bytes  data: 326 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	sub    rsp,0x70
  00008: 00 	mov    rax,0x4
  0000f:    	mov    QWORD PTR [rbp-0x40],rax
  00013:    	mov    QWORD PTR [rbp-0x48],rax
  00017:    	mov    QWORD PTR [rbp-0x50],rax
  0001b:    	mov    QWORD PTR [rbp-0x58],rax
  0001f:    	mov    QWORD PTR [rbp-0x60],rax
  00023:    	mov    QWORD PTR [rbp-0x68],rax
  00027:    	mov    rdi,QWORD PTR [rbp-0x28]
  0002b: 00 	test   rdi,0x7
  00032:    	jne    0x35670
  00038:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0003c:    	jne    0x35670
:00000 %3 = 2: i32
  00042: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00001 %5 = const[Vec]                      [Vec]
  0004a: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeb7f7]        # 0xfffeb848
  00051: 00 	cmp    rax,QWORD PTR [rip+0x1a80]        # 0x1ad8
  00058:    	jne    0x3567f
  0005e: 00 	mov    rax,QWORD PTR [rip+0x1a63]        # 0x1ac8
  00065:    	mov    QWORD PTR [rbp-0x50],rax
:00002 %6 = %2.call x()                     [Vec]
:00003 
  00069:    	mov    rdi,QWORD PTR [rbp-0x38]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x356c5
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0007e:    	jne    0x356c5
  00084: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb7b8],0x26        # 0xfffeb843
  0008b:    	jne    0x356c5
  00091:    	mov    esi,DWORD PTR [rip+0x1a4d]        # 0x1ae4
  00097:    	cmp    esi,0xffffffff
  0009a:    	je     0x356d4
  000a0:    	cmp    WORD PTR [rdi+0x2],0x3
  000a5:    	jne    0xbe
  000ab:    	cmp    esi,0x6
  000ae:    	jge    0xbe
  000b4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000b9:    	jmp    0xca
  000be: c8 	movabs rax,0x55c84f4d3440
  000c8:    	call   rax
  000ca:    	mov    QWORD PTR [rbp-0x58],rax
:00005 %7 = %2.call y()                     [Vec]
:00006 
  000ce:    	mov    rdi,QWORD PTR [rbp-0x38]
  000d2: 00 	test   rdi,0x7
  000d9:    	jne    0x356fd
  000df:    	cmp    DWORD PTR [rdi+0x4],0x25
  000e3:    	jne    0x356fd
  000e9: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb753],0x26        # 0xfffeb843
  000f0:    	jne    0x356fd
  000f6:    	mov    esi,DWORD PTR [rip+0x19f0]        # 0x1aec
  000fc:    	cmp    esi,0xffffffff
  000ff:    	je     0x3570c
  00105:    	cmp    WORD PTR [rdi+0x2],0x3
  0010a:    	jne    0x123
  00110:    	cmp    esi,0x6
  00113:    	jge    0x123
  00119:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0011e:    	jmp    0x12f
  00123: c8 	movabs rax,0x55c84f4d3440
  0012d:    	call   rax
  0012f:    	mov    QWORD PTR [rbp-0x60],rax
:00008 %8 = %2.call z()                     [Vec]
:00009 
  00133:    	mov    rdi,QWORD PTR [rbp-0x38]
  00137: 00 	test   rdi,0x7
  0013e:    	jne    0x35735
  00144:    	cmp    DWORD PTR [rdi+0x4],0x25
  00148:    	jne    0x35735
  0014e: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb6ee],0x26        # 0xfffeb843
  00155:    	jne    0x35735
  0015b:    	mov    esi,DWORD PTR [rip+0x1993]        # 0x1af4
  00161:    	cmp    esi,0xffffffff
  00164:    	je     0x35744
  0016a:    	cmp    WORD PTR [rdi+0x2],0x3
  0016f:    	jne    0x188
  00175:    	cmp    esi,0x6
  00178:    	jge    0x188
  0017e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00183:    	jmp    0x194
  00188: c8 	movabs rax,0x55c84f4d3440
  00192:    	call   rax
  00194:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00012 
  00198:    	mov    rdi,QWORD PTR [rbp-0x50]
  0019c: 00 	test   rdi,0x7
  001a3:    	jne    0x3576d
  001a9:    	cmp    DWORD PTR [rdi+0x4],0x26
  001ad:    	jne    0x3576d
  001b3: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb689],0x26        # 0xfffeb843
  001ba:    	jne    0x3576d
  001c0: 00 	mov    r9,0x0
  001c7:    	mov    rdx,rdi
  001ca:    	mov    rax,QWORD PTR [rbx]
  001cd:    	lea    rdi,[rsp-0x18]
  001d2:    	mov    QWORD PTR [rdi],rax
  001d5:    	mov    QWORD PTR [rbx],rdi
  001d8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  001e1:    	mov    QWORD PTR [rsp-0x38],rcx
  001e6:    	lea    rcx,[rbp-0x58]
  001ea: 00 	mov    r8,0x3
  001f1:    	call   0x3577c
  001f6:    	lea    rdi,[rbp-0x8]
  001fa:    	mov    QWORD PTR [rbx],rdi
  001fd: c8 	movabs r13,0x55c850b4a350
  00207:    	test   rax,rax
  0020a:    	je     0xfffe8e73
  00210:    	mov    QWORD PTR [rbp-0x48],rax
:00014 %1.[%3] = %4
  00214:    	mov    rdx,QWORD PTR [rbp-0x30]
  00218:    	mov    rcx,QWORD PTR [rbp-0x40]
  0021c:    	mov    r8,QWORD PTR [rbp-0x48]
  00220:    	mov    rdi,rbx
  00223:    	mov    rsi,r12
  00226: c8 	movabs rax,0x55c84f4b6d10
  00230:    	call   rax
  00232: c8 	movabs r13,0x55c850b4a370
  0023c:    	test   rax,rax
  0023f:    	je     0xfffe8e73
:00015 %3 = 1: i32
  00245: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00016 %5 = const[Vec]                      [Vec]
  0024d: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeb5f4]        # 0xfffeb848
  00254: 00 	cmp    rax,QWORD PTR [rip+0x18ad]        # 0x1b08
  0025b:    	jne    0x357ae
  00261: 00 	mov    rax,QWORD PTR [rip+0x1890]        # 0x1af8
  00268:    	mov    QWORD PTR [rbp-0x50],rax
:00017 %6 = literal[0.0]
  0026c: 00 	movq   xmm2,QWORD PTR [rip+0x18a4]        # 0x1b18
  00274: 00 	movabs rax,0x8000000000000002
  0027e:    	mov    QWORD PTR [rbp-0x58],rax
:00018 %7 = literal[0.0]
  00282: 00 	movq   xmm3,QWORD PTR [rip+0x189e]        # 0x1b28
  0028a: 00 	movabs rax,0x8000000000000002
  00294:    	mov    QWORD PTR [rbp-0x60],rax
:00019 %8 = literal[0.0]
  00298: 00 	movq   xmm4,QWORD PTR [rip+0x1898]        # 0x1b38
  002a0: 00 	movabs rax,0x8000000000000002
  002aa:    	mov    QWORD PTR [rbp-0x68],rax
:00020 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00021 
  002ae:    	mov    rdi,QWORD PTR [rbp-0x50]
  002b2: 00 	test   rdi,0x7
  002b9:    	jne    0x357f4
  002bf:    	cmp    DWORD PTR [rdi+0x4],0x26
  002c3:    	jne    0x357f4
  002c9: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb573],0x26        # 0xfffeb843
  002d0:    	jne    0x357f4
  002d6: 00 	mov    r9,0x0
  002dd:    	sub    rsp,0x20
  002e1:    	movq   QWORD PTR [rsp],xmm2
  002e6:    	movq   QWORD PTR [rsp+0x8],xmm3
  002ec:    	movq   QWORD PTR [rsp+0x10],xmm4
  002f2:    	mov    rdx,rdi
  002f5:    	mov    rax,QWORD PTR [rbx]
  002f8:    	lea    rdi,[rsp-0x18]
  002fd:    	mov    QWORD PTR [rdi],rax
  00300:    	mov    QWORD PTR [rbx],rdi
  00303: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0030c:    	mov    QWORD PTR [rsp-0x38],rcx
  00311:    	lea    rcx,[rbp-0x58]
  00315: 00 	mov    r8,0x3
  0031c:    	call   0x35803
  00321:    	lea    rdi,[rbp-0x8]
  00325:    	mov    QWORD PTR [rbx],rdi
  00328:    	movq   xmm2,QWORD PTR [rsp]
  0032d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00333:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00339:    	add    rsp,0x20
  0033d: c8 	movabs r13,0x55c850b4a3e0
  00347:    	test   rax,rax
  0034a:    	je     0xfffe8e73
  00350:    	mov    QWORD PTR [rbp-0x48],rax
:00023 %1.[%3] = %4
  00354:    	sub    rsp,0x20
  00358:    	movq   QWORD PTR [rsp],xmm2
  0035d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00363:    	movq   QWORD PTR [rsp+0x10],xmm4
  00369:    	mov    rdx,QWORD PTR [rbp-0x30]
  0036d:    	mov    rcx,QWORD PTR [rbp-0x40]
  00371:    	mov    r8,QWORD PTR [rbp-0x48]
  00375:    	mov    rdi,rbx
  00378:    	mov    rsi,r12
  0037b: c8 	movabs rax,0x55c84f4b6d10
  00385:    	call   rax
  00387:    	movq   xmm2,QWORD PTR [rsp]
  0038c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00392:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00398:    	add    rsp,0x20
  0039c: c8 	movabs r13,0x55c850b4a400
  003a6:    	test   rax,rax
  003a9:    	je     0xfffe8e73
:00024 %3 = %2.call x()                     [Vec]
:00025 
  003af:    	mov    rdi,QWORD PTR [rbp-0x38]
  003b3: 00 	test   rdi,0x7
  003ba:    	jne    0x35835
  003c0:    	cmp    DWORD PTR [rdi+0x4],0x25
  003c4:    	jne    0x35835
  003ca: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb472],0x26        # 0xfffeb843
  003d1:    	jne    0x35835
  003d7:    	mov    esi,DWORD PTR [rip+0x1767]        # 0x1b44
  003dd:    	cmp    esi,0xffffffff
  003e0:    	je     0x35844
  003e6:    	cmp    WORD PTR [rdi+0x2],0x3
  003eb:    	jne    0x404
  003f1:    	cmp    esi,0x6
  003f4:    	jge    0x404
  003fa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003ff:    	jmp    0x43a
  00404:    	sub    rsp,0x20
  00408:    	movq   QWORD PTR [rsp],xmm2
  0040d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00413:    	movq   QWORD PTR [rsp+0x10],xmm4
  00419: c8 	movabs rax,0x55c84f4d3440
  00423:    	call   rax
  00425:    	movq   xmm2,QWORD PTR [rsp]
  0042a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00430:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00436:    	add    rsp,0x20
  0043a:    	mov    QWORD PTR [rbp-0x40],rax
:00027 %4 = literal[0.6]
  0043e: 00 	movq   xmm5,QWORD PTR [rip+0x1702]        # 0x1b48
  00446: 99 	movabs rax,0xff1999999999999a
  00450:    	mov    QWORD PTR [rbp-0x48],rax
:00028 _%3 = %3 < %4                        [Float][Float]
:00029 condnotbr _%3 =>:00043
  00454:    	mov    rdi,QWORD PTR [rbp-0x40]
  00458: 00 	test   rdi,0x1
  0045f:    	jne    0x35897
  00465: 00 	test   rdi,0x2
  0046c:    	je     0x4a8
  00472:    	xorps  xmm6,xmm6
  00475: 00 	movabs rax,0x8000000000000002
  0047f:    	cmp    rdi,rax
  00482:    	je     0x4ba
  00488:    	mov    rax,rdi
  0048b:    	sar    rax,0x3f
  0048f:    	add    rax,0x2
  00493:    	and    rdi,0xfffffffffffffffc
  00497:    	or     rdi,rax
  0049a:    	rol    rdi,0x3d
  0049e:    	movq   xmm6,rdi
  004a3:    	jmp    0x4ba
  004a8:    	call   0xfffe8eac
  004ad:    	test   rax,rax
  004b0:    	je     0x35897
  004b6:    	movq   xmm6,xmm0
  004ba:    	ucomisd xmm6,xmm5
  004be:    	jae    0x35998
:00030 %3 = %2.call x()                     [Vec]
:00031 
  004c4:    	mov    rdi,QWORD PTR [rbp-0x38]
  004c8: 00 	test   rdi,0x7
  004cf:    	jne    0x358a6
  004d5:    	cmp    DWORD PTR [rdi+0x4],0x25
  004d9:    	jne    0x358a6
  004df: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb35d],0x26        # 0xfffeb843
  004e6:    	jne    0x358a6
  004ec:    	mov    esi,DWORD PTR [rip+0x1662]        # 0x1b54
  004f2:    	cmp    esi,0xffffffff
  004f5:    	je     0x358b5
  004fb:    	cmp    WORD PTR [rdi+0x2],0x3
  00500:    	jne    0x519
  00506:    	cmp    esi,0x6
  00509:    	jge    0x519
  0050f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00514:    	jmp    0x55b
  00519:    	sub    rsp,0x20
  0051d:    	movq   QWORD PTR [rsp],xmm2
  00522:    	movq   QWORD PTR [rsp+0x8],xmm3
  00528:    	movq   QWORD PTR [rsp+0x10],xmm4
  0052e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00534: c8 	movabs rax,0x55c84f4d3440
  0053e:    	call   rax
  00540:    	movq   xmm2,QWORD PTR [rsp]
  00545:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0054b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00551:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00557:    	add    rsp,0x20
  0055b:    	mov    QWORD PTR [rbp-0x40],rax
:00033 %4 = literal[-0.6]
  0055f: 00 	movq   xmm5,QWORD PTR [rip+0x15f1]        # 0x1b58
  00567: 99 	movabs rax,0xff1999999999999e
  00571:    	mov    QWORD PTR [rbp-0x48],rax
:00034 _%3 = %3 > %4                        [Float][Float]
:00035 condnotbr _%3 =>:00043
  00575:    	mov    rdi,QWORD PTR [rbp-0x40]
  00579: 00 	test   rdi,0x1
  00580:    	jne    0x35914
  00586: 00 	test   rdi,0x2
  0058d:    	je     0x5c9
  00593:    	xorps  xmm6,xmm6
  00596: 00 	movabs rax,0x8000000000000002
  005a0:    	cmp    rdi,rax
  005a3:    	je     0x5db
  005a9:    	mov    rax,rdi
  005ac:    	sar    rax,0x3f
  005b0:    	add    rax,0x2
  005b4:    	and    rdi,0xfffffffffffffffc
  005b8:    	or     rdi,rax
  005bb:    	rol    rdi,0x3d
  005bf:    	movq   xmm6,rdi
  005c4:    	jmp    0x5db
  005c9:    	call   0xfffe8eac
  005ce:    	test   rax,rax
  005d1:    	je     0x35914
  005d7:    	movq   xmm6,xmm0
  005db:    	ucomisd xmm6,xmm5
  005df:    	jbe    0x359b1
:00036 %3 = 1: i32
  005e5: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00037 %3 = %1.[%3]
  005ed:    	sub    rsp,0x20
  005f1:    	movq   QWORD PTR [rsp],xmm2
  005f6:    	movq   QWORD PTR [rsp+0x8],xmm3
  005fc:    	movq   QWORD PTR [rsp+0x10],xmm4
  00602:    	movq   QWORD PTR [rsp+0x18],xmm5
  00608:    	mov    rdx,QWORD PTR [rbp-0x30]
  0060c:    	mov    rcx,QWORD PTR [rbp-0x40]
  00610:    	mov    rdi,rbx
  00613:    	mov    rsi,r12
  00616: c8 	movabs rax,0x55c84f4b6c00
  00620:    	call   rax
  00622:    	movq   xmm2,QWORD PTR [rsp]
  00627:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0062d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00633:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00639:    	add    rsp,0x20
  0063d: c8 	movabs r13,0x55c850b4a4e0
  00647:    	test   rax,rax
  0064a:    	je     0xfffe8e73
  00650:    	mov    QWORD PTR [rbp-0x40],rax
:00038 %4 = literal[1.0]
  00654: 00 	movq   xmm5,QWORD PTR [rip+0x150c]        # 0x1b68
  0065c: 00 	movabs rax,0xff80000000000002
  00666:    	mov    QWORD PTR [rbp-0x48],rax
:00039 _ = %3.call x=(%4; 1)                [Vec]
:00040 
  0066a:    	mov    rdi,QWORD PTR [rbp-0x40]
  0066e: 00 	test   rdi,0x7
  00675:    	jne    0x35923
  0067b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0067f:    	jne    0x35923
  00685: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb1b7],0x26        # 0xfffeb843
  0068c:    	jne    0x35923
  00692:    	mov    esi,DWORD PTR [rip+0x14dc]        # 0x1b74
  00698:    	cmp    esi,0xffffffff
  0069b:    	je     0x35932
  006a1:    	cmp    WORD PTR [rdi+0x2],0x3
  006a6:    	jne    0x6c3
  006ac:    	cmp    esi,0x6
  006af:    	jge    0x6c3
  006b5:    	mov    rax,QWORD PTR [rbp-0x48]
  006b9:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006be:    	jmp    0x71c
  006c3:    	sub    rsp,0x20
  006c7:    	movq   QWORD PTR [rsp],xmm2
  006cc:    	movq   QWORD PTR [rsp+0x8],xmm3
  006d2:    	movq   QWORD PTR [rsp+0x10],xmm4
  006d8:    	movq   QWORD PTR [rsp+0x18],xmm5
  006de:    	mov    rdx,QWORD PTR [rbp-0x48]
  006e2: c8 	movabs rax,0x55c84f4d36c0
  006ec:    	call   rax
  006ee:    	movq   xmm2,QWORD PTR [rsp]
  006f3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006f9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006ff:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00705:    	add    rsp,0x20
  00709: c8 	movabs r13,0x55c850b4a510
  00713:    	test   rax,rax
  00716:    	je     0xfffe8e73
:00042 br =>:00087
  0071c:    	jmp    0x35cd8
:00043 %3 = %2.call y()                     [Vec]
:00044 
  00721:    	mov    rdi,QWORD PTR [rbp-0x38]
  00725: 00 	test   rdi,0x7
  0072c:    	jne    0x359ca
  00732:    	cmp    DWORD PTR [rdi+0x4],0x25
  00736:    	jne    0x359ca
  0073c: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb100],0x26        # 0xfffeb843
  00743:    	jne    0x359ca
  00749:    	mov    esi,DWORD PTR [rip+0x142d]        # 0x1b7c
  0074f:    	cmp    esi,0xffffffff
  00752:    	je     0x359d9
  00758:    	cmp    WORD PTR [rdi+0x2],0x3
  0075d:    	jne    0x776
  00763:    	cmp    esi,0x6
  00766:    	jge    0x776
  0076c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00771:    	jmp    0x7b8
  00776:    	sub    rsp,0x20
  0077a:    	movq   QWORD PTR [rsp],xmm2
  0077f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00785:    	movq   QWORD PTR [rsp+0x10],xmm4
  0078b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00791: c8 	movabs rax,0x55c84f4d3440
  0079b:    	call   rax
  0079d:    	movq   xmm2,QWORD PTR [rsp]
  007a2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007a8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007ae:    	movq   xmm5,QWORD PTR [rsp+0x18]
  007b4:    	add    rsp,0x20
  007b8:    	mov    QWORD PTR [rbp-0x40],rax
:00046 %4 = literal[0.6]
  007bc: 00 	movq   xmm5,QWORD PTR [rip+0x13c4]        # 0x1b88
  007c4: 99 	movabs rax,0xff1999999999999a
  007ce:    	mov    QWORD PTR [rbp-0x48],rax
:00047 _%3 = %3 < %4                        [Float][Float]
:00048 condnotbr _%3 =>:00062
  007d2:    	mov    rdi,QWORD PTR [rbp-0x40]
  007d6: 00 	test   rdi,0x1
  007dd:    	jne    0x35a38
  007e3: 00 	test   rdi,0x2
  007ea:    	je     0x826
  007f0:    	xorps  xmm6,xmm6
  007f3: 00 	movabs rax,0x8000000000000002
  007fd:    	cmp    rdi,rax
  00800:    	je     0x838
  00806:    	mov    rax,rdi
  00809:    	sar    rax,0x3f
  0080d:    	add    rax,0x2
  00811:    	and    rdi,0xfffffffffffffffc
  00815:    	or     rdi,rax
  00818:    	rol    rdi,0x3d
  0081c:    	movq   xmm6,rdi
  00821:    	jmp    0x838
  00826:    	call   0xfffe8eac
  0082b:    	test   rax,rax
  0082e:    	je     0x35a38
  00834:    	movq   xmm6,xmm0
  00838:    	ucomisd xmm6,xmm5
  0083c:    	jae    0x35aba
:00049 %3 = %2.call y()                     [<INVALID>]
:00050 
  00842: 00 	mov    rdi,0x4
  00849: 01 	sub    DWORD PTR [rip+0x1340],0x1        # 0x1b90
  00850:    	jne    0x35a47
  00856:    	mov    rdi,r12
  00859:    	mov    esi,DWORD PTR [rbp-0x18]
  0085c:    	mov    rdx,QWORD PTR [rbp-0x28]
  00860: c8 	movabs rax,0x55c84f4bca80
  0086a:    	call   rax
  0086c: 00 	mov    rdi,0x4
  00873:    	jmp    0x35a47
:00052 %4 = literal[-0.6]
  00878: 00 	movq   xmm5,QWORD PTR [rip+0x1318]        # 0x1b98
  00880: 99 	movabs rax,0xff1999999999999e
  0088a:    	mov    QWORD PTR [rbp-0x48],rax
:00053 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00054 condnotbr _%3 =>:00062
  0088e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00892:    	mov    rsi,QWORD PTR [rbp-0x48]
  00896: 00 	test   rdi,0x1
  0089d:    	je     0x35a56
  008a3: 00 	test   rsi,0x1
  008aa:    	je     0x35a56
  008b0:    	cmp    rdi,rsi
  008b3:    	jle    0x35ad3
:00055 %3 = 1: i32
  008b9: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00056 %3 = %1.[%3]
  008c1:    	sub    rsp,0x20
  008c5:    	movq   QWORD PTR [rsp],xmm2
  008ca:    	movq   QWORD PTR [rsp+0x8],xmm3
  008d0:    	movq   QWORD PTR [rsp+0x10],xmm4
  008d6:    	movq   QWORD PTR [rsp+0x18],xmm5
  008dc:    	mov    rdx,QWORD PTR [rbp-0x30]
  008e0:    	mov    rcx,QWORD PTR [rbp-0x40]
  008e4:    	mov    rdi,rbx
  008e7:    	mov    rsi,r12
  008ea: c8 	movabs rax,0x55c84f4b6c00
  008f4:    	call   rax
  008f6:    	movq   xmm2,QWORD PTR [rsp]
  008fb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00901:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00907:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0090d:    	add    rsp,0x20
  00911: c8 	movabs r13,0x55c850b4a610
  0091b:    	test   rax,rax
  0091e:    	je     0xfffe8e73
  00924:    	mov    QWORD PTR [rbp-0x40],rax
:00057 %4 = literal[1.0]
  00928: 00 	movq   xmm5,QWORD PTR [rip+0x1278]        # 0x1ba8
  00930: 00 	movabs rax,0xff80000000000002
  0093a:    	mov    QWORD PTR [rbp-0x48],rax
:00058 _ = %3.call y=(%4; 1)                [<INVALID>]
:00059 
  0093e: 00 	mov    rdi,0x4
  00945: 01 	sub    DWORD PTR [rip+0x1264],0x1        # 0x1bb0
  0094c:    	jne    0x35aab
  00952:    	mov    rdi,r12
  00955:    	mov    esi,DWORD PTR [rbp-0x18]
  00958:    	mov    rdx,QWORD PTR [rbp-0x28]
  0095c: c8 	movabs rax,0x55c84f4bca80
  00966:    	call   rax
  00968: 00 	mov    rdi,0x4
  0096f:    	jmp    0x35aab
:00061 br =>:00087
  00974:    	jmp    0x35cf1
:00062 %3 = %2.call z()                     [Vec]
:00063 
  00979:    	mov    rdi,QWORD PTR [rbp-0x38]
  0097d: 00 	test   rdi,0x7
  00984:    	jne    0x35aec
  0098a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0098e:    	jne    0x35aec
  00994: 26 	cmp    DWORD PTR [rip+0xfffffffffffeaea8],0x26        # 0xfffeb843
  0099b:    	jne    0x35aec
  009a1:    	mov    esi,DWORD PTR [rip+0x1211]        # 0x1bb8
  009a7:    	cmp    esi,0xffffffff
  009aa:    	je     0x35afb
  009b0:    	cmp    WORD PTR [rdi+0x2],0x3
  009b5:    	jne    0x9ce
  009bb:    	cmp    esi,0x6
  009be:    	jge    0x9ce
  009c4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009c9:    	jmp    0xa10
  009ce:    	sub    rsp,0x20
  009d2:    	movq   QWORD PTR [rsp],xmm2
  009d7:    	movq   QWORD PTR [rsp+0x8],xmm3
  009dd:    	movq   QWORD PTR [rsp+0x10],xmm4
  009e3:    	movq   QWORD PTR [rsp+0x18],xmm5
  009e9: c8 	movabs rax,0x55c84f4d3440
  009f3:    	call   rax
  009f5:    	movq   xmm2,QWORD PTR [rsp]
  009fa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a00:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a06:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a0c:    	add    rsp,0x20
  00a10:    	mov    QWORD PTR [rbp-0x40],rax
:00065 %4 = literal[0.6]
  00a14: 00 	movq   xmm5,QWORD PTR [rip+0x11ac]        # 0x1bc8
  00a1c: 99 	movabs rax,0xff1999999999999a
  00a26:    	mov    QWORD PTR [rbp-0x48],rax
:00066 _%3 = %3 < %4                        [Float][Float]
:00067 condnotbr _%3 =>:00081
  00a2a:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a2e: 00 	test   rdi,0x1
  00a35:    	jne    0x35b5a
  00a3b: 00 	test   rdi,0x2
  00a42:    	je     0xa7e
  00a48:    	xorps  xmm6,xmm6
  00a4b: 00 	movabs rax,0x8000000000000002
  00a55:    	cmp    rdi,rax
  00a58:    	je     0xa90
  00a5e:    	mov    rax,rdi
  00a61:    	sar    rax,0x3f
  00a65:    	add    rax,0x2
  00a69:    	and    rdi,0xfffffffffffffffc
  00a6d:    	or     rdi,rax
  00a70:    	rol    rdi,0x3d
  00a74:    	movq   xmm6,rdi
  00a79:    	jmp    0xa90
  00a7e:    	call   0xfffe8eac
  00a83:    	test   rax,rax
  00a86:    	je     0x35b5a
  00a8c:    	movq   xmm6,xmm0
  00a90:    	ucomisd xmm6,xmm5
  00a94:    	jae    0x35c5b
:00068 %3 = %2.call z()                     [Vec]
:00069 
  00a9a:    	mov    rdi,QWORD PTR [rbp-0x38]
  00a9e: 00 	test   rdi,0x7
  00aa5:    	jne    0x35b69
  00aab:    	cmp    DWORD PTR [rdi+0x4],0x25
  00aaf:    	jne    0x35b69
  00ab5: 26 	cmp    DWORD PTR [rip+0xfffffffffffead87],0x26        # 0xfffeb843
  00abc:    	jne    0x35b69
  00ac2:    	mov    esi,DWORD PTR [rip+0x110c]        # 0x1bd4
  00ac8:    	cmp    esi,0xffffffff
  00acb:    	je     0x35b78
  00ad1:    	cmp    WORD PTR [rdi+0x2],0x3
  00ad6:    	jne    0xaef
  00adc:    	cmp    esi,0x6
  00adf:    	jge    0xaef
  00ae5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aea:    	jmp    0xb31
  00aef:    	sub    rsp,0x20
  00af3:    	movq   QWORD PTR [rsp],xmm2
  00af8:    	movq   QWORD PTR [rsp+0x8],xmm3
  00afe:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b04:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b0a: c8 	movabs rax,0x55c84f4d3440
  00b14:    	call   rax
  00b16:    	movq   xmm2,QWORD PTR [rsp]
  00b1b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b21:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b27:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b2d:    	add    rsp,0x20
  00b31:    	mov    QWORD PTR [rbp-0x40],rax
:00071 %4 = literal[-0.6]
  00b35: 00 	movq   xmm5,QWORD PTR [rip+0x109b]        # 0x1bd8
  00b3d: 99 	movabs rax,0xff1999999999999e
  00b47:    	mov    QWORD PTR [rbp-0x48],rax
:00072 _%3 = %3 > %4                        [Float][Float]
:00073 condnotbr _%3 =>:00081
  00b4b:    	mov    rdi,QWORD PTR [rbp-0x40]
  00b4f: 00 	test   rdi,0x1
  00b56:    	jne    0x35bd7
  00b5c: 00 	test   rdi,0x2
  00b63:    	je     0xb9f
  00b69:    	xorps  xmm6,xmm6
  00b6c: 00 	movabs rax,0x8000000000000002
  00b76:    	cmp    rdi,rax
  00b79:    	je     0xbb1
  00b7f:    	mov    rax,rdi
  00b82:    	sar    rax,0x3f
  00b86:    	add    rax,0x2
  00b8a:    	and    rdi,0xfffffffffffffffc
  00b8e:    	or     rdi,rax
  00b91:    	rol    rdi,0x3d
  00b95:    	movq   xmm6,rdi
  00b9a:    	jmp    0xbb1
  00b9f:    	call   0xfffe8eac
  00ba4:    	test   rax,rax
  00ba7:    	je     0x35bd7
  00bad:    	movq   xmm6,xmm0
  00bb1:    	ucomisd xmm6,xmm5
  00bb5:    	jbe    0x35c74
:00074 %3 = 1: i32
  00bbb: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00075 %3 = %1.[%3]
  00bc3:    	sub    rsp,0x20
  00bc7:    	movq   QWORD PTR [rsp],xmm2
  00bcc:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bd2:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bd8:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bde:    	mov    rdx,QWORD PTR [rbp-0x30]
  00be2:    	mov    rcx,QWORD PTR [rbp-0x40]
  00be6:    	mov    rdi,rbx
  00be9:    	mov    rsi,r12
  00bec: c8 	movabs rax,0x55c84f4b6c00
  00bf6:    	call   rax
  00bf8:    	movq   xmm2,QWORD PTR [rsp]
  00bfd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c03:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c09:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c0f:    	add    rsp,0x20
  00c13: c8 	movabs r13,0x55c850b4a740
  00c1d:    	test   rax,rax
  00c20:    	je     0xfffe8e73
  00c26:    	mov    QWORD PTR [rbp-0x40],rax
:00076 %4 = literal[1.0]
  00c2a: 00 	movq   xmm5,QWORD PTR [rip+0xfb6]        # 0x1be8
  00c32: 00 	movabs rax,0xff80000000000002
  00c3c:    	mov    QWORD PTR [rbp-0x48],rax
:00077 _ = %3.call z=(%4; 1)                [Vec]
:00078 
  00c40:    	mov    rdi,QWORD PTR [rbp-0x40]
  00c44: 00 	test   rdi,0x7
  00c4b:    	jne    0x35be6
  00c51:    	cmp    DWORD PTR [rdi+0x4],0x25
  00c55:    	jne    0x35be6
  00c5b: 26 	cmp    DWORD PTR [rip+0xfffffffffffeabe1],0x26        # 0xfffeb843
  00c62:    	jne    0x35be6
  00c68:    	mov    esi,DWORD PTR [rip+0xf86]        # 0x1bf4
  00c6e:    	cmp    esi,0xffffffff
  00c71:    	je     0x35bf5
  00c77:    	cmp    WORD PTR [rdi+0x2],0x3
  00c7c:    	jne    0xc99
  00c82:    	cmp    esi,0x6
  00c85:    	jge    0xc99
  00c8b:    	mov    rax,QWORD PTR [rbp-0x48]
  00c8f:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00c94:    	jmp    0xcf2
  00c99:    	sub    rsp,0x20
  00c9d:    	movq   QWORD PTR [rsp],xmm2
  00ca2:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ca8:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cae:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cb4:    	mov    rdx,QWORD PTR [rbp-0x48]
  00cb8: c8 	movabs rax,0x55c84f4d36c0
  00cc2:    	call   rax
  00cc4:    	movq   xmm2,QWORD PTR [rsp]
  00cc9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ccf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cd5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cdb:    	add    rsp,0x20
  00cdf: c8 	movabs r13,0x55c850b4a770
  00ce9:    	test   rax,rax
  00cec:    	je     0xfffe8e73
:00080 br =>:00087
  00cf2:    	jmp    0x35d0a
:00081 %3 = 1: i32
  00cf7: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00082 %3 = %1.[%3]
  00cff:    	sub    rsp,0x20
  00d03:    	movq   QWORD PTR [rsp],xmm2
  00d08:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d0e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d14:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d1a:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d1e:    	mov    rcx,QWORD PTR [rbp-0x40]
  00d22:    	mov    rdi,rbx
  00d25:    	mov    rsi,r12
  00d28: c8 	movabs rax,0x55c84f4b6c00
  00d32:    	call   rax
  00d34:    	movq   xmm2,QWORD PTR [rsp]
  00d39:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d3f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d45:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d4b:    	add    rsp,0x20
  00d4f: c8 	movabs r13,0x55c850b4a7b0
  00d59:    	test   rax,rax
  00d5c:    	je     0xfffe8e73
  00d62:    	mov    QWORD PTR [rbp-0x40],rax
:00083 %4 = literal[1.0]
  00d66: 00 	movq   xmm5,QWORD PTR [rip+0xe8a]        # 0x1bf8
  00d6e: 00 	movabs rax,0xff80000000000002
  00d78:    	mov    QWORD PTR [rbp-0x48],rax
:00084 _ = %3.call x=(%4; 1)                [<INVALID>]
:00085 
  00d7c: 00 	mov    rdi,0x4
  00d83: 01 	sub    DWORD PTR [rip+0xe76],0x1        # 0x1c00
  00d8a:    	jne    0x35c8d
  00d90:    	mov    rdi,r12
  00d93:    	mov    esi,DWORD PTR [rbp-0x18]
  00d96:    	mov    rdx,QWORD PTR [rbp-0x28]
  00d9a: c8 	movabs rax,0x55c84f4bca80
  00da4:    	call   rax
  00da6: 00 	mov    rdi,0x4
  00dad:    	jmp    0x35c8d
:00087 %3 = 0: i32
  00db2: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  00dba: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  00dc2:    	sub    rsp,0x20
  00dc6:    	movq   QWORD PTR [rsp],xmm2
  00dcb:    	movq   QWORD PTR [rsp+0x8],xmm3
  00dd1:    	movq   QWORD PTR [rsp+0x10],xmm4
  00dd7:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ddd:    	mov    rdx,QWORD PTR [rbp-0x30]
  00de1:    	mov    rcx,QWORD PTR [rbp-0x50]
  00de5:    	mov    rdi,rbx
  00de8:    	mov    rsi,r12
  00deb: c8 	movabs rax,0x55c84f4b6c00
  00df5:    	call   rax
  00df7:    	movq   xmm2,QWORD PTR [rsp]
  00dfc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e02:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e08:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e0e:    	add    rsp,0x20
  00e12: c8 	movabs r13,0x55c850b4a820
  00e1c:    	test   rax,rax
  00e1f:    	je     0xfffe8e73
  00e25:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  00e29: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  00e31:    	sub    rsp,0x20
  00e35:    	movq   QWORD PTR [rsp],xmm3
  00e3a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e40:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e46:    	mov    rdx,QWORD PTR [rbp-0x30]
  00e4a:    	mov    rcx,QWORD PTR [rbp-0x58]
  00e4e:    	mov    rdi,rbx
  00e51:    	mov    rsi,r12
  00e54: c8 	movabs rax,0x55c84f4b6c00
  00e5e:    	call   rax
  00e60:    	movq   xmm3,QWORD PTR [rsp]
  00e65:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e6b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e71:    	add    rsp,0x20
  00e75: c8 	movabs r13,0x55c850b4a840
  00e7f:    	test   rax,rax
  00e82:    	je     0xfffe8e73
  00e88:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  00e8c:    	mov    rdi,QWORD PTR [rbp-0x50]
  00e90: 00 	test   rdi,0x7
  00e97:    	jne    0x35c9c
  00e9d:    	cmp    DWORD PTR [rdi+0x4],0x25
  00ea1:    	jne    0x35c9c
  00ea7: 26 	cmp    DWORD PTR [rip+0xfffffffffffea995],0x26        # 0xfffeb843
  00eae:    	jne    0x35c9c
  00eb4:    	sub    rsp,0x10
  00eb8:    	movq   QWORD PTR [rsp],xmm3
  00ebd:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ec3:    	mov    rax,QWORD PTR [rbx]
  00ec6:    	lea    rdi,[rsp-0x18]
  00ecb:    	mov    QWORD PTR [rdi],rax
  00ece:    	mov    QWORD PTR [rbx],rdi
  00ed1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00eda:    	mov    QWORD PTR [rsp-0x38],rcx
  00edf:    	mov    rax,QWORD PTR [rbp-0x50]
  00ee3:    	mov    QWORD PTR [rsp-0x38],rax
  00ee8: 00 	mov    rdi,0x1
  00eef:    	mov    rax,QWORD PTR [rbp-0x58]
  00ef3:    	mov    QWORD PTR [rsp-0x40],rax
  00ef8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f01: 09 	movabs rax,0x90000003a
  00f0b:    	mov    QWORD PTR [rsp-0x28],rax
  00f10: c8 	movabs r13,0x55c850b2eeb0
  00f1a:    	call   0xffff29ac
  00f1f:    	lea    rdi,[rbp-0x8]
  00f23:    	mov    QWORD PTR [rbx],rdi
  00f26:    	movq   xmm3,QWORD PTR [rsp]
  00f2b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f31:    	add    rsp,0x10
  00f35: c8 	movabs r13,0x55c850b4a860
  00f3f:    	test   rax,rax
  00f42:    	je     0xfffe8e73
  00f48:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  00f4c:    	sub    rsp,0x10
  00f50:    	movq   QWORD PTR [rsp],xmm3
  00f55:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f5b:    	mov    rdx,QWORD PTR [rbp-0x30]
  00f5f:    	mov    rcx,QWORD PTR [rbp-0x40]
  00f63:    	mov    r8,QWORD PTR [rbp-0x48]
  00f67:    	mov    rdi,rbx
  00f6a:    	mov    rsi,r12
  00f6d: c8 	movabs rax,0x55c84f4b6d10
  00f77:    	call   rax
  00f79:    	movq   xmm3,QWORD PTR [rsp]
  00f7e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f84:    	add    rsp,0x10
  00f88: c8 	movabs r13,0x55c850b4a880
  00f92:    	test   rax,rax
  00f95:    	je     0xfffe8e73
:00096 %3 = 0: i32
  00f9b: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  00fa3: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  00fab:    	sub    rsp,0x10
  00faf:    	movq   QWORD PTR [rsp],xmm3
  00fb4:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fba:    	mov    rdx,QWORD PTR [rbp-0x30]
  00fbe:    	mov    rcx,QWORD PTR [rbp-0x50]
  00fc2:    	mov    rdi,rbx
  00fc5:    	mov    rsi,r12
  00fc8: c8 	movabs rax,0x55c84f4b6c00
  00fd2:    	call   rax
  00fd4:    	movq   xmm3,QWORD PTR [rsp]
  00fd9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fdf:    	add    rsp,0x10
  00fe3: c8 	movabs r13,0x55c850b4a8b0
  00fed:    	test   rax,rax
  00ff0:    	je     0xfffe8e73
  00ff6:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  00ffa:    	mov    rdi,QWORD PTR [rbp-0x50]
  00ffe: 00 	test   rdi,0x7
  01005:    	jne    0x35cab
  0100b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0100f:    	jne    0x35cab
  01015: 26 	cmp    DWORD PTR [rip+0xfffffffffffea827],0x26        # 0xfffeb843
  0101c:    	jne    0x35cab
  01022:    	sub    rsp,0x10
  01026:    	movq   QWORD PTR [rsp],xmm3
  0102b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01031:    	mov    rax,QWORD PTR [rbx]
  01034:    	lea    rdi,[rsp-0x18]
  01039:    	mov    QWORD PTR [rdi],rax
  0103c:    	mov    QWORD PTR [rbx],rdi
  0103f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01048:    	mov    QWORD PTR [rsp-0x38],rcx
  0104d:    	mov    rax,QWORD PTR [rbp-0x50]
  01051:    	mov    QWORD PTR [rsp-0x38],rax
  01056: 00 	mov    rdi,0x0
  0105d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01066: 07 	movabs rax,0x100070000003d
  01070:    	mov    QWORD PTR [rsp-0x28],rax
  01075: c8 	movabs r13,0x55c850b416a0
  0107f:    	call   0xfffec101
  01084:    	lea    rdi,[rbp-0x8]
  01088:    	mov    QWORD PTR [rbx],rdi
  0108b:    	movq   xmm3,QWORD PTR [rsp]
  01090:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01096:    	add    rsp,0x10
  0109a: c8 	movabs r13,0x55c850b4a8d0
  010a4:    	test   rax,rax
  010a7:    	je     0xfffe8e73
  010ad:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  010b1:    	sub    rsp,0x10
  010b5:    	movq   QWORD PTR [rsp],xmm3
  010ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  010c0:    	mov    rdx,QWORD PTR [rbp-0x30]
  010c4:    	mov    rcx,QWORD PTR [rbp-0x40]
  010c8:    	mov    r8,QWORD PTR [rbp-0x48]
  010cc:    	mov    rdi,rbx
  010cf:    	mov    rsi,r12
  010d2: c8 	movabs rax,0x55c84f4b6d10
  010dc:    	call   rax
  010de:    	movq   xmm3,QWORD PTR [rsp]
  010e3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010e9:    	add    rsp,0x10
  010ed: c8 	movabs r13,0x55c850b4a8f0
  010f7:    	test   rax,rax
  010fa:    	je     0xfffe8e73
:00103 %3 = 1: i32
  01100: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  01108: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  01110:    	sub    rsp,0x10
  01114:    	movq   QWORD PTR [rsp],xmm3
  01119:    	movq   QWORD PTR [rsp+0x8],xmm4
  0111f:    	mov    rdx,QWORD PTR [rbp-0x30]
  01123:    	mov    rcx,QWORD PTR [rbp-0x50]
  01127:    	mov    rdi,rbx
  0112a:    	mov    rsi,r12
  0112d: c8 	movabs rax,0x55c84f4b6c00
  01137:    	call   rax
  01139:    	movq   xmm3,QWORD PTR [rsp]
  0113e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01144:    	add    rsp,0x10
  01148: c8 	movabs r13,0x55c850b4a920
  01152:    	test   rax,rax
  01155:    	je     0xfffe8e73
  0115b:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  0115f: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  01167:    	sub    rsp,0x10
  0116b:    	movq   QWORD PTR [rsp],xmm3
  01170:    	movq   QWORD PTR [rsp+0x8],xmm4
  01176:    	mov    rdx,QWORD PTR [rbp-0x30]
  0117a:    	mov    rcx,QWORD PTR [rbp-0x58]
  0117e:    	mov    rdi,rbx
  01181:    	mov    rsi,r12
  01184: c8 	movabs rax,0x55c84f4b6c00
  0118e:    	call   rax
  01190:    	movq   xmm3,QWORD PTR [rsp]
  01195:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0119b:    	add    rsp,0x10
  0119f: c8 	movabs r13,0x55c850b4a940
  011a9:    	test   rax,rax
  011ac:    	je     0xfffe8e73
  011b2:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  011b6:    	mov    rdi,QWORD PTR [rbp-0x50]
  011ba: 00 	test   rdi,0x7
  011c1:    	jne    0x35cba
  011c7:    	cmp    DWORD PTR [rdi+0x4],0x25
  011cb:    	jne    0x35cba
  011d1: 26 	cmp    DWORD PTR [rip+0xfffffffffffea66b],0x26        # 0xfffeb843
  011d8:    	jne    0x35cba
  011de:    	sub    rsp,0x10
  011e2:    	movq   QWORD PTR [rsp],xmm3
  011e7:    	movq   QWORD PTR [rsp+0x8],xmm4
  011ed:    	mov    rax,QWORD PTR [rbx]
  011f0:    	lea    rdi,[rsp-0x18]
  011f5:    	mov    QWORD PTR [rdi],rax
  011f8:    	mov    QWORD PTR [rbx],rdi
  011fb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01204:    	mov    QWORD PTR [rsp-0x38],rcx
  01209:    	mov    rax,QWORD PTR [rbp-0x50]
  0120d:    	mov    QWORD PTR [rsp-0x38],rax
  01212: 00 	mov    rdi,0x1
  01219:    	mov    rax,QWORD PTR [rbp-0x58]
  0121d:    	mov    QWORD PTR [rsp-0x40],rax
  01222: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0122b: 09 	movabs rax,0x90000003a
  01235:    	mov    QWORD PTR [rsp-0x28],rax
  0123a: c8 	movabs r13,0x55c850b2eeb0
  01244:    	call   0xffff29ac
  01249:    	lea    rdi,[rbp-0x8]
  0124d:    	mov    QWORD PTR [rbx],rdi
  01250:    	movq   xmm3,QWORD PTR [rsp]
  01255:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0125b:    	add    rsp,0x10
  0125f: c8 	movabs r13,0x55c850b4a960
  01269:    	test   rax,rax
  0126c:    	je     0xfffe8e73
  01272:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  01276:    	sub    rsp,0x10
  0127a:    	movq   QWORD PTR [rsp],xmm3
  0127f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01285:    	mov    rdx,QWORD PTR [rbp-0x30]
  01289:    	mov    rcx,QWORD PTR [rbp-0x40]
  0128d:    	mov    r8,QWORD PTR [rbp-0x48]
  01291:    	mov    rdi,rbx
  01294:    	mov    rsi,r12
  01297: c8 	movabs rax,0x55c84f4b6d10
  012a1:    	call   rax
  012a3:    	movq   xmm3,QWORD PTR [rsp]
  012a8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012ae:    	add    rsp,0x10
  012b2: c8 	movabs r13,0x55c850b4a980
  012bc:    	test   rax,rax
  012bf:    	je     0xfffe8e73
:00112 %3 = 1: i32
  012c5: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  012cd: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  012d5:    	sub    rsp,0x10
  012d9:    	movq   QWORD PTR [rsp],xmm3
  012de:    	movq   QWORD PTR [rsp+0x8],xmm4
  012e4:    	mov    rdx,QWORD PTR [rbp-0x30]
  012e8:    	mov    rcx,QWORD PTR [rbp-0x50]
  012ec:    	mov    rdi,rbx
  012ef:    	mov    rsi,r12
  012f2: c8 	movabs rax,0x55c84f4b6c00
  012fc:    	call   rax
  012fe:    	movq   xmm3,QWORD PTR [rsp]
  01303:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01309:    	add    rsp,0x10
  0130d: c8 	movabs r13,0x55c850b4a9b0
  01317:    	test   rax,rax
  0131a:    	je     0xfffe8e73
  01320:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  01324:    	mov    rdi,QWORD PTR [rbp-0x50]
  01328: 00 	test   rdi,0x7
  0132f:    	jne    0x35cc9
  01335:    	cmp    DWORD PTR [rdi+0x4],0x25
  01339:    	jne    0x35cc9
  0133f: 26 	cmp    DWORD PTR [rip+0xfffffffffffea4fd],0x26        # 0xfffeb843
  01346:    	jne    0x35cc9
  0134c:    	sub    rsp,0x10
  01350:    	movq   QWORD PTR [rsp],xmm3
  01355:    	movq   QWORD PTR [rsp+0x8],xmm4
  0135b:    	mov    rax,QWORD PTR [rbx]
  0135e:    	lea    rdi,[rsp-0x18]
  01363:    	mov    QWORD PTR [rdi],rax
  01366:    	mov    QWORD PTR [rbx],rdi
  01369: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01372:    	mov    QWORD PTR [rsp-0x38],rcx
  01377:    	mov    rax,QWORD PTR [rbp-0x50]
  0137b:    	mov    QWORD PTR [rsp-0x38],rax
  01380: 00 	mov    rdi,0x0
  01387: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01390: 07 	movabs rax,0x100070000003d
  0139a:    	mov    QWORD PTR [rsp-0x28],rax
  0139f: c8 	movabs r13,0x55c850b416a0
  013a9:    	call   0xfffec101
  013ae:    	lea    rdi,[rbp-0x8]
  013b2:    	mov    QWORD PTR [rbx],rdi
  013b5:    	movq   xmm3,QWORD PTR [rsp]
  013ba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013c0:    	add    rsp,0x10
  013c4: c8 	movabs r13,0x55c850b4a9d0
  013ce:    	test   rax,rax
  013d1:    	je     0xfffe8e73
  013d7:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  013db:    	sub    rsp,0x10
  013df:    	movq   QWORD PTR [rsp],xmm3
  013e4:    	movq   QWORD PTR [rsp+0x8],xmm4
  013ea:    	mov    rdx,QWORD PTR [rbp-0x30]
  013ee:    	mov    rcx,QWORD PTR [rbp-0x40]
  013f2:    	mov    r8,QWORD PTR [rbp-0x48]
  013f6:    	mov    rdi,rbx
  013f9:    	mov    rsi,r12
  013fc: c8 	movabs rax,0x55c84f4b6d10
  01406:    	call   rax
  01408:    	movq   xmm3,QWORD PTR [rsp]
  0140d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01413:    	add    rsp,0x10
  01417: c8 	movabs r13,0x55c850b4a9f0
  01421:    	test   rax,rax
  01424:    	je     0xfffe8e73
:00119 %3 = %4
  0142a:    	mov    rax,QWORD PTR [rbp-0x48]
  0142e:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  01432:    	mov    rax,QWORD PTR [rbp-0x40]
  01436:    	leave  
  01437:    	ret    
:00087 %3 = 0: i32
  01438: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  01440: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  01448:    	sub    rsp,0x20
  0144c:    	movq   QWORD PTR [rsp],xmm2
  01451:    	movq   QWORD PTR [rsp+0x8],xmm3
  01457:    	movq   QWORD PTR [rsp+0x10],xmm4
  0145d:    	movq   QWORD PTR [rsp+0x18],xmm5
  01463:    	mov    rdx,QWORD PTR [rbp-0x30]
  01467:    	mov    rcx,QWORD PTR [rbp-0x50]
  0146b:    	mov    rdi,rbx
  0146e:    	mov    rsi,r12
  01471: c8 	movabs rax,0x55c84f4b6c00
  0147b:    	call   rax
  0147d:    	movq   xmm2,QWORD PTR [rsp]
  01482:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01488:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0148e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01494:    	add    rsp,0x20
  01498: c8 	movabs r13,0x55c850b4a820
  014a2:    	test   rax,rax
  014a5:    	je     0xfffe8e73
  014ab:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  014af: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  014b7:    	sub    rsp,0x20
  014bb:    	movq   QWORD PTR [rsp],xmm3
  014c0:    	movq   QWORD PTR [rsp+0x8],xmm4
  014c6:    	movq   QWORD PTR [rsp+0x10],xmm5
  014cc:    	mov    rdx,QWORD PTR [rbp-0x30]
  014d0:    	mov    rcx,QWORD PTR [rbp-0x58]
  014d4:    	mov    rdi,rbx
  014d7:    	mov    rsi,r12
  014da: c8 	movabs rax,0x55c84f4b6c00
  014e4:    	call   rax
  014e6:    	movq   xmm3,QWORD PTR [rsp]
  014eb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014f1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  014f7:    	add    rsp,0x20
  014fb: c8 	movabs r13,0x55c850b4a840
  01505:    	test   rax,rax
  01508:    	je     0xfffe8e73
  0150e:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  01512:    	mov    rdi,QWORD PTR [rbp-0x50]
  01516: 00 	test   rdi,0x7
  0151d:    	jne    0x35d23
  01523:    	cmp    DWORD PTR [rdi+0x4],0x25
  01527:    	jne    0x35d23
  0152d: 26 	cmp    DWORD PTR [rip+0xfffffffffffea30f],0x26        # 0xfffeb843
  01534:    	jne    0x35d23
  0153a:    	sub    rsp,0x10
  0153e:    	movq   QWORD PTR [rsp],xmm3
  01543:    	movq   QWORD PTR [rsp+0x8],xmm4
  01549:    	mov    rax,QWORD PTR [rbx]
  0154c:    	lea    rdi,[rsp-0x18]
  01551:    	mov    QWORD PTR [rdi],rax
  01554:    	mov    QWORD PTR [rbx],rdi
  01557: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01560:    	mov    QWORD PTR [rsp-0x38],rcx
  01565:    	mov    rax,QWORD PTR [rbp-0x50]
  01569:    	mov    QWORD PTR [rsp-0x38],rax
  0156e: 00 	mov    rdi,0x1
  01575:    	mov    rax,QWORD PTR [rbp-0x58]
  01579:    	mov    QWORD PTR [rsp-0x40],rax
  0157e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01587: 09 	movabs rax,0x90000003a
  01591:    	mov    QWORD PTR [rsp-0x28],rax
  01596: c8 	movabs r13,0x55c850b2eeb0
  015a0:    	call   0xffff29ac
  015a5:    	lea    rdi,[rbp-0x8]
  015a9:    	mov    QWORD PTR [rbx],rdi
  015ac:    	movq   xmm3,QWORD PTR [rsp]
  015b1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015b7:    	add    rsp,0x10
  015bb: c8 	movabs r13,0x55c850b4a860
  015c5:    	test   rax,rax
  015c8:    	je     0xfffe8e73
  015ce:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  015d2:    	sub    rsp,0x10
  015d6:    	movq   QWORD PTR [rsp],xmm3
  015db:    	movq   QWORD PTR [rsp+0x8],xmm4
  015e1:    	mov    rdx,QWORD PTR [rbp-0x30]
  015e5:    	mov    rcx,QWORD PTR [rbp-0x40]
  015e9:    	mov    r8,QWORD PTR [rbp-0x48]
  015ed:    	mov    rdi,rbx
  015f0:    	mov    rsi,r12
  015f3: c8 	movabs rax,0x55c84f4b6d10
  015fd:    	call   rax
  015ff:    	movq   xmm3,QWORD PTR [rsp]
  01604:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0160a:    	add    rsp,0x10
  0160e: c8 	movabs r13,0x55c850b4a880
  01618:    	test   rax,rax
  0161b:    	je     0xfffe8e73
:00096 %3 = 0: i32
  01621: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  01629: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  01631:    	sub    rsp,0x10
  01635:    	movq   QWORD PTR [rsp],xmm3
  0163a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01640:    	mov    rdx,QWORD PTR [rbp-0x30]
  01644:    	mov    rcx,QWORD PTR [rbp-0x50]
  01648:    	mov    rdi,rbx
  0164b:    	mov    rsi,r12
  0164e: c8 	movabs rax,0x55c84f4b6c00
  01658:    	call   rax
  0165a:    	movq   xmm3,QWORD PTR [rsp]
  0165f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01665:    	add    rsp,0x10
  01669: c8 	movabs r13,0x55c850b4a8b0
  01673:    	test   rax,rax
  01676:    	je     0xfffe8e73
  0167c:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  01680:    	mov    rdi,QWORD PTR [rbp-0x50]
  01684: 00 	test   rdi,0x7
  0168b:    	jne    0x35d32
  01691:    	cmp    DWORD PTR [rdi+0x4],0x25
  01695:    	jne    0x35d32
  0169b: 26 	cmp    DWORD PTR [rip+0xfffffffffffea1a1],0x26        # 0xfffeb843
  016a2:    	jne    0x35d32
  016a8:    	sub    rsp,0x10
  016ac:    	movq   QWORD PTR [rsp],xmm3
  016b1:    	movq   QWORD PTR [rsp+0x8],xmm4
  016b7:    	mov    rax,QWORD PTR [rbx]
  016ba:    	lea    rdi,[rsp-0x18]
  016bf:    	mov    QWORD PTR [rdi],rax
  016c2:    	mov    QWORD PTR [rbx],rdi
  016c5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016ce:    	mov    QWORD PTR [rsp-0x38],rcx
  016d3:    	mov    rax,QWORD PTR [rbp-0x50]
  016d7:    	mov    QWORD PTR [rsp-0x38],rax
  016dc: 00 	mov    rdi,0x0
  016e3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016ec: 07 	movabs rax,0x100070000003d
  016f6:    	mov    QWORD PTR [rsp-0x28],rax
  016fb: c8 	movabs r13,0x55c850b416a0
  01705:    	call   0xfffec101
  0170a:    	lea    rdi,[rbp-0x8]
  0170e:    	mov    QWORD PTR [rbx],rdi
  01711:    	movq   xmm3,QWORD PTR [rsp]
  01716:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0171c:    	add    rsp,0x10
  01720: c8 	movabs r13,0x55c850b4a8d0
  0172a:    	test   rax,rax
  0172d:    	je     0xfffe8e73
  01733:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  01737:    	sub    rsp,0x10
  0173b:    	movq   QWORD PTR [rsp],xmm3
  01740:    	movq   QWORD PTR [rsp+0x8],xmm4
  01746:    	mov    rdx,QWORD PTR [rbp-0x30]
  0174a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0174e:    	mov    r8,QWORD PTR [rbp-0x48]
  01752:    	mov    rdi,rbx
  01755:    	mov    rsi,r12
  01758: c8 	movabs rax,0x55c84f4b6d10
  01762:    	call   rax
  01764:    	movq   xmm3,QWORD PTR [rsp]
  01769:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0176f:    	add    rsp,0x10
  01773: c8 	movabs r13,0x55c850b4a8f0
  0177d:    	test   rax,rax
  01780:    	je     0xfffe8e73
:00103 %3 = 1: i32
  01786: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  0178e: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  01796:    	sub    rsp,0x10
  0179a:    	movq   QWORD PTR [rsp],xmm3
  0179f:    	movq   QWORD PTR [rsp+0x8],xmm4
  017a5:    	mov    rdx,QWORD PTR [rbp-0x30]
  017a9:    	mov    rcx,QWORD PTR [rbp-0x50]
  017ad:    	mov    rdi,rbx
  017b0:    	mov    rsi,r12
  017b3: c8 	movabs rax,0x55c84f4b6c00
  017bd:    	call   rax
  017bf:    	movq   xmm3,QWORD PTR [rsp]
  017c4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017ca:    	add    rsp,0x10
  017ce: c8 	movabs r13,0x55c850b4a920
  017d8:    	test   rax,rax
  017db:    	je     0xfffe8e73
  017e1:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  017e5: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  017ed:    	sub    rsp,0x10
  017f1:    	movq   QWORD PTR [rsp],xmm3
  017f6:    	movq   QWORD PTR [rsp+0x8],xmm4
  017fc:    	mov    rdx,QWORD PTR [rbp-0x30]
  01800:    	mov    rcx,QWORD PTR [rbp-0x58]
  01804:    	mov    rdi,rbx
  01807:    	mov    rsi,r12
  0180a: c8 	movabs rax,0x55c84f4b6c00
  01814:    	call   rax
  01816:    	movq   xmm3,QWORD PTR [rsp]
  0181b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01821:    	add    rsp,0x10
  01825: c8 	movabs r13,0x55c850b4a940
  0182f:    	test   rax,rax
  01832:    	je     0xfffe8e73
  01838:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  0183c:    	mov    rdi,QWORD PTR [rbp-0x50]
  01840: 00 	test   rdi,0x7
  01847:    	jne    0x35d41
  0184d:    	cmp    DWORD PTR [rdi+0x4],0x25
  01851:    	jne    0x35d41
  01857: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9fe5],0x26        # 0xfffeb843
  0185e:    	jne    0x35d41
  01864:    	sub    rsp,0x10
  01868:    	movq   QWORD PTR [rsp],xmm3
  0186d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01873:    	mov    rax,QWORD PTR [rbx]
  01876:    	lea    rdi,[rsp-0x18]
  0187b:    	mov    QWORD PTR [rdi],rax
  0187e:    	mov    QWORD PTR [rbx],rdi
  01881: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0188a:    	mov    QWORD PTR [rsp-0x38],rcx
  0188f:    	mov    rax,QWORD PTR [rbp-0x50]
  01893:    	mov    QWORD PTR [rsp-0x38],rax
  01898: 00 	mov    rdi,0x1
  0189f:    	mov    rax,QWORD PTR [rbp-0x58]
  018a3:    	mov    QWORD PTR [rsp-0x40],rax
  018a8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018b1: 09 	movabs rax,0x90000003a
  018bb:    	mov    QWORD PTR [rsp-0x28],rax
  018c0: c8 	movabs r13,0x55c850b2eeb0
  018ca:    	call   0xffff29ac
  018cf:    	lea    rdi,[rbp-0x8]
  018d3:    	mov    QWORD PTR [rbx],rdi
  018d6:    	movq   xmm3,QWORD PTR [rsp]
  018db:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018e1:    	add    rsp,0x10
  018e5: c8 	movabs r13,0x55c850b4a960
  018ef:    	test   rax,rax
  018f2:    	je     0xfffe8e73
  018f8:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  018fc:    	sub    rsp,0x10
  01900:    	movq   QWORD PTR [rsp],xmm3
  01905:    	movq   QWORD PTR [rsp+0x8],xmm4
  0190b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0190f:    	mov    rcx,QWORD PTR [rbp-0x40]
  01913:    	mov    r8,QWORD PTR [rbp-0x48]
  01917:    	mov    rdi,rbx
  0191a:    	mov    rsi,r12
  0191d: c8 	movabs rax,0x55c84f4b6d10
  01927:    	call   rax
  01929:    	movq   xmm3,QWORD PTR [rsp]
  0192e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01934:    	add    rsp,0x10
  01938: c8 	movabs r13,0x55c850b4a980
  01942:    	test   rax,rax
  01945:    	je     0xfffe8e73
:00112 %3 = 1: i32
  0194b: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  01953: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  0195b:    	sub    rsp,0x10
  0195f:    	movq   QWORD PTR [rsp],xmm3
  01964:    	movq   QWORD PTR [rsp+0x8],xmm4
  0196a:    	mov    rdx,QWORD PTR [rbp-0x30]
  0196e:    	mov    rcx,QWORD PTR [rbp-0x50]
  01972:    	mov    rdi,rbx
  01975:    	mov    rsi,r12
  01978: c8 	movabs rax,0x55c84f4b6c00
  01982:    	call   rax
  01984:    	movq   xmm3,QWORD PTR [rsp]
  01989:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0198f:    	add    rsp,0x10
  01993: c8 	movabs r13,0x55c850b4a9b0
  0199d:    	test   rax,rax
  019a0:    	je     0xfffe8e73
  019a6:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  019aa:    	mov    rdi,QWORD PTR [rbp-0x50]
  019ae: 00 	test   rdi,0x7
  019b5:    	jne    0x35d50
  019bb:    	cmp    DWORD PTR [rdi+0x4],0x25
  019bf:    	jne    0x35d50
  019c5: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9e77],0x26        # 0xfffeb843
  019cc:    	jne    0x35d50
  019d2:    	sub    rsp,0x10
  019d6:    	movq   QWORD PTR [rsp],xmm3
  019db:    	movq   QWORD PTR [rsp+0x8],xmm4
  019e1:    	mov    rax,QWORD PTR [rbx]
  019e4:    	lea    rdi,[rsp-0x18]
  019e9:    	mov    QWORD PTR [rdi],rax
  019ec:    	mov    QWORD PTR [rbx],rdi
  019ef: 00 	mov    QWORD PTR [rsp-0x20],0x0
  019f8:    	mov    QWORD PTR [rsp-0x38],rcx
  019fd:    	mov    rax,QWORD PTR [rbp-0x50]
  01a01:    	mov    QWORD PTR [rsp-0x38],rax
  01a06: 00 	mov    rdi,0x0
  01a0d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a16: 07 	movabs rax,0x100070000003d
  01a20:    	mov    QWORD PTR [rsp-0x28],rax
  01a25: c8 	movabs r13,0x55c850b416a0
  01a2f:    	call   0xfffec101
  01a34:    	lea    rdi,[rbp-0x8]
  01a38:    	mov    QWORD PTR [rbx],rdi
  01a3b:    	movq   xmm3,QWORD PTR [rsp]
  01a40:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a46:    	add    rsp,0x10
  01a4a: c8 	movabs r13,0x55c850b4a9d0
  01a54:    	test   rax,rax
  01a57:    	je     0xfffe8e73
  01a5d:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  01a61:    	sub    rsp,0x10
  01a65:    	movq   QWORD PTR [rsp],xmm3
  01a6a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a70:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a74:    	mov    rcx,QWORD PTR [rbp-0x40]
  01a78:    	mov    r8,QWORD PTR [rbp-0x48]
  01a7c:    	mov    rdi,rbx
  01a7f:    	mov    rsi,r12
  01a82: c8 	movabs rax,0x55c84f4b6d10
  01a8c:    	call   rax
  01a8e:    	movq   xmm3,QWORD PTR [rsp]
  01a93:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a99:    	add    rsp,0x10
  01a9d: c8 	movabs r13,0x55c850b4a9f0
  01aa7:    	test   rax,rax
  01aaa:    	je     0xfffe8e73
:00119 %3 = %4
  01ab0:    	mov    rax,QWORD PTR [rbp-0x48]
  01ab4:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  01ab8:    	mov    rax,QWORD PTR [rbp-0x40]
  01abc:    	leave  
  01abd:    	ret    
==> start whole compile: otherBasis FuncId(53) self_class:Scene start:[00000] bytecode:0x55c850b4a280
<== finished compile. elapsed:168.8µs
offset:Pos(101836) code: 7140 bytes  data: 316 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	sub    rsp,0x70
  00008: 00 	mov    rax,0x4
  0000f:    	mov    QWORD PTR [rbp-0x40],rax
  00013:    	mov    QWORD PTR [rbp-0x48],rax
  00017:    	mov    QWORD PTR [rbp-0x50],rax
  0001b:    	mov    QWORD PTR [rbp-0x58],rax
  0001f:    	mov    QWORD PTR [rbp-0x60],rax
  00023:    	mov    QWORD PTR [rbp-0x68],rax
  00027:    	mov    rdi,QWORD PTR [rbp-0x28]
  0002b: 00 	test   rdi,0x7
  00032:    	jne    0x3415b
  00038:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0003c:    	jne    0x3415b
:00000 %3 = 2: i32
  00042: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00001 %5 = const[Vec]                      [Vec]
  0004a: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe9bf3]        # 0xfffe9c44
  00051: 00 	cmp    rax,QWORD PTR [rip+0x1b9c]        # 0x1bf4
  00058:    	jne    0x3416a
  0005e: 00 	mov    rax,QWORD PTR [rip+0x1b7f]        # 0x1be4
  00065:    	mov    QWORD PTR [rbp-0x50],rax
:00002 %6 = %2.call x()                     [Vec]
:00003 
  00069:    	mov    rdi,QWORD PTR [rbp-0x38]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x341b0
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0007e:    	jne    0x341b0
  00084: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9bb4],0x26        # 0xfffe9c3f
  0008b:    	jne    0x341b0
  00091:    	mov    esi,DWORD PTR [rip+0x1b69]        # 0x1c00
  00097:    	cmp    esi,0xffffffff
  0009a:    	je     0x341bf
  000a0:    	cmp    WORD PTR [rdi+0x2],0x3
  000a5:    	jne    0xbe
  000ab:    	cmp    esi,0x6
  000ae:    	jge    0xbe
  000b4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000b9:    	jmp    0xca
  000be: c8 	movabs rax,0x55c84f4d3440
  000c8:    	call   rax
  000ca:    	mov    QWORD PTR [rbp-0x58],rax
:00005 %7 = %2.call y()                     [Vec]
:00006 
  000ce:    	mov    rdi,QWORD PTR [rbp-0x38]
  000d2: 00 	test   rdi,0x7
  000d9:    	jne    0x341e8
  000df:    	cmp    DWORD PTR [rdi+0x4],0x25
  000e3:    	jne    0x341e8
  000e9: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9b4f],0x26        # 0xfffe9c3f
  000f0:    	jne    0x341e8
  000f6:    	mov    esi,DWORD PTR [rip+0x1b0c]        # 0x1c08
  000fc:    	cmp    esi,0xffffffff
  000ff:    	je     0x341f7
  00105:    	cmp    WORD PTR [rdi+0x2],0x3
  0010a:    	jne    0x123
  00110:    	cmp    esi,0x6
  00113:    	jge    0x123
  00119:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0011e:    	jmp    0x12f
  00123: c8 	movabs rax,0x55c84f4d3440
  0012d:    	call   rax
  0012f:    	mov    QWORD PTR [rbp-0x60],rax
:00008 %8 = %2.call z()                     [Vec]
:00009 
  00133:    	mov    rdi,QWORD PTR [rbp-0x38]
  00137: 00 	test   rdi,0x7
  0013e:    	jne    0x34220
  00144:    	cmp    DWORD PTR [rdi+0x4],0x25
  00148:    	jne    0x34220
  0014e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9aea],0x26        # 0xfffe9c3f
  00155:    	jne    0x34220
  0015b:    	mov    esi,DWORD PTR [rip+0x1aaf]        # 0x1c10
  00161:    	cmp    esi,0xffffffff
  00164:    	je     0x3422f
  0016a:    	cmp    WORD PTR [rdi+0x2],0x3
  0016f:    	jne    0x188
  00175:    	cmp    esi,0x6
  00178:    	jge    0x188
  0017e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00183:    	jmp    0x194
  00188: c8 	movabs rax,0x55c84f4d3440
  00192:    	call   rax
  00194:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00012 
  00198:    	mov    rdi,QWORD PTR [rbp-0x50]
  0019c: 00 	test   rdi,0x7
  001a3:    	jne    0x34258
  001a9:    	cmp    DWORD PTR [rdi+0x4],0x26
  001ad:    	jne    0x34258
  001b3: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9a85],0x26        # 0xfffe9c3f
  001ba:    	jne    0x34258
  001c0: 00 	mov    r9,0x0
  001c7:    	mov    rdx,rdi
  001ca:    	mov    rax,QWORD PTR [rbx]
  001cd:    	lea    rdi,[rsp-0x18]
  001d2:    	mov    QWORD PTR [rdi],rax
  001d5:    	mov    QWORD PTR [rbx],rdi
  001d8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  001e1:    	mov    QWORD PTR [rsp-0x38],rcx
  001e6:    	lea    rcx,[rbp-0x58]
  001ea: 00 	mov    r8,0x3
  001f1:    	call   0x34267
  001f6:    	lea    rdi,[rbp-0x8]
  001fa:    	mov    QWORD PTR [rbx],rdi
  001fd: c8 	movabs r13,0x55c850b4a350
  00207:    	test   rax,rax
  0020a:    	je     0xfffe726f
  00210:    	mov    QWORD PTR [rbp-0x48],rax
:00014 %1.[%3] = %4
  00214:    	mov    rdx,QWORD PTR [rbp-0x30]
  00218:    	mov    rcx,QWORD PTR [rbp-0x40]
  0021c:    	mov    r8,QWORD PTR [rbp-0x48]
  00220:    	mov    rdi,rbx
  00223:    	mov    rsi,r12
  00226: c8 	movabs rax,0x55c84f4b6d10
  00230:    	call   rax
  00232: c8 	movabs r13,0x55c850b4a370
  0023c:    	test   rax,rax
  0023f:    	je     0xfffe726f
:00015 %3 = 1: i32
  00245: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00016 %5 = const[Vec]                      [Vec]
  0024d: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe99f0]        # 0xfffe9c44
  00254: 00 	cmp    rax,QWORD PTR [rip+0x19c9]        # 0x1c24
  0025b:    	jne    0x34299
  00261: 00 	mov    rax,QWORD PTR [rip+0x19ac]        # 0x1c14
  00268:    	mov    QWORD PTR [rbp-0x50],rax
:00017 %6 = literal[0.0]
  0026c: 00 	movq   xmm2,QWORD PTR [rip+0x19c0]        # 0x1c34
  00274: 00 	movabs rax,0x8000000000000002
  0027e:    	mov    QWORD PTR [rbp-0x58],rax
:00018 %7 = literal[0.0]
  00282: 00 	movq   xmm3,QWORD PTR [rip+0x19ba]        # 0x1c44
  0028a: 00 	movabs rax,0x8000000000000002
  00294:    	mov    QWORD PTR [rbp-0x60],rax
:00019 %8 = literal[0.0]
  00298: 00 	movq   xmm4,QWORD PTR [rip+0x19b4]        # 0x1c54
  002a0: 00 	movabs rax,0x8000000000000002
  002aa:    	mov    QWORD PTR [rbp-0x68],rax
:00020 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00021 
  002ae:    	mov    rdi,QWORD PTR [rbp-0x50]
  002b2: 00 	test   rdi,0x7
  002b9:    	jne    0x342df
  002bf:    	cmp    DWORD PTR [rdi+0x4],0x26
  002c3:    	jne    0x342df
  002c9: 26 	cmp    DWORD PTR [rip+0xfffffffffffe996f],0x26        # 0xfffe9c3f
  002d0:    	jne    0x342df
  002d6: 00 	mov    r9,0x0
  002dd:    	sub    rsp,0x20
  002e1:    	movq   QWORD PTR [rsp],xmm2
  002e6:    	movq   QWORD PTR [rsp+0x8],xmm3
  002ec:    	movq   QWORD PTR [rsp+0x10],xmm4
  002f2:    	mov    rdx,rdi
  002f5:    	mov    rax,QWORD PTR [rbx]
  002f8:    	lea    rdi,[rsp-0x18]
  002fd:    	mov    QWORD PTR [rdi],rax
  00300:    	mov    QWORD PTR [rbx],rdi
  00303: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0030c:    	mov    QWORD PTR [rsp-0x38],rcx
  00311:    	lea    rcx,[rbp-0x58]
  00315: 00 	mov    r8,0x3
  0031c:    	call   0x342ee
  00321:    	lea    rdi,[rbp-0x8]
  00325:    	mov    QWORD PTR [rbx],rdi
  00328:    	movq   xmm2,QWORD PTR [rsp]
  0032d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00333:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00339:    	add    rsp,0x20
  0033d: c8 	movabs r13,0x55c850b4a3e0
  00347:    	test   rax,rax
  0034a:    	je     0xfffe726f
  00350:    	mov    QWORD PTR [rbp-0x48],rax
:00023 %1.[%3] = %4
  00354:    	sub    rsp,0x20
  00358:    	movq   QWORD PTR [rsp],xmm2
  0035d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00363:    	movq   QWORD PTR [rsp+0x10],xmm4
  00369:    	mov    rdx,QWORD PTR [rbp-0x30]
  0036d:    	mov    rcx,QWORD PTR [rbp-0x40]
  00371:    	mov    r8,QWORD PTR [rbp-0x48]
  00375:    	mov    rdi,rbx
  00378:    	mov    rsi,r12
  0037b: c8 	movabs rax,0x55c84f4b6d10
  00385:    	call   rax
  00387:    	movq   xmm2,QWORD PTR [rsp]
  0038c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00392:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00398:    	add    rsp,0x20
  0039c: c8 	movabs r13,0x55c850b4a400
  003a6:    	test   rax,rax
  003a9:    	je     0xfffe726f
:00024 %3 = %2.call x()                     [Vec]
:00025 
  003af:    	mov    rdi,QWORD PTR [rbp-0x38]
  003b3: 00 	test   rdi,0x7
  003ba:    	jne    0x34320
  003c0:    	cmp    DWORD PTR [rdi+0x4],0x25
  003c4:    	jne    0x34320
  003ca: 26 	cmp    DWORD PTR [rip+0xfffffffffffe986e],0x26        # 0xfffe9c3f
  003d1:    	jne    0x34320
  003d7:    	mov    esi,DWORD PTR [rip+0x1883]        # 0x1c60
  003dd:    	cmp    esi,0xffffffff
  003e0:    	je     0x3432f
  003e6:    	cmp    WORD PTR [rdi+0x2],0x3
  003eb:    	jne    0x404
  003f1:    	cmp    esi,0x6
  003f4:    	jge    0x404
  003fa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003ff:    	jmp    0x43a
  00404:    	sub    rsp,0x20
  00408:    	movq   QWORD PTR [rsp],xmm2
  0040d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00413:    	movq   QWORD PTR [rsp+0x10],xmm4
  00419: c8 	movabs rax,0x55c84f4d3440
  00423:    	call   rax
  00425:    	movq   xmm2,QWORD PTR [rsp]
  0042a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00430:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00436:    	add    rsp,0x20
  0043a:    	mov    QWORD PTR [rbp-0x40],rax
:00027 %4 = literal[0.6]
  0043e: 00 	movq   xmm5,QWORD PTR [rip+0x181e]        # 0x1c64
  00446: 99 	movabs rax,0xff1999999999999a
  00450:    	mov    QWORD PTR [rbp-0x48],rax
:00028 _%3 = %3 < %4                        [Float][Float]
:00029 condnotbr _%3 =>:00043
  00454:    	mov    rdi,QWORD PTR [rbp-0x40]
  00458: 00 	test   rdi,0x1
  0045f:    	jne    0x34382
  00465: 00 	test   rdi,0x2
  0046c:    	je     0x4a8
  00472:    	xorps  xmm6,xmm6
  00475: 00 	movabs rax,0x8000000000000002
  0047f:    	cmp    rdi,rax
  00482:    	je     0x4ba
  00488:    	mov    rax,rdi
  0048b:    	sar    rax,0x3f
  0048f:    	add    rax,0x2
  00493:    	and    rdi,0xfffffffffffffffc
  00497:    	or     rdi,rax
  0049a:    	rol    rdi,0x3d
  0049e:    	movq   xmm6,rdi
  004a3:    	jmp    0x4ba
  004a8:    	call   0xfffe72a8
  004ad:    	test   rax,rax
  004b0:    	je     0x34382
  004b6:    	movq   xmm6,xmm0
  004ba:    	ucomisd xmm6,xmm5
  004be:    	jae    0x34483
:00030 %3 = %2.call x()                     [Vec]
:00031 
  004c4:    	mov    rdi,QWORD PTR [rbp-0x38]
  004c8: 00 	test   rdi,0x7
  004cf:    	jne    0x34391
  004d5:    	cmp    DWORD PTR [rdi+0x4],0x25
  004d9:    	jne    0x34391
  004df: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9759],0x26        # 0xfffe9c3f
  004e6:    	jne    0x34391
  004ec:    	mov    esi,DWORD PTR [rip+0x177e]        # 0x1c70
  004f2:    	cmp    esi,0xffffffff
  004f5:    	je     0x343a0
  004fb:    	cmp    WORD PTR [rdi+0x2],0x3
  00500:    	jne    0x519
  00506:    	cmp    esi,0x6
  00509:    	jge    0x519
  0050f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00514:    	jmp    0x55b
  00519:    	sub    rsp,0x20
  0051d:    	movq   QWORD PTR [rsp],xmm2
  00522:    	movq   QWORD PTR [rsp+0x8],xmm3
  00528:    	movq   QWORD PTR [rsp+0x10],xmm4
  0052e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00534: c8 	movabs rax,0x55c84f4d3440
  0053e:    	call   rax
  00540:    	movq   xmm2,QWORD PTR [rsp]
  00545:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0054b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00551:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00557:    	add    rsp,0x20
  0055b:    	mov    QWORD PTR [rbp-0x40],rax
:00033 %4 = literal[-0.6]
  0055f: 00 	movq   xmm5,QWORD PTR [rip+0x170d]        # 0x1c74
  00567: 99 	movabs rax,0xff1999999999999e
  00571:    	mov    QWORD PTR [rbp-0x48],rax
:00034 _%3 = %3 > %4                        [Float][Float]
:00035 condnotbr _%3 =>:00043
  00575:    	mov    rdi,QWORD PTR [rbp-0x40]
  00579: 00 	test   rdi,0x1
  00580:    	jne    0x343ff
  00586: 00 	test   rdi,0x2
  0058d:    	je     0x5c9
  00593:    	xorps  xmm6,xmm6
  00596: 00 	movabs rax,0x8000000000000002
  005a0:    	cmp    rdi,rax
  005a3:    	je     0x5db
  005a9:    	mov    rax,rdi
  005ac:    	sar    rax,0x3f
  005b0:    	add    rax,0x2
  005b4:    	and    rdi,0xfffffffffffffffc
  005b8:    	or     rdi,rax
  005bb:    	rol    rdi,0x3d
  005bf:    	movq   xmm6,rdi
  005c4:    	jmp    0x5db
  005c9:    	call   0xfffe72a8
  005ce:    	test   rax,rax
  005d1:    	je     0x343ff
  005d7:    	movq   xmm6,xmm0
  005db:    	ucomisd xmm6,xmm5
  005df:    	jbe    0x3449c
:00036 %3 = 1: i32
  005e5: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00037 %3 = %1.[%3]
  005ed:    	sub    rsp,0x20
  005f1:    	movq   QWORD PTR [rsp],xmm2
  005f6:    	movq   QWORD PTR [rsp+0x8],xmm3
  005fc:    	movq   QWORD PTR [rsp+0x10],xmm4
  00602:    	movq   QWORD PTR [rsp+0x18],xmm5
  00608:    	mov    rdx,QWORD PTR [rbp-0x30]
  0060c:    	mov    rcx,QWORD PTR [rbp-0x40]
  00610:    	mov    rdi,rbx
  00613:    	mov    rsi,r12
  00616: c8 	movabs rax,0x55c84f4b6c00
  00620:    	call   rax
  00622:    	movq   xmm2,QWORD PTR [rsp]
  00627:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0062d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00633:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00639:    	add    rsp,0x20
  0063d: c8 	movabs r13,0x55c850b4a4e0
  00647:    	test   rax,rax
  0064a:    	je     0xfffe726f
  00650:    	mov    QWORD PTR [rbp-0x40],rax
:00038 %4 = literal[1.0]
  00654: 00 	movq   xmm5,QWORD PTR [rip+0x1628]        # 0x1c84
  0065c: 00 	movabs rax,0xff80000000000002
  00666:    	mov    QWORD PTR [rbp-0x48],rax
:00039 _ = %3.call x=(%4; 1)                [Vec]
:00040 
  0066a:    	mov    rdi,QWORD PTR [rbp-0x40]
  0066e: 00 	test   rdi,0x7
  00675:    	jne    0x3440e
  0067b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0067f:    	jne    0x3440e
  00685: 26 	cmp    DWORD PTR [rip+0xfffffffffffe95b3],0x26        # 0xfffe9c3f
  0068c:    	jne    0x3440e
  00692:    	mov    esi,DWORD PTR [rip+0x15f8]        # 0x1c90
  00698:    	cmp    esi,0xffffffff
  0069b:    	je     0x3441d
  006a1:    	cmp    WORD PTR [rdi+0x2],0x3
  006a6:    	jne    0x6c3
  006ac:    	cmp    esi,0x6
  006af:    	jge    0x6c3
  006b5:    	mov    rax,QWORD PTR [rbp-0x48]
  006b9:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006be:    	jmp    0x71c
  006c3:    	sub    rsp,0x20
  006c7:    	movq   QWORD PTR [rsp],xmm2
  006cc:    	movq   QWORD PTR [rsp+0x8],xmm3
  006d2:    	movq   QWORD PTR [rsp+0x10],xmm4
  006d8:    	movq   QWORD PTR [rsp+0x18],xmm5
  006de:    	mov    rdx,QWORD PTR [rbp-0x48]
  006e2: c8 	movabs rax,0x55c84f4d36c0
  006ec:    	call   rax
  006ee:    	movq   xmm2,QWORD PTR [rsp]
  006f3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006f9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006ff:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00705:    	add    rsp,0x20
  00709: c8 	movabs r13,0x55c850b4a510
  00713:    	test   rax,rax
  00716:    	je     0xfffe726f
:00042 br =>:00087
  0071c:    	jmp    0x34842
:00043 %3 = %2.call y()                     [Vec]
:00044 
  00721:    	mov    rdi,QWORD PTR [rbp-0x38]
  00725: 00 	test   rdi,0x7
  0072c:    	jne    0x344b5
  00732:    	cmp    DWORD PTR [rdi+0x4],0x25
  00736:    	jne    0x344b5
  0073c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe94fc],0x26        # 0xfffe9c3f
  00743:    	jne    0x344b5
  00749:    	mov    esi,DWORD PTR [rip+0x1549]        # 0x1c98
  0074f:    	cmp    esi,0xffffffff
  00752:    	je     0x344c4
  00758:    	cmp    WORD PTR [rdi+0x2],0x3
  0075d:    	jne    0x776
  00763:    	cmp    esi,0x6
  00766:    	jge    0x776
  0076c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00771:    	jmp    0x7b8
  00776:    	sub    rsp,0x20
  0077a:    	movq   QWORD PTR [rsp],xmm2
  0077f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00785:    	movq   QWORD PTR [rsp+0x10],xmm4
  0078b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00791: c8 	movabs rax,0x55c84f4d3440
  0079b:    	call   rax
  0079d:    	movq   xmm2,QWORD PTR [rsp]
  007a2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007a8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007ae:    	movq   xmm5,QWORD PTR [rsp+0x18]
  007b4:    	add    rsp,0x20
  007b8:    	mov    QWORD PTR [rbp-0x40],rax
:00046 %4 = literal[0.6]
  007bc: 00 	movq   xmm5,QWORD PTR [rip+0x14e0]        # 0x1ca4
  007c4: 99 	movabs rax,0xff1999999999999a
  007ce:    	mov    QWORD PTR [rbp-0x48],rax
:00047 _%3 = %3 < %4                        [Float][Float]
:00048 condnotbr _%3 =>:00062
  007d2:    	mov    rdi,QWORD PTR [rbp-0x40]
  007d6: 00 	test   rdi,0x1
  007dd:    	jne    0x34523
  007e3: 00 	test   rdi,0x2
  007ea:    	je     0x826
  007f0:    	xorps  xmm6,xmm6
  007f3: 00 	movabs rax,0x8000000000000002
  007fd:    	cmp    rdi,rax
  00800:    	je     0x838
  00806:    	mov    rax,rdi
  00809:    	sar    rax,0x3f
  0080d:    	add    rax,0x2
  00811:    	and    rdi,0xfffffffffffffffc
  00815:    	or     rdi,rax
  00818:    	rol    rdi,0x3d
  0081c:    	movq   xmm6,rdi
  00821:    	jmp    0x838
  00826:    	call   0xfffe72a8
  0082b:    	test   rax,rax
  0082e:    	je     0x34523
  00834:    	movq   xmm6,xmm0
  00838:    	ucomisd xmm6,xmm5
  0083c:    	jae    0x34624
:00049 %3 = %2.call y()                     [Vec]
:00050 
  00842:    	mov    rdi,QWORD PTR [rbp-0x38]
  00846: 00 	test   rdi,0x7
  0084d:    	jne    0x34532
  00853:    	cmp    DWORD PTR [rdi+0x4],0x25
  00857:    	jne    0x34532
  0085d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe93db],0x26        # 0xfffe9c3f
  00864:    	jne    0x34532
  0086a:    	mov    esi,DWORD PTR [rip+0x1440]        # 0x1cb0
  00870:    	cmp    esi,0xffffffff
  00873:    	je     0x34541
  00879:    	cmp    WORD PTR [rdi+0x2],0x3
  0087e:    	jne    0x897
  00884:    	cmp    esi,0x6
  00887:    	jge    0x897
  0088d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00892:    	jmp    0x8d9
  00897:    	sub    rsp,0x20
  0089b:    	movq   QWORD PTR [rsp],xmm2
  008a0:    	movq   QWORD PTR [rsp+0x8],xmm3
  008a6:    	movq   QWORD PTR [rsp+0x10],xmm4
  008ac:    	movq   QWORD PTR [rsp+0x18],xmm5
  008b2: c8 	movabs rax,0x55c84f4d3440
  008bc:    	call   rax
  008be:    	movq   xmm2,QWORD PTR [rsp]
  008c3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008c9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008cf:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008d5:    	add    rsp,0x20
  008d9:    	mov    QWORD PTR [rbp-0x40],rax
:00052 %4 = literal[-0.6]
  008dd: 00 	movq   xmm5,QWORD PTR [rip+0x13cf]        # 0x1cb4
  008e5: 99 	movabs rax,0xff1999999999999e
  008ef:    	mov    QWORD PTR [rbp-0x48],rax
:00053 _%3 = %3 > %4                        [Float][Float]
:00054 condnotbr _%3 =>:00062
  008f3:    	mov    rdi,QWORD PTR [rbp-0x40]
  008f7: 00 	test   rdi,0x1
  008fe:    	jne    0x345a0
  00904: 00 	test   rdi,0x2
  0090b:    	je     0x947
  00911:    	xorps  xmm6,xmm6
  00914: 00 	movabs rax,0x8000000000000002
  0091e:    	cmp    rdi,rax
  00921:    	je     0x959
  00927:    	mov    rax,rdi
  0092a:    	sar    rax,0x3f
  0092e:    	add    rax,0x2
  00932:    	and    rdi,0xfffffffffffffffc
  00936:    	or     rdi,rax
  00939:    	rol    rdi,0x3d
  0093d:    	movq   xmm6,rdi
  00942:    	jmp    0x959
  00947:    	call   0xfffe72a8
  0094c:    	test   rax,rax
  0094f:    	je     0x345a0
  00955:    	movq   xmm6,xmm0
  00959:    	ucomisd xmm6,xmm5
  0095d:    	jbe    0x3463d
:00055 %3 = 1: i32
  00963: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00056 %3 = %1.[%3]
  0096b:    	sub    rsp,0x20
  0096f:    	movq   QWORD PTR [rsp],xmm2
  00974:    	movq   QWORD PTR [rsp+0x8],xmm3
  0097a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00980:    	movq   QWORD PTR [rsp+0x18],xmm5
  00986:    	mov    rdx,QWORD PTR [rbp-0x30]
  0098a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0098e:    	mov    rdi,rbx
  00991:    	mov    rsi,r12
  00994: c8 	movabs rax,0x55c84f4b6c00
  0099e:    	call   rax
  009a0:    	movq   xmm2,QWORD PTR [rsp]
  009a5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009ab:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009b1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009b7:    	add    rsp,0x20
  009bb: c8 	movabs r13,0x55c850b4a610
  009c5:    	test   rax,rax
  009c8:    	je     0xfffe726f
  009ce:    	mov    QWORD PTR [rbp-0x40],rax
:00057 %4 = literal[1.0]
  009d2: 00 	movq   xmm5,QWORD PTR [rip+0x12ea]        # 0x1cc4
  009da: 00 	movabs rax,0xff80000000000002
  009e4:    	mov    QWORD PTR [rbp-0x48],rax
:00058 _ = %3.call y=(%4; 1)                [Vec]
:00059 
  009e8:    	mov    rdi,QWORD PTR [rbp-0x40]
  009ec: 00 	test   rdi,0x7
  009f3:    	jne    0x345af
  009f9:    	cmp    DWORD PTR [rdi+0x4],0x25
  009fd:    	jne    0x345af
  00a03: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9235],0x26        # 0xfffe9c3f
  00a0a:    	jne    0x345af
  00a10:    	mov    esi,DWORD PTR [rip+0x12ba]        # 0x1cd0
  00a16:    	cmp    esi,0xffffffff
  00a19:    	je     0x345be
  00a1f:    	cmp    WORD PTR [rdi+0x2],0x3
  00a24:    	jne    0xa41
  00a2a:    	cmp    esi,0x6
  00a2d:    	jge    0xa41
  00a33:    	mov    rax,QWORD PTR [rbp-0x48]
  00a37:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00a3c:    	jmp    0xa9a
  00a41:    	sub    rsp,0x20
  00a45:    	movq   QWORD PTR [rsp],xmm2
  00a4a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a50:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a56:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a5c:    	mov    rdx,QWORD PTR [rbp-0x48]
  00a60: c8 	movabs rax,0x55c84f4d36c0
  00a6a:    	call   rax
  00a6c:    	movq   xmm2,QWORD PTR [rsp]
  00a71:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a77:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a7d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a83:    	add    rsp,0x20
  00a87: c8 	movabs r13,0x55c850b4a640
  00a91:    	test   rax,rax
  00a94:    	je     0xfffe726f
:00061 br =>:00087
  00a9a:    	jmp    0x3485b
:00062 %3 = %2.call z()                     [Vec]
:00063 
  00a9f:    	mov    rdi,QWORD PTR [rbp-0x38]
  00aa3: 00 	test   rdi,0x7
  00aaa:    	jne    0x34656
  00ab0:    	cmp    DWORD PTR [rdi+0x4],0x25
  00ab4:    	jne    0x34656
  00aba: 26 	cmp    DWORD PTR [rip+0xfffffffffffe917e],0x26        # 0xfffe9c3f
  00ac1:    	jne    0x34656
  00ac7:    	mov    esi,DWORD PTR [rip+0x120b]        # 0x1cd8
  00acd:    	cmp    esi,0xffffffff
  00ad0:    	je     0x34665
  00ad6:    	cmp    WORD PTR [rdi+0x2],0x3
  00adb:    	jne    0xaf4
  00ae1:    	cmp    esi,0x6
  00ae4:    	jge    0xaf4
  00aea:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aef:    	jmp    0xb36
  00af4:    	sub    rsp,0x20
  00af8:    	movq   QWORD PTR [rsp],xmm2
  00afd:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b03:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b09:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b0f: c8 	movabs rax,0x55c84f4d3440
  00b19:    	call   rax
  00b1b:    	movq   xmm2,QWORD PTR [rsp]
  00b20:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b26:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b2c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b32:    	add    rsp,0x20
  00b36:    	mov    QWORD PTR [rbp-0x40],rax
:00065 %4 = literal[0.6]
  00b3a: 00 	movq   xmm5,QWORD PTR [rip+0x11a2]        # 0x1ce4
  00b42: 99 	movabs rax,0xff1999999999999a
  00b4c:    	mov    QWORD PTR [rbp-0x48],rax
:00066 _%3 = %3 < %4                        [Float][Float]
:00067 condnotbr _%3 =>:00081
  00b50:    	mov    rdi,QWORD PTR [rbp-0x40]
  00b54: 00 	test   rdi,0x1
  00b5b:    	jne    0x346c4
  00b61: 00 	test   rdi,0x2
  00b68:    	je     0xba4
  00b6e:    	xorps  xmm6,xmm6
  00b71: 00 	movabs rax,0x8000000000000002
  00b7b:    	cmp    rdi,rax
  00b7e:    	je     0xbb6
  00b84:    	mov    rax,rdi
  00b87:    	sar    rax,0x3f
  00b8b:    	add    rax,0x2
  00b8f:    	and    rdi,0xfffffffffffffffc
  00b93:    	or     rdi,rax
  00b96:    	rol    rdi,0x3d
  00b9a:    	movq   xmm6,rdi
  00b9f:    	jmp    0xbb6
  00ba4:    	call   0xfffe72a8
  00ba9:    	test   rax,rax
  00bac:    	je     0x346c4
  00bb2:    	movq   xmm6,xmm0
  00bb6:    	ucomisd xmm6,xmm5
  00bba:    	jae    0x347c5
:00068 %3 = %2.call z()                     [Vec]
:00069 
  00bc0:    	mov    rdi,QWORD PTR [rbp-0x38]
  00bc4: 00 	test   rdi,0x7
  00bcb:    	jne    0x346d3
  00bd1:    	cmp    DWORD PTR [rdi+0x4],0x25
  00bd5:    	jne    0x346d3
  00bdb: 26 	cmp    DWORD PTR [rip+0xfffffffffffe905d],0x26        # 0xfffe9c3f
  00be2:    	jne    0x346d3
  00be8:    	mov    esi,DWORD PTR [rip+0x1102]        # 0x1cf0
  00bee:    	cmp    esi,0xffffffff
  00bf1:    	je     0x346e2
  00bf7:    	cmp    WORD PTR [rdi+0x2],0x3
  00bfc:    	jne    0xc15
  00c02:    	cmp    esi,0x6
  00c05:    	jge    0xc15
  00c0b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c10:    	jmp    0xc57
  00c15:    	sub    rsp,0x20
  00c19:    	movq   QWORD PTR [rsp],xmm2
  00c1e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c24:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c2a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c30: c8 	movabs rax,0x55c84f4d3440
  00c3a:    	call   rax
  00c3c:    	movq   xmm2,QWORD PTR [rsp]
  00c41:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c47:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c4d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c53:    	add    rsp,0x20
  00c57:    	mov    QWORD PTR [rbp-0x40],rax
:00071 %4 = literal[-0.6]
  00c5b: 00 	movq   xmm5,QWORD PTR [rip+0x1091]        # 0x1cf4
  00c63: 99 	movabs rax,0xff1999999999999e
  00c6d:    	mov    QWORD PTR [rbp-0x48],rax
:00072 _%3 = %3 > %4                        [Float][Float]
:00073 condnotbr _%3 =>:00081
  00c71:    	mov    rdi,QWORD PTR [rbp-0x40]
  00c75: 00 	test   rdi,0x1
  00c7c:    	jne    0x34741
  00c82: 00 	test   rdi,0x2
  00c89:    	je     0xcc5
  00c8f:    	xorps  xmm6,xmm6
  00c92: 00 	movabs rax,0x8000000000000002
  00c9c:    	cmp    rdi,rax
  00c9f:    	je     0xcd7
  00ca5:    	mov    rax,rdi
  00ca8:    	sar    rax,0x3f
  00cac:    	add    rax,0x2
  00cb0:    	and    rdi,0xfffffffffffffffc
  00cb4:    	or     rdi,rax
  00cb7:    	rol    rdi,0x3d
  00cbb:    	movq   xmm6,rdi
  00cc0:    	jmp    0xcd7
  00cc5:    	call   0xfffe72a8
  00cca:    	test   rax,rax
  00ccd:    	je     0x34741
  00cd3:    	movq   xmm6,xmm0
  00cd7:    	ucomisd xmm6,xmm5
  00cdb:    	jbe    0x347de
:00074 %3 = 1: i32
  00ce1: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00075 %3 = %1.[%3]
  00ce9:    	sub    rsp,0x20
  00ced:    	movq   QWORD PTR [rsp],xmm2
  00cf2:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cf8:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cfe:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d04:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d08:    	mov    rcx,QWORD PTR [rbp-0x40]
  00d0c:    	mov    rdi,rbx
  00d0f:    	mov    rsi,r12
  00d12: c8 	movabs rax,0x55c84f4b6c00
  00d1c:    	call   rax
  00d1e:    	movq   xmm2,QWORD PTR [rsp]
  00d23:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d29:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d2f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d35:    	add    rsp,0x20
  00d39: c8 	movabs r13,0x55c850b4a740
  00d43:    	test   rax,rax
  00d46:    	je     0xfffe726f
  00d4c:    	mov    QWORD PTR [rbp-0x40],rax
:00076 %4 = literal[1.0]
  00d50: 00 	movq   xmm5,QWORD PTR [rip+0xfac]        # 0x1d04
  00d58: 00 	movabs rax,0xff80000000000002
  00d62:    	mov    QWORD PTR [rbp-0x48],rax
:00077 _ = %3.call z=(%4; 1)                [Vec]
:00078 
  00d66:    	mov    rdi,QWORD PTR [rbp-0x40]
  00d6a: 00 	test   rdi,0x7
  00d71:    	jne    0x34750
  00d77:    	cmp    DWORD PTR [rdi+0x4],0x25
  00d7b:    	jne    0x34750
  00d81: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8eb7],0x26        # 0xfffe9c3f
  00d88:    	jne    0x34750
  00d8e:    	mov    esi,DWORD PTR [rip+0xf7c]        # 0x1d10
  00d94:    	cmp    esi,0xffffffff
  00d97:    	je     0x3475f
  00d9d:    	cmp    WORD PTR [rdi+0x2],0x3
  00da2:    	jne    0xdbf
  00da8:    	cmp    esi,0x6
  00dab:    	jge    0xdbf
  00db1:    	mov    rax,QWORD PTR [rbp-0x48]
  00db5:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00dba:    	jmp    0xe18
  00dbf:    	sub    rsp,0x20
  00dc3:    	movq   QWORD PTR [rsp],xmm2
  00dc8:    	movq   QWORD PTR [rsp+0x8],xmm3
  00dce:    	movq   QWORD PTR [rsp+0x10],xmm4
  00dd4:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dda:    	mov    rdx,QWORD PTR [rbp-0x48]
  00dde: c8 	movabs rax,0x55c84f4d36c0
  00de8:    	call   rax
  00dea:    	movq   xmm2,QWORD PTR [rsp]
  00def:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00df5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00dfb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e01:    	add    rsp,0x20
  00e05: c8 	movabs r13,0x55c850b4a770
  00e0f:    	test   rax,rax
  00e12:    	je     0xfffe726f
:00080 br =>:00087
  00e18:    	jmp    0x34874
:00081 %3 = 1: i32
  00e1d: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00082 %3 = %1.[%3]
  00e25:    	sub    rsp,0x20
  00e29:    	movq   QWORD PTR [rsp],xmm2
  00e2e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e34:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e3a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e40:    	mov    rdx,QWORD PTR [rbp-0x30]
  00e44:    	mov    rcx,QWORD PTR [rbp-0x40]
  00e48:    	mov    rdi,rbx
  00e4b:    	mov    rsi,r12
  00e4e: c8 	movabs rax,0x55c84f4b6c00
  00e58:    	call   rax
  00e5a:    	movq   xmm2,QWORD PTR [rsp]
  00e5f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e65:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e6b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e71:    	add    rsp,0x20
  00e75: c8 	movabs r13,0x55c850b4a7b0
  00e7f:    	test   rax,rax
  00e82:    	je     0xfffe726f
  00e88:    	mov    QWORD PTR [rbp-0x40],rax
:00083 %4 = literal[1.0]
  00e8c: 00 	movq   xmm5,QWORD PTR [rip+0xe80]        # 0x1d14
  00e94: 00 	movabs rax,0xff80000000000002
  00e9e:    	mov    QWORD PTR [rbp-0x48],rax
:00084 _ = %3.call x=(%4; 1)                [<INVALID>]
:00085 
  00ea2: 00 	mov    rdi,0x4
  00ea9: 01 	sub    DWORD PTR [rip+0xe6c],0x1        # 0x1d1c
  00eb0:    	jne    0x347f7
  00eb6:    	mov    rdi,r12
  00eb9:    	mov    esi,DWORD PTR [rbp-0x18]
  00ebc:    	mov    rdx,QWORD PTR [rbp-0x28]
  00ec0: c8 	movabs rax,0x55c84f4bca80
  00eca:    	call   rax
  00ecc: 00 	mov    rdi,0x4
  00ed3:    	jmp    0x347f7
:00087 %3 = 0: i32
  00ed8: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  00ee0: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  00ee8:    	sub    rsp,0x20
  00eec:    	movq   QWORD PTR [rsp],xmm2
  00ef1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ef7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00efd:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f03:    	mov    rdx,QWORD PTR [rbp-0x30]
  00f07:    	mov    rcx,QWORD PTR [rbp-0x50]
  00f0b:    	mov    rdi,rbx
  00f0e:    	mov    rsi,r12
  00f11: c8 	movabs rax,0x55c84f4b6c00
  00f1b:    	call   rax
  00f1d:    	movq   xmm2,QWORD PTR [rsp]
  00f22:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f28:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f2e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f34:    	add    rsp,0x20
  00f38: c8 	movabs r13,0x55c850b4a820
  00f42:    	test   rax,rax
  00f45:    	je     0xfffe726f
  00f4b:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  00f4f: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  00f57:    	sub    rsp,0x20
  00f5b:    	movq   QWORD PTR [rsp],xmm3
  00f60:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f66:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f6c:    	mov    rdx,QWORD PTR [rbp-0x30]
  00f70:    	mov    rcx,QWORD PTR [rbp-0x58]
  00f74:    	mov    rdi,rbx
  00f77:    	mov    rsi,r12
  00f7a: c8 	movabs rax,0x55c84f4b6c00
  00f84:    	call   rax
  00f86:    	movq   xmm3,QWORD PTR [rsp]
  00f8b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f91:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f97:    	add    rsp,0x20
  00f9b: c8 	movabs r13,0x55c850b4a840
  00fa5:    	test   rax,rax
  00fa8:    	je     0xfffe726f
  00fae:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  00fb2:    	mov    rdi,QWORD PTR [rbp-0x50]
  00fb6: 00 	test   rdi,0x7
  00fbd:    	jne    0x34806
  00fc3:    	cmp    DWORD PTR [rdi+0x4],0x25
  00fc7:    	jne    0x34806
  00fcd: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8c6b],0x26        # 0xfffe9c3f
  00fd4:    	jne    0x34806
  00fda:    	sub    rsp,0x10
  00fde:    	movq   QWORD PTR [rsp],xmm3
  00fe3:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fe9:    	mov    rax,QWORD PTR [rbx]
  00fec:    	lea    rdi,[rsp-0x18]
  00ff1:    	mov    QWORD PTR [rdi],rax
  00ff4:    	mov    QWORD PTR [rbx],rdi
  00ff7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01000:    	mov    QWORD PTR [rsp-0x38],rcx
  01005:    	mov    rax,QWORD PTR [rbp-0x50]
  01009:    	mov    QWORD PTR [rsp-0x38],rax
  0100e: 00 	mov    rdi,0x1
  01015:    	mov    rax,QWORD PTR [rbp-0x58]
  01019:    	mov    QWORD PTR [rsp-0x40],rax
  0101e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01027: 09 	movabs rax,0x90000003a
  01031:    	mov    QWORD PTR [rsp-0x28],rax
  01036: c8 	movabs r13,0x55c850b2eeb0
  01040:    	call   0xffff0da8
  01045:    	lea    rdi,[rbp-0x8]
  01049:    	mov    QWORD PTR [rbx],rdi
  0104c:    	movq   xmm3,QWORD PTR [rsp]
  01051:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01057:    	add    rsp,0x10
  0105b: c8 	movabs r13,0x55c850b4a860
  01065:    	test   rax,rax
  01068:    	je     0xfffe726f
  0106e:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  01072:    	sub    rsp,0x10
  01076:    	movq   QWORD PTR [rsp],xmm3
  0107b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01081:    	mov    rdx,QWORD PTR [rbp-0x30]
  01085:    	mov    rcx,QWORD PTR [rbp-0x40]
  01089:    	mov    r8,QWORD PTR [rbp-0x48]
  0108d:    	mov    rdi,rbx
  01090:    	mov    rsi,r12
  01093: c8 	movabs rax,0x55c84f4b6d10
  0109d:    	call   rax
  0109f:    	movq   xmm3,QWORD PTR [rsp]
  010a4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010aa:    	add    rsp,0x10
  010ae: c8 	movabs r13,0x55c850b4a880
  010b8:    	test   rax,rax
  010bb:    	je     0xfffe726f
:00096 %3 = 0: i32
  010c1: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  010c9: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  010d1:    	sub    rsp,0x10
  010d5:    	movq   QWORD PTR [rsp],xmm3
  010da:    	movq   QWORD PTR [rsp+0x8],xmm4
  010e0:    	mov    rdx,QWORD PTR [rbp-0x30]
  010e4:    	mov    rcx,QWORD PTR [rbp-0x50]
  010e8:    	mov    rdi,rbx
  010eb:    	mov    rsi,r12
  010ee: c8 	movabs rax,0x55c84f4b6c00
  010f8:    	call   rax
  010fa:    	movq   xmm3,QWORD PTR [rsp]
  010ff:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01105:    	add    rsp,0x10
  01109: c8 	movabs r13,0x55c850b4a8b0
  01113:    	test   rax,rax
  01116:    	je     0xfffe726f
  0111c:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  01120:    	mov    rdi,QWORD PTR [rbp-0x50]
  01124: 00 	test   rdi,0x7
  0112b:    	jne    0x34815
  01131:    	cmp    DWORD PTR [rdi+0x4],0x25
  01135:    	jne    0x34815
  0113b: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8afd],0x26        # 0xfffe9c3f
  01142:    	jne    0x34815
  01148:    	sub    rsp,0x10
  0114c:    	movq   QWORD PTR [rsp],xmm3
  01151:    	movq   QWORD PTR [rsp+0x8],xmm4
  01157:    	mov    rax,QWORD PTR [rbx]
  0115a:    	lea    rdi,[rsp-0x18]
  0115f:    	mov    QWORD PTR [rdi],rax
  01162:    	mov    QWORD PTR [rbx],rdi
  01165: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0116e:    	mov    QWORD PTR [rsp-0x38],rcx
  01173:    	mov    rax,QWORD PTR [rbp-0x50]
  01177:    	mov    QWORD PTR [rsp-0x38],rax
  0117c: 00 	mov    rdi,0x0
  01183: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0118c: 07 	movabs rax,0x100070000003d
  01196:    	mov    QWORD PTR [rsp-0x28],rax
  0119b: c8 	movabs r13,0x55c850b416a0
  011a5:    	call   0xfffea4fd
  011aa:    	lea    rdi,[rbp-0x8]
  011ae:    	mov    QWORD PTR [rbx],rdi
  011b1:    	movq   xmm3,QWORD PTR [rsp]
  011b6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011bc:    	add    rsp,0x10
  011c0: c8 	movabs r13,0x55c850b4a8d0
  011ca:    	test   rax,rax
  011cd:    	je     0xfffe726f
  011d3:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  011d7:    	sub    rsp,0x10
  011db:    	movq   QWORD PTR [rsp],xmm3
  011e0:    	movq   QWORD PTR [rsp+0x8],xmm4
  011e6:    	mov    rdx,QWORD PTR [rbp-0x30]
  011ea:    	mov    rcx,QWORD PTR [rbp-0x40]
  011ee:    	mov    r8,QWORD PTR [rbp-0x48]
  011f2:    	mov    rdi,rbx
  011f5:    	mov    rsi,r12
  011f8: c8 	movabs rax,0x55c84f4b6d10
  01202:    	call   rax
  01204:    	movq   xmm3,QWORD PTR [rsp]
  01209:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0120f:    	add    rsp,0x10
  01213: c8 	movabs r13,0x55c850b4a8f0
  0121d:    	test   rax,rax
  01220:    	je     0xfffe726f
:00103 %3 = 1: i32
  01226: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  0122e: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  01236:    	sub    rsp,0x10
  0123a:    	movq   QWORD PTR [rsp],xmm3
  0123f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01245:    	mov    rdx,QWORD PTR [rbp-0x30]
  01249:    	mov    rcx,QWORD PTR [rbp-0x50]
  0124d:    	mov    rdi,rbx
  01250:    	mov    rsi,r12
  01253: c8 	movabs rax,0x55c84f4b6c00
  0125d:    	call   rax
  0125f:    	movq   xmm3,QWORD PTR [rsp]
  01264:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0126a:    	add    rsp,0x10
  0126e: c8 	movabs r13,0x55c850b4a920
  01278:    	test   rax,rax
  0127b:    	je     0xfffe726f
  01281:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  01285: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  0128d:    	sub    rsp,0x10
  01291:    	movq   QWORD PTR [rsp],xmm3
  01296:    	movq   QWORD PTR [rsp+0x8],xmm4
  0129c:    	mov    rdx,QWORD PTR [rbp-0x30]
  012a0:    	mov    rcx,QWORD PTR [rbp-0x58]
  012a4:    	mov    rdi,rbx
  012a7:    	mov    rsi,r12
  012aa: c8 	movabs rax,0x55c84f4b6c00
  012b4:    	call   rax
  012b6:    	movq   xmm3,QWORD PTR [rsp]
  012bb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012c1:    	add    rsp,0x10
  012c5: c8 	movabs r13,0x55c850b4a940
  012cf:    	test   rax,rax
  012d2:    	je     0xfffe726f
  012d8:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  012dc:    	mov    rdi,QWORD PTR [rbp-0x50]
  012e0: 00 	test   rdi,0x7
  012e7:    	jne    0x34824
  012ed:    	cmp    DWORD PTR [rdi+0x4],0x25
  012f1:    	jne    0x34824
  012f7: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8941],0x26        # 0xfffe9c3f
  012fe:    	jne    0x34824
  01304:    	sub    rsp,0x10
  01308:    	movq   QWORD PTR [rsp],xmm3
  0130d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01313:    	mov    rax,QWORD PTR [rbx]
  01316:    	lea    rdi,[rsp-0x18]
  0131b:    	mov    QWORD PTR [rdi],rax
  0131e:    	mov    QWORD PTR [rbx],rdi
  01321: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0132a:    	mov    QWORD PTR [rsp-0x38],rcx
  0132f:    	mov    rax,QWORD PTR [rbp-0x50]
  01333:    	mov    QWORD PTR [rsp-0x38],rax
  01338: 00 	mov    rdi,0x1
  0133f:    	mov    rax,QWORD PTR [rbp-0x58]
  01343:    	mov    QWORD PTR [rsp-0x40],rax
  01348: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01351: 09 	movabs rax,0x90000003a
  0135b:    	mov    QWORD PTR [rsp-0x28],rax
  01360: c8 	movabs r13,0x55c850b2eeb0
  0136a:    	call   0xffff0da8
  0136f:    	lea    rdi,[rbp-0x8]
  01373:    	mov    QWORD PTR [rbx],rdi
  01376:    	movq   xmm3,QWORD PTR [rsp]
  0137b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01381:    	add    rsp,0x10
  01385: c8 	movabs r13,0x55c850b4a960
  0138f:    	test   rax,rax
  01392:    	je     0xfffe726f
  01398:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  0139c:    	sub    rsp,0x10
  013a0:    	movq   QWORD PTR [rsp],xmm3
  013a5:    	movq   QWORD PTR [rsp+0x8],xmm4
  013ab:    	mov    rdx,QWORD PTR [rbp-0x30]
  013af:    	mov    rcx,QWORD PTR [rbp-0x40]
  013b3:    	mov    r8,QWORD PTR [rbp-0x48]
  013b7:    	mov    rdi,rbx
  013ba:    	mov    rsi,r12
  013bd: c8 	movabs rax,0x55c84f4b6d10
  013c7:    	call   rax
  013c9:    	movq   xmm3,QWORD PTR [rsp]
  013ce:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013d4:    	add    rsp,0x10
  013d8: c8 	movabs r13,0x55c850b4a980
  013e2:    	test   rax,rax
  013e5:    	je     0xfffe726f
:00112 %3 = 1: i32
  013eb: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  013f3: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  013fb:    	sub    rsp,0x10
  013ff:    	movq   QWORD PTR [rsp],xmm3
  01404:    	movq   QWORD PTR [rsp+0x8],xmm4
  0140a:    	mov    rdx,QWORD PTR [rbp-0x30]
  0140e:    	mov    rcx,QWORD PTR [rbp-0x50]
  01412:    	mov    rdi,rbx
  01415:    	mov    rsi,r12
  01418: c8 	movabs rax,0x55c84f4b6c00
  01422:    	call   rax
  01424:    	movq   xmm3,QWORD PTR [rsp]
  01429:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0142f:    	add    rsp,0x10
  01433: c8 	movabs r13,0x55c850b4a9b0
  0143d:    	test   rax,rax
  01440:    	je     0xfffe726f
  01446:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  0144a:    	mov    rdi,QWORD PTR [rbp-0x50]
  0144e: 00 	test   rdi,0x7
  01455:    	jne    0x34833
  0145b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0145f:    	jne    0x34833
  01465: 26 	cmp    DWORD PTR [rip+0xfffffffffffe87d3],0x26        # 0xfffe9c3f
  0146c:    	jne    0x34833
  01472:    	sub    rsp,0x10
  01476:    	movq   QWORD PTR [rsp],xmm3
  0147b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01481:    	mov    rax,QWORD PTR [rbx]
  01484:    	lea    rdi,[rsp-0x18]
  01489:    	mov    QWORD PTR [rdi],rax
  0148c:    	mov    QWORD PTR [rbx],rdi
  0148f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01498:    	mov    QWORD PTR [rsp-0x38],rcx
  0149d:    	mov    rax,QWORD PTR [rbp-0x50]
  014a1:    	mov    QWORD PTR [rsp-0x38],rax
  014a6: 00 	mov    rdi,0x0
  014ad: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014b6: 07 	movabs rax,0x100070000003d
  014c0:    	mov    QWORD PTR [rsp-0x28],rax
  014c5: c8 	movabs r13,0x55c850b416a0
  014cf:    	call   0xfffea4fd
  014d4:    	lea    rdi,[rbp-0x8]
  014d8:    	mov    QWORD PTR [rbx],rdi
  014db:    	movq   xmm3,QWORD PTR [rsp]
  014e0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014e6:    	add    rsp,0x10
  014ea: c8 	movabs r13,0x55c850b4a9d0
  014f4:    	test   rax,rax
  014f7:    	je     0xfffe726f
  014fd:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  01501:    	sub    rsp,0x10
  01505:    	movq   QWORD PTR [rsp],xmm3
  0150a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01510:    	mov    rdx,QWORD PTR [rbp-0x30]
  01514:    	mov    rcx,QWORD PTR [rbp-0x40]
  01518:    	mov    r8,QWORD PTR [rbp-0x48]
  0151c:    	mov    rdi,rbx
  0151f:    	mov    rsi,r12
  01522: c8 	movabs rax,0x55c84f4b6d10
  0152c:    	call   rax
  0152e:    	movq   xmm3,QWORD PTR [rsp]
  01533:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01539:    	add    rsp,0x10
  0153d: c8 	movabs r13,0x55c850b4a9f0
  01547:    	test   rax,rax
  0154a:    	je     0xfffe726f
:00119 %3 = %4
  01550:    	mov    rax,QWORD PTR [rbp-0x48]
  01554:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  01558:    	mov    rax,QWORD PTR [rbp-0x40]
  0155c:    	leave  
  0155d:    	ret    
:00087 %3 = 0: i32
  0155e: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  01566: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  0156e:    	sub    rsp,0x20
  01572:    	movq   QWORD PTR [rsp],xmm2
  01577:    	movq   QWORD PTR [rsp+0x8],xmm3
  0157d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01583:    	movq   QWORD PTR [rsp+0x18],xmm5
  01589:    	mov    rdx,QWORD PTR [rbp-0x30]
  0158d:    	mov    rcx,QWORD PTR [rbp-0x50]
  01591:    	mov    rdi,rbx
  01594:    	mov    rsi,r12
  01597: c8 	movabs rax,0x55c84f4b6c00
  015a1:    	call   rax
  015a3:    	movq   xmm2,QWORD PTR [rsp]
  015a8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015ae:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015b4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015ba:    	add    rsp,0x20
  015be: c8 	movabs r13,0x55c850b4a820
  015c8:    	test   rax,rax
  015cb:    	je     0xfffe726f
  015d1:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  015d5: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  015dd:    	sub    rsp,0x20
  015e1:    	movq   QWORD PTR [rsp],xmm3
  015e6:    	movq   QWORD PTR [rsp+0x8],xmm4
  015ec:    	movq   QWORD PTR [rsp+0x10],xmm5
  015f2:    	mov    rdx,QWORD PTR [rbp-0x30]
  015f6:    	mov    rcx,QWORD PTR [rbp-0x58]
  015fa:    	mov    rdi,rbx
  015fd:    	mov    rsi,r12
  01600: c8 	movabs rax,0x55c84f4b6c00
  0160a:    	call   rax
  0160c:    	movq   xmm3,QWORD PTR [rsp]
  01611:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01617:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0161d:    	add    rsp,0x20
  01621: c8 	movabs r13,0x55c850b4a840
  0162b:    	test   rax,rax
  0162e:    	je     0xfffe726f
  01634:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  01638:    	mov    rdi,QWORD PTR [rbp-0x50]
  0163c: 00 	test   rdi,0x7
  01643:    	jne    0x3488d
  01649:    	cmp    DWORD PTR [rdi+0x4],0x25
  0164d:    	jne    0x3488d
  01653: 26 	cmp    DWORD PTR [rip+0xfffffffffffe85e5],0x26        # 0xfffe9c3f
  0165a:    	jne    0x3488d
  01660:    	sub    rsp,0x10
  01664:    	movq   QWORD PTR [rsp],xmm3
  01669:    	movq   QWORD PTR [rsp+0x8],xmm4
  0166f:    	mov    rax,QWORD PTR [rbx]
  01672:    	lea    rdi,[rsp-0x18]
  01677:    	mov    QWORD PTR [rdi],rax
  0167a:    	mov    QWORD PTR [rbx],rdi
  0167d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01686:    	mov    QWORD PTR [rsp-0x38],rcx
  0168b:    	mov    rax,QWORD PTR [rbp-0x50]
  0168f:    	mov    QWORD PTR [rsp-0x38],rax
  01694: 00 	mov    rdi,0x1
  0169b:    	mov    rax,QWORD PTR [rbp-0x58]
  0169f:    	mov    QWORD PTR [rsp-0x40],rax
  016a4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016ad: 09 	movabs rax,0x90000003a
  016b7:    	mov    QWORD PTR [rsp-0x28],rax
  016bc: c8 	movabs r13,0x55c850b2eeb0
  016c6:    	call   0xffff0da8
  016cb:    	lea    rdi,[rbp-0x8]
  016cf:    	mov    QWORD PTR [rbx],rdi
  016d2:    	movq   xmm3,QWORD PTR [rsp]
  016d7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016dd:    	add    rsp,0x10
  016e1: c8 	movabs r13,0x55c850b4a860
  016eb:    	test   rax,rax
  016ee:    	je     0xfffe726f
  016f4:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  016f8:    	sub    rsp,0x10
  016fc:    	movq   QWORD PTR [rsp],xmm3
  01701:    	movq   QWORD PTR [rsp+0x8],xmm4
  01707:    	mov    rdx,QWORD PTR [rbp-0x30]
  0170b:    	mov    rcx,QWORD PTR [rbp-0x40]
  0170f:    	mov    r8,QWORD PTR [rbp-0x48]
  01713:    	mov    rdi,rbx
  01716:    	mov    rsi,r12
  01719: c8 	movabs rax,0x55c84f4b6d10
  01723:    	call   rax
  01725:    	movq   xmm3,QWORD PTR [rsp]
  0172a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01730:    	add    rsp,0x10
  01734: c8 	movabs r13,0x55c850b4a880
  0173e:    	test   rax,rax
  01741:    	je     0xfffe726f
:00096 %3 = 0: i32
  01747: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  0174f: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  01757:    	sub    rsp,0x10
  0175b:    	movq   QWORD PTR [rsp],xmm3
  01760:    	movq   QWORD PTR [rsp+0x8],xmm4
  01766:    	mov    rdx,QWORD PTR [rbp-0x30]
  0176a:    	mov    rcx,QWORD PTR [rbp-0x50]
  0176e:    	mov    rdi,rbx
  01771:    	mov    rsi,r12
  01774: c8 	movabs rax,0x55c84f4b6c00
  0177e:    	call   rax
  01780:    	movq   xmm3,QWORD PTR [rsp]
  01785:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0178b:    	add    rsp,0x10
  0178f: c8 	movabs r13,0x55c850b4a8b0
  01799:    	test   rax,rax
  0179c:    	je     0xfffe726f
  017a2:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  017a6:    	mov    rdi,QWORD PTR [rbp-0x50]
  017aa: 00 	test   rdi,0x7
  017b1:    	jne    0x3489c
  017b7:    	cmp    DWORD PTR [rdi+0x4],0x25
  017bb:    	jne    0x3489c
  017c1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8477],0x26        # 0xfffe9c3f
  017c8:    	jne    0x3489c
  017ce:    	sub    rsp,0x10
  017d2:    	movq   QWORD PTR [rsp],xmm3
  017d7:    	movq   QWORD PTR [rsp+0x8],xmm4
  017dd:    	mov    rax,QWORD PTR [rbx]
  017e0:    	lea    rdi,[rsp-0x18]
  017e5:    	mov    QWORD PTR [rdi],rax
  017e8:    	mov    QWORD PTR [rbx],rdi
  017eb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017f4:    	mov    QWORD PTR [rsp-0x38],rcx
  017f9:    	mov    rax,QWORD PTR [rbp-0x50]
  017fd:    	mov    QWORD PTR [rsp-0x38],rax
  01802: 00 	mov    rdi,0x0
  01809: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01812: 07 	movabs rax,0x100070000003d
  0181c:    	mov    QWORD PTR [rsp-0x28],rax
  01821: c8 	movabs r13,0x55c850b416a0
  0182b:    	call   0xfffea4fd
  01830:    	lea    rdi,[rbp-0x8]
  01834:    	mov    QWORD PTR [rbx],rdi
  01837:    	movq   xmm3,QWORD PTR [rsp]
  0183c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01842:    	add    rsp,0x10
  01846: c8 	movabs r13,0x55c850b4a8d0
  01850:    	test   rax,rax
  01853:    	je     0xfffe726f
  01859:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  0185d:    	sub    rsp,0x10
  01861:    	movq   QWORD PTR [rsp],xmm3
  01866:    	movq   QWORD PTR [rsp+0x8],xmm4
  0186c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01870:    	mov    rcx,QWORD PTR [rbp-0x40]
  01874:    	mov    r8,QWORD PTR [rbp-0x48]
  01878:    	mov    rdi,rbx
  0187b:    	mov    rsi,r12
  0187e: c8 	movabs rax,0x55c84f4b6d10
  01888:    	call   rax
  0188a:    	movq   xmm3,QWORD PTR [rsp]
  0188f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01895:    	add    rsp,0x10
  01899: c8 	movabs r13,0x55c850b4a8f0
  018a3:    	test   rax,rax
  018a6:    	je     0xfffe726f
:00103 %3 = 1: i32
  018ac: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  018b4: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  018bc:    	sub    rsp,0x10
  018c0:    	movq   QWORD PTR [rsp],xmm3
  018c5:    	movq   QWORD PTR [rsp+0x8],xmm4
  018cb:    	mov    rdx,QWORD PTR [rbp-0x30]
  018cf:    	mov    rcx,QWORD PTR [rbp-0x50]
  018d3:    	mov    rdi,rbx
  018d6:    	mov    rsi,r12
  018d9: c8 	movabs rax,0x55c84f4b6c00
  018e3:    	call   rax
  018e5:    	movq   xmm3,QWORD PTR [rsp]
  018ea:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018f0:    	add    rsp,0x10
  018f4: c8 	movabs r13,0x55c850b4a920
  018fe:    	test   rax,rax
  01901:    	je     0xfffe726f
  01907:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  0190b: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  01913:    	sub    rsp,0x10
  01917:    	movq   QWORD PTR [rsp],xmm3
  0191c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01922:    	mov    rdx,QWORD PTR [rbp-0x30]
  01926:    	mov    rcx,QWORD PTR [rbp-0x58]
  0192a:    	mov    rdi,rbx
  0192d:    	mov    rsi,r12
  01930: c8 	movabs rax,0x55c84f4b6c00
  0193a:    	call   rax
  0193c:    	movq   xmm3,QWORD PTR [rsp]
  01941:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01947:    	add    rsp,0x10
  0194b: c8 	movabs r13,0x55c850b4a940
  01955:    	test   rax,rax
  01958:    	je     0xfffe726f
  0195e:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  01962:    	mov    rdi,QWORD PTR [rbp-0x50]
  01966: 00 	test   rdi,0x7
  0196d:    	jne    0x348ab
  01973:    	cmp    DWORD PTR [rdi+0x4],0x25
  01977:    	jne    0x348ab
  0197d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe82bb],0x26        # 0xfffe9c3f
  01984:    	jne    0x348ab
  0198a:    	sub    rsp,0x10
  0198e:    	movq   QWORD PTR [rsp],xmm3
  01993:    	movq   QWORD PTR [rsp+0x8],xmm4
  01999:    	mov    rax,QWORD PTR [rbx]
  0199c:    	lea    rdi,[rsp-0x18]
  019a1:    	mov    QWORD PTR [rdi],rax
  019a4:    	mov    QWORD PTR [rbx],rdi
  019a7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  019b0:    	mov    QWORD PTR [rsp-0x38],rcx
  019b5:    	mov    rax,QWORD PTR [rbp-0x50]
  019b9:    	mov    QWORD PTR [rsp-0x38],rax
  019be: 00 	mov    rdi,0x1
  019c5:    	mov    rax,QWORD PTR [rbp-0x58]
  019c9:    	mov    QWORD PTR [rsp-0x40],rax
  019ce: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019d7: 09 	movabs rax,0x90000003a
  019e1:    	mov    QWORD PTR [rsp-0x28],rax
  019e6: c8 	movabs r13,0x55c850b2eeb0
  019f0:    	call   0xffff0da8
  019f5:    	lea    rdi,[rbp-0x8]
  019f9:    	mov    QWORD PTR [rbx],rdi
  019fc:    	movq   xmm3,QWORD PTR [rsp]
  01a01:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a07:    	add    rsp,0x10
  01a0b: c8 	movabs r13,0x55c850b4a960
  01a15:    	test   rax,rax
  01a18:    	je     0xfffe726f
  01a1e:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  01a22:    	sub    rsp,0x10
  01a26:    	movq   QWORD PTR [rsp],xmm3
  01a2b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a31:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a35:    	mov    rcx,QWORD PTR [rbp-0x40]
  01a39:    	mov    r8,QWORD PTR [rbp-0x48]
  01a3d:    	mov    rdi,rbx
  01a40:    	mov    rsi,r12
  01a43: c8 	movabs rax,0x55c84f4b6d10
  01a4d:    	call   rax
  01a4f:    	movq   xmm3,QWORD PTR [rsp]
  01a54:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a5a:    	add    rsp,0x10
  01a5e: c8 	movabs r13,0x55c850b4a980
  01a68:    	test   rax,rax
  01a6b:    	je     0xfffe726f
:00112 %3 = 1: i32
  01a71: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  01a79: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  01a81:    	sub    rsp,0x10
  01a85:    	movq   QWORD PTR [rsp],xmm3
  01a8a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a90:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a94:    	mov    rcx,QWORD PTR [rbp-0x50]
  01a98:    	mov    rdi,rbx
  01a9b:    	mov    rsi,r12
  01a9e: c8 	movabs rax,0x55c84f4b6c00
  01aa8:    	call   rax
  01aaa:    	movq   xmm3,QWORD PTR [rsp]
  01aaf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ab5:    	add    rsp,0x10
  01ab9: c8 	movabs r13,0x55c850b4a9b0
  01ac3:    	test   rax,rax
  01ac6:    	je     0xfffe726f
  01acc:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  01ad0:    	mov    rdi,QWORD PTR [rbp-0x50]
  01ad4: 00 	test   rdi,0x7
  01adb:    	jne    0x348ba
  01ae1:    	cmp    DWORD PTR [rdi+0x4],0x25
  01ae5:    	jne    0x348ba
  01aeb: 26 	cmp    DWORD PTR [rip+0xfffffffffffe814d],0x26        # 0xfffe9c3f
  01af2:    	jne    0x348ba
  01af8:    	sub    rsp,0x10
  01afc:    	movq   QWORD PTR [rsp],xmm3
  01b01:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b07:    	mov    rax,QWORD PTR [rbx]
  01b0a:    	lea    rdi,[rsp-0x18]
  01b0f:    	mov    QWORD PTR [rdi],rax
  01b12:    	mov    QWORD PTR [rbx],rdi
  01b15: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b1e:    	mov    QWORD PTR [rsp-0x38],rcx
  01b23:    	mov    rax,QWORD PTR [rbp-0x50]
  01b27:    	mov    QWORD PTR [rsp-0x38],rax
  01b2c: 00 	mov    rdi,0x0
  01b33: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b3c: 07 	movabs rax,0x100070000003d
  01b46:    	mov    QWORD PTR [rsp-0x28],rax
  01b4b: c8 	movabs r13,0x55c850b416a0
  01b55:    	call   0xfffea4fd
  01b5a:    	lea    rdi,[rbp-0x8]
  01b5e:    	mov    QWORD PTR [rbx],rdi
  01b61:    	movq   xmm3,QWORD PTR [rsp]
  01b66:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b6c:    	add    rsp,0x10
  01b70: c8 	movabs r13,0x55c850b4a9d0
  01b7a:    	test   rax,rax
  01b7d:    	je     0xfffe726f
  01b83:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  01b87:    	sub    rsp,0x10
  01b8b:    	movq   QWORD PTR [rsp],xmm3
  01b90:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b96:    	mov    rdx,QWORD PTR [rbp-0x30]
  01b9a:    	mov    rcx,QWORD PTR [rbp-0x40]
  01b9e:    	mov    r8,QWORD PTR [rbp-0x48]
  01ba2:    	mov    rdi,rbx
  01ba5:    	mov    rsi,r12
  01ba8: c8 	movabs rax,0x55c84f4b6d10
  01bb2:    	call   rax
  01bb4:    	movq   xmm3,QWORD PTR [rsp]
  01bb9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bbf:    	add    rsp,0x10
  01bc3: c8 	movabs r13,0x55c850b4a9f0
  01bcd:    	test   rax,rax
  01bd0:    	je     0xfffe726f
:00119 %3 = %4
  01bd6:    	mov    rax,QWORD PTR [rbp-0x48]
  01bda:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  01bde:    	mov    rax,QWORD PTR [rbp-0x40]
  01be2:    	leave  
  01be3:    	ret    
