   Compiling monoruby v0.1.0 (/home/monochrome/monoruby)
    Finished release [optimized] target(s) in 7.14s
     Running `target/release/monoruby benchmark/app_aobench.rb`
==> start whole compile: initialize FuncId(55) self_class:Vec start:[00000] bytecode:0x563a60905d50
<== finished compile. elapsed:10.7µs
offset:Pos(12241) code: 144 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x48],0x4
  00010: mov    rdi,QWORD PTR [rbp-0x28]
  00014: test   rdi,0x7
  0001b: jne    0x3d59b
  00021: cmp    DWORD PTR [rdi+0x4],0x25
  00025: jne    0x3d59b
:00000 @x: Vec[IvarId(0)] = %1
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: xor    rax,rax
  00032: mov    ax,WORD PTR [rdi+0x2]
  00036: cmp    rax,0x3
  0003a: jne    0x3d5aa
  00040: mov    rax,QWORD PTR [rbp-0x30]
  00044: mov    QWORD PTR [rdi+0x10],rax
:00001 @y: Vec[IvarId(1)] = %2
  00048: mov    rdi,QWORD PTR [rbp-0x28]
  0004c: xor    rax,rax
  0004f: mov    ax,WORD PTR [rdi+0x2]
  00053: cmp    rax,0x3
  00057: jne    0x3d5c4
  0005d: mov    rax,QWORD PTR [rbp-0x38]
  00061: mov    QWORD PTR [rdi+0x18],rax
:00002 @z: Vec[IvarId(2)] = %3
  00065: mov    rdi,QWORD PTR [rbp-0x28]
  00069: xor    rax,rax
  0006c: mov    ax,WORD PTR [rdi+0x2]
  00070: cmp    rax,0x3
  00074: jne    0x3d5de
  0007a: mov    rax,QWORD PTR [rbp-0x40]
  0007e: mov    QWORD PTR [rdi+0x20],rax
:00003 %4 = %3
  00082: mov    rax,QWORD PTR [rbp-0x40]
  00086: mov    QWORD PTR [rbp-0x48],rax
:00004 ret %4
  0008a: mov    rax,QWORD PTR [rbp-0x48]
  0008e: leave  
  0008f: ret    
==> start whole compile: vdot FuncId(59) self_class:Vec start:[00000] bytecode:0x563a6092ffb0
<== finished compile. elapsed:26.2µs
offset:Pos(14191) code: 1149 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x3ce5a
  0002c: cmp    DWORD PTR [rdi+0x4],0x25
  00030: jne    0x3ce5a
:00000 %2 = @x: Vec[IvarId(0)]
  00036: mov    rdi,QWORD PTR [rbp-0x28]
  0003a: xor    rax,rax
  0003d: mov    ax,WORD PTR [rdi+0x2]
  00041: cmp    rax,0x3
  00045: jne    0x3ce69
  0004b: mov    rax,QWORD PTR [rdi+0x10]
  0004f: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = %1.call x()                     [Vec]
:00002 
  00053: mov    rdi,QWORD PTR [rbp-0x30]
  00057: test   rdi,0x7
  0005e: jne    0x3ce7f
  00064: cmp    DWORD PTR [rdi+0x4],0x25
  00068: jne    0x3ce7f
  0006e: cmp    DWORD PTR [rip+0xfffffffffffff234],0x26        # 0xfffff2a9
  00075: jne    0x3ce7f
  0007b: mov    esi,DWORD PTR [rip+0x400]        # 0x481
  00081: cmp    esi,0xffffffff
  00084: je     0x3ce8e
  0008a: xor    rax,rax
  0008d: mov    ax,WORD PTR [rdi+0x2]
  00091: cmp    rax,0x3
  00095: jne    0xae
  0009b: cmp    esi,0x6
  0009e: jge    0xae
  000a4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000a9: jmp    0xba
  000ae: movabs rax,0x563a5fe35570
  000b8: call   rax
  000ba: mov    QWORD PTR [rbp-0x40],rax
:00004 %2 = %2 * %3                         [Float][Float]
  000be: mov    rdi,QWORD PTR [rbp-0x38]
  000c2: test   rdi,0x1
  000c9: jne    0x3ceb7
  000cf: test   rdi,0x2
  000d6: je     0x112
  000dc: xorps  xmm2,xmm2
  000df: movabs rax,0x8000000000000002
  000e9: cmp    rdi,rax
  000ec: je     0x124
  000f2: mov    rax,rdi
  000f5: sar    rax,0x3f
  000f9: add    rax,0x2
  000fd: and    rdi,0xfffffffffffffffc
  00101: or     rdi,rax
  00104: rol    rdi,0x3d
  00108: movq   xmm2,rdi
  0010d: jmp    0x124
  00112: call   0xffffc905
  00117: test   rax,rax
  0011a: je     0x3ceb7
  00120: movq   xmm2,xmm0
  00124: mov    rdi,QWORD PTR [rbp-0x40]
  00128: test   rdi,0x1
  0012f: jne    0x3cec6
  00135: test   rdi,0x2
  0013c: je     0x178
  00142: xorps  xmm3,xmm3
  00145: movabs rax,0x8000000000000002
  0014f: cmp    rdi,rax
  00152: je     0x18a
  00158: mov    rax,rdi
  0015b: sar    rax,0x3f
  0015f: add    rax,0x2
  00163: and    rdi,0xfffffffffffffffc
  00167: or     rdi,rax
  0016a: rol    rdi,0x3d
  0016e: movq   xmm3,rdi
  00173: jmp    0x18a
  00178: call   0xffffc905
  0017d: test   rax,rax
  00180: je     0x3cec6
  00186: movq   xmm3,xmm0
  0018a: mulsd  xmm2,xmm3
:00005 %3 = @y: Vec[IvarId(1)]
  0018e: mov    rdi,QWORD PTR [rbp-0x28]
  00192: xor    rax,rax
  00195: mov    ax,WORD PTR [rdi+0x2]
  00199: cmp    rax,0x3
  0019d: jne    0x3ced5
  001a3: mov    rax,QWORD PTR [rdi+0x18]
  001a7: mov    QWORD PTR [rbp-0x40],rax
:00006 %4 = %1.call y()                     [Vec]
:00007 
  001ab: mov    rdi,QWORD PTR [rbp-0x30]
  001af: test   rdi,0x7
  001b6: jne    0x3cefd
  001bc: cmp    DWORD PTR [rdi+0x4],0x25
  001c0: jne    0x3cefd
  001c6: cmp    DWORD PTR [rip+0xfffffffffffff0dc],0x26        # 0xfffff2a9
  001cd: jne    0x3cefd
  001d3: mov    esi,DWORD PTR [rip+0x2b0]        # 0x489
  001d9: cmp    esi,0xffffffff
  001dc: je     0x3cf19
  001e2: xor    rax,rax
  001e5: mov    ax,WORD PTR [rdi+0x2]
  001e9: cmp    rax,0x3
  001ed: jne    0x206
  001f3: cmp    esi,0x6
  001f6: jge    0x206
  001fc: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00201: jmp    0x224
  00206: sub    rsp,0x10
  0020a: movq   QWORD PTR [rsp],xmm2
  0020f: movabs rax,0x563a5fe35570
  00219: call   rax
  0021b: movq   xmm2,QWORD PTR [rsp]
  00220: add    rsp,0x10
  00224: mov    QWORD PTR [rbp-0x48],rax
:00009 %3 = %3 * %4                         [Float][Float]
  00228: mov    rdi,QWORD PTR [rbp-0x40]
  0022c: test   rdi,0x1
  00233: jne    0x3cf54
  00239: test   rdi,0x2
  00240: je     0x27c
  00246: xorps  xmm3,xmm3
  00249: movabs rax,0x8000000000000002
  00253: cmp    rdi,rax
  00256: je     0x28e
  0025c: mov    rax,rdi
  0025f: sar    rax,0x3f
  00263: add    rax,0x2
  00267: and    rdi,0xfffffffffffffffc
  0026b: or     rdi,rax
  0026e: rol    rdi,0x3d
  00272: movq   xmm3,rdi
  00277: jmp    0x28e
  0027c: call   0xffffc905
  00281: test   rax,rax
  00284: je     0x3cf54
  0028a: movq   xmm3,xmm0
  0028e: mov    rdi,QWORD PTR [rbp-0x48]
  00292: test   rdi,0x1
  00299: jne    0x3cf70
  0029f: test   rdi,0x2
  002a6: je     0x2e2
  002ac: xorps  xmm4,xmm4
  002af: movabs rax,0x8000000000000002
  002b9: cmp    rdi,rax
  002bc: je     0x2f4
  002c2: mov    rax,rdi
  002c5: sar    rax,0x3f
  002c9: add    rax,0x2
  002cd: and    rdi,0xfffffffffffffffc
  002d1: or     rdi,rax
  002d4: rol    rdi,0x3d
  002d8: movq   xmm4,rdi
  002dd: jmp    0x2f4
  002e2: call   0xffffc905
  002e7: test   rax,rax
  002ea: je     0x3cf70
  002f0: movq   xmm4,xmm0
  002f4: mulsd  xmm3,xmm4
:00010 %2 = %2 + %3                         [Float][Float]
  002f8: addsd  xmm2,xmm3
:00011 %3 = @z: Vec[IvarId(2)]
  002fc: mov    rdi,QWORD PTR [rbp-0x28]
  00300: xor    rax,rax
  00303: mov    ax,WORD PTR [rdi+0x2]
  00307: cmp    rax,0x3
  0030b: jne    0x3cf8c
  00311: mov    rax,QWORD PTR [rdi+0x20]
  00315: mov    QWORD PTR [rbp-0x40],rax
:00012 %4 = %1.call z()                     [Vec]
:00013 
  00319: mov    rdi,QWORD PTR [rbp-0x30]
  0031d: test   rdi,0x7
  00324: jne    0x3cfc0
  0032a: cmp    DWORD PTR [rdi+0x4],0x25
  0032e: jne    0x3cfc0
  00334: cmp    DWORD PTR [rip+0xffffffffffffef6e],0x26        # 0xfffff2a9
  0033b: jne    0x3cfc0
  00341: mov    esi,DWORD PTR [rip+0x14a]        # 0x491
  00347: cmp    esi,0xffffffff
  0034a: je     0x3cfdc
  00350: xor    rax,rax
  00353: mov    ax,WORD PTR [rdi+0x2]
  00357: cmp    rax,0x3
  0035b: jne    0x374
  00361: cmp    esi,0x6
  00364: jge    0x374
  0036a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0036f: jmp    0x392
  00374: sub    rsp,0x10
  00378: movq   QWORD PTR [rsp],xmm2
  0037d: movabs rax,0x563a5fe35570
  00387: call   rax
  00389: movq   xmm2,QWORD PTR [rsp]
  0038e: add    rsp,0x10
  00392: mov    QWORD PTR [rbp-0x48],rax
:00015 %3 = %3 * %4                         [Float][Float]
  00396: mov    rdi,QWORD PTR [rbp-0x40]
  0039a: test   rdi,0x1
  003a1: jne    0x3d017
  003a7: test   rdi,0x2
  003ae: je     0x3ea
  003b4: xorps  xmm3,xmm3
  003b7: movabs rax,0x8000000000000002
  003c1: cmp    rdi,rax
  003c4: je     0x3fc
  003ca: mov    rax,rdi
  003cd: sar    rax,0x3f
  003d1: add    rax,0x2
  003d5: and    rdi,0xfffffffffffffffc
  003d9: or     rdi,rax
  003dc: rol    rdi,0x3d
  003e0: movq   xmm3,rdi
  003e5: jmp    0x3fc
  003ea: call   0xffffc905
  003ef: test   rax,rax
  003f2: je     0x3d017
  003f8: movq   xmm3,xmm0
  003fc: mov    rdi,QWORD PTR [rbp-0x48]
  00400: test   rdi,0x1
  00407: jne    0x3d033
  0040d: test   rdi,0x2
  00414: je     0x450
  0041a: xorps  xmm4,xmm4
  0041d: movabs rax,0x8000000000000002
  00427: cmp    rdi,rax
  0042a: je     0x462
  00430: mov    rax,rdi
  00433: sar    rax,0x3f
  00437: add    rax,0x2
  0043b: and    rdi,0xfffffffffffffffc
  0043f: or     rdi,rax
  00442: rol    rdi,0x3d
  00446: movq   xmm4,rdi
  0044b: jmp    0x462
  00450: call   0xffffc905
  00455: test   rax,rax
  00458: je     0x3d033
  0045e: movq   xmm4,xmm0
  00462: mulsd  xmm3,xmm4
:00016 %2 = %2 + %3                         [Float][Float]
  00466: addsd  xmm2,xmm3
:00017 ret %2
  0046a: movq   xmm0,xmm2
  0046e: call   0xffffc9f8
  00473: mov    QWORD PTR [rbp-0x38],rax
  00477: mov    rax,QWORD PTR [rbp-0x38]
  0047b: leave  
  0047c: ret    
==> start whole compile: intersect FuncId(63) self_class:Sphere start:[00000] bytecode:0x563a608e6640
<== finished compile. elapsed:127.7µs
offset:Pos(15510) code: 6811 bytes  data: 279 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xb0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x40],rax
  00016:    	mov    QWORD PTR [rbp-0x48],rax
  0001a:    	mov    QWORD PTR [rbp-0x50],rax
  0001e:    	mov    QWORD PTR [rbp-0x58],rax
  00022:    	mov    QWORD PTR [rbp-0x60],rax
  00026:    	mov    QWORD PTR [rbp-0x68],rax
  0002a:    	mov    QWORD PTR [rbp-0x70],rax
  0002e:    	mov    QWORD PTR [rbp-0x78],rax
  00032:    	mov    QWORD PTR [rbp-0x80],rax
  00036: ff 	mov    QWORD PTR [rbp-0x88],rax
  0003d: ff 	mov    QWORD PTR [rbp-0x90],rax
  00044: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004b: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00052:    	mov    rdi,QWORD PTR [rbp-0x28]
  00056: 00 	test   rdi,0x7
  0005d:    	jne    0x3cb28
  00063:    	cmp    DWORD PTR [rdi+0x4],0x27
  00067:    	jne    0x3cb28
:00000 %9 = %1.call org()                   [Ray]
:00001 
  0006d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00071: 00 	test   rdi,0x7
  00078:    	jne    0x3cb37
  0007e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00082:    	jne    0x3cb37
  00088: 26 	cmp    DWORD PTR [rip+0xffffffffffffecf3],0x26        # 0xffffed82
  0008f:    	jne    0x3cb37
  00095:    	mov    esi,DWORD PTR [rip+0x1a04]        # 0x1a9f
  0009b:    	cmp    esi,0xffffffff
  0009e:    	je     0x3cb46
  000a4:    	xor    rax,rax
  000a7:    	mov    ax,WORD PTR [rdi+0x2]
  000ab:    	cmp    rax,0x3
  000af:    	jne    0xc8
  000b5:    	cmp    esi,0x6
  000b8:    	jge    0xc8
  000be:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c3:    	jmp    0xd4
  000c8: 3a 	movabs rax,0x563a5fe35570
  000d2:    	call   rax
  000d4:    	mov    QWORD PTR [rbp-0x70],rax
:00003 %10 = @center: Sphere[IvarId(0)]
  000d8:    	mov    rdi,QWORD PTR [rbp-0x28]
  000dc:    	xor    rax,rax
  000df:    	mov    ax,WORD PTR [rdi+0x2]
  000e3:    	cmp    rax,0x3
  000e7:    	jne    0x3cb6f
  000ed:    	mov    rax,QWORD PTR [rdi+0x10]
  000f1:    	mov    QWORD PTR [rbp-0x78],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
:00005 
  000f5:    	mov    rdi,QWORD PTR [rbp-0x70]
  000f9: 00 	test   rdi,0x7
  00100:    	jne    0x3cb85
  00106:    	cmp    DWORD PTR [rdi+0x4],0x25
  0010a:    	jne    0x3cb85
  00110: 26 	cmp    DWORD PTR [rip+0xffffffffffffec6b],0x26        # 0xffffed82
  00117:    	jne    0x3cb85
  0011d:    	mov    rax,QWORD PTR [rbx]
  00120:    	lea    rdi,[rsp-0x18]
  00125:    	mov    QWORD PTR [rdi],rax
  00128:    	mov    QWORD PTR [rbx],rdi
  0012b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00134:    	mov    QWORD PTR [rsp-0x38],rcx
  00139:    	mov    rax,QWORD PTR [rbp-0x70]
  0013d:    	mov    QWORD PTR [rsp-0x38],rax
  00142: 00 	mov    rdi,0x1
  00149:    	mov    rax,QWORD PTR [rbp-0x78]
  0014d:    	mov    QWORD PTR [rsp-0x40],rax
  00152: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0015b: 08 	movabs rax,0x800000039
  00165:    	mov    QWORD PTR [rsp-0x28],rax
  0016a: 3a 	movabs r13,0x563a608edf50
  00174:    	call   0xfffff9ef
  00179:    	lea    rdi,[rbp-0x8]
  0017d:    	mov    QWORD PTR [rbx],rdi
  00180: 3a 	movabs r13,0x563a608e66a0
  0018a:    	test   rax,rax
  0018d:    	je     0xffffc3a5
  00193:    	mov    QWORD PTR [rbp-0x40],rax
:00007 %9 = %1.call dir()                   [Ray]
:00008 
  00197:    	mov    rdi,QWORD PTR [rbp-0x30]
  0019b: 00 	test   rdi,0x7
  001a2:    	jne    0x3cb94
  001a8:    	cmp    DWORD PTR [rdi+0x4],0x2b
  001ac:    	jne    0x3cb94
  001b2: 26 	cmp    DWORD PTR [rip+0xffffffffffffebc9],0x26        # 0xffffed82
  001b9:    	jne    0x3cb94
  001bf:    	mov    esi,DWORD PTR [rip+0x18e2]        # 0x1aa7
  001c5:    	cmp    esi,0xffffffff
  001c8:    	je     0x3cba3
  001ce:    	xor    rax,rax
  001d1:    	mov    ax,WORD PTR [rdi+0x2]
  001d5:    	cmp    rax,0x3
  001d9:    	jne    0x1f2
  001df:    	cmp    esi,0x6
  001e2:    	jge    0x1f2
  001e8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ed:    	jmp    0x1fe
  001f2: 3a 	movabs rax,0x563a5fe35570
  001fc:    	call   rax
  001fe:    	mov    QWORD PTR [rbp-0x70],rax
:00010 %4 = %3.call vdot(%9; 1)             [Vec]
:00011 
  00202:    	mov    rdi,QWORD PTR [rbp-0x40]
  00206: 00 	test   rdi,0x7
  0020d:    	jne    0x3cbcc
  00213:    	cmp    DWORD PTR [rdi+0x4],0x25
  00217:    	jne    0x3cbcc
  0021d: 26 	cmp    DWORD PTR [rip+0xffffffffffffeb5e],0x26        # 0xffffed82
  00224:    	jne    0x3cbcc
  0022a:    	mov    rax,QWORD PTR [rbx]
  0022d:    	lea    rdi,[rsp-0x18]
  00232:    	mov    QWORD PTR [rdi],rax
  00235:    	mov    QWORD PTR [rbx],rdi
  00238: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00241:    	mov    QWORD PTR [rsp-0x38],rcx
  00246:    	mov    rax,QWORD PTR [rbp-0x40]
  0024a:    	mov    QWORD PTR [rsp-0x38],rax
  0024f: 00 	mov    rdi,0x1
  00256:    	mov    rax,QWORD PTR [rbp-0x70]
  0025a:    	mov    QWORD PTR [rsp-0x40],rax
  0025f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00268: 05 	movabs rax,0x50000003b
  00272:    	mov    QWORD PTR [rsp-0x28],rax
  00277: 3a 	movabs r13,0x563a6092ffb0
  00281:    	call   0xfffffa81
  00286:    	lea    rdi,[rbp-0x8]
  0028a:    	mov    QWORD PTR [rbx],rdi
  0028d: 3a 	movabs r13,0x563a608e6700
  00297:    	test   rax,rax
  0029a:    	je     0xffffc3a5
  002a0:    	mov    QWORD PTR [rbp-0x48],rax
:00013 %10 = %3
  002a4:    	mov    rax,QWORD PTR [rbp-0x40]
  002a8:    	mov    QWORD PTR [rbp-0x78],rax
:00014 %9 = %3.call vdot(%10; 1)            [Vec]
:00015 
  002ac:    	mov    rdi,QWORD PTR [rbp-0x40]
  002b0: 00 	test   rdi,0x7
  002b7:    	jne    0x3cbdb
  002bd:    	cmp    DWORD PTR [rdi+0x4],0x25
  002c1:    	jne    0x3cbdb
  002c7: 26 	cmp    DWORD PTR [rip+0xffffffffffffeab4],0x26        # 0xffffed82
  002ce:    	jne    0x3cbdb
  002d4:    	mov    rax,QWORD PTR [rbx]
  002d7:    	lea    rdi,[rsp-0x18]
  002dc:    	mov    QWORD PTR [rdi],rax
  002df:    	mov    QWORD PTR [rbx],rdi
  002e2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  002eb:    	mov    QWORD PTR [rsp-0x38],rcx
  002f0:    	mov    rax,QWORD PTR [rbp-0x40]
  002f4:    	mov    QWORD PTR [rsp-0x38],rax
  002f9: 00 	mov    rdi,0x1
  00300:    	mov    rax,QWORD PTR [rbp-0x78]
  00304:    	mov    QWORD PTR [rsp-0x40],rax
  00309: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00312: 05 	movabs rax,0x50000003b
  0031c:    	mov    QWORD PTR [rsp-0x28],rax
  00321: 3a 	movabs r13,0x563a6092ffb0
  0032b:    	call   0xfffffa81
  00330:    	lea    rdi,[rbp-0x8]
  00334:    	mov    QWORD PTR [rbx],rdi
  00337: 3a 	movabs r13,0x563a608e6740
  00341:    	test   rax,rax
  00344:    	je     0xffffc3a5
  0034a:    	mov    QWORD PTR [rbp-0x70],rax
:00017 %10 = @radius: Sphere[IvarId(1)]
  0034e:    	mov    rdi,QWORD PTR [rbp-0x28]
  00352:    	xor    rax,rax
  00355:    	mov    ax,WORD PTR [rdi+0x2]
  00359:    	cmp    rax,0x3
  0035d:    	jne    0x3cbea
  00363:    	mov    rax,QWORD PTR [rdi+0x18]
  00367:    	mov    QWORD PTR [rbp-0x78],rax
:00018 %11 = @radius: Sphere[IvarId(1)]
  0036b:    	mov    rdi,QWORD PTR [rbp-0x28]
  0036f:    	xor    rax,rax
  00372:    	mov    ax,WORD PTR [rdi+0x2]
  00376:    	cmp    rax,0x3
  0037a:    	jne    0x3cc00
  00380:    	mov    rax,QWORD PTR [rdi+0x18]
  00384:    	mov    QWORD PTR [rbp-0x80],rax
:00019 %10 = %10 * %11                      [Float][Float]
  00388:    	mov    rdi,QWORD PTR [rbp-0x78]
  0038c: 00 	test   rdi,0x1
  00393:    	jne    0x3cc16
  00399: 00 	test   rdi,0x2
  003a0:    	je     0x3dc
  003a6:    	xorps  xmm2,xmm2
  003a9: 00 	movabs rax,0x8000000000000002
  003b3:    	cmp    rdi,rax
  003b6:    	je     0x3ee
  003bc:    	mov    rax,rdi
  003bf:    	sar    rax,0x3f
  003c3:    	add    rax,0x2
  003c7:    	and    rdi,0xfffffffffffffffc
  003cb:    	or     rdi,rax
  003ce:    	rol    rdi,0x3d
  003d2:    	movq   xmm2,rdi
  003d7:    	jmp    0x3ee
  003dc:    	call   0xffffc3de
  003e1:    	test   rax,rax
  003e4:    	je     0x3cc16
  003ea:    	movq   xmm2,xmm0
  003ee:    	mov    rdi,QWORD PTR [rbp-0x80]
  003f2: 00 	test   rdi,0x1
  003f9:    	jne    0x3cc25
  003ff: 00 	test   rdi,0x2
  00406:    	je     0x442
  0040c:    	xorps  xmm3,xmm3
  0040f: 00 	movabs rax,0x8000000000000002
  00419:    	cmp    rdi,rax
  0041c:    	je     0x454
  00422:    	mov    rax,rdi
  00425:    	sar    rax,0x3f
  00429:    	add    rax,0x2
  0042d:    	and    rdi,0xfffffffffffffffc
  00431:    	or     rdi,rax
  00434:    	rol    rdi,0x3d
  00438:    	movq   xmm3,rdi
  0043d:    	jmp    0x454
  00442:    	call   0xffffc3de
  00447:    	test   rax,rax
  0044a:    	je     0x3cc25
  00450:    	movq   xmm3,xmm0
  00454:    	mulsd  xmm2,xmm3
:00020 %5 = %9 - %10                        [Float][Float]
  00458:    	mov    rdi,QWORD PTR [rbp-0x70]
  0045c: 00 	test   rdi,0x1
  00463:    	jne    0x3cc34
  00469: 00 	test   rdi,0x2
  00470:    	je     0x4ac
  00476:    	xorps  xmm4,xmm4
  00479: 00 	movabs rax,0x8000000000000002
  00483:    	cmp    rdi,rax
  00486:    	je     0x4be
  0048c:    	mov    rax,rdi
  0048f:    	sar    rax,0x3f
  00493:    	add    rax,0x2
  00497:    	and    rdi,0xfffffffffffffffc
  0049b:    	or     rdi,rax
  0049e:    	rol    rdi,0x3d
  004a2:    	movq   xmm4,rdi
  004a7:    	jmp    0x4be
  004ac:    	call   0xffffc3de
  004b1:    	test   rax,rax
  004b4:    	je     0x3cc34
  004ba:    	movq   xmm4,xmm0
  004be:    	movq   xmm5,xmm4
  004c2:    	subsd  xmm5,xmm2
:00021 %9 = %4 * %4                         [Float][Float]
  004c6:    	mov    rdi,QWORD PTR [rbp-0x48]
  004ca: 00 	test   rdi,0x1
  004d1:    	jne    0x3cc50
  004d7: 00 	test   rdi,0x2
  004de:    	je     0x51a
  004e4:    	xorps  xmm6,xmm6
  004e7: 00 	movabs rax,0x8000000000000002
  004f1:    	cmp    rdi,rax
  004f4:    	je     0x52c
  004fa:    	mov    rax,rdi
  004fd:    	sar    rax,0x3f
  00501:    	add    rax,0x2
  00505:    	and    rdi,0xfffffffffffffffc
  00509:    	or     rdi,rax
  0050c:    	rol    rdi,0x3d
  00510:    	movq   xmm6,rdi
  00515:    	jmp    0x52c
  0051a:    	call   0xffffc3de
  0051f:    	test   rax,rax
  00522:    	je     0x3cc50
  00528:    	movq   xmm6,xmm0
  0052c:    	movq   xmm4,xmm6
  00530:    	mulsd  xmm4,xmm6
:00022 %6 = %9 - %5                         [Float][Float]
  00534:    	movq   xmm7,xmm4
  00538:    	subsd  xmm7,xmm5
:00023 %9 = literal[0.0]
  0053c: 00 	movq   xmm4,QWORD PTR [rip+0x1576]        # 0x1aba
:00024 _%9 = %6 > %9                        [Float][Float]
:00025 condnotbr _%9 =>:00113
  00544:    	ucomisd xmm7,xmm4
  00548:    	jbe    0x3da53
:00026 %9 = %4
:00027 %9 = neg %9                          [Integer]
  0054e:    	movq   xmm0,xmm6
  00552:    	call   0xffffc4d1
  00557:    	mov    QWORD PTR [rbp-0x70],rax
  0055b:    	sub    rsp,0x30
  0055f:    	movq   QWORD PTR [rsp],xmm2
  00564:    	movq   QWORD PTR [rsp+0x8],xmm3
  0056a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00570:    	movq   QWORD PTR [rsp+0x18],xmm6
  00576:    	movq   QWORD PTR [rsp+0x20],xmm7
  0057c:    	mov    rdi,QWORD PTR [rbp-0x70]
  00580:    	mov    rdx,rdi
  00583:    	mov    rdi,rbx
  00586:    	mov    rsi,r12
  00589: 3a 	movabs rax,0x563a5fe59860
  00593:    	call   rax
  00595:    	movq   xmm2,QWORD PTR [rsp]
  0059a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005a0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005a6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  005ac:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005b2:    	add    rsp,0x30
  005b6: 3a 	movabs r13,0x563a608e6800
  005c0:    	test   rax,rax
  005c3:    	je     0xffffc3a5
  005c9:    	mov    QWORD PTR [rbp-0x70],rax
:00028 %11 = const[Math]                    [<INVALID>]
  005cd: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe7b6]        # 0xffffed8a
  005d4: 00 	cmp    rax,QWORD PTR [rip+0x14ff]        # 0x1ada
  005db:    	jne    0x3cc79
  005e1: 00 	mov    rax,QWORD PTR [rip+0x14e2]        # 0x1aca
  005e8:    	mov    QWORD PTR [rbp-0x80],rax
:00029 %12 = %6
:00030 %10 = %11.call sqrt(%12; 1)          [<INVALID>]
:00031 
  005ec:    	movq   xmm0,xmm7
  005f0:    	call   0xffffc4d1
  005f5: ff 	mov    QWORD PTR [rbp-0x88],rax
  005fc:    	sub    rsp,0x20
  00600:    	movq   QWORD PTR [rsp],xmm5
  00605:    	movq   QWORD PTR [rsp+0x8],xmm6
  0060b:    	movq   QWORD PTR [rsp+0x10],xmm7
  00611:    	mov    rdi,QWORD PTR [rbp-0x80]
  00615: 3a 	movabs rax,0x563a5fe2d010
  0061f:    	call   rax
  00621:    	mov    r15d,eax
  00624: 00 	cmp    r15d,DWORD PTR [rip+0x14bb]        # 0x1ae6
  0062b:    	jne    0x3ccf5
  00631:    	mov    eax,DWORD PTR [rip+0xffffffffffffe74b]        # 0xffffed82
  00637:    	cmp    DWORD PTR [rip+0x14a5],eax        # 0x1ae2
  0063d:    	jne    0x3ccf5
  00643:    	mov    rax,QWORD PTR [rbx]
  00646:    	lea    rdi,[rsp-0x18]
  0064b:    	mov    QWORD PTR [rdi],rax
  0064e:    	mov    QWORD PTR [rbx],rdi
  00651: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0065a:    	mov    QWORD PTR [rsp-0x38],rcx
  0065f:    	mov    rax,QWORD PTR [rbp-0x80]
  00663:    	mov    QWORD PTR [rsp-0x38],rax
  00668: 00 	mov    rdi,0x1
  0066f: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00676:    	mov    QWORD PTR [rsp-0x40],rax
  0067b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00684: 00 	movabs rax,0x0
  0068e:    	mov    QWORD PTR [rsp-0x28],rax
  00693: 00 	movabs r13,0x0
  0069d:    	call   0xffffc36a
  006a2:    	lea    rdi,[rbp-0x8]
  006a6:    	mov    QWORD PTR [rbx],rdi
  006a9:    	movq   xmm5,QWORD PTR [rsp]
  006ae:    	movq   xmm6,QWORD PTR [rsp+0x8]
  006b4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  006ba:    	add    rsp,0x20
  006be:    	test   rax,rax
  006c1:    	je     0x3cd61
  006c7:    	mov    QWORD PTR [rbp-0x78],rax
:00033 %7 = %9 - %10                        [Integer][Integer]
  006cb:    	mov    rdi,QWORD PTR [rbp-0x70]
  006cf:    	mov    rsi,QWORD PTR [rbp-0x78]
  006d3: 00 	test   rdi,0x1
  006da:    	je     0x3cd70
  006e0: 00 	test   rsi,0x1
  006e7:    	je     0x3cd70
  006ed:    	sub    rdi,rsi
  006f0:    	jo     0x3cd70
  006f6:    	add    rdi,0x1
  006fa:    	mov    QWORD PTR [rbp-0x60],rdi
:00034 %10 = literal[0.0]
  006fe: 00 	movq   xmm2,QWORD PTR [rip+0x13e4]        # 0x1aea
:00035 %9 = %7 > %10                        [Integer][Integer]
  00706:    	movq   xmm0,xmm2
  0070a:    	call   0xffffc4d1
  0070f:    	mov    QWORD PTR [rbp-0x78],rax
  00713:    	mov    rdi,QWORD PTR [rbp-0x60]
  00717:    	mov    rsi,QWORD PTR [rbp-0x78]
  0071b: 00 	test   rdi,0x1
  00722:    	je     0x3cd99
  00728: 00 	test   rsi,0x1
  0072f:    	je     0x3cd99
  00735:    	xor    rax,rax
  00738:    	cmp    rdi,rsi
  0073b:    	setg   al
  0073f:    	shl    rax,0x3
  00743:    	or     rax,0x14
  00747:    	mov    QWORD PTR [rbp-0x70],rax
:00036 condnotbr %9 =>:00041
  0074b:    	mov    rax,QWORD PTR [rbp-0x70]
  0074f:    	or     rax,0x10
  00753:    	cmp    rax,0x14
  00757:    	je     0x3ce73
:00037 %10 = %2.call t()                    [<INVALID>]
:00038 
  0075d:    	sub    rsp,0x20
  00761:    	movq   QWORD PTR [rsp],xmm5
  00766:    	movq   QWORD PTR [rsp+0x8],xmm6
  0076c:    	movq   QWORD PTR [rsp+0x10],xmm7
  00772:    	mov    rdi,QWORD PTR [rbp-0x38]
  00776: 3a 	movabs rax,0x563a5fe2d010
  00780:    	call   rax
  00782:    	mov    r15d,eax
  00785: 00 	cmp    r15d,DWORD PTR [rip+0x136a]        # 0x1af6
  0078c:    	jne    0x3cdcf
  00792:    	mov    eax,DWORD PTR [rip+0xffffffffffffe5ea]        # 0xffffed82
  00798:    	cmp    DWORD PTR [rip+0x1354],eax        # 0x1af2
  0079e:    	jne    0x3cdcf
  007a4:    	mov    rax,QWORD PTR [rbx]
  007a7:    	lea    rdi,[rsp-0x18]
  007ac:    	mov    QWORD PTR [rdi],rax
  007af:    	mov    QWORD PTR [rbx],rdi
  007b2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007bb:    	mov    QWORD PTR [rsp-0x38],rcx
  007c0:    	mov    rax,QWORD PTR [rbp-0x38]
  007c4:    	mov    QWORD PTR [rsp-0x38],rax
  007c9: 00 	mov    rdi,0x0
  007d0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  007d9: 00 	movabs rax,0x0
  007e3:    	mov    QWORD PTR [rsp-0x28],rax
  007e8: 00 	movabs r13,0x0
  007f2:    	call   0xffffc36a
  007f7:    	lea    rdi,[rbp-0x8]
  007fb:    	mov    QWORD PTR [rbx],rdi
  007fe:    	movq   xmm5,QWORD PTR [rsp]
  00803:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00809:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0080f:    	add    rsp,0x20
  00813:    	test   rax,rax
  00816:    	je     0x3ce3b
  0081c:    	mov    QWORD PTR [rbp-0x78],rax
:00040 %9 = %7 < %10                        [Integer][Integer]
  00820:    	mov    rdi,QWORD PTR [rbp-0x60]
  00824:    	mov    rsi,QWORD PTR [rbp-0x78]
  00828: 00 	test   rdi,0x1
  0082f:    	je     0x3ce4a
  00835: 00 	test   rsi,0x1
  0083c:    	je     0x3ce4a
  00842:    	xor    rax,rax
  00845:    	cmp    rdi,rsi
  00848:    	setl   al
  0084c:    	shl    rax,0x3
  00850:    	or     rax,0x14
  00854:    	mov    QWORD PTR [rbp-0x70],rax
  00858:    	jmp    0x3cea6
:00041 condnotbr %9 =>:00112
  0085d:    	mov    rax,QWORD PTR [rbp-0x70]
  00861:    	or     rax,0x10
  00865:    	cmp    rax,0x14
  00869:    	je     0x3d9ed
:00042 _ = %2.call t=(%7; 1)                [<INVALID>]
:00043 
  0086f:    	sub    rsp,0x20
  00873:    	movq   QWORD PTR [rsp],xmm5
  00878:    	movq   QWORD PTR [rsp+0x8],xmm6
  0087e:    	movq   QWORD PTR [rsp+0x10],xmm7
  00884:    	mov    rdi,QWORD PTR [rbp-0x38]
  00888: 3a 	movabs rax,0x563a5fe2d010
  00892:    	call   rax
  00894:    	mov    r15d,eax
  00897: 00 	cmp    r15d,DWORD PTR [rip+0x1260]        # 0x1afe
  0089e:    	jne    0x3ced9
  008a4:    	mov    eax,DWORD PTR [rip+0xffffffffffffe4d8]        # 0xffffed82
  008aa:    	cmp    DWORD PTR [rip+0x124a],eax        # 0x1afa
  008b0:    	jne    0x3ced9
  008b6:    	mov    rax,QWORD PTR [rbx]
  008b9:    	lea    rdi,[rsp-0x18]
  008be:    	mov    QWORD PTR [rdi],rax
  008c1:    	mov    QWORD PTR [rbx],rdi
  008c4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008cd:    	mov    QWORD PTR [rsp-0x38],rcx
  008d2:    	mov    rax,QWORD PTR [rbp-0x38]
  008d6:    	mov    QWORD PTR [rsp-0x38],rax
  008db: 00 	mov    rdi,0x1
  008e2:    	mov    rax,QWORD PTR [rbp-0x60]
  008e6:    	mov    QWORD PTR [rsp-0x40],rax
  008eb: 00 	mov    QWORD PTR [rsp-0x30],0x0
  008f4: 00 	movabs rax,0x0
  008fe:    	mov    QWORD PTR [rsp-0x28],rax
  00903: 00 	movabs r13,0x0
  0090d:    	call   0xffffc36a
  00912:    	lea    rdi,[rbp-0x8]
  00916:    	mov    QWORD PTR [rbx],rdi
  00919:    	movq   xmm5,QWORD PTR [rsp]
  0091e:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00924:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0092a:    	add    rsp,0x20
  0092e:    	test   rax,rax
  00931:    	je     0x3cf45
:00045 %9 = literal[true]
  00937: 00 	mov    rax,0x1c
  0093e:    	mov    QWORD PTR [rbp-0x70],rax
:00046 _ = %2.call hit=(%9; 1)              [<INVALID>]
:00047 
  00942:    	sub    rsp,0x20
  00946:    	movq   QWORD PTR [rsp],xmm5
  0094b:    	movq   QWORD PTR [rsp+0x8],xmm6
  00951:    	movq   QWORD PTR [rsp+0x10],xmm7
  00957:    	mov    rdi,QWORD PTR [rbp-0x38]
  0095b: 3a 	movabs rax,0x563a5fe2d010
  00965:    	call   rax
  00967:    	mov    r15d,eax
  0096a: 00 	cmp    r15d,DWORD PTR [rip+0x1195]        # 0x1b06
  00971:    	jne    0x3cf54
  00977:    	mov    eax,DWORD PTR [rip+0xffffffffffffe405]        # 0xffffed82
  0097d:    	cmp    DWORD PTR [rip+0x117f],eax        # 0x1b02
  00983:    	jne    0x3cf54
  00989:    	mov    rax,QWORD PTR [rbx]
  0098c:    	lea    rdi,[rsp-0x18]
  00991:    	mov    QWORD PTR [rdi],rax
  00994:    	mov    QWORD PTR [rbx],rdi
  00997: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009a0:    	mov    QWORD PTR [rsp-0x38],rcx
  009a5:    	mov    rax,QWORD PTR [rbp-0x38]
  009a9:    	mov    QWORD PTR [rsp-0x38],rax
  009ae: 00 	mov    rdi,0x1
  009b5:    	mov    rax,QWORD PTR [rbp-0x70]
  009b9:    	mov    QWORD PTR [rsp-0x40],rax
  009be: 00 	mov    QWORD PTR [rsp-0x30],0x0
  009c7: 00 	movabs rax,0x0
  009d1:    	mov    QWORD PTR [rsp-0x28],rax
  009d6: 00 	movabs r13,0x0
  009e0:    	call   0xffffc36a
  009e5:    	lea    rdi,[rbp-0x8]
  009e9:    	mov    QWORD PTR [rbx],rdi
  009ec:    	movq   xmm5,QWORD PTR [rsp]
  009f1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  009f7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  009fd:    	add    rsp,0x20
  00a01:    	test   rax,rax
  00a04:    	je     0x3cfc0
:00049 %10 = const[Vec]                     [<INVALID>]
  00a0a: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe379]        # 0xffffed8a
  00a11: 00 	cmp    rax,QWORD PTR [rip+0x1102]        # 0x1b1a
  00a18:    	jne    0x3cfcf
  00a1e: 00 	mov    rax,QWORD PTR [rip+0x10e5]        # 0x1b0a
  00a25:    	mov    QWORD PTR [rbp-0x78],rax
:00050 %12 = %1.call org()                  [<INVALID>]
:00051 
  00a29:    	sub    rsp,0x20
  00a2d:    	movq   QWORD PTR [rsp],xmm5
  00a32:    	movq   QWORD PTR [rsp+0x8],xmm6
  00a38:    	movq   QWORD PTR [rsp+0x10],xmm7
  00a3e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00a42: 3a 	movabs rax,0x563a5fe2d010
  00a4c:    	call   rax
  00a4e:    	mov    r15d,eax
  00a51: 00 	cmp    r15d,DWORD PTR [rip+0x10ce]        # 0x1b26
  00a58:    	jne    0x3d03f
  00a5e:    	mov    eax,DWORD PTR [rip+0xffffffffffffe31e]        # 0xffffed82
  00a64:    	cmp    DWORD PTR [rip+0x10b8],eax        # 0x1b22
  00a6a:    	jne    0x3d03f
  00a70:    	mov    rax,QWORD PTR [rbx]
  00a73:    	lea    rdi,[rsp-0x18]
  00a78:    	mov    QWORD PTR [rdi],rax
  00a7b:    	mov    QWORD PTR [rbx],rdi
  00a7e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a87:    	mov    QWORD PTR [rsp-0x38],rcx
  00a8c:    	mov    rax,QWORD PTR [rbp-0x30]
  00a90:    	mov    QWORD PTR [rsp-0x38],rax
  00a95: 00 	mov    rdi,0x0
  00a9c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00aa5: 00 	movabs rax,0x0
  00aaf:    	mov    QWORD PTR [rsp-0x28],rax
  00ab4: 00 	movabs r13,0x0
  00abe:    	call   0xffffc36a
  00ac3:    	lea    rdi,[rbp-0x8]
  00ac7:    	mov    QWORD PTR [rbx],rdi
  00aca:    	movq   xmm5,QWORD PTR [rsp]
  00acf:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00ad5:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00adb:    	add    rsp,0x20
  00adf:    	test   rax,rax
  00ae2:    	je     0x3d0ab
  00ae8: ff 	mov    QWORD PTR [rbp-0x88],rax
:00053 %11 = %12.call x()                   [<INVALID>]
:00054 
  00aef:    	sub    rsp,0x20
  00af3:    	movq   QWORD PTR [rsp],xmm5
  00af8:    	movq   QWORD PTR [rsp+0x8],xmm6
  00afe:    	movq   QWORD PTR [rsp+0x10],xmm7
  00b04: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00b0b: 3a 	movabs rax,0x563a5fe2d010
  00b15:    	call   rax
  00b17:    	mov    r15d,eax
  00b1a: 00 	cmp    r15d,DWORD PTR [rip+0x100d]        # 0x1b2e
  00b21:    	jne    0x3d0ba
  00b27:    	mov    eax,DWORD PTR [rip+0xffffffffffffe255]        # 0xffffed82
  00b2d:    	cmp    DWORD PTR [rip+0xff7],eax        # 0x1b2a
  00b33:    	jne    0x3d0ba
  00b39:    	mov    rax,QWORD PTR [rbx]
  00b3c:    	lea    rdi,[rsp-0x18]
  00b41:    	mov    QWORD PTR [rdi],rax
  00b44:    	mov    QWORD PTR [rbx],rdi
  00b47: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b50:    	mov    QWORD PTR [rsp-0x38],rcx
  00b55: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00b5c:    	mov    QWORD PTR [rsp-0x38],rax
  00b61: 00 	mov    rdi,0x0
  00b68: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b71: 00 	movabs rax,0x0
  00b7b:    	mov    QWORD PTR [rsp-0x28],rax
  00b80: 00 	movabs r13,0x0
  00b8a:    	call   0xffffc36a
  00b8f:    	lea    rdi,[rbp-0x8]
  00b93:    	mov    QWORD PTR [rbx],rdi
  00b96:    	movq   xmm5,QWORD PTR [rsp]
  00b9b:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00ba1:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00ba7:    	add    rsp,0x20
  00bab:    	test   rax,rax
  00bae:    	je     0x3d129
  00bb4:    	mov    QWORD PTR [rbp-0x80],rax
:00056 %13 = %1.call dir()                  [<INVALID>]
:00057 
  00bb8:    	sub    rsp,0x20
  00bbc:    	movq   QWORD PTR [rsp],xmm5
  00bc1:    	movq   QWORD PTR [rsp+0x8],xmm6
  00bc7:    	movq   QWORD PTR [rsp+0x10],xmm7
  00bcd:    	mov    rdi,QWORD PTR [rbp-0x30]
  00bd1: 3a 	movabs rax,0x563a5fe2d010
  00bdb:    	call   rax
  00bdd:    	mov    r15d,eax
  00be0: 00 	cmp    r15d,DWORD PTR [rip+0xf4f]        # 0x1b36
  00be7:    	jne    0x3d138
  00bed:    	mov    eax,DWORD PTR [rip+0xffffffffffffe18f]        # 0xffffed82
  00bf3:    	cmp    DWORD PTR [rip+0xf39],eax        # 0x1b32
  00bf9:    	jne    0x3d138
  00bff:    	mov    rax,QWORD PTR [rbx]
  00c02:    	lea    rdi,[rsp-0x18]
  00c07:    	mov    QWORD PTR [rdi],rax
  00c0a:    	mov    QWORD PTR [rbx],rdi
  00c0d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c16:    	mov    QWORD PTR [rsp-0x38],rcx
  00c1b:    	mov    rax,QWORD PTR [rbp-0x30]
  00c1f:    	mov    QWORD PTR [rsp-0x38],rax
  00c24: 00 	mov    rdi,0x0
  00c2b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c34: 00 	movabs rax,0x0
  00c3e:    	mov    QWORD PTR [rsp-0x28],rax
  00c43: 00 	movabs r13,0x0
  00c4d:    	call   0xffffc36a
  00c52:    	lea    rdi,[rbp-0x8]
  00c56:    	mov    QWORD PTR [rbx],rdi
  00c59:    	movq   xmm5,QWORD PTR [rsp]
  00c5e:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00c64:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00c6a:    	add    rsp,0x20
  00c6e:    	test   rax,rax
  00c71:    	je     0x3d1a4
  00c77: ff 	mov    QWORD PTR [rbp-0x90],rax
:00059 %12 = %13.call x()                   [<INVALID>]
:00060 
  00c7e:    	sub    rsp,0x20
  00c82:    	movq   QWORD PTR [rsp],xmm5
  00c87:    	movq   QWORD PTR [rsp+0x8],xmm6
  00c8d:    	movq   QWORD PTR [rsp+0x10],xmm7
  00c93: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00c9a: 3a 	movabs rax,0x563a5fe2d010
  00ca4:    	call   rax
  00ca6:    	mov    r15d,eax
  00ca9: 00 	cmp    r15d,DWORD PTR [rip+0xe8e]        # 0x1b3e
  00cb0:    	jne    0x3d1b3
  00cb6:    	mov    eax,DWORD PTR [rip+0xffffffffffffe0c6]        # 0xffffed82
  00cbc:    	cmp    DWORD PTR [rip+0xe78],eax        # 0x1b3a
  00cc2:    	jne    0x3d1b3
  00cc8:    	mov    rax,QWORD PTR [rbx]
  00ccb:    	lea    rdi,[rsp-0x18]
  00cd0:    	mov    QWORD PTR [rdi],rax
  00cd3:    	mov    QWORD PTR [rbx],rdi
  00cd6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cdf:    	mov    QWORD PTR [rsp-0x38],rcx
  00ce4: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00ceb:    	mov    QWORD PTR [rsp-0x38],rax
  00cf0: 00 	mov    rdi,0x0
  00cf7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d00: 00 	movabs rax,0x0
  00d0a:    	mov    QWORD PTR [rsp-0x28],rax
  00d0f: 00 	movabs r13,0x0
  00d19:    	call   0xffffc36a
  00d1e:    	lea    rdi,[rbp-0x8]
  00d22:    	mov    QWORD PTR [rbx],rdi
  00d25:    	movq   xmm5,QWORD PTR [rsp]
  00d2a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00d30:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00d36:    	add    rsp,0x20
  00d3a:    	test   rax,rax
  00d3d:    	je     0x3d222
  00d43: ff 	mov    QWORD PTR [rbp-0x88],rax
:00062 %12 = %12 * %7                       [Integer][Integer]
  00d4a: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00d51:    	mov    rsi,QWORD PTR [rbp-0x60]
  00d55:    	sub    rsp,0x20
  00d59:    	movq   QWORD PTR [rsp],xmm5
  00d5e:    	movq   QWORD PTR [rsp+0x8],xmm6
  00d64:    	movq   QWORD PTR [rsp+0x10],xmm7
  00d6a:    	mov    rdx,rdi
  00d6d:    	mov    rcx,rsi
  00d70:    	mov    rdi,rbx
  00d73:    	mov    rsi,r12
  00d76: 3a 	movabs rax,0x563a5fe5c230
  00d80:    	call   rax
  00d82:    	movq   xmm5,QWORD PTR [rsp]
  00d87:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00d8d:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00d93:    	add    rsp,0x20
  00d97: 3a 	movabs r13,0x563a608e6a30
  00da1:    	test   rax,rax
  00da4:    	je     0xffffc3a5
  00daa: ff 	mov    QWORD PTR [rbp-0x88],rax
:00063 %11 = %11 + %12                      [Integer][Integer]
  00db1:    	mov    rdi,QWORD PTR [rbp-0x80]
  00db5: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  00dbc: 00 	test   rdi,0x1
  00dc3:    	je     0x3d25a
  00dc9: 00 	test   rsi,0x1
  00dd0:    	je     0x3d25a
  00dd6:    	sub    rdi,0x1
  00dda:    	add    rdi,rsi
  00ddd:    	jo     0x3d25a
  00de3:    	mov    QWORD PTR [rbp-0x80],rdi
:00064 %13 = %1.call org()                  [<INVALID>]
:00065 
  00de7:    	sub    rsp,0x20
  00deb:    	movq   QWORD PTR [rsp],xmm5
  00df0:    	movq   QWORD PTR [rsp+0x8],xmm6
  00df6:    	movq   QWORD PTR [rsp+0x10],xmm7
  00dfc:    	mov    rdi,QWORD PTR [rbp-0x30]
  00e00: 3a 	movabs rax,0x563a5fe2d010
  00e0a:    	call   rax
  00e0c:    	mov    r15d,eax
  00e0f: 00 	cmp    r15d,DWORD PTR [rip+0xd30]        # 0x1b46
  00e16:    	jne    0x3d283
  00e1c:    	mov    eax,DWORD PTR [rip+0xffffffffffffdf60]        # 0xffffed82
  00e22:    	cmp    DWORD PTR [rip+0xd1a],eax        # 0x1b42
  00e28:    	jne    0x3d283
  00e2e:    	mov    rax,QWORD PTR [rbx]
  00e31:    	lea    rdi,[rsp-0x18]
  00e36:    	mov    QWORD PTR [rdi],rax
  00e39:    	mov    QWORD PTR [rbx],rdi
  00e3c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e45:    	mov    QWORD PTR [rsp-0x38],rcx
  00e4a:    	mov    rax,QWORD PTR [rbp-0x30]
  00e4e:    	mov    QWORD PTR [rsp-0x38],rax
  00e53: 00 	mov    rdi,0x0
  00e5a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00e63: 00 	movabs rax,0x0
  00e6d:    	mov    QWORD PTR [rsp-0x28],rax
  00e72: 00 	movabs r13,0x0
  00e7c:    	call   0xffffc36a
  00e81:    	lea    rdi,[rbp-0x8]
  00e85:    	mov    QWORD PTR [rbx],rdi
  00e88:    	movq   xmm5,QWORD PTR [rsp]
  00e8d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00e93:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00e99:    	add    rsp,0x20
  00e9d:    	test   rax,rax
  00ea0:    	je     0x3d2ef
  00ea6: ff 	mov    QWORD PTR [rbp-0x90],rax
:00067 %12 = %13.call y()                   [<INVALID>]
:00068 
  00ead:    	sub    rsp,0x20
  00eb1:    	movq   QWORD PTR [rsp],xmm5
  00eb6:    	movq   QWORD PTR [rsp+0x8],xmm6
  00ebc:    	movq   QWORD PTR [rsp+0x10],xmm7
  00ec2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00ec9: 3a 	movabs rax,0x563a5fe2d010
  00ed3:    	call   rax
  00ed5:    	mov    r15d,eax
  00ed8: 00 	cmp    r15d,DWORD PTR [rip+0xc6f]        # 0x1b4e
  00edf:    	jne    0x3d2fe
  00ee5:    	mov    eax,DWORD PTR [rip+0xffffffffffffde97]        # 0xffffed82
  00eeb:    	cmp    DWORD PTR [rip+0xc59],eax        # 0x1b4a
  00ef1:    	jne    0x3d2fe
  00ef7:    	mov    rax,QWORD PTR [rbx]
  00efa:    	lea    rdi,[rsp-0x18]
  00eff:    	mov    QWORD PTR [rdi],rax
  00f02:    	mov    QWORD PTR [rbx],rdi
  00f05: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f0e:    	mov    QWORD PTR [rsp-0x38],rcx
  00f13: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00f1a:    	mov    QWORD PTR [rsp-0x38],rax
  00f1f: 00 	mov    rdi,0x0
  00f26: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f2f: 00 	movabs rax,0x0
  00f39:    	mov    QWORD PTR [rsp-0x28],rax
  00f3e: 00 	movabs r13,0x0
  00f48:    	call   0xffffc36a
  00f4d:    	lea    rdi,[rbp-0x8]
  00f51:    	mov    QWORD PTR [rbx],rdi
  00f54:    	movq   xmm5,QWORD PTR [rsp]
  00f59:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00f5f:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00f65:    	add    rsp,0x20
  00f69:    	test   rax,rax
  00f6c:    	je     0x3d36d
  00f72: ff 	mov    QWORD PTR [rbp-0x88],rax
:00070 %14 = %1.call dir()                  [<INVALID>]
:00071 
  00f79:    	sub    rsp,0x20
  00f7d:    	movq   QWORD PTR [rsp],xmm5
  00f82:    	movq   QWORD PTR [rsp+0x8],xmm6
  00f88:    	movq   QWORD PTR [rsp+0x10],xmm7
  00f8e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f92: 3a 	movabs rax,0x563a5fe2d010
  00f9c:    	call   rax
  00f9e:    	mov    r15d,eax
  00fa1: 00 	cmp    r15d,DWORD PTR [rip+0xbae]        # 0x1b56
  00fa8:    	jne    0x3d37c
  00fae:    	mov    eax,DWORD PTR [rip+0xffffffffffffddce]        # 0xffffed82
  00fb4:    	cmp    DWORD PTR [rip+0xb98],eax        # 0x1b52
  00fba:    	jne    0x3d37c
  00fc0:    	mov    rax,QWORD PTR [rbx]
  00fc3:    	lea    rdi,[rsp-0x18]
  00fc8:    	mov    QWORD PTR [rdi],rax
  00fcb:    	mov    QWORD PTR [rbx],rdi
  00fce: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fd7:    	mov    QWORD PTR [rsp-0x38],rcx
  00fdc:    	mov    rax,QWORD PTR [rbp-0x30]
  00fe0:    	mov    QWORD PTR [rsp-0x38],rax
  00fe5: 00 	mov    rdi,0x0
  00fec: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ff5: 00 	movabs rax,0x0
  00fff:    	mov    QWORD PTR [rsp-0x28],rax
  01004: 00 	movabs r13,0x0
  0100e:    	call   0xffffc36a
  01013:    	lea    rdi,[rbp-0x8]
  01017:    	mov    QWORD PTR [rbx],rdi
  0101a:    	movq   xmm5,QWORD PTR [rsp]
  0101f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01025:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0102b:    	add    rsp,0x20
  0102f:    	test   rax,rax
  01032:    	je     0x3d3e8
  01038: ff 	mov    QWORD PTR [rbp-0x98],rax
:00073 %13 = %14.call y()                   [<INVALID>]
:00074 
  0103f:    	sub    rsp,0x20
  01043:    	movq   QWORD PTR [rsp],xmm5
  01048:    	movq   QWORD PTR [rsp+0x8],xmm6
  0104e:    	movq   QWORD PTR [rsp+0x10],xmm7
  01054: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0105b: 3a 	movabs rax,0x563a5fe2d010
  01065:    	call   rax
  01067:    	mov    r15d,eax
  0106a: 00 	cmp    r15d,DWORD PTR [rip+0xaed]        # 0x1b5e
  01071:    	jne    0x3d3f7
  01077:    	mov    eax,DWORD PTR [rip+0xffffffffffffdd05]        # 0xffffed82
  0107d:    	cmp    DWORD PTR [rip+0xad7],eax        # 0x1b5a
  01083:    	jne    0x3d3f7
  01089:    	mov    rax,QWORD PTR [rbx]
  0108c:    	lea    rdi,[rsp-0x18]
  01091:    	mov    QWORD PTR [rdi],rax
  01094:    	mov    QWORD PTR [rbx],rdi
  01097: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010a0:    	mov    QWORD PTR [rsp-0x38],rcx
  010a5: ff 	mov    rax,QWORD PTR [rbp-0x98]
  010ac:    	mov    QWORD PTR [rsp-0x38],rax
  010b1: 00 	mov    rdi,0x0
  010b8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010c1: 00 	movabs rax,0x0
  010cb:    	mov    QWORD PTR [rsp-0x28],rax
  010d0: 00 	movabs r13,0x0
  010da:    	call   0xffffc36a
  010df:    	lea    rdi,[rbp-0x8]
  010e3:    	mov    QWORD PTR [rbx],rdi
  010e6:    	movq   xmm5,QWORD PTR [rsp]
  010eb:    	movq   xmm6,QWORD PTR [rsp+0x8]
  010f1:    	movq   xmm7,QWORD PTR [rsp+0x10]
  010f7:    	add    rsp,0x20
  010fb:    	test   rax,rax
  010fe:    	je     0x3d466
  01104: ff 	mov    QWORD PTR [rbp-0x90],rax
:00076 %13 = %13 * %7                       [Integer][Integer]
  0110b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01112:    	mov    rsi,QWORD PTR [rbp-0x60]
  01116:    	sub    rsp,0x20
  0111a:    	movq   QWORD PTR [rsp],xmm5
  0111f:    	movq   QWORD PTR [rsp+0x8],xmm6
  01125:    	movq   QWORD PTR [rsp+0x10],xmm7
  0112b:    	mov    rdx,rdi
  0112e:    	mov    rcx,rsi
  01131:    	mov    rdi,rbx
  01134:    	mov    rsi,r12
  01137: 3a 	movabs rax,0x563a5fe5c230
  01141:    	call   rax
  01143:    	movq   xmm5,QWORD PTR [rsp]
  01148:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0114e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01154:    	add    rsp,0x20
  01158: 3a 	movabs r13,0x563a608e6b10
  01162:    	test   rax,rax
  01165:    	je     0xffffc3a5
  0116b: ff 	mov    QWORD PTR [rbp-0x90],rax
:00077 %12 = %12 + %13                      [Integer][Integer]
  01172: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01179: ff 	mov    rsi,QWORD PTR [rbp-0x90]
  01180: 00 	test   rdi,0x1
  01187:    	je     0x3d49e
  0118d: 00 	test   rsi,0x1
  01194:    	je     0x3d49e
  0119a:    	sub    rdi,0x1
  0119e:    	add    rdi,rsi
  011a1:    	jo     0x3d49e
  011a7: ff 	mov    QWORD PTR [rbp-0x88],rdi
:00078 %14 = %1.call org()                  [<INVALID>]
:00079 
  011ae:    	sub    rsp,0x20
  011b2:    	movq   QWORD PTR [rsp],xmm5
  011b7:    	movq   QWORD PTR [rsp+0x8],xmm6
  011bd:    	movq   QWORD PTR [rsp+0x10],xmm7
  011c3:    	mov    rdi,QWORD PTR [rbp-0x30]
  011c7: 3a 	movabs rax,0x563a5fe2d010
  011d1:    	call   rax
  011d3:    	mov    r15d,eax
  011d6: 00 	cmp    r15d,DWORD PTR [rip+0x989]        # 0x1b66
  011dd:    	jne    0x3d4c7
  011e3:    	mov    eax,DWORD PTR [rip+0xffffffffffffdb99]        # 0xffffed82
  011e9:    	cmp    DWORD PTR [rip+0x973],eax        # 0x1b62
  011ef:    	jne    0x3d4c7
  011f5:    	mov    rax,QWORD PTR [rbx]
  011f8:    	lea    rdi,[rsp-0x18]
  011fd:    	mov    QWORD PTR [rdi],rax
  01200:    	mov    QWORD PTR [rbx],rdi
  01203: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0120c:    	mov    QWORD PTR [rsp-0x38],rcx
  01211:    	mov    rax,QWORD PTR [rbp-0x30]
  01215:    	mov    QWORD PTR [rsp-0x38],rax
  0121a: 00 	mov    rdi,0x0
  01221: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0122a: 00 	movabs rax,0x0
  01234:    	mov    QWORD PTR [rsp-0x28],rax
  01239: 00 	movabs r13,0x0
  01243:    	call   0xffffc36a
  01248:    	lea    rdi,[rbp-0x8]
  0124c:    	mov    QWORD PTR [rbx],rdi
  0124f:    	movq   xmm5,QWORD PTR [rsp]
  01254:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0125a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01260:    	add    rsp,0x20
  01264:    	test   rax,rax
  01267:    	je     0x3d533
  0126d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00081 %13 = %14.call z()                   [<INVALID>]
:00082 
  01274:    	sub    rsp,0x20
  01278:    	movq   QWORD PTR [rsp],xmm5
  0127d:    	movq   QWORD PTR [rsp+0x8],xmm6
  01283:    	movq   QWORD PTR [rsp+0x10],xmm7
  01289: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01290: 3a 	movabs rax,0x563a5fe2d010
  0129a:    	call   rax
  0129c:    	mov    r15d,eax
  0129f: 00 	cmp    r15d,DWORD PTR [rip+0x8c8]        # 0x1b6e
  012a6:    	jne    0x3d542
  012ac:    	mov    eax,DWORD PTR [rip+0xffffffffffffdad0]        # 0xffffed82
  012b2:    	cmp    DWORD PTR [rip+0x8b2],eax        # 0x1b6a
  012b8:    	jne    0x3d542
  012be:    	mov    rax,QWORD PTR [rbx]
  012c1:    	lea    rdi,[rsp-0x18]
  012c6:    	mov    QWORD PTR [rdi],rax
  012c9:    	mov    QWORD PTR [rbx],rdi
  012cc: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012d5:    	mov    QWORD PTR [rsp-0x38],rcx
  012da: ff 	mov    rax,QWORD PTR [rbp-0x98]
  012e1:    	mov    QWORD PTR [rsp-0x38],rax
  012e6: 00 	mov    rdi,0x0
  012ed: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012f6: 00 	movabs rax,0x0
  01300:    	mov    QWORD PTR [rsp-0x28],rax
  01305: 00 	movabs r13,0x0
  0130f:    	call   0xffffc36a
  01314:    	lea    rdi,[rbp-0x8]
  01318:    	mov    QWORD PTR [rbx],rdi
  0131b:    	movq   xmm5,QWORD PTR [rsp]
  01320:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01326:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0132c:    	add    rsp,0x20
  01330:    	test   rax,rax
  01333:    	je     0x3d5b1
  01339: ff 	mov    QWORD PTR [rbp-0x90],rax
:00084 %15 = %1.call dir()                  [<INVALID>]
:00085 
  01340:    	sub    rsp,0x20
  01344:    	movq   QWORD PTR [rsp],xmm5
  01349:    	movq   QWORD PTR [rsp+0x8],xmm6
  0134f:    	movq   QWORD PTR [rsp+0x10],xmm7
  01355:    	mov    rdi,QWORD PTR [rbp-0x30]
  01359: 3a 	movabs rax,0x563a5fe2d010
  01363:    	call   rax
  01365:    	mov    r15d,eax
  01368: 00 	cmp    r15d,DWORD PTR [rip+0x807]        # 0x1b76
  0136f:    	jne    0x3d5c0
  01375:    	mov    eax,DWORD PTR [rip+0xffffffffffffda07]        # 0xffffed82
  0137b:    	cmp    DWORD PTR [rip+0x7f1],eax        # 0x1b72
  01381:    	jne    0x3d5c0
  01387:    	mov    rax,QWORD PTR [rbx]
  0138a:    	lea    rdi,[rsp-0x18]
  0138f:    	mov    QWORD PTR [rdi],rax
  01392:    	mov    QWORD PTR [rbx],rdi
  01395: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0139e:    	mov    QWORD PTR [rsp-0x38],rcx
  013a3:    	mov    rax,QWORD PTR [rbp-0x30]
  013a7:    	mov    QWORD PTR [rsp-0x38],rax
  013ac: 00 	mov    rdi,0x0
  013b3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  013bc: 00 	movabs rax,0x0
  013c6:    	mov    QWORD PTR [rsp-0x28],rax
  013cb: 00 	movabs r13,0x0
  013d5:    	call   0xffffc36a
  013da:    	lea    rdi,[rbp-0x8]
  013de:    	mov    QWORD PTR [rbx],rdi
  013e1:    	movq   xmm5,QWORD PTR [rsp]
  013e6:    	movq   xmm6,QWORD PTR [rsp+0x8]
  013ec:    	movq   xmm7,QWORD PTR [rsp+0x10]
  013f2:    	add    rsp,0x20
  013f6:    	test   rax,rax
  013f9:    	je     0x3d62c
  013ff: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00087 %14 = %15.call z()                   [<INVALID>]
:00088 
  01406:    	sub    rsp,0x20
  0140a:    	movq   QWORD PTR [rsp],xmm5
  0140f:    	movq   QWORD PTR [rsp+0x8],xmm6
  01415:    	movq   QWORD PTR [rsp+0x10],xmm7
  0141b: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01422: 3a 	movabs rax,0x563a5fe2d010
  0142c:    	call   rax
  0142e:    	mov    r15d,eax
  01431: 00 	cmp    r15d,DWORD PTR [rip+0x746]        # 0x1b7e
  01438:    	jne    0x3d63b
  0143e:    	mov    eax,DWORD PTR [rip+0xffffffffffffd93e]        # 0xffffed82
  01444:    	cmp    DWORD PTR [rip+0x730],eax        # 0x1b7a
  0144a:    	jne    0x3d63b
  01450:    	mov    rax,QWORD PTR [rbx]
  01453:    	lea    rdi,[rsp-0x18]
  01458:    	mov    QWORD PTR [rdi],rax
  0145b:    	mov    QWORD PTR [rbx],rdi
  0145e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01467:    	mov    QWORD PTR [rsp-0x38],rcx
  0146c: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01473:    	mov    QWORD PTR [rsp-0x38],rax
  01478: 00 	mov    rdi,0x0
  0147f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01488: 00 	movabs rax,0x0
  01492:    	mov    QWORD PTR [rsp-0x28],rax
  01497: 00 	movabs r13,0x0
  014a1:    	call   0xffffc36a
  014a6:    	lea    rdi,[rbp-0x8]
  014aa:    	mov    QWORD PTR [rbx],rdi
  014ad:    	movq   xmm5,QWORD PTR [rsp]
  014b2:    	movq   xmm6,QWORD PTR [rsp+0x8]
  014b8:    	movq   xmm7,QWORD PTR [rsp+0x10]
  014be:    	add    rsp,0x20
  014c2:    	test   rax,rax
  014c5:    	je     0x3d6aa
  014cb: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %14 = %14 * %7                       [Integer][Integer]
  014d2: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  014d9:    	mov    rsi,QWORD PTR [rbp-0x60]
  014dd:    	sub    rsp,0x20
  014e1:    	movq   QWORD PTR [rsp],xmm5
  014e6:    	movq   QWORD PTR [rsp+0x8],xmm6
  014ec:    	movq   QWORD PTR [rsp+0x10],xmm7
  014f2:    	mov    rdx,rdi
  014f5:    	mov    rcx,rsi
  014f8:    	mov    rdi,rbx
  014fb:    	mov    rsi,r12
  014fe: 3a 	movabs rax,0x563a5fe5c230
  01508:    	call   rax
  0150a:    	movq   xmm5,QWORD PTR [rsp]
  0150f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01515:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0151b:    	add    rsp,0x20
  0151f: 3a 	movabs r13,0x563a608e6bf0
  01529:    	test   rax,rax
  0152c:    	je     0xffffc3a5
  01532: ff 	mov    QWORD PTR [rbp-0x98],rax
:00091 %13 = %13 + %14                      [Integer][Integer]
  01539: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01540: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  01547: 00 	test   rdi,0x1
  0154e:    	je     0x3d6e2
  01554: 00 	test   rsi,0x1
  0155b:    	je     0x3d6e2
  01561:    	sub    rdi,0x1
  01565:    	add    rdi,rsi
  01568:    	jo     0x3d6e2
  0156e: ff 	mov    QWORD PTR [rbp-0x90],rdi
:00092 %9 = %10.call new(%11; 3)            [<INVALID>]
:00093 
  01575:    	sub    rsp,0x20
  01579:    	movq   QWORD PTR [rsp],xmm5
  0157e:    	movq   QWORD PTR [rsp+0x8],xmm6
  01584:    	movq   QWORD PTR [rsp+0x10],xmm7
  0158a:    	mov    rdi,QWORD PTR [rbp-0x78]
  0158e: 3a 	movabs rax,0x563a5fe2d010
  01598:    	call   rax
  0159a:    	mov    r15d,eax
  0159d: 00 	cmp    r15d,DWORD PTR [rip+0x5e2]        # 0x1b86
  015a4:    	jne    0x3d70b
  015aa:    	mov    eax,DWORD PTR [rip+0xffffffffffffd7d2]        # 0xffffed82
  015b0:    	cmp    DWORD PTR [rip+0x5cc],eax        # 0x1b82
  015b6:    	jne    0x3d70b
  015bc:    	mov    rax,QWORD PTR [rbx]
  015bf:    	lea    rdi,[rsp-0x18]
  015c4:    	mov    QWORD PTR [rdi],rax
  015c7:    	mov    QWORD PTR [rbx],rdi
  015ca: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015d3:    	mov    QWORD PTR [rsp-0x38],rcx
  015d8:    	mov    rax,QWORD PTR [rbp-0x78]
  015dc:    	mov    QWORD PTR [rsp-0x38],rax
  015e1: 00 	mov    rdi,0x3
  015e8:    	mov    rax,QWORD PTR [rbp-0x80]
  015ec:    	mov    QWORD PTR [rsp-0x40],rax
  015f1: ff 	mov    rax,QWORD PTR [rbp-0x88]
  015f8:    	mov    QWORD PTR [rsp-0x48],rax
  015fd: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01604:    	mov    QWORD PTR [rsp-0x50],rax
  01609: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01612: 00 	movabs rax,0x0
  0161c:    	mov    QWORD PTR [rsp-0x28],rax
  01621: 00 	movabs r13,0x0
  0162b:    	call   0xffffc36a
  01630:    	lea    rdi,[rbp-0x8]
  01634:    	mov    QWORD PTR [rbx],rdi
  01637:    	movq   xmm5,QWORD PTR [rsp]
  0163c:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01642:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01648:    	add    rsp,0x20
  0164c:    	test   rax,rax
  0164f:    	je     0x3d777
  01655:    	mov    QWORD PTR [rbp-0x70],rax
:00095 _ = %2.call pl=(%9; 1)               [<INVALID>]
:00096 
  01659:    	sub    rsp,0x20
  0165d:    	movq   QWORD PTR [rsp],xmm5
  01662:    	movq   QWORD PTR [rsp+0x8],xmm6
  01668:    	movq   QWORD PTR [rsp+0x10],xmm7
  0166e:    	mov    rdi,QWORD PTR [rbp-0x38]
  01672: 3a 	movabs rax,0x563a5fe2d010
  0167c:    	call   rax
  0167e:    	mov    r15d,eax
  01681: 00 	cmp    r15d,DWORD PTR [rip+0x506]        # 0x1b8e
  01688:    	jne    0x3d786
  0168e:    	mov    eax,DWORD PTR [rip+0xffffffffffffd6ee]        # 0xffffed82
  01694:    	cmp    DWORD PTR [rip+0x4f0],eax        # 0x1b8a
  0169a:    	jne    0x3d786
  016a0:    	mov    rax,QWORD PTR [rbx]
  016a3:    	lea    rdi,[rsp-0x18]
  016a8:    	mov    QWORD PTR [rdi],rax
  016ab:    	mov    QWORD PTR [rbx],rdi
  016ae: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016b7:    	mov    QWORD PTR [rsp-0x38],rcx
  016bc:    	mov    rax,QWORD PTR [rbp-0x38]
  016c0:    	mov    QWORD PTR [rsp-0x38],rax
  016c5: 00 	mov    rdi,0x1
  016cc:    	mov    rax,QWORD PTR [rbp-0x70]
  016d0:    	mov    QWORD PTR [rsp-0x40],rax
  016d5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016de: 00 	movabs rax,0x0
  016e8:    	mov    QWORD PTR [rsp-0x28],rax
  016ed: 00 	movabs r13,0x0
  016f7:    	call   0xffffc36a
  016fc:    	lea    rdi,[rbp-0x8]
  01700:    	mov    QWORD PTR [rbx],rdi
  01703:    	movq   xmm5,QWORD PTR [rsp]
  01708:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0170e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01714:    	add    rsp,0x20
  01718:    	test   rax,rax
  0171b:    	je     0x3d7f2
:00098 %9 = %2.call pl()                    [<INVALID>]
:00099 
  01721:    	sub    rsp,0x20
  01725:    	movq   QWORD PTR [rsp],xmm5
  0172a:    	movq   QWORD PTR [rsp+0x8],xmm6
  01730:    	movq   QWORD PTR [rsp+0x10],xmm7
  01736:    	mov    rdi,QWORD PTR [rbp-0x38]
  0173a: 3a 	movabs rax,0x563a5fe2d010
  01744:    	call   rax
  01746:    	mov    r15d,eax
  01749: 00 	cmp    r15d,DWORD PTR [rip+0x446]        # 0x1b96
  01750:    	jne    0x3d801
  01756:    	mov    eax,DWORD PTR [rip+0xffffffffffffd626]        # 0xffffed82
  0175c:    	cmp    DWORD PTR [rip+0x430],eax        # 0x1b92
  01762:    	jne    0x3d801
  01768:    	mov    rax,QWORD PTR [rbx]
  0176b:    	lea    rdi,[rsp-0x18]
  01770:    	mov    QWORD PTR [rdi],rax
  01773:    	mov    QWORD PTR [rbx],rdi
  01776: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0177f:    	mov    QWORD PTR [rsp-0x38],rcx
  01784:    	mov    rax,QWORD PTR [rbp-0x38]
  01788:    	mov    QWORD PTR [rsp-0x38],rax
  0178d: 00 	mov    rdi,0x0
  01794: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0179d: 00 	movabs rax,0x0
  017a7:    	mov    QWORD PTR [rsp-0x28],rax
  017ac: 00 	movabs r13,0x0
  017b6:    	call   0xffffc36a
  017bb:    	lea    rdi,[rbp-0x8]
  017bf:    	mov    QWORD PTR [rbx],rdi
  017c2:    	movq   xmm5,QWORD PTR [rsp]
  017c7:    	movq   xmm6,QWORD PTR [rsp+0x8]
  017cd:    	movq   xmm7,QWORD PTR [rsp+0x10]
  017d3:    	add    rsp,0x20
  017d7:    	test   rax,rax
  017da:    	je     0x3d86d
  017e0:    	mov    QWORD PTR [rbp-0x70],rax
:00101 %10 = @center: <INVALID>[IvarId(0)]
  017e4:    	mov    rdi,QWORD PTR [rbp-0x28]
  017e8:    	sub    rsp,0x20
  017ec:    	movq   QWORD PTR [rsp],xmm5
  017f1:    	movq   QWORD PTR [rsp+0x8],xmm6
  017f7:    	movq   QWORD PTR [rsp+0x10],xmm7
  017fd: 00 	mov    rsi,0x7b
  01804:    	mov    rdx,r12
  01807: 3a 	movabs rax,0x563a5fe90c70
  01811:    	call   rax
  01813:    	movq   xmm5,QWORD PTR [rsp]
  01818:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0181e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01824:    	add    rsp,0x20
  01828:    	mov    QWORD PTR [rbp-0x78],rax
:00102 %8 = %9.call vsub(%10; 1)            [<INVALID>]
:00103 
  0182c:    	sub    rsp,0x20
  01830:    	movq   QWORD PTR [rsp],xmm5
  01835:    	movq   QWORD PTR [rsp+0x8],xmm6
  0183b:    	movq   QWORD PTR [rsp+0x10],xmm7
  01841:    	mov    rdi,QWORD PTR [rbp-0x70]
  01845: 3a 	movabs rax,0x563a5fe2d010
  0184f:    	call   rax
  01851:    	mov    r15d,eax
  01854: 00 	cmp    r15d,DWORD PTR [rip+0x343]        # 0x1b9e
  0185b:    	jne    0x3d87c
  01861:    	mov    eax,DWORD PTR [rip+0xffffffffffffd51b]        # 0xffffed82
  01867:    	cmp    DWORD PTR [rip+0x32d],eax        # 0x1b9a
  0186d:    	jne    0x3d87c
  01873:    	mov    rax,QWORD PTR [rbx]
  01876:    	lea    rdi,[rsp-0x18]
  0187b:    	mov    QWORD PTR [rdi],rax
  0187e:    	mov    QWORD PTR [rbx],rdi
  01881: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0188a:    	mov    QWORD PTR [rsp-0x38],rcx
  0188f:    	mov    rax,QWORD PTR [rbp-0x70]
  01893:    	mov    QWORD PTR [rsp-0x38],rax
  01898: 00 	mov    rdi,0x1
  0189f:    	mov    rax,QWORD PTR [rbp-0x78]
  018a3:    	mov    QWORD PTR [rsp-0x40],rax
  018a8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018b1: 00 	movabs rax,0x0
  018bb:    	mov    QWORD PTR [rsp-0x28],rax
  018c0: 00 	movabs r13,0x0
  018ca:    	call   0xffffc36a
  018cf:    	lea    rdi,[rbp-0x8]
  018d3:    	mov    QWORD PTR [rbx],rdi
  018d6:    	movq   xmm5,QWORD PTR [rsp]
  018db:    	movq   xmm6,QWORD PTR [rsp+0x8]
  018e1:    	movq   xmm7,QWORD PTR [rsp+0x10]
  018e7:    	add    rsp,0x20
  018eb:    	test   rax,rax
  018ee:    	je     0x3d8e8
  018f4:    	mov    QWORD PTR [rbp-0x68],rax
:00105 %9 = %8.call vnormalize()            [<INVALID>]
:00106 
  018f8:    	sub    rsp,0x20
  018fc:    	movq   QWORD PTR [rsp],xmm5
  01901:    	movq   QWORD PTR [rsp+0x8],xmm6
  01907:    	movq   QWORD PTR [rsp+0x10],xmm7
  0190d:    	mov    rdi,QWORD PTR [rbp-0x68]
  01911: 3a 	movabs rax,0x563a5fe2d010
  0191b:    	call   rax
  0191d:    	mov    r15d,eax
  01920: 00 	cmp    r15d,DWORD PTR [rip+0x27f]        # 0x1ba6
  01927:    	jne    0x3d8f7
  0192d:    	mov    eax,DWORD PTR [rip+0xffffffffffffd44f]        # 0xffffed82
  01933:    	cmp    DWORD PTR [rip+0x269],eax        # 0x1ba2
  01939:    	jne    0x3d8f7
  0193f:    	mov    rax,QWORD PTR [rbx]
  01942:    	lea    rdi,[rsp-0x18]
  01947:    	mov    QWORD PTR [rdi],rax
  0194a:    	mov    QWORD PTR [rbx],rdi
  0194d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01956:    	mov    QWORD PTR [rsp-0x38],rcx
  0195b:    	mov    rax,QWORD PTR [rbp-0x68]
  0195f:    	mov    QWORD PTR [rsp-0x38],rax
  01964: 00 	mov    rdi,0x0
  0196b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01974: 00 	movabs rax,0x0
  0197e:    	mov    QWORD PTR [rsp-0x28],rax
  01983: 00 	movabs r13,0x0
  0198d:    	call   0xffffc36a
  01992:    	lea    rdi,[rbp-0x8]
  01996:    	mov    QWORD PTR [rbx],rdi
  01999:    	movq   xmm5,QWORD PTR [rsp]
  0199e:    	movq   xmm6,QWORD PTR [rsp+0x8]
  019a4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  019aa:    	add    rsp,0x20
  019ae:    	test   rax,rax
  019b1:    	je     0x3d963
  019b7:    	mov    QWORD PTR [rbp-0x70],rax
:00108 _ = %2.call n=(%9; 1)                [<INVALID>]
:00109 
  019bb:    	sub    rsp,0x20
  019bf:    	movq   QWORD PTR [rsp],xmm5
  019c4:    	movq   QWORD PTR [rsp+0x8],xmm6
  019ca:    	movq   QWORD PTR [rsp+0x10],xmm7
  019d0:    	mov    rdi,QWORD PTR [rbp-0x38]
  019d4: 3a 	movabs rax,0x563a5fe2d010
  019de:    	call   rax
  019e0:    	mov    r15d,eax
  019e3: 00 	cmp    r15d,DWORD PTR [rip+0x1c4]        # 0x1bae
  019ea:    	jne    0x3d972
  019f0:    	mov    eax,DWORD PTR [rip+0xffffffffffffd38c]        # 0xffffed82
  019f6:    	cmp    DWORD PTR [rip+0x1ae],eax        # 0x1baa
  019fc:    	jne    0x3d972
  01a02:    	mov    rax,QWORD PTR [rbx]
  01a05:    	lea    rdi,[rsp-0x18]
  01a0a:    	mov    QWORD PTR [rdi],rax
  01a0d:    	mov    QWORD PTR [rbx],rdi
  01a10: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a19:    	mov    QWORD PTR [rsp-0x38],rcx
  01a1e:    	mov    rax,QWORD PTR [rbp-0x38]
  01a22:    	mov    QWORD PTR [rsp-0x38],rax
  01a27: 00 	mov    rdi,0x1
  01a2e:    	mov    rax,QWORD PTR [rbp-0x70]
  01a32:    	mov    QWORD PTR [rsp-0x40],rax
  01a37: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a40: 00 	movabs rax,0x0
  01a4a:    	mov    QWORD PTR [rsp-0x28],rax
  01a4f: 00 	movabs r13,0x0
  01a59:    	call   0xffffc36a
  01a5e:    	lea    rdi,[rbp-0x8]
  01a62:    	mov    QWORD PTR [rbx],rdi
  01a65:    	movq   xmm5,QWORD PTR [rsp]
  01a6a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01a70:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01a76:    	add    rsp,0x20
  01a7a:    	test   rax,rax
  01a7d:    	je     0x3d9de
:00111 br =>:00112
  01a83:    	jmp    0x3da20
:00112 br =>:00113
  01a88:    	jmp    0x3daa0
:00113 %9 = nil
  01a8d: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00114 ret %9
  01a95:    	mov    rax,QWORD PTR [rbp-0x70]
  01a99:    	leave  
  01a9a:    	ret    
==> start whole compile: vsub FuncId(57) self_class:Vec start:[00000] bytecode:0x563a608edf50
<== finished compile. elapsed:49.1µs
offset:Pos(22600) code: 1400 bytes  data: 48 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x70
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    QWORD PTR [rbp-0x50],rax
  0001f: mov    QWORD PTR [rbp-0x58],rax
  00023: mov    QWORD PTR [rbp-0x60],rax
  00027: mov    rdi,QWORD PTR [rbp-0x28]
  0002b: test   rdi,0x7
  00032: jne    0x3bf21
  00038: cmp    DWORD PTR [rdi+0x4],0x25
  0003c: jne    0x3bf21
:00000 %3 = const[Vec]                      [Vec]
  00042: mov    rax,QWORD PTR [rip+0xffffffffffffd18f]        # 0xffffd1d8
  00049: cmp    rax,QWORD PTR [rip+0x538]        # 0x588
  00050: jne    0x3bf30
  00056: mov    rax,QWORD PTR [rip+0x51b]        # 0x578
  0005d: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = @x: Vec[IvarId(0)]
  00061: mov    rdi,QWORD PTR [rbp-0x28]
  00065: xor    rax,rax
  00068: mov    ax,WORD PTR [rdi+0x2]
  0006c: cmp    rax,0x3
  00070: jne    0x3bf76
  00076: mov    rax,QWORD PTR [rdi+0x10]
  0007a: mov    QWORD PTR [rbp-0x48],rax
:00002 %5 = %1.call x()                     [Vec]
:00003 
  0007e: mov    rdi,QWORD PTR [rbp-0x30]
  00082: test   rdi,0x7
  00089: jne    0x3bf8c
  0008f: cmp    DWORD PTR [rdi+0x4],0x25
  00093: jne    0x3bf8c
  00099: cmp    DWORD PTR [rip+0xffffffffffffd130],0x26        # 0xffffd1d0
  000a0: jne    0x3bf8c
  000a6: mov    esi,DWORD PTR [rip+0x4e8]        # 0x594
  000ac: cmp    esi,0xffffffff
  000af: je     0x3bf9b
  000b5: xor    rax,rax
  000b8: mov    ax,WORD PTR [rdi+0x2]
  000bc: cmp    rax,0x3
  000c0: jne    0xd9
  000c6: cmp    esi,0x6
  000c9: jge    0xd9
  000cf: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000d4: jmp    0xe5
  000d9: movabs rax,0x563a5fe35570
  000e3: call   rax
  000e5: mov    QWORD PTR [rbp-0x50],rax
:00005 %4 = %4 - %5                         [Float][Float]
  000e9: mov    rdi,QWORD PTR [rbp-0x48]
  000ed: test   rdi,0x1
  000f4: jne    0x3bfc4
  000fa: test   rdi,0x2
  00101: je     0x13d
  00107: xorps  xmm2,xmm2
  0010a: movabs rax,0x8000000000000002
  00114: cmp    rdi,rax
  00117: je     0x14f
  0011d: mov    rax,rdi
  00120: sar    rax,0x3f
  00124: add    rax,0x2
  00128: and    rdi,0xfffffffffffffffc
  0012c: or     rdi,rax
  0012f: rol    rdi,0x3d
  00133: movq   xmm2,rdi
  00138: jmp    0x14f
  0013d: call   0xffffa82c
  00142: test   rax,rax
  00145: je     0x3bfc4
  0014b: movq   xmm2,xmm0
  0014f: mov    rdi,QWORD PTR [rbp-0x50]
  00153: test   rdi,0x1
  0015a: jne    0x3bfd3
  00160: test   rdi,0x2
  00167: je     0x1a3
  0016d: xorps  xmm3,xmm3
  00170: movabs rax,0x8000000000000002
  0017a: cmp    rdi,rax
  0017d: je     0x1b5
  00183: mov    rax,rdi
  00186: sar    rax,0x3f
  0018a: add    rax,0x2
  0018e: and    rdi,0xfffffffffffffffc
  00192: or     rdi,rax
  00195: rol    rdi,0x3d
  00199: movq   xmm3,rdi
  0019e: jmp    0x1b5
  001a3: call   0xffffa82c
  001a8: test   rax,rax
  001ab: je     0x3bfd3
  001b1: movq   xmm3,xmm0
  001b5: subsd  xmm2,xmm3
:00006 %5 = @y: Vec[IvarId(1)]
  001b9: mov    rdi,QWORD PTR [rbp-0x28]
  001bd: xor    rax,rax
  001c0: mov    ax,WORD PTR [rdi+0x2]
  001c4: cmp    rax,0x3
  001c8: jne    0x3bfe2
  001ce: mov    rax,QWORD PTR [rdi+0x18]
  001d2: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = %1.call y()                     [Vec]
:00008 
  001d6: mov    rdi,QWORD PTR [rbp-0x30]
  001da: test   rdi,0x7
  001e1: jne    0x3c00a
  001e7: cmp    DWORD PTR [rdi+0x4],0x25
  001eb: jne    0x3c00a
  001f1: cmp    DWORD PTR [rip+0xffffffffffffcfd8],0x26        # 0xffffd1d0
  001f8: jne    0x3c00a
  001fe: mov    esi,DWORD PTR [rip+0x398]        # 0x59c
  00204: cmp    esi,0xffffffff
  00207: je     0x3c026
  0020d: xor    rax,rax
  00210: mov    ax,WORD PTR [rdi+0x2]
  00214: cmp    rax,0x3
  00218: jne    0x231
  0021e: cmp    esi,0x6
  00221: jge    0x231
  00227: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0022c: jmp    0x24f
  00231: sub    rsp,0x10
  00235: movq   QWORD PTR [rsp],xmm2
  0023a: movabs rax,0x563a5fe35570
  00244: call   rax
  00246: movq   xmm2,QWORD PTR [rsp]
  0024b: add    rsp,0x10
  0024f: mov    QWORD PTR [rbp-0x58],rax
:00010 %5 = %5 - %6                         [Float][Float]
  00253: mov    rdi,QWORD PTR [rbp-0x50]
  00257: test   rdi,0x1
  0025e: jne    0x3c061
  00264: test   rdi,0x2
  0026b: je     0x2a7
  00271: xorps  xmm3,xmm3
  00274: movabs rax,0x8000000000000002
  0027e: cmp    rdi,rax
  00281: je     0x2b9
  00287: mov    rax,rdi
  0028a: sar    rax,0x3f
  0028e: add    rax,0x2
  00292: and    rdi,0xfffffffffffffffc
  00296: or     rdi,rax
  00299: rol    rdi,0x3d
  0029d: movq   xmm3,rdi
  002a2: jmp    0x2b9
  002a7: call   0xffffa82c
  002ac: test   rax,rax
  002af: je     0x3c061
  002b5: movq   xmm3,xmm0
  002b9: mov    rdi,QWORD PTR [rbp-0x58]
  002bd: test   rdi,0x1
  002c4: jne    0x3c07d
  002ca: test   rdi,0x2
  002d1: je     0x30d
  002d7: xorps  xmm4,xmm4
  002da: movabs rax,0x8000000000000002
  002e4: cmp    rdi,rax
  002e7: je     0x31f
  002ed: mov    rax,rdi
  002f0: sar    rax,0x3f
  002f4: add    rax,0x2
  002f8: and    rdi,0xfffffffffffffffc
  002fc: or     rdi,rax
  002ff: rol    rdi,0x3d
  00303: movq   xmm4,rdi
  00308: jmp    0x31f
  0030d: call   0xffffa82c
  00312: test   rax,rax
  00315: je     0x3c07d
  0031b: movq   xmm4,xmm0
  0031f: subsd  xmm3,xmm4
:00011 %6 = @z: Vec[IvarId(2)]
  00323: mov    rdi,QWORD PTR [rbp-0x28]
  00327: xor    rax,rax
  0032a: mov    ax,WORD PTR [rdi+0x2]
  0032e: cmp    rax,0x3
  00332: jne    0x3c099
  00338: mov    rax,QWORD PTR [rdi+0x20]
  0033c: mov    QWORD PTR [rbp-0x58],rax
:00012 %7 = %1.call z()                     [Vec]
:00013 
  00340: mov    rdi,QWORD PTR [rbp-0x30]
  00344: test   rdi,0x7
  0034b: jne    0x3c0cd
  00351: cmp    DWORD PTR [rdi+0x4],0x25
  00355: jne    0x3c0cd
  0035b: cmp    DWORD PTR [rip+0xffffffffffffce6e],0x26        # 0xffffd1d0
  00362: jne    0x3c0cd
  00368: mov    esi,DWORD PTR [rip+0x236]        # 0x5a4
  0036e: cmp    esi,0xffffffff
  00371: je     0x3c0f6
  00377: xor    rax,rax
  0037a: mov    ax,WORD PTR [rdi+0x2]
  0037e: cmp    rax,0x3
  00382: jne    0x39b
  00388: cmp    esi,0x6
  0038b: jge    0x39b
  00391: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00396: jmp    0x3c5
  0039b: sub    rsp,0x10
  0039f: movq   QWORD PTR [rsp],xmm2
  003a4: movq   QWORD PTR [rsp+0x8],xmm3
  003aa: movabs rax,0x563a5fe35570
  003b4: call   rax
  003b6: movq   xmm2,QWORD PTR [rsp]
  003bb: movq   xmm3,QWORD PTR [rsp+0x8]
  003c1: add    rsp,0x10
  003c5: mov    QWORD PTR [rbp-0x60],rax
:00015 %6 = %6 - %7                         [Float][Float]
  003c9: mov    rdi,QWORD PTR [rbp-0x58]
  003cd: test   rdi,0x1
  003d4: jne    0x3c13d
  003da: test   rdi,0x2
  003e1: je     0x41d
  003e7: xorps  xmm4,xmm4
  003ea: movabs rax,0x8000000000000002
  003f4: cmp    rdi,rax
  003f7: je     0x42f
  003fd: mov    rax,rdi
  00400: sar    rax,0x3f
  00404: add    rax,0x2
  00408: and    rdi,0xfffffffffffffffc
  0040c: or     rdi,rax
  0040f: rol    rdi,0x3d
  00413: movq   xmm4,rdi
  00418: jmp    0x42f
  0041d: call   0xffffa82c
  00422: test   rax,rax
  00425: je     0x3c13d
  0042b: movq   xmm4,xmm0
  0042f: mov    rdi,QWORD PTR [rbp-0x60]
  00433: test   rdi,0x1
  0043a: jne    0x3c166
  00440: test   rdi,0x2
  00447: je     0x483
  0044d: xorps  xmm5,xmm5
  00450: movabs rax,0x8000000000000002
  0045a: cmp    rdi,rax
  0045d: je     0x495
  00463: mov    rax,rdi
  00466: sar    rax,0x3f
  0046a: add    rax,0x2
  0046e: and    rdi,0xfffffffffffffffc
  00472: or     rdi,rax
  00475: rol    rdi,0x3d
  00479: movq   xmm5,rdi
  0047e: jmp    0x495
  00483: call   0xffffa82c
  00488: test   rax,rax
  0048b: je     0x3c166
  00491: movq   xmm5,xmm0
  00495: subsd  xmm4,xmm5
:00016 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00017 
  00499: movq   xmm0,xmm2
  0049d: call   0xffffa91f
  004a2: mov    QWORD PTR [rbp-0x48],rax
  004a6: movq   xmm0,xmm3
  004aa: call   0xffffa91f
  004af: mov    QWORD PTR [rbp-0x50],rax
  004b3: movq   xmm0,xmm4
  004b7: call   0xffffa91f
  004bc: mov    QWORD PTR [rbp-0x58],rax
  004c0: mov    rdi,QWORD PTR [rbp-0x40]
  004c4: test   rdi,0x7
  004cb: jne    0x3c18f
  004d1: cmp    DWORD PTR [rdi+0x4],0x26
  004d5: jne    0x3c18f
  004db: cmp    DWORD PTR [rip+0xffffffffffffccee],0x26        # 0xffffd1d0
  004e2: jne    0x3c18f
  004e8: mov    r9,0x0
  004ef: sub    rsp,0x20
  004f3: movq   QWORD PTR [rsp],xmm2
  004f8: movq   QWORD PTR [rsp+0x8],xmm3
  004fe: movq   QWORD PTR [rsp+0x10],xmm4
  00504: movq   QWORD PTR [rsp+0x18],xmm5
  0050a: mov    rdx,rdi
  0050d: mov    rax,QWORD PTR [rbx]
  00510: lea    rdi,[rsp-0x18]
  00515: mov    QWORD PTR [rdi],rax
  00518: mov    QWORD PTR [rbx],rdi
  0051b: mov    QWORD PTR [rsp-0x20],0x0
  00524: mov    QWORD PTR [rsp-0x38],rcx
  00529: lea    rcx,[rbp-0x48]
  0052d: mov    r8,0x3
  00534: call   0x3c19e
  00539: lea    rdi,[rbp-0x8]
  0053d: mov    QWORD PTR [rbx],rdi
  00540: movq   xmm2,QWORD PTR [rsp]
  00545: movq   xmm3,QWORD PTR [rsp+0x8]
  0054b: movq   xmm4,QWORD PTR [rsp+0x10]
  00551: movq   xmm5,QWORD PTR [rsp+0x18]
  00557: add    rsp,0x20
  0055b: movabs r13,0x563a608ee070
  00565: test   rax,rax
  00568: je     0xffffa7f3
  0056e: mov    QWORD PTR [rbp-0x38],rax
:00019 ret %2
  00572: mov    rax,QWORD PTR [rbp-0x38]
  00576: leave  
  00577: ret    
==> start whole compile: <unnamed> FuncId(76) self_class:Scene start:[00000] bytecode:0x563a6092cbb0
<== finished compile. elapsed:134.6µs
offset:Pos(24319) code: 8614 bytes  data: 363 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xd0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00064: ff 	mov    QWORD PTR [rbp-0xb8],rax
  0006b: ff 	mov    QWORD PTR [rbp-0xc0],rax
  00072:    	mov    rdi,QWORD PTR [rbp-0x28]
  00076: 00 	test   rdi,0x7
  0007d:    	jne    0x3bb19
  00083:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00087:    	jne    0x3bb19
:00000 %14 = dynvar(4, %4)
  0008d:    	mov    rax,QWORD PTR [rbp-0x10]
  00091:    	mov    rax,QWORD PTR [rax]
  00094:    	mov    rax,QWORD PTR [rax]
  00097:    	mov    rax,QWORD PTR [rax]
  0009a:    	mov    rax,QWORD PTR [rax-0x38]
  0009e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00001 %14 = %14 + 1: i16                   [Integer][Integer]
  000a5: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000ac: 00 	test   rdi,0x1
  000b3:    	je     0x3bb28
  000b9:    	add    rdi,0x2
  000bd:    	jo     0x3bb28
  000c3: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00002 dynvar(4, %4) = %14
  000ca:    	mov    rax,QWORD PTR [rbp-0x10]
  000ce:    	mov    rax,QWORD PTR [rax]
  000d1:    	mov    rax,QWORD PTR [rax]
  000d4:    	mov    rax,QWORD PTR [rax]
  000d7: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000de:    	mov    QWORD PTR [rax-0x38],rdi
:00003 %14 = dynvar(4, %1)
  000e2:    	mov    rax,QWORD PTR [rbp-0x10]
  000e6:    	mov    rax,QWORD PTR [rax]
  000e9:    	mov    rax,QWORD PTR [rax]
  000ec:    	mov    rax,QWORD PTR [rax]
  000ef:    	mov    rax,QWORD PTR [rax-0x20]
  000f3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00004 %2 = %14.call to_f()                 [Integer]
:00005 
  000fa: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00101: 00 	test   rdi,0x1
  00108:    	je     0x3bb37
  0010e:    	sar    rdi,1
  00111:    	cvtsi2sd xmm2,rdi
:00007 %14 = dynvar(4, %2)
  00116:    	mov    rax,QWORD PTR [rbp-0x10]
  0011a:    	mov    rax,QWORD PTR [rax]
  0011d:    	mov    rax,QWORD PTR [rax]
  00120:    	mov    rax,QWORD PTR [rax]
  00123:    	mov    rax,QWORD PTR [rax-0x28]
  00127: ff 	mov    QWORD PTR [rbp-0x98],rax
:00008 %3 = %14.call to_f()                 [Integer]
:00009 
  0012e: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00135: 00 	test   rdi,0x1
  0013c:    	je     0x3bb46
  00142:    	sar    rdi,1
  00145:    	cvtsi2sd xmm3,rdi
:00011 %14 = dynvar(2, %1)
  0014a:    	mov    rax,QWORD PTR [rbp-0x10]
  0014e:    	mov    rax,QWORD PTR [rax]
  00151:    	mov    rax,QWORD PTR [rax-0x20]
  00155: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %4 = %14.call to_f()                 [Integer]
:00013 
  0015c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00163: 00 	test   rdi,0x1
  0016a:    	je     0x3bb62
  00170:    	sar    rdi,1
  00173:    	cvtsi2sd xmm4,rdi
:00015 %14 = dynvar(3, %1)
  00178:    	mov    rax,QWORD PTR [rbp-0x10]
  0017c:    	mov    rax,QWORD PTR [rax]
  0017f:    	mov    rax,QWORD PTR [rax]
  00182:    	mov    rax,QWORD PTR [rax-0x20]
  00186: ff 	mov    QWORD PTR [rbp-0x98],rax
:00016 %5 = %14.call to_f()                 [Integer]
:00017 
  0018d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00194: 00 	test   rdi,0x1
  0019b:    	je     0x3bb8b
  001a1:    	sar    rdi,1
  001a4:    	cvtsi2sd xmm5,rdi
:00019 %6 = %1.call to_f()                  [Integer]
:00020 
  001a9:    	mov    rdi,QWORD PTR [rbp-0x30]
  001ad: 00 	test   rdi,0x1
  001b4:    	je     0x3bbc1
  001ba:    	sar    rdi,1
  001bd:    	cvtsi2sd xmm6,rdi
:00022 %14 = dynvar(1, %1)
  001c2:    	mov    rax,QWORD PTR [rbp-0x10]
  001c6:    	mov    rax,QWORD PTR [rax-0x20]
  001ca: ff 	mov    QWORD PTR [rbp-0x98],rax
:00023 %7 = %14.call to_f()                 [Integer]
:00024 
  001d1: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001d8: 00 	test   rdi,0x1
  001df:    	je     0x3bc04
  001e5:    	sar    rdi,1
  001e8:    	cvtsi2sd xmm7,rdi
:00026 %14 = dynvar(4, %5)
  001ed:    	mov    rax,QWORD PTR [rbp-0x10]
  001f1:    	mov    rax,QWORD PTR [rax]
  001f4:    	mov    rax,QWORD PTR [rax]
  001f7:    	mov    rax,QWORD PTR [rax]
  001fa:    	mov    rax,QWORD PTR [rax-0x40]
  001fe: ff 	mov    QWORD PTR [rbp-0x98],rax
:00027 %14 = %6 / %14                       [Float][Float]
  00205: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0020c: 00 	test   rdi,0x1
  00213:    	jne    0x3bc54
  00219: 00 	test   rdi,0x2
  00220:    	je     0x25d
  00226:    	xorps  xmm8,xmm8
  0022a: 00 	movabs rax,0x8000000000000002
  00234:    	cmp    rdi,rax
  00237:    	je     0x270
  0023d:    	mov    rax,rdi
  00240:    	sar    rax,0x3f
  00244:    	add    rax,0x2
  00248:    	and    rdi,0xfffffffffffffffc
  0024c:    	or     rdi,rax
  0024f:    	rol    rdi,0x3d
  00253:    	movq   xmm8,rdi
  00258:    	jmp    0x270
  0025d:    	call   0xffffa175
  00262:    	test   rax,rax
  00265:    	je     0x3bc54
  0026b:    	movq   xmm8,xmm0
  00270:    	movq   rax,xmm8
  00275:    	test   rax,rax
  00278:    	je     0xffffa161
  0027e:    	movq   xmm0,xmm6
  00282:    	divsd  xmm0,xmm8
  00287:    	movq   xmm8,xmm0
:00028 %14 = %4 + %14                       [Float][Float]
  0028c:    	addsd  xmm8,xmm4
:00029 %15 = literal[2.0]
  00291: 1f 	movq   xmm9,QWORD PTR [rip+0x1f17]        # 0x21b1
:00030 %15 = %2 / %15                       [Float][Float]
  0029a:    	movq   rax,xmm9
  0029f:    	test   rax,rax
  002a2:    	je     0xffffa161
  002a8:    	movq   xmm0,xmm2
  002ac:    	divsd  xmm0,xmm9
  002b1:    	movq   xmm9,xmm0
:00031 %14 = %14 - %15                      [Float][Float]
  002b6:    	subsd  xmm8,xmm9
:00032 %15 = literal[2.0]
  002bb: 1e 	movq   xmm9,QWORD PTR [rip+0x1efd]        # 0x21c1
:00033 %15 = %2 / %15                       [Float][Float]
  002c4:    	movq   rax,xmm9
  002c9:    	test   rax,rax
  002cc:    	je     0xffffa161
  002d2:    	movq   xmm0,xmm2
  002d6:    	divsd  xmm0,xmm9
  002db:    	movq   xmm9,xmm0
:00034 %8 = %14 / %15                       [Float][Float]
  002e0:    	movq   xmm10,xmm8
  002e5:    	movq   rax,xmm9
  002ea:    	test   rax,rax
  002ed:    	je     0xffffa161
  002f3:    	divsd  xmm10,xmm9
:00035 %14 = dynvar(4, %5)
  002f8:    	mov    rax,QWORD PTR [rbp-0x10]
  002fc:    	mov    rax,QWORD PTR [rax]
  002ff:    	mov    rax,QWORD PTR [rax]
  00302:    	mov    rax,QWORD PTR [rax]
  00305:    	mov    rax,QWORD PTR [rax-0x40]
  00309: ff 	mov    QWORD PTR [rbp-0x98],rax
:00036 %14 = %7 / %14                       [Float][Float]
  00310: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00317: 00 	test   rdi,0x1
  0031e:    	jne    0x3bcb1
  00324: 00 	test   rdi,0x2
  0032b:    	je     0x368
  00331:    	xorps  xmm8,xmm8
  00335: 00 	movabs rax,0x8000000000000002
  0033f:    	cmp    rdi,rax
  00342:    	je     0x37b
  00348:    	mov    rax,rdi
  0034b:    	sar    rax,0x3f
  0034f:    	add    rax,0x2
  00353:    	and    rdi,0xfffffffffffffffc
  00357:    	or     rdi,rax
  0035a:    	rol    rdi,0x3d
  0035e:    	movq   xmm8,rdi
  00363:    	jmp    0x37b
  00368:    	call   0xffffa175
  0036d:    	test   rax,rax
  00370:    	je     0x3bcb1
  00376:    	movq   xmm8,xmm0
  0037b:    	movq   rax,xmm8
  00380:    	test   rax,rax
  00383:    	je     0xffffa161
  00389:    	movq   xmm0,xmm7
  0038d:    	divsd  xmm0,xmm8
  00392:    	movq   xmm8,xmm0
:00037 %14 = %5 + %14                       [Float][Float]
  00397:    	addsd  xmm8,xmm5
:00038 %15 = literal[2.0]
  0039c: 1e 	movq   xmm9,QWORD PTR [rip+0x1e2c]        # 0x21d1
:00039 %15 = %3 / %15                       [Float][Float]
  003a5:    	movq   rax,xmm9
  003aa:    	test   rax,rax
  003ad:    	je     0xffffa161
  003b3:    	movq   xmm0,xmm3
  003b7:    	divsd  xmm0,xmm9
  003bc:    	movq   xmm9,xmm0
:00040 %14 = %14 - %15                      [Float][Float]
  003c1:    	subsd  xmm8,xmm9
:00041 %14 = neg %14                        [Float]
  003c6: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1e13]        # 0x21e1
:00042 %15 = literal[2.0]
  003ce: 1e 	movq   xmm9,QWORD PTR [rip+0x1e1a]        # 0x21f1
:00043 %15 = %3 / %15                       [Float][Float]
  003d7:    	movq   rax,xmm9
  003dc:    	test   rax,rax
  003df:    	je     0xffffa161
  003e5:    	movq   xmm0,xmm3
  003e9:    	divsd  xmm0,xmm9
  003ee:    	movq   xmm9,xmm0
:00044 %9 = %14 / %15                       [Float][Float]
  003f3:    	movq   xmm11,xmm8
  003f8:    	movq   rax,xmm9
  003fd:    	test   rax,rax
  00400:    	je     0xffffa161
  00406:    	divsd  xmm11,xmm9
:00045 %15 = const[Vec]                     [Vec]
  0040b: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc70f]        # 0xffffcb21
  00412: 00 	cmp    rax,QWORD PTR [rip+0x1df8]        # 0x2211
  00419:    	jne    0x3bd2d
  0041f: 00 	mov    rax,QWORD PTR [rip+0x1ddb]        # 0x2201
  00426: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00046 %16 = %8
:00047 %17 = %9
:00048 %18 = literal[-1.0]
  0042d: 1d 	movq   xmm9,QWORD PTR [rip+0x1deb]        # 0x2221
:00049 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
:00050 
  00436:    	movq   xmm0,xmm10
  0043b:    	call   0xffffa268
  00440: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00447:    	movq   xmm0,xmm11
  0044c:    	call   0xffffa268
  00451: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00458:    	movq   xmm0,xmm9
  0045d:    	call   0xffffa268
  00462: ff 	mov    QWORD PTR [rbp-0xb8],rax
  00469: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00470: 00 	test   rdi,0x7
  00477:    	jne    0x3bdeb
  0047d:    	cmp    DWORD PTR [rdi+0x4],0x26
  00481:    	jne    0x3bdeb
  00487: 26 	cmp    DWORD PTR [rip+0xffffffffffffc68b],0x26        # 0xffffcb19
  0048e:    	jne    0x3bdeb
  00494: 00 	mov    r9,0x0
  0049b:    	sub    rsp,0x50
  0049f:    	movq   QWORD PTR [rsp],xmm2
  004a4:    	movq   QWORD PTR [rsp+0x8],xmm3
  004aa:    	movq   QWORD PTR [rsp+0x10],xmm4
  004b0:    	movq   QWORD PTR [rsp+0x18],xmm5
  004b6:    	movq   QWORD PTR [rsp+0x20],xmm6
  004bc:    	movq   QWORD PTR [rsp+0x28],xmm7
  004c2: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  004c9: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  004d0: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  004d7:    	mov    rdx,rdi
  004da:    	mov    rax,QWORD PTR [rbx]
  004dd:    	lea    rdi,[rsp-0x18]
  004e2:    	mov    QWORD PTR [rdi],rax
  004e5:    	mov    QWORD PTR [rbx],rdi
  004e8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  004f1:    	mov    QWORD PTR [rsp-0x38],rcx
  004f6: ff 	lea    rcx,[rbp-0xa8]
  004fd: 00 	mov    r8,0x3
  00504:    	call   0x3be64
  00509:    	lea    rdi,[rbp-0x8]
  0050d:    	mov    QWORD PTR [rbx],rdi
  00510:    	movq   xmm2,QWORD PTR [rsp]
  00515:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0051b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00521:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00527:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0052d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00533: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0053a: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00541: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00548:    	add    rsp,0x50
  0054c: 3a 	movabs r13,0x563a6092cee0
  00556:    	test   rax,rax
  00559:    	je     0xffffa13c
  0055f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00052 %10 = %14.call vnormalize()          [Vec]
:00053 
  00566: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0056d: 00 	test   rdi,0x7
  00574:    	jne    0x3be96
  0057a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0057e:    	jne    0x3be96
  00584: 26 	cmp    DWORD PTR [rip+0xffffffffffffc58e],0x26        # 0xffffcb19
  0058b:    	jne    0x3be96
  00591:    	sub    rsp,0x50
  00595:    	movq   QWORD PTR [rsp],xmm2
  0059a:    	movq   QWORD PTR [rsp+0x8],xmm3
  005a0:    	movq   QWORD PTR [rsp+0x10],xmm4
  005a6:    	movq   QWORD PTR [rsp+0x18],xmm5
  005ac:    	movq   QWORD PTR [rsp+0x20],xmm6
  005b2:    	movq   QWORD PTR [rsp+0x28],xmm7
  005b8: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  005bf: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  005c6: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  005cd:    	mov    rax,QWORD PTR [rbx]
  005d0:    	lea    rdi,[rsp-0x18]
  005d5:    	mov    QWORD PTR [rdi],rax
  005d8:    	mov    QWORD PTR [rbx],rdi
  005db: 00 	mov    QWORD PTR [rsp-0x20],0x0
  005e4:    	mov    QWORD PTR [rsp-0x38],rcx
  005e9: ff 	mov    rax,QWORD PTR [rbp-0x98]
  005f0:    	mov    QWORD PTR [rsp-0x38],rax
  005f5: 00 	mov    rdi,0x0
  005fc: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00605: 07 	movabs rax,0x70000003d
  0060f:    	mov    QWORD PTR [rsp-0x28],rax
  00614: 3a 	movabs r13,0x563a608f6640
  0061e:    	call   0xffffd3ec
  00623:    	lea    rdi,[rbp-0x8]
  00627:    	mov    QWORD PTR [rbx],rdi
  0062a:    	movq   xmm2,QWORD PTR [rsp]
  0062f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00635:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0063b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00641:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00647:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0064d: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00654: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0065b: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00662:    	add    rsp,0x50
  00666: 3a 	movabs r13,0x563a6092cf10
  00670:    	test   rax,rax
  00673:    	je     0xffffa13c
  00679:    	mov    QWORD PTR [rbp-0x78],rax
:00055 %14 = const[Ray]                     [Ray]
  0067d: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc49d]        # 0xffffcb21
  00684: 00 	cmp    rax,QWORD PTR [rip+0x1bb6]        # 0x2241
  0068b:    	jne    0x3bf0f
  00691: 00 	mov    rax,QWORD PTR [rip+0x1b99]        # 0x2231
  00698: ff 	mov    QWORD PTR [rbp-0x98],rax
:00056 %16 = const[Vec]                     [Vec]
  0069f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc47b]        # 0xffffcb21
  006a6: 00 	cmp    rax,QWORD PTR [rip+0x1bb4]        # 0x2261
  006ad:    	jne    0x3bfcd
  006b3: 00 	mov    rax,QWORD PTR [rip+0x1b97]        # 0x2251
  006ba: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00057 %17 = literal[0.0]
  006c1: 1b 	movq   xmm8,QWORD PTR [rip+0x1ba7]        # 0x2271
:00058 %18 = literal[0.0]
  006ca: 1b 	movq   xmm9,QWORD PTR [rip+0x1bae]        # 0x2281
:00059 %19 = literal[0.0]
  006d3: 1b 	movq   xmm12,QWORD PTR [rip+0x1bb5]        # 0x2291
:00060 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
:00061 
  006dc:    	movq   xmm0,xmm8
  006e1:    	call   0xffffa268
  006e6: ff 	mov    QWORD PTR [rbp-0xb0],rax
  006ed:    	movq   xmm0,xmm9
  006f2:    	call   0xffffa268
  006f7: ff 	mov    QWORD PTR [rbp-0xb8],rax
  006fe:    	movq   xmm0,xmm12
  00703:    	call   0xffffa268
  00708: ff 	mov    QWORD PTR [rbp-0xc0],rax
  0070f: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  00716: 00 	test   rdi,0x7
  0071d:    	jne    0x3c08b
  00723:    	cmp    DWORD PTR [rdi+0x4],0x26
  00727:    	jne    0x3c08b
  0072d: 26 	cmp    DWORD PTR [rip+0xffffffffffffc3e5],0x26        # 0xffffcb19
  00734:    	jne    0x3c08b
  0073a: 00 	mov    r9,0x0
  00741:    	sub    rsp,0x60
  00745:    	movq   QWORD PTR [rsp],xmm2
  0074a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00750:    	movq   QWORD PTR [rsp+0x10],xmm4
  00756:    	movq   QWORD PTR [rsp+0x18],xmm5
  0075c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00762:    	movq   QWORD PTR [rsp+0x28],xmm7
  00768: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0076f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00776: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0077d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00784: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0078b:    	mov    rdx,rdi
  0078e:    	mov    rax,QWORD PTR [rbx]
  00791:    	lea    rdi,[rsp-0x18]
  00796:    	mov    QWORD PTR [rdi],rax
  00799:    	mov    QWORD PTR [rbx],rdi
  0079c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007a5:    	mov    QWORD PTR [rsp-0x38],rcx
  007aa: ff 	lea    rcx,[rbp-0xb0]
  007b1: 00 	mov    r8,0x3
  007b8:    	call   0x3c104
  007bd:    	lea    rdi,[rbp-0x8]
  007c1:    	mov    QWORD PTR [rbx],rdi
  007c4:    	movq   xmm2,QWORD PTR [rsp]
  007c9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007cf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007d5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  007db:    	movq   xmm6,QWORD PTR [rsp+0x20]
  007e1:    	movq   xmm7,QWORD PTR [rsp+0x28]
  007e7: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  007ee: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  007f5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  007fc: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00803: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0080a:    	add    rsp,0x60
  0080e: 3a 	movabs r13,0x563a6092cf90
  00818:    	test   rax,rax
  0081b:    	je     0xffffa13c
  00821: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00063 %16 = %10
  00828:    	mov    rax,QWORD PTR [rbp-0x78]
  0082c: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00064 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
:00065 
  00833: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0083a: 00 	test   rdi,0x7
  00841:    	jne    0x3c136
  00847:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0084b:    	jne    0x3c136
  00851: 26 	cmp    DWORD PTR [rip+0xffffffffffffc2c1],0x26        # 0xffffcb19
  00858:    	jne    0x3c136
  0085e: 00 	mov    r9,0x0
  00865:    	sub    rsp,0x60
  00869:    	movq   QWORD PTR [rsp],xmm2
  0086e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00874:    	movq   QWORD PTR [rsp+0x10],xmm4
  0087a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00880:    	movq   QWORD PTR [rsp+0x20],xmm6
  00886:    	movq   QWORD PTR [rsp+0x28],xmm7
  0088c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00893: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0089a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  008a1: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  008a8: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  008af:    	mov    rdx,rdi
  008b2:    	mov    rax,QWORD PTR [rbx]
  008b5:    	lea    rdi,[rsp-0x18]
  008ba:    	mov    QWORD PTR [rdi],rax
  008bd:    	mov    QWORD PTR [rbx],rdi
  008c0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008c9:    	mov    QWORD PTR [rsp-0x38],rcx
  008ce: ff 	lea    rcx,[rbp-0xa0]
  008d5: 00 	mov    r8,0x2
  008dc:    	call   0x3c1af
  008e1:    	lea    rdi,[rbp-0x8]
  008e5:    	mov    QWORD PTR [rbx],rdi
  008e8:    	movq   xmm2,QWORD PTR [rsp]
  008ed:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008f3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008f9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008ff:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00905:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0090b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00912: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00919: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00920: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00927: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0092e:    	add    rsp,0x60
  00932: 3a 	movabs r13,0x563a6092cfd0
  0093c:    	test   rax,rax
  0093f:    	je     0xffffa13c
  00945:    	mov    QWORD PTR [rbp-0x80],rax
:00067 %14 = const[Isect]                   [Isect]
  00949: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc1d1]        # 0xffffcb21
  00950: 00 	cmp    rax,QWORD PTR [rip+0x195a]        # 0x22b1
  00957:    	jne    0x3c1e1
  0095d: 00 	mov    rax,QWORD PTR [rip+0x193d]        # 0x22a1
  00964: ff 	mov    QWORD PTR [rbp-0x98],rax
:00068 %12 = %14.call new()                 [#<Class:Isect>]
:00069 
  0096b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00972: 00 	test   rdi,0x7
  00979:    	jne    0x3c2bb
  0097f:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00983:    	jne    0x3c2bb
  00989: 26 	cmp    DWORD PTR [rip+0xffffffffffffc189],0x26        # 0xffffcb19
  00990:    	jne    0x3c2bb
  00996: 00 	mov    r9,0x0
  0099d:    	sub    rsp,0x60
  009a1:    	movq   QWORD PTR [rsp],xmm2
  009a6:    	movq   QWORD PTR [rsp+0x8],xmm3
  009ac:    	movq   QWORD PTR [rsp+0x10],xmm4
  009b2:    	movq   QWORD PTR [rsp+0x18],xmm5
  009b8:    	movq   QWORD PTR [rsp+0x20],xmm6
  009be:    	movq   QWORD PTR [rsp+0x28],xmm7
  009c4: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  009cb: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  009d2: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  009d9: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  009e0: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  009e7:    	mov    rdx,rdi
  009ea:    	mov    rax,QWORD PTR [rbx]
  009ed:    	lea    rdi,[rsp-0x18]
  009f2:    	mov    QWORD PTR [rdi],rax
  009f5:    	mov    QWORD PTR [rbx],rdi
  009f8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a01:    	mov    QWORD PTR [rsp-0x38],rcx
  00a06: ff 	lea    rcx,[rbp-0xa0]
  00a0d: 00 	mov    r8,0x0
  00a14:    	call   0x3c334
  00a19:    	lea    rdi,[rbp-0x8]
  00a1d:    	mov    QWORD PTR [rbx],rdi
  00a20:    	movq   xmm2,QWORD PTR [rsp]
  00a25:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a2b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a31:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a37:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00a3d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00a43: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00a4a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00a51: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00a58: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00a5f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a66:    	add    rsp,0x60
  00a6a: 3a 	movabs r13,0x563a6092d010
  00a74:    	test   rax,rax
  00a77:    	je     0xffffa13c
  00a7d: ff 	mov    QWORD PTR [rbp-0x88],rax
:00071 %14 = @spheres: Scene[IvarId(0)]
  00a84:    	mov    rdi,QWORD PTR [rbp-0x28]
  00a88:    	xor    rax,rax
  00a8b:    	mov    ax,WORD PTR [rdi+0x2]
  00a8f:    	cmp    rax,0x3
  00a93:    	jne    0x3c366
  00a99:    	mov    rax,QWORD PTR [rdi+0x10]
  00a9d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 %15 = 0: i32
  00aa4: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00073 %14 = %14.[%15]
  00aaf:    	sub    rsp,0x60
  00ab3:    	movq   QWORD PTR [rsp],xmm2
  00ab8:    	movq   QWORD PTR [rsp+0x8],xmm3
  00abe:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ac4:    	movq   QWORD PTR [rsp+0x18],xmm5
  00aca:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ad0:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ad6: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00add: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00ae4: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00aeb: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00af2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00af9: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00b00: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00b07:    	mov    rdi,rbx
  00b0a:    	mov    rsi,r12
  00b0d: 3a 	movabs rax,0x563a5fe90750
  00b17:    	call   rax
  00b19:    	movq   xmm2,QWORD PTR [rsp]
  00b1e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b24:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b2a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b30:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b36:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b3c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b43: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b4a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b51: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b58: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b5f:    	add    rsp,0x60
  00b63: 3a 	movabs r13,0x563a6092d050
  00b6d:    	test   rax,rax
  00b70:    	je     0xffffa13c
  00b76: ff 	mov    QWORD PTR [rbp-0x98],rax
:00074 %15 = %11
  00b7d:    	mov    rax,QWORD PTR [rbp-0x80]
  00b81: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00075 %16 = %12
  00b88: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00b8f: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00076 _ = %14.call intersect(%15; 2)       [Sphere]
:00077 
  00b96: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00b9d: 00 	test   rdi,0x7
  00ba4:    	jne    0x3c410
  00baa:    	cmp    DWORD PTR [rdi+0x4],0x27
  00bae:    	jne    0x3c410
  00bb4: 26 	cmp    DWORD PTR [rip+0xffffffffffffbf5e],0x26        # 0xffffcb19
  00bbb:    	jne    0x3c410
  00bc1:    	sub    rsp,0x60
  00bc5:    	movq   QWORD PTR [rsp],xmm2
  00bca:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bd0:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bd6:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bdc:    	movq   QWORD PTR [rsp+0x20],xmm6
  00be2:    	movq   QWORD PTR [rsp+0x28],xmm7
  00be8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00bef: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00bf6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00bfd: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00c04: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00c0b:    	mov    rax,QWORD PTR [rbx]
  00c0e:    	lea    rdi,[rsp-0x18]
  00c13:    	mov    QWORD PTR [rdi],rax
  00c16:    	mov    QWORD PTR [rbx],rdi
  00c19: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c22:    	mov    QWORD PTR [rsp-0x38],rcx
  00c27: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00c2e:    	mov    QWORD PTR [rsp-0x38],rax
  00c33: 00 	mov    rdi,0x2
  00c3a: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00c41:    	mov    QWORD PTR [rsp-0x40],rax
  00c46: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00c4d:    	mov    QWORD PTR [rsp-0x48],rax
  00c52: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c5b: 10 	movabs rax,0x100000003f
  00c65:    	mov    QWORD PTR [rsp-0x28],rax
  00c6a: 3a 	movabs r13,0x563a608e6640
  00c74:    	call   0xffffd6f4
  00c79:    	lea    rdi,[rbp-0x8]
  00c7d:    	mov    QWORD PTR [rbx],rdi
  00c80:    	movq   xmm2,QWORD PTR [rsp]
  00c85:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c8b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c91:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c97:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c9d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00ca3: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00caa: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00cb1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00cb8: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00cbf: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00cc6:    	add    rsp,0x60
  00cca: 3a 	movabs r13,0x563a6092d090
  00cd4:    	test   rax,rax
  00cd7:    	je     0xffffa13c
:00079 %14 = @spheres: Scene[IvarId(0)]
  00cdd:    	mov    rdi,QWORD PTR [rbp-0x28]
  00ce1:    	xor    rax,rax
  00ce4:    	mov    ax,WORD PTR [rdi+0x2]
  00ce8:    	cmp    rax,0x3
  00cec:    	jne    0x3c489
  00cf2:    	mov    rax,QWORD PTR [rdi+0x10]
  00cf6: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 %15 = 1: i32
  00cfd: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00081 %14 = %14.[%15]
  00d08:    	sub    rsp,0x60
  00d0c:    	movq   QWORD PTR [rsp],xmm2
  00d11:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d17:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d1d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d23:    	movq   QWORD PTR [rsp+0x20],xmm6
  00d29:    	movq   QWORD PTR [rsp+0x28],xmm7
  00d2f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00d36: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00d3d: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00d44: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00d4b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00d52: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00d59: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00d60:    	mov    rdi,rbx
  00d63:    	mov    rsi,r12
  00d66: 3a 	movabs rax,0x563a5fe90750
  00d70:    	call   rax
  00d72:    	movq   xmm2,QWORD PTR [rsp]
  00d77:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d7d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d83:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d89:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d8f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d95: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00d9c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00da3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00daa: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00db1: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00db8:    	add    rsp,0x60
  00dbc: 3a 	movabs r13,0x563a6092d0d0
  00dc6:    	test   rax,rax
  00dc9:    	je     0xffffa13c
  00dcf: ff 	mov    QWORD PTR [rbp-0x98],rax
:00082 %15 = %11
  00dd6:    	mov    rax,QWORD PTR [rbp-0x80]
  00dda: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00083 %16 = %12
  00de1: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00de8: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00084 _ = %14.call intersect(%15; 2)       [Sphere]
:00085 
  00def: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00df6: 00 	test   rdi,0x7
  00dfd:    	jne    0x3c533
  00e03:    	cmp    DWORD PTR [rdi+0x4],0x27
  00e07:    	jne    0x3c533
  00e0d: 26 	cmp    DWORD PTR [rip+0xffffffffffffbd05],0x26        # 0xffffcb19
  00e14:    	jne    0x3c533
  00e1a:    	sub    rsp,0x60
  00e1e:    	movq   QWORD PTR [rsp],xmm2
  00e23:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e29:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e2f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e35:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e3b:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e41: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e48: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e4f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e56: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e5d: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e64:    	mov    rax,QWORD PTR [rbx]
  00e67:    	lea    rdi,[rsp-0x18]
  00e6c:    	mov    QWORD PTR [rdi],rax
  00e6f:    	mov    QWORD PTR [rbx],rdi
  00e72: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e7b:    	mov    QWORD PTR [rsp-0x38],rcx
  00e80: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00e87:    	mov    QWORD PTR [rsp-0x38],rax
  00e8c: 00 	mov    rdi,0x2
  00e93: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00e9a:    	mov    QWORD PTR [rsp-0x40],rax
  00e9f: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00ea6:    	mov    QWORD PTR [rsp-0x48],rax
  00eab: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00eb4: 10 	movabs rax,0x100000003f
  00ebe:    	mov    QWORD PTR [rsp-0x28],rax
  00ec3: 3a 	movabs r13,0x563a608e6640
  00ecd:    	call   0xffffd6f4
  00ed2:    	lea    rdi,[rbp-0x8]
  00ed6:    	mov    QWORD PTR [rbx],rdi
  00ed9:    	movq   xmm2,QWORD PTR [rsp]
  00ede:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ee4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00eea:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ef0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ef6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00efc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00f03: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00f0a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00f11: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00f18: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00f1f:    	add    rsp,0x60
  00f23: 3a 	movabs r13,0x563a6092d110
  00f2d:    	test   rax,rax
  00f30:    	je     0xffffa13c
:00087 %14 = @spheres: Scene[IvarId(0)]
  00f36:    	mov    rdi,QWORD PTR [rbp-0x28]
  00f3a:    	xor    rax,rax
  00f3d:    	mov    ax,WORD PTR [rdi+0x2]
  00f41:    	cmp    rax,0x3
  00f45:    	jne    0x3c5ac
  00f4b:    	mov    rax,QWORD PTR [rdi+0x10]
  00f4f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00088 %15 = 2: i32
  00f56: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00089 %14 = %14.[%15]
  00f61:    	sub    rsp,0x60
  00f65:    	movq   QWORD PTR [rsp],xmm2
  00f6a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f70:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f76:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f7c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f82:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f88: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f8f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f96: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f9d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00fa4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00fab: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00fb2: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00fb9:    	mov    rdi,rbx
  00fbc:    	mov    rsi,r12
  00fbf: 3a 	movabs rax,0x563a5fe90750
  00fc9:    	call   rax
  00fcb:    	movq   xmm2,QWORD PTR [rsp]
  00fd0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fd6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fdc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00fe2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00fe8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00fee: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00ff5: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00ffc: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01003: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0100a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01011:    	add    rsp,0x60
  01015: 3a 	movabs r13,0x563a6092d150
  0101f:    	test   rax,rax
  01022:    	je     0xffffa13c
  01028: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %15 = %11
  0102f:    	mov    rax,QWORD PTR [rbp-0x80]
  01033: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00091 %16 = %12
  0103a: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01041: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00092 _ = %14.call intersect(%15; 2)       [Sphere]
:00093 
  01048: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0104f: 00 	test   rdi,0x7
  01056:    	jne    0x3c656
  0105c:    	cmp    DWORD PTR [rdi+0x4],0x27
  01060:    	jne    0x3c656
  01066: 26 	cmp    DWORD PTR [rip+0xffffffffffffbaac],0x26        # 0xffffcb19
  0106d:    	jne    0x3c656
  01073:    	sub    rsp,0x60
  01077:    	movq   QWORD PTR [rsp],xmm2
  0107c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01082:    	movq   QWORD PTR [rsp+0x10],xmm4
  01088:    	movq   QWORD PTR [rsp+0x18],xmm5
  0108e:    	movq   QWORD PTR [rsp+0x20],xmm6
  01094:    	movq   QWORD PTR [rsp+0x28],xmm7
  0109a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  010a1: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  010a8: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  010af: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  010b6: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  010bd:    	mov    rax,QWORD PTR [rbx]
  010c0:    	lea    rdi,[rsp-0x18]
  010c5:    	mov    QWORD PTR [rdi],rax
  010c8:    	mov    QWORD PTR [rbx],rdi
  010cb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010d4:    	mov    QWORD PTR [rsp-0x38],rcx
  010d9: ff 	mov    rax,QWORD PTR [rbp-0x98]
  010e0:    	mov    QWORD PTR [rsp-0x38],rax
  010e5: 00 	mov    rdi,0x2
  010ec: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  010f3:    	mov    QWORD PTR [rsp-0x40],rax
  010f8: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  010ff:    	mov    QWORD PTR [rsp-0x48],rax
  01104: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0110d: 10 	movabs rax,0x100000003f
  01117:    	mov    QWORD PTR [rsp-0x28],rax
  0111c: 3a 	movabs r13,0x563a608e6640
  01126:    	call   0xffffd6f4
  0112b:    	lea    rdi,[rbp-0x8]
  0112f:    	mov    QWORD PTR [rbx],rdi
  01132:    	movq   xmm2,QWORD PTR [rsp]
  01137:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0113d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01143:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01149:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0114f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01155: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0115c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01163: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0116a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01171: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01178:    	add    rsp,0x60
  0117c: 3a 	movabs r13,0x563a6092d190
  01186:    	test   rax,rax
  01189:    	je     0xffffa13c
:00095 %14 = @plane: Scene[IvarId(1)]
  0118f:    	mov    rdi,QWORD PTR [rbp-0x28]
  01193:    	xor    rax,rax
  01196:    	mov    ax,WORD PTR [rdi+0x2]
  0119a:    	cmp    rax,0x3
  0119e:    	jne    0x3c6cf
  011a4:    	mov    rax,QWORD PTR [rdi+0x18]
  011a8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00096 %15 = %11
  011af:    	mov    rax,QWORD PTR [rbp-0x80]
  011b3: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00097 %16 = %12
  011ba: ff 	mov    rax,QWORD PTR [rbp-0x88]
  011c1: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00098 _ = %14.call intersect(%15; 2)       [Plane]
:00099 
  011c8: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  011cf: 00 	test   rdi,0x7
  011d6:    	jne    0x3c779
  011dc:    	cmp    DWORD PTR [rdi+0x4],0x29
  011e0:    	jne    0x3c779
  011e6: 26 	cmp    DWORD PTR [rip+0xffffffffffffb92c],0x26        # 0xffffcb19
  011ed:    	jne    0x3c779
  011f3:    	sub    rsp,0x60
  011f7:    	movq   QWORD PTR [rsp],xmm2
  011fc:    	movq   QWORD PTR [rsp+0x8],xmm3
  01202:    	movq   QWORD PTR [rsp+0x10],xmm4
  01208:    	movq   QWORD PTR [rsp+0x18],xmm5
  0120e:    	movq   QWORD PTR [rsp+0x20],xmm6
  01214:    	movq   QWORD PTR [rsp+0x28],xmm7
  0121a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01221: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01228: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0122f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01236: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0123d:    	mov    rax,QWORD PTR [rbx]
  01240:    	lea    rdi,[rsp-0x18]
  01245:    	mov    QWORD PTR [rdi],rax
  01248:    	mov    QWORD PTR [rbx],rdi
  0124b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01254:    	mov    QWORD PTR [rsp-0x38],rcx
  01259: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01260:    	mov    QWORD PTR [rsp-0x38],rax
  01265: 00 	mov    rdi,0x2
  0126c: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01273:    	mov    QWORD PTR [rsp-0x40],rax
  01278: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  0127f:    	mov    QWORD PTR [rsp-0x48],rax
  01284: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0128d: 0e 	movabs rax,0xe00000041
  01297:    	mov    QWORD PTR [rsp-0x28],rax
  0129c: 3a 	movabs r13,0x563a608e84e0
  012a6:    	call   0xffffdd05
  012ab:    	lea    rdi,[rbp-0x8]
  012af:    	mov    QWORD PTR [rbx],rdi
  012b2:    	movq   xmm2,QWORD PTR [rsp]
  012b7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  012bd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  012c3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  012c9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  012cf:    	movq   xmm7,QWORD PTR [rsp+0x28]
  012d5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  012dc: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  012e3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  012ea: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  012f1: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  012f8:    	add    rsp,0x60
  012fc: 3a 	movabs r13,0x563a6092d1f0
  01306:    	test   rax,rax
  01309:    	je     0xffffa13c
:00101 %14 = %12.call hit()                 [Isect]
:00102 
  0130f: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01316: 00 	test   rdi,0x7
  0131d:    	jne    0x3c7f2
  01323:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01327:    	jne    0x3c7f2
  0132d: 26 	cmp    DWORD PTR [rip+0xffffffffffffb7e5],0x26        # 0xffffcb19
  01334:    	jne    0x3c7f2
  0133a:    	mov    esi,DWORD PTR [rip+0xf7d]        # 0x22bd
  01340:    	cmp    esi,0xffffffff
  01343:    	je     0x3c86b
  01349:    	xor    rax,rax
  0134c:    	mov    ax,WORD PTR [rdi+0x2]
  01350:    	cmp    rax,0x3
  01354:    	jne    0x136d
  0135a:    	cmp    esi,0x6
  0135d:    	jge    0x136d
  01363:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01368:    	jmp    0x140d
  0136d:    	sub    rsp,0x60
  01371:    	movq   QWORD PTR [rsp],xmm2
  01376:    	movq   QWORD PTR [rsp+0x8],xmm3
  0137c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01382:    	movq   QWORD PTR [rsp+0x18],xmm5
  01388:    	movq   QWORD PTR [rsp+0x20],xmm6
  0138e:    	movq   QWORD PTR [rsp+0x28],xmm7
  01394: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0139b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  013a2: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  013a9: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  013b0: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  013b7: 3a 	movabs rax,0x563a5fe35570
  013c1:    	call   rax
  013c3:    	movq   xmm2,QWORD PTR [rsp]
  013c8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013ce:    	movq   xmm4,QWORD PTR [rsp+0x10]
  013d4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  013da:    	movq   xmm6,QWORD PTR [rsp+0x20]
  013e0:    	movq   xmm7,QWORD PTR [rsp+0x28]
  013e6: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  013ed: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  013f4: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  013fb: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01402: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01409:    	add    rsp,0x60
  0140d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00104 condnotbr %14 =>:00147
  01414: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0141b:    	or     rax,0x10
  0141f:    	cmp    rax,0x14
  01423:    	je     0x2192
:00105 %14 = %12
  01429: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01430: ff 	mov    QWORD PTR [rbp-0x98],rax
:00106 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
:00107 
  01437:    	sub    rsp,0x60
  0143b:    	movq   QWORD PTR [rsp],xmm2
  01440:    	movq   QWORD PTR [rsp+0x8],xmm3
  01446:    	movq   QWORD PTR [rsp+0x10],xmm4
  0144c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01452:    	movq   QWORD PTR [rsp+0x20],xmm6
  01458:    	movq   QWORD PTR [rsp+0x28],xmm7
  0145e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01465: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0146c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01473: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0147a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01481:    	mov    r15d,0x2f
  01487: 00 	cmp    r15d,DWORD PTR [rip+0xe37]        # 0x22c5
  0148e:    	jne    0x3c928
  01494:    	mov    eax,DWORD PTR [rip+0xffffffffffffb67f]        # 0xffffcb19
  0149a:    	cmp    DWORD PTR [rip+0xe21],eax        # 0x22c1
  014a0:    	jne    0x3c928
  014a6:    	mov    rax,QWORD PTR [rbx]
  014a9:    	lea    rdi,[rsp-0x18]
  014ae:    	mov    QWORD PTR [rdi],rax
  014b1:    	mov    QWORD PTR [rbx],rdi
  014b4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014bd:    	mov    QWORD PTR [rsp-0x38],rcx
  014c2:    	mov    rax,QWORD PTR [rbp-0x28]
  014c6:    	mov    QWORD PTR [rsp-0x38],rax
  014cb: 00 	mov    rdi,0x1
  014d2: ff 	mov    rax,QWORD PTR [rbp-0x98]
  014d9:    	mov    QWORD PTR [rsp-0x40],rax
  014de: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014e7: 00 	movabs rax,0x0
  014f1:    	mov    QWORD PTR [rsp-0x28],rax
  014f6: 00 	movabs r13,0x0
  01500:    	call   0xffffa101
  01505:    	lea    rdi,[rbp-0x8]
  01509:    	mov    QWORD PTR [rbx],rdi
  0150c:    	movq   xmm2,QWORD PTR [rsp]
  01511:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01517:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0151d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01523:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01529:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0152f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01536: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0153d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01544: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0154b: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01552:    	add    rsp,0x60
  01556:    	test   rax,rax
  01559:    	je     0x3c994
  0155f: ff 	mov    QWORD PTR [rbp-0x90],rax
:00109 %14 = dynvar(2, %2)
  01566:    	mov    rax,QWORD PTR [rbp-0x10]
  0156a:    	mov    rax,QWORD PTR [rax]
  0156d:    	mov    rax,QWORD PTR [rax-0x28]
  01571: ff 	mov    QWORD PTR [rbp-0x98],rax
:00110 %16 = dynvar(2, %2)
  01578:    	mov    rax,QWORD PTR [rbp-0x10]
  0157c:    	mov    rax,QWORD PTR [rax]
  0157f:    	mov    rax,QWORD PTR [rax-0x28]
  01583: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00111 %15 = %16.call x()                   [<INVALID>]
:00112 
  0158a:    	sub    rsp,0x60
  0158e:    	movq   QWORD PTR [rsp],xmm2
  01593:    	movq   QWORD PTR [rsp+0x8],xmm3
  01599:    	movq   QWORD PTR [rsp+0x10],xmm4
  0159f:    	movq   QWORD PTR [rsp+0x18],xmm5
  015a5:    	movq   QWORD PTR [rsp+0x20],xmm6
  015ab:    	movq   QWORD PTR [rsp+0x28],xmm7
  015b1: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015b8: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015bf: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  015c6: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  015cd: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  015d4: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  015db: 3a 	movabs rax,0x563a5fe2d010
  015e5:    	call   rax
  015e7:    	mov    r15d,eax
  015ea: 00 	cmp    r15d,DWORD PTR [rip+0xcdc]        # 0x22cd
  015f1:    	jne    0x3c9a3
  015f7:    	mov    eax,DWORD PTR [rip+0xffffffffffffb51c]        # 0xffffcb19
  015fd:    	cmp    DWORD PTR [rip+0xcc6],eax        # 0x22c9
  01603:    	jne    0x3c9a3
  01609:    	mov    rax,QWORD PTR [rbx]
  0160c:    	lea    rdi,[rsp-0x18]
  01611:    	mov    QWORD PTR [rdi],rax
  01614:    	mov    QWORD PTR [rbx],rdi
  01617: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01620:    	mov    QWORD PTR [rsp-0x38],rcx
  01625: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  0162c:    	mov    QWORD PTR [rsp-0x38],rax
  01631: 00 	mov    rdi,0x0
  01638: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01641: 00 	movabs rax,0x0
  0164b:    	mov    QWORD PTR [rsp-0x28],rax
  01650: 00 	movabs r13,0x0
  0165a:    	call   0xffffa101
  0165f:    	lea    rdi,[rbp-0x8]
  01663:    	mov    QWORD PTR [rbx],rdi
  01666:    	movq   xmm2,QWORD PTR [rsp]
  0166b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01671:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01677:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0167d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01683:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01689: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01690: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01697: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0169e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  016a5: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  016ac:    	add    rsp,0x60
  016b0:    	test   rax,rax
  016b3:    	je     0x3ca12
  016b9: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00114 %16 = %13.call x()                   [<INVALID>]
:00115 
  016c0:    	sub    rsp,0x60
  016c4:    	movq   QWORD PTR [rsp],xmm2
  016c9:    	movq   QWORD PTR [rsp+0x8],xmm3
  016cf:    	movq   QWORD PTR [rsp+0x10],xmm4
  016d5:    	movq   QWORD PTR [rsp+0x18],xmm5
  016db:    	movq   QWORD PTR [rsp+0x20],xmm6
  016e1:    	movq   QWORD PTR [rsp+0x28],xmm7
  016e7: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  016ee: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  016f5: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  016fc: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01703: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0170a: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01711: 3a 	movabs rax,0x563a5fe2d010
  0171b:    	call   rax
  0171d:    	mov    r15d,eax
  01720: 00 	cmp    r15d,DWORD PTR [rip+0xbae]        # 0x22d5
  01727:    	jne    0x3ca21
  0172d:    	mov    eax,DWORD PTR [rip+0xffffffffffffb3e6]        # 0xffffcb19
  01733:    	cmp    DWORD PTR [rip+0xb98],eax        # 0x22d1
  01739:    	jne    0x3ca21
  0173f:    	mov    rax,QWORD PTR [rbx]
  01742:    	lea    rdi,[rsp-0x18]
  01747:    	mov    QWORD PTR [rdi],rax
  0174a:    	mov    QWORD PTR [rbx],rdi
  0174d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01756:    	mov    QWORD PTR [rsp-0x38],rcx
  0175b: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01762:    	mov    QWORD PTR [rsp-0x38],rax
  01767: 00 	mov    rdi,0x0
  0176e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01777: 00 	movabs rax,0x0
  01781:    	mov    QWORD PTR [rsp-0x28],rax
  01786: 00 	movabs r13,0x0
  01790:    	call   0xffffa101
  01795:    	lea    rdi,[rbp-0x8]
  01799:    	mov    QWORD PTR [rbx],rdi
  0179c:    	movq   xmm2,QWORD PTR [rsp]
  017a1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  017a7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  017ad:    	movq   xmm5,QWORD PTR [rsp+0x18]
  017b3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  017b9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  017bf: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  017c6: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  017cd: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  017d4: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  017db: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  017e2:    	add    rsp,0x60
  017e6:    	test   rax,rax
  017e9:    	je     0x3ca90
  017ef: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00117 %15 = %15 + %16                      [Integer][Integer]
  017f6: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  017fd: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  01804: 00 	test   rdi,0x1
  0180b:    	je     0x3ca9f
  01811: 00 	test   rsi,0x1
  01818:    	je     0x3ca9f
  0181e:    	sub    rdi,0x1
  01822:    	add    rdi,rsi
  01825:    	jo     0x3ca9f
  0182b: ff 	mov    QWORD PTR [rbp-0xa0],rdi
:00118 _ = %14.call x=(%15; 1)              [<INVALID>]
:00119 
  01832:    	sub    rsp,0x60
  01836:    	movq   QWORD PTR [rsp],xmm2
  0183b:    	movq   QWORD PTR [rsp+0x8],xmm3
  01841:    	movq   QWORD PTR [rsp+0x10],xmm4
  01847:    	movq   QWORD PTR [rsp+0x18],xmm5
  0184d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01853:    	movq   QWORD PTR [rsp+0x28],xmm7
  01859: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01860: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01867: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0186e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01875: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0187c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01883: 3a 	movabs rax,0x563a5fe2d010
  0188d:    	call   rax
  0188f:    	mov    r15d,eax
  01892: 00 	cmp    r15d,DWORD PTR [rip+0xa44]        # 0x22dd
  01899:    	jne    0x3cb18
  0189f:    	mov    eax,DWORD PTR [rip+0xffffffffffffb274]        # 0xffffcb19
  018a5:    	cmp    DWORD PTR [rip+0xa2e],eax        # 0x22d9
  018ab:    	jne    0x3cb18
  018b1:    	mov    rax,QWORD PTR [rbx]
  018b4:    	lea    rdi,[rsp-0x18]
  018b9:    	mov    QWORD PTR [rdi],rax
  018bc:    	mov    QWORD PTR [rbx],rdi
  018bf: 00 	mov    QWORD PTR [rsp-0x20],0x0
  018c8:    	mov    QWORD PTR [rsp-0x38],rcx
  018cd: ff 	mov    rax,QWORD PTR [rbp-0x98]
  018d4:    	mov    QWORD PTR [rsp-0x38],rax
  018d9: 00 	mov    rdi,0x1
  018e0: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  018e7:    	mov    QWORD PTR [rsp-0x40],rax
  018ec: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018f5: 00 	movabs rax,0x0
  018ff:    	mov    QWORD PTR [rsp-0x28],rax
  01904: 00 	movabs r13,0x0
  0190e:    	call   0xffffa101
  01913:    	lea    rdi,[rbp-0x8]
  01917:    	mov    QWORD PTR [rbx],rdi
  0191a:    	movq   xmm2,QWORD PTR [rsp]
  0191f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01925:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0192b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01931:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01937:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0193d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01944: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0194b: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01952: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01959: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01960:    	add    rsp,0x60
  01964:    	test   rax,rax
  01967:    	je     0x3cb87
:00121 %14 = dynvar(2, %2)
  0196d:    	mov    rax,QWORD PTR [rbp-0x10]
  01971:    	mov    rax,QWORD PTR [rax]
  01974:    	mov    rax,QWORD PTR [rax-0x28]
  01978: ff 	mov    QWORD PTR [rbp-0x98],rax
:00122 %16 = dynvar(2, %2)
  0197f:    	mov    rax,QWORD PTR [rbp-0x10]
  01983:    	mov    rax,QWORD PTR [rax]
  01986:    	mov    rax,QWORD PTR [rax-0x28]
  0198a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00123 %15 = %16.call y()                   [<INVALID>]
:00124 
  01991:    	sub    rsp,0x60
  01995:    	movq   QWORD PTR [rsp],xmm2
  0199a:    	movq   QWORD PTR [rsp+0x8],xmm3
  019a0:    	movq   QWORD PTR [rsp+0x10],xmm4
  019a6:    	movq   QWORD PTR [rsp+0x18],xmm5
  019ac:    	movq   QWORD PTR [rsp+0x20],xmm6
  019b2:    	movq   QWORD PTR [rsp+0x28],xmm7
  019b8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  019bf: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  019c6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  019cd: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  019d4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  019db: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  019e2: 3a 	movabs rax,0x563a5fe2d010
  019ec:    	call   rax
  019ee:    	mov    r15d,eax
  019f1: 00 	cmp    r15d,DWORD PTR [rip+0x8ed]        # 0x22e5
  019f8:    	jne    0x3cb96
  019fe:    	mov    eax,DWORD PTR [rip+0xffffffffffffb115]        # 0xffffcb19
  01a04:    	cmp    DWORD PTR [rip+0x8d7],eax        # 0x22e1
  01a0a:    	jne    0x3cb96
  01a10:    	mov    rax,QWORD PTR [rbx]
  01a13:    	lea    rdi,[rsp-0x18]
  01a18:    	mov    QWORD PTR [rdi],rax
  01a1b:    	mov    QWORD PTR [rbx],rdi
  01a1e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a27:    	mov    QWORD PTR [rsp-0x38],rcx
  01a2c: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01a33:    	mov    QWORD PTR [rsp-0x38],rax
  01a38: 00 	mov    rdi,0x0
  01a3f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a48: 00 	movabs rax,0x0
  01a52:    	mov    QWORD PTR [rsp-0x28],rax
  01a57: 00 	movabs r13,0x0
  01a61:    	call   0xffffa101
  01a66:    	lea    rdi,[rbp-0x8]
  01a6a:    	mov    QWORD PTR [rbx],rdi
  01a6d:    	movq   xmm2,QWORD PTR [rsp]
  01a72:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01a78:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01a7e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01a84:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01a8a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01a90: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01a97: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01a9e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01aa5: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01aac: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01ab3:    	add    rsp,0x60
  01ab7:    	test   rax,rax
  01aba:    	je     0x3cc05
  01ac0: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00126 %16 = %13.call y()                   [<INVALID>]
:00127 
  01ac7:    	sub    rsp,0x60
  01acb:    	movq   QWORD PTR [rsp],xmm2
  01ad0:    	movq   QWORD PTR [rsp+0x8],xmm3
  01ad6:    	movq   QWORD PTR [rsp+0x10],xmm4
  01adc:    	movq   QWORD PTR [rsp+0x18],xmm5
  01ae2:    	movq   QWORD PTR [rsp+0x20],xmm6
  01ae8:    	movq   QWORD PTR [rsp+0x28],xmm7
  01aee: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01af5: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01afc: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01b03: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01b0a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01b11: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01b18: 3a 	movabs rax,0x563a5fe2d010
  01b22:    	call   rax
  01b24:    	mov    r15d,eax
  01b27: 00 	cmp    r15d,DWORD PTR [rip+0x7bf]        # 0x22ed
  01b2e:    	jne    0x3cc14
  01b34:    	mov    eax,DWORD PTR [rip+0xffffffffffffafdf]        # 0xffffcb19
  01b3a:    	cmp    DWORD PTR [rip+0x7a9],eax        # 0x22e9
  01b40:    	jne    0x3cc14
  01b46:    	mov    rax,QWORD PTR [rbx]
  01b49:    	lea    rdi,[rsp-0x18]
  01b4e:    	mov    QWORD PTR [rdi],rax
  01b51:    	mov    QWORD PTR [rbx],rdi
  01b54: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b5d:    	mov    QWORD PTR [rsp-0x38],rcx
  01b62: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01b69:    	mov    QWORD PTR [rsp-0x38],rax
  01b6e: 00 	mov    rdi,0x0
  01b75: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b7e: 00 	movabs rax,0x0
  01b88:    	mov    QWORD PTR [rsp-0x28],rax
  01b8d: 00 	movabs r13,0x0
  01b97:    	call   0xffffa101
  01b9c:    	lea    rdi,[rbp-0x8]
  01ba0:    	mov    QWORD PTR [rbx],rdi
  01ba3:    	movq   xmm2,QWORD PTR [rsp]
  01ba8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01bae:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01bb4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01bba:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01bc0:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01bc6: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01bcd: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01bd4: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01bdb: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01be2: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01be9:    	add    rsp,0x60
  01bed:    	test   rax,rax
  01bf0:    	je     0x3cc83
  01bf6: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00129 %15 = %15 + %16                      [Integer][Integer]
  01bfd: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01c04: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  01c0b: 00 	test   rdi,0x1
  01c12:    	je     0x3cc92
  01c18: 00 	test   rsi,0x1
  01c1f:    	je     0x3cc92
  01c25:    	sub    rdi,0x1
  01c29:    	add    rdi,rsi
  01c2c:    	jo     0x3cc92
  01c32: ff 	mov    QWORD PTR [rbp-0xa0],rdi
:00130 _ = %14.call y=(%15; 1)              [<INVALID>]
:00131 
  01c39:    	sub    rsp,0x60
  01c3d:    	movq   QWORD PTR [rsp],xmm2
  01c42:    	movq   QWORD PTR [rsp+0x8],xmm3
  01c48:    	movq   QWORD PTR [rsp+0x10],xmm4
  01c4e:    	movq   QWORD PTR [rsp+0x18],xmm5
  01c54:    	movq   QWORD PTR [rsp+0x20],xmm6
  01c5a:    	movq   QWORD PTR [rsp+0x28],xmm7
  01c60: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01c67: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01c6e: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01c75: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01c7c: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01c83: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01c8a: 3a 	movabs rax,0x563a5fe2d010
  01c94:    	call   rax
  01c96:    	mov    r15d,eax
  01c99: 00 	cmp    r15d,DWORD PTR [rip+0x655]        # 0x22f5
  01ca0:    	jne    0x3cd0b
  01ca6:    	mov    eax,DWORD PTR [rip+0xffffffffffffae6d]        # 0xffffcb19
  01cac:    	cmp    DWORD PTR [rip+0x63f],eax        # 0x22f1
  01cb2:    	jne    0x3cd0b
  01cb8:    	mov    rax,QWORD PTR [rbx]
  01cbb:    	lea    rdi,[rsp-0x18]
  01cc0:    	mov    QWORD PTR [rdi],rax
  01cc3:    	mov    QWORD PTR [rbx],rdi
  01cc6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01ccf:    	mov    QWORD PTR [rsp-0x38],rcx
  01cd4: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01cdb:    	mov    QWORD PTR [rsp-0x38],rax
  01ce0: 00 	mov    rdi,0x1
  01ce7: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01cee:    	mov    QWORD PTR [rsp-0x40],rax
  01cf3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01cfc: 00 	movabs rax,0x0
  01d06:    	mov    QWORD PTR [rsp-0x28],rax
  01d0b: 00 	movabs r13,0x0
  01d15:    	call   0xffffa101
  01d1a:    	lea    rdi,[rbp-0x8]
  01d1e:    	mov    QWORD PTR [rbx],rdi
  01d21:    	movq   xmm2,QWORD PTR [rsp]
  01d26:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01d2c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01d32:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01d38:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01d3e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01d44: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01d4b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01d52: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01d59: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01d60: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01d67:    	add    rsp,0x60
  01d6b:    	test   rax,rax
  01d6e:    	je     0x3cd7a
:00133 %14 = dynvar(2, %2)
  01d74:    	mov    rax,QWORD PTR [rbp-0x10]
  01d78:    	mov    rax,QWORD PTR [rax]
  01d7b:    	mov    rax,QWORD PTR [rax-0x28]
  01d7f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00134 %16 = dynvar(2, %2)
  01d86:    	mov    rax,QWORD PTR [rbp-0x10]
  01d8a:    	mov    rax,QWORD PTR [rax]
  01d8d:    	mov    rax,QWORD PTR [rax-0x28]
  01d91: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00135 %15 = %16.call z()                   [<INVALID>]
:00136 
  01d98:    	sub    rsp,0x60
  01d9c:    	movq   QWORD PTR [rsp],xmm2
  01da1:    	movq   QWORD PTR [rsp+0x8],xmm3
  01da7:    	movq   QWORD PTR [rsp+0x10],xmm4
  01dad:    	movq   QWORD PTR [rsp+0x18],xmm5
  01db3:    	movq   QWORD PTR [rsp+0x20],xmm6
  01db9:    	movq   QWORD PTR [rsp+0x28],xmm7
  01dbf: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01dc6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01dcd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01dd4: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01ddb: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01de2: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01de9: 3a 	movabs rax,0x563a5fe2d010
  01df3:    	call   rax
  01df5:    	mov    r15d,eax
  01df8: 00 	cmp    r15d,DWORD PTR [rip+0x4fe]        # 0x22fd
  01dff:    	jne    0x3cd89
  01e05:    	mov    eax,DWORD PTR [rip+0xffffffffffffad0e]        # 0xffffcb19
  01e0b:    	cmp    DWORD PTR [rip+0x4e8],eax        # 0x22f9
  01e11:    	jne    0x3cd89
  01e17:    	mov    rax,QWORD PTR [rbx]
  01e1a:    	lea    rdi,[rsp-0x18]
  01e1f:    	mov    QWORD PTR [rdi],rax
  01e22:    	mov    QWORD PTR [rbx],rdi
  01e25: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01e2e:    	mov    QWORD PTR [rsp-0x38],rcx
  01e33: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01e3a:    	mov    QWORD PTR [rsp-0x38],rax
  01e3f: 00 	mov    rdi,0x0
  01e46: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01e4f: 00 	movabs rax,0x0
  01e59:    	mov    QWORD PTR [rsp-0x28],rax
  01e5e: 00 	movabs r13,0x0
  01e68:    	call   0xffffa101
  01e6d:    	lea    rdi,[rbp-0x8]
  01e71:    	mov    QWORD PTR [rbx],rdi
  01e74:    	movq   xmm2,QWORD PTR [rsp]
  01e79:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01e7f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e85:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e8b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e91:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e97: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e9e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01ea5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01eac: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01eb3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01eba:    	add    rsp,0x60
  01ebe:    	test   rax,rax
  01ec1:    	je     0x3cdf8
  01ec7: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00138 %16 = %13.call z()                   [<INVALID>]
:00139 
  01ece:    	sub    rsp,0x60
  01ed2:    	movq   QWORD PTR [rsp],xmm2
  01ed7:    	movq   QWORD PTR [rsp+0x8],xmm3
  01edd:    	movq   QWORD PTR [rsp+0x10],xmm4
  01ee3:    	movq   QWORD PTR [rsp+0x18],xmm5
  01ee9:    	movq   QWORD PTR [rsp+0x20],xmm6
  01eef:    	movq   QWORD PTR [rsp+0x28],xmm7
  01ef5: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01efc: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01f03: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01f0a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01f11: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01f18: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01f1f: 3a 	movabs rax,0x563a5fe2d010
  01f29:    	call   rax
  01f2b:    	mov    r15d,eax
  01f2e: 00 	cmp    r15d,DWORD PTR [rip+0x3d0]        # 0x2305
  01f35:    	jne    0x3ce07
  01f3b:    	mov    eax,DWORD PTR [rip+0xffffffffffffabd8]        # 0xffffcb19
  01f41:    	cmp    DWORD PTR [rip+0x3ba],eax        # 0x2301
  01f47:    	jne    0x3ce07
  01f4d:    	mov    rax,QWORD PTR [rbx]
  01f50:    	lea    rdi,[rsp-0x18]
  01f55:    	mov    QWORD PTR [rdi],rax
  01f58:    	mov    QWORD PTR [rbx],rdi
  01f5b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01f64:    	mov    QWORD PTR [rsp-0x38],rcx
  01f69: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01f70:    	mov    QWORD PTR [rsp-0x38],rax
  01f75: 00 	mov    rdi,0x0
  01f7c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01f85: 00 	movabs rax,0x0
  01f8f:    	mov    QWORD PTR [rsp-0x28],rax
  01f94: 00 	movabs r13,0x0
  01f9e:    	call   0xffffa101
  01fa3:    	lea    rdi,[rbp-0x8]
  01fa7:    	mov    QWORD PTR [rbx],rdi
  01faa:    	movq   xmm2,QWORD PTR [rsp]
  01faf:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01fb5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01fbb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01fc1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01fc7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01fcd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01fd4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01fdb: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01fe2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01fe9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01ff0:    	add    rsp,0x60
  01ff4:    	test   rax,rax
  01ff7:    	je     0x3ce76
  01ffd: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00141 %15 = %15 + %16                      [Integer][Integer]
  02004: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0200b: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  02012: 00 	test   rdi,0x1
  02019:    	je     0x3ce85
  0201f: 00 	test   rsi,0x1
  02026:    	je     0x3ce85
  0202c:    	sub    rdi,0x1
  02030:    	add    rdi,rsi
  02033:    	jo     0x3ce85
  02039: ff 	mov    QWORD PTR [rbp-0xa0],rdi
:00142 _ = %14.call z=(%15; 1)              [<INVALID>]
:00143 
  02040:    	sub    rsp,0x60
  02044:    	movq   QWORD PTR [rsp],xmm2
  02049:    	movq   QWORD PTR [rsp+0x8],xmm3
  0204f:    	movq   QWORD PTR [rsp+0x10],xmm4
  02055:    	movq   QWORD PTR [rsp+0x18],xmm5
  0205b:    	movq   QWORD PTR [rsp+0x20],xmm6
  02061:    	movq   QWORD PTR [rsp+0x28],xmm7
  02067: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0206e: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02075: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0207c: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02083: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0208a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  02091: 3a 	movabs rax,0x563a5fe2d010
  0209b:    	call   rax
  0209d:    	mov    r15d,eax
  020a0: 00 	cmp    r15d,DWORD PTR [rip+0x266]        # 0x230d
  020a7:    	jne    0x3cefe
  020ad:    	mov    eax,DWORD PTR [rip+0xffffffffffffaa66]        # 0xffffcb19
  020b3:    	cmp    DWORD PTR [rip+0x250],eax        # 0x2309
  020b9:    	jne    0x3cefe
  020bf:    	mov    rax,QWORD PTR [rbx]
  020c2:    	lea    rdi,[rsp-0x18]
  020c7:    	mov    QWORD PTR [rdi],rax
  020ca:    	mov    QWORD PTR [rbx],rdi
  020cd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  020d6:    	mov    QWORD PTR [rsp-0x38],rcx
  020db: ff 	mov    rax,QWORD PTR [rbp-0x98]
  020e2:    	mov    QWORD PTR [rsp-0x38],rax
  020e7: 00 	mov    rdi,0x1
  020ee: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  020f5:    	mov    QWORD PTR [rsp-0x40],rax
  020fa: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02103: 00 	movabs rax,0x0
  0210d:    	mov    QWORD PTR [rsp-0x28],rax
  02112: 00 	movabs r13,0x0
  0211c:    	call   0xffffa101
  02121:    	lea    rdi,[rbp-0x8]
  02125:    	mov    QWORD PTR [rbx],rdi
  02128:    	movq   xmm2,QWORD PTR [rsp]
  0212d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02133:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02139:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0213f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02145:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0214b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02152: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02159: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02160: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02167: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0216e:    	add    rsp,0x60
  02172:    	test   rax,rax
  02175:    	je     0x3cf6d
:00145 %14 = %15
  0217b: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02182: ff 	mov    QWORD PTR [rbp-0x98],rax
:00146 ret %14
  02189: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02190:    	leave  
  02191:    	ret    
:00147 %14 = nil
  02192: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00148 ret %14
  0219d: ff 	mov    rax,QWORD PTR [rbp-0x98]
  021a4:    	leave  
  021a5:    	ret    
==> start whole compile: vnormalize FuncId(61) self_class:Vec start:[00000] bytecode:0x563a608f6640
<== finished compile. elapsed:51.9µs
offset:Pos(33296) code: 1831 bytes  data: 97 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    QWORD PTR [rbp-0x58],rax
  00027: mov    rdi,QWORD PTR [rbp-0x28]
  0002b: test   rdi,0x7
  00032: jne    0x3ac6b
  00038: cmp    DWORD PTR [rdi+0x4],0x25
  0003c: jne    0x3ac6b
:00000 %3 = %0.call vlength()               [Vec]
:00001 
  00042: mov    rdi,QWORD PTR [rbp-0x28]
  00046: cmp    DWORD PTR [rip+0xffffffffffffa7bb],0x26        # 0xffffa808
  0004d: jne    0x3ac7a
  00053: mov    rax,QWORD PTR [rbx]
  00056: lea    rdi,[rsp-0x18]
  0005b: mov    QWORD PTR [rdi],rax
  0005e: mov    QWORD PTR [rbx],rdi
  00061: mov    QWORD PTR [rsp-0x20],0x0
  0006a: mov    QWORD PTR [rsp-0x38],rcx
  0006f: mov    rax,QWORD PTR [rbp-0x28]
  00073: mov    QWORD PTR [rsp-0x38],rax
  00078: mov    rdi,0x0
  0007f: mov    QWORD PTR [rsp-0x30],0x0
  00088: movabs rax,0x60000003c
  00092: mov    QWORD PTR [rsp-0x28],rax
  00097: movabs r13,0x563a608e2cd0
  000a1: call   0xffffb133
  000a6: lea    rdi,[rbp-0x8]
  000aa: mov    QWORD PTR [rbx],rdi
  000ad: movabs r13,0x563a608f6660
  000b7: test   rax,rax
  000ba: je     0xffff7e2b
  000c0: mov    QWORD PTR [rbp-0x40],rax
:00003 %1 = %3
  000c4: mov    rax,QWORD PTR [rbp-0x40]
  000c8: mov    QWORD PTR [rbp-0x30],rax
:00004 %3 = const[Vec]                      [Vec]
  000cc: mov    rax,QWORD PTR [rip+0xffffffffffffa73d]        # 0xffffa810
  000d3: cmp    rax,QWORD PTR [rip+0x666]        # 0x740
  000da: jne    0x3ac89
  000e0: mov    rax,QWORD PTR [rip+0x649]        # 0x730
  000e7: mov    QWORD PTR [rbp-0x40],rax
:00005 %4 = @x: Vec[IvarId(0)]
  000eb: mov    rdi,QWORD PTR [rbp-0x28]
  000ef: xor    rax,rax
  000f2: mov    ax,WORD PTR [rdi+0x2]
  000f6: cmp    rax,0x3
  000fa: jne    0x3accf
  00100: mov    rax,QWORD PTR [rdi+0x10]
  00104: mov    QWORD PTR [rbp-0x48],rax
:00006 %5 = @y: Vec[IvarId(1)]
  00108: mov    rdi,QWORD PTR [rbp-0x28]
  0010c: xor    rax,rax
  0010f: mov    ax,WORD PTR [rdi+0x2]
  00113: cmp    rax,0x3
  00117: jne    0x3ace5
  0011d: mov    rax,QWORD PTR [rdi+0x18]
  00121: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = @z: Vec[IvarId(2)]
  00125: mov    rdi,QWORD PTR [rbp-0x28]
  00129: xor    rax,rax
  0012c: mov    ax,WORD PTR [rdi+0x2]
  00130: cmp    rax,0x3
  00134: jne    0x3acfb
  0013a: mov    rax,QWORD PTR [rdi+0x20]
  0013e: mov    QWORD PTR [rbp-0x58],rax
:00008 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00009 
  00142: mov    rdi,QWORD PTR [rbp-0x40]
  00146: test   rdi,0x7
  0014d: jne    0x3ad11
  00153: cmp    DWORD PTR [rdi+0x4],0x26
  00157: jne    0x3ad11
  0015d: cmp    DWORD PTR [rip+0xffffffffffffa6a4],0x26        # 0xffffa808
  00164: jne    0x3ad11
  0016a: mov    r9,0x0
  00171: mov    rdx,rdi
  00174: mov    rax,QWORD PTR [rbx]
  00177: lea    rdi,[rsp-0x18]
  0017c: mov    QWORD PTR [rdi],rax
  0017f: mov    QWORD PTR [rbx],rdi
  00182: mov    QWORD PTR [rsp-0x20],0x0
  0018b: mov    QWORD PTR [rsp-0x38],rcx
  00190: lea    rcx,[rbp-0x48]
  00194: mov    r8,0x3
  0019b: call   0x3ad20
  001a0: lea    rdi,[rbp-0x8]
  001a4: mov    QWORD PTR [rbx],rdi
  001a7: movabs r13,0x563a608f66e0
  001b1: test   rax,rax
  001b4: je     0xffff7e2b
  001ba: mov    QWORD PTR [rbp-0x38],rax
:00011 %3 = literal[1e-17]
  001be: movq   xmm2,QWORD PTR [rip+0x58a]        # 0x750
:00012 _%3 = %1 > %3                        [Float][Float]
:00013 condnotbr _%3 =>:00036
  001c6: mov    rdi,QWORD PTR [rbp-0x30]
  001ca: test   rdi,0x1
  001d1: jne    0x3ad52
  001d7: test   rdi,0x2
  001de: je     0x21a
  001e4: xorps  xmm3,xmm3
  001e7: movabs rax,0x8000000000000002
  001f1: cmp    rdi,rax
  001f4: je     0x22c
  001fa: mov    rax,rdi
  001fd: sar    rax,0x3f
  00201: add    rax,0x2
  00205: and    rdi,0xfffffffffffffffc
  00209: or     rdi,rax
  0020c: rol    rdi,0x3d
  00210: movq   xmm3,rdi
  00215: jmp    0x22c
  0021a: call   0xffff7e64
  0021f: test   rax,rax
  00222: je     0x3ad52
  00228: movq   xmm3,xmm0
  0022c: ucomisd xmm3,xmm2
  00230: jbe    0x3af90
:00014 %3 = %2.call x()                     [Vec]
:00015 
  00236: mov    rdi,QWORD PTR [rbp-0x38]
  0023a: test   rdi,0x7
  00241: jne    0x3ad6e
  00247: cmp    DWORD PTR [rdi+0x4],0x25
  0024b: jne    0x3ad6e
  00251: cmp    DWORD PTR [rip+0xffffffffffffa5b0],0x26        # 0xffffa808
  00258: jne    0x3ad6e
  0025e: mov    esi,DWORD PTR [rip+0x4f8]        # 0x75c
  00264: cmp    esi,0xffffffff
  00267: je     0x3ad7d
  0026d: xor    rax,rax
  00270: mov    ax,WORD PTR [rdi+0x2]
  00274: cmp    rax,0x3
  00278: jne    0x291
  0027e: cmp    esi,0x6
  00281: jge    0x291
  00287: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0028c: jmp    0x2af
  00291: sub    rsp,0x10
  00295: movq   QWORD PTR [rsp],xmm3
  0029a: movabs rax,0x563a5fe35570
  002a4: call   rax
  002a6: movq   xmm3,QWORD PTR [rsp]
  002ab: add    rsp,0x10
  002af: mov    QWORD PTR [rbp-0x40],rax
:00017 %3 = %3 / %1                         [Float][Float]
  002b3: mov    rdi,QWORD PTR [rbp-0x40]
  002b7: test   rdi,0x1
  002be: jne    0x3adb8
  002c4: test   rdi,0x2
  002cb: je     0x307
  002d1: xorps  xmm2,xmm2
  002d4: movabs rax,0x8000000000000002
  002de: cmp    rdi,rax
  002e1: je     0x319
  002e7: mov    rax,rdi
  002ea: sar    rax,0x3f
  002ee: add    rax,0x2
  002f2: and    rdi,0xfffffffffffffffc
  002f6: or     rdi,rax
  002f9: rol    rdi,0x3d
  002fd: movq   xmm2,rdi
  00302: jmp    0x319
  00307: call   0xffff7e64
  0030c: test   rax,rax
  0030f: je     0x3adb8
  00315: movq   xmm2,xmm0
  00319: movq   rax,xmm3
  0031e: test   rax,rax
  00321: je     0xffff7e50
  00327: divsd  xmm2,xmm3
:00018 _ = %2.call x=(%3; 1)                [Vec]
:00019 
  0032b: movq   xmm0,xmm2
  0032f: call   0xffff7f57
  00334: mov    QWORD PTR [rbp-0x40],rax
  00338: mov    rdi,QWORD PTR [rbp-0x38]
  0033c: test   rdi,0x7
  00343: jne    0x3adc7
  00349: cmp    DWORD PTR [rdi+0x4],0x25
  0034d: jne    0x3adc7
  00353: cmp    DWORD PTR [rip+0xffffffffffffa4ae],0x26        # 0xffffa808
  0035a: jne    0x3adc7
  00360: mov    esi,DWORD PTR [rip+0x3fe]        # 0x764
  00366: cmp    esi,0xffffffff
  00369: je     0x3add6
  0036f: xor    rax,rax
  00372: mov    ax,WORD PTR [rdi+0x2]
  00376: cmp    rax,0x3
  0037a: jne    0x397
  00380: cmp    esi,0x6
  00383: jge    0x397
  00389: mov    rax,QWORD PTR [rbp-0x40]
  0038d: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00392: jmp    0x3d8
  00397: sub    rsp,0x10
  0039b: movq   QWORD PTR [rsp],xmm2
  003a0: movq   QWORD PTR [rsp+0x8],xmm3
  003a6: mov    rdx,QWORD PTR [rbp-0x40]
  003aa: movabs rax,0x563a5fe357f0
  003b4: call   rax
  003b6: movq   xmm2,QWORD PTR [rsp]
  003bb: movq   xmm3,QWORD PTR [rsp+0x8]
  003c1: add    rsp,0x10
  003c5: movabs r13,0x563a608f6780
  003cf: test   rax,rax
  003d2: je     0xffff7e2b
:00021 %3 = %2.call y()                     [Vec]
:00022 
  003d8: mov    rdi,QWORD PTR [rbp-0x38]
  003dc: test   rdi,0x7
  003e3: jne    0x3ae24
  003e9: cmp    DWORD PTR [rdi+0x4],0x25
  003ed: jne    0x3ae24
  003f3: cmp    DWORD PTR [rip+0xffffffffffffa40e],0x26        # 0xffffa808
  003fa: jne    0x3ae24
  00400: mov    esi,DWORD PTR [rip+0x366]        # 0x76c
  00406: cmp    esi,0xffffffff
  00409: je     0x3ae33
  0040f: xor    rax,rax
  00412: mov    ax,WORD PTR [rdi+0x2]
  00416: cmp    rax,0x3
  0041a: jne    0x433
  00420: cmp    esi,0x6
  00423: jge    0x433
  00429: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0042e: jmp    0x451
  00433: sub    rsp,0x10
  00437: movq   QWORD PTR [rsp],xmm3
  0043c: movabs rax,0x563a5fe35570
  00446: call   rax
  00448: movq   xmm3,QWORD PTR [rsp]
  0044d: add    rsp,0x10
  00451: mov    QWORD PTR [rbp-0x40],rax
:00024 %3 = %3 / %1                         [Float][Float]
  00455: mov    rdi,QWORD PTR [rbp-0x40]
  00459: test   rdi,0x1
  00460: jne    0x3ae6e
  00466: test   rdi,0x2
  0046d: je     0x4a9
  00473: xorps  xmm2,xmm2
  00476: movabs rax,0x8000000000000002
  00480: cmp    rdi,rax
  00483: je     0x4bb
  00489: mov    rax,rdi
  0048c: sar    rax,0x3f
  00490: add    rax,0x2
  00494: and    rdi,0xfffffffffffffffc
  00498: or     rdi,rax
  0049b: rol    rdi,0x3d
  0049f: movq   xmm2,rdi
  004a4: jmp    0x4bb
  004a9: call   0xffff7e64
  004ae: test   rax,rax
  004b1: je     0x3ae6e
  004b7: movq   xmm2,xmm0
  004bb: movq   rax,xmm3
  004c0: test   rax,rax
  004c3: je     0xffff7e50
  004c9: divsd  xmm2,xmm3
:00025 _ = %2.call y=(%3; 1)                [Vec]
:00026 
  004cd: movq   xmm0,xmm2
  004d1: call   0xffff7f57
  004d6: mov    QWORD PTR [rbp-0x40],rax
  004da: mov    rdi,QWORD PTR [rbp-0x38]
  004de: test   rdi,0x7
  004e5: jne    0x3ae7d
  004eb: cmp    DWORD PTR [rdi+0x4],0x25
  004ef: jne    0x3ae7d
  004f5: cmp    DWORD PTR [rip+0xffffffffffffa30c],0x26        # 0xffffa808
  004fc: jne    0x3ae7d
  00502: mov    esi,DWORD PTR [rip+0x26c]        # 0x774
  00508: cmp    esi,0xffffffff
  0050b: je     0x3ae8c
  00511: xor    rax,rax
  00514: mov    ax,WORD PTR [rdi+0x2]
  00518: cmp    rax,0x3
  0051c: jne    0x539
  00522: cmp    esi,0x6
  00525: jge    0x539
  0052b: mov    rax,QWORD PTR [rbp-0x40]
  0052f: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00534: jmp    0x57a
  00539: sub    rsp,0x10
  0053d: movq   QWORD PTR [rsp],xmm2
  00542: movq   QWORD PTR [rsp+0x8],xmm3
  00548: mov    rdx,QWORD PTR [rbp-0x40]
  0054c: movabs rax,0x563a5fe357f0
  00556: call   rax
  00558: movq   xmm2,QWORD PTR [rsp]
  0055d: movq   xmm3,QWORD PTR [rsp+0x8]
  00563: add    rsp,0x10
  00567: movabs r13,0x563a608f67f0
  00571: test   rax,rax
  00574: je     0xffff7e2b
:00028 %3 = %2.call z()                     [Vec]
:00029 
  0057a: mov    rdi,QWORD PTR [rbp-0x38]
  0057e: test   rdi,0x7
  00585: jne    0x3aeda
  0058b: cmp    DWORD PTR [rdi+0x4],0x25
  0058f: jne    0x3aeda
  00595: cmp    DWORD PTR [rip+0xffffffffffffa26c],0x26        # 0xffffa808
  0059c: jne    0x3aeda
  005a2: mov    esi,DWORD PTR [rip+0x1d4]        # 0x77c
  005a8: cmp    esi,0xffffffff
  005ab: je     0x3aee9
  005b1: xor    rax,rax
  005b4: mov    ax,WORD PTR [rdi+0x2]
  005b8: cmp    rax,0x3
  005bc: jne    0x5d5
  005c2: cmp    esi,0x6
  005c5: jge    0x5d5
  005cb: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005d0: jmp    0x5f3
  005d5: sub    rsp,0x10
  005d9: movq   QWORD PTR [rsp],xmm3
  005de: movabs rax,0x563a5fe35570
  005e8: call   rax
  005ea: movq   xmm3,QWORD PTR [rsp]
  005ef: add    rsp,0x10
  005f3: mov    QWORD PTR [rbp-0x40],rax
:00031 %3 = %3 / %1                         [Float][Float]
  005f7: mov    rdi,QWORD PTR [rbp-0x40]
  005fb: test   rdi,0x1
  00602: jne    0x3af24
  00608: test   rdi,0x2
  0060f: je     0x64b
  00615: xorps  xmm2,xmm2
  00618: movabs rax,0x8000000000000002
  00622: cmp    rdi,rax
  00625: je     0x65d
  0062b: mov    rax,rdi
  0062e: sar    rax,0x3f
  00632: add    rax,0x2
  00636: and    rdi,0xfffffffffffffffc
  0063a: or     rdi,rax
  0063d: rol    rdi,0x3d
  00641: movq   xmm2,rdi
  00646: jmp    0x65d
  0064b: call   0xffff7e64
  00650: test   rax,rax
  00653: je     0x3af24
  00659: movq   xmm2,xmm0
  0065d: movq   rax,xmm3
  00662: test   rax,rax
  00665: je     0xffff7e50
  0066b: divsd  xmm2,xmm3
:00032 _ = %2.call z=(%3; 1)                [Vec]
:00033 
  0066f: movq   xmm0,xmm2
  00673: call   0xffff7f57
  00678: mov    QWORD PTR [rbp-0x40],rax
  0067c: mov    rdi,QWORD PTR [rbp-0x38]
  00680: test   rdi,0x7
  00687: jne    0x3af33
  0068d: cmp    DWORD PTR [rdi+0x4],0x25
  00691: jne    0x3af33
  00697: cmp    DWORD PTR [rip+0xffffffffffffa16a],0x26        # 0xffffa808
  0069e: jne    0x3af33
  006a4: mov    esi,DWORD PTR [rip+0xda]        # 0x784
  006aa: cmp    esi,0xffffffff
  006ad: je     0x3af42
  006b3: xor    rax,rax
  006b6: mov    ax,WORD PTR [rdi+0x2]
  006ba: cmp    rax,0x3
  006be: jne    0x6db
  006c4: cmp    esi,0x6
  006c7: jge    0x6db
  006cd: mov    rax,QWORD PTR [rbp-0x40]
  006d1: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006d6: jmp    0x71c
  006db: sub    rsp,0x10
  006df: movq   QWORD PTR [rsp],xmm2
  006e4: movq   QWORD PTR [rsp+0x8],xmm3
  006ea: mov    rdx,QWORD PTR [rbp-0x40]
  006ee: movabs rax,0x563a5fe357f0
  006f8: call   rax
  006fa: movq   xmm2,QWORD PTR [rsp]
  006ff: movq   xmm3,QWORD PTR [rsp+0x8]
  00705: add    rsp,0x10
  00709: movabs r13,0x563a608f6860
  00713: test   rax,rax
  00716: je     0xffff7e2b
:00035 br =>:00036
  0071c: jmp    0x3afb6
:00036 ret %2
  00721: mov    rax,QWORD PTR [rbp-0x38]
  00725: leave  
  00726: ret    
==> start whole compile: vlength FuncId(60) self_class:Vec start:[00000] bytecode:0x563a608e2cd0
<== finished compile. elapsed:25.2µs
offset:Pos(35224) code: 923 bytes  data: 37 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    rdi,QWORD PTR [rbp-0x28]
  00027: test   rdi,0x7
  0002e: jne    0x3a847
  00034: cmp    DWORD PTR [rdi+0x4],0x25
  00038: jne    0x3a847
:00000 %2 = const[Math]                     [Math]
  0003e: mov    rax,QWORD PTR [rip+0xffffffffffffa043]        # 0xffffa088
  00045: cmp    rax,QWORD PTR [rip+0x36c]        # 0x3b8
  0004c: jne    0x3a856
  00052: mov    rax,QWORD PTR [rip+0x34f]        # 0x3a8
  00059: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = @x: Vec[IvarId(0)]
  0005d: mov    rdi,QWORD PTR [rbp-0x28]
  00061: xor    rax,rax
  00064: mov    ax,WORD PTR [rdi+0x2]
  00068: cmp    rax,0x3
  0006c: jne    0x3a89c
  00072: mov    rax,QWORD PTR [rdi+0x10]
  00076: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = @x: Vec[IvarId(0)]
  0007a: mov    rdi,QWORD PTR [rbp-0x28]
  0007e: xor    rax,rax
  00081: mov    ax,WORD PTR [rdi+0x2]
  00085: cmp    rax,0x3
  00089: jne    0x3a8b2
  0008f: mov    rax,QWORD PTR [rdi+0x10]
  00093: mov    QWORD PTR [rbp-0x48],rax
:00003 %3 = %3 * %4                         [Float][Float]
  00097: mov    rdi,QWORD PTR [rbp-0x40]
  0009b: test   rdi,0x1
  000a2: jne    0x3a8c8
  000a8: test   rdi,0x2
  000af: je     0xeb
  000b5: xorps  xmm2,xmm2
  000b8: movabs rax,0x8000000000000002
  000c2: cmp    rdi,rax
  000c5: je     0xfd
  000cb: mov    rax,rdi
  000ce: sar    rax,0x3f
  000d2: add    rax,0x2
  000d6: and    rdi,0xfffffffffffffffc
  000da: or     rdi,rax
  000dd: rol    rdi,0x3d
  000e1: movq   xmm2,rdi
  000e6: jmp    0xfd
  000eb: call   0xffff76dc
  000f0: test   rax,rax
  000f3: je     0x3a8c8
  000f9: movq   xmm2,xmm0
  000fd: mov    rdi,QWORD PTR [rbp-0x48]
  00101: test   rdi,0x1
  00108: jne    0x3a8d7
  0010e: test   rdi,0x2
  00115: je     0x151
  0011b: xorps  xmm3,xmm3
  0011e: movabs rax,0x8000000000000002
  00128: cmp    rdi,rax
  0012b: je     0x163
  00131: mov    rax,rdi
  00134: sar    rax,0x3f
  00138: add    rax,0x2
  0013c: and    rdi,0xfffffffffffffffc
  00140: or     rdi,rax
  00143: rol    rdi,0x3d
  00147: movq   xmm3,rdi
  0014c: jmp    0x163
  00151: call   0xffff76dc
  00156: test   rax,rax
  00159: je     0x3a8d7
  0015f: movq   xmm3,xmm0
  00163: mulsd  xmm2,xmm3
:00004 %4 = @y: Vec[IvarId(1)]
  00167: mov    rdi,QWORD PTR [rbp-0x28]
  0016b: xor    rax,rax
  0016e: mov    ax,WORD PTR [rdi+0x2]
  00172: cmp    rax,0x3
  00176: jne    0x3a8e6
  0017c: mov    rax,QWORD PTR [rdi+0x18]
  00180: mov    QWORD PTR [rbp-0x48],rax
:00005 %5 = @y: Vec[IvarId(1)]
  00184: mov    rdi,QWORD PTR [rbp-0x28]
  00188: xor    rax,rax
  0018b: mov    ax,WORD PTR [rdi+0x2]
  0018f: cmp    rax,0x3
  00193: jne    0x3a90e
  00199: mov    rax,QWORD PTR [rdi+0x18]
  0019d: mov    QWORD PTR [rbp-0x50],rax
:00006 %4 = %4 * %5                         [Float][Float]
  001a1: mov    rdi,QWORD PTR [rbp-0x48]
  001a5: test   rdi,0x1
  001ac: jne    0x3a936
  001b2: test   rdi,0x2
  001b9: je     0x1f5
  001bf: xorps  xmm3,xmm3
  001c2: movabs rax,0x8000000000000002
  001cc: cmp    rdi,rax
  001cf: je     0x207
  001d5: mov    rax,rdi
  001d8: sar    rax,0x3f
  001dc: add    rax,0x2
  001e0: and    rdi,0xfffffffffffffffc
  001e4: or     rdi,rax
  001e7: rol    rdi,0x3d
  001eb: movq   xmm3,rdi
  001f0: jmp    0x207
  001f5: call   0xffff76dc
  001fa: test   rax,rax
  001fd: je     0x3a936
  00203: movq   xmm3,xmm0
  00207: mov    rdi,QWORD PTR [rbp-0x50]
  0020b: test   rdi,0x1
  00212: jne    0x3a952
  00218: test   rdi,0x2
  0021f: je     0x25b
  00225: xorps  xmm4,xmm4
  00228: movabs rax,0x8000000000000002
  00232: cmp    rdi,rax
  00235: je     0x26d
  0023b: mov    rax,rdi
  0023e: sar    rax,0x3f
  00242: add    rax,0x2
  00246: and    rdi,0xfffffffffffffffc
  0024a: or     rdi,rax
  0024d: rol    rdi,0x3d
  00251: movq   xmm4,rdi
  00256: jmp    0x26d
  0025b: call   0xffff76dc
  00260: test   rax,rax
  00263: je     0x3a952
  00269: movq   xmm4,xmm0
  0026d: mulsd  xmm3,xmm4
:00007 %3 = %3 + %4                         [Float][Float]
  00271: addsd  xmm2,xmm3
:00008 %4 = @z: Vec[IvarId(2)]
  00275: mov    rdi,QWORD PTR [rbp-0x28]
  00279: xor    rax,rax
  0027c: mov    ax,WORD PTR [rdi+0x2]
  00280: cmp    rax,0x3
  00284: jne    0x3a96e
  0028a: mov    rax,QWORD PTR [rdi+0x20]
  0028e: mov    QWORD PTR [rbp-0x48],rax
:00009 %5 = @z: Vec[IvarId(2)]
  00292: mov    rdi,QWORD PTR [rbp-0x28]
  00296: xor    rax,rax
  00299: mov    ax,WORD PTR [rdi+0x2]
  0029d: cmp    rax,0x3
  002a1: jne    0x3a9a2
  002a7: mov    rax,QWORD PTR [rdi+0x20]
  002ab: mov    QWORD PTR [rbp-0x50],rax
:00010 %4 = %4 * %5                         [Float][Float]
  002af: mov    rdi,QWORD PTR [rbp-0x48]
  002b3: test   rdi,0x1
  002ba: jne    0x3a9ca
  002c0: test   rdi,0x2
  002c7: je     0x303
  002cd: xorps  xmm3,xmm3
  002d0: movabs rax,0x8000000000000002
  002da: cmp    rdi,rax
  002dd: je     0x315
  002e3: mov    rax,rdi
  002e6: sar    rax,0x3f
  002ea: add    rax,0x2
  002ee: and    rdi,0xfffffffffffffffc
  002f2: or     rdi,rax
  002f5: rol    rdi,0x3d
  002f9: movq   xmm3,rdi
  002fe: jmp    0x315
  00303: call   0xffff76dc
  00308: test   rax,rax
  0030b: je     0x3a9ca
  00311: movq   xmm3,xmm0
  00315: mov    rdi,QWORD PTR [rbp-0x50]
  00319: test   rdi,0x1
  00320: jne    0x3a9e6
  00326: test   rdi,0x2
  0032d: je     0x369
  00333: xorps  xmm4,xmm4
  00336: movabs rax,0x8000000000000002
  00340: cmp    rdi,rax
  00343: je     0x37b
  00349: mov    rax,rdi
  0034c: sar    rax,0x3f
  00350: add    rax,0x2
  00354: and    rdi,0xfffffffffffffffc
  00358: or     rdi,rax
  0035b: rol    rdi,0x3d
  0035f: movq   xmm4,rdi
  00364: jmp    0x37b
  00369: call   0xffff76dc
  0036e: test   rax,rax
  00371: je     0x3a9e6
  00377: movq   xmm4,xmm0
  0037b: mulsd  xmm3,xmm4
:00011 %3 = %3 + %4                         [Float][Float]
  0037f: addsd  xmm2,xmm3
:00012 %1 = %2.call sqrt(%3; 1)             [#<Class:Math>]
:00013 
  00383: rex.W sqrtsd xmm5,xmm2
:00015 ret %1
  00388: movq   xmm0,xmm5
  0038c: call   0xffff77cf
  00391: mov    QWORD PTR [rbp-0x30],rax
  00395: mov    rax,QWORD PTR [rbp-0x30]
  00399: leave  
  0039a: ret    
==> start whole compile: initialize FuncId(66) self_class:Ray start:[00000] bytecode:0x563a608e42d0
<== finished compile. elapsed:8.8µs
offset:Pos(36184) code: 115 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x40],0x4
  00010: mov    rdi,QWORD PTR [rbp-0x28]
  00014: test   rdi,0x7
  0001b: jne    0x3a642
  00021: cmp    DWORD PTR [rdi+0x4],0x2b
  00025: jne    0x3a642
:00000 @org: Ray[IvarId(0)] = %1
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: xor    rax,rax
  00032: mov    ax,WORD PTR [rdi+0x2]
  00036: cmp    rax,0x3
  0003a: jne    0x3a651
  00040: mov    rax,QWORD PTR [rbp-0x30]
  00044: mov    QWORD PTR [rdi+0x10],rax
:00001 @dir: Ray[IvarId(1)] = %2
  00048: mov    rdi,QWORD PTR [rbp-0x28]
  0004c: xor    rax,rax
  0004f: mov    ax,WORD PTR [rdi+0x2]
  00053: cmp    rax,0x3
  00057: jne    0x3a66b
  0005d: mov    rax,QWORD PTR [rbp-0x38]
  00061: mov    QWORD PTR [rdi+0x18],rax
:00002 %3 = %2
  00065: mov    rax,QWORD PTR [rbp-0x38]
  00069: mov    QWORD PTR [rbp-0x40],rax
:00003 ret %3
  0006d: mov    rax,QWORD PTR [rbp-0x40]
  00071: leave  
  00072: ret    
==> start whole compile: initialize FuncId(67) self_class:Isect start:[00000] bytecode:0x563a608e6de0
<== finished compile. elapsed:30µs
offset:Pos(36299) code: 736 bytes  data: 173 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    rdi,QWORD PTR [rbp-0x28]
  00027: test   rdi,0x7
  0002e: jne    0x3a612
  00034: cmp    DWORD PTR [rdi+0x4],0x2d
  00038: jne    0x3a612
:00000 %1 = literal[10000000.0]
  0003e: movq   xmm2,QWORD PTR [rip+0x29f]        # 0x2e5
:00001 @t: Isect[IvarId(0)] = %1
  00046: movq   xmm0,xmm2
  0004a: call   0xffff739c
  0004f: mov    QWORD PTR [rbp-0x30],rax
  00053: mov    rdi,QWORD PTR [rbp-0x28]
  00057: xor    rax,rax
  0005a: mov    ax,WORD PTR [rdi+0x2]
  0005e: cmp    rax,0x3
  00062: jne    0x3a621
  00068: mov    rax,QWORD PTR [rbp-0x30]
  0006c: mov    QWORD PTR [rdi+0x10],rax
:00002 %1 = literal[false]
  00070: mov    rax,0x14
  00077: mov    QWORD PTR [rbp-0x30],rax
:00003 @hit: Isect[IvarId(1)] = %1
  0007b: mov    rdi,QWORD PTR [rbp-0x28]
  0007f: xor    rax,rax
  00082: mov    ax,WORD PTR [rdi+0x2]
  00086: cmp    rax,0x3
  0008a: jne    0x3a64d
  00090: mov    rax,QWORD PTR [rbp-0x30]
  00094: mov    QWORD PTR [rdi+0x18],rax
:00004 %2 = const[Vec]                      [Vec]
  00098: mov    rax,QWORD PTR [rip+0xffffffffffff9bb6]        # 0xffff9c55
  0009f: cmp    rax,QWORD PTR [rip+0x25f]        # 0x305
  000a6: jne    0x3a667
  000ac: mov    rax,QWORD PTR [rip+0x242]        # 0x2f5
  000b3: mov    QWORD PTR [rbp-0x38],rax
:00005 %3 = literal[0.0]
  000b7: movq   xmm2,QWORD PTR [rip+0x256]        # 0x315
:00006 %4 = literal[0.0]
  000bf: movq   xmm3,QWORD PTR [rip+0x25e]        # 0x325
:00007 %5 = literal[0.0]
  000c7: movq   xmm4,QWORD PTR [rip+0x266]        # 0x335
:00008 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
:00009 
  000cf: movq   xmm0,xmm2
  000d3: call   0xffff739c
  000d8: mov    QWORD PTR [rbp-0x40],rax
  000dc: movq   xmm0,xmm3
  000e0: call   0xffff739c
  000e5: mov    QWORD PTR [rbp-0x48],rax
  000e9: movq   xmm0,xmm4
  000ed: call   0xffff739c
  000f2: mov    QWORD PTR [rbp-0x50],rax
  000f6: mov    rdi,QWORD PTR [rbp-0x38]
  000fa: test   rdi,0x7
  00101: jne    0x3a6ad
  00107: cmp    DWORD PTR [rdi+0x4],0x26
  0010b: jne    0x3a6ad
  00111: cmp    DWORD PTR [rip+0xffffffffffff9b35],0x26        # 0xffff9c4d
  00118: jne    0x3a6ad
  0011e: mov    r9,0x0
  00125: sub    rsp,0x20
  00129: movq   QWORD PTR [rsp],xmm2
  0012e: movq   QWORD PTR [rsp+0x8],xmm3
  00134: movq   QWORD PTR [rsp+0x10],xmm4
  0013a: mov    rdx,rdi
  0013d: mov    rax,QWORD PTR [rbx]
  00140: lea    rdi,[rsp-0x18]
  00145: mov    QWORD PTR [rdi],rax
  00148: mov    QWORD PTR [rbx],rdi
  0014b: mov    QWORD PTR [rsp-0x20],0x0
  00154: mov    QWORD PTR [rsp-0x38],rcx
  00159: lea    rcx,[rbp-0x40]
  0015d: mov    r8,0x3
  00164: call   0x3a6bc
  00169: lea    rdi,[rbp-0x8]
  0016d: mov    QWORD PTR [rbx],rdi
  00170: movq   xmm2,QWORD PTR [rsp]
  00175: movq   xmm3,QWORD PTR [rsp+0x8]
  0017b: movq   xmm4,QWORD PTR [rsp+0x10]
  00181: add    rsp,0x20
  00185: movabs r13,0x563a608e6e80
  0018f: test   rax,rax
  00192: je     0xffff7270
  00198: mov    QWORD PTR [rbp-0x30],rax
:00011 @pl: Isect[IvarId(2)] = %1
  0019c: mov    rdi,QWORD PTR [rbp-0x28]
  001a0: xor    rax,rax
  001a3: mov    ax,WORD PTR [rdi+0x2]
  001a7: cmp    rax,0x3
  001ab: jne    0x3a6ee
  001b1: mov    rax,QWORD PTR [rbp-0x30]
  001b5: mov    QWORD PTR [rdi+0x20],rax
:00012 %2 = const[Vec]                      [Vec]
  001b9: mov    rax,QWORD PTR [rip+0xffffffffffff9a95]        # 0xffff9c55
  001c0: cmp    rax,QWORD PTR [rip+0x18e]        # 0x355
  001c7: jne    0x3a732
  001cd: mov    rax,QWORD PTR [rip+0x171]        # 0x345
  001d4: mov    QWORD PTR [rbp-0x38],rax
:00013 %3 = literal[0.0]
  001d8: movq   xmm2,QWORD PTR [rip+0x185]        # 0x365
:00014 %4 = literal[0.0]
  001e0: movq   xmm3,QWORD PTR [rip+0x18d]        # 0x375
:00015 %5 = literal[0.0]
  001e8: movq   xmm4,QWORD PTR [rip+0x195]        # 0x385
:00016 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
:00017 
  001f0: movq   xmm0,xmm2
  001f4: call   0xffff739c
  001f9: mov    QWORD PTR [rbp-0x40],rax
  001fd: movq   xmm0,xmm3
  00201: call   0xffff739c
  00206: mov    QWORD PTR [rbp-0x48],rax
  0020a: movq   xmm0,xmm4
  0020e: call   0xffff739c
  00213: mov    QWORD PTR [rbp-0x50],rax
  00217: mov    rdi,QWORD PTR [rbp-0x38]
  0021b: test   rdi,0x7
  00222: jne    0x3a7a2
  00228: cmp    DWORD PTR [rdi+0x4],0x26
  0022c: jne    0x3a7a2
  00232: cmp    DWORD PTR [rip+0xffffffffffff9a14],0x26        # 0xffff9c4d
  00239: jne    0x3a7a2
  0023f: mov    r9,0x0
  00246: sub    rsp,0x20
  0024a: movq   QWORD PTR [rsp],xmm2
  0024f: movq   QWORD PTR [rsp+0x8],xmm3
  00255: movq   QWORD PTR [rsp+0x10],xmm4
  0025b: mov    rdx,rdi
  0025e: mov    rax,QWORD PTR [rbx]
  00261: lea    rdi,[rsp-0x18]
  00266: mov    QWORD PTR [rdi],rax
  00269: mov    QWORD PTR [rbx],rdi
  0026c: mov    QWORD PTR [rsp-0x20],0x0
  00275: mov    QWORD PTR [rsp-0x38],rcx
  0027a: lea    rcx,[rbp-0x40]
  0027e: mov    r8,0x3
  00285: call   0x3a7b1
  0028a: lea    rdi,[rbp-0x8]
  0028e: mov    QWORD PTR [rbx],rdi
  00291: movq   xmm2,QWORD PTR [rsp]
  00296: movq   xmm3,QWORD PTR [rsp+0x8]
  0029c: movq   xmm4,QWORD PTR [rsp+0x10]
  002a2: add    rsp,0x20
  002a6: movabs r13,0x563a608e6f00
  002b0: test   rax,rax
  002b3: je     0xffff7270
  002b9: mov    QWORD PTR [rbp-0x30],rax
:00019 @n: Isect[IvarId(3)] = %1
  002bd: mov    rdi,QWORD PTR [rbp-0x28]
  002c1: xor    rax,rax
  002c4: mov    ax,WORD PTR [rdi+0x2]
  002c8: cmp    rax,0x3
  002cc: jne    0x3a7e3
  002d2: mov    rax,QWORD PTR [rbp-0x30]
  002d6: mov    QWORD PTR [rdi+0x28],rax
:00020 ret %1
  002da: mov    rax,QWORD PTR [rbp-0x30]
  002de: leave  
  002df: ret    
==> start whole compile: intersect FuncId(65) self_class:Plane start:[00000] bytecode:0x563a608e84e0
<== finished compile. elapsed:118.4µs
offset:Pos(37208) code: 6235 bytes  data: 261 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xa0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x40],rax
  00016:    	mov    QWORD PTR [rbp-0x48],rax
  0001a:    	mov    QWORD PTR [rbp-0x50],rax
  0001e:    	mov    QWORD PTR [rbp-0x58],rax
  00022:    	mov    QWORD PTR [rbp-0x60],rax
  00026:    	mov    QWORD PTR [rbp-0x68],rax
  0002a:    	mov    QWORD PTR [rbp-0x70],rax
  0002e:    	mov    QWORD PTR [rbp-0x78],rax
  00032:    	mov    QWORD PTR [rbp-0x80],rax
  00036: ff 	mov    QWORD PTR [rbp-0x88],rax
  0003d: ff 	mov    QWORD PTR [rbp-0x90],rax
  00044:    	mov    rdi,QWORD PTR [rbp-0x28]
  00048: 00 	test   rdi,0x7
  0004f:    	jne    0x3a49a
  00055:    	cmp    DWORD PTR [rdi+0x4],0x29
  00059:    	jne    0x3a49a
:00000 %7 = @p: Plane[IvarId(0)]
  0005f:    	mov    rdi,QWORD PTR [rbp-0x28]
  00063:    	xor    rax,rax
  00066:    	mov    ax,WORD PTR [rdi+0x2]
  0006a:    	cmp    rax,0x3
  0006e:    	jne    0x3a4a9
  00074:    	mov    rax,QWORD PTR [rdi+0x10]
  00078:    	mov    QWORD PTR [rbp-0x60],rax
:00001 %8 = @n: Plane[IvarId(1)]
  0007c:    	mov    rdi,QWORD PTR [rbp-0x28]
  00080:    	xor    rax,rax
  00083:    	mov    ax,WORD PTR [rdi+0x2]
  00087:    	cmp    rax,0x3
  0008b:    	jne    0x3a4bf
  00091:    	mov    rax,QWORD PTR [rdi+0x18]
  00095:    	mov    QWORD PTR [rbp-0x68],rax
:00002 %3 = %7.call vdot(%8; 1)             [Vec]
:00003 
  00099:    	mov    rdi,QWORD PTR [rbp-0x60]
  0009d: 00 	test   rdi,0x7
  000a4:    	jne    0x3a4d5
  000aa:    	cmp    DWORD PTR [rdi+0x4],0x25
  000ae:    	jne    0x3a4d5
  000b4: 26 	cmp    DWORD PTR [rip+0xffffffffffff9805],0x26        # 0xffff98c0
  000bb:    	jne    0x3a4d5
  000c1:    	mov    rax,QWORD PTR [rbx]
  000c4:    	lea    rdi,[rsp-0x18]
  000c9:    	mov    QWORD PTR [rdi],rax
  000cc:    	mov    QWORD PTR [rbx],rdi
  000cf: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000d8:    	mov    QWORD PTR [rsp-0x38],rcx
  000dd:    	mov    rax,QWORD PTR [rbp-0x60]
  000e1:    	mov    QWORD PTR [rsp-0x38],rax
  000e6: 00 	mov    rdi,0x1
  000ed:    	mov    rax,QWORD PTR [rbp-0x68]
  000f1:    	mov    QWORD PTR [rsp-0x40],rax
  000f6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  000ff: 05 	movabs rax,0x100050000003b
  00109:    	mov    QWORD PTR [rsp-0x28],rax
  0010e: 3a 	movabs r13,0x563a6092ffb0
  00118:    	call   0xffffa5bf
  0011d:    	lea    rdi,[rbp-0x8]
  00121:    	mov    QWORD PTR [rbx],rdi
  00124: 3a 	movabs r13,0x563a608e8520
  0012e:    	test   rax,rax
  00131:    	je     0xffff6ee3
  00137:    	mov    QWORD PTR [rbp-0x40],rax
:00005 %3 = neg %3                          [Float]
  0013b:    	mov    rdi,QWORD PTR [rbp-0x40]
  0013f: 00 	test   rdi,0x1
  00146:    	jne    0x3a4e4
  0014c: 00 	test   rdi,0x2
  00153:    	je     0x18f
  00159:    	xorps  xmm2,xmm2
  0015c: 00 	movabs rax,0x8000000000000002
  00166:    	cmp    rdi,rax
  00169:    	je     0x1a1
  0016f:    	mov    rax,rdi
  00172:    	sar    rax,0x3f
  00176:    	add    rax,0x2
  0017a:    	and    rdi,0xfffffffffffffffc
  0017e:    	or     rdi,rax
  00181:    	rol    rdi,0x3d
  00185:    	movq   xmm2,rdi
  0018a:    	jmp    0x1a1
  0018f:    	call   0xffff6f1c
  00194:    	test   rax,rax
  00197:    	je     0x3a4e4
  0019d:    	movq   xmm2,xmm0
  001a1: 00 	xorps  xmm2,XMMWORD PTR [rip+0x16c0]        # 0x1868
:00006 %7 = %1.call dir()                   [Ray]
:00007 
  001a8:    	mov    rdi,QWORD PTR [rbp-0x30]
  001ac: 00 	test   rdi,0x7
  001b3:    	jne    0x3a4f3
  001b9:    	cmp    DWORD PTR [rdi+0x4],0x2b
  001bd:    	jne    0x3a4f3
  001c3: 26 	cmp    DWORD PTR [rip+0xffffffffffff96f6],0x26        # 0xffff98c0
  001ca:    	jne    0x3a4f3
  001d0:    	mov    esi,DWORD PTR [rip+0x169e]        # 0x1874
  001d6:    	cmp    esi,0xffffffff
  001d9:    	je     0x3a50f
  001df:    	xor    rax,rax
  001e2:    	mov    ax,WORD PTR [rdi+0x2]
  001e6:    	cmp    rax,0x3
  001ea:    	jne    0x203
  001f0:    	cmp    esi,0x6
  001f3:    	jge    0x203
  001f9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001fe:    	jmp    0x221
  00203:    	sub    rsp,0x10
  00207:    	movq   QWORD PTR [rsp],xmm2
  0020c: 3a 	movabs rax,0x563a5fe35570
  00216:    	call   rax
  00218:    	movq   xmm2,QWORD PTR [rsp]
  0021d:    	add    rsp,0x10
  00221:    	mov    QWORD PTR [rbp-0x60],rax
:00009 %8 = @n: Plane[IvarId(1)]
  00225:    	mov    rdi,QWORD PTR [rbp-0x28]
  00229:    	xor    rax,rax
  0022c:    	mov    ax,WORD PTR [rdi+0x2]
  00230:    	cmp    rax,0x3
  00234:    	jne    0x3a54a
  0023a:    	mov    rax,QWORD PTR [rdi+0x18]
  0023e:    	mov    QWORD PTR [rbp-0x68],rax
:00010 %4 = %7.call vdot(%8; 1)             [Vec]
:00011 
  00242:    	mov    rdi,QWORD PTR [rbp-0x60]
  00246: 00 	test   rdi,0x7
  0024d:    	jne    0x3a572
  00253:    	cmp    DWORD PTR [rdi+0x4],0x25
  00257:    	jne    0x3a572
  0025d: 26 	cmp    DWORD PTR [rip+0xffffffffffff965c],0x26        # 0xffff98c0
  00264:    	jne    0x3a572
  0026a:    	sub    rsp,0x10
  0026e:    	movq   QWORD PTR [rsp],xmm2
  00273:    	mov    rax,QWORD PTR [rbx]
  00276:    	lea    rdi,[rsp-0x18]
  0027b:    	mov    QWORD PTR [rdi],rax
  0027e:    	mov    QWORD PTR [rbx],rdi
  00281: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0028a:    	mov    QWORD PTR [rsp-0x38],rcx
  0028f:    	mov    rax,QWORD PTR [rbp-0x60]
  00293:    	mov    QWORD PTR [rsp-0x38],rax
  00298: 00 	mov    rdi,0x1
  0029f:    	mov    rax,QWORD PTR [rbp-0x68]
  002a3:    	mov    QWORD PTR [rsp-0x40],rax
  002a8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002b1: 05 	movabs rax,0x100050000003b
  002bb:    	mov    QWORD PTR [rsp-0x28],rax
  002c0: 3a 	movabs r13,0x563a6092ffb0
  002ca:    	call   0xffffa5bf
  002cf:    	lea    rdi,[rbp-0x8]
  002d3:    	mov    QWORD PTR [rbx],rdi
  002d6:    	movq   xmm2,QWORD PTR [rsp]
  002db:    	add    rsp,0x10
  002df: 3a 	movabs r13,0x563a608e85a0
  002e9:    	test   rax,rax
  002ec:    	je     0xffff6ee3
  002f2:    	mov    QWORD PTR [rbp-0x48],rax
:00013 %5 = %4
  002f6:    	mov    rax,QWORD PTR [rbp-0x48]
  002fa:    	mov    QWORD PTR [rbp-0x50],rax
:00014 %7 = literal[0.0]
  002fe: 00 	movq   xmm3,QWORD PTR [rip+0x1572]        # 0x1878
:00015 _%7 = %4 < %7                        [Float][Float]
:00016 condnotbr _%7 =>:00020
  00306:    	mov    rdi,QWORD PTR [rbp-0x48]
  0030a: 00 	test   rdi,0x1
  00311:    	jne    0x3a58e
  00317: 00 	test   rdi,0x2
  0031e:    	je     0x35a
  00324:    	xorps  xmm4,xmm4
  00327: 00 	movabs rax,0x8000000000000002
  00331:    	cmp    rdi,rax
  00334:    	je     0x36c
  0033a:    	mov    rax,rdi
  0033d:    	sar    rax,0x3f
  00341:    	add    rax,0x2
  00345:    	and    rdi,0xfffffffffffffffc
  00349:    	or     rdi,rax
  0034c:    	rol    rdi,0x3d
  00350:    	movq   xmm4,rdi
  00355:    	jmp    0x36c
  0035a:    	call   0xffff6f1c
  0035f:    	test   rax,rax
  00362:    	je     0x3a58e
  00368:    	movq   xmm4,xmm0
  0036c:    	ucomisd xmm4,xmm3
  00370:    	jae    0x3a5b7
:00017 %5 = %4
:00018 %5 = neg %5                          [Integer]
  00376:    	movq   xmm0,xmm4
  0037a:    	call   0xffff700f
  0037f:    	mov    QWORD PTR [rbp-0x50],rax
  00383:    	sub    rsp,0x20
  00387:    	movq   QWORD PTR [rsp],xmm2
  0038c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00392:    	movq   QWORD PTR [rsp+0x10],xmm4
  00398:    	mov    rdi,QWORD PTR [rbp-0x50]
  0039c:    	mov    rdx,rdi
  0039f:    	mov    rdi,rbx
  003a2:    	mov    rsi,r12
  003a5: 3a 	movabs rax,0x563a5fe59860
  003af:    	call   rax
  003b1:    	movq   xmm2,QWORD PTR [rsp]
  003b6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003bc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003c2:    	add    rsp,0x20
  003c6: 3a 	movabs r13,0x563a608e8610
  003d0:    	test   rax,rax
  003d3:    	je     0xffff6ee3
  003d9:    	mov    QWORD PTR [rbp-0x50],rax
:00019 br =>:00020
  003dd:    	jmp    0x3a5ea
:00020 %7 = literal[1e-17]
  003e2: 00 	movq   xmm3,QWORD PTR [rip+0x149e]        # 0x1888
:00021 _%7 = %5 < %7                        [Float][Float]
:00022 condnotbr _%7 =>:00026
  003ea:    	mov    rdi,QWORD PTR [rbp-0x50]
  003ee: 00 	test   rdi,0x1
  003f5:    	jne    0x3a61d
  003fb: 00 	test   rdi,0x2
  00402:    	je     0x43e
  00408:    	xorps  xmm5,xmm5
  0040b: 00 	movabs rax,0x8000000000000002
  00415:    	cmp    rdi,rax
  00418:    	je     0x450
  0041e:    	mov    rax,rdi
  00421:    	sar    rax,0x3f
  00425:    	add    rax,0x2
  00429:    	and    rdi,0xfffffffffffffffc
  0042d:    	or     rdi,rax
  00430:    	rol    rdi,0x3d
  00434:    	movq   xmm5,rdi
  00439:    	jmp    0x450
  0043e:    	call   0xffff6f1c
  00443:    	test   rax,rax
  00446:    	je     0x3a61d
  0044c:    	movq   xmm5,xmm0
  00450:    	ucomisd xmm5,xmm3
  00454:    	jae    0x468
:00023 %7 = nil
  0045a: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00024 ret %7
  00462:    	mov    rax,QWORD PTR [rbp-0x60]
  00466:    	leave  
  00467:    	ret    
:00026 %8 = %1.call org()                   [Ray]
:00027 
  00468:    	mov    rdi,QWORD PTR [rbp-0x30]
  0046c: 00 	test   rdi,0x7
  00473:    	jne    0x3a646
  00479:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0047d:    	jne    0x3a646
  00483: 26 	cmp    DWORD PTR [rip+0xffffffffffff9436],0x26        # 0xffff98c0
  0048a:    	jne    0x3a646
  00490:    	mov    esi,DWORD PTR [rip+0x13fe]        # 0x1894
  00496:    	cmp    esi,0xffffffff
  00499:    	je     0x3a66f
  0049f:    	xor    rax,rax
  004a2:    	mov    ax,WORD PTR [rdi+0x2]
  004a6:    	cmp    rax,0x3
  004aa:    	jne    0x4c3
  004b0:    	cmp    esi,0x6
  004b3:    	jge    0x4c3
  004b9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004be:    	jmp    0x505
  004c3:    	sub    rsp,0x20
  004c7:    	movq   QWORD PTR [rsp],xmm2
  004cc:    	movq   QWORD PTR [rsp+0x8],xmm3
  004d2:    	movq   QWORD PTR [rsp+0x10],xmm4
  004d8:    	movq   QWORD PTR [rsp+0x18],xmm5
  004de: 3a 	movabs rax,0x563a5fe35570
  004e8:    	call   rax
  004ea:    	movq   xmm2,QWORD PTR [rsp]
  004ef:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004f5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004fb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00501:    	add    rsp,0x20
  00505:    	mov    QWORD PTR [rbp-0x68],rax
:00029 %9 = @n: Plane[IvarId(1)]
  00509:    	mov    rdi,QWORD PTR [rbp-0x28]
  0050d:    	xor    rax,rax
  00510:    	mov    ax,WORD PTR [rdi+0x2]
  00514:    	cmp    rax,0x3
  00518:    	jne    0x3a6ce
  0051e:    	mov    rax,QWORD PTR [rdi+0x18]
  00522:    	mov    QWORD PTR [rbp-0x70],rax
:00030 %7 = %8.call vdot(%9; 1)             [Vec]
:00031 
  00526:    	mov    rdi,QWORD PTR [rbp-0x68]
  0052a: 00 	test   rdi,0x7
  00531:    	jne    0x3a71a
  00537:    	cmp    DWORD PTR [rdi+0x4],0x25
  0053b:    	jne    0x3a71a
  00541: 26 	cmp    DWORD PTR [rip+0xffffffffffff9378],0x26        # 0xffff98c0
  00548:    	jne    0x3a71a
  0054e:    	sub    rsp,0x20
  00552:    	movq   QWORD PTR [rsp],xmm2
  00557:    	movq   QWORD PTR [rsp+0x8],xmm4
  0055d:    	movq   QWORD PTR [rsp+0x10],xmm5
  00563:    	mov    rax,QWORD PTR [rbx]
  00566:    	lea    rdi,[rsp-0x18]
  0056b:    	mov    QWORD PTR [rdi],rax
  0056e:    	mov    QWORD PTR [rbx],rdi
  00571: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0057a:    	mov    QWORD PTR [rsp-0x38],rcx
  0057f:    	mov    rax,QWORD PTR [rbp-0x68]
  00583:    	mov    QWORD PTR [rsp-0x38],rax
  00588: 00 	mov    rdi,0x1
  0058f:    	mov    rax,QWORD PTR [rbp-0x70]
  00593:    	mov    QWORD PTR [rsp-0x40],rax
  00598: 00 	mov    QWORD PTR [rsp-0x30],0x0
  005a1: 05 	movabs rax,0x100050000003b
  005ab:    	mov    QWORD PTR [rsp-0x28],rax
  005b0: 3a 	movabs r13,0x563a6092ffb0
  005ba:    	call   0xffffa5bf
  005bf:    	lea    rdi,[rbp-0x8]
  005c3:    	mov    QWORD PTR [rbx],rdi
  005c6:    	movq   xmm2,QWORD PTR [rsp]
  005cb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  005d1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005d7:    	add    rsp,0x20
  005db: 3a 	movabs r13,0x563a608e86e0
  005e5:    	test   rax,rax
  005e8:    	je     0xffff6ee3
  005ee:    	mov    QWORD PTR [rbp-0x60],rax
:00033 %7 = %7 + %3                         [Float][Float]
  005f2:    	mov    rdi,QWORD PTR [rbp-0x60]
  005f6: 00 	test   rdi,0x1
  005fd:    	jne    0x3a736
  00603: 00 	test   rdi,0x2
  0060a:    	je     0x646
  00610:    	xorps  xmm3,xmm3
  00613: 00 	movabs rax,0x8000000000000002
  0061d:    	cmp    rdi,rax
  00620:    	je     0x658
  00626:    	mov    rax,rdi
  00629:    	sar    rax,0x3f
  0062d:    	add    rax,0x2
  00631:    	and    rdi,0xfffffffffffffffc
  00635:    	or     rdi,rax
  00638:    	rol    rdi,0x3d
  0063c:    	movq   xmm3,rdi
  00641:    	jmp    0x658
  00646:    	call   0xffff6f1c
  0064b:    	test   rax,rax
  0064e:    	je     0x3a736
  00654:    	movq   xmm3,xmm0
  00658:    	addsd  xmm3,xmm2
:00034 %7 = neg %7                          [Float]
  0065c: 00 	xorps  xmm3,XMMWORD PTR [rip+0x1235]        # 0x1898
:00035 %6 = %7 / %4                         [Float][Float]
  00663:    	movq   xmm6,xmm3
  00667:    	movq   rax,xmm4
  0066c:    	test   rax,rax
  0066f:    	je     0xffff6f08
  00675:    	divsd  xmm6,xmm4
:00036 %8 = literal[0.0]
  00679: 00 	movq   xmm7,QWORD PTR [rip+0x1227]        # 0x18a8
:00037 %7 = %6 > %8                         [Float][Float]
  00681:    	xor    rax,rax
  00684:    	ucomisd xmm6,xmm7
  00688:    	seta   al
  0068c:    	shl    rax,0x3
  00690:    	or     rax,0x14
  00694:    	mov    QWORD PTR [rbp-0x60],rax
:00038 condnotbr %7 =>:00043
  00698:    	mov    rax,QWORD PTR [rbp-0x60]
  0069c:    	or     rax,0x10
  006a0:    	cmp    rax,0x14
  006a4:    	je     0x3a7f6
:00039 %8 = %2.call t()                     [<INVALID>]
:00040 
  006aa:    	sub    rsp,0x20
  006ae:    	movq   QWORD PTR [rsp],xmm2
  006b3:    	movq   QWORD PTR [rsp+0x8],xmm4
  006b9:    	movq   QWORD PTR [rsp+0x10],xmm5
  006bf:    	movq   QWORD PTR [rsp+0x18],xmm6
  006c5:    	mov    rdi,QWORD PTR [rbp-0x38]
  006c9: 3a 	movabs rax,0x563a5fe2d010
  006d3:    	call   rax
  006d5:    	mov    r15d,eax
  006d8: 00 	cmp    r15d,DWORD PTR [rip+0x11d5]        # 0x18b4
  006df:    	jne    0x3a752
  006e5:    	mov    eax,DWORD PTR [rip+0xffffffffffff91d5]        # 0xffff98c0
  006eb:    	cmp    DWORD PTR [rip+0x11bf],eax        # 0x18b0
  006f1:    	jne    0x3a752
  006f7:    	mov    rax,QWORD PTR [rbx]
  006fa:    	lea    rdi,[rsp-0x18]
  006ff:    	mov    QWORD PTR [rdi],rax
  00702:    	mov    QWORD PTR [rbx],rdi
  00705: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0070e:    	mov    QWORD PTR [rsp-0x38],rcx
  00713:    	mov    rax,QWORD PTR [rbp-0x38]
  00717:    	mov    QWORD PTR [rsp-0x38],rax
  0071c: 00 	mov    rdi,0x0
  00723: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0072c: 00 	movabs rax,0x0
  00736:    	mov    QWORD PTR [rsp-0x28],rax
  0073b: 00 	movabs r13,0x0
  00745:    	call   0xffff6ea8
  0074a:    	lea    rdi,[rbp-0x8]
  0074e:    	mov    QWORD PTR [rbx],rdi
  00751:    	movq   xmm2,QWORD PTR [rsp]
  00756:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0075c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00762:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00768:    	add    rsp,0x20
  0076c:    	test   rax,rax
  0076f:    	je     0x3a7be
  00775:    	mov    QWORD PTR [rbp-0x68],rax
:00042 %7 = %6 < %8                         [Integer][Integer]
  00779:    	movq   xmm0,xmm6
  0077d:    	call   0xffff700f
  00782:    	mov    QWORD PTR [rbp-0x58],rax
  00786:    	mov    rdi,QWORD PTR [rbp-0x58]
  0078a:    	mov    rsi,QWORD PTR [rbp-0x68]
  0078e: 00 	test   rdi,0x1
  00795:    	je     0x3a7cd
  0079b: 00 	test   rsi,0x1
  007a2:    	je     0x3a7cd
  007a8:    	xor    rax,rax
  007ab:    	cmp    rdi,rsi
  007ae:    	setl   al
  007b2:    	shl    rax,0x3
  007b6:    	or     rax,0x14
  007ba:    	mov    QWORD PTR [rbp-0x60],rax
  007be:    	jmp    0x3a836
:00043 condnotbr %7 =>:00105
  007c3:    	mov    rax,QWORD PTR [rbp-0x60]
  007c7:    	or     rax,0x10
  007cb:    	cmp    rax,0x14
  007cf:    	je     0x3b1b4
:00044 %7 = literal[true]
  007d5: 00 	mov    rax,0x1c
  007dc:    	mov    QWORD PTR [rbp-0x60],rax
:00045 _ = %2.call hit=(%7; 1)              [<INVALID>]
:00046 
  007e0:    	sub    rsp,0x20
  007e4:    	movq   QWORD PTR [rsp],xmm2
  007e9:    	movq   QWORD PTR [rsp+0x8],xmm4
  007ef:    	movq   QWORD PTR [rsp+0x10],xmm5
  007f5:    	movq   QWORD PTR [rsp+0x18],xmm6
  007fb:    	mov    rdi,QWORD PTR [rbp-0x38]
  007ff: 3a 	movabs rax,0x563a5fe2d010
  00809:    	call   rax
  0080b:    	mov    r15d,eax
  0080e: 00 	cmp    r15d,DWORD PTR [rip+0x10a7]        # 0x18bc
  00815:    	jne    0x3a85c
  0081b:    	mov    eax,DWORD PTR [rip+0xffffffffffff909f]        # 0xffff98c0
  00821:    	cmp    DWORD PTR [rip+0x1091],eax        # 0x18b8
  00827:    	jne    0x3a85c
  0082d:    	mov    rax,QWORD PTR [rbx]
  00830:    	lea    rdi,[rsp-0x18]
  00835:    	mov    QWORD PTR [rdi],rax
  00838:    	mov    QWORD PTR [rbx],rdi
  0083b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00844:    	mov    QWORD PTR [rsp-0x38],rcx
  00849:    	mov    rax,QWORD PTR [rbp-0x38]
  0084d:    	mov    QWORD PTR [rsp-0x38],rax
  00852: 00 	mov    rdi,0x1
  00859:    	mov    rax,QWORD PTR [rbp-0x60]
  0085d:    	mov    QWORD PTR [rsp-0x40],rax
  00862: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0086b: 00 	movabs rax,0x0
  00875:    	mov    QWORD PTR [rsp-0x28],rax
  0087a: 00 	movabs r13,0x0
  00884:    	call   0xffff6ea8
  00889:    	lea    rdi,[rbp-0x8]
  0088d:    	mov    QWORD PTR [rbx],rdi
  00890:    	movq   xmm2,QWORD PTR [rsp]
  00895:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0089b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008a1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008a7:    	add    rsp,0x20
  008ab:    	test   rax,rax
  008ae:    	je     0x3a8c8
:00048 _ = %2.call t=(%6; 1)                [<INVALID>]
:00049 
  008b4:    	sub    rsp,0x20
  008b8:    	movq   QWORD PTR [rsp],xmm2
  008bd:    	movq   QWORD PTR [rsp+0x8],xmm4
  008c3:    	movq   QWORD PTR [rsp+0x10],xmm5
  008c9:    	movq   QWORD PTR [rsp+0x18],xmm6
  008cf:    	mov    rdi,QWORD PTR [rbp-0x38]
  008d3: 3a 	movabs rax,0x563a5fe2d010
  008dd:    	call   rax
  008df:    	mov    r15d,eax
  008e2: 00 	cmp    r15d,DWORD PTR [rip+0xfdb]        # 0x18c4
  008e9:    	jne    0x3a8d7
  008ef:    	mov    eax,DWORD PTR [rip+0xffffffffffff8fcb]        # 0xffff98c0
  008f5:    	cmp    DWORD PTR [rip+0xfc5],eax        # 0x18c0
  008fb:    	jne    0x3a8d7
  00901:    	mov    rax,QWORD PTR [rbx]
  00904:    	lea    rdi,[rsp-0x18]
  00909:    	mov    QWORD PTR [rdi],rax
  0090c:    	mov    QWORD PTR [rbx],rdi
  0090f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00918:    	mov    QWORD PTR [rsp-0x38],rcx
  0091d:    	mov    rax,QWORD PTR [rbp-0x38]
  00921:    	mov    QWORD PTR [rsp-0x38],rax
  00926: 00 	mov    rdi,0x1
  0092d:    	mov    rax,QWORD PTR [rbp-0x58]
  00931:    	mov    QWORD PTR [rsp-0x40],rax
  00936: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0093f: 00 	movabs rax,0x0
  00949:    	mov    QWORD PTR [rsp-0x28],rax
  0094e: 00 	movabs r13,0x0
  00958:    	call   0xffff6ea8
  0095d:    	lea    rdi,[rbp-0x8]
  00961:    	mov    QWORD PTR [rbx],rdi
  00964:    	movq   xmm2,QWORD PTR [rsp]
  00969:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0096f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00975:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0097b:    	add    rsp,0x20
  0097f:    	test   rax,rax
  00982:    	je     0x3a943
:00051 %7 = @n: <INVALID>[IvarId(0)]
  00988:    	mov    rdi,QWORD PTR [rbp-0x28]
  0098c:    	sub    rsp,0x20
  00990:    	movq   QWORD PTR [rsp],xmm2
  00995:    	movq   QWORD PTR [rsp+0x8],xmm4
  0099b:    	movq   QWORD PTR [rsp+0x10],xmm5
  009a1:    	movq   QWORD PTR [rsp+0x18],xmm6
  009a7: 00 	mov    rsi,0x82
  009ae:    	mov    rdx,r12
  009b1: 3a 	movabs rax,0x563a5fe90c70
  009bb:    	call   rax
  009bd:    	movq   xmm2,QWORD PTR [rsp]
  009c2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009c8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009ce:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009d4:    	add    rsp,0x20
  009d8:    	mov    QWORD PTR [rbp-0x60],rax
:00052 _ = %2.call n=(%7; 1)                [<INVALID>]
:00053 
  009dc:    	sub    rsp,0x20
  009e0:    	movq   QWORD PTR [rsp],xmm2
  009e5:    	movq   QWORD PTR [rsp+0x8],xmm4
  009eb:    	movq   QWORD PTR [rsp+0x10],xmm5
  009f1:    	movq   QWORD PTR [rsp+0x18],xmm6
  009f7:    	mov    rdi,QWORD PTR [rbp-0x38]
  009fb: 3a 	movabs rax,0x563a5fe2d010
  00a05:    	call   rax
  00a07:    	mov    r15d,eax
  00a0a: 00 	cmp    r15d,DWORD PTR [rip+0xebb]        # 0x18cc
  00a11:    	jne    0x3a952
  00a17:    	mov    eax,DWORD PTR [rip+0xffffffffffff8ea3]        # 0xffff98c0
  00a1d:    	cmp    DWORD PTR [rip+0xea5],eax        # 0x18c8
  00a23:    	jne    0x3a952
  00a29:    	mov    rax,QWORD PTR [rbx]
  00a2c:    	lea    rdi,[rsp-0x18]
  00a31:    	mov    QWORD PTR [rdi],rax
  00a34:    	mov    QWORD PTR [rbx],rdi
  00a37: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a40:    	mov    QWORD PTR [rsp-0x38],rcx
  00a45:    	mov    rax,QWORD PTR [rbp-0x38]
  00a49:    	mov    QWORD PTR [rsp-0x38],rax
  00a4e: 00 	mov    rdi,0x1
  00a55:    	mov    rax,QWORD PTR [rbp-0x60]
  00a59:    	mov    QWORD PTR [rsp-0x40],rax
  00a5e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a67: 00 	movabs rax,0x0
  00a71:    	mov    QWORD PTR [rsp-0x28],rax
  00a76: 00 	movabs r13,0x0
  00a80:    	call   0xffff6ea8
  00a85:    	lea    rdi,[rbp-0x8]
  00a89:    	mov    QWORD PTR [rbx],rdi
  00a8c:    	movq   xmm2,QWORD PTR [rsp]
  00a91:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a97:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a9d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00aa3:    	add    rsp,0x20
  00aa7:    	test   rax,rax
  00aaa:    	je     0x3a9be
:00055 %8 = const[Vec]                      [<INVALID>]
  00ab0: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff8e11]        # 0xffff98c8
  00ab7: 00 	cmp    rax,QWORD PTR [rip+0xe2a]        # 0x18e8
  00abe:    	jne    0x3a9cd
  00ac4: 00 	mov    rax,QWORD PTR [rip+0xe0d]        # 0x18d8
  00acb:    	mov    QWORD PTR [rbp-0x68],rax
:00056 %10 = %1.call org()                  [<INVALID>]
:00057 
  00acf:    	sub    rsp,0x20
  00ad3:    	movq   QWORD PTR [rsp],xmm2
  00ad8:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ade:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ae4:    	movq   QWORD PTR [rsp+0x18],xmm6
  00aea:    	mov    rdi,QWORD PTR [rbp-0x30]
  00aee: 3a 	movabs rax,0x563a5fe2d010
  00af8:    	call   rax
  00afa:    	mov    r15d,eax
  00afd: 00 	cmp    r15d,DWORD PTR [rip+0xdf0]        # 0x18f4
  00b04:    	jne    0x3aa49
  00b0a:    	mov    eax,DWORD PTR [rip+0xffffffffffff8db0]        # 0xffff98c0
  00b10:    	cmp    DWORD PTR [rip+0xdda],eax        # 0x18f0
  00b16:    	jne    0x3aa49
  00b1c:    	mov    rax,QWORD PTR [rbx]
  00b1f:    	lea    rdi,[rsp-0x18]
  00b24:    	mov    QWORD PTR [rdi],rax
  00b27:    	mov    QWORD PTR [rbx],rdi
  00b2a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b33:    	mov    QWORD PTR [rsp-0x38],rcx
  00b38:    	mov    rax,QWORD PTR [rbp-0x30]
  00b3c:    	mov    QWORD PTR [rsp-0x38],rax
  00b41: 00 	mov    rdi,0x0
  00b48: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b51: 00 	movabs rax,0x0
  00b5b:    	mov    QWORD PTR [rsp-0x28],rax
  00b60: 00 	movabs r13,0x0
  00b6a:    	call   0xffff6ea8
  00b6f:    	lea    rdi,[rbp-0x8]
  00b73:    	mov    QWORD PTR [rbx],rdi
  00b76:    	movq   xmm2,QWORD PTR [rsp]
  00b7b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b81:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b87:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b8d:    	add    rsp,0x20
  00b91:    	test   rax,rax
  00b94:    	je     0x3aab5
  00b9a:    	mov    QWORD PTR [rbp-0x78],rax
:00059 %9 = %10.call x()                    [<INVALID>]
:00060 
  00b9e:    	sub    rsp,0x20
  00ba2:    	movq   QWORD PTR [rsp],xmm2
  00ba7:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bad:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bb3:    	movq   QWORD PTR [rsp+0x18],xmm6
  00bb9:    	mov    rdi,QWORD PTR [rbp-0x78]
  00bbd: 3a 	movabs rax,0x563a5fe2d010
  00bc7:    	call   rax
  00bc9:    	mov    r15d,eax
  00bcc: 00 	cmp    r15d,DWORD PTR [rip+0xd29]        # 0x18fc
  00bd3:    	jne    0x3aac4
  00bd9:    	mov    eax,DWORD PTR [rip+0xffffffffffff8ce1]        # 0xffff98c0
  00bdf:    	cmp    DWORD PTR [rip+0xd13],eax        # 0x18f8
  00be5:    	jne    0x3aac4
  00beb:    	mov    rax,QWORD PTR [rbx]
  00bee:    	lea    rdi,[rsp-0x18]
  00bf3:    	mov    QWORD PTR [rdi],rax
  00bf6:    	mov    QWORD PTR [rbx],rdi
  00bf9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c02:    	mov    QWORD PTR [rsp-0x38],rcx
  00c07:    	mov    rax,QWORD PTR [rbp-0x78]
  00c0b:    	mov    QWORD PTR [rsp-0x38],rax
  00c10: 00 	mov    rdi,0x0
  00c17: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c20: 00 	movabs rax,0x0
  00c2a:    	mov    QWORD PTR [rsp-0x28],rax
  00c2f: 00 	movabs r13,0x0
  00c39:    	call   0xffff6ea8
  00c3e:    	lea    rdi,[rbp-0x8]
  00c42:    	mov    QWORD PTR [rbx],rdi
  00c45:    	movq   xmm2,QWORD PTR [rsp]
  00c4a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c50:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c56:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c5c:    	add    rsp,0x20
  00c60:    	test   rax,rax
  00c63:    	je     0x3ab30
  00c69:    	mov    QWORD PTR [rbp-0x70],rax
:00062 %11 = %1.call dir()                  [<INVALID>]
:00063 
  00c6d:    	sub    rsp,0x20
  00c71:    	movq   QWORD PTR [rsp],xmm2
  00c76:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c7c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c82:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c88:    	mov    rdi,QWORD PTR [rbp-0x30]
  00c8c: 3a 	movabs rax,0x563a5fe2d010
  00c96:    	call   rax
  00c98:    	mov    r15d,eax
  00c9b: 00 	cmp    r15d,DWORD PTR [rip+0xc62]        # 0x1904
  00ca2:    	jne    0x3ab3f
  00ca8:    	mov    eax,DWORD PTR [rip+0xffffffffffff8c12]        # 0xffff98c0
  00cae:    	cmp    DWORD PTR [rip+0xc4c],eax        # 0x1900
  00cb4:    	jne    0x3ab3f
  00cba:    	mov    rax,QWORD PTR [rbx]
  00cbd:    	lea    rdi,[rsp-0x18]
  00cc2:    	mov    QWORD PTR [rdi],rax
  00cc5:    	mov    QWORD PTR [rbx],rdi
  00cc8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cd1:    	mov    QWORD PTR [rsp-0x38],rcx
  00cd6:    	mov    rax,QWORD PTR [rbp-0x30]
  00cda:    	mov    QWORD PTR [rsp-0x38],rax
  00cdf: 00 	mov    rdi,0x0
  00ce6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00cef: 00 	movabs rax,0x0
  00cf9:    	mov    QWORD PTR [rsp-0x28],rax
  00cfe: 00 	movabs r13,0x0
  00d08:    	call   0xffff6ea8
  00d0d:    	lea    rdi,[rbp-0x8]
  00d11:    	mov    QWORD PTR [rbx],rdi
  00d14:    	movq   xmm2,QWORD PTR [rsp]
  00d19:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d1f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d25:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d2b:    	add    rsp,0x20
  00d2f:    	test   rax,rax
  00d32:    	je     0x3abab
  00d38:    	mov    QWORD PTR [rbp-0x80],rax
:00065 %10 = %11.call x()                   [<INVALID>]
:00066 
  00d3c:    	sub    rsp,0x20
  00d40:    	movq   QWORD PTR [rsp],xmm2
  00d45:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d4b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d51:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d57:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d5b: 3a 	movabs rax,0x563a5fe2d010
  00d65:    	call   rax
  00d67:    	mov    r15d,eax
  00d6a: 00 	cmp    r15d,DWORD PTR [rip+0xb9b]        # 0x190c
  00d71:    	jne    0x3abba
  00d77:    	mov    eax,DWORD PTR [rip+0xffffffffffff8b43]        # 0xffff98c0
  00d7d:    	cmp    DWORD PTR [rip+0xb85],eax        # 0x1908
  00d83:    	jne    0x3abba
  00d89:    	mov    rax,QWORD PTR [rbx]
  00d8c:    	lea    rdi,[rsp-0x18]
  00d91:    	mov    QWORD PTR [rdi],rax
  00d94:    	mov    QWORD PTR [rbx],rdi
  00d97: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00da0:    	mov    QWORD PTR [rsp-0x38],rcx
  00da5:    	mov    rax,QWORD PTR [rbp-0x80]
  00da9:    	mov    QWORD PTR [rsp-0x38],rax
  00dae: 00 	mov    rdi,0x0
  00db5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00dbe: 00 	movabs rax,0x0
  00dc8:    	mov    QWORD PTR [rsp-0x28],rax
  00dcd: 00 	movabs r13,0x0
  00dd7:    	call   0xffff6ea8
  00ddc:    	lea    rdi,[rbp-0x8]
  00de0:    	mov    QWORD PTR [rbx],rdi
  00de3:    	movq   xmm2,QWORD PTR [rsp]
  00de8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00dee:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00df4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00dfa:    	add    rsp,0x20
  00dfe:    	test   rax,rax
  00e01:    	je     0x3ac26
  00e07:    	mov    QWORD PTR [rbp-0x78],rax
:00068 %10 = %6 * %10                       [Integer][Integer]
  00e0b:    	mov    rdi,QWORD PTR [rbp-0x58]
  00e0f:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e13:    	sub    rsp,0x20
  00e17:    	movq   QWORD PTR [rsp],xmm2
  00e1c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e22:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e28:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e2e:    	mov    rdx,rdi
  00e31:    	mov    rcx,rsi
  00e34:    	mov    rdi,rbx
  00e37:    	mov    rsi,r12
  00e3a: 3a 	movabs rax,0x563a5fe5c230
  00e44:    	call   rax
  00e46:    	movq   xmm2,QWORD PTR [rsp]
  00e4b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e51:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e57:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e5d:    	add    rsp,0x20
  00e61: 3a 	movabs r13,0x563a608e8930
  00e6b:    	test   rax,rax
  00e6e:    	je     0xffff6ee3
  00e74:    	mov    QWORD PTR [rbp-0x78],rax
:00069 %9 = %9 + %10                        [Integer][Integer]
  00e78:    	mov    rdi,QWORD PTR [rbp-0x70]
  00e7c:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e80: 00 	test   rdi,0x1
  00e87:    	je     0x3ac51
  00e8d: 00 	test   rsi,0x1
  00e94:    	je     0x3ac51
  00e9a:    	sub    rdi,0x1
  00e9e:    	add    rdi,rsi
  00ea1:    	jo     0x3ac51
  00ea7:    	mov    QWORD PTR [rbp-0x70],rdi
:00070 %11 = %1.call org()                  [<INVALID>]
:00071 
  00eab:    	sub    rsp,0x20
  00eaf:    	movq   QWORD PTR [rsp],xmm2
  00eb4:    	movq   QWORD PTR [rsp+0x8],xmm4
  00eba:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ec0:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ec6:    	mov    rdi,QWORD PTR [rbp-0x30]
  00eca: 3a 	movabs rax,0x563a5fe2d010
  00ed4:    	call   rax
  00ed6:    	mov    r15d,eax
  00ed9: 00 	cmp    r15d,DWORD PTR [rip+0xa34]        # 0x1914
  00ee0:    	jne    0x3ac6d
  00ee6:    	mov    eax,DWORD PTR [rip+0xffffffffffff89d4]        # 0xffff98c0
  00eec:    	cmp    DWORD PTR [rip+0xa1e],eax        # 0x1910
  00ef2:    	jne    0x3ac6d
  00ef8:    	mov    rax,QWORD PTR [rbx]
  00efb:    	lea    rdi,[rsp-0x18]
  00f00:    	mov    QWORD PTR [rdi],rax
  00f03:    	mov    QWORD PTR [rbx],rdi
  00f06: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f0f:    	mov    QWORD PTR [rsp-0x38],rcx
  00f14:    	mov    rax,QWORD PTR [rbp-0x30]
  00f18:    	mov    QWORD PTR [rsp-0x38],rax
  00f1d: 00 	mov    rdi,0x0
  00f24: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f2d: 00 	movabs rax,0x0
  00f37:    	mov    QWORD PTR [rsp-0x28],rax
  00f3c: 00 	movabs r13,0x0
  00f46:    	call   0xffff6ea8
  00f4b:    	lea    rdi,[rbp-0x8]
  00f4f:    	mov    QWORD PTR [rbx],rdi
  00f52:    	movq   xmm2,QWORD PTR [rsp]
  00f57:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f5d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f63:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f69:    	add    rsp,0x20
  00f6d:    	test   rax,rax
  00f70:    	je     0x3acd9
  00f76:    	mov    QWORD PTR [rbp-0x80],rax
:00073 %10 = %11.call y()                   [<INVALID>]
:00074 
  00f7a:    	sub    rsp,0x20
  00f7e:    	movq   QWORD PTR [rsp],xmm2
  00f83:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f89:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f8f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f95:    	mov    rdi,QWORD PTR [rbp-0x80]
  00f99: 3a 	movabs rax,0x563a5fe2d010
  00fa3:    	call   rax
  00fa5:    	mov    r15d,eax
  00fa8: 00 	cmp    r15d,DWORD PTR [rip+0x96d]        # 0x191c
  00faf:    	jne    0x3ace8
  00fb5:    	mov    eax,DWORD PTR [rip+0xffffffffffff8905]        # 0xffff98c0
  00fbb:    	cmp    DWORD PTR [rip+0x957],eax        # 0x1918
  00fc1:    	jne    0x3ace8
  00fc7:    	mov    rax,QWORD PTR [rbx]
  00fca:    	lea    rdi,[rsp-0x18]
  00fcf:    	mov    QWORD PTR [rdi],rax
  00fd2:    	mov    QWORD PTR [rbx],rdi
  00fd5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fde:    	mov    QWORD PTR [rsp-0x38],rcx
  00fe3:    	mov    rax,QWORD PTR [rbp-0x80]
  00fe7:    	mov    QWORD PTR [rsp-0x38],rax
  00fec: 00 	mov    rdi,0x0
  00ff3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ffc: 00 	movabs rax,0x0
  01006:    	mov    QWORD PTR [rsp-0x28],rax
  0100b: 00 	movabs r13,0x0
  01015:    	call   0xffff6ea8
  0101a:    	lea    rdi,[rbp-0x8]
  0101e:    	mov    QWORD PTR [rbx],rdi
  01021:    	movq   xmm2,QWORD PTR [rsp]
  01026:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0102c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01032:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01038:    	add    rsp,0x20
  0103c:    	test   rax,rax
  0103f:    	je     0x3ad54
  01045:    	mov    QWORD PTR [rbp-0x78],rax
:00076 %12 = %1.call dir()                  [<INVALID>]
:00077 
  01049:    	sub    rsp,0x20
  0104d:    	movq   QWORD PTR [rsp],xmm2
  01052:    	movq   QWORD PTR [rsp+0x8],xmm4
  01058:    	movq   QWORD PTR [rsp+0x10],xmm5
  0105e:    	movq   QWORD PTR [rsp+0x18],xmm6
  01064:    	mov    rdi,QWORD PTR [rbp-0x30]
  01068: 3a 	movabs rax,0x563a5fe2d010
  01072:    	call   rax
  01074:    	mov    r15d,eax
  01077: 00 	cmp    r15d,DWORD PTR [rip+0x8a6]        # 0x1924
  0107e:    	jne    0x3ad63
  01084:    	mov    eax,DWORD PTR [rip+0xffffffffffff8836]        # 0xffff98c0
  0108a:    	cmp    DWORD PTR [rip+0x890],eax        # 0x1920
  01090:    	jne    0x3ad63
  01096:    	mov    rax,QWORD PTR [rbx]
  01099:    	lea    rdi,[rsp-0x18]
  0109e:    	mov    QWORD PTR [rdi],rax
  010a1:    	mov    QWORD PTR [rbx],rdi
  010a4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010ad:    	mov    QWORD PTR [rsp-0x38],rcx
  010b2:    	mov    rax,QWORD PTR [rbp-0x30]
  010b6:    	mov    QWORD PTR [rsp-0x38],rax
  010bb: 00 	mov    rdi,0x0
  010c2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010cb: 00 	movabs rax,0x0
  010d5:    	mov    QWORD PTR [rsp-0x28],rax
  010da: 00 	movabs r13,0x0
  010e4:    	call   0xffff6ea8
  010e9:    	lea    rdi,[rbp-0x8]
  010ed:    	mov    QWORD PTR [rbx],rdi
  010f0:    	movq   xmm2,QWORD PTR [rsp]
  010f5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010fb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01101:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01107:    	add    rsp,0x20
  0110b:    	test   rax,rax
  0110e:    	je     0x3adcf
  01114: ff 	mov    QWORD PTR [rbp-0x88],rax
:00079 %11 = %12.call y()                   [<INVALID>]
:00080 
  0111b:    	sub    rsp,0x20
  0111f:    	movq   QWORD PTR [rsp],xmm2
  01124:    	movq   QWORD PTR [rsp+0x8],xmm4
  0112a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01130:    	movq   QWORD PTR [rsp+0x18],xmm6
  01136: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0113d: 3a 	movabs rax,0x563a5fe2d010
  01147:    	call   rax
  01149:    	mov    r15d,eax
  0114c: 00 	cmp    r15d,DWORD PTR [rip+0x7d9]        # 0x192c
  01153:    	jne    0x3adde
  01159:    	mov    eax,DWORD PTR [rip+0xffffffffffff8761]        # 0xffff98c0
  0115f:    	cmp    DWORD PTR [rip+0x7c3],eax        # 0x1928
  01165:    	jne    0x3adde
  0116b:    	mov    rax,QWORD PTR [rbx]
  0116e:    	lea    rdi,[rsp-0x18]
  01173:    	mov    QWORD PTR [rdi],rax
  01176:    	mov    QWORD PTR [rbx],rdi
  01179: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01182:    	mov    QWORD PTR [rsp-0x38],rcx
  01187: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0118e:    	mov    QWORD PTR [rsp-0x38],rax
  01193: 00 	mov    rdi,0x0
  0119a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011a3: 00 	movabs rax,0x0
  011ad:    	mov    QWORD PTR [rsp-0x28],rax
  011b2: 00 	movabs r13,0x0
  011bc:    	call   0xffff6ea8
  011c1:    	lea    rdi,[rbp-0x8]
  011c5:    	mov    QWORD PTR [rbx],rdi
  011c8:    	movq   xmm2,QWORD PTR [rsp]
  011cd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011d3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011d9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011df:    	add    rsp,0x20
  011e3:    	test   rax,rax
  011e6:    	je     0x3ae4d
  011ec:    	mov    QWORD PTR [rbp-0x80],rax
:00082 %11 = %6 * %11                       [Integer][Integer]
  011f0:    	mov    rdi,QWORD PTR [rbp-0x58]
  011f4:    	mov    rsi,QWORD PTR [rbp-0x80]
  011f8:    	sub    rsp,0x20
  011fc:    	movq   QWORD PTR [rsp],xmm2
  01201:    	movq   QWORD PTR [rsp+0x8],xmm4
  01207:    	movq   QWORD PTR [rsp+0x10],xmm5
  0120d:    	movq   QWORD PTR [rsp+0x18],xmm6
  01213:    	mov    rdx,rdi
  01216:    	mov    rcx,rsi
  01219:    	mov    rdi,rbx
  0121c:    	mov    rsi,r12
  0121f: 3a 	movabs rax,0x563a5fe5c230
  01229:    	call   rax
  0122b:    	movq   xmm2,QWORD PTR [rsp]
  01230:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01236:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0123c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01242:    	add    rsp,0x20
  01246: 3a 	movabs r13,0x563a608e8a10
  01250:    	test   rax,rax
  01253:    	je     0xffff6ee3
  01259:    	mov    QWORD PTR [rbp-0x80],rax
:00083 %10 = %10 + %11                      [Integer][Integer]
  0125d:    	mov    rdi,QWORD PTR [rbp-0x78]
  01261:    	mov    rsi,QWORD PTR [rbp-0x80]
  01265: 00 	test   rdi,0x1
  0126c:    	je     0x3ae78
  01272: 00 	test   rsi,0x1
  01279:    	je     0x3ae78
  0127f:    	sub    rdi,0x1
  01283:    	add    rdi,rsi
  01286:    	jo     0x3ae78
  0128c:    	mov    QWORD PTR [rbp-0x78],rdi
:00084 %12 = %1.call org()                  [<INVALID>]
:00085 
  01290:    	sub    rsp,0x20
  01294:    	movq   QWORD PTR [rsp],xmm2
  01299:    	movq   QWORD PTR [rsp+0x8],xmm4
  0129f:    	movq   QWORD PTR [rsp+0x10],xmm5
  012a5:    	movq   QWORD PTR [rsp+0x18],xmm6
  012ab:    	mov    rdi,QWORD PTR [rbp-0x30]
  012af: 3a 	movabs rax,0x563a5fe2d010
  012b9:    	call   rax
  012bb:    	mov    r15d,eax
  012be: 00 	cmp    r15d,DWORD PTR [rip+0x66f]        # 0x1934
  012c5:    	jne    0x3ae94
  012cb:    	mov    eax,DWORD PTR [rip+0xffffffffffff85ef]        # 0xffff98c0
  012d1:    	cmp    DWORD PTR [rip+0x659],eax        # 0x1930
  012d7:    	jne    0x3ae94
  012dd:    	mov    rax,QWORD PTR [rbx]
  012e0:    	lea    rdi,[rsp-0x18]
  012e5:    	mov    QWORD PTR [rdi],rax
  012e8:    	mov    QWORD PTR [rbx],rdi
  012eb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012f4:    	mov    QWORD PTR [rsp-0x38],rcx
  012f9:    	mov    rax,QWORD PTR [rbp-0x30]
  012fd:    	mov    QWORD PTR [rsp-0x38],rax
  01302: 00 	mov    rdi,0x0
  01309: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01312: 00 	movabs rax,0x0
  0131c:    	mov    QWORD PTR [rsp-0x28],rax
  01321: 00 	movabs r13,0x0
  0132b:    	call   0xffff6ea8
  01330:    	lea    rdi,[rbp-0x8]
  01334:    	mov    QWORD PTR [rbx],rdi
  01337:    	movq   xmm2,QWORD PTR [rsp]
  0133c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01342:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01348:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0134e:    	add    rsp,0x20
  01352:    	test   rax,rax
  01355:    	je     0x3af00
  0135b: ff 	mov    QWORD PTR [rbp-0x88],rax
:00087 %11 = %12.call z()                   [<INVALID>]
:00088 
  01362:    	sub    rsp,0x20
  01366:    	movq   QWORD PTR [rsp],xmm2
  0136b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01371:    	movq   QWORD PTR [rsp+0x10],xmm5
  01377:    	movq   QWORD PTR [rsp+0x18],xmm6
  0137d: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01384: 3a 	movabs rax,0x563a5fe2d010
  0138e:    	call   rax
  01390:    	mov    r15d,eax
  01393: 00 	cmp    r15d,DWORD PTR [rip+0x5a2]        # 0x193c
  0139a:    	jne    0x3af0f
  013a0:    	mov    eax,DWORD PTR [rip+0xffffffffffff851a]        # 0xffff98c0
  013a6:    	cmp    DWORD PTR [rip+0x58c],eax        # 0x1938
  013ac:    	jne    0x3af0f
  013b2:    	mov    rax,QWORD PTR [rbx]
  013b5:    	lea    rdi,[rsp-0x18]
  013ba:    	mov    QWORD PTR [rdi],rax
  013bd:    	mov    QWORD PTR [rbx],rdi
  013c0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  013c9:    	mov    QWORD PTR [rsp-0x38],rcx
  013ce: ff 	mov    rax,QWORD PTR [rbp-0x88]
  013d5:    	mov    QWORD PTR [rsp-0x38],rax
  013da: 00 	mov    rdi,0x0
  013e1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  013ea: 00 	movabs rax,0x0
  013f4:    	mov    QWORD PTR [rsp-0x28],rax
  013f9: 00 	movabs r13,0x0
  01403:    	call   0xffff6ea8
  01408:    	lea    rdi,[rbp-0x8]
  0140c:    	mov    QWORD PTR [rbx],rdi
  0140f:    	movq   xmm2,QWORD PTR [rsp]
  01414:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0141a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01420:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01426:    	add    rsp,0x20
  0142a:    	test   rax,rax
  0142d:    	je     0x3af7e
  01433:    	mov    QWORD PTR [rbp-0x80],rax
:00090 %13 = %1.call dir()                  [<INVALID>]
:00091 
  01437:    	sub    rsp,0x20
  0143b:    	movq   QWORD PTR [rsp],xmm2
  01440:    	movq   QWORD PTR [rsp+0x8],xmm4
  01446:    	movq   QWORD PTR [rsp+0x10],xmm5
  0144c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01452:    	mov    rdi,QWORD PTR [rbp-0x30]
  01456: 3a 	movabs rax,0x563a5fe2d010
  01460:    	call   rax
  01462:    	mov    r15d,eax
  01465: 00 	cmp    r15d,DWORD PTR [rip+0x4d8]        # 0x1944
  0146c:    	jne    0x3af8d
  01472:    	mov    eax,DWORD PTR [rip+0xffffffffffff8448]        # 0xffff98c0
  01478:    	cmp    DWORD PTR [rip+0x4c2],eax        # 0x1940
  0147e:    	jne    0x3af8d
  01484:    	mov    rax,QWORD PTR [rbx]
  01487:    	lea    rdi,[rsp-0x18]
  0148c:    	mov    QWORD PTR [rdi],rax
  0148f:    	mov    QWORD PTR [rbx],rdi
  01492: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0149b:    	mov    QWORD PTR [rsp-0x38],rcx
  014a0:    	mov    rax,QWORD PTR [rbp-0x30]
  014a4:    	mov    QWORD PTR [rsp-0x38],rax
  014a9: 00 	mov    rdi,0x0
  014b0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014b9: 00 	movabs rax,0x0
  014c3:    	mov    QWORD PTR [rsp-0x28],rax
  014c8: 00 	movabs r13,0x0
  014d2:    	call   0xffff6ea8
  014d7:    	lea    rdi,[rbp-0x8]
  014db:    	mov    QWORD PTR [rbx],rdi
  014de:    	movq   xmm2,QWORD PTR [rsp]
  014e3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014e9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  014ef:    	movq   xmm6,QWORD PTR [rsp+0x18]
  014f5:    	add    rsp,0x20
  014f9:    	test   rax,rax
  014fc:    	je     0x3aff9
  01502: ff 	mov    QWORD PTR [rbp-0x90],rax
:00093 %12 = %13.call z()                   [<INVALID>]
:00094 
  01509:    	sub    rsp,0x20
  0150d:    	movq   QWORD PTR [rsp],xmm2
  01512:    	movq   QWORD PTR [rsp+0x8],xmm4
  01518:    	movq   QWORD PTR [rsp+0x10],xmm5
  0151e:    	movq   QWORD PTR [rsp+0x18],xmm6
  01524: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0152b: 3a 	movabs rax,0x563a5fe2d010
  01535:    	call   rax
  01537:    	mov    r15d,eax
  0153a: 00 	cmp    r15d,DWORD PTR [rip+0x40b]        # 0x194c
  01541:    	jne    0x3b008
  01547:    	mov    eax,DWORD PTR [rip+0xffffffffffff8373]        # 0xffff98c0
  0154d:    	cmp    DWORD PTR [rip+0x3f5],eax        # 0x1948
  01553:    	jne    0x3b008
  01559:    	mov    rax,QWORD PTR [rbx]
  0155c:    	lea    rdi,[rsp-0x18]
  01561:    	mov    QWORD PTR [rdi],rax
  01564:    	mov    QWORD PTR [rbx],rdi
  01567: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01570:    	mov    QWORD PTR [rsp-0x38],rcx
  01575: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0157c:    	mov    QWORD PTR [rsp-0x38],rax
  01581: 00 	mov    rdi,0x0
  01588: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01591: 00 	movabs rax,0x0
  0159b:    	mov    QWORD PTR [rsp-0x28],rax
  015a0: 00 	movabs r13,0x0
  015aa:    	call   0xffff6ea8
  015af:    	lea    rdi,[rbp-0x8]
  015b3:    	mov    QWORD PTR [rbx],rdi
  015b6:    	movq   xmm2,QWORD PTR [rsp]
  015bb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015c1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  015c7:    	movq   xmm6,QWORD PTR [rsp+0x18]
  015cd:    	add    rsp,0x20
  015d1:    	test   rax,rax
  015d4:    	je     0x3b077
  015da: ff 	mov    QWORD PTR [rbp-0x88],rax
:00096 %12 = %6 * %12                       [Integer][Integer]
  015e1:    	mov    rdi,QWORD PTR [rbp-0x58]
  015e5: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  015ec:    	sub    rsp,0x20
  015f0:    	movq   QWORD PTR [rsp],xmm2
  015f5:    	movq   QWORD PTR [rsp+0x8],xmm4
  015fb:    	movq   QWORD PTR [rsp+0x10],xmm5
  01601:    	movq   QWORD PTR [rsp+0x18],xmm6
  01607:    	mov    rdx,rdi
  0160a:    	mov    rcx,rsi
  0160d:    	mov    rdi,rbx
  01610:    	mov    rsi,r12
  01613: 3a 	movabs rax,0x563a5fe5c230
  0161d:    	call   rax
  0161f:    	movq   xmm2,QWORD PTR [rsp]
  01624:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0162a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01630:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01636:    	add    rsp,0x20
  0163a: 3a 	movabs r13,0x563a608e8af0
  01644:    	test   rax,rax
  01647:    	je     0xffff6ee3
  0164d: ff 	mov    QWORD PTR [rbp-0x88],rax
:00097 %11 = %11 + %12                      [Integer][Integer]
  01654:    	mov    rdi,QWORD PTR [rbp-0x80]
  01658: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  0165f: 00 	test   rdi,0x1
  01666:    	je     0x3b0a2
  0166c: 00 	test   rsi,0x1
  01673:    	je     0x3b0a2
  01679:    	sub    rdi,0x1
  0167d:    	add    rdi,rsi
  01680:    	jo     0x3b0a2
  01686:    	mov    QWORD PTR [rbp-0x80],rdi
:00098 %7 = %8.call new(%9; 3)              [<INVALID>]
:00099 
  0168a:    	sub    rsp,0x20
  0168e:    	movq   QWORD PTR [rsp],xmm2
  01693:    	movq   QWORD PTR [rsp+0x8],xmm4
  01699:    	movq   QWORD PTR [rsp+0x10],xmm5
  0169f:    	movq   QWORD PTR [rsp+0x18],xmm6
  016a5:    	mov    rdi,QWORD PTR [rbp-0x68]
  016a9: 3a 	movabs rax,0x563a5fe2d010
  016b3:    	call   rax
  016b5:    	mov    r15d,eax
  016b8: 00 	cmp    r15d,DWORD PTR [rip+0x295]        # 0x1954
  016bf:    	jne    0x3b0be
  016c5:    	mov    eax,DWORD PTR [rip+0xffffffffffff81f5]        # 0xffff98c0
  016cb:    	cmp    DWORD PTR [rip+0x27f],eax        # 0x1950
  016d1:    	jne    0x3b0be
  016d7:    	mov    rax,QWORD PTR [rbx]
  016da:    	lea    rdi,[rsp-0x18]
  016df:    	mov    QWORD PTR [rdi],rax
  016e2:    	mov    QWORD PTR [rbx],rdi
  016e5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016ee:    	mov    QWORD PTR [rsp-0x38],rcx
  016f3:    	mov    rax,QWORD PTR [rbp-0x68]
  016f7:    	mov    QWORD PTR [rsp-0x38],rax
  016fc: 00 	mov    rdi,0x3
  01703:    	mov    rax,QWORD PTR [rbp-0x70]
  01707:    	mov    QWORD PTR [rsp-0x40],rax
  0170c:    	mov    rax,QWORD PTR [rbp-0x78]
  01710:    	mov    QWORD PTR [rsp-0x48],rax
  01715:    	mov    rax,QWORD PTR [rbp-0x80]
  01719:    	mov    QWORD PTR [rsp-0x50],rax
  0171e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01727: 00 	movabs rax,0x0
  01731:    	mov    QWORD PTR [rsp-0x28],rax
  01736: 00 	movabs r13,0x0
  01740:    	call   0xffff6ea8
  01745:    	lea    rdi,[rbp-0x8]
  01749:    	mov    QWORD PTR [rbx],rdi
  0174c:    	movq   xmm2,QWORD PTR [rsp]
  01751:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01757:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0175d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01763:    	add    rsp,0x20
  01767:    	test   rax,rax
  0176a:    	je     0x3b12a
  01770:    	mov    QWORD PTR [rbp-0x60],rax
:00101 _ = %2.call pl=(%7; 1)               [<INVALID>]
:00102 
  01774:    	sub    rsp,0x20
  01778:    	movq   QWORD PTR [rsp],xmm2
  0177d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01783:    	movq   QWORD PTR [rsp+0x10],xmm5
  01789:    	movq   QWORD PTR [rsp+0x18],xmm6
  0178f:    	mov    rdi,QWORD PTR [rbp-0x38]
  01793: 3a 	movabs rax,0x563a5fe2d010
  0179d:    	call   rax
  0179f:    	mov    r15d,eax
  017a2: 00 	cmp    r15d,DWORD PTR [rip+0x1b3]        # 0x195c
  017a9:    	jne    0x3b139
  017af:    	mov    eax,DWORD PTR [rip+0xffffffffffff810b]        # 0xffff98c0
  017b5:    	cmp    DWORD PTR [rip+0x19d],eax        # 0x1958
  017bb:    	jne    0x3b139
  017c1:    	mov    rax,QWORD PTR [rbx]
  017c4:    	lea    rdi,[rsp-0x18]
  017c9:    	mov    QWORD PTR [rdi],rax
  017cc:    	mov    QWORD PTR [rbx],rdi
  017cf: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017d8:    	mov    QWORD PTR [rsp-0x38],rcx
  017dd:    	mov    rax,QWORD PTR [rbp-0x38]
  017e1:    	mov    QWORD PTR [rsp-0x38],rax
  017e6: 00 	mov    rdi,0x1
  017ed:    	mov    rax,QWORD PTR [rbp-0x60]
  017f1:    	mov    QWORD PTR [rsp-0x40],rax
  017f6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  017ff: 00 	movabs rax,0x0
  01809:    	mov    QWORD PTR [rsp-0x28],rax
  0180e: 00 	movabs r13,0x0
  01818:    	call   0xffff6ea8
  0181d:    	lea    rdi,[rbp-0x8]
  01821:    	mov    QWORD PTR [rbx],rdi
  01824:    	movq   xmm2,QWORD PTR [rsp]
  01829:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0182f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01835:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0183b:    	add    rsp,0x20
  0183f:    	test   rax,rax
  01842:    	je     0x3b1a5
:00104 br =>:00105
  01848:    	jmp    0x3b1da
:00105 %7 = nil
  0184d: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00106 ret %7
  01855:    	mov    rax,QWORD PTR [rbp-0x60]
  01859:    	leave  
  0185a:    	ret    
==> start whole compile: clamp FuncId(52) self_class:Scene start:[00000] bytecode:0x563a60931370
<== finished compile. elapsed:34.8µs
offset:Pos(43704) code: 430 bytes  data: 82 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x38],0x4
  00010: mov    QWORD PTR [rbp-0x40],0x4
  00018: mov    rdi,QWORD PTR [rbp-0x28]
  0001c: test   rdi,0x7
  00023: jne    0x398a0
  00029: cmp    DWORD PTR [rdi+0x4],0x2f
  0002d: jne    0x398a0
:00000 %3 = literal[255.5]
  00033: movq   xmm2,QWORD PTR [rip+0x17d]        # 0x1b8
:00001 %2 = %1 * %3                         [Float][Float]
  0003b: mov    rdi,QWORD PTR [rbp-0x30]
  0003f: test   rdi,0x1
  00046: jne    0x398af
  0004c: test   rdi,0x2
  00053: je     0x8f
  00059: xorps  xmm3,xmm3
  0005c: movabs rax,0x8000000000000002
  00066: cmp    rdi,rax
  00069: je     0xa1
  0006f: mov    rax,rdi
  00072: sar    rax,0x3f
  00076: add    rax,0x2
  0007a: and    rdi,0xfffffffffffffffc
  0007e: or     rdi,rax
  00081: rol    rdi,0x3d
  00085: movq   xmm3,rdi
  0008a: jmp    0xa1
  0008f: call   0xffff55bc
  00094: test   rax,rax
  00097: je     0x398af
  0009d: movq   xmm3,xmm0
  000a1: movq   xmm4,xmm3
  000a5: mulsd  xmm4,xmm2
:00002 %3 = literal[255.0]
  000a9: movq   xmm2,QWORD PTR [rip+0x117]        # 0x1c8
:00003 _%3 = %2 > %3                        [Float][Float]
:00004 condnotbr _%3 =>:00007
  000b1: ucomisd xmm4,xmm2
  000b5: jbe    0x398cb
:00005 %2 = literal[255.0]
  000bb: movq   xmm4,QWORD PTR [rip+0x115]        # 0x1d8
:00006 br =>:00007
  000c3: jmp    0x398fe
:00007 %3 = literal[0.0]
  000c8: movq   xmm2,QWORD PTR [rip+0x118]        # 0x1e8
:00008 _%3 = %2 < %3                        [Float][Float]
:00009 condnotbr _%3 =>:00012
  000d0: ucomisd xmm4,xmm2
  000d4: jae    0x39931
:00010 %2 = literal[0.0]
  000da: movq   xmm4,QWORD PTR [rip+0x116]        # 0x1f8
:00011 br =>:00012
  000e2: jmp    0x39964
:00012 %3 = %2.call to_i()                  [Float]
:00013 
  000e7: movq   xmm0,xmm4
  000eb: call   0xffff56af
  000f0: mov    QWORD PTR [rbp-0x38],rax
  000f4: mov    rdi,QWORD PTR [rbp-0x38]
  000f8: test   rdi,0x1
  000ff: jne    0x39997
  00105: test   rdi,0x2
  0010c: jne    0x129
  00112: test   rdi,0x7
  00119: jne    0x39997
  0011f: cmp    DWORD PTR [rdi+0x4],0x7
  00123: jne    0x39997
  00129: cmp    DWORD PTR [rip+0xffffffffffff7e30],0x26        # 0xffff7f60
  00130: jne    0x39997
  00136: mov    r9,0x0
  0013d: sub    rsp,0x10
  00141: movq   QWORD PTR [rsp],xmm3
  00146: movq   QWORD PTR [rsp+0x8],xmm4
  0014c: mov    rdx,rdi
  0014f: mov    rax,QWORD PTR [rbx]
  00152: lea    rdi,[rsp-0x18]
  00157: mov    QWORD PTR [rdi],rax
  0015a: mov    QWORD PTR [rbx],rdi
  0015d: mov    QWORD PTR [rsp-0x20],0x0
  00166: mov    QWORD PTR [rsp-0x38],rcx
  0016b: lea    rcx,[rbp-0x48]
  0016f: mov    r8,0x0
  00176: call   0x399a6
  0017b: lea    rdi,[rbp-0x8]
  0017f: mov    QWORD PTR [rbx],rdi
  00182: movq   xmm3,QWORD PTR [rsp]
  00187: movq   xmm4,QWORD PTR [rsp+0x8]
  0018d: add    rsp,0x10
  00191: movabs r13,0x563a60931450
  0019b: test   rax,rax
  0019e: je     0xffff5583
  001a4: mov    QWORD PTR [rbp-0x40],rax
:00015 ret %3
  001a8: mov    rax,QWORD PTR [rbp-0x40]
  001ac: leave  
  001ad: ret    
==> start whole compile: <unnamed> FuncId(75) self_class:Scene start:[00000] bytecode:0x563a60920040
<== finished compile. elapsed:15.3µs
offset:Pos(44216) code: 223 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x397d8
  0002c: cmp    DWORD PTR [rdi+0x4],0x2f
  00030: jne    0x397d8
:00000 %3 = dynvar(3, %3)
  00036: mov    rax,QWORD PTR [rbp-0x10]
  0003a: mov    rax,QWORD PTR [rax]
  0003d: mov    rax,QWORD PTR [rax]
  00040: mov    rax,QWORD PTR [rax-0x30]
  00044: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = literal[76]
  00048: mov    rax,0x99
  0004f: mov    QWORD PTR [rbp-0x48],rax
:00002 %2 = %3.call times(&%4)              [Integer]
:00003 
  00053: mov    rdi,QWORD PTR [rbp-0x40]
  00057: test   rdi,0x1
  0005e: jne    0x7b
  00064: test   rdi,0x7
  0006b: jne    0x397e7
  00071: cmp    DWORD PTR [rdi+0x4],0x6
  00075: jne    0x397e7
  0007b: cmp    DWORD PTR [rip+0xffffffffffff7cde],0x26        # 0xffff7d60
  00082: jne    0x397e7
  00088: mov    r9,QWORD PTR [rbp-0x48]
  0008c: mov    rdx,rdi
  0008f: mov    rax,QWORD PTR [rbx]
  00092: lea    rdi,[rsp-0x18]
  00097: mov    QWORD PTR [rdi],rax
  0009a: mov    QWORD PTR [rbx],rdi
  0009d: mov    QWORD PTR [rsp-0x20],0x0
  000a6: mov    QWORD PTR [rsp-0x38],rcx
  000ab: lea    rcx,[rbp-0x50]
  000af: mov    r8,0x0
  000b6: call   0x397f6
  000bb: lea    rdi,[rbp-0x8]
  000bf: mov    QWORD PTR [rbx],rdi
  000c2: movabs r13,0x563a60920080
  000cc: test   rax,rax
  000cf: je     0xffff5383
  000d5: mov    QWORD PTR [rbp-0x38],rax
:00005 ret %2
  000d9: mov    rax,QWORD PTR [rbp-0x38]
  000dd: leave  
  000de: ret    
==> start whole compile: <unnamed> FuncId(74) self_class:Scene start:[00000] bytecode:0x563a608e3580
<== finished compile. elapsed:63.8µs
offset:Pos(44439) code: 3731 bytes  data: 102 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x80
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x38],rax
  00016: mov    QWORD PTR [rbp-0x40],rax
  0001a: mov    QWORD PTR [rbp-0x48],rax
  0001e: mov    QWORD PTR [rbp-0x50],rax
  00022: mov    QWORD PTR [rbp-0x58],rax
  00026: mov    QWORD PTR [rbp-0x60],rax
  0002a: mov    QWORD PTR [rbp-0x68],rax
  0002e: mov    QWORD PTR [rbp-0x70],rax
  00032: mov    rdi,QWORD PTR [rbp-0x28]
  00036: test   rdi,0x7
  0003d: jne    0x39749
  00043: cmp    DWORD PTR [rdi+0x4],0x2f
  00047: jne    0x39749
:00000 %6 = const[Vec]                      [Vec]
  0004d: mov    rax,QWORD PTR [rip+0xffffffffffff7c35]        # 0xffff7c89
  00054: cmp    rax,QWORD PTR [rip+0xe4e]        # 0xea9
  0005b: jne    0x39758
  00061: mov    rax,QWORD PTR [rip+0xe31]        # 0xe99
  00068: mov    QWORD PTR [rbp-0x58],rax
:00001 %7 = literal[0.0]
  0006c: movq   xmm2,QWORD PTR [rip+0xe45]        # 0xeb9
:00002 %8 = literal[0.0]
  00074: movq   xmm3,QWORD PTR [rip+0xe4d]        # 0xec9
:00003 %9 = literal[0.0]
  0007c: movq   xmm4,QWORD PTR [rip+0xe55]        # 0xed9
:00004 %2 = %6.call new(%7; 3)              [#<Class:Vec>]
:00005 
  00084: movq   xmm0,xmm2
  00088: call   0xffff53d0
  0008d: mov    QWORD PTR [rbp-0x60],rax
  00091: movq   xmm0,xmm3
  00095: call   0xffff53d0
  0009a: mov    QWORD PTR [rbp-0x68],rax
  0009e: movq   xmm0,xmm4
  000a2: call   0xffff53d0
  000a7: mov    QWORD PTR [rbp-0x70],rax
  000ab: mov    rdi,QWORD PTR [rbp-0x58]
  000af: test   rdi,0x7
  000b6: jne    0x3979e
  000bc: cmp    DWORD PTR [rdi+0x4],0x26
  000c0: jne    0x3979e
  000c6: cmp    DWORD PTR [rip+0xffffffffffff7bb4],0x26        # 0xffff7c81
  000cd: jne    0x3979e
  000d3: mov    r9,0x0
  000da: sub    rsp,0x20
  000de: movq   QWORD PTR [rsp],xmm2
  000e3: movq   QWORD PTR [rsp+0x8],xmm3
  000e9: movq   QWORD PTR [rsp+0x10],xmm4
  000ef: mov    rdx,rdi
  000f2: mov    rax,QWORD PTR [rbx]
  000f5: lea    rdi,[rsp-0x18]
  000fa: mov    QWORD PTR [rdi],rax
  000fd: mov    QWORD PTR [rbx],rdi
  00100: mov    QWORD PTR [rsp-0x20],0x0
  00109: mov    QWORD PTR [rsp-0x38],rcx
  0010e: lea    rcx,[rbp-0x60]
  00112: mov    r8,0x3
  00119: call   0x397ad
  0011e: lea    rdi,[rbp-0x8]
  00122: mov    QWORD PTR [rbx],rdi
  00125: movq   xmm2,QWORD PTR [rsp]
  0012a: movq   xmm3,QWORD PTR [rsp+0x8]
  00130: movq   xmm4,QWORD PTR [rsp+0x10]
  00136: add    rsp,0x20
  0013a: movabs r13,0x563a608e35e0
  00144: test   rax,rax
  00147: je     0xffff52a4
  0014d: mov    QWORD PTR [rbp-0x38],rax
:00007 %6 = dynvar(2, %3)
  00151: mov    rax,QWORD PTR [rbp-0x10]
  00155: mov    rax,QWORD PTR [rax]
  00158: mov    rax,QWORD PTR [rax-0x30]
  0015c: mov    QWORD PTR [rbp-0x58],rax
:00008 %7 = literal[75]
  00160: mov    rax,0x97
  00167: mov    QWORD PTR [rbp-0x60],rax
:00009 _ = %6.call times(&%7)               [Integer]
:00010 
  0016b: mov    rdi,QWORD PTR [rbp-0x58]
  0016f: test   rdi,0x1
  00176: jne    0x193
  0017c: test   rdi,0x7
  00183: jne    0x397df
  00189: cmp    DWORD PTR [rdi+0x4],0x6
  0018d: jne    0x397df
  00193: cmp    DWORD PTR [rip+0xffffffffffff7ae7],0x26        # 0xffff7c81
  0019a: jne    0x397df
  001a0: mov    r9,QWORD PTR [rbp-0x60]
  001a4: sub    rsp,0x10
  001a8: movq   QWORD PTR [rsp],xmm3
  001ad: movq   QWORD PTR [rsp+0x8],xmm4
  001b3: mov    rdx,rdi
  001b6: mov    rax,QWORD PTR [rbx]
  001b9: lea    rdi,[rsp-0x18]
  001be: mov    QWORD PTR [rdi],rax
  001c1: mov    QWORD PTR [rbx],rdi
  001c4: mov    QWORD PTR [rsp-0x20],0x0
  001cd: mov    QWORD PTR [rsp-0x38],rcx
  001d2: lea    rcx,[rbp-0x68]
  001d6: mov    r8,0x0
  001dd: call   0x397ee
  001e2: lea    rdi,[rbp-0x8]
  001e6: mov    QWORD PTR [rbx],rdi
  001e9: movq   xmm3,QWORD PTR [rsp]
  001ee: movq   xmm4,QWORD PTR [rsp+0x8]
  001f4: add    rsp,0x10
  001f8: movabs r13,0x563a608e3630
  00202: test   rax,rax
  00205: je     0xffff52a4
:00012 %6 = %2.call x()                     [Vec]
:00013 
  0020b: mov    rdi,QWORD PTR [rbp-0x38]
  0020f: test   rdi,0x7
  00216: jne    0x39820
  0021c: cmp    DWORD PTR [rdi+0x4],0x25
  00220: jne    0x39820
  00226: cmp    DWORD PTR [rip+0xffffffffffff7a54],0x26        # 0xffff7c81
  0022d: jne    0x39820
  00233: mov    esi,DWORD PTR [rip+0xcac]        # 0xee5
  00239: cmp    esi,0xffffffff
  0023c: je     0x3982f
  00242: xor    rax,rax
  00245: mov    ax,WORD PTR [rdi+0x2]
  00249: cmp    rax,0x3
  0024d: jne    0x266
  00253: cmp    esi,0x6
  00256: jge    0x266
  0025c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00261: jmp    0x290
  00266: sub    rsp,0x10
  0026a: movq   QWORD PTR [rsp],xmm3
  0026f: movq   QWORD PTR [rsp+0x8],xmm4
  00275: movabs rax,0x563a5fe35570
  0027f: call   rax
  00281: movq   xmm3,QWORD PTR [rsp]
  00286: movq   xmm4,QWORD PTR [rsp+0x8]
  0028c: add    rsp,0x10
  00290: mov    QWORD PTR [rbp-0x58],rax
:00015 %7 = dynvar(2, %5)
  00294: mov    rax,QWORD PTR [rbp-0x10]
  00298: mov    rax,QWORD PTR [rax]
  0029b: mov    rax,QWORD PTR [rax-0x40]
  0029f: mov    QWORD PTR [rbp-0x60],rax
:00016 %8 = dynvar(2, %5)
  002a3: mov    rax,QWORD PTR [rbp-0x10]
  002a7: mov    rax,QWORD PTR [rax]
  002aa: mov    rax,QWORD PTR [rax-0x40]
  002ae: mov    QWORD PTR [rbp-0x68],rax
:00017 %7 = %7 * %8                         [Float][Float]
  002b2: mov    rdi,QWORD PTR [rbp-0x60]
  002b6: test   rdi,0x1
  002bd: jne    0x39876
  002c3: test   rdi,0x2
  002ca: je     0x306
  002d0: xorps  xmm2,xmm2
  002d3: movabs rax,0x8000000000000002
  002dd: cmp    rdi,rax
  002e0: je     0x318
  002e6: mov    rax,rdi
  002e9: sar    rax,0x3f
  002ed: add    rax,0x2
  002f1: and    rdi,0xfffffffffffffffc
  002f5: or     rdi,rax
  002f8: rol    rdi,0x3d
  002fc: movq   xmm2,rdi
  00301: jmp    0x318
  00306: call   0xffff52dd
  0030b: test   rax,rax
  0030e: je     0x39876
  00314: movq   xmm2,xmm0
  00318: mov    rdi,QWORD PTR [rbp-0x68]
  0031c: test   rdi,0x1
  00323: jne    0x39885
  00329: test   rdi,0x2
  00330: je     0x36c
  00336: xorps  xmm3,xmm3
  00339: movabs rax,0x8000000000000002
  00343: cmp    rdi,rax
  00346: je     0x37e
  0034c: mov    rax,rdi
  0034f: sar    rax,0x3f
  00353: add    rax,0x2
  00357: and    rdi,0xfffffffffffffffc
  0035b: or     rdi,rax
  0035e: rol    rdi,0x3d
  00362: movq   xmm3,rdi
  00367: jmp    0x37e
  0036c: call   0xffff52dd
  00371: test   rax,rax
  00374: je     0x39885
  0037a: movq   xmm3,xmm0
  0037e: mulsd  xmm2,xmm3
:00018 %3 = %6 / %7                         [Float][Float]
  00382: mov    rdi,QWORD PTR [rbp-0x58]
  00386: test   rdi,0x1
  0038d: jne    0x39894
  00393: test   rdi,0x2
  0039a: je     0x3d6
  003a0: xorps  xmm5,xmm5
  003a3: movabs rax,0x8000000000000002
  003ad: cmp    rdi,rax
  003b0: je     0x3e8
  003b6: mov    rax,rdi
  003b9: sar    rax,0x3f
  003bd: add    rax,0x2
  003c1: and    rdi,0xfffffffffffffffc
  003c5: or     rdi,rax
  003c8: rol    rdi,0x3d
  003cc: movq   xmm5,rdi
  003d1: jmp    0x3e8
  003d6: call   0xffff52dd
  003db: test   rax,rax
  003de: je     0x39894
  003e4: movq   xmm5,xmm0
  003e8: movq   xmm6,xmm5
  003ec: movq   rax,xmm2
  003f1: test   rax,rax
  003f4: je     0xffff52c9
  003fa: divsd  xmm6,xmm2
:00019 %6 = %2.call y()                     [Vec]
:00020 
  003fe: mov    rdi,QWORD PTR [rbp-0x38]
  00402: test   rdi,0x7
  00409: jne    0x398b0
  0040f: cmp    DWORD PTR [rdi+0x4],0x25
  00413: jne    0x398b0
  00419: cmp    DWORD PTR [rip+0xffffffffffff7861],0x26        # 0xffff7c81
  00420: jne    0x398b0
  00426: mov    esi,DWORD PTR [rip+0xac1]        # 0xeed
  0042c: cmp    esi,0xffffffff
  0042f: je     0x398d9
  00435: xor    rax,rax
  00438: mov    ax,WORD PTR [rdi+0x2]
  0043c: cmp    rax,0x3
  00440: jne    0x459
  00446: cmp    esi,0x6
  00449: jge    0x459
  0044f: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00454: jmp    0x49b
  00459: sub    rsp,0x20
  0045d: movq   QWORD PTR [rsp],xmm2
  00462: movq   QWORD PTR [rsp+0x8],xmm3
  00468: movq   QWORD PTR [rsp+0x10],xmm4
  0046e: movq   QWORD PTR [rsp+0x18],xmm6
  00474: movabs rax,0x563a5fe35570
  0047e: call   rax
  00480: movq   xmm2,QWORD PTR [rsp]
  00485: movq   xmm3,QWORD PTR [rsp+0x8]
  0048b: movq   xmm4,QWORD PTR [rsp+0x10]
  00491: movq   xmm6,QWORD PTR [rsp+0x18]
  00497: add    rsp,0x20
  0049b: mov    QWORD PTR [rbp-0x58],rax
:00022 %7 = dynvar(2, %5)
  0049f: mov    rax,QWORD PTR [rbp-0x10]
  004a3: mov    rax,QWORD PTR [rax]
  004a6: mov    rax,QWORD PTR [rax-0x40]
  004aa: mov    QWORD PTR [rbp-0x60],rax
:00023 %8 = dynvar(2, %5)
  004ae: mov    rax,QWORD PTR [rbp-0x10]
  004b2: mov    rax,QWORD PTR [rax]
  004b5: mov    rax,QWORD PTR [rax-0x40]
  004b9: mov    QWORD PTR [rbp-0x68],rax
:00024 %7 = %7 * %8                         [Float][Float]
  004bd: mov    rdi,QWORD PTR [rbp-0x60]
  004c1: test   rdi,0x1
  004c8: jne    0x39938
  004ce: test   rdi,0x2
  004d5: je     0x511
  004db: xorps  xmm2,xmm2
  004de: movabs rax,0x8000000000000002
  004e8: cmp    rdi,rax
  004eb: je     0x523
  004f1: mov    rax,rdi
  004f4: sar    rax,0x3f
  004f8: add    rax,0x2
  004fc: and    rdi,0xfffffffffffffffc
  00500: or     rdi,rax
  00503: rol    rdi,0x3d
  00507: movq   xmm2,rdi
  0050c: jmp    0x523
  00511: call   0xffff52dd
  00516: test   rax,rax
  00519: je     0x39938
  0051f: movq   xmm2,xmm0
  00523: mov    rdi,QWORD PTR [rbp-0x68]
  00527: test   rdi,0x1
  0052e: jne    0x39954
  00534: test   rdi,0x2
  0053b: je     0x577
  00541: xorps  xmm3,xmm3
  00544: movabs rax,0x8000000000000002
  0054e: cmp    rdi,rax
  00551: je     0x589
  00557: mov    rax,rdi
  0055a: sar    rax,0x3f
  0055e: add    rax,0x2
  00562: and    rdi,0xfffffffffffffffc
  00566: or     rdi,rax
  00569: rol    rdi,0x3d
  0056d: movq   xmm3,rdi
  00572: jmp    0x589
  00577: call   0xffff52dd
  0057c: test   rax,rax
  0057f: je     0x39954
  00585: movq   xmm3,xmm0
  00589: mulsd  xmm2,xmm3
:00025 %4 = %6 / %7                         [Float][Float]
  0058d: mov    rdi,QWORD PTR [rbp-0x58]
  00591: test   rdi,0x1
  00598: jne    0x39970
  0059e: test   rdi,0x2
  005a5: je     0x5e1
  005ab: xorps  xmm5,xmm5
  005ae: movabs rax,0x8000000000000002
  005b8: cmp    rdi,rax
  005bb: je     0x5f3
  005c1: mov    rax,rdi
  005c4: sar    rax,0x3f
  005c8: add    rax,0x2
  005cc: and    rdi,0xfffffffffffffffc
  005d0: or     rdi,rax
  005d3: rol    rdi,0x3d
  005d7: movq   xmm5,rdi
  005dc: jmp    0x5f3
  005e1: call   0xffff52dd
  005e6: test   rax,rax
  005e9: je     0x39970
  005ef: movq   xmm5,xmm0
  005f3: movq   xmm7,xmm5
  005f7: movq   rax,xmm2
  005fc: test   rax,rax
  005ff: je     0xffff52c9
  00605: divsd  xmm7,xmm2
:00026 %6 = %2.call z()                     [Vec]
:00027 
  00609: mov    rdi,QWORD PTR [rbp-0x38]
  0060d: test   rdi,0x7
  00614: jne    0x39999
  0061a: cmp    DWORD PTR [rdi+0x4],0x25
  0061e: jne    0x39999
  00624: cmp    DWORD PTR [rip+0xffffffffffff7656],0x26        # 0xffff7c81
  0062b: jne    0x39999
  00631: mov    esi,DWORD PTR [rip+0x8be]        # 0xef5
  00637: cmp    esi,0xffffffff
  0063a: je     0x399cf
  00640: xor    rax,rax
  00643: mov    ax,WORD PTR [rdi+0x2]
  00647: cmp    rax,0x3
  0064b: jne    0x664
  00651: cmp    esi,0x6
  00654: jge    0x664
  0065a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0065f: jmp    0x6b2
  00664: sub    rsp,0x30
  00668: movq   QWORD PTR [rsp],xmm2
  0066d: movq   QWORD PTR [rsp+0x8],xmm3
  00673: movq   QWORD PTR [rsp+0x10],xmm4
  00679: movq   QWORD PTR [rsp+0x18],xmm6
  0067f: movq   QWORD PTR [rsp+0x20],xmm7
  00685: movabs rax,0x563a5fe35570
  0068f: call   rax
  00691: movq   xmm2,QWORD PTR [rsp]
  00696: movq   xmm3,QWORD PTR [rsp+0x8]
  0069c: movq   xmm4,QWORD PTR [rsp+0x10]
  006a2: movq   xmm6,QWORD PTR [rsp+0x18]
  006a8: movq   xmm7,QWORD PTR [rsp+0x20]
  006ae: add    rsp,0x30
  006b2: mov    QWORD PTR [rbp-0x58],rax
:00029 %7 = dynvar(2, %5)
  006b6: mov    rax,QWORD PTR [rbp-0x10]
  006ba: mov    rax,QWORD PTR [rax]
  006bd: mov    rax,QWORD PTR [rax-0x40]
  006c1: mov    QWORD PTR [rbp-0x60],rax
:00030 %8 = dynvar(2, %5)
  006c5: mov    rax,QWORD PTR [rbp-0x10]
  006c9: mov    rax,QWORD PTR [rax]
  006cc: mov    rax,QWORD PTR [rax-0x40]
  006d0: mov    QWORD PTR [rbp-0x68],rax
:00031 %7 = %7 * %8                         [Float][Float]
  006d4: mov    rdi,QWORD PTR [rbp-0x60]
  006d8: test   rdi,0x1
  006df: jne    0x39a3a
  006e5: test   rdi,0x2
  006ec: je     0x728
  006f2: xorps  xmm2,xmm2
  006f5: movabs rax,0x8000000000000002
  006ff: cmp    rdi,rax
  00702: je     0x73a
  00708: mov    rax,rdi
  0070b: sar    rax,0x3f
  0070f: add    rax,0x2
  00713: and    rdi,0xfffffffffffffffc
  00717: or     rdi,rax
  0071a: rol    rdi,0x3d
  0071e: movq   xmm2,rdi
  00723: jmp    0x73a
  00728: call   0xffff52dd
  0072d: test   rax,rax
  00730: je     0x39a3a
  00736: movq   xmm2,xmm0
  0073a: mov    rdi,QWORD PTR [rbp-0x68]
  0073e: test   rdi,0x1
  00745: jne    0x39a63
  0074b: test   rdi,0x2
  00752: je     0x78e
  00758: xorps  xmm3,xmm3
  0075b: movabs rax,0x8000000000000002
  00765: cmp    rdi,rax
  00768: je     0x7a0
  0076e: mov    rax,rdi
  00771: sar    rax,0x3f
  00775: add    rax,0x2
  00779: and    rdi,0xfffffffffffffffc
  0077d: or     rdi,rax
  00780: rol    rdi,0x3d
  00784: movq   xmm3,rdi
  00789: jmp    0x7a0
  0078e: call   0xffff52dd
  00793: test   rax,rax
  00796: je     0x39a63
  0079c: movq   xmm3,xmm0
  007a0: mulsd  xmm2,xmm3
:00032 %5 = %6 / %7                         [Float][Float]
  007a4: mov    rdi,QWORD PTR [rbp-0x58]
  007a8: test   rdi,0x1
  007af: jne    0x39a8c
  007b5: test   rdi,0x2
  007bc: je     0x7f8
  007c2: xorps  xmm5,xmm5
  007c5: movabs rax,0x8000000000000002
  007cf: cmp    rdi,rax
  007d2: je     0x80a
  007d8: mov    rax,rdi
  007db: sar    rax,0x3f
  007df: add    rax,0x2
  007e3: and    rdi,0xfffffffffffffffc
  007e7: or     rdi,rax
  007ea: rol    rdi,0x3d
  007ee: movq   xmm5,rdi
  007f3: jmp    0x80a
  007f8: call   0xffff52dd
  007fd: test   rax,rax
  00800: je     0x39a8c
  00806: movq   xmm5,xmm0
  0080a: movq   xmm8,xmm5
  0080f: movq   rax,xmm2
  00814: test   rax,rax
  00817: je     0xffff52c9
  0081d: divsd  xmm8,xmm2
:00033 %8 = %4
:00034 %7 = %0.call clamp(%8; 1)            [Scene]
:00035 
  00822: movq   xmm0,xmm7
  00826: call   0xffff53d0
  0082b: mov    QWORD PTR [rbp-0x68],rax
  0082f: mov    rdi,QWORD PTR [rbp-0x28]
  00833: cmp    DWORD PTR [rip+0xffffffffffff7447],0x26        # 0xffff7c81
  0083a: jne    0x39ac2
  00840: sub    rsp,0x30
  00844: movq   QWORD PTR [rsp],xmm4
  00849: movq   QWORD PTR [rsp+0x8],xmm5
  0084f: movq   QWORD PTR [rsp+0x10],xmm6
  00855: movq   QWORD PTR [rsp+0x18],xmm7
  0085b: movq   QWORD PTR [rsp+0x20],xmm8
  00862: mov    rax,QWORD PTR [rbx]
  00865: lea    rdi,[rsp-0x18]
  0086a: mov    QWORD PTR [rdi],rax
  0086d: mov    QWORD PTR [rbx],rdi
  00870: mov    QWORD PTR [rsp-0x20],0x0
  00879: mov    QWORD PTR [rsp-0x38],rcx
  0087e: mov    rax,QWORD PTR [rbp-0x28]
  00882: mov    QWORD PTR [rsp-0x38],rax
  00887: mov    rdi,0x1
  0088e: mov    rax,QWORD PTR [rbp-0x68]
  00892: mov    QWORD PTR [rsp-0x40],rax
  00897: mov    QWORD PTR [rsp-0x30],0x0
  008a0: movabs rax,0x400000034
  008aa: mov    QWORD PTR [rsp-0x28],rax
  008af: movabs r13,0x563a60931370
  008b9: call   0xffffb059
  008be: lea    rdi,[rbp-0x8]
  008c2: mov    QWORD PTR [rbx],rdi
  008c5: movq   xmm4,QWORD PTR [rsp]
  008ca: movq   xmm5,QWORD PTR [rsp+0x8]
  008d0: movq   xmm6,QWORD PTR [rsp+0x10]
  008d6: movq   xmm7,QWORD PTR [rsp+0x18]
  008dc: movq   xmm8,QWORD PTR [rsp+0x20]
  008e3: add    rsp,0x30
  008e7: movabs r13,0x563a608e37c0
  008f1: test   rax,rax
  008f4: je     0xffff52a4
  008fa: mov    QWORD PTR [rbp-0x60],rax
:00037 %6 = %7.call chr()                   [Integer]
:00038 
  008fe: mov    rdi,QWORD PTR [rbp-0x60]
  00902: test   rdi,0x1
  00909: jne    0x926
  0090f: test   rdi,0x7
  00916: jne    0x39af9
  0091c: cmp    DWORD PTR [rdi+0x4],0x6
  00920: jne    0x39af9
  00926: cmp    DWORD PTR [rip+0xffffffffffff7354],0x26        # 0xffff7c81
  0092d: jne    0x39af9
  00933: mov    r9,0x0
  0093a: sub    rsp,0x20
  0093e: movq   QWORD PTR [rsp],xmm4
  00943: movq   QWORD PTR [rsp+0x8],xmm6
  00949: movq   QWORD PTR [rsp+0x10],xmm7
  0094f: movq   QWORD PTR [rsp+0x18],xmm8
  00956: mov    rdx,rdi
  00959: mov    rax,QWORD PTR [rbx]
  0095c: lea    rdi,[rsp-0x18]
  00961: mov    QWORD PTR [rdi],rax
  00964: mov    QWORD PTR [rbx],rdi
  00967: mov    QWORD PTR [rsp-0x20],0x0
  00970: mov    QWORD PTR [rsp-0x38],rcx
  00975: lea    rcx,[rbp-0x68]
  00979: mov    r8,0x0
  00980: call   0x39b30
  00985: lea    rdi,[rbp-0x8]
  00989: mov    QWORD PTR [rbx],rdi
  0098c: movq   xmm4,QWORD PTR [rsp]
  00991: movq   xmm6,QWORD PTR [rsp+0x8]
  00997: movq   xmm7,QWORD PTR [rsp+0x10]
  0099d: movq   xmm8,QWORD PTR [rsp+0x18]
  009a4: add    rsp,0x20
  009a8: movabs r13,0x563a608e37f0
  009b2: test   rax,rax
  009b5: je     0xffff52a4
  009bb: mov    QWORD PTR [rbp-0x58],rax
:00040 _ = %0.call print(%6; 1)             [Scene]
:00041 
  009bf: mov    rdi,QWORD PTR [rbp-0x28]
  009c3: cmp    DWORD PTR [rip+0xffffffffffff72b7],0x26        # 0xffff7c81
  009ca: jne    0x39b62
  009d0: mov    r9,0x0
  009d7: sub    rsp,0x20
  009db: movq   QWORD PTR [rsp],xmm4
  009e0: movq   QWORD PTR [rsp+0x8],xmm6
  009e6: movq   QWORD PTR [rsp+0x10],xmm7
  009ec: movq   QWORD PTR [rsp+0x18],xmm8
  009f3: mov    rdx,rdi
  009f6: mov    rax,QWORD PTR [rbx]
  009f9: lea    rdi,[rsp-0x18]
  009fe: mov    QWORD PTR [rdi],rax
  00a01: mov    QWORD PTR [rbx],rdi
  00a04: mov    QWORD PTR [rsp-0x20],0x0
  00a0d: mov    QWORD PTR [rsp-0x38],rcx
  00a12: lea    rcx,[rbp-0x58]
  00a16: mov    r8,0x1
  00a1d: call   0x39b99
  00a22: lea    rdi,[rbp-0x8]
  00a26: mov    QWORD PTR [rbx],rdi
  00a29: movq   xmm4,QWORD PTR [rsp]
  00a2e: movq   xmm6,QWORD PTR [rsp+0x8]
  00a34: movq   xmm7,QWORD PTR [rsp+0x10]
  00a3a: movq   xmm8,QWORD PTR [rsp+0x18]
  00a41: add    rsp,0x20
  00a45: movabs r13,0x563a608e3820
  00a4f: test   rax,rax
  00a52: je     0xffff52a4
:00043 %8 = %3
:00044 %7 = %0.call clamp(%8; 1)            [Scene]
:00045 
  00a58: movq   xmm0,xmm6
  00a5c: call   0xffff53d0
  00a61: mov    QWORD PTR [rbp-0x68],rax
  00a65: mov    rdi,QWORD PTR [rbp-0x28]
  00a69: cmp    DWORD PTR [rip+0xffffffffffff7211],0x26        # 0xffff7c81
  00a70: jne    0x39bcb
  00a76: sub    rsp,0x20
  00a7a: movq   QWORD PTR [rsp],xmm4
  00a7f: movq   QWORD PTR [rsp+0x8],xmm6
  00a85: movq   QWORD PTR [rsp+0x10],xmm7
  00a8b: movq   QWORD PTR [rsp+0x18],xmm8
  00a92: mov    rax,QWORD PTR [rbx]
  00a95: lea    rdi,[rsp-0x18]
  00a9a: mov    QWORD PTR [rdi],rax
  00a9d: mov    QWORD PTR [rbx],rdi
  00aa0: mov    QWORD PTR [rsp-0x20],0x0
  00aa9: mov    QWORD PTR [rsp-0x38],rcx
  00aae: mov    rax,QWORD PTR [rbp-0x28]
  00ab2: mov    QWORD PTR [rsp-0x38],rax
  00ab7: mov    rdi,0x1
  00abe: mov    rax,QWORD PTR [rbp-0x68]
  00ac2: mov    QWORD PTR [rsp-0x40],rax
  00ac7: mov    QWORD PTR [rsp-0x30],0x0
  00ad0: movabs rax,0x400000034
  00ada: mov    QWORD PTR [rsp-0x28],rax
  00adf: movabs r13,0x563a60931370
  00ae9: call   0xffffb059
  00aee: lea    rdi,[rbp-0x8]
  00af2: mov    QWORD PTR [rbx],rdi
  00af5: movq   xmm4,QWORD PTR [rsp]
  00afa: movq   xmm6,QWORD PTR [rsp+0x8]
  00b00: movq   xmm7,QWORD PTR [rsp+0x10]
  00b06: movq   xmm8,QWORD PTR [rsp+0x18]
  00b0d: add    rsp,0x20
  00b11: movabs r13,0x563a608e3860
  00b1b: test   rax,rax
  00b1e: je     0xffff52a4
  00b24: mov    QWORD PTR [rbp-0x60],rax
:00047 %6 = %7.call chr()                   [Integer]
:00048 
  00b28: mov    rdi,QWORD PTR [rbp-0x60]
  00b2c: test   rdi,0x1
  00b33: jne    0xb50
  00b39: test   rdi,0x7
  00b40: jne    0x39c02
  00b46: cmp    DWORD PTR [rdi+0x4],0x6
  00b4a: jne    0x39c02
  00b50: cmp    DWORD PTR [rip+0xffffffffffff712a],0x26        # 0xffff7c81
  00b57: jne    0x39c02
  00b5d: mov    r9,0x0
  00b64: sub    rsp,0x20
  00b68: movq   QWORD PTR [rsp],xmm4
  00b6d: movq   QWORD PTR [rsp+0x8],xmm6
  00b73: movq   QWORD PTR [rsp+0x10],xmm7
  00b79: movq   QWORD PTR [rsp+0x18],xmm8
  00b80: mov    rdx,rdi
  00b83: mov    rax,QWORD PTR [rbx]
  00b86: lea    rdi,[rsp-0x18]
  00b8b: mov    QWORD PTR [rdi],rax
  00b8e: mov    QWORD PTR [rbx],rdi
  00b91: mov    QWORD PTR [rsp-0x20],0x0
  00b9a: mov    QWORD PTR [rsp-0x38],rcx
  00b9f: lea    rcx,[rbp-0x68]
  00ba3: mov    r8,0x0
  00baa: call   0x39c39
  00baf: lea    rdi,[rbp-0x8]
  00bb3: mov    QWORD PTR [rbx],rdi
  00bb6: movq   xmm4,QWORD PTR [rsp]
  00bbb: movq   xmm6,QWORD PTR [rsp+0x8]
  00bc1: movq   xmm7,QWORD PTR [rsp+0x10]
  00bc7: movq   xmm8,QWORD PTR [rsp+0x18]
  00bce: add    rsp,0x20
  00bd2: movabs r13,0x563a608e3890
  00bdc: test   rax,rax
  00bdf: je     0xffff52a4
  00be5: mov    QWORD PTR [rbp-0x58],rax
:00050 _ = %0.call print(%6; 1)             [Scene]
:00051 
  00be9: mov    rdi,QWORD PTR [rbp-0x28]
  00bed: cmp    DWORD PTR [rip+0xffffffffffff708d],0x26        # 0xffff7c81
  00bf4: jne    0x39c6b
  00bfa: mov    r9,0x0
  00c01: sub    rsp,0x20
  00c05: movq   QWORD PTR [rsp],xmm4
  00c0a: movq   QWORD PTR [rsp+0x8],xmm6
  00c10: movq   QWORD PTR [rsp+0x10],xmm7
  00c16: movq   QWORD PTR [rsp+0x18],xmm8
  00c1d: mov    rdx,rdi
  00c20: mov    rax,QWORD PTR [rbx]
  00c23: lea    rdi,[rsp-0x18]
  00c28: mov    QWORD PTR [rdi],rax
  00c2b: mov    QWORD PTR [rbx],rdi
  00c2e: mov    QWORD PTR [rsp-0x20],0x0
  00c37: mov    QWORD PTR [rsp-0x38],rcx
  00c3c: lea    rcx,[rbp-0x58]
  00c40: mov    r8,0x1
  00c47: call   0x39ca2
  00c4c: lea    rdi,[rbp-0x8]
  00c50: mov    QWORD PTR [rbx],rdi
  00c53: movq   xmm4,QWORD PTR [rsp]
  00c58: movq   xmm6,QWORD PTR [rsp+0x8]
  00c5e: movq   xmm7,QWORD PTR [rsp+0x10]
  00c64: movq   xmm8,QWORD PTR [rsp+0x18]
  00c6b: add    rsp,0x20
  00c6f: movabs r13,0x563a608e38c0
  00c79: test   rax,rax
  00c7c: je     0xffff52a4
:00053 %9 = %5
:00054 %8 = %0.call clamp(%9; 1)            [Scene]
:00055 
  00c82: movq   xmm0,xmm8
  00c87: call   0xffff53d0
  00c8c: mov    QWORD PTR [rbp-0x70],rax
  00c90: mov    rdi,QWORD PTR [rbp-0x28]
  00c94: cmp    DWORD PTR [rip+0xffffffffffff6fe6],0x26        # 0xffff7c81
  00c9b: jne    0x39cd4
  00ca1: sub    rsp,0x20
  00ca5: movq   QWORD PTR [rsp],xmm6
  00caa: movq   QWORD PTR [rsp+0x8],xmm7
  00cb0: movq   QWORD PTR [rsp+0x10],xmm8
  00cb7: mov    rax,QWORD PTR [rbx]
  00cba: lea    rdi,[rsp-0x18]
  00cbf: mov    QWORD PTR [rdi],rax
  00cc2: mov    QWORD PTR [rbx],rdi
  00cc5: mov    QWORD PTR [rsp-0x20],0x0
  00cce: mov    QWORD PTR [rsp-0x38],rcx
  00cd3: mov    rax,QWORD PTR [rbp-0x28]
  00cd7: mov    QWORD PTR [rsp-0x38],rax
  00cdc: mov    rdi,0x1
  00ce3: mov    rax,QWORD PTR [rbp-0x70]
  00ce7: mov    QWORD PTR [rsp-0x40],rax
  00cec: mov    QWORD PTR [rsp-0x30],0x0
  00cf5: movabs rax,0x400000034
  00cff: mov    QWORD PTR [rsp-0x28],rax
  00d04: movabs r13,0x563a60931370
  00d0e: call   0xffffb059
  00d13: lea    rdi,[rbp-0x8]
  00d17: mov    QWORD PTR [rbx],rdi
  00d1a: movq   xmm6,QWORD PTR [rsp]
  00d1f: movq   xmm7,QWORD PTR [rsp+0x8]
  00d25: movq   xmm8,QWORD PTR [rsp+0x10]
  00d2c: add    rsp,0x20
  00d30: movabs r13,0x563a608e3900
  00d3a: test   rax,rax
  00d3d: je     0xffff52a4
  00d43: mov    QWORD PTR [rbp-0x68],rax
:00057 %7 = %8.call chr()                   [Integer]
:00058 
  00d47: mov    rdi,QWORD PTR [rbp-0x68]
  00d4b: test   rdi,0x1
  00d52: jne    0xd6f
  00d58: test   rdi,0x7
  00d5f: jne    0x39d0b
  00d65: cmp    DWORD PTR [rdi+0x4],0x6
  00d69: jne    0x39d0b
  00d6f: cmp    DWORD PTR [rip+0xffffffffffff6f0b],0x26        # 0xffff7c81
  00d76: jne    0x39d0b
  00d7c: mov    r9,0x0
  00d83: sub    rsp,0x20
  00d87: movq   QWORD PTR [rsp],xmm6
  00d8c: movq   QWORD PTR [rsp+0x8],xmm7
  00d92: movq   QWORD PTR [rsp+0x10],xmm8
  00d99: mov    rdx,rdi
  00d9c: mov    rax,QWORD PTR [rbx]
  00d9f: lea    rdi,[rsp-0x18]
  00da4: mov    QWORD PTR [rdi],rax
  00da7: mov    QWORD PTR [rbx],rdi
  00daa: mov    QWORD PTR [rsp-0x20],0x0
  00db3: mov    QWORD PTR [rsp-0x38],rcx
  00db8: lea    rcx,[rbp-0x70]
  00dbc: mov    r8,0x0
  00dc3: call   0x39d42
  00dc8: lea    rdi,[rbp-0x8]
  00dcc: mov    QWORD PTR [rbx],rdi
  00dcf: movq   xmm6,QWORD PTR [rsp]
  00dd4: movq   xmm7,QWORD PTR [rsp+0x8]
  00dda: movq   xmm8,QWORD PTR [rsp+0x10]
  00de1: add    rsp,0x20
  00de5: movabs r13,0x563a608e3930
  00def: test   rax,rax
  00df2: je     0xffff52a4
  00df8: mov    QWORD PTR [rbp-0x60],rax
:00060 %6 = %0.call print(%7; 1)            [Scene]
:00061 
  00dfc: mov    rdi,QWORD PTR [rbp-0x28]
  00e00: cmp    DWORD PTR [rip+0xffffffffffff6e7a],0x26        # 0xffff7c81
  00e07: jne    0x39d74
  00e0d: mov    r9,0x0
  00e14: sub    rsp,0x20
  00e18: movq   QWORD PTR [rsp],xmm6
  00e1d: movq   QWORD PTR [rsp+0x8],xmm7
  00e23: movq   QWORD PTR [rsp+0x10],xmm8
  00e2a: mov    rdx,rdi
  00e2d: mov    rax,QWORD PTR [rbx]
  00e30: lea    rdi,[rsp-0x18]
  00e35: mov    QWORD PTR [rdi],rax
  00e38: mov    QWORD PTR [rbx],rdi
  00e3b: mov    QWORD PTR [rsp-0x20],0x0
  00e44: mov    QWORD PTR [rsp-0x38],rcx
  00e49: lea    rcx,[rbp-0x60]
  00e4d: mov    r8,0x1
  00e54: call   0x39dab
  00e59: lea    rdi,[rbp-0x8]
  00e5d: mov    QWORD PTR [rbx],rdi
  00e60: movq   xmm6,QWORD PTR [rsp]
  00e65: movq   xmm7,QWORD PTR [rsp+0x8]
  00e6b: movq   xmm8,QWORD PTR [rsp+0x10]
  00e72: add    rsp,0x20
  00e76: movabs r13,0x563a608e3960
  00e80: test   rax,rax
  00e83: je     0xffff52a4
  00e89: mov    QWORD PTR [rbp-0x58],rax
:00063 ret %6
  00e8d: mov    rax,QWORD PTR [rbp-0x58]
  00e91: leave  
  00e92: ret    
==> start whole compile: <unnamed> FuncId(72) self_class:Scene start:[00000] bytecode:0x563a608c0480
<== finished compile. elapsed:19.5µs
offset:Pos(48272) code: 218 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x38],0x4
  00010: mov    QWORD PTR [rbp-0x40],0x4
  00018: mov    rdi,QWORD PTR [rbp-0x28]
  0001c: test   rdi,0x7
  00023: jne    0x38ee4
  00029: cmp    DWORD PTR [rdi+0x4],0x2f
  0002d: jne    0x38ee4
:00000 %2 = dynvar(1, %1)
  00033: mov    rax,QWORD PTR [rbp-0x10]
  00037: mov    rax,QWORD PTR [rax-0x20]
  0003b: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = literal[74]
  0003f: mov    rax,0x95
  00046: mov    QWORD PTR [rbp-0x40],rax
:00002 _ = %2.call times(&%3)               [Integer]
:00003 
  0004a: mov    rdi,QWORD PTR [rbp-0x38]
  0004e: test   rdi,0x1
  00055: jne    0x72
  0005b: test   rdi,0x7
  00062: jne    0x38ef3
  00068: cmp    DWORD PTR [rdi+0x4],0x6
  0006c: jne    0x38ef3
  00072: cmp    DWORD PTR [rip+0xffffffffffff6d0f],0x26        # 0xffff6d88
  00079: jne    0x38ef3
  0007f: mov    r9,QWORD PTR [rbp-0x40]
  00083: mov    rdx,rdi
  00086: mov    rax,QWORD PTR [rbx]
  00089: lea    rdi,[rsp-0x18]
  0008e: mov    QWORD PTR [rdi],rax
  00091: mov    QWORD PTR [rbx],rdi
  00094: mov    QWORD PTR [rsp-0x20],0x0
  0009d: mov    QWORD PTR [rsp-0x38],rcx
  000a2: lea    rcx,[rbp-0x48]
  000a6: mov    r8,0x0
  000ad: call   0x38f02
  000b2: lea    rdi,[rbp-0x8]
  000b6: mov    QWORD PTR [rbx],rdi
  000b9: movabs r13,0x563a608c04c0
  000c3: test   rax,rax
  000c6: je     0xffff43ab
:00005 %2 = nil
  000cc: mov    QWORD PTR [rbp-0x38],0x4
:00006 ret %2
  000d4: mov    rax,QWORD PTR [rbp-0x38]
  000d8: leave  
  000d9: ret    
==> start whole compile: <unnamed> FuncId(73) self_class:Scene start:[00000] bytecode:0x563a608def10
<== finished compile. elapsed:143.4µs
offset:Pos(49539) code: 9167 bytes  data: 422 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xb0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d:    	mov    rdi,QWORD PTR [rbp-0x28]
  00061: 00 	test   rdi,0x7
  00068:    	jne    0x38a41
  0006e:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00072:    	jne    0x38a41
:00000 %13 = %0.call rand()                 [Scene]
:00001 
  00078:    	mov    rdi,QWORD PTR [rbp-0x28]
  0007c: 26 	cmp    DWORD PTR [rip+0xffffffffffff6812],0x26        # 0xffff6895
  00083:    	jne    0x38a50
  00089: 00 	mov    r9,0x0
  00090:    	mov    rdx,rdi
  00093:    	mov    rax,QWORD PTR [rbx]
  00096:    	lea    rdi,[rsp-0x18]
  0009b:    	mov    QWORD PTR [rdi],rax
  0009e:    	mov    QWORD PTR [rbx],rdi
  000a1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000aa:    	mov    QWORD PTR [rsp-0x38],rcx
  000af: ff 	lea    rcx,[rbp-0x98]
  000b6: 00 	mov    r8,0x0
  000bd:    	call   0x38a5f
  000c2:    	lea    rdi,[rbp-0x8]
  000c6:    	mov    QWORD PTR [rbx],rdi
  000c9: 3a 	movabs r13,0x563a608def30
  000d3:    	test   rax,rax
  000d6:    	je     0xffff3eb8
  000dc: ff 	mov    QWORD PTR [rbp-0x90],rax
:00003 %2 = %13
  000e3: ff 	mov    rax,QWORD PTR [rbp-0x90]
  000ea:    	mov    QWORD PTR [rbp-0x38],rax
:00004 %13 = literal[2.0]
  000ee: 00 	movq   xmm2,QWORD PTR [rip+0x22e7]        # 0x23dd
:00005 %14 = literal[3.14159265]
  000f6: 00 	movq   xmm3,QWORD PTR [rip+0x22ef]        # 0x23ed
:00006 %13 = %13 * %14                      [Float][Float]
  000fe:    	mulsd  xmm2,xmm3
:00007 %14 = %0.call rand()                 [Scene]
:00008 
  00102:    	mov    rdi,QWORD PTR [rbp-0x28]
  00106: 26 	cmp    DWORD PTR [rip+0xffffffffffff6788],0x26        # 0xffff6895
  0010d:    	jne    0x38a91
  00113: 00 	mov    r9,0x0
  0011a:    	sub    rsp,0x10
  0011e:    	movq   QWORD PTR [rsp],xmm2
  00123:    	mov    rdx,rdi
  00126:    	mov    rax,QWORD PTR [rbx]
  00129:    	lea    rdi,[rsp-0x18]
  0012e:    	mov    QWORD PTR [rdi],rax
  00131:    	mov    QWORD PTR [rbx],rdi
  00134: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0013d:    	mov    QWORD PTR [rsp-0x38],rcx
  00142: ff 	lea    rcx,[rbp-0xa0]
  00149: 00 	mov    r8,0x0
  00150:    	call   0x38ab0
  00155:    	lea    rdi,[rbp-0x8]
  00159:    	mov    QWORD PTR [rbx],rdi
  0015c:    	movq   xmm2,QWORD PTR [rsp]
  00161:    	add    rsp,0x10
  00165: 3a 	movabs r13,0x563a608defa0
  0016f:    	test   rax,rax
  00172:    	je     0xffff3eb8
  00178: ff 	mov    QWORD PTR [rbp-0x98],rax
:00010 %3 = %13 * %14                       [Float][Float]
  0017f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00186: 00 	test   rdi,0x1
  0018d:    	jne    0x38ae2
  00193: 00 	test   rdi,0x2
  0019a:    	je     0x1d6
  001a0:    	xorps  xmm3,xmm3
  001a3: 00 	movabs rax,0x8000000000000002
  001ad:    	cmp    rdi,rax
  001b0:    	je     0x1e8
  001b6:    	mov    rax,rdi
  001b9:    	sar    rax,0x3f
  001bd:    	add    rax,0x2
  001c1:    	and    rdi,0xfffffffffffffffc
  001c5:    	or     rdi,rax
  001c8:    	rol    rdi,0x3d
  001cc:    	movq   xmm3,rdi
  001d1:    	jmp    0x1e8
  001d6:    	call   0xffff3ef1
  001db:    	test   rax,rax
  001de:    	je     0x38ae2
  001e4:    	movq   xmm3,xmm0
  001e8:    	movq   xmm4,xmm2
  001ec:    	mulsd  xmm4,xmm3
:00011 %14 = const[Math]                    [Math]
  001f0: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff66a6]        # 0xffff689d
  001f7: 00 	cmp    rax,QWORD PTR [rip+0x220f]        # 0x240d
  001fe:    	jne    0x38b01
  00204: 00 	mov    rax,QWORD PTR [rip+0x21f2]        # 0x23fd
  0020b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %15 = %3
:00013 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
:00014 
  00212:    	movq   xmm0,xmm4
  00216:    	call   0xffff3fe4
  0021b: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00222: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00229: 00 	test   rdi,0x7
  00230:    	jne    0x38b65
  00236:    	cmp    DWORD PTR [rdi+0x4],0x20
  0023a:    	jne    0x38b65
  00240: 26 	cmp    DWORD PTR [rip+0xffffffffffff664e],0x26        # 0xffff6895
  00247:    	jne    0x38b65
  0024d: 00 	mov    r9,0x0
  00254:    	sub    rsp,0x10
  00258:    	movq   QWORD PTR [rsp],xmm4
  0025d:    	mov    rdx,rdi
  00260:    	mov    rax,QWORD PTR [rbx]
  00263:    	lea    rdi,[rsp-0x18]
  00268:    	mov    QWORD PTR [rdi],rax
  0026b:    	mov    QWORD PTR [rbx],rdi
  0026e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00277:    	mov    QWORD PTR [rsp-0x38],rcx
  0027c: ff 	lea    rcx,[rbp-0xa0]
  00283: 00 	mov    r8,0x1
  0028a:    	call   0x38b81
  0028f:    	lea    rdi,[rbp-0x8]
  00293:    	mov    QWORD PTR [rbx],rdi
  00296:    	movq   xmm4,QWORD PTR [rsp]
  0029b:    	add    rsp,0x10
  0029f: 3a 	movabs r13,0x563a608df000
  002a9:    	test   rax,rax
  002ac:    	je     0xffff3eb8
  002b2: ff 	mov    QWORD PTR [rbp-0x90],rax
:00016 %15 = const[Math]                    [Math]
  002b9: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff65dd]        # 0xffff689d
  002c0: 00 	cmp    rax,QWORD PTR [rip+0x2166]        # 0x242d
  002c7:    	jne    0x38bb3
  002cd: 00 	mov    rax,QWORD PTR [rip+0x2149]        # 0x241d
  002d4: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00017 %16 = literal[1.0]
  002db: 00 	movq   xmm2,QWORD PTR [rip+0x215a]        # 0x243d
:00018 %16 = %16 - %2                       [Float][Float]
  002e3:    	mov    rdi,QWORD PTR [rbp-0x38]
  002e7: 00 	test   rdi,0x1
  002ee:    	jne    0x38c0b
  002f4: 00 	test   rdi,0x2
  002fb:    	je     0x337
  00301:    	xorps  xmm3,xmm3
  00304: 00 	movabs rax,0x8000000000000002
  0030e:    	cmp    rdi,rax
  00311:    	je     0x349
  00317:    	mov    rax,rdi
  0031a:    	sar    rax,0x3f
  0031e:    	add    rax,0x2
  00322:    	and    rdi,0xfffffffffffffffc
  00326:    	or     rdi,rax
  00329:    	rol    rdi,0x3d
  0032d:    	movq   xmm3,rdi
  00332:    	jmp    0x349
  00337:    	call   0xffff3ef1
  0033c:    	test   rax,rax
  0033f:    	je     0x38c0b
  00345:    	movq   xmm3,xmm0
  00349:    	subsd  xmm2,xmm3
:00019 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
:00020 
  0034d:    	rex.W sqrtsd xmm5,xmm2
:00022 %4 = %13 * %14                       [Float][Float]
  00352: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00359: 00 	test   rdi,0x1
  00360:    	jne    0x38c37
  00366: 00 	test   rdi,0x2
  0036d:    	je     0x3a9
  00373:    	xorps  xmm6,xmm6
  00376: 00 	movabs rax,0x8000000000000002
  00380:    	cmp    rdi,rax
  00383:    	je     0x3bb
  00389:    	mov    rax,rdi
  0038c:    	sar    rax,0x3f
  00390:    	add    rax,0x2
  00394:    	and    rdi,0xfffffffffffffffc
  00398:    	or     rdi,rax
  0039b:    	rol    rdi,0x3d
  0039f:    	movq   xmm6,rdi
  003a4:    	jmp    0x3bb
  003a9:    	call   0xffff3ef1
  003ae:    	test   rax,rax
  003b1:    	je     0x38c37
  003b7:    	movq   xmm6,xmm0
  003bb:    	movq   xmm7,xmm6
  003bf:    	mulsd  xmm7,xmm5
:00023 %14 = const[Math]                    [Math]
  003c3: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff64d3]        # 0xffff689d
  003ca: 00 	cmp    rax,QWORD PTR [rip+0x208c]        # 0x245d
  003d1:    	jne    0x38c73
  003d7: 00 	mov    rax,QWORD PTR [rip+0x206f]        # 0x244d
  003de: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %15 = %3
:00025 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
:00026 
  003e5:    	movq   xmm0,xmm4
  003e9:    	call   0xffff3fe4
  003ee: ff 	mov    QWORD PTR [rbp-0xa0],rax
  003f5: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003fc: 00 	test   rdi,0x7
  00403:    	jne    0x38cfb
  00409:    	cmp    DWORD PTR [rdi+0x4],0x20
  0040d:    	jne    0x38cfb
  00413: 26 	cmp    DWORD PTR [rip+0xffffffffffff647b],0x26        # 0xffff6895
  0041a:    	jne    0x38cfb
  00420: 00 	mov    r9,0x0
  00427:    	sub    rsp,0x20
  0042b:    	movq   QWORD PTR [rsp],xmm2
  00430:    	movq   QWORD PTR [rsp+0x8],xmm3
  00436:    	movq   QWORD PTR [rsp+0x10],xmm4
  0043c:    	movq   QWORD PTR [rsp+0x18],xmm7
  00442:    	mov    rdx,rdi
  00445:    	mov    rax,QWORD PTR [rbx]
  00448:    	lea    rdi,[rsp-0x18]
  0044d:    	mov    QWORD PTR [rdi],rax
  00450:    	mov    QWORD PTR [rbx],rdi
  00453: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0045c:    	mov    QWORD PTR [rsp-0x38],rcx
  00461: ff 	lea    rcx,[rbp-0xa0]
  00468: 00 	mov    r8,0x1
  0046f:    	call   0x38d34
  00474:    	lea    rdi,[rbp-0x8]
  00478:    	mov    QWORD PTR [rbx],rdi
  0047b:    	movq   xmm2,QWORD PTR [rsp]
  00480:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00486:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0048c:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00492:    	add    rsp,0x20
  00496: 3a 	movabs r13,0x563a608df0c0
  004a0:    	test   rax,rax
  004a3:    	je     0xffff3eb8
  004a9: ff 	mov    QWORD PTR [rbp-0x90],rax
:00028 %15 = const[Math]                    [Math]
  004b0: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff63e6]        # 0xffff689d
  004b7: 00 	cmp    rax,QWORD PTR [rip+0x1fbf]        # 0x247d
  004be:    	jne    0x38d66
  004c4: 00 	mov    rax,QWORD PTR [rip+0x1fa2]        # 0x246d
  004cb: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00029 %16 = literal[1.0]
  004d2: 00 	movq   xmm2,QWORD PTR [rip+0x1fb3]        # 0x248d
:00030 %16 = %16 - %2                       [Float][Float]
  004da:    	subsd  xmm2,xmm3
:00031 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
:00032 
  004de:    	rex.W sqrtsd xmm5,xmm2
:00034 %5 = %13 * %14                       [Float][Float]
  004e3: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  004ea: 00 	test   rdi,0x1
  004f1:    	jne    0x38de2
  004f7: 00 	test   rdi,0x2
  004fe:    	je     0x53a
  00504:    	xorps  xmm6,xmm6
  00507: 00 	movabs rax,0x8000000000000002
  00511:    	cmp    rdi,rax
  00514:    	je     0x54c
  0051a:    	mov    rax,rdi
  0051d:    	sar    rax,0x3f
  00521:    	add    rax,0x2
  00525:    	and    rdi,0xfffffffffffffffc
  00529:    	or     rdi,rax
  0052c:    	rol    rdi,0x3d
  00530:    	movq   xmm6,rdi
  00535:    	jmp    0x54c
  0053a:    	call   0xffff3ef1
  0053f:    	test   rax,rax
  00542:    	je     0x38de2
  00548:    	movq   xmm6,xmm0
  0054c:    	movq   xmm8,xmm6
  00551:    	mulsd  xmm8,xmm5
:00035 %13 = const[Math]                    [Math]
  00556: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff6340]        # 0xffff689d
  0055d: 00 	cmp    rax,QWORD PTR [rip+0x1f49]        # 0x24ad
  00564:    	jne    0x38e2b
  0056a: 00 	mov    rax,QWORD PTR [rip+0x1f2c]        # 0x249d
  00571: ff 	mov    QWORD PTR [rbp-0x90],rax
:00036 %14 = %2
:00037 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
:00038 
  00578:    	rex.W sqrtsd xmm5,xmm3
:00040 %14 = dynvar(2, %2)
  0057d:    	mov    rax,QWORD PTR [rbp-0x10]
  00581:    	mov    rax,QWORD PTR [rax]
  00584:    	mov    rax,QWORD PTR [rax-0x28]
  00588: ff 	mov    QWORD PTR [rbp-0x98],rax
:00041 %15 = 0: i32
  0058f: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00042 %14 = %14.[%15]
  0059a:    	sub    rsp,0x30
  0059e:    	movq   QWORD PTR [rsp],xmm2
  005a3:    	movq   QWORD PTR [rsp+0x8],xmm3
  005a9:    	movq   QWORD PTR [rsp+0x10],xmm4
  005af:    	movq   QWORD PTR [rsp+0x18],xmm5
  005b5:    	movq   QWORD PTR [rsp+0x20],xmm7
  005bb: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  005c2: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  005c9: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  005d0:    	mov    rdi,rbx
  005d3:    	mov    rsi,r12
  005d6: 3a 	movabs rax,0x563a5fe90750
  005e0:    	call   rax
  005e2:    	movq   xmm2,QWORD PTR [rsp]
  005e7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005ed:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005f3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005f9:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005ff: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00606:    	add    rsp,0x30
  0060a: 3a 	movabs r13,0x563a608df1c0
  00614:    	test   rax,rax
  00617:    	je     0xffff3eb8
  0061d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00043 %13 = %14.call x()                   [Vec]
:00044 
  00624: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0062b: 00 	test   rdi,0x7
  00632:    	jne    0x38ec1
  00638:    	cmp    DWORD PTR [rdi+0x4],0x25
  0063c:    	jne    0x38ec1
  00642: 26 	cmp    DWORD PTR [rip+0xffffffffffff624c],0x26        # 0xffff6895
  00649:    	jne    0x38ec1
  0064f:    	mov    esi,DWORD PTR [rip+0x1e64]        # 0x24b9
  00655:    	cmp    esi,0xffffffff
  00658:    	je     0x38f15
  0065e:    	xor    rax,rax
  00661:    	mov    ax,WORD PTR [rdi+0x2]
  00665:    	cmp    rax,0x3
  00669:    	jne    0x682
  0066f:    	cmp    esi,0x6
  00672:    	jge    0x682
  00678:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0067d:    	jmp    0x6de
  00682:    	sub    rsp,0x30
  00686:    	movq   QWORD PTR [rsp],xmm2
  0068b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00691:    	movq   QWORD PTR [rsp+0x10],xmm4
  00697:    	movq   QWORD PTR [rsp+0x18],xmm5
  0069d:    	movq   QWORD PTR [rsp+0x20],xmm7
  006a3: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  006aa: 3a 	movabs rax,0x563a5fe35570
  006b4:    	call   rax
  006b6:    	movq   xmm2,QWORD PTR [rsp]
  006bb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006c1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006c7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006cd:    	movq   xmm7,QWORD PTR [rsp+0x20]
  006d3: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  006da:    	add    rsp,0x30
  006de: ff 	mov    QWORD PTR [rbp-0x90],rax
:00046 %13 = %4 * %13                       [Float][Float]
  006e5: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  006ec: 00 	test   rdi,0x1
  006f3:    	jne    0x38f8e
  006f9: 00 	test   rdi,0x2
  00700:    	je     0x73c
  00706:    	xorps  xmm6,xmm6
  00709: 00 	movabs rax,0x8000000000000002
  00713:    	cmp    rdi,rax
  00716:    	je     0x74e
  0071c:    	mov    rax,rdi
  0071f:    	sar    rax,0x3f
  00723:    	add    rax,0x2
  00727:    	and    rdi,0xfffffffffffffffc
  0072b:    	or     rdi,rax
  0072e:    	rol    rdi,0x3d
  00732:    	movq   xmm6,rdi
  00737:    	jmp    0x74e
  0073c:    	call   0xffff3ef1
  00741:    	test   rax,rax
  00744:    	je     0x38f8e
  0074a:    	movq   xmm6,xmm0
  0074e:    	mulsd  xmm6,xmm7
:00047 %15 = dynvar(2, %2)
  00752:    	mov    rax,QWORD PTR [rbp-0x10]
  00756:    	mov    rax,QWORD PTR [rax]
  00759:    	mov    rax,QWORD PTR [rax-0x28]
  0075d: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00048 %16 = 1: i32
  00764: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00049 %15 = %15.[%16]
  0076f:    	sub    rsp,0x30
  00773:    	movq   QWORD PTR [rsp],xmm3
  00778:    	movq   QWORD PTR [rsp+0x8],xmm4
  0077e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00784:    	movq   QWORD PTR [rsp+0x18],xmm6
  0078a:    	movq   QWORD PTR [rsp+0x20],xmm7
  00790: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00797: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  0079e: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  007a5:    	mov    rdi,rbx
  007a8:    	mov    rsi,r12
  007ab: 3a 	movabs rax,0x563a5fe90750
  007b5:    	call   rax
  007b7:    	movq   xmm3,QWORD PTR [rsp]
  007bc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007c2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007c8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007ce:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007d4: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  007db:    	add    rsp,0x30
  007df: 3a 	movabs r13,0x563a608df230
  007e9:    	test   rax,rax
  007ec:    	je     0xffff3eb8
  007f2: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00050 %14 = %15.call x()                   [Vec]
:00051 
  007f9: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00800: 00 	test   rdi,0x7
  00807:    	jne    0x38fe2
  0080d:    	cmp    DWORD PTR [rdi+0x4],0x25
  00811:    	jne    0x38fe2
  00817: 26 	cmp    DWORD PTR [rip+0xffffffffffff6077],0x26        # 0xffff6895
  0081e:    	jne    0x38fe2
  00824:    	mov    esi,DWORD PTR [rip+0x1c97]        # 0x24c1
  0082a:    	cmp    esi,0xffffffff
  0082d:    	je     0x39036
  00833:    	xor    rax,rax
  00836:    	mov    ax,WORD PTR [rdi+0x2]
  0083a:    	cmp    rax,0x3
  0083e:    	jne    0x857
  00844:    	cmp    esi,0x6
  00847:    	jge    0x857
  0084d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00852:    	jmp    0x8b3
  00857:    	sub    rsp,0x30
  0085b:    	movq   QWORD PTR [rsp],xmm3
  00860:    	movq   QWORD PTR [rsp+0x8],xmm4
  00866:    	movq   QWORD PTR [rsp+0x10],xmm5
  0086c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00872:    	movq   QWORD PTR [rsp+0x20],xmm7
  00878: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0087f: 3a 	movabs rax,0x563a5fe35570
  00889:    	call   rax
  0088b:    	movq   xmm3,QWORD PTR [rsp]
  00890:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00896:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0089c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008a2:    	movq   xmm7,QWORD PTR [rsp+0x20]
  008a8: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  008af:    	add    rsp,0x30
  008b3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00053 %14 = %5 * %14                       [Float][Float]
  008ba: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  008c1: 00 	test   rdi,0x1
  008c8:    	jne    0x390af
  008ce: 00 	test   rdi,0x2
  008d5:    	je     0x911
  008db:    	xorps  xmm2,xmm2
  008de: 00 	movabs rax,0x8000000000000002
  008e8:    	cmp    rdi,rax
  008eb:    	je     0x923
  008f1:    	mov    rax,rdi
  008f4:    	sar    rax,0x3f
  008f8:    	add    rax,0x2
  008fc:    	and    rdi,0xfffffffffffffffc
  00900:    	or     rdi,rax
  00903:    	rol    rdi,0x3d
  00907:    	movq   xmm2,rdi
  0090c:    	jmp    0x923
  00911:    	call   0xffff3ef1
  00916:    	test   rax,rax
  00919:    	je     0x390af
  0091f:    	movq   xmm2,xmm0
  00923:    	mulsd  xmm2,xmm8
:00054 %13 = %13 + %14                      [Float][Float]
  00928:    	addsd  xmm6,xmm2
:00055 %15 = dynvar(2, %2)
  0092c:    	mov    rax,QWORD PTR [rbp-0x10]
  00930:    	mov    rax,QWORD PTR [rax]
  00933:    	mov    rax,QWORD PTR [rax-0x28]
  00937: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00056 %16 = 2: i32
  0093e: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00057 %15 = %15.[%16]
  00949:    	sub    rsp,0x40
  0094d:    	movq   QWORD PTR [rsp],xmm2
  00952:    	movq   QWORD PTR [rsp+0x8],xmm3
  00958:    	movq   QWORD PTR [rsp+0x10],xmm4
  0095e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00964:    	movq   QWORD PTR [rsp+0x20],xmm6
  0096a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00970: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00977: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  0097e: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00985:    	mov    rdi,rbx
  00988:    	mov    rsi,r12
  0098b: 3a 	movabs rax,0x563a5fe90750
  00995:    	call   rax
  00997:    	movq   xmm2,QWORD PTR [rsp]
  0099c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009a2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009a8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009ae:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009b4:    	movq   xmm7,QWORD PTR [rsp+0x28]
  009ba: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  009c1:    	add    rsp,0x40
  009c5: 3a 	movabs r13,0x563a608df2b0
  009cf:    	test   rax,rax
  009d2:    	je     0xffff3eb8
  009d8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00058 %14 = %15.call x()                   [Vec]
:00059 
  009df: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  009e6: 00 	test   rdi,0x7
  009ed:    	jne    0x39103
  009f3:    	cmp    DWORD PTR [rdi+0x4],0x25
  009f7:    	jne    0x39103
  009fd: 26 	cmp    DWORD PTR [rip+0xffffffffffff5e91],0x26        # 0xffff6895
  00a04:    	jne    0x39103
  00a0a:    	mov    esi,DWORD PTR [rip+0x1ab9]        # 0x24c9
  00a10:    	cmp    esi,0xffffffff
  00a13:    	je     0x39157
  00a19:    	xor    rax,rax
  00a1c:    	mov    ax,WORD PTR [rdi+0x2]
  00a20:    	cmp    rax,0x3
  00a24:    	jne    0xa3d
  00a2a:    	cmp    esi,0x6
  00a2d:    	jge    0xa3d
  00a33:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a38:    	jmp    0xa99
  00a3d:    	sub    rsp,0x30
  00a41:    	movq   QWORD PTR [rsp],xmm3
  00a46:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a4c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a52:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a58:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a5e: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00a65: 3a 	movabs rax,0x563a5fe35570
  00a6f:    	call   rax
  00a71:    	movq   xmm3,QWORD PTR [rsp]
  00a76:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a7c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a82:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a88:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00a8e: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00a95:    	add    rsp,0x30
  00a99: ff 	mov    QWORD PTR [rbp-0x98],rax
:00061 %14 = %6 * %14                       [Float][Float]
  00aa0: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00aa7: 00 	test   rdi,0x1
  00aae:    	jne    0x391d0
  00ab4: 00 	test   rdi,0x2
  00abb:    	je     0xaf7
  00ac1:    	xorps  xmm2,xmm2
  00ac4: 00 	movabs rax,0x8000000000000002
  00ace:    	cmp    rdi,rax
  00ad1:    	je     0xb09
  00ad7:    	mov    rax,rdi
  00ada:    	sar    rax,0x3f
  00ade:    	add    rax,0x2
  00ae2:    	and    rdi,0xfffffffffffffffc
  00ae6:    	or     rdi,rax
  00ae9:    	rol    rdi,0x3d
  00aed:    	movq   xmm2,rdi
  00af2:    	jmp    0xb09
  00af7:    	call   0xffff3ef1
  00afc:    	test   rax,rax
  00aff:    	je     0x391d0
  00b05:    	movq   xmm2,xmm0
  00b09:    	mulsd  xmm2,xmm5
:00062 %7 = %13 + %14                       [Float][Float]
  00b0d:    	movq   xmm9,xmm6
  00b12:    	addsd  xmm9,xmm2
:00063 %14 = dynvar(2, %2)
  00b17:    	mov    rax,QWORD PTR [rbp-0x10]
  00b1b:    	mov    rax,QWORD PTR [rax]
  00b1e:    	mov    rax,QWORD PTR [rax-0x28]
  00b22: ff 	mov    QWORD PTR [rbp-0x98],rax
:00064 %15 = 0: i32
  00b29: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00065 %14 = %14.[%15]
  00b34:    	sub    rsp,0x40
  00b38:    	movq   QWORD PTR [rsp],xmm3
  00b3d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b43:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b49:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b4f:    	movq   QWORD PTR [rsp+0x20],xmm7
  00b55: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00b5c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00b63: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00b6a: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00b71:    	mov    rdi,rbx
  00b74:    	mov    rsi,r12
  00b77: 3a 	movabs rax,0x563a5fe90750
  00b81:    	call   rax
  00b83:    	movq   xmm3,QWORD PTR [rsp]
  00b88:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b8e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b94:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b9a:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00ba0: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00ba7: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00bae:    	add    rsp,0x40
  00bb2: 3a 	movabs r13,0x563a608df330
  00bbc:    	test   rax,rax
  00bbf:    	je     0xffff3eb8
  00bc5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00066 %13 = %14.call y()                   [Vec]
:00067 
  00bcc: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00bd3: 00 	test   rdi,0x7
  00bda:    	jne    0x39224
  00be0:    	cmp    DWORD PTR [rdi+0x4],0x25
  00be4:    	jne    0x39224
  00bea: 26 	cmp    DWORD PTR [rip+0xffffffffffff5ca4],0x26        # 0xffff6895
  00bf1:    	jne    0x39224
  00bf7:    	mov    esi,DWORD PTR [rip+0x18d4]        # 0x24d1
  00bfd:    	cmp    esi,0xffffffff
  00c00:    	je     0x39276
  00c06:    	xor    rax,rax
  00c09:    	mov    ax,WORD PTR [rdi+0x2]
  00c0d:    	cmp    rax,0x3
  00c11:    	jne    0xc2a
  00c17:    	cmp    esi,0x6
  00c1a:    	jge    0xc2a
  00c20:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c25:    	jmp    0xc88
  00c2a:    	sub    rsp,0x30
  00c2e:    	movq   QWORD PTR [rsp],xmm3
  00c33:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c39:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c3f:    	movq   QWORD PTR [rsp+0x18],xmm7
  00c45: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00c4c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00c53: 3a 	movabs rax,0x563a5fe35570
  00c5d:    	call   rax
  00c5f:    	movq   xmm3,QWORD PTR [rsp]
  00c64:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c6a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c70:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c76: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00c7d: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00c84:    	add    rsp,0x30
  00c88: ff 	mov    QWORD PTR [rbp-0x90],rax
:00069 %13 = %4 * %13                       [Float][Float]
  00c8f: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00c96: 00 	test   rdi,0x1
  00c9d:    	jne    0x392f1
  00ca3: 00 	test   rdi,0x2
  00caa:    	je     0xce6
  00cb0:    	xorps  xmm2,xmm2
  00cb3: 00 	movabs rax,0x8000000000000002
  00cbd:    	cmp    rdi,rax
  00cc0:    	je     0xcf8
  00cc6:    	mov    rax,rdi
  00cc9:    	sar    rax,0x3f
  00ccd:    	add    rax,0x2
  00cd1:    	and    rdi,0xfffffffffffffffc
  00cd5:    	or     rdi,rax
  00cd8:    	rol    rdi,0x3d
  00cdc:    	movq   xmm2,rdi
  00ce1:    	jmp    0xcf8
  00ce6:    	call   0xffff3ef1
  00ceb:    	test   rax,rax
  00cee:    	je     0x392f1
  00cf4:    	movq   xmm2,xmm0
  00cf8:    	mulsd  xmm2,xmm7
:00070 %15 = dynvar(2, %2)
  00cfc:    	mov    rax,QWORD PTR [rbp-0x10]
  00d00:    	mov    rax,QWORD PTR [rax]
  00d03:    	mov    rax,QWORD PTR [rax-0x28]
  00d07: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00071 %16 = 1: i32
  00d0e: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00072 %15 = %15.[%16]
  00d19:    	sub    rsp,0x40
  00d1d:    	movq   QWORD PTR [rsp],xmm2
  00d22:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d28:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d2e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d34:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d3a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00d41: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d48: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00d4f: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00d56:    	mov    rdi,rbx
  00d59:    	mov    rsi,r12
  00d5c: 3a 	movabs rax,0x563a5fe90750
  00d66:    	call   rax
  00d68:    	movq   xmm2,QWORD PTR [rsp]
  00d6d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d73:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d79:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d7f:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d85: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00d8c: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00d93:    	add    rsp,0x40
  00d97: 3a 	movabs r13,0x563a608df3a0
  00da1:    	test   rax,rax
  00da4:    	je     0xffff3eb8
  00daa: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00073 %14 = %15.call y()                   [Vec]
:00074 
  00db1: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00db8: 00 	test   rdi,0x7
  00dbf:    	jne    0x39343
  00dc5:    	cmp    DWORD PTR [rdi+0x4],0x25
  00dc9:    	jne    0x39343
  00dcf: 26 	cmp    DWORD PTR [rip+0xffffffffffff5abf],0x26        # 0xffff6895
  00dd6:    	jne    0x39343
  00ddc:    	mov    esi,DWORD PTR [rip+0x16f7]        # 0x24d9
  00de2:    	cmp    esi,0xffffffff
  00de5:    	je     0x393a5
  00deb:    	xor    rax,rax
  00dee:    	mov    ax,WORD PTR [rdi+0x2]
  00df2:    	cmp    rax,0x3
  00df6:    	jne    0xe0f
  00dfc:    	cmp    esi,0x6
  00dff:    	jge    0xe0f
  00e05:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e0a:    	jmp    0xe79
  00e0f:    	sub    rsp,0x40
  00e13:    	movq   QWORD PTR [rsp],xmm2
  00e18:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e1e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e24:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e2a:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e30: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00e37: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00e3e: 3a 	movabs rax,0x563a5fe35570
  00e48:    	call   rax
  00e4a:    	movq   xmm2,QWORD PTR [rsp]
  00e4f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e55:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e5b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e61:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e67: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00e6e: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00e75:    	add    rsp,0x40
  00e79: ff 	mov    QWORD PTR [rbp-0x98],rax
:00076 %14 = %5 * %14                       [Float][Float]
  00e80: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e87: 00 	test   rdi,0x1
  00e8e:    	jne    0x3942c
  00e94: 00 	test   rdi,0x2
  00e9b:    	je     0xed7
  00ea1:    	xorps  xmm6,xmm6
  00ea4: 00 	movabs rax,0x8000000000000002
  00eae:    	cmp    rdi,rax
  00eb1:    	je     0xee9
  00eb7:    	mov    rax,rdi
  00eba:    	sar    rax,0x3f
  00ebe:    	add    rax,0x2
  00ec2:    	and    rdi,0xfffffffffffffffc
  00ec6:    	or     rdi,rax
  00ec9:    	rol    rdi,0x3d
  00ecd:    	movq   xmm6,rdi
  00ed2:    	jmp    0xee9
  00ed7:    	call   0xffff3ef1
  00edc:    	test   rax,rax
  00edf:    	je     0x3942c
  00ee5:    	movq   xmm6,xmm0
  00ee9:    	mulsd  xmm6,xmm8
:00077 %13 = %13 + %14                      [Float][Float]
  00eee:    	addsd  xmm2,xmm6
:00078 %15 = dynvar(2, %2)
  00ef2:    	mov    rax,QWORD PTR [rbp-0x10]
  00ef6:    	mov    rax,QWORD PTR [rax]
  00ef9:    	mov    rax,QWORD PTR [rax-0x28]
  00efd: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00079 %16 = 2: i32
  00f04: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00080 %15 = %15.[%16]
  00f0f:    	sub    rsp,0x40
  00f13:    	movq   QWORD PTR [rsp],xmm2
  00f18:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f1e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f24:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f2a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f30:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f36: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f3d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f44: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00f4b: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00f52:    	mov    rdi,rbx
  00f55:    	mov    rsi,r12
  00f58: 3a 	movabs rax,0x563a5fe90750
  00f62:    	call   rax
  00f64:    	movq   xmm2,QWORD PTR [rsp]
  00f69:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f6f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f75:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f7b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f81:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f87: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00f8e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00f95:    	add    rsp,0x40
  00f99: 3a 	movabs r13,0x563a608df420
  00fa3:    	test   rax,rax
  00fa6:    	je     0xffff3eb8
  00fac: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00081 %14 = %15.call y()                   [Vec]
:00082 
  00fb3: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00fba: 00 	test   rdi,0x7
  00fc1:    	jne    0x3948e
  00fc7:    	cmp    DWORD PTR [rdi+0x4],0x25
  00fcb:    	jne    0x3948e
  00fd1: 26 	cmp    DWORD PTR [rip+0xffffffffffff58bd],0x26        # 0xffff6895
  00fd8:    	jne    0x3948e
  00fde:    	mov    esi,DWORD PTR [rip+0x14fd]        # 0x24e1
  00fe4:    	cmp    esi,0xffffffff
  00fe7:    	je     0x394f0
  00fed:    	xor    rax,rax
  00ff0:    	mov    ax,WORD PTR [rdi+0x2]
  00ff4:    	cmp    rax,0x3
  00ff8:    	jne    0x1011
  00ffe:    	cmp    esi,0x6
  01001:    	jge    0x1011
  01007:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0100c:    	jmp    0x107b
  01011:    	sub    rsp,0x40
  01015:    	movq   QWORD PTR [rsp],xmm2
  0101a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01020:    	movq   QWORD PTR [rsp+0x10],xmm4
  01026:    	movq   QWORD PTR [rsp+0x18],xmm5
  0102c:    	movq   QWORD PTR [rsp+0x20],xmm7
  01032: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01039: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01040: 3a 	movabs rax,0x563a5fe35570
  0104a:    	call   rax
  0104c:    	movq   xmm2,QWORD PTR [rsp]
  01051:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01057:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0105d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01063:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01069: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01070: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01077:    	add    rsp,0x40
  0107b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00084 %14 = %6 * %14                       [Float][Float]
  01082: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01089: 00 	test   rdi,0x1
  01090:    	jne    0x39577
  01096: 00 	test   rdi,0x2
  0109d:    	je     0x10d9
  010a3:    	xorps  xmm6,xmm6
  010a6: 00 	movabs rax,0x8000000000000002
  010b0:    	cmp    rdi,rax
  010b3:    	je     0x10eb
  010b9:    	mov    rax,rdi
  010bc:    	sar    rax,0x3f
  010c0:    	add    rax,0x2
  010c4:    	and    rdi,0xfffffffffffffffc
  010c8:    	or     rdi,rax
  010cb:    	rol    rdi,0x3d
  010cf:    	movq   xmm6,rdi
  010d4:    	jmp    0x10eb
  010d9:    	call   0xffff3ef1
  010de:    	test   rax,rax
  010e1:    	je     0x39577
  010e7:    	movq   xmm6,xmm0
  010eb:    	mulsd  xmm6,xmm5
:00085 %8 = %13 + %14                       [Float][Float]
  010ef:    	movq   xmm10,xmm2
  010f4:    	addsd  xmm10,xmm6
:00086 %14 = dynvar(2, %2)
  010f9:    	mov    rax,QWORD PTR [rbp-0x10]
  010fd:    	mov    rax,QWORD PTR [rax]
  01100:    	mov    rax,QWORD PTR [rax-0x28]
  01104: ff 	mov    QWORD PTR [rbp-0x98],rax
:00087 %15 = 0: i32
  0110b: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00088 %14 = %14.[%15]
  01116:    	sub    rsp,0x40
  0111a:    	movq   QWORD PTR [rsp],xmm2
  0111f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01125:    	movq   QWORD PTR [rsp+0x10],xmm4
  0112b:    	movq   QWORD PTR [rsp+0x18],xmm5
  01131:    	movq   QWORD PTR [rsp+0x20],xmm7
  01137: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0113e: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01145: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0114c: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01153: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0115a:    	mov    rdi,rbx
  0115d:    	mov    rsi,r12
  01160: 3a 	movabs rax,0x563a5fe90750
  0116a:    	call   rax
  0116c:    	movq   xmm2,QWORD PTR [rsp]
  01171:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01177:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0117d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01183:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01189: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01190: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01197: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0119e:    	add    rsp,0x40
  011a2: 3a 	movabs r13,0x563a608df4a0
  011ac:    	test   rax,rax
  011af:    	je     0xffff3eb8
  011b5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %13 = %14.call z()                   [Vec]
:00090 
  011bc: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  011c3: 00 	test   rdi,0x7
  011ca:    	jne    0x395d9
  011d0:    	cmp    DWORD PTR [rdi+0x4],0x25
  011d4:    	jne    0x395d9
  011da: 26 	cmp    DWORD PTR [rip+0xffffffffffff56b4],0x26        # 0xffff6895
  011e1:    	jne    0x395d9
  011e7:    	mov    esi,DWORD PTR [rip+0x12fc]        # 0x24e9
  011ed:    	cmp    esi,0xffffffff
  011f0:    	je     0x39639
  011f6:    	xor    rax,rax
  011f9:    	mov    ax,WORD PTR [rdi+0x2]
  011fd:    	cmp    rax,0x3
  01201:    	jne    0x121a
  01207:    	cmp    esi,0x6
  0120a:    	jge    0x121a
  01210:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01215:    	jmp    0x1286
  0121a:    	sub    rsp,0x40
  0121e:    	movq   QWORD PTR [rsp],xmm3
  01223:    	movq   QWORD PTR [rsp+0x8],xmm4
  01229:    	movq   QWORD PTR [rsp+0x10],xmm5
  0122f:    	movq   QWORD PTR [rsp+0x18],xmm7
  01235: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0123c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01243: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0124a: 3a 	movabs rax,0x563a5fe35570
  01254:    	call   rax
  01256:    	movq   xmm3,QWORD PTR [rsp]
  0125b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01261:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01267:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0126d: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01274: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0127b: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01282:    	add    rsp,0x40
  01286: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 %13 = %4 * %13                       [Float][Float]
  0128d: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01294: 00 	test   rdi,0x1
  0129b:    	jne    0x396c2
  012a1: 00 	test   rdi,0x2
  012a8:    	je     0x12e4
  012ae:    	xorps  xmm2,xmm2
  012b1: 00 	movabs rax,0x8000000000000002
  012bb:    	cmp    rdi,rax
  012be:    	je     0x12f6
  012c4:    	mov    rax,rdi
  012c7:    	sar    rax,0x3f
  012cb:    	add    rax,0x2
  012cf:    	and    rdi,0xfffffffffffffffc
  012d3:    	or     rdi,rax
  012d6:    	rol    rdi,0x3d
  012da:    	movq   xmm2,rdi
  012df:    	jmp    0x12f6
  012e4:    	call   0xffff3ef1
  012e9:    	test   rax,rax
  012ec:    	je     0x396c2
  012f2:    	movq   xmm2,xmm0
  012f6:    	mulsd  xmm2,xmm7
:00093 %15 = dynvar(2, %2)
  012fa:    	mov    rax,QWORD PTR [rbp-0x10]
  012fe:    	mov    rax,QWORD PTR [rax]
  01301:    	mov    rax,QWORD PTR [rax-0x28]
  01305: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00094 %16 = 1: i32
  0130c: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00095 %15 = %15.[%16]
  01317:    	sub    rsp,0x40
  0131b:    	movq   QWORD PTR [rsp],xmm2
  01320:    	movq   QWORD PTR [rsp+0x8],xmm3
  01326:    	movq   QWORD PTR [rsp+0x10],xmm4
  0132c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01332:    	movq   QWORD PTR [rsp+0x20],xmm7
  01338: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0133f: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01346: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0134d: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01354: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0135b:    	mov    rdi,rbx
  0135e:    	mov    rsi,r12
  01361: 3a 	movabs rax,0x563a5fe90750
  0136b:    	call   rax
  0136d:    	movq   xmm2,QWORD PTR [rsp]
  01372:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01378:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0137e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01384:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0138a: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01391: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01398: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0139f:    	add    rsp,0x40
  013a3: 3a 	movabs r13,0x563a608df510
  013ad:    	test   rax,rax
  013b0:    	je     0xffff3eb8
  013b6: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00096 %14 = %15.call z()                   [Vec]
:00097 
  013bd: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  013c4: 00 	test   rdi,0x7
  013cb:    	jne    0x39722
  013d1:    	cmp    DWORD PTR [rdi+0x4],0x25
  013d5:    	jne    0x39722
  013db: 26 	cmp    DWORD PTR [rip+0xffffffffffff54b3],0x26        # 0xffff6895
  013e2:    	jne    0x39722
  013e8:    	mov    esi,DWORD PTR [rip+0x1103]        # 0x24f1
  013ee:    	cmp    esi,0xffffffff
  013f1:    	je     0x39792
  013f7:    	xor    rax,rax
  013fa:    	mov    ax,WORD PTR [rdi+0x2]
  013fe:    	cmp    rax,0x3
  01402:    	jne    0x141b
  01408:    	cmp    esi,0x6
  0140b:    	jge    0x141b
  01411:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01416:    	jmp    0x1493
  0141b:    	sub    rsp,0x40
  0141f:    	movq   QWORD PTR [rsp],xmm2
  01424:    	movq   QWORD PTR [rsp+0x8],xmm3
  0142a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01430:    	movq   QWORD PTR [rsp+0x18],xmm5
  01436:    	movq   QWORD PTR [rsp+0x20],xmm7
  0143c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01443: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0144a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01451: 3a 	movabs rax,0x563a5fe35570
  0145b:    	call   rax
  0145d:    	movq   xmm2,QWORD PTR [rsp]
  01462:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01468:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0146e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01474:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0147a: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01481: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01488: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0148f:    	add    rsp,0x40
  01493: ff 	mov    QWORD PTR [rbp-0x98],rax
:00099 %14 = %5 * %14                       [Float][Float]
  0149a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  014a1: 00 	test   rdi,0x1
  014a8:    	jne    0x39827
  014ae: 00 	test   rdi,0x2
  014b5:    	je     0x14f1
  014bb:    	xorps  xmm6,xmm6
  014be: 00 	movabs rax,0x8000000000000002
  014c8:    	cmp    rdi,rax
  014cb:    	je     0x1503
  014d1:    	mov    rax,rdi
  014d4:    	sar    rax,0x3f
  014d8:    	add    rax,0x2
  014dc:    	and    rdi,0xfffffffffffffffc
  014e0:    	or     rdi,rax
  014e3:    	rol    rdi,0x3d
  014e7:    	movq   xmm6,rdi
  014ec:    	jmp    0x1503
  014f1:    	call   0xffff3ef1
  014f6:    	test   rax,rax
  014f9:    	je     0x39827
  014ff:    	movq   xmm6,xmm0
  01503:    	mulsd  xmm6,xmm8
:00100 %13 = %13 + %14                      [Float][Float]
  01508:    	addsd  xmm2,xmm6
:00101 %15 = dynvar(2, %2)
  0150c:    	mov    rax,QWORD PTR [rbp-0x10]
  01510:    	mov    rax,QWORD PTR [rax]
  01513:    	mov    rax,QWORD PTR [rax-0x28]
  01517: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00102 %16 = 2: i32
  0151e: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00103 %15 = %15.[%16]
  01529:    	sub    rsp,0x50
  0152d:    	movq   QWORD PTR [rsp],xmm2
  01532:    	movq   QWORD PTR [rsp+0x8],xmm3
  01538:    	movq   QWORD PTR [rsp+0x10],xmm4
  0153e:    	movq   QWORD PTR [rsp+0x18],xmm5
  01544:    	movq   QWORD PTR [rsp+0x20],xmm6
  0154a:    	movq   QWORD PTR [rsp+0x28],xmm7
  01550: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01557: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0155e: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01565: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  0156c: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  01573:    	mov    rdi,rbx
  01576:    	mov    rsi,r12
  01579: 3a 	movabs rax,0x563a5fe90750
  01583:    	call   rax
  01585:    	movq   xmm2,QWORD PTR [rsp]
  0158a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01590:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01596:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0159c:    	movq   xmm6,QWORD PTR [rsp+0x20]
  015a2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  015a8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  015af: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  015b6: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  015bd:    	add    rsp,0x50
  015c1: 3a 	movabs r13,0x563a608df590
  015cb:    	test   rax,rax
  015ce:    	je     0xffff3eb8
  015d4: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00104 %14 = %15.call z()                   [Vec]
:00105 
  015db: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  015e2: 00 	test   rdi,0x7
  015e9:    	jne    0x39897
  015ef:    	cmp    DWORD PTR [rdi+0x4],0x25
  015f3:    	jne    0x39897
  015f9: 26 	cmp    DWORD PTR [rip+0xffffffffffff5295],0x26        # 0xffff6895
  01600:    	jne    0x39897
  01606:    	mov    esi,DWORD PTR [rip+0xeed]        # 0x24f9
  0160c:    	cmp    esi,0xffffffff
  0160f:    	je     0x39907
  01615:    	xor    rax,rax
  01618:    	mov    ax,WORD PTR [rdi+0x2]
  0161c:    	cmp    rax,0x3
  01620:    	jne    0x1639
  01626:    	cmp    esi,0x6
  01629:    	jge    0x1639
  0162f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01634:    	jmp    0x16b1
  01639:    	sub    rsp,0x40
  0163d:    	movq   QWORD PTR [rsp],xmm2
  01642:    	movq   QWORD PTR [rsp+0x8],xmm3
  01648:    	movq   QWORD PTR [rsp+0x10],xmm4
  0164e:    	movq   QWORD PTR [rsp+0x18],xmm5
  01654:    	movq   QWORD PTR [rsp+0x20],xmm7
  0165a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01661: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01668: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0166f: 3a 	movabs rax,0x563a5fe35570
  01679:    	call   rax
  0167b:    	movq   xmm2,QWORD PTR [rsp]
  01680:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01686:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0168c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01692:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01698: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0169f: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  016a6: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  016ad:    	add    rsp,0x40
  016b1: ff 	mov    QWORD PTR [rbp-0x98],rax
:00107 %14 = %6 * %14                       [Float][Float]
  016b8: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  016bf: 00 	test   rdi,0x1
  016c6:    	jne    0x3999c
  016cc: 00 	test   rdi,0x2
  016d3:    	je     0x170f
  016d9:    	xorps  xmm6,xmm6
  016dc: 00 	movabs rax,0x8000000000000002
  016e6:    	cmp    rdi,rax
  016e9:    	je     0x1721
  016ef:    	mov    rax,rdi
  016f2:    	sar    rax,0x3f
  016f6:    	add    rax,0x2
  016fa:    	and    rdi,0xfffffffffffffffc
  016fe:    	or     rdi,rax
  01701:    	rol    rdi,0x3d
  01705:    	movq   xmm6,rdi
  0170a:    	jmp    0x1721
  0170f:    	call   0xffff3ef1
  01714:    	test   rax,rax
  01717:    	je     0x3999c
  0171d:    	movq   xmm6,xmm0
  01721:    	mulsd  xmm6,xmm5
:00108 %9 = %13 + %14                       [Float][Float]
  01725:    	movq   xmm11,xmm2
  0172a:    	addsd  xmm11,xmm6
:00109 %13 = const[Vec]                     [Vec]
  0172f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5167]        # 0xffff689d
  01736: 00 	cmp    rax,QWORD PTR [rip+0xdd0]        # 0x250d
  0173d:    	jne    0x39a0c
  01743: 00 	mov    rax,QWORD PTR [rip+0xdb3]        # 0x24fd
  0174a: ff 	mov    QWORD PTR [rbp-0x90],rax
:00110 %14 = %7
:00111 %15 = %8
:00112 %16 = %9
:00113 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
:00114 
  01751:    	movq   xmm0,xmm9
  01756:    	call   0xffff3fe4
  0175b: ff 	mov    QWORD PTR [rbp-0x98],rax
  01762:    	movq   xmm0,xmm10
  01767:    	call   0xffff3fe4
  0176c: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01773:    	movq   xmm0,xmm11
  01778:    	call   0xffff3fe4
  0177d: ff 	mov    QWORD PTR [rbp-0xa8],rax
  01784: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0178b: 00 	test   rdi,0x7
  01792:    	jne    0x39acc
  01798:    	cmp    DWORD PTR [rdi+0x4],0x26
  0179c:    	jne    0x39acc
  017a2: 26 	cmp    DWORD PTR [rip+0xffffffffffff50ec],0x26        # 0xffff6895
  017a9:    	jne    0x39acc
  017af: 00 	mov    r9,0x0
  017b6:    	sub    rsp,0x40
  017ba:    	movq   QWORD PTR [rsp],xmm3
  017bf:    	movq   QWORD PTR [rsp+0x8],xmm4
  017c5:    	movq   QWORD PTR [rsp+0x10],xmm5
  017cb:    	movq   QWORD PTR [rsp+0x18],xmm7
  017d1: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  017d8: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  017df: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  017e6: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  017ed:    	mov    rdx,rdi
  017f0:    	mov    rax,QWORD PTR [rbx]
  017f3:    	lea    rdi,[rsp-0x18]
  017f8:    	mov    QWORD PTR [rdi],rax
  017fb:    	mov    QWORD PTR [rbx],rdi
  017fe: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01807:    	mov    QWORD PTR [rsp-0x38],rcx
  0180c: ff 	lea    rcx,[rbp-0x98]
  01813: 00 	mov    r8,0x3
  0181a:    	call   0x39b3a
  0181f:    	lea    rdi,[rbp-0x8]
  01823:    	mov    QWORD PTR [rbx],rdi
  01826:    	movq   xmm3,QWORD PTR [rsp]
  0182b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01831:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01837:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0183d: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01844: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0184b: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01852: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01859:    	add    rsp,0x40
  0185d: 3a 	movabs r13,0x563a608df640
  01867:    	test   rax,rax
  0186a:    	je     0xffff3eb8
  01870:    	mov    QWORD PTR [rbp-0x78],rax
:00116 %13 = const[Ray]                     [Ray]
  01874: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5022]        # 0xffff689d
  0187b: 00 	cmp    rax,QWORD PTR [rip+0xcab]        # 0x252d
  01882:    	jne    0x39b6c
  01888: 00 	mov    rax,QWORD PTR [rip+0xc8e]        # 0x251d
  0188f: ff 	mov    QWORD PTR [rbp-0x90],rax
:00117 %14 = dynvar(2, %7)
  01896:    	mov    rax,QWORD PTR [rbp-0x10]
  0189a:    	mov    rax,QWORD PTR [rax]
  0189d:    	mov    rax,QWORD PTR [rax-0x50]
  018a1: ff 	mov    QWORD PTR [rbp-0x98],rax
:00118 %15 = %10
  018a8:    	mov    rax,QWORD PTR [rbp-0x78]
  018ac: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00119 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
:00120 
  018b3: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  018ba: 00 	test   rdi,0x7
  018c1:    	jne    0x39c20
  018c7:    	cmp    DWORD PTR [rdi+0x4],0x2c
  018cb:    	jne    0x39c20
  018d1: 26 	cmp    DWORD PTR [rip+0xffffffffffff4fbd],0x26        # 0xffff6895
  018d8:    	jne    0x39c20
  018de: 00 	mov    r9,0x0
  018e5:    	sub    rsp,0x40
  018e9:    	movq   QWORD PTR [rsp],xmm3
  018ee:    	movq   QWORD PTR [rsp+0x8],xmm4
  018f4:    	movq   QWORD PTR [rsp+0x10],xmm5
  018fa:    	movq   QWORD PTR [rsp+0x18],xmm7
  01900: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01907: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0190e: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01915: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  0191c:    	mov    rdx,rdi
  0191f:    	mov    rax,QWORD PTR [rbx]
  01922:    	lea    rdi,[rsp-0x18]
  01927:    	mov    QWORD PTR [rdi],rax
  0192a:    	mov    QWORD PTR [rbx],rdi
  0192d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01936:    	mov    QWORD PTR [rsp-0x38],rcx
  0193b: ff 	lea    rcx,[rbp-0x98]
  01942: 00 	mov    r8,0x2
  01949:    	call   0x39c8e
  0194e:    	lea    rdi,[rbp-0x8]
  01952:    	mov    QWORD PTR [rbx],rdi
  01955:    	movq   xmm3,QWORD PTR [rsp]
  0195a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01960:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01966:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0196c: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01973: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0197a: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01981: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01988:    	add    rsp,0x40
  0198c: 3a 	movabs r13,0x563a608df6a0
  01996:    	test   rax,rax
  01999:    	je     0xffff3eb8
  0199f:    	mov    QWORD PTR [rbp-0x80],rax
:00122 %13 = const[Isect]                   [Isect]
  019a3: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4ef3]        # 0xffff689d
  019aa: 00 	cmp    rax,QWORD PTR [rip+0xb9c]        # 0x254d
  019b1:    	jne    0x39cc0
  019b7: 00 	mov    rax,QWORD PTR [rip+0xb7f]        # 0x253d
  019be: ff 	mov    QWORD PTR [rbp-0x90],rax
:00123 %12 = %13.call new()                 [#<Class:Isect>]
:00124 
  019c5: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  019cc: 00 	test   rdi,0x7
  019d3:    	jne    0x39d74
  019d9:    	cmp    DWORD PTR [rdi+0x4],0x2e
  019dd:    	jne    0x39d74
  019e3: 26 	cmp    DWORD PTR [rip+0xffffffffffff4eab],0x26        # 0xffff6895
  019ea:    	jne    0x39d74
  019f0: 00 	mov    r9,0x0
  019f7:    	sub    rsp,0x40
  019fb:    	movq   QWORD PTR [rsp],xmm3
  01a00:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a06:    	movq   QWORD PTR [rsp+0x10],xmm5
  01a0c:    	movq   QWORD PTR [rsp+0x18],xmm7
  01a12: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01a19: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01a20: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01a27: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01a2e:    	mov    rdx,rdi
  01a31:    	mov    rax,QWORD PTR [rbx]
  01a34:    	lea    rdi,[rsp-0x18]
  01a39:    	mov    QWORD PTR [rdi],rax
  01a3c:    	mov    QWORD PTR [rbx],rdi
  01a3f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a48:    	mov    QWORD PTR [rsp-0x38],rcx
  01a4d: ff 	lea    rcx,[rbp-0x98]
  01a54: 00 	mov    r8,0x0
  01a5b:    	call   0x39de2
  01a60:    	lea    rdi,[rbp-0x8]
  01a64:    	mov    QWORD PTR [rbx],rdi
  01a67:    	movq   xmm3,QWORD PTR [rsp]
  01a6c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a72:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a78:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a7e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a85: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a8c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a93: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a9a:    	add    rsp,0x40
  01a9e: 3a 	movabs r13,0x563a608df6e0
  01aa8:    	test   rax,rax
  01aab:    	je     0xffff3eb8
  01ab1: ff 	mov    QWORD PTR [rbp-0x88],rax
:00126 %13 = @spheres: Scene[IvarId(0)]
  01ab8:    	mov    rdi,QWORD PTR [rbp-0x28]
  01abc:    	xor    rax,rax
  01abf:    	mov    ax,WORD PTR [rdi+0x2]
  01ac3:    	cmp    rax,0x3
  01ac7:    	jne    0x39e14
  01acd:    	mov    rax,QWORD PTR [rdi+0x10]
  01ad1: ff 	mov    QWORD PTR [rbp-0x90],rax
:00127 %14 = 0: i32
  01ad8: ff 	mov    QWORD PTR [rbp-0x98],0x1
:00128 %13 = %13.[%14]
  01ae3:    	sub    rsp,0x40
  01ae7:    	movq   QWORD PTR [rsp],xmm3
  01aec:    	movq   QWORD PTR [rsp+0x8],xmm4
  01af2:    	movq   QWORD PTR [rsp+0x10],xmm5
  01af8:    	movq   QWORD PTR [rsp+0x18],xmm7
  01afe: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01b05: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01b0c: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01b13: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01b1a: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01b21: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01b28:    	mov    rdi,rbx
  01b2b:    	mov    rsi,r12
  01b2e: 3a 	movabs rax,0x563a5fe90750
  01b38:    	call   rax
  01b3a:    	movq   xmm3,QWORD PTR [rsp]
  01b3f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b45:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01b4b:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b51: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01b58: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01b5f: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01b66: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01b6d:    	add    rsp,0x40
  01b71: 3a 	movabs r13,0x563a608df720
  01b7b:    	test   rax,rax
  01b7e:    	je     0xffff3eb8
  01b84: ff 	mov    QWORD PTR [rbp-0x90],rax
:00129 %14 = %11
  01b8b:    	mov    rax,QWORD PTR [rbp-0x80]
  01b8f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00130 %15 = %12
  01b96: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01b9d: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00131 _ = %13.call intersect(%14; 2)       [Sphere]
:00132 
  01ba4: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01bab: 00 	test   rdi,0x7
  01bb2:    	jne    0x39e98
  01bb8:    	cmp    DWORD PTR [rdi+0x4],0x27
  01bbc:    	jne    0x39e98
  01bc2: 26 	cmp    DWORD PTR [rip+0xffffffffffff4ccc],0x26        # 0xffff6895
  01bc9:    	jne    0x39e98
  01bcf:    	sub    rsp,0x40
  01bd3:    	movq   QWORD PTR [rsp],xmm3
  01bd8:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bde:    	movq   QWORD PTR [rsp+0x10],xmm5
  01be4:    	movq   QWORD PTR [rsp+0x18],xmm7
  01bea: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01bf1: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01bf8: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01bff: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01c06:    	mov    rax,QWORD PTR [rbx]
  01c09:    	lea    rdi,[rsp-0x18]
  01c0e:    	mov    QWORD PTR [rdi],rax
  01c11:    	mov    QWORD PTR [rbx],rdi
  01c14: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01c1d:    	mov    QWORD PTR [rsp-0x38],rcx
  01c22: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01c29:    	mov    QWORD PTR [rsp-0x38],rax
  01c2e: 00 	mov    rdi,0x2
  01c35: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01c3c:    	mov    QWORD PTR [rsp-0x40],rax
  01c41: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01c48:    	mov    QWORD PTR [rsp-0x48],rax
  01c4d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c56: 10 	movabs rax,0x100100000003f
  01c60:    	mov    QWORD PTR [rsp-0x28],rax
  01c65: 3a 	movabs r13,0x563a608e6640
  01c6f:    	call   0xffff7470
  01c74:    	lea    rdi,[rbp-0x8]
  01c78:    	mov    QWORD PTR [rbx],rdi
  01c7b:    	movq   xmm3,QWORD PTR [rsp]
  01c80:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c86:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01c8c:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c92: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01c99: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01ca0: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01ca7: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01cae:    	add    rsp,0x40
  01cb2: 3a 	movabs r13,0x563a608df760
  01cbc:    	test   rax,rax
  01cbf:    	je     0xffff3eb8
:00134 %13 = @spheres: Scene[IvarId(0)]
  01cc5:    	mov    rdi,QWORD PTR [rbp-0x28]
  01cc9:    	xor    rax,rax
  01ccc:    	mov    ax,WORD PTR [rdi+0x2]
  01cd0:    	cmp    rax,0x3
  01cd4:    	jne    0x39f06
  01cda:    	mov    rax,QWORD PTR [rdi+0x10]
  01cde: ff 	mov    QWORD PTR [rbp-0x90],rax
:00135 %14 = 1: i32
  01ce5: ff 	mov    QWORD PTR [rbp-0x98],0x3
:00136 %13 = %13.[%14]
  01cf0:    	sub    rsp,0x40
  01cf4:    	movq   QWORD PTR [rsp],xmm3
  01cf9:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cff:    	movq   QWORD PTR [rsp+0x10],xmm5
  01d05:    	movq   QWORD PTR [rsp+0x18],xmm7
  01d0b: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01d12: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01d19: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01d20: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01d27: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01d2e: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01d35:    	mov    rdi,rbx
  01d38:    	mov    rsi,r12
  01d3b: 3a 	movabs rax,0x563a5fe90750
  01d45:    	call   rax
  01d47:    	movq   xmm3,QWORD PTR [rsp]
  01d4c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d52:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01d58:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01d5e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01d65: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01d6c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01d73: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01d7a:    	add    rsp,0x40
  01d7e: 3a 	movabs r13,0x563a608df7a0
  01d88:    	test   rax,rax
  01d8b:    	je     0xffff3eb8
  01d91: ff 	mov    QWORD PTR [rbp-0x90],rax
:00137 %14 = %11
  01d98:    	mov    rax,QWORD PTR [rbp-0x80]
  01d9c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00138 %15 = %12
  01da3: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01daa: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00139 _ = %13.call intersect(%14; 2)       [Sphere]
:00140 
  01db1: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01db8: 00 	test   rdi,0x7
  01dbf:    	jne    0x39f8a
  01dc5:    	cmp    DWORD PTR [rdi+0x4],0x27
  01dc9:    	jne    0x39f8a
  01dcf: 26 	cmp    DWORD PTR [rip+0xffffffffffff4abf],0x26        # 0xffff6895
  01dd6:    	jne    0x39f8a
  01ddc:    	sub    rsp,0x40
  01de0:    	movq   QWORD PTR [rsp],xmm3
  01de5:    	movq   QWORD PTR [rsp+0x8],xmm4
  01deb:    	movq   QWORD PTR [rsp+0x10],xmm5
  01df1:    	movq   QWORD PTR [rsp+0x18],xmm7
  01df7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01dfe: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01e05: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01e0c: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01e13:    	mov    rax,QWORD PTR [rbx]
  01e16:    	lea    rdi,[rsp-0x18]
  01e1b:    	mov    QWORD PTR [rdi],rax
  01e1e:    	mov    QWORD PTR [rbx],rdi
  01e21: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01e2a:    	mov    QWORD PTR [rsp-0x38],rcx
  01e2f: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01e36:    	mov    QWORD PTR [rsp-0x38],rax
  01e3b: 00 	mov    rdi,0x2
  01e42: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01e49:    	mov    QWORD PTR [rsp-0x40],rax
  01e4e: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01e55:    	mov    QWORD PTR [rsp-0x48],rax
  01e5a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01e63: 10 	movabs rax,0x100100000003f
  01e6d:    	mov    QWORD PTR [rsp-0x28],rax
  01e72: 3a 	movabs r13,0x563a608e6640
  01e7c:    	call   0xffff7470
  01e81:    	lea    rdi,[rbp-0x8]
  01e85:    	mov    QWORD PTR [rbx],rdi
  01e88:    	movq   xmm3,QWORD PTR [rsp]
  01e8d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e93:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01e99:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01e9f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01ea6: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01ead: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01eb4: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01ebb:    	add    rsp,0x40
  01ebf: 3a 	movabs r13,0x563a608df7e0
  01ec9:    	test   rax,rax
  01ecc:    	je     0xffff3eb8
:00142 %13 = @spheres: Scene[IvarId(0)]
  01ed2:    	mov    rdi,QWORD PTR [rbp-0x28]
  01ed6:    	xor    rax,rax
  01ed9:    	mov    ax,WORD PTR [rdi+0x2]
  01edd:    	cmp    rax,0x3
  01ee1:    	jne    0x39ff8
  01ee7:    	mov    rax,QWORD PTR [rdi+0x10]
  01eeb: ff 	mov    QWORD PTR [rbp-0x90],rax
:00143 %14 = 2: i32
  01ef2: ff 	mov    QWORD PTR [rbp-0x98],0x5
:00144 %13 = %13.[%14]
  01efd:    	sub    rsp,0x40
  01f01:    	movq   QWORD PTR [rsp],xmm3
  01f06:    	movq   QWORD PTR [rsp+0x8],xmm4
  01f0c:    	movq   QWORD PTR [rsp+0x10],xmm5
  01f12:    	movq   QWORD PTR [rsp+0x18],xmm7
  01f18: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01f1f: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01f26: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01f2d: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01f34: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01f3b: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01f42:    	mov    rdi,rbx
  01f45:    	mov    rsi,r12
  01f48: 3a 	movabs rax,0x563a5fe90750
  01f52:    	call   rax
  01f54:    	movq   xmm3,QWORD PTR [rsp]
  01f59:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01f5f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01f65:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01f6b: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01f72: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01f79: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01f80: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01f87:    	add    rsp,0x40
  01f8b: 3a 	movabs r13,0x563a608df820
  01f95:    	test   rax,rax
  01f98:    	je     0xffff3eb8
  01f9e: ff 	mov    QWORD PTR [rbp-0x90],rax
:00145 %14 = %11
  01fa5:    	mov    rax,QWORD PTR [rbp-0x80]
  01fa9: ff 	mov    QWORD PTR [rbp-0x98],rax
:00146 %15 = %12
  01fb0: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01fb7: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00147 _ = %13.call intersect(%14; 2)       [Sphere]
:00148 
  01fbe: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01fc5: 00 	test   rdi,0x7
  01fcc:    	jne    0x3a07c
  01fd2:    	cmp    DWORD PTR [rdi+0x4],0x27
  01fd6:    	jne    0x3a07c
  01fdc: 26 	cmp    DWORD PTR [rip+0xffffffffffff48b2],0x26        # 0xffff6895
  01fe3:    	jne    0x3a07c
  01fe9:    	sub    rsp,0x40
  01fed:    	movq   QWORD PTR [rsp],xmm3
  01ff2:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ff8:    	movq   QWORD PTR [rsp+0x10],xmm5
  01ffe:    	movq   QWORD PTR [rsp+0x18],xmm7
  02004: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0200b: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02012: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  02019: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02020:    	mov    rax,QWORD PTR [rbx]
  02023:    	lea    rdi,[rsp-0x18]
  02028:    	mov    QWORD PTR [rdi],rax
  0202b:    	mov    QWORD PTR [rbx],rdi
  0202e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02037:    	mov    QWORD PTR [rsp-0x38],rcx
  0203c: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02043:    	mov    QWORD PTR [rsp-0x38],rax
  02048: 00 	mov    rdi,0x2
  0204f: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02056:    	mov    QWORD PTR [rsp-0x40],rax
  0205b: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02062:    	mov    QWORD PTR [rsp-0x48],rax
  02067: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02070: 10 	movabs rax,0x100100000003f
  0207a:    	mov    QWORD PTR [rsp-0x28],rax
  0207f: 3a 	movabs r13,0x563a608e6640
  02089:    	call   0xffff7470
  0208e:    	lea    rdi,[rbp-0x8]
  02092:    	mov    QWORD PTR [rbx],rdi
  02095:    	movq   xmm3,QWORD PTR [rsp]
  0209a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  020a0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  020a6:    	movq   xmm7,QWORD PTR [rsp+0x18]
  020ac: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  020b3: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  020ba: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  020c1: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  020c8:    	add    rsp,0x40
  020cc: 3a 	movabs r13,0x563a608df860
  020d6:    	test   rax,rax
  020d9:    	je     0xffff3eb8
:00150 %13 = @plane: Scene[IvarId(1)]
  020df:    	mov    rdi,QWORD PTR [rbp-0x28]
  020e3:    	xor    rax,rax
  020e6:    	mov    ax,WORD PTR [rdi+0x2]
  020ea:    	cmp    rax,0x3
  020ee:    	jne    0x3a0ea
  020f4:    	mov    rax,QWORD PTR [rdi+0x18]
  020f8: ff 	mov    QWORD PTR [rbp-0x90],rax
:00151 %14 = %11
  020ff:    	mov    rax,QWORD PTR [rbp-0x80]
  02103: ff 	mov    QWORD PTR [rbp-0x98],rax
:00152 %15 = %12
  0210a: ff 	mov    rax,QWORD PTR [rbp-0x88]
  02111: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00153 _ = %13.call intersect(%14; 2)       [Plane]
:00154 
  02118: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0211f: 00 	test   rdi,0x7
  02126:    	jne    0x3a16e
  0212c:    	cmp    DWORD PTR [rdi+0x4],0x29
  02130:    	jne    0x3a16e
  02136: 26 	cmp    DWORD PTR [rip+0xffffffffffff4758],0x26        # 0xffff6895
  0213d:    	jne    0x3a16e
  02143:    	sub    rsp,0x40
  02147:    	movq   QWORD PTR [rsp],xmm3
  0214c:    	movq   QWORD PTR [rsp+0x8],xmm4
  02152:    	movq   QWORD PTR [rsp+0x10],xmm5
  02158:    	movq   QWORD PTR [rsp+0x18],xmm7
  0215e: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02165: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0216c: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  02173: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  0217a:    	mov    rax,QWORD PTR [rbx]
  0217d:    	lea    rdi,[rsp-0x18]
  02182:    	mov    QWORD PTR [rdi],rax
  02185:    	mov    QWORD PTR [rbx],rdi
  02188: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02191:    	mov    QWORD PTR [rsp-0x38],rcx
  02196: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0219d:    	mov    QWORD PTR [rsp-0x38],rax
  021a2: 00 	mov    rdi,0x2
  021a9: ff 	mov    rax,QWORD PTR [rbp-0x98]
  021b0:    	mov    QWORD PTR [rsp-0x40],rax
  021b5: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  021bc:    	mov    QWORD PTR [rsp-0x48],rax
  021c1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  021ca: 0e 	movabs rax,0x1000e00000041
  021d4:    	mov    QWORD PTR [rsp-0x28],rax
  021d9: 3a 	movabs r13,0x563a608e84e0
  021e3:    	call   0xffff7a81
  021e8:    	lea    rdi,[rbp-0x8]
  021ec:    	mov    QWORD PTR [rbx],rdi
  021ef:    	movq   xmm3,QWORD PTR [rsp]
  021f4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  021fa:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02200:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02206: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0220d: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02214: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0221b: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02222:    	add    rsp,0x40
  02226: 3a 	movabs r13,0x563a608df8c0
  02230:    	test   rax,rax
  02233:    	je     0xffff3eb8
:00156 %13 = %12.call hit()                 [Isect]
:00157 
  02239: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  02240: 00 	test   rdi,0x7
  02247:    	jne    0x3a1dc
  0224d:    	cmp    DWORD PTR [rdi+0x4],0x2d
  02251:    	jne    0x3a1dc
  02257: 26 	cmp    DWORD PTR [rip+0xffffffffffff4637],0x26        # 0xffff6895
  0225e:    	jne    0x3a1dc
  02264:    	mov    esi,DWORD PTR [rip+0x2ef]        # 0x2559
  0226a:    	cmp    esi,0xffffffff
  0226d:    	je     0x3a24a
  02273:    	xor    rax,rax
  02276:    	mov    ax,WORD PTR [rdi+0x2]
  0227a:    	cmp    rax,0x3
  0227e:    	jne    0x2297
  02284:    	cmp    esi,0x6
  02287:    	jge    0x2297
  0228d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  02292:    	jmp    0x2311
  02297:    	sub    rsp,0x40
  0229b:    	movq   QWORD PTR [rsp],xmm3
  022a0:    	movq   QWORD PTR [rsp+0x8],xmm4
  022a6:    	movq   QWORD PTR [rsp+0x10],xmm5
  022ac:    	movq   QWORD PTR [rsp+0x18],xmm7
  022b2: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  022b9: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  022c0: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  022c7: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  022ce: 3a 	movabs rax,0x563a5fe35570
  022d8:    	call   rax
  022da:    	movq   xmm3,QWORD PTR [rsp]
  022df:    	movq   xmm4,QWORD PTR [rsp+0x8]
  022e5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  022eb:    	movq   xmm7,QWORD PTR [rsp+0x18]
  022f1: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  022f8: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  022ff: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  02306: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0230d:    	add    rsp,0x40
  02311: ff 	mov    QWORD PTR [rbp-0x90],rax
:00159 condnotbr %13 =>:00165
  02318: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0231f:    	or     rax,0x10
  02323:    	cmp    rax,0x14
  02327:    	je     0x23ae
:00160 %13 = dynvar(2, %6)
  0232d:    	mov    rax,QWORD PTR [rbp-0x10]
  02331:    	mov    rax,QWORD PTR [rax]
  02334:    	mov    rax,QWORD PTR [rax-0x48]
  02338: ff 	mov    QWORD PTR [rbp-0x90],rax
:00161 %14 = literal[1.0]
  0233f: 00 	movq   xmm2,QWORD PTR [rip+0x216]        # 0x255d
:00162 %13 = %13 + %14                      [Integer][Integer]
  02347:    	movq   xmm0,xmm2
  0234b:    	call   0xffff3fe4
  02350: ff 	mov    QWORD PTR [rbp-0x98],rax
  02357: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0235e: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  02365: 00 	test   rdi,0x1
  0236c:    	je     0x3a2e1
  02372: 00 	test   rsi,0x1
  02379:    	je     0x3a2e1
  0237f:    	sub    rdi,0x1
  02383:    	add    rdi,rsi
  02386:    	jo     0x3a2e1
  0238c: ff 	mov    QWORD PTR [rbp-0x90],rdi
:00163 dynvar(2, %6) = %13
  02393:    	mov    rax,QWORD PTR [rbp-0x10]
  02397:    	mov    rax,QWORD PTR [rax]
  0239a: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  023a1:    	mov    QWORD PTR [rax-0x48],rdi
:00164 ret %13
  023a5: ff 	mov    rax,QWORD PTR [rbp-0x90]
  023ac:    	leave  
  023ad:    	ret    
:00165 %13 = literal[0.0]
  023ae: 00 	movq   xmm2,QWORD PTR [rip+0x1b7]        # 0x256d
:00166 ret %13
  023b6:    	movq   xmm0,xmm2
  023ba:    	call   0xffff3fe4
  023bf: ff 	mov    QWORD PTR [rbp-0x90],rax
  023c6: ff 	mov    rax,QWORD PTR [rbp-0x90]
  023cd:    	leave  
  023ce:    	ret    
==> start whole compile: <unnamed> FuncId(71) self_class:Scene start:[00000] bytecode:0x563a608c15d0
<== finished compile. elapsed:20.3µs
offset:Pos(59128) code: 217 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x37dda
  0002c: cmp    DWORD PTR [rdi+0x4],0x2f
  00030: jne    0x37dda
:00000 %3 = dynvar(1, %3)
  00036: mov    rax,QWORD PTR [rbp-0x10]
  0003a: mov    rax,QWORD PTR [rax-0x30]
  0003e: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = literal[73]
  00042: mov    rax,0x93
  00049: mov    QWORD PTR [rbp-0x48],rax
:00002 %2 = %3.call times(&%4)              [Integer]
:00003 
  0004d: mov    rdi,QWORD PTR [rbp-0x40]
  00051: test   rdi,0x1
  00058: jne    0x75
  0005e: test   rdi,0x7
  00065: jne    0x37de9
  0006b: cmp    DWORD PTR [rdi+0x4],0x6
  0006f: jne    0x37de9
  00075: cmp    DWORD PTR [rip+0xffffffffffff42a4],0x26        # 0xffff4320
  0007c: jne    0x37de9
  00082: mov    r9,QWORD PTR [rbp-0x48]
  00086: mov    rdx,rdi
  00089: mov    rax,QWORD PTR [rbx]
  0008c: lea    rdi,[rsp-0x18]
  00091: mov    QWORD PTR [rdi],rax
  00094: mov    QWORD PTR [rbx],rdi
  00097: mov    QWORD PTR [rsp-0x20],0x0
  000a0: mov    QWORD PTR [rsp-0x38],rcx
  000a5: lea    rcx,[rbp-0x50]
  000a9: mov    r8,0x0
  000b0: call   0x37df8
  000b5: lea    rdi,[rbp-0x8]
  000b9: mov    QWORD PTR [rbx],rdi
  000bc: movabs r13,0x563a608c1610
  000c6: test   rax,rax
  000c9: je     0xffff1943
  000cf: mov    QWORD PTR [rbp-0x38],rax
:00005 ret %2
  000d3: mov    rax,QWORD PTR [rbp-0x38]
  000d7: leave  
  000d8: ret    
==> start whole compile: vcross FuncId(58) self_class:Vec start:[00000] bytecode:0x563a608e3b20
<== finished compile. elapsed:53.3µs
offset:Pos(59345) code: 2550 bytes  data: 81 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x70
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    QWORD PTR [rbp-0x50],rax
  0001f: mov    QWORD PTR [rbp-0x58],rax
  00023: mov    QWORD PTR [rbp-0x60],rax
  00027: mov    QWORD PTR [rbp-0x68],rax
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: test   rdi,0x7
  00036: jne    0x37d51
  0003c: cmp    DWORD PTR [rdi+0x4],0x25
  00040: jne    0x37d51
:00000 %3 = const[Vec]                      [Vec]
  00046: mov    rax,QWORD PTR [rip+0xffffffffffff4202]        # 0xffff424f
  0004d: cmp    rax,QWORD PTR [rip+0x9bb]        # 0xa0f
  00054: jne    0x37d60
  0005a: mov    rax,QWORD PTR [rip+0x99e]        # 0x9ff
  00061: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = @y: Vec[IvarId(1)]
  00065: mov    rdi,QWORD PTR [rbp-0x28]
  00069: xor    rax,rax
  0006c: mov    ax,WORD PTR [rdi+0x2]
  00070: cmp    rax,0x3
  00074: jne    0x37da6
  0007a: mov    rax,QWORD PTR [rdi+0x18]
  0007e: mov    QWORD PTR [rbp-0x48],rax
:00002 %5 = %1.call z()                     [Vec]
:00003 
  00082: mov    rdi,QWORD PTR [rbp-0x30]
  00086: test   rdi,0x7
  0008d: jne    0x37dbc
  00093: cmp    DWORD PTR [rdi+0x4],0x25
  00097: jne    0x37dbc
  0009d: cmp    DWORD PTR [rip+0xffffffffffff41a3],0x26        # 0xffff4247
  000a4: jne    0x37dbc
  000aa: mov    esi,DWORD PTR [rip+0x96b]        # 0xa1b
  000b0: cmp    esi,0xffffffff
  000b3: je     0x37dcb
  000b9: xor    rax,rax
  000bc: mov    ax,WORD PTR [rdi+0x2]
  000c0: cmp    rax,0x3
  000c4: jne    0xdd
  000ca: cmp    esi,0x6
  000cd: jge    0xdd
  000d3: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000d8: jmp    0xe9
  000dd: movabs rax,0x563a5fe35570
  000e7: call   rax
  000e9: mov    QWORD PTR [rbp-0x50],rax
:00005 %4 = %4 * %5                         [Float][Float]
  000ed: mov    rdi,QWORD PTR [rbp-0x48]
  000f1: test   rdi,0x1
  000f8: jne    0x37df4
  000fe: test   rdi,0x2
  00105: je     0x141
  0010b: xorps  xmm2,xmm2
  0010e: movabs rax,0x8000000000000002
  00118: cmp    rdi,rax
  0011b: je     0x153
  00121: mov    rax,rdi
  00124: sar    rax,0x3f
  00128: add    rax,0x2
  0012c: and    rdi,0xfffffffffffffffc
  00130: or     rdi,rax
  00133: rol    rdi,0x3d
  00137: movq   xmm2,rdi
  0013c: jmp    0x153
  00141: call   0xffff18a3
  00146: test   rax,rax
  00149: je     0x37df4
  0014f: movq   xmm2,xmm0
  00153: mov    rdi,QWORD PTR [rbp-0x50]
  00157: test   rdi,0x1
  0015e: jne    0x37e03
  00164: test   rdi,0x2
  0016b: je     0x1a7
  00171: xorps  xmm3,xmm3
  00174: movabs rax,0x8000000000000002
  0017e: cmp    rdi,rax
  00181: je     0x1b9
  00187: mov    rax,rdi
  0018a: sar    rax,0x3f
  0018e: add    rax,0x2
  00192: and    rdi,0xfffffffffffffffc
  00196: or     rdi,rax
  00199: rol    rdi,0x3d
  0019d: movq   xmm3,rdi
  001a2: jmp    0x1b9
  001a7: call   0xffff18a3
  001ac: test   rax,rax
  001af: je     0x37e03
  001b5: movq   xmm3,xmm0
  001b9: mulsd  xmm2,xmm3
:00006 %5 = @z: Vec[IvarId(2)]
  001bd: mov    rdi,QWORD PTR [rbp-0x28]
  001c1: xor    rax,rax
  001c4: mov    ax,WORD PTR [rdi+0x2]
  001c8: cmp    rax,0x3
  001cc: jne    0x37e12
  001d2: mov    rax,QWORD PTR [rdi+0x20]
  001d6: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = %1.call y()                     [Vec]
:00008 
  001da: mov    rdi,QWORD PTR [rbp-0x30]
  001de: test   rdi,0x7
  001e5: jne    0x37e3a
  001eb: cmp    DWORD PTR [rdi+0x4],0x25
  001ef: jne    0x37e3a
  001f5: cmp    DWORD PTR [rip+0xffffffffffff404b],0x26        # 0xffff4247
  001fc: jne    0x37e3a
  00202: mov    esi,DWORD PTR [rip+0x81b]        # 0xa23
  00208: cmp    esi,0xffffffff
  0020b: je     0x37e56
  00211: xor    rax,rax
  00214: mov    ax,WORD PTR [rdi+0x2]
  00218: cmp    rax,0x3
  0021c: jne    0x235
  00222: cmp    esi,0x6
  00225: jge    0x235
  0022b: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00230: jmp    0x253
  00235: sub    rsp,0x10
  00239: movq   QWORD PTR [rsp],xmm2
  0023e: movabs rax,0x563a5fe35570
  00248: call   rax
  0024a: movq   xmm2,QWORD PTR [rsp]
  0024f: add    rsp,0x10
  00253: mov    QWORD PTR [rbp-0x58],rax
:00010 %5 = %5 * %6                         [Float][Float]
  00257: mov    rdi,QWORD PTR [rbp-0x50]
  0025b: test   rdi,0x1
  00262: jne    0x37e91
  00268: test   rdi,0x2
  0026f: je     0x2ab
  00275: xorps  xmm3,xmm3
  00278: movabs rax,0x8000000000000002
  00282: cmp    rdi,rax
  00285: je     0x2bd
  0028b: mov    rax,rdi
  0028e: sar    rax,0x3f
  00292: add    rax,0x2
  00296: and    rdi,0xfffffffffffffffc
  0029a: or     rdi,rax
  0029d: rol    rdi,0x3d
  002a1: movq   xmm3,rdi
  002a6: jmp    0x2bd
  002ab: call   0xffff18a3
  002b0: test   rax,rax
  002b3: je     0x37e91
  002b9: movq   xmm3,xmm0
  002bd: mov    rdi,QWORD PTR [rbp-0x58]
  002c1: test   rdi,0x1
  002c8: jne    0x37ead
  002ce: test   rdi,0x2
  002d5: je     0x311
  002db: xorps  xmm4,xmm4
  002de: movabs rax,0x8000000000000002
  002e8: cmp    rdi,rax
  002eb: je     0x323
  002f1: mov    rax,rdi
  002f4: sar    rax,0x3f
  002f8: add    rax,0x2
  002fc: and    rdi,0xfffffffffffffffc
  00300: or     rdi,rax
  00303: rol    rdi,0x3d
  00307: movq   xmm4,rdi
  0030c: jmp    0x323
  00311: call   0xffff18a3
  00316: test   rax,rax
  00319: je     0x37ead
  0031f: movq   xmm4,xmm0
  00323: mulsd  xmm3,xmm4
:00011 %4 = %4 - %5                         [Float][Float]
  00327: subsd  xmm2,xmm3
:00012 %5 = @z: Vec[IvarId(2)]
  0032b: mov    rdi,QWORD PTR [rbp-0x28]
  0032f: xor    rax,rax
  00332: mov    ax,WORD PTR [rdi+0x2]
  00336: cmp    rax,0x3
  0033a: jne    0x37ec9
  00340: mov    rax,QWORD PTR [rdi+0x20]
  00344: mov    QWORD PTR [rbp-0x50],rax
:00013 %6 = %1.call x()                     [Vec]
:00014 
  00348: mov    rdi,QWORD PTR [rbp-0x30]
  0034c: test   rdi,0x7
  00353: jne    0x37efd
  00359: cmp    DWORD PTR [rdi+0x4],0x25
  0035d: jne    0x37efd
  00363: cmp    DWORD PTR [rip+0xffffffffffff3edd],0x26        # 0xffff4247
  0036a: jne    0x37efd
  00370: mov    esi,DWORD PTR [rip+0x6b5]        # 0xa2b
  00376: cmp    esi,0xffffffff
  00379: je     0x37f19
  0037f: xor    rax,rax
  00382: mov    ax,WORD PTR [rdi+0x2]
  00386: cmp    rax,0x3
  0038a: jne    0x3a3
  00390: cmp    esi,0x6
  00393: jge    0x3a3
  00399: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0039e: jmp    0x3c1
  003a3: sub    rsp,0x10
  003a7: movq   QWORD PTR [rsp],xmm2
  003ac: movabs rax,0x563a5fe35570
  003b6: call   rax
  003b8: movq   xmm2,QWORD PTR [rsp]
  003bd: add    rsp,0x10
  003c1: mov    QWORD PTR [rbp-0x58],rax
:00016 %5 = %5 * %6                         [Float][Float]
  003c5: mov    rdi,QWORD PTR [rbp-0x50]
  003c9: test   rdi,0x1
  003d0: jne    0x37f54
  003d6: test   rdi,0x2
  003dd: je     0x419
  003e3: xorps  xmm3,xmm3
  003e6: movabs rax,0x8000000000000002
  003f0: cmp    rdi,rax
  003f3: je     0x42b
  003f9: mov    rax,rdi
  003fc: sar    rax,0x3f
  00400: add    rax,0x2
  00404: and    rdi,0xfffffffffffffffc
  00408: or     rdi,rax
  0040b: rol    rdi,0x3d
  0040f: movq   xmm3,rdi
  00414: jmp    0x42b
  00419: call   0xffff18a3
  0041e: test   rax,rax
  00421: je     0x37f54
  00427: movq   xmm3,xmm0
  0042b: mov    rdi,QWORD PTR [rbp-0x58]
  0042f: test   rdi,0x1
  00436: jne    0x37f70
  0043c: test   rdi,0x2
  00443: je     0x47f
  00449: xorps  xmm4,xmm4
  0044c: movabs rax,0x8000000000000002
  00456: cmp    rdi,rax
  00459: je     0x491
  0045f: mov    rax,rdi
  00462: sar    rax,0x3f
  00466: add    rax,0x2
  0046a: and    rdi,0xfffffffffffffffc
  0046e: or     rdi,rax
  00471: rol    rdi,0x3d
  00475: movq   xmm4,rdi
  0047a: jmp    0x491
  0047f: call   0xffff18a3
  00484: test   rax,rax
  00487: je     0x37f70
  0048d: movq   xmm4,xmm0
  00491: mulsd  xmm3,xmm4
:00017 %6 = @x: Vec[IvarId(0)]
  00495: mov    rdi,QWORD PTR [rbp-0x28]
  00499: xor    rax,rax
  0049c: mov    ax,WORD PTR [rdi+0x2]
  004a0: cmp    rax,0x3
  004a4: jne    0x37f8c
  004aa: mov    rax,QWORD PTR [rdi+0x10]
  004ae: mov    QWORD PTR [rbp-0x58],rax
:00018 %7 = %1.call z()                     [Vec]
:00019 
  004b2: mov    rdi,QWORD PTR [rbp-0x30]
  004b6: test   rdi,0x7
  004bd: jne    0x37fc0
  004c3: cmp    DWORD PTR [rdi+0x4],0x25
  004c7: jne    0x37fc0
  004cd: cmp    DWORD PTR [rip+0xffffffffffff3d73],0x26        # 0xffff4247
  004d4: jne    0x37fc0
  004da: mov    esi,DWORD PTR [rip+0x553]        # 0xa33
  004e0: cmp    esi,0xffffffff
  004e3: je     0x37fe9
  004e9: xor    rax,rax
  004ec: mov    ax,WORD PTR [rdi+0x2]
  004f0: cmp    rax,0x3
  004f4: jne    0x50d
  004fa: cmp    esi,0x6
  004fd: jge    0x50d
  00503: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00508: jmp    0x537
  0050d: sub    rsp,0x10
  00511: movq   QWORD PTR [rsp],xmm2
  00516: movq   QWORD PTR [rsp+0x8],xmm3
  0051c: movabs rax,0x563a5fe35570
  00526: call   rax
  00528: movq   xmm2,QWORD PTR [rsp]
  0052d: movq   xmm3,QWORD PTR [rsp+0x8]
  00533: add    rsp,0x10
  00537: mov    QWORD PTR [rbp-0x60],rax
:00021 %6 = %6 * %7                         [Float][Float]
  0053b: mov    rdi,QWORD PTR [rbp-0x58]
  0053f: test   rdi,0x1
  00546: jne    0x38030
  0054c: test   rdi,0x2
  00553: je     0x58f
  00559: xorps  xmm4,xmm4
  0055c: movabs rax,0x8000000000000002
  00566: cmp    rdi,rax
  00569: je     0x5a1
  0056f: mov    rax,rdi
  00572: sar    rax,0x3f
  00576: add    rax,0x2
  0057a: and    rdi,0xfffffffffffffffc
  0057e: or     rdi,rax
  00581: rol    rdi,0x3d
  00585: movq   xmm4,rdi
  0058a: jmp    0x5a1
  0058f: call   0xffff18a3
  00594: test   rax,rax
  00597: je     0x38030
  0059d: movq   xmm4,xmm0
  005a1: mov    rdi,QWORD PTR [rbp-0x60]
  005a5: test   rdi,0x1
  005ac: jne    0x38059
  005b2: test   rdi,0x2
  005b9: je     0x5f5
  005bf: xorps  xmm5,xmm5
  005c2: movabs rax,0x8000000000000002
  005cc: cmp    rdi,rax
  005cf: je     0x607
  005d5: mov    rax,rdi
  005d8: sar    rax,0x3f
  005dc: add    rax,0x2
  005e0: and    rdi,0xfffffffffffffffc
  005e4: or     rdi,rax
  005e7: rol    rdi,0x3d
  005eb: movq   xmm5,rdi
  005f0: jmp    0x607
  005f5: call   0xffff18a3
  005fa: test   rax,rax
  005fd: je     0x38059
  00603: movq   xmm5,xmm0
  00607: mulsd  xmm4,xmm5
:00022 %5 = %5 - %6                         [Float][Float]
  0060b: subsd  xmm3,xmm4
:00023 %6 = @x: Vec[IvarId(0)]
  0060f: mov    rdi,QWORD PTR [rbp-0x28]
  00613: xor    rax,rax
  00616: mov    ax,WORD PTR [rdi+0x2]
  0061a: cmp    rax,0x3
  0061e: jne    0x38082
  00624: mov    rax,QWORD PTR [rdi+0x10]
  00628: mov    QWORD PTR [rbp-0x58],rax
:00024 %7 = %1.call y()                     [Vec]
:00025 
  0062c: mov    rdi,QWORD PTR [rbp-0x30]
  00630: test   rdi,0x7
  00637: jne    0x380c2
  0063d: cmp    DWORD PTR [rdi+0x4],0x25
  00641: jne    0x380c2
  00647: cmp    DWORD PTR [rip+0xffffffffffff3bf9],0x26        # 0xffff4247
  0064e: jne    0x380c2
  00654: mov    esi,DWORD PTR [rip+0x3e1]        # 0xa3b
  0065a: cmp    esi,0xffffffff
  0065d: je     0x380eb
  00663: xor    rax,rax
  00666: mov    ax,WORD PTR [rdi+0x2]
  0066a: cmp    rax,0x3
  0066e: jne    0x687
  00674: cmp    esi,0x6
  00677: jge    0x687
  0067d: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00682: jmp    0x6b1
  00687: sub    rsp,0x10
  0068b: movq   QWORD PTR [rsp],xmm2
  00690: movq   QWORD PTR [rsp+0x8],xmm3
  00696: movabs rax,0x563a5fe35570
  006a0: call   rax
  006a2: movq   xmm2,QWORD PTR [rsp]
  006a7: movq   xmm3,QWORD PTR [rsp+0x8]
  006ad: add    rsp,0x10
  006b1: mov    QWORD PTR [rbp-0x60],rax
:00027 %6 = %6 * %7                         [Float][Float]
  006b5: mov    rdi,QWORD PTR [rbp-0x58]
  006b9: test   rdi,0x1
  006c0: jne    0x38132
  006c6: test   rdi,0x2
  006cd: je     0x709
  006d3: xorps  xmm4,xmm4
  006d6: movabs rax,0x8000000000000002
  006e0: cmp    rdi,rax
  006e3: je     0x71b
  006e9: mov    rax,rdi
  006ec: sar    rax,0x3f
  006f0: add    rax,0x2
  006f4: and    rdi,0xfffffffffffffffc
  006f8: or     rdi,rax
  006fb: rol    rdi,0x3d
  006ff: movq   xmm4,rdi
  00704: jmp    0x71b
  00709: call   0xffff18a3
  0070e: test   rax,rax
  00711: je     0x38132
  00717: movq   xmm4,xmm0
  0071b: mov    rdi,QWORD PTR [rbp-0x60]
  0071f: test   rdi,0x1
  00726: jne    0x3815b
  0072c: test   rdi,0x2
  00733: je     0x76f
  00739: xorps  xmm5,xmm5
  0073c: movabs rax,0x8000000000000002
  00746: cmp    rdi,rax
  00749: je     0x781
  0074f: mov    rax,rdi
  00752: sar    rax,0x3f
  00756: add    rax,0x2
  0075a: and    rdi,0xfffffffffffffffc
  0075e: or     rdi,rax
  00761: rol    rdi,0x3d
  00765: movq   xmm5,rdi
  0076a: jmp    0x781
  0076f: call   0xffff18a3
  00774: test   rax,rax
  00777: je     0x3815b
  0077d: movq   xmm5,xmm0
  00781: mulsd  xmm4,xmm5
:00028 %7 = @y: Vec[IvarId(1)]
  00785: mov    rdi,QWORD PTR [rbp-0x28]
  00789: xor    rax,rax
  0078c: mov    ax,WORD PTR [rdi+0x2]
  00790: cmp    rax,0x3
  00794: jne    0x38184
  0079a: mov    rax,QWORD PTR [rdi+0x18]
  0079e: mov    QWORD PTR [rbp-0x60],rax
:00029 %8 = %1.call x()                     [Vec]
:00030 
  007a2: mov    rdi,QWORD PTR [rbp-0x30]
  007a6: test   rdi,0x7
  007ad: jne    0x381c4
  007b3: cmp    DWORD PTR [rdi+0x4],0x25
  007b7: jne    0x381c4
  007bd: cmp    DWORD PTR [rip+0xffffffffffff3a83],0x26        # 0xffff4247
  007c4: jne    0x381c4
  007ca: mov    esi,DWORD PTR [rip+0x273]        # 0xa43
  007d0: cmp    esi,0xffffffff
  007d3: je     0x381fa
  007d9: xor    rax,rax
  007dc: mov    ax,WORD PTR [rdi+0x2]
  007e0: cmp    rax,0x3
  007e4: jne    0x7fd
  007ea: cmp    esi,0x6
  007ed: jge    0x7fd
  007f3: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007f8: jmp    0x833
  007fd: sub    rsp,0x20
  00801: movq   QWORD PTR [rsp],xmm2
  00806: movq   QWORD PTR [rsp+0x8],xmm3
  0080c: movq   QWORD PTR [rsp+0x10],xmm4
  00812: movabs rax,0x563a5fe35570
  0081c: call   rax
  0081e: movq   xmm2,QWORD PTR [rsp]
  00823: movq   xmm3,QWORD PTR [rsp+0x8]
  00829: movq   xmm4,QWORD PTR [rsp+0x10]
  0082f: add    rsp,0x20
  00833: mov    QWORD PTR [rbp-0x68],rax
:00032 %7 = %7 * %8                         [Float][Float]
  00837: mov    rdi,QWORD PTR [rbp-0x60]
  0083b: test   rdi,0x1
  00842: jne    0x3824d
  00848: test   rdi,0x2
  0084f: je     0x88b
  00855: xorps  xmm5,xmm5
  00858: movabs rax,0x8000000000000002
  00862: cmp    rdi,rax
  00865: je     0x89d
  0086b: mov    rax,rdi
  0086e: sar    rax,0x3f
  00872: add    rax,0x2
  00876: and    rdi,0xfffffffffffffffc
  0087a: or     rdi,rax
  0087d: rol    rdi,0x3d
  00881: movq   xmm5,rdi
  00886: jmp    0x89d
  0088b: call   0xffff18a3
  00890: test   rax,rax
  00893: je     0x3824d
  00899: movq   xmm5,xmm0
  0089d: mov    rdi,QWORD PTR [rbp-0x68]
  008a1: test   rdi,0x1
  008a8: jne    0x38283
  008ae: test   rdi,0x2
  008b5: je     0x8f1
  008bb: xorps  xmm6,xmm6
  008be: movabs rax,0x8000000000000002
  008c8: cmp    rdi,rax
  008cb: je     0x903
  008d1: mov    rax,rdi
  008d4: sar    rax,0x3f
  008d8: add    rax,0x2
  008dc: and    rdi,0xfffffffffffffffc
  008e0: or     rdi,rax
  008e3: rol    rdi,0x3d
  008e7: movq   xmm6,rdi
  008ec: jmp    0x903
  008f1: call   0xffff18a3
  008f6: test   rax,rax
  008f9: je     0x38283
  008ff: movq   xmm6,xmm0
  00903: mulsd  xmm5,xmm6
:00033 %6 = %6 - %7                         [Float][Float]
  00907: subsd  xmm4,xmm5
:00034 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00035 
  0090b: movq   xmm0,xmm2
  0090f: call   0xffff1996
  00914: mov    QWORD PTR [rbp-0x48],rax
  00918: movq   xmm0,xmm3
  0091c: call   0xffff1996
  00921: mov    QWORD PTR [rbp-0x50],rax
  00925: movq   xmm0,xmm4
  00929: call   0xffff1996
  0092e: mov    QWORD PTR [rbp-0x58],rax
  00932: mov    rdi,QWORD PTR [rbp-0x40]
  00936: test   rdi,0x7
  0093d: jne    0x382b9
  00943: cmp    DWORD PTR [rdi+0x4],0x26
  00947: jne    0x382b9
  0094d: cmp    DWORD PTR [rip+0xffffffffffff38f3],0x26        # 0xffff4247
  00954: jne    0x382b9
  0095a: mov    r9,0x0
  00961: sub    rsp,0x30
  00965: movq   QWORD PTR [rsp],xmm2
  0096a: movq   QWORD PTR [rsp+0x8],xmm3
  00970: movq   QWORD PTR [rsp+0x10],xmm4
  00976: movq   QWORD PTR [rsp+0x18],xmm5
  0097c: movq   QWORD PTR [rsp+0x20],xmm6
  00982: mov    rdx,rdi
  00985: mov    rax,QWORD PTR [rbx]
  00988: lea    rdi,[rsp-0x18]
  0098d: mov    QWORD PTR [rdi],rax
  00990: mov    QWORD PTR [rbx],rdi
  00993: mov    QWORD PTR [rsp-0x20],0x0
  0099c: mov    QWORD PTR [rsp-0x38],rcx
  009a1: lea    rcx,[rbp-0x48]
  009a5: mov    r8,0x3
  009ac: call   0x382d5
  009b1: lea    rdi,[rbp-0x8]
  009b5: mov    QWORD PTR [rbx],rdi
  009b8: movq   xmm2,QWORD PTR [rsp]
  009bd: movq   xmm3,QWORD PTR [rsp+0x8]
  009c3: movq   xmm4,QWORD PTR [rsp+0x10]
  009c9: movq   xmm5,QWORD PTR [rsp+0x18]
  009cf: movq   xmm6,QWORD PTR [rsp+0x20]
  009d5: add    rsp,0x30
  009d9: movabs r13,0x563a608e3d60
  009e3: test   rax,rax
  009e6: je     0xffff186a
  009ec: mov    QWORD PTR [rbp-0x38],rax
:00037 ret %2
  009f0: mov    rax,QWORD PTR [rbp-0x38]
  009f4: leave  
  009f5: ret    
==> start whole compile: ambient_occlusion FuncId(69) self_class:Scene start:[00000] bytecode:0x563a608e8bf0
<== finished compile. elapsed:80.2µs
offset:Pos(61976) code: 4013 bytes  data: 291 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0xa0
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x38],rax
  00016: mov    QWORD PTR [rbp-0x40],rax
  0001a: mov    QWORD PTR [rbp-0x48],rax
  0001e: mov    QWORD PTR [rbp-0x50],rax
  00022: mov    QWORD PTR [rbp-0x58],rax
  00026: mov    QWORD PTR [rbp-0x60],rax
  0002a: mov    QWORD PTR [rbp-0x68],rax
  0002e: mov    QWORD PTR [rbp-0x70],rax
  00032: mov    QWORD PTR [rbp-0x78],rax
  00036: mov    QWORD PTR [rbp-0x80],rax
  0003a: mov    QWORD PTR [rbp-0x88],rax
  00041: mov    QWORD PTR [rbp-0x90],rax
  00048: mov    rdi,QWORD PTR [rbp-0x28]
  0004c: test   rdi,0x7
  00053: jne    0x378c0
  00059: cmp    DWORD PTR [rdi+0x4],0x2f
  0005d: jne    0x378c0
:00000 %8 = const[Array]                    [Array]
  00063: mov    rax,QWORD PTR [rip+0xffffffffffff379e]        # 0xffff3808
  0006a: cmp    rax,QWORD PTR [rip+0xf57]        # 0xfc8
  00071: jne    0x378cf
  00077: mov    rax,QWORD PTR [rip+0xf3a]        # 0xfb8
  0007e: mov    QWORD PTR [rbp-0x68],rax
:00001 %2 = %8.call new()                   [#<Class:Array>]
:00002 
  00082: mov    rdi,QWORD PTR [rbp-0x68]
  00086: test   rdi,0x7
  0008d: jne    0x37915
  00093: cmp    DWORD PTR [rdi+0x4],0x1e
  00097: jne    0x37915
  0009d: cmp    DWORD PTR [rip+0xffffffffffff375c],0x26        # 0xffff3800
  000a4: jne    0x37915
  000aa: mov    r9,0x0
  000b1: mov    rdx,rdi
  000b4: mov    rax,QWORD PTR [rbx]
  000b7: lea    rdi,[rsp-0x18]
  000bc: mov    QWORD PTR [rdi],rax
  000bf: mov    QWORD PTR [rbx],rdi
  000c2: mov    QWORD PTR [rsp-0x20],0x0
  000cb: mov    QWORD PTR [rsp-0x38],rcx
  000d0: lea    rcx,[rbp-0x70]
  000d4: mov    r8,0x0
  000db: call   0x37924
  000e0: lea    rdi,[rbp-0x8]
  000e4: mov    QWORD PTR [rbx],rdi
  000e7: movabs r13,0x563a608e8c20
  000f1: test   rax,rax
  000f4: je     0xffff0e23
  000fa: mov    QWORD PTR [rbp-0x38],rax
:00004 %8 = %2
  000fe: mov    rax,QWORD PTR [rbp-0x38]
  00102: mov    QWORD PTR [rbp-0x68],rax
:00005 %9 = %1.call n()                     [Isect]
:00006 
  00106: mov    rdi,QWORD PTR [rbp-0x30]
  0010a: test   rdi,0x7
  00111: jne    0x37956
  00117: cmp    DWORD PTR [rdi+0x4],0x2d
  0011b: jne    0x37956
  00121: cmp    DWORD PTR [rip+0xffffffffffff36d8],0x26        # 0xffff3800
  00128: jne    0x37956
  0012e: mov    esi,DWORD PTR [rip+0xea0]        # 0xfd4
  00134: cmp    esi,0xffffffff
  00137: je     0x37965
  0013d: xor    rax,rax
  00140: mov    ax,WORD PTR [rdi+0x2]
  00144: cmp    rax,0x3
  00148: jne    0x161
  0014e: cmp    esi,0x6
  00151: jge    0x161
  00157: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0015c: jmp    0x16d
  00161: movabs rax,0x563a5fe35570
  0016b: call   rax
  0016d: mov    QWORD PTR [rbp-0x70],rax
:00008 _ = %0.call otherBasis(%8; 2)        [Scene]
:00009 
  00171: mov    rdi,QWORD PTR [rbp-0x28]
  00175: cmp    DWORD PTR [rip+0xffffffffffff3684],0x26        # 0xffff3800
  0017c: jne    0x3798e
  00182: mov    rax,QWORD PTR [rbx]
  00185: lea    rdi,[rsp-0x18]
  0018a: mov    QWORD PTR [rdi],rax
  0018d: mov    QWORD PTR [rbx],rdi
  00190: mov    QWORD PTR [rsp-0x20],0x0
  00199: mov    QWORD PTR [rsp-0x38],rcx
  0019e: mov    rax,QWORD PTR [rbp-0x28]
  001a2: mov    QWORD PTR [rsp-0x38],rax
  001a7: mov    rdi,0x2
  001ae: mov    rax,QWORD PTR [rbp-0x68]
  001b2: mov    QWORD PTR [rsp-0x40],rax
  001b7: mov    rax,QWORD PTR [rbp-0x70]
  001bb: mov    QWORD PTR [rsp-0x48],rax
  001c0: mov    QWORD PTR [rsp-0x30],0x0
  001c9: movabs rax,0x900000035
  001d3: mov    QWORD PTR [rsp-0x28],rax
  001d8: movabs r13,0x563a608ff220
  001e2: call   0xffffcd54
  001e7: lea    rdi,[rbp-0x8]
  001eb: mov    QWORD PTR [rbx],rdi
  001ee: movabs r13,0x563a608e8c90
  001f8: test   rax,rax
  001fb: je     0xffff0e23
:00011 %3 = const[NAO_SAMPLES]              [8]
  00201: mov    rax,QWORD PTR [rip+0xffffffffffff3600]        # 0xffff3808
  00208: cmp    rax,QWORD PTR [rip+0xdd9]        # 0xfe8
  0020f: jne    0x3799d
  00215: mov    rax,QWORD PTR [rip+0xdbc]        # 0xfd8
  0021c: mov    QWORD PTR [rbp-0x40],rax
:00012 %4 = const[NAO_SAMPLES]              [8]
  00220: mov    rax,QWORD PTR [rip+0xffffffffffff35e1]        # 0xffff3808
  00227: cmp    rax,QWORD PTR [rip+0xdda]        # 0x1008
  0022e: jne    0x379e3
  00234: mov    rax,QWORD PTR [rip+0xdbd]        # 0xff8
  0023b: mov    QWORD PTR [rbp-0x48],rax
:00013 %5 = literal[0.0001]
  0023f: movq   xmm2,QWORD PTR [rip+0xdd1]        # 0x1018
:00014 %6 = literal[0.0]
  00247: movq   xmm3,QWORD PTR [rip+0xdd9]        # 0x1028
:00015 %8 = const[Vec]                      [Vec]
  0024f: mov    rax,QWORD PTR [rip+0xffffffffffff35b2]        # 0xffff3808
  00256: cmp    rax,QWORD PTR [rip+0xdeb]        # 0x1048
  0025d: jne    0x37a29
  00263: mov    rax,QWORD PTR [rip+0xdce]        # 0x1038
  0026a: mov    QWORD PTR [rbp-0x68],rax
:00016 %10 = %1.call pl()                   [Isect]
:00017 
  0026e: mov    rdi,QWORD PTR [rbp-0x30]
  00272: test   rdi,0x7
  00279: jne    0x37a8d
  0027f: cmp    DWORD PTR [rdi+0x4],0x2d
  00283: jne    0x37a8d
  00289: cmp    DWORD PTR [rip+0xffffffffffff3570],0x26        # 0xffff3800
  00290: jne    0x37a8d
  00296: mov    esi,DWORD PTR [rip+0xdb8]        # 0x1054
  0029c: cmp    esi,0xffffffff
  0029f: je     0x37ab6
  002a5: xor    rax,rax
  002a8: mov    ax,WORD PTR [rdi+0x2]
  002ac: cmp    rax,0x3
  002b0: jne    0x2c9
  002b6: cmp    esi,0x6
  002b9: jge    0x2c9
  002bf: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  002c4: jmp    0x2f3
  002c9: sub    rsp,0x10
  002cd: movq   QWORD PTR [rsp],xmm2
  002d2: movq   QWORD PTR [rsp+0x8],xmm3
  002d8: movabs rax,0x563a5fe35570
  002e2: call   rax
  002e4: movq   xmm2,QWORD PTR [rsp]
  002e9: movq   xmm3,QWORD PTR [rsp+0x8]
  002ef: add    rsp,0x10
  002f3: mov    QWORD PTR [rbp-0x78],rax
:00019 %9 = %10.call x()                    [Vec]
:00020 
  002f7: mov    rdi,QWORD PTR [rbp-0x78]
  002fb: test   rdi,0x7
  00302: jne    0x37afd
  00308: cmp    DWORD PTR [rdi+0x4],0x25
  0030c: jne    0x37afd
  00312: cmp    DWORD PTR [rip+0xffffffffffff34e7],0x26        # 0xffff3800
  00319: jne    0x37afd
  0031f: mov    esi,DWORD PTR [rip+0xd37]        # 0x105c
  00325: cmp    esi,0xffffffff
  00328: je     0x37b26
  0032e: xor    rax,rax
  00331: mov    ax,WORD PTR [rdi+0x2]
  00335: cmp    rax,0x3
  00339: jne    0x352
  0033f: cmp    esi,0x6
  00342: jge    0x352
  00348: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0034d: jmp    0x37c
  00352: sub    rsp,0x10
  00356: movq   QWORD PTR [rsp],xmm2
  0035b: movq   QWORD PTR [rsp+0x8],xmm3
  00361: movabs rax,0x563a5fe35570
  0036b: call   rax
  0036d: movq   xmm2,QWORD PTR [rsp]
  00372: movq   xmm3,QWORD PTR [rsp+0x8]
  00378: add    rsp,0x10
  0037c: mov    QWORD PTR [rbp-0x70],rax
:00022 %11 = %1.call n()                    [Isect]
:00023 
  00380: mov    rdi,QWORD PTR [rbp-0x30]
  00384: test   rdi,0x7
  0038b: jne    0x37b6d
  00391: cmp    DWORD PTR [rdi+0x4],0x2d
  00395: jne    0x37b6d
  0039b: cmp    DWORD PTR [rip+0xffffffffffff345e],0x26        # 0xffff3800
  003a2: jne    0x37b6d
  003a8: mov    esi,DWORD PTR [rip+0xcb6]        # 0x1064
  003ae: cmp    esi,0xffffffff
  003b1: je     0x37b96
  003b7: xor    rax,rax
  003ba: mov    ax,WORD PTR [rdi+0x2]
  003be: cmp    rax,0x3
  003c2: jne    0x3db
  003c8: cmp    esi,0x6
  003cb: jge    0x3db
  003d1: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003d6: jmp    0x405
  003db: sub    rsp,0x10
  003df: movq   QWORD PTR [rsp],xmm2
  003e4: movq   QWORD PTR [rsp+0x8],xmm3
  003ea: movabs rax,0x563a5fe35570
  003f4: call   rax
  003f6: movq   xmm2,QWORD PTR [rsp]
  003fb: movq   xmm3,QWORD PTR [rsp+0x8]
  00401: add    rsp,0x10
  00405: mov    QWORD PTR [rbp-0x80],rax
:00025 %10 = %11.call x()                   [Vec]
:00026 
  00409: mov    rdi,QWORD PTR [rbp-0x80]
  0040d: test   rdi,0x7
  00414: jne    0x37bdd
  0041a: cmp    DWORD PTR [rdi+0x4],0x25
  0041e: jne    0x37bdd
  00424: cmp    DWORD PTR [rip+0xffffffffffff33d5],0x26        # 0xffff3800
  0042b: jne    0x37bdd
  00431: mov    esi,DWORD PTR [rip+0xc35]        # 0x106c
  00437: cmp    esi,0xffffffff
  0043a: je     0x37c06
  00440: xor    rax,rax
  00443: mov    ax,WORD PTR [rdi+0x2]
  00447: cmp    rax,0x3
  0044b: jne    0x464
  00451: cmp    esi,0x6
  00454: jge    0x464
  0045a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0045f: jmp    0x48e
  00464: sub    rsp,0x10
  00468: movq   QWORD PTR [rsp],xmm2
  0046d: movq   QWORD PTR [rsp+0x8],xmm3
  00473: movabs rax,0x563a5fe35570
  0047d: call   rax
  0047f: movq   xmm2,QWORD PTR [rsp]
  00484: movq   xmm3,QWORD PTR [rsp+0x8]
  0048a: add    rsp,0x10
  0048e: mov    QWORD PTR [rbp-0x78],rax
:00028 %10 = %5 * %10                       [Float][Float]
  00492: mov    rdi,QWORD PTR [rbp-0x78]
  00496: test   rdi,0x1
  0049d: jne    0x37c4d
  004a3: test   rdi,0x2
  004aa: je     0x4e6
  004b0: xorps  xmm4,xmm4
  004b3: movabs rax,0x8000000000000002
  004bd: cmp    rdi,rax
  004c0: je     0x4f8
  004c6: mov    rax,rdi
  004c9: sar    rax,0x3f
  004cd: add    rax,0x2
  004d1: and    rdi,0xfffffffffffffffc
  004d5: or     rdi,rax
  004d8: rol    rdi,0x3d
  004dc: movq   xmm4,rdi
  004e1: jmp    0x4f8
  004e6: call   0xffff0e5c
  004eb: test   rax,rax
  004ee: je     0x37c4d
  004f4: movq   xmm4,xmm0
  004f8: mulsd  xmm4,xmm2
:00029 %9 = %9 + %10                        [Float][Float]
  004fc: mov    rdi,QWORD PTR [rbp-0x70]
  00500: test   rdi,0x1
  00507: jne    0x37c76
  0050d: test   rdi,0x2
  00514: je     0x550
  0051a: xorps  xmm5,xmm5
  0051d: movabs rax,0x8000000000000002
  00527: cmp    rdi,rax
  0052a: je     0x562
  00530: mov    rax,rdi
  00533: sar    rax,0x3f
  00537: add    rax,0x2
  0053b: and    rdi,0xfffffffffffffffc
  0053f: or     rdi,rax
  00542: rol    rdi,0x3d
  00546: movq   xmm5,rdi
  0054b: jmp    0x562
  00550: call   0xffff0e5c
  00555: test   rax,rax
  00558: je     0x37c76
  0055e: movq   xmm5,xmm0
  00562: addsd  xmm5,xmm4
:00030 %11 = %1.call pl()                   [Isect]
:00031 
  00566: mov    rdi,QWORD PTR [rbp-0x30]
  0056a: test   rdi,0x7
  00571: jne    0x37cac
  00577: cmp    DWORD PTR [rdi+0x4],0x2d
  0057b: jne    0x37cac
  00581: cmp    DWORD PTR [rip+0xffffffffffff3278],0x26        # 0xffff3800
  00588: jne    0x37cac
  0058e: mov    esi,DWORD PTR [rip+0xae0]        # 0x1074
  00594: cmp    esi,0xffffffff
  00597: je     0x37cef
  0059d: xor    rax,rax
  005a0: mov    ax,WORD PTR [rdi+0x2]
  005a4: cmp    rax,0x3
  005a8: jne    0x5c1
  005ae: cmp    esi,0x6
  005b1: jge    0x5c1
  005b7: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005bc: jmp    0x603
  005c1: sub    rsp,0x20
  005c5: movq   QWORD PTR [rsp],xmm2
  005ca: movq   QWORD PTR [rsp+0x8],xmm3
  005d0: movq   QWORD PTR [rsp+0x10],xmm4
  005d6: movq   QWORD PTR [rsp+0x18],xmm5
  005dc: movabs rax,0x563a5fe35570
  005e6: call   rax
  005e8: movq   xmm2,QWORD PTR [rsp]
  005ed: movq   xmm3,QWORD PTR [rsp+0x8]
  005f3: movq   xmm4,QWORD PTR [rsp+0x10]
  005f9: movq   xmm5,QWORD PTR [rsp+0x18]
  005ff: add    rsp,0x20
  00603: mov    QWORD PTR [rbp-0x80],rax
:00033 %10 = %11.call y()                   [Vec]
:00034 
  00607: mov    rdi,QWORD PTR [rbp-0x80]
  0060b: test   rdi,0x7
  00612: jne    0x37d4e
  00618: cmp    DWORD PTR [rdi+0x4],0x25
  0061c: jne    0x37d4e
  00622: cmp    DWORD PTR [rip+0xffffffffffff31d7],0x26        # 0xffff3800
  00629: jne    0x37d4e
  0062f: mov    esi,DWORD PTR [rip+0xa47]        # 0x107c
  00635: cmp    esi,0xffffffff
  00638: je     0x37d84
  0063e: xor    rax,rax
  00641: mov    ax,WORD PTR [rdi+0x2]
  00645: cmp    rax,0x3
  00649: jne    0x662
  0064f: cmp    esi,0x6
  00652: jge    0x662
  00658: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0065d: jmp    0x698
  00662: sub    rsp,0x20
  00666: movq   QWORD PTR [rsp],xmm2
  0066b: movq   QWORD PTR [rsp+0x8],xmm3
  00671: movq   QWORD PTR [rsp+0x10],xmm5
  00677: movabs rax,0x563a5fe35570
  00681: call   rax
  00683: movq   xmm2,QWORD PTR [rsp]
  00688: movq   xmm3,QWORD PTR [rsp+0x8]
  0068e: movq   xmm5,QWORD PTR [rsp+0x10]
  00694: add    rsp,0x20
  00698: mov    QWORD PTR [rbp-0x78],rax
:00036 %12 = %1.call n()                    [Isect]
:00037 
  0069c: mov    rdi,QWORD PTR [rbp-0x30]
  006a0: test   rdi,0x7
  006a7: jne    0x37dd7
  006ad: cmp    DWORD PTR [rdi+0x4],0x2d
  006b1: jne    0x37dd7
  006b7: cmp    DWORD PTR [rip+0xffffffffffff3142],0x26        # 0xffff3800
  006be: jne    0x37dd7
  006c4: mov    esi,DWORD PTR [rip+0x9ba]        # 0x1084
  006ca: cmp    esi,0xffffffff
  006cd: je     0x37e0d
  006d3: xor    rax,rax
  006d6: mov    ax,WORD PTR [rdi+0x2]
  006da: cmp    rax,0x3
  006de: jne    0x6f7
  006e4: cmp    esi,0x6
  006e7: jge    0x6f7
  006ed: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  006f2: jmp    0x72d
  006f7: sub    rsp,0x20
  006fb: movq   QWORD PTR [rsp],xmm2
  00700: movq   QWORD PTR [rsp+0x8],xmm3
  00706: movq   QWORD PTR [rsp+0x10],xmm5
  0070c: movabs rax,0x563a5fe35570
  00716: call   rax
  00718: movq   xmm2,QWORD PTR [rsp]
  0071d: movq   xmm3,QWORD PTR [rsp+0x8]
  00723: movq   xmm5,QWORD PTR [rsp+0x10]
  00729: add    rsp,0x20
  0072d: mov    QWORD PTR [rbp-0x88],rax
:00039 %11 = %12.call y()                   [Vec]
:00040 
  00734: mov    rdi,QWORD PTR [rbp-0x88]
  0073b: test   rdi,0x7
  00742: jne    0x37e60
  00748: cmp    DWORD PTR [rdi+0x4],0x25
  0074c: jne    0x37e60
  00752: cmp    DWORD PTR [rip+0xffffffffffff30a7],0x26        # 0xffff3800
  00759: jne    0x37e60
  0075f: mov    esi,DWORD PTR [rip+0x927]        # 0x108c
  00765: cmp    esi,0xffffffff
  00768: je     0x37e96
  0076e: xor    rax,rax
  00771: mov    ax,WORD PTR [rdi+0x2]
  00775: cmp    rax,0x3
  00779: jne    0x792
  0077f: cmp    esi,0x6
  00782: jge    0x792
  00788: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0078d: jmp    0x7c8
  00792: sub    rsp,0x20
  00796: movq   QWORD PTR [rsp],xmm2
  0079b: movq   QWORD PTR [rsp+0x8],xmm3
  007a1: movq   QWORD PTR [rsp+0x10],xmm5
  007a7: movabs rax,0x563a5fe35570
  007b1: call   rax
  007b3: movq   xmm2,QWORD PTR [rsp]
  007b8: movq   xmm3,QWORD PTR [rsp+0x8]
  007be: movq   xmm5,QWORD PTR [rsp+0x10]
  007c4: add    rsp,0x20
  007c8: mov    QWORD PTR [rbp-0x80],rax
:00042 %11 = %5 * %11                       [Float][Float]
  007cc: mov    rdi,QWORD PTR [rbp-0x80]
  007d0: test   rdi,0x1
  007d7: jne    0x37ee9
  007dd: test   rdi,0x2
  007e4: je     0x820
  007ea: xorps  xmm4,xmm4
  007ed: movabs rax,0x8000000000000002
  007f7: cmp    rdi,rax
  007fa: je     0x832
  00800: mov    rax,rdi
  00803: sar    rax,0x3f
  00807: add    rax,0x2
  0080b: and    rdi,0xfffffffffffffffc
  0080f: or     rdi,rax
  00812: rol    rdi,0x3d
  00816: movq   xmm4,rdi
  0081b: jmp    0x832
  00820: call   0xffff0e5c
  00825: test   rax,rax
  00828: je     0x37ee9
  0082e: movq   xmm4,xmm0
  00832: mulsd  xmm4,xmm2
:00043 %10 = %10 + %11                      [Float][Float]
  00836: mov    rdi,QWORD PTR [rbp-0x78]
  0083a: test   rdi,0x1
  00841: jne    0x37f1f
  00847: test   rdi,0x2
  0084e: je     0x88a
  00854: xorps  xmm6,xmm6
  00857: movabs rax,0x8000000000000002
  00861: cmp    rdi,rax
  00864: je     0x89c
  0086a: mov    rax,rdi
  0086d: sar    rax,0x3f
  00871: add    rax,0x2
  00875: and    rdi,0xfffffffffffffffc
  00879: or     rdi,rax
  0087c: rol    rdi,0x3d
  00880: movq   xmm6,rdi
  00885: jmp    0x89c
  0088a: call   0xffff0e5c
  0088f: test   rax,rax
  00892: je     0x37f1f
  00898: movq   xmm6,xmm0
  0089c: addsd  xmm6,xmm4
:00044 %12 = %1.call pl()                   [Isect]
:00045 
  008a0: mov    rdi,QWORD PTR [rbp-0x30]
  008a4: test   rdi,0x7
  008ab: jne    0x37f62
  008b1: cmp    DWORD PTR [rdi+0x4],0x2d
  008b5: jne    0x37f62
  008bb: cmp    DWORD PTR [rip+0xffffffffffff2f3e],0x26        # 0xffff3800
  008c2: jne    0x37f62
  008c8: mov    esi,DWORD PTR [rip+0x7c6]        # 0x1094
  008ce: cmp    esi,0xffffffff
  008d1: je     0x37fb2
  008d7: xor    rax,rax
  008da: mov    ax,WORD PTR [rdi+0x2]
  008de: cmp    rax,0x3
  008e2: jne    0x8fb
  008e8: cmp    esi,0x6
  008eb: jge    0x8fb
  008f1: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008f6: jmp    0x949
  008fb: sub    rsp,0x30
  008ff: movq   QWORD PTR [rsp],xmm2
  00904: movq   QWORD PTR [rsp+0x8],xmm3
  0090a: movq   QWORD PTR [rsp+0x10],xmm4
  00910: movq   QWORD PTR [rsp+0x18],xmm5
  00916: movq   QWORD PTR [rsp+0x20],xmm6
  0091c: movabs rax,0x563a5fe35570
  00926: call   rax
  00928: movq   xmm2,QWORD PTR [rsp]
  0092d: movq   xmm3,QWORD PTR [rsp+0x8]
  00933: movq   xmm4,QWORD PTR [rsp+0x10]
  00939: movq   xmm5,QWORD PTR [rsp+0x18]
  0093f: movq   xmm6,QWORD PTR [rsp+0x20]
  00945: add    rsp,0x30
  00949: mov    QWORD PTR [rbp-0x88],rax
:00047 %11 = %12.call z()                   [Vec]
:00048 
  00950: mov    rdi,QWORD PTR [rbp-0x88]
  00957: test   rdi,0x7
  0095e: jne    0x3801d
  00964: cmp    DWORD PTR [rdi+0x4],0x25
  00968: jne    0x3801d
  0096e: cmp    DWORD PTR [rip+0xffffffffffff2e8b],0x26        # 0xffff3800
  00975: jne    0x3801d
  0097b: mov    esi,DWORD PTR [rip+0x71b]        # 0x109c
  00981: cmp    esi,0xffffffff
  00984: je     0x38060
  0098a: xor    rax,rax
  0098d: mov    ax,WORD PTR [rdi+0x2]
  00991: cmp    rax,0x3
  00995: jne    0x9ae
  0099b: cmp    esi,0x6
  0099e: jge    0x9ae
  009a4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009a9: jmp    0x9f0
  009ae: sub    rsp,0x20
  009b2: movq   QWORD PTR [rsp],xmm2
  009b7: movq   QWORD PTR [rsp+0x8],xmm3
  009bd: movq   QWORD PTR [rsp+0x10],xmm5
  009c3: movq   QWORD PTR [rsp+0x18],xmm6
  009c9: movabs rax,0x563a5fe35570
  009d3: call   rax
  009d5: movq   xmm2,QWORD PTR [rsp]
  009da: movq   xmm3,QWORD PTR [rsp+0x8]
  009e0: movq   xmm5,QWORD PTR [rsp+0x10]
  009e6: movq   xmm6,QWORD PTR [rsp+0x18]
  009ec: add    rsp,0x20
  009f0: mov    QWORD PTR [rbp-0x80],rax
:00050 %13 = %1.call n()                    [Isect]
:00051 
  009f4: mov    rdi,QWORD PTR [rbp-0x30]
  009f8: test   rdi,0x7
  009ff: jne    0x380bf
  00a05: cmp    DWORD PTR [rdi+0x4],0x2d
  00a09: jne    0x380bf
  00a0f: cmp    DWORD PTR [rip+0xffffffffffff2dea],0x26        # 0xffff3800
  00a16: jne    0x380bf
  00a1c: mov    esi,DWORD PTR [rip+0x682]        # 0x10a4
  00a22: cmp    esi,0xffffffff
  00a25: je     0x38102
  00a2b: xor    rax,rax
  00a2e: mov    ax,WORD PTR [rdi+0x2]
  00a32: cmp    rax,0x3
  00a36: jne    0xa4f
  00a3c: cmp    esi,0x6
  00a3f: jge    0xa4f
  00a45: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a4a: jmp    0xa91
  00a4f: sub    rsp,0x20
  00a53: movq   QWORD PTR [rsp],xmm2
  00a58: movq   QWORD PTR [rsp+0x8],xmm3
  00a5e: movq   QWORD PTR [rsp+0x10],xmm5
  00a64: movq   QWORD PTR [rsp+0x18],xmm6
  00a6a: movabs rax,0x563a5fe35570
  00a74: call   rax
  00a76: movq   xmm2,QWORD PTR [rsp]
  00a7b: movq   xmm3,QWORD PTR [rsp+0x8]
  00a81: movq   xmm5,QWORD PTR [rsp+0x10]
  00a87: movq   xmm6,QWORD PTR [rsp+0x18]
  00a8d: add    rsp,0x20
  00a91: mov    QWORD PTR [rbp-0x90],rax
:00053 %12 = %13.call z()                   [Vec]
:00054 
  00a98: mov    rdi,QWORD PTR [rbp-0x90]
  00a9f: test   rdi,0x7
  00aa6: jne    0x38161
  00aac: cmp    DWORD PTR [rdi+0x4],0x25
  00ab0: jne    0x38161
  00ab6: cmp    DWORD PTR [rip+0xffffffffffff2d43],0x26        # 0xffff3800
  00abd: jne    0x38161
  00ac3: mov    esi,DWORD PTR [rip+0x5e3]        # 0x10ac
  00ac9: cmp    esi,0xffffffff
  00acc: je     0x381a4
  00ad2: xor    rax,rax
  00ad5: mov    ax,WORD PTR [rdi+0x2]
  00ad9: cmp    rax,0x3
  00add: jne    0xaf6
  00ae3: cmp    esi,0x6
  00ae6: jge    0xaf6
  00aec: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00af1: jmp    0xb38
  00af6: sub    rsp,0x20
  00afa: movq   QWORD PTR [rsp],xmm2
  00aff: movq   QWORD PTR [rsp+0x8],xmm3
  00b05: movq   QWORD PTR [rsp+0x10],xmm5
  00b0b: movq   QWORD PTR [rsp+0x18],xmm6
  00b11: movabs rax,0x563a5fe35570
  00b1b: call   rax
  00b1d: movq   xmm2,QWORD PTR [rsp]
  00b22: movq   xmm3,QWORD PTR [rsp+0x8]
  00b28: movq   xmm5,QWORD PTR [rsp+0x10]
  00b2e: movq   xmm6,QWORD PTR [rsp+0x18]
  00b34: add    rsp,0x20
  00b38: mov    QWORD PTR [rbp-0x88],rax
:00056 %12 = %5 * %12                       [Float][Float]
  00b3f: mov    rdi,QWORD PTR [rbp-0x88]
  00b46: test   rdi,0x1
  00b4d: jne    0x38203
  00b53: test   rdi,0x2
  00b5a: je     0xb96
  00b60: xorps  xmm4,xmm4
  00b63: movabs rax,0x8000000000000002
  00b6d: cmp    rdi,rax
  00b70: je     0xba8
  00b76: mov    rax,rdi
  00b79: sar    rax,0x3f
  00b7d: add    rax,0x2
  00b81: and    rdi,0xfffffffffffffffc
  00b85: or     rdi,rax
  00b88: rol    rdi,0x3d
  00b8c: movq   xmm4,rdi
  00b91: jmp    0xba8
  00b96: call   0xffff0e5c
  00b9b: test   rax,rax
  00b9e: je     0x38203
  00ba4: movq   xmm4,xmm0
  00ba8: mulsd  xmm4,xmm2
:00057 %11 = %11 + %12                      [Float][Float]
  00bac: mov    rdi,QWORD PTR [rbp-0x80]
  00bb0: test   rdi,0x1
  00bb7: jne    0x38246
  00bbd: test   rdi,0x2
  00bc4: je     0xc00
  00bca: xorps  xmm7,xmm7
  00bcd: movabs rax,0x8000000000000002
  00bd7: cmp    rdi,rax
  00bda: je     0xc12
  00be0: mov    rax,rdi
  00be3: sar    rax,0x3f
  00be7: add    rax,0x2
  00beb: and    rdi,0xfffffffffffffffc
  00bef: or     rdi,rax
  00bf2: rol    rdi,0x3d
  00bf6: movq   xmm7,rdi
  00bfb: jmp    0xc12
  00c00: call   0xffff0e5c
  00c05: test   rax,rax
  00c08: je     0x38246
  00c0e: movq   xmm7,xmm0
  00c12: addsd  xmm7,xmm4
:00058 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
:00059 
  00c16: movq   xmm0,xmm5
  00c1a: call   0xffff0f4f
  00c1f: mov    QWORD PTR [rbp-0x70],rax
  00c23: movq   xmm0,xmm6
  00c27: call   0xffff0f4f
  00c2c: mov    QWORD PTR [rbp-0x78],rax
  00c30: movq   xmm0,xmm7
  00c34: call   0xffff0f4f
  00c39: mov    QWORD PTR [rbp-0x80],rax
  00c3d: mov    rdi,QWORD PTR [rbp-0x68]
  00c41: test   rdi,0x7
  00c48: jne    0x38299
  00c4e: cmp    DWORD PTR [rdi+0x4],0x26
  00c52: jne    0x38299
  00c58: cmp    DWORD PTR [rip+0xffffffffffff2ba1],0x26        # 0xffff3800
  00c5f: jne    0x38299
  00c65: mov    r9,0x0
  00c6c: sub    rsp,0x30
  00c70: movq   QWORD PTR [rsp],xmm2
  00c75: movq   QWORD PTR [rsp+0x8],xmm3
  00c7b: movq   QWORD PTR [rsp+0x10],xmm4
  00c81: movq   QWORD PTR [rsp+0x18],xmm5
  00c87: movq   QWORD PTR [rsp+0x20],xmm6
  00c8d: movq   QWORD PTR [rsp+0x28],xmm7
  00c93: mov    rdx,rdi
  00c96: mov    rax,QWORD PTR [rbx]
  00c99: lea    rdi,[rsp-0x18]
  00c9e: mov    QWORD PTR [rdi],rax
  00ca1: mov    QWORD PTR [rbx],rdi
  00ca4: mov    QWORD PTR [rsp-0x20],0x0
  00cad: mov    QWORD PTR [rsp-0x38],rcx
  00cb2: lea    rcx,[rbp-0x70]
  00cb6: mov    r8,0x3
  00cbd: call   0x382d2
  00cc2: lea    rdi,[rbp-0x8]
  00cc6: mov    QWORD PTR [rbx],rdi
  00cc9: movq   xmm2,QWORD PTR [rsp]
  00cce: movq   xmm3,QWORD PTR [rsp+0x8]
  00cd4: movq   xmm4,QWORD PTR [rsp+0x10]
  00cda: movq   xmm5,QWORD PTR [rsp+0x18]
  00ce0: movq   xmm6,QWORD PTR [rsp+0x20]
  00ce6: movq   xmm7,QWORD PTR [rsp+0x28]
  00cec: add    rsp,0x30
  00cf0: movabs r13,0x563a608e8fb0
  00cfa: test   rax,rax
  00cfd: je     0xffff0e23
  00d03: mov    QWORD PTR [rbp-0x60],rax
:00061 %8 = literal[71]
  00d07: mov    rax,0x8f
  00d0e: mov    QWORD PTR [rbp-0x68],rax
:00062 _ = %4.call times(&%8)               [Integer]
:00063 
  00d12: movq   xmm0,xmm2
  00d16: call   0xffff0f4f
  00d1b: mov    QWORD PTR [rbp-0x50],rax
  00d1f: movq   xmm0,xmm3
  00d23: call   0xffff0f4f
  00d28: mov    QWORD PTR [rbp-0x58],rax
  00d2c: mov    rdi,QWORD PTR [rbp-0x48]
  00d30: test   rdi,0x1
  00d37: jne    0xd54
  00d3d: test   rdi,0x7
  00d44: jne    0x38304
  00d4a: cmp    DWORD PTR [rdi+0x4],0x6
  00d4e: jne    0x38304
  00d54: cmp    DWORD PTR [rip+0xffffffffffff2aa5],0x26        # 0xffff3800
  00d5b: jne    0x38304
  00d61: mov    r9,QWORD PTR [rbp-0x68]
  00d65: sub    rsp,0x20
  00d69: movq   QWORD PTR [rsp],xmm4
  00d6e: movq   QWORD PTR [rsp+0x8],xmm5
  00d74: movq   QWORD PTR [rsp+0x10],xmm6
  00d7a: movq   QWORD PTR [rsp+0x18],xmm7
  00d80: mov    rdx,rdi
  00d83: mov    rax,QWORD PTR [rbx]
  00d86: lea    rdi,[rsp-0x18]
  00d8b: mov    QWORD PTR [rdi],rax
  00d8e: mov    QWORD PTR [rbx],rdi
  00d91: mov    QWORD PTR [rsp-0x20],0x0
  00d9a: mov    QWORD PTR [rsp-0x38],rcx
  00d9f: lea    rcx,[rbp-0x70]
  00da3: mov    r8,0x0
  00daa: call   0x38323
  00daf: lea    rdi,[rbp-0x8]
  00db3: mov    QWORD PTR [rbx],rdi
  00db6: movq   xmm4,QWORD PTR [rsp]
  00dbb: movq   xmm5,QWORD PTR [rsp+0x8]
  00dc1: movq   xmm6,QWORD PTR [rsp+0x10]
  00dc7: movq   xmm7,QWORD PTR [rsp+0x18]
  00dcd: add    rsp,0x20
  00dd1: movabs r13,0x563a608e8ff0
  00ddb: test   rax,rax
  00dde: je     0xffff0e23
:00065 %8 = %3.call to_f()                  [Integer]
:00066 
  00de4: mov    rdi,QWORD PTR [rbp-0x40]
  00de8: test   rdi,0x1
  00def: je     0x38355
  00df5: sar    rdi,1
  00df8: cvtsi2sd xmm2,rdi
:00068 %9 = %4.call to_f()                  [Integer]
:00069 
  00dfd: mov    rdi,QWORD PTR [rbp-0x48]
  00e01: test   rdi,0x1
  00e08: je     0x38374
  00e0e: sar    rdi,1
  00e11: cvtsi2sd xmm3,rdi
:00071 %8 = %8 * %9                         [Float][Float]
  00e16: mulsd  xmm2,xmm3
:00072 %8 = %8 - %6                         [Float][Float]
  00e1a: mov    rdi,QWORD PTR [rbp-0x58]
  00e1e: test   rdi,0x1
  00e25: jne    0x383a0
  00e2b: test   rdi,0x2
  00e32: je     0xe6e
  00e38: xorps  xmm5,xmm5
  00e3b: movabs rax,0x8000000000000002
  00e45: cmp    rdi,rax
  00e48: je     0xe80
  00e4e: mov    rax,rdi
  00e51: sar    rax,0x3f
  00e55: add    rax,0x2
  00e59: and    rdi,0xfffffffffffffffc
  00e5d: or     rdi,rax
  00e60: rol    rdi,0x3d
  00e64: movq   xmm5,rdi
  00e69: jmp    0xe80
  00e6e: call   0xffff0e5c
  00e73: test   rax,rax
  00e76: je     0x383a0
  00e7c: movq   xmm5,xmm0
  00e80: subsd  xmm2,xmm5
:00073 %9 = %3.call to_f()                  [Integer]
:00074 
  00e84: mov    rdi,QWORD PTR [rbp-0x40]
  00e88: test   rdi,0x1
  00e8f: je     0x383d9
  00e95: sar    rdi,1
  00e98: cvtsi2sd xmm3,rdi
:00076 %10 = %4.call to_f()                 [Integer]
:00077 
  00e9d: mov    rdi,QWORD PTR [rbp-0x48]
  00ea1: test   rdi,0x1
  00ea8: je     0x38405
  00eae: sar    rdi,1
  00eb1: cvtsi2sd xmm6,rdi
:00079 %9 = %9 * %10                        [Float][Float]
  00eb6: mulsd  xmm3,xmm6
:00080 %6 = %8 / %9                         [Float][Float]
  00eba: movq   xmm5,xmm2
  00ebe: movq   rax,xmm3
  00ec3: test   rax,rax
  00ec6: je     0xffff0e48
  00ecc: divsd  xmm5,xmm3
:00081 %9 = const[Vec]                      [Vec]
  00ed0: mov    rax,QWORD PTR [rip+0xffffffffffff2931]        # 0xffff3808
  00ed7: cmp    rax,QWORD PTR [rip+0x1ea]        # 0x10c8
  00ede: jne    0x3843e
  00ee4: mov    rax,QWORD PTR [rip+0x1cd]        # 0x10b8
  00eeb: mov    QWORD PTR [rbp-0x70],rax
:00082 %10 = %6
:00083 %11 = %6
:00084 %12 = %6
:00085 %8 = %9.call new(%10; 3)             [#<Class:Vec>]
:00086 
  00eef: movq   xmm0,xmm5
  00ef3: call   0xffff0f4f
  00ef8: mov    QWORD PTR [rbp-0x78],rax
  00efc: movq   xmm0,xmm5
  00f00: call   0xffff0f4f
  00f05: mov    QWORD PTR [rbp-0x80],rax
  00f09: movq   xmm0,xmm5
  00f0d: call   0xffff0f4f
  00f12: mov    QWORD PTR [rbp-0x88],rax
  00f19: mov    rdi,QWORD PTR [rbp-0x70]
  00f1d: test   rdi,0x7
  00f24: jne    0x384c6
  00f2a: cmp    DWORD PTR [rdi+0x4],0x26
  00f2e: jne    0x384c6
  00f34: cmp    DWORD PTR [rip+0xffffffffffff28c5],0x26        # 0xffff3800
  00f3b: jne    0x384c6
  00f41: mov    r9,0x0
  00f48: sub    rsp,0x10
  00f4c: movq   QWORD PTR [rsp],xmm5
  00f51: mov    rdx,rdi
  00f54: mov    rax,QWORD PTR [rbx]
  00f57: lea    rdi,[rsp-0x18]
  00f5c: mov    QWORD PTR [rdi],rax
  00f5f: mov    QWORD PTR [rbx],rdi
  00f62: mov    QWORD PTR [rsp-0x20],0x0
  00f6b: mov    QWORD PTR [rsp-0x38],rcx
  00f70: lea    rcx,[rbp-0x78]
  00f74: mov    r8,0x3
  00f7b: call   0x384e2
  00f80: lea    rdi,[rbp-0x8]
  00f84: mov    QWORD PTR [rbx],rdi
  00f87: movq   xmm5,QWORD PTR [rsp]
  00f8c: add    rsp,0x10
  00f90: movabs r13,0x563a608e9160
  00f9a: test   rax,rax
  00f9d: je     0xffff0e23
  00fa3: mov    QWORD PTR [rbp-0x68],rax
:00088 ret %8
  00fa7: mov    rax,QWORD PTR [rbp-0x68]
  00fab: leave  
  00fac: ret    
==> start whole compile: otherBasis FuncId(53) self_class:Scene start:[00000] bytecode:0x563a608ff220
<== finished compile. elapsed:112.5µs
offset:Pos(66280) code: 7556 bytes  data: 324 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	sub    rsp,0x70
  00008: 00 	mov    rax,0x4
  0000f:    	mov    QWORD PTR [rbp-0x40],rax
  00013:    	mov    QWORD PTR [rbp-0x48],rax
  00017:    	mov    QWORD PTR [rbp-0x50],rax
  0001b:    	mov    QWORD PTR [rbp-0x58],rax
  0001f:    	mov    QWORD PTR [rbp-0x60],rax
  00023:    	mov    QWORD PTR [rbp-0x68],rax
  00027:    	mov    rdi,QWORD PTR [rbp-0x28]
  0002b: 00 	test   rdi,0x7
  00032:    	jne    0x37444
  00038:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0003c:    	jne    0x37444
:00000 %3 = 2: i32
  00042: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00001 %5 = const[Vec]                      [Vec]
  0004a: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff26e7]        # 0xffff2738
  00051: 00 	cmp    rax,QWORD PTR [rip+0x1d40]        # 0x1d98
  00058:    	jne    0x37453
  0005e: 00 	mov    rax,QWORD PTR [rip+0x1d23]        # 0x1d88
  00065:    	mov    QWORD PTR [rbp-0x50],rax
:00002 %6 = %2.call x()                     [Vec]
:00003 
  00069:    	mov    rdi,QWORD PTR [rbp-0x38]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x37499
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0007e:    	jne    0x37499
  00084: 26 	cmp    DWORD PTR [rip+0xffffffffffff26a5],0x26        # 0xffff2730
  0008b:    	jne    0x37499
  00091:    	mov    esi,DWORD PTR [rip+0x1d0d]        # 0x1da4
  00097:    	cmp    esi,0xffffffff
  0009a:    	je     0x374a8
  000a0:    	xor    rax,rax
  000a3:    	mov    ax,WORD PTR [rdi+0x2]
  000a7:    	cmp    rax,0x3
  000ab:    	jne    0xc4
  000b1:    	cmp    esi,0x6
  000b4:    	jge    0xc4
  000ba:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000bf:    	jmp    0xd0
  000c4: 3a 	movabs rax,0x563a5fe35570
  000ce:    	call   rax
  000d0:    	mov    QWORD PTR [rbp-0x58],rax
:00005 %7 = %2.call y()                     [Vec]
:00006 
  000d4:    	mov    rdi,QWORD PTR [rbp-0x38]
  000d8: 00 	test   rdi,0x7
  000df:    	jne    0x374d1
  000e5:    	cmp    DWORD PTR [rdi+0x4],0x25
  000e9:    	jne    0x374d1
  000ef: 26 	cmp    DWORD PTR [rip+0xffffffffffff263a],0x26        # 0xffff2730
  000f6:    	jne    0x374d1
  000fc:    	mov    esi,DWORD PTR [rip+0x1caa]        # 0x1dac
  00102:    	cmp    esi,0xffffffff
  00105:    	je     0x374e0
  0010b:    	xor    rax,rax
  0010e:    	mov    ax,WORD PTR [rdi+0x2]
  00112:    	cmp    rax,0x3
  00116:    	jne    0x12f
  0011c:    	cmp    esi,0x6
  0011f:    	jge    0x12f
  00125:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0012a:    	jmp    0x13b
  0012f: 3a 	movabs rax,0x563a5fe35570
  00139:    	call   rax
  0013b:    	mov    QWORD PTR [rbp-0x60],rax
:00008 %8 = %2.call z()                     [Vec]
:00009 
  0013f:    	mov    rdi,QWORD PTR [rbp-0x38]
  00143: 00 	test   rdi,0x7
  0014a:    	jne    0x37509
  00150:    	cmp    DWORD PTR [rdi+0x4],0x25
  00154:    	jne    0x37509
  0015a: 26 	cmp    DWORD PTR [rip+0xffffffffffff25cf],0x26        # 0xffff2730
  00161:    	jne    0x37509
  00167:    	mov    esi,DWORD PTR [rip+0x1c47]        # 0x1db4
  0016d:    	cmp    esi,0xffffffff
  00170:    	je     0x37518
  00176:    	xor    rax,rax
  00179:    	mov    ax,WORD PTR [rdi+0x2]
  0017d:    	cmp    rax,0x3
  00181:    	jne    0x19a
  00187:    	cmp    esi,0x6
  0018a:    	jge    0x19a
  00190:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00195:    	jmp    0x1a6
  0019a: 3a 	movabs rax,0x563a5fe35570
  001a4:    	call   rax
  001a6:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00012 
  001aa:    	mov    rdi,QWORD PTR [rbp-0x50]
  001ae: 00 	test   rdi,0x7
  001b5:    	jne    0x37541
  001bb:    	cmp    DWORD PTR [rdi+0x4],0x26
  001bf:    	jne    0x37541
  001c5: 26 	cmp    DWORD PTR [rip+0xffffffffffff2564],0x26        # 0xffff2730
  001cc:    	jne    0x37541
  001d2: 00 	mov    r9,0x0
  001d9:    	mov    rdx,rdi
  001dc:    	mov    rax,QWORD PTR [rbx]
  001df:    	lea    rdi,[rsp-0x18]
  001e4:    	mov    QWORD PTR [rdi],rax
  001e7:    	mov    QWORD PTR [rbx],rdi
  001ea: 00 	mov    QWORD PTR [rsp-0x20],0x0
  001f3:    	mov    QWORD PTR [rsp-0x38],rcx
  001f8:    	lea    rcx,[rbp-0x58]
  001fc: 00 	mov    r8,0x3
  00203:    	call   0x37550
  00208:    	lea    rdi,[rbp-0x8]
  0020c:    	mov    QWORD PTR [rbx],rdi
  0020f: 3a 	movabs r13,0x563a608ff2f0
  00219:    	test   rax,rax
  0021c:    	je     0xfffefd53
  00222:    	mov    QWORD PTR [rbp-0x48],rax
:00014 %1.[%3] = %4
  00226:    	mov    rdx,QWORD PTR [rbp-0x30]
  0022a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0022e:    	mov    r8,QWORD PTR [rbp-0x48]
  00232:    	mov    rdi,rbx
  00235:    	mov    rsi,r12
  00238: 3a 	movabs rax,0x563a5fe90860
  00242:    	call   rax
  00244: 3a 	movabs r13,0x563a608ff310
  0024e:    	test   rax,rax
  00251:    	je     0xfffefd53
:00015 %3 = 1: i32
  00257: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00016 %5 = const[Vec]                      [Vec]
  0025f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff24d2]        # 0xffff2738
  00266: 00 	cmp    rax,QWORD PTR [rip+0x1b5b]        # 0x1dc8
  0026d:    	jne    0x37582
  00273: 00 	mov    rax,QWORD PTR [rip+0x1b3e]        # 0x1db8
  0027a:    	mov    QWORD PTR [rbp-0x50],rax
:00017 %6 = literal[0.0]
  0027e: 00 	movq   xmm2,QWORD PTR [rip+0x1b52]        # 0x1dd8
:00018 %7 = literal[0.0]
  00286: 00 	movq   xmm3,QWORD PTR [rip+0x1b5a]        # 0x1de8
:00019 %8 = literal[0.0]
  0028e: 00 	movq   xmm4,QWORD PTR [rip+0x1b62]        # 0x1df8
:00020 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00021 
  00296:    	movq   xmm0,xmm2
  0029a:    	call   0xfffefe7f
  0029f:    	mov    QWORD PTR [rbp-0x58],rax
  002a3:    	movq   xmm0,xmm3
  002a7:    	call   0xfffefe7f
  002ac:    	mov    QWORD PTR [rbp-0x60],rax
  002b0:    	movq   xmm0,xmm4
  002b4:    	call   0xfffefe7f
  002b9:    	mov    QWORD PTR [rbp-0x68],rax
  002bd:    	mov    rdi,QWORD PTR [rbp-0x50]
  002c1: 00 	test   rdi,0x7
  002c8:    	jne    0x375c8
  002ce:    	cmp    DWORD PTR [rdi+0x4],0x26
  002d2:    	jne    0x375c8
  002d8: 26 	cmp    DWORD PTR [rip+0xffffffffffff2451],0x26        # 0xffff2730
  002df:    	jne    0x375c8
  002e5: 00 	mov    r9,0x0
  002ec:    	sub    rsp,0x20
  002f0:    	movq   QWORD PTR [rsp],xmm2
  002f5:    	movq   QWORD PTR [rsp+0x8],xmm3
  002fb:    	movq   QWORD PTR [rsp+0x10],xmm4
  00301:    	mov    rdx,rdi
  00304:    	mov    rax,QWORD PTR [rbx]
  00307:    	lea    rdi,[rsp-0x18]
  0030c:    	mov    QWORD PTR [rdi],rax
  0030f:    	mov    QWORD PTR [rbx],rdi
  00312: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0031b:    	mov    QWORD PTR [rsp-0x38],rcx
  00320:    	lea    rcx,[rbp-0x58]
  00324: 00 	mov    r8,0x3
  0032b:    	call   0x375d7
  00330:    	lea    rdi,[rbp-0x8]
  00334:    	mov    QWORD PTR [rbx],rdi
  00337:    	movq   xmm2,QWORD PTR [rsp]
  0033c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00342:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00348:    	add    rsp,0x20
  0034c: 3a 	movabs r13,0x563a608ff380
  00356:    	test   rax,rax
  00359:    	je     0xfffefd53
  0035f:    	mov    QWORD PTR [rbp-0x48],rax
:00023 %1.[%3] = %4
  00363:    	sub    rsp,0x20
  00367:    	movq   QWORD PTR [rsp],xmm2
  0036c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00372:    	movq   QWORD PTR [rsp+0x10],xmm4
  00378:    	mov    rdx,QWORD PTR [rbp-0x30]
  0037c:    	mov    rcx,QWORD PTR [rbp-0x40]
  00380:    	mov    r8,QWORD PTR [rbp-0x48]
  00384:    	mov    rdi,rbx
  00387:    	mov    rsi,r12
  0038a: 3a 	movabs rax,0x563a5fe90860
  00394:    	call   rax
  00396:    	movq   xmm2,QWORD PTR [rsp]
  0039b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003a1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003a7:    	add    rsp,0x20
  003ab: 3a 	movabs r13,0x563a608ff3a0
  003b5:    	test   rax,rax
  003b8:    	je     0xfffefd53
:00024 %4 = %2.call x()                     [Vec]
:00025 
  003be:    	mov    rdi,QWORD PTR [rbp-0x38]
  003c2: 00 	test   rdi,0x7
  003c9:    	jne    0x37609
  003cf:    	cmp    DWORD PTR [rdi+0x4],0x25
  003d3:    	jne    0x37609
  003d9: 26 	cmp    DWORD PTR [rip+0xffffffffffff2350],0x26        # 0xffff2730
  003e0:    	jne    0x37609
  003e6:    	mov    esi,DWORD PTR [rip+0x1a18]        # 0x1e04
  003ec:    	cmp    esi,0xffffffff
  003ef:    	je     0x37618
  003f5:    	xor    rax,rax
  003f8:    	mov    ax,WORD PTR [rdi+0x2]
  003fc:    	cmp    rax,0x3
  00400:    	jne    0x419
  00406:    	cmp    esi,0x6
  00409:    	jge    0x419
  0040f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00414:    	jmp    0x44f
  00419:    	sub    rsp,0x20
  0041d:    	movq   QWORD PTR [rsp],xmm2
  00422:    	movq   QWORD PTR [rsp+0x8],xmm3
  00428:    	movq   QWORD PTR [rsp+0x10],xmm4
  0042e: 3a 	movabs rax,0x563a5fe35570
  00438:    	call   rax
  0043a:    	movq   xmm2,QWORD PTR [rsp]
  0043f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00445:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0044b:    	add    rsp,0x20
  0044f:    	mov    QWORD PTR [rbp-0x48],rax
:00027 %5 = literal[0.6]
  00453: 00 	movq   xmm5,QWORD PTR [rip+0x19ad]        # 0x1e08
:00028 %3 = %4 < %5                         [Float][Float]
  0045b:    	mov    rdi,QWORD PTR [rbp-0x48]
  0045f: 00 	test   rdi,0x1
  00466:    	jne    0x3766b
  0046c: 00 	test   rdi,0x2
  00473:    	je     0x4af
  00479:    	xorps  xmm6,xmm6
  0047c: 00 	movabs rax,0x8000000000000002
  00486:    	cmp    rdi,rax
  00489:    	je     0x4c1
  0048f:    	mov    rax,rdi
  00492:    	sar    rax,0x3f
  00496:    	add    rax,0x2
  0049a:    	and    rdi,0xfffffffffffffffc
  0049e:    	or     rdi,rax
  004a1:    	rol    rdi,0x3d
  004a5:    	movq   xmm6,rdi
  004aa:    	jmp    0x4c1
  004af:    	call   0xfffefd8c
  004b4:    	test   rax,rax
  004b7:    	je     0x3766b
  004bd:    	movq   xmm6,xmm0
  004c1:    	xor    rax,rax
  004c4:    	ucomisd xmm6,xmm5
  004c8:    	setb   al
  004cc:    	shl    rax,0x3
  004d0:    	or     rax,0x14
  004d4:    	mov    QWORD PTR [rbp-0x40],rax
:00029 condnotbr %3 =>:00035
  004d8:    	mov    rax,QWORD PTR [rbp-0x40]
  004dc:    	or     rax,0x10
  004e0:    	cmp    rax,0x14
  004e4:    	je     0x3771e
:00030 %4 = %2.call x()                     [Vec]
:00031 
  004ea:    	mov    rdi,QWORD PTR [rbp-0x38]
  004ee: 00 	test   rdi,0x7
  004f5:    	jne    0x37687
  004fb:    	cmp    DWORD PTR [rdi+0x4],0x25
  004ff:    	jne    0x37687
  00505: 26 	cmp    DWORD PTR [rip+0xffffffffffff2224],0x26        # 0xffff2730
  0050c:    	jne    0x37687
  00512:    	mov    esi,DWORD PTR [rip+0x18fc]        # 0x1e14
  00518:    	cmp    esi,0xffffffff
  0051b:    	je     0x376a3
  00521:    	xor    rax,rax
  00524:    	mov    ax,WORD PTR [rdi+0x2]
  00528:    	cmp    rax,0x3
  0052c:    	jne    0x545
  00532:    	cmp    esi,0x6
  00535:    	jge    0x545
  0053b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00540:    	jmp    0x587
  00545:    	sub    rsp,0x20
  00549:    	movq   QWORD PTR [rsp],xmm2
  0054e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00554:    	movq   QWORD PTR [rsp+0x10],xmm4
  0055a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00560: 3a 	movabs rax,0x563a5fe35570
  0056a:    	call   rax
  0056c:    	movq   xmm2,QWORD PTR [rsp]
  00571:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00577:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0057d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00583:    	add    rsp,0x20
  00587:    	mov    QWORD PTR [rbp-0x48],rax
:00033 %5 = literal[-0.6]
  0058b: 00 	movq   xmm5,QWORD PTR [rip+0x1885]        # 0x1e18
:00034 %3 = %4 > %5                         [Float][Float]
  00593:    	mov    rdi,QWORD PTR [rbp-0x48]
  00597: 00 	test   rdi,0x1
  0059e:    	jne    0x37702
  005a4: 00 	test   rdi,0x2
  005ab:    	je     0x5e7
  005b1:    	xorps  xmm6,xmm6
  005b4: 00 	movabs rax,0x8000000000000002
  005be:    	cmp    rdi,rax
  005c1:    	je     0x5f9
  005c7:    	mov    rax,rdi
  005ca:    	sar    rax,0x3f
  005ce:    	add    rax,0x2
  005d2:    	and    rdi,0xfffffffffffffffc
  005d6:    	or     rdi,rax
  005d9:    	rol    rdi,0x3d
  005dd:    	movq   xmm6,rdi
  005e2:    	jmp    0x5f9
  005e7:    	call   0xfffefd8c
  005ec:    	test   rax,rax
  005ef:    	je     0x37702
  005f5:    	movq   xmm6,xmm0
  005f9:    	xor    rax,rax
  005fc:    	ucomisd xmm6,xmm5
  00600:    	seta   al
  00604:    	shl    rax,0x3
  00608:    	or     rax,0x14
  0060c:    	mov    QWORD PTR [rbp-0x40],rax
  00610:    	jmp    0x37744
:00035 condnotbr %3 =>:00043
  00615:    	mov    rax,QWORD PTR [rbp-0x40]
  00619:    	or     rax,0x10
  0061d:    	cmp    rax,0x14
  00621:    	je     0x780
:00036 %3 = 1: i32
  00627: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00037 %3 = %1.[%3]
  0062f:    	sub    rsp,0x30
  00633:    	movq   QWORD PTR [rsp],xmm2
  00638:    	movq   QWORD PTR [rsp+0x8],xmm3
  0063e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00644:    	movq   QWORD PTR [rsp+0x18],xmm5
  0064a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00650:    	mov    rdx,QWORD PTR [rbp-0x30]
  00654:    	mov    rcx,QWORD PTR [rbp-0x40]
  00658:    	mov    rdi,rbx
  0065b:    	mov    rsi,r12
  0065e: 3a 	movabs rax,0x563a5fe90750
  00668:    	call   rax
  0066a:    	movq   xmm2,QWORD PTR [rsp]
  0066f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00675:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0067b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00681:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00687:    	add    rsp,0x30
  0068b: 3a 	movabs r13,0x563a608ff480
  00695:    	test   rax,rax
  00698:    	je     0xfffefd53
  0069e:    	mov    QWORD PTR [rbp-0x40],rax
:00038 %4 = literal[1.0]
  006a2: 00 	movq   xmm6,QWORD PTR [rip+0x177e]        # 0x1e28
:00039 _ = %3.call x=(%4; 1)                [Vec]
:00040 
  006aa:    	movq   xmm0,xmm6
  006ae:    	call   0xfffefe7f
  006b3:    	mov    QWORD PTR [rbp-0x48],rax
  006b7:    	mov    rdi,QWORD PTR [rbp-0x40]
  006bb: 00 	test   rdi,0x7
  006c2:    	jne    0x3776a
  006c8:    	cmp    DWORD PTR [rdi+0x4],0x25
  006cc:    	jne    0x3776a
  006d2: 26 	cmp    DWORD PTR [rip+0xffffffffffff2057],0x26        # 0xffff2730
  006d9:    	jne    0x3776a
  006df:    	mov    esi,DWORD PTR [rip+0x174f]        # 0x1e34
  006e5:    	cmp    esi,0xffffffff
  006e8:    	je     0x37786
  006ee:    	xor    rax,rax
  006f1:    	mov    ax,WORD PTR [rdi+0x2]
  006f5:    	cmp    rax,0x3
  006f9:    	jne    0x716
  006ff:    	cmp    esi,0x6
  00702:    	jge    0x716
  00708:    	mov    rax,QWORD PTR [rbp-0x48]
  0070c:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00711:    	jmp    0x77b
  00716:    	sub    rsp,0x30
  0071a:    	movq   QWORD PTR [rsp],xmm2
  0071f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00725:    	movq   QWORD PTR [rsp+0x10],xmm4
  0072b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00731:    	movq   QWORD PTR [rsp+0x20],xmm6
  00737:    	mov    rdx,QWORD PTR [rbp-0x48]
  0073b: 3a 	movabs rax,0x563a5fe357f0
  00745:    	call   rax
  00747:    	movq   xmm2,QWORD PTR [rsp]
  0074c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00752:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00758:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0075e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00764:    	add    rsp,0x30
  00768: 3a 	movabs r13,0x563a608ff4b0
  00772:    	test   rax,rax
  00775:    	je     0xfffefd53
:00042 br =>:00087
  0077b:    	jmp    0x37c65
:00043 %4 = %2.call y()                     [<INVALID>]
:00044 
  00780:    	sub    rsp,0x20
  00784:    	movq   QWORD PTR [rsp],xmm2
  00789:    	movq   QWORD PTR [rsp+0x8],xmm3
  0078f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00795:    	movq   QWORD PTR [rsp+0x18],xmm5
  0079b:    	mov    rdi,QWORD PTR [rbp-0x38]
  0079f: 3a 	movabs rax,0x563a5fe2d010
  007a9:    	call   rax
  007ab:    	mov    r15d,eax
  007ae: 00 	cmp    r15d,DWORD PTR [rip+0x1687]        # 0x1e3c
  007b5:    	jne    0x377f8
  007bb:    	mov    eax,DWORD PTR [rip+0xffffffffffff1f6f]        # 0xffff2730
  007c1:    	cmp    DWORD PTR [rip+0x1671],eax        # 0x1e38
  007c7:    	jne    0x377f8
  007cd:    	mov    rax,QWORD PTR [rbx]
  007d0:    	lea    rdi,[rsp-0x18]
  007d5:    	mov    QWORD PTR [rdi],rax
  007d8:    	mov    QWORD PTR [rbx],rdi
  007db: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007e4:    	mov    QWORD PTR [rsp-0x38],rcx
  007e9:    	mov    rax,QWORD PTR [rbp-0x38]
  007ed:    	mov    QWORD PTR [rsp-0x38],rax
  007f2: 00 	mov    rdi,0x0
  007f9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00802: 00 	movabs rax,0x0
  0080c:    	mov    QWORD PTR [rsp-0x28],rax
  00811: 00 	movabs r13,0x0
  0081b:    	call   0xfffefd18
  00820:    	lea    rdi,[rbp-0x8]
  00824:    	mov    QWORD PTR [rbx],rdi
  00827:    	movq   xmm2,QWORD PTR [rsp]
  0082c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00832:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00838:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0083e:    	add    rsp,0x20
  00842:    	test   rax,rax
  00845:    	je     0x37864
  0084b:    	mov    QWORD PTR [rbp-0x48],rax
:00046 %5 = literal[0.6]
  0084f: 00 	movq   xmm5,QWORD PTR [rip+0x15f1]        # 0x1e48
:00047 %3 = %4 < %5                         [Integer][Integer]
  00857:    	movq   xmm0,xmm5
  0085b:    	call   0xfffefe7f
  00860:    	mov    QWORD PTR [rbp-0x50],rax
  00864:    	mov    rdi,QWORD PTR [rbp-0x48]
  00868:    	mov    rsi,QWORD PTR [rbp-0x50]
  0086c: 00 	test   rdi,0x1
  00873:    	je     0x37873
  00879: 00 	test   rsi,0x1
  00880:    	je     0x37873
  00886:    	xor    rax,rax
  00889:    	cmp    rdi,rsi
  0088c:    	setl   al
  00890:    	shl    rax,0x3
  00894:    	or     rax,0x14
  00898:    	mov    QWORD PTR [rbp-0x40],rax
:00048 condnotbr %3 =>:00054
  0089c:    	mov    rax,QWORD PTR [rbp-0x40]
  008a0:    	or     rax,0x10
  008a4:    	cmp    rax,0x14
  008a8:    	je     0x37926
:00049 %4 = %2.call y()                     [<INVALID>]
:00050 
  008ae:    	sub    rsp,0x20
  008b2:    	movq   QWORD PTR [rsp],xmm2
  008b7:    	movq   QWORD PTR [rsp+0x8],xmm3
  008bd:    	movq   QWORD PTR [rsp+0x10],xmm4
  008c3:    	movq   QWORD PTR [rsp+0x18],xmm5
  008c9:    	mov    rdi,QWORD PTR [rbp-0x38]
  008cd: 3a 	movabs rax,0x563a5fe2d010
  008d7:    	call   rax
  008d9:    	mov    r15d,eax
  008dc: 00 	cmp    r15d,DWORD PTR [rip+0x1571]        # 0x1e54
  008e3:    	jne    0x3788f
  008e9:    	mov    eax,DWORD PTR [rip+0xffffffffffff1e41]        # 0xffff2730
  008ef:    	cmp    DWORD PTR [rip+0x155b],eax        # 0x1e50
  008f5:    	jne    0x3788f
  008fb:    	mov    rax,QWORD PTR [rbx]
  008fe:    	lea    rdi,[rsp-0x18]
  00903:    	mov    QWORD PTR [rdi],rax
  00906:    	mov    QWORD PTR [rbx],rdi
  00909: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00912:    	mov    QWORD PTR [rsp-0x38],rcx
  00917:    	mov    rax,QWORD PTR [rbp-0x38]
  0091b:    	mov    QWORD PTR [rsp-0x38],rax
  00920: 00 	mov    rdi,0x0
  00927: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00930: 00 	movabs rax,0x0
  0093a:    	mov    QWORD PTR [rsp-0x28],rax
  0093f: 00 	movabs r13,0x0
  00949:    	call   0xfffefd18
  0094e:    	lea    rdi,[rbp-0x8]
  00952:    	mov    QWORD PTR [rbx],rdi
  00955:    	movq   xmm2,QWORD PTR [rsp]
  0095a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00960:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00966:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0096c:    	add    rsp,0x20
  00970:    	test   rax,rax
  00973:    	je     0x378fb
  00979:    	mov    QWORD PTR [rbp-0x48],rax
:00052 %5 = literal[-0.6]
  0097d: 00 	movq   xmm5,QWORD PTR [rip+0x14d3]        # 0x1e58
:00053 %3 = %4 > %5                         [Integer][Integer]
  00985:    	movq   xmm0,xmm5
  00989:    	call   0xfffefe7f
  0098e:    	mov    QWORD PTR [rbp-0x50],rax
  00992:    	mov    rdi,QWORD PTR [rbp-0x48]
  00996:    	mov    rsi,QWORD PTR [rbp-0x50]
  0099a: 00 	test   rdi,0x1
  009a1:    	je     0x3790a
  009a7: 00 	test   rsi,0x1
  009ae:    	je     0x3790a
  009b4:    	xor    rax,rax
  009b7:    	cmp    rdi,rsi
  009ba:    	setg   al
  009be:    	shl    rax,0x3
  009c2:    	or     rax,0x14
  009c6:    	mov    QWORD PTR [rbp-0x40],rax
  009ca:    	jmp    0x3793f
:00054 condnotbr %3 =>:00062
  009cf:    	mov    rax,QWORD PTR [rbp-0x40]
  009d3:    	or     rax,0x10
  009d7:    	cmp    rax,0x14
  009db:    	je     0xb4a
:00055 %3 = 1: i32
  009e1: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00056 %3 = %1.[%3]
  009e9:    	sub    rsp,0x20
  009ed:    	movq   QWORD PTR [rsp],xmm2
  009f2:    	movq   QWORD PTR [rsp+0x8],xmm3
  009f8:    	movq   QWORD PTR [rsp+0x10],xmm4
  009fe:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a04:    	mov    rdx,QWORD PTR [rbp-0x30]
  00a08:    	mov    rcx,QWORD PTR [rbp-0x40]
  00a0c:    	mov    rdi,rbx
  00a0f:    	mov    rsi,r12
  00a12: 3a 	movabs rax,0x563a5fe90750
  00a1c:    	call   rax
  00a1e:    	movq   xmm2,QWORD PTR [rsp]
  00a23:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a29:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a2f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a35:    	add    rsp,0x20
  00a39: 3a 	movabs r13,0x563a608ff5b0
  00a43:    	test   rax,rax
  00a46:    	je     0xfffefd53
  00a4c:    	mov    QWORD PTR [rbp-0x40],rax
:00057 %4 = literal[1.0]
  00a50: 00 	movq   xmm6,QWORD PTR [rip+0x1410]        # 0x1e68
:00058 _ = %3.call y=(%4; 1)                [<INVALID>]
:00059 
  00a58:    	movq   xmm0,xmm6
  00a5c:    	call   0xfffefe7f
  00a61:    	mov    QWORD PTR [rbp-0x48],rax
  00a65:    	sub    rsp,0x30
  00a69:    	movq   QWORD PTR [rsp],xmm2
  00a6e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a74:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a7a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a80:    	movq   QWORD PTR [rsp+0x20],xmm6
  00a86:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a8a: 3a 	movabs rax,0x563a5fe2d010
  00a94:    	call   rax
  00a96:    	mov    r15d,eax
  00a99: 00 	cmp    r15d,DWORD PTR [rip+0x13d4]        # 0x1e74
  00aa0:    	jne    0x37958
  00aa6:    	mov    eax,DWORD PTR [rip+0xffffffffffff1c84]        # 0xffff2730
  00aac:    	cmp    DWORD PTR [rip+0x13be],eax        # 0x1e70
  00ab2:    	jne    0x37958
  00ab8:    	mov    rax,QWORD PTR [rbx]
  00abb:    	lea    rdi,[rsp-0x18]
  00ac0:    	mov    QWORD PTR [rdi],rax
  00ac3:    	mov    QWORD PTR [rbx],rdi
  00ac6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00acf:    	mov    QWORD PTR [rsp-0x38],rcx
  00ad4:    	mov    rax,QWORD PTR [rbp-0x40]
  00ad8:    	mov    QWORD PTR [rsp-0x38],rax
  00add: 00 	mov    rdi,0x1
  00ae4:    	mov    rax,QWORD PTR [rbp-0x48]
  00ae8:    	mov    QWORD PTR [rsp-0x40],rax
  00aed: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00af6: 00 	movabs rax,0x0
  00b00:    	mov    QWORD PTR [rsp-0x28],rax
  00b05: 00 	movabs r13,0x0
  00b0f:    	call   0xfffefd18
  00b14:    	lea    rdi,[rbp-0x8]
  00b18:    	mov    QWORD PTR [rbx],rdi
  00b1b:    	movq   xmm2,QWORD PTR [rsp]
  00b20:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b26:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b2c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b32:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b38:    	add    rsp,0x30
  00b3c:    	test   rax,rax
  00b3f:    	je     0x379c4
:00061 br =>:00087
  00b45:    	jmp    0x37c8b
:00062 %4 = %2.call z()                     [<INVALID>]
:00063 
  00b4a:    	sub    rsp,0x20
  00b4e:    	movq   QWORD PTR [rsp],xmm2
  00b53:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b59:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b5f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b65:    	mov    rdi,QWORD PTR [rbp-0x38]
  00b69: 3a 	movabs rax,0x563a5fe2d010
  00b73:    	call   rax
  00b75:    	mov    r15d,eax
  00b78: 00 	cmp    r15d,DWORD PTR [rip+0x12fd]        # 0x1e7c
  00b7f:    	jne    0x379d3
  00b85:    	mov    eax,DWORD PTR [rip+0xffffffffffff1ba5]        # 0xffff2730
  00b8b:    	cmp    DWORD PTR [rip+0x12e7],eax        # 0x1e78
  00b91:    	jne    0x379d3
  00b97:    	mov    rax,QWORD PTR [rbx]
  00b9a:    	lea    rdi,[rsp-0x18]
  00b9f:    	mov    QWORD PTR [rdi],rax
  00ba2:    	mov    QWORD PTR [rbx],rdi
  00ba5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00bae:    	mov    QWORD PTR [rsp-0x38],rcx
  00bb3:    	mov    rax,QWORD PTR [rbp-0x38]
  00bb7:    	mov    QWORD PTR [rsp-0x38],rax
  00bbc: 00 	mov    rdi,0x0
  00bc3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00bcc: 00 	movabs rax,0x0
  00bd6:    	mov    QWORD PTR [rsp-0x28],rax
  00bdb: 00 	movabs r13,0x0
  00be5:    	call   0xfffefd18
  00bea:    	lea    rdi,[rbp-0x8]
  00bee:    	mov    QWORD PTR [rbx],rdi
  00bf1:    	movq   xmm2,QWORD PTR [rsp]
  00bf6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bfc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c02:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c08:    	add    rsp,0x20
  00c0c:    	test   rax,rax
  00c0f:    	je     0x37a3f
  00c15:    	mov    QWORD PTR [rbp-0x48],rax
:00065 %5 = literal[0.6]
  00c19: 00 	movq   xmm5,QWORD PTR [rip+0x1267]        # 0x1e88
:00066 %3 = %4 < %5                         [Integer][Integer]
  00c21:    	movq   xmm0,xmm5
  00c25:    	call   0xfffefe7f
  00c2a:    	mov    QWORD PTR [rbp-0x50],rax
  00c2e:    	mov    rdi,QWORD PTR [rbp-0x48]
  00c32:    	mov    rsi,QWORD PTR [rbp-0x50]
  00c36: 00 	test   rdi,0x1
  00c3d:    	je     0x37a4e
  00c43: 00 	test   rsi,0x1
  00c4a:    	je     0x37a4e
  00c50:    	xor    rax,rax
  00c53:    	cmp    rdi,rsi
  00c56:    	setl   al
  00c5a:    	shl    rax,0x3
  00c5e:    	or     rax,0x14
  00c62:    	mov    QWORD PTR [rbp-0x40],rax
:00067 condnotbr %3 =>:00073
  00c66:    	mov    rax,QWORD PTR [rbp-0x40]
  00c6a:    	or     rax,0x10
  00c6e:    	cmp    rax,0x14
  00c72:    	je     0x37b01
:00068 %4 = %2.call z()                     [<INVALID>]
:00069 
  00c78:    	sub    rsp,0x20
  00c7c:    	movq   QWORD PTR [rsp],xmm2
  00c81:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c87:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c8d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c93:    	mov    rdi,QWORD PTR [rbp-0x38]
  00c97: 3a 	movabs rax,0x563a5fe2d010
  00ca1:    	call   rax
  00ca3:    	mov    r15d,eax
  00ca6: 00 	cmp    r15d,DWORD PTR [rip+0x11e7]        # 0x1e94
  00cad:    	jne    0x37a6a
  00cb3:    	mov    eax,DWORD PTR [rip+0xffffffffffff1a77]        # 0xffff2730
  00cb9:    	cmp    DWORD PTR [rip+0x11d1],eax        # 0x1e90
  00cbf:    	jne    0x37a6a
  00cc5:    	mov    rax,QWORD PTR [rbx]
  00cc8:    	lea    rdi,[rsp-0x18]
  00ccd:    	mov    QWORD PTR [rdi],rax
  00cd0:    	mov    QWORD PTR [rbx],rdi
  00cd3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cdc:    	mov    QWORD PTR [rsp-0x38],rcx
  00ce1:    	mov    rax,QWORD PTR [rbp-0x38]
  00ce5:    	mov    QWORD PTR [rsp-0x38],rax
  00cea: 00 	mov    rdi,0x0
  00cf1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00cfa: 00 	movabs rax,0x0
  00d04:    	mov    QWORD PTR [rsp-0x28],rax
  00d09: 00 	movabs r13,0x0
  00d13:    	call   0xfffefd18
  00d18:    	lea    rdi,[rbp-0x8]
  00d1c:    	mov    QWORD PTR [rbx],rdi
  00d1f:    	movq   xmm2,QWORD PTR [rsp]
  00d24:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d2a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d30:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d36:    	add    rsp,0x20
  00d3a:    	test   rax,rax
  00d3d:    	je     0x37ad6
  00d43:    	mov    QWORD PTR [rbp-0x48],rax
:00071 %5 = literal[-0.6]
  00d47: 00 	movq   xmm5,QWORD PTR [rip+0x1149]        # 0x1e98
:00072 %3 = %4 > %5                         [Integer][Integer]
  00d4f:    	movq   xmm0,xmm5
  00d53:    	call   0xfffefe7f
  00d58:    	mov    QWORD PTR [rbp-0x50],rax
  00d5c:    	mov    rdi,QWORD PTR [rbp-0x48]
  00d60:    	mov    rsi,QWORD PTR [rbp-0x50]
  00d64: 00 	test   rdi,0x1
  00d6b:    	je     0x37ae5
  00d71: 00 	test   rsi,0x1
  00d78:    	je     0x37ae5
  00d7e:    	xor    rax,rax
  00d81:    	cmp    rdi,rsi
  00d84:    	setg   al
  00d88:    	shl    rax,0x3
  00d8c:    	or     rax,0x14
  00d90:    	mov    QWORD PTR [rbp-0x40],rax
  00d94:    	jmp    0x37b1a
:00073 condnotbr %3 =>:00081
  00d99:    	mov    rax,QWORD PTR [rbp-0x40]
  00d9d:    	or     rax,0x10
  00da1:    	cmp    rax,0x14
  00da5:    	je     0xf14
:00074 %3 = 1: i32
  00dab: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00075 %3 = %1.[%3]
  00db3:    	sub    rsp,0x20
  00db7:    	movq   QWORD PTR [rsp],xmm2
  00dbc:    	movq   QWORD PTR [rsp+0x8],xmm3
  00dc2:    	movq   QWORD PTR [rsp+0x10],xmm4
  00dc8:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dce:    	mov    rdx,QWORD PTR [rbp-0x30]
  00dd2:    	mov    rcx,QWORD PTR [rbp-0x40]
  00dd6:    	mov    rdi,rbx
  00dd9:    	mov    rsi,r12
  00ddc: 3a 	movabs rax,0x563a5fe90750
  00de6:    	call   rax
  00de8:    	movq   xmm2,QWORD PTR [rsp]
  00ded:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00df3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00df9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dff:    	add    rsp,0x20
  00e03: 3a 	movabs r13,0x563a608ff6e0
  00e0d:    	test   rax,rax
  00e10:    	je     0xfffefd53
  00e16:    	mov    QWORD PTR [rbp-0x40],rax
:00076 %4 = literal[1.0]
  00e1a: 00 	movq   xmm6,QWORD PTR [rip+0x1086]        # 0x1ea8
:00077 _ = %3.call z=(%4; 1)                [<INVALID>]
:00078 
  00e22:    	movq   xmm0,xmm6
  00e26:    	call   0xfffefe7f
  00e2b:    	mov    QWORD PTR [rbp-0x48],rax
  00e2f:    	sub    rsp,0x30
  00e33:    	movq   QWORD PTR [rsp],xmm2
  00e38:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e3e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e44:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e4a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e50:    	mov    rdi,QWORD PTR [rbp-0x40]
  00e54: 3a 	movabs rax,0x563a5fe2d010
  00e5e:    	call   rax
  00e60:    	mov    r15d,eax
  00e63: 00 	cmp    r15d,DWORD PTR [rip+0x104a]        # 0x1eb4
  00e6a:    	jne    0x37b33
  00e70:    	mov    eax,DWORD PTR [rip+0xffffffffffff18ba]        # 0xffff2730
  00e76:    	cmp    DWORD PTR [rip+0x1034],eax        # 0x1eb0
  00e7c:    	jne    0x37b33
  00e82:    	mov    rax,QWORD PTR [rbx]
  00e85:    	lea    rdi,[rsp-0x18]
  00e8a:    	mov    QWORD PTR [rdi],rax
  00e8d:    	mov    QWORD PTR [rbx],rdi
  00e90: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e99:    	mov    QWORD PTR [rsp-0x38],rcx
  00e9e:    	mov    rax,QWORD PTR [rbp-0x40]
  00ea2:    	mov    QWORD PTR [rsp-0x38],rax
  00ea7: 00 	mov    rdi,0x1
  00eae:    	mov    rax,QWORD PTR [rbp-0x48]
  00eb2:    	mov    QWORD PTR [rsp-0x40],rax
  00eb7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ec0: 00 	movabs rax,0x0
  00eca:    	mov    QWORD PTR [rsp-0x28],rax
  00ecf: 00 	movabs r13,0x0
  00ed9:    	call   0xfffefd18
  00ede:    	lea    rdi,[rbp-0x8]
  00ee2:    	mov    QWORD PTR [rbx],rdi
  00ee5:    	movq   xmm2,QWORD PTR [rsp]
  00eea:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ef0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ef6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00efc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f02:    	add    rsp,0x30
  00f06:    	test   rax,rax
  00f09:    	je     0x37b9f
:00080 br =>:00087
  00f0f:    	jmp    0x37ca4
:00081 %3 = 1: i32
  00f14: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00082 %3 = %1.[%3]
  00f1c:    	sub    rsp,0x20
  00f20:    	movq   QWORD PTR [rsp],xmm2
  00f25:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f2b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f31:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f37:    	mov    rdx,QWORD PTR [rbp-0x30]
  00f3b:    	mov    rcx,QWORD PTR [rbp-0x40]
  00f3f:    	mov    rdi,rbx
  00f42:    	mov    rsi,r12
  00f45: 3a 	movabs rax,0x563a5fe90750
  00f4f:    	call   rax
  00f51:    	movq   xmm2,QWORD PTR [rsp]
  00f56:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f5c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f62:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f68:    	add    rsp,0x20
  00f6c: 3a 	movabs r13,0x563a608ff750
  00f76:    	test   rax,rax
  00f79:    	je     0xfffefd53
  00f7f:    	mov    QWORD PTR [rbp-0x40],rax
:00083 %4 = literal[1.0]
  00f83: 00 	movq   xmm6,QWORD PTR [rip+0xf2d]        # 0x1eb8
:00084 _ = %3.call x=(%4; 1)                [<INVALID>]
:00085 
  00f8b:    	movq   xmm0,xmm6
  00f8f:    	call   0xfffefe7f
  00f94:    	mov    QWORD PTR [rbp-0x48],rax
  00f98:    	sub    rsp,0x30
  00f9c:    	movq   QWORD PTR [rsp],xmm2
  00fa1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fa7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fad:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fb3:    	movq   QWORD PTR [rsp+0x20],xmm6
  00fb9:    	mov    rdi,QWORD PTR [rbp-0x40]
  00fbd: 3a 	movabs rax,0x563a5fe2d010
  00fc7:    	call   rax
  00fc9:    	mov    r15d,eax
  00fcc: 00 	cmp    r15d,DWORD PTR [rip+0xef1]        # 0x1ec4
  00fd3:    	jne    0x37bae
  00fd9:    	mov    eax,DWORD PTR [rip+0xffffffffffff1751]        # 0xffff2730
  00fdf:    	cmp    DWORD PTR [rip+0xedb],eax        # 0x1ec0
  00fe5:    	jne    0x37bae
  00feb:    	mov    rax,QWORD PTR [rbx]
  00fee:    	lea    rdi,[rsp-0x18]
  00ff3:    	mov    QWORD PTR [rdi],rax
  00ff6:    	mov    QWORD PTR [rbx],rdi
  00ff9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01002:    	mov    QWORD PTR [rsp-0x38],rcx
  01007:    	mov    rax,QWORD PTR [rbp-0x40]
  0100b:    	mov    QWORD PTR [rsp-0x38],rax
  01010: 00 	mov    rdi,0x1
  01017:    	mov    rax,QWORD PTR [rbp-0x48]
  0101b:    	mov    QWORD PTR [rsp-0x40],rax
  01020: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01029: 00 	movabs rax,0x0
  01033:    	mov    QWORD PTR [rsp-0x28],rax
  01038: 00 	movabs r13,0x0
  01042:    	call   0xfffefd18
  01047:    	lea    rdi,[rbp-0x8]
  0104b:    	mov    QWORD PTR [rbx],rdi
  0104e:    	movq   xmm2,QWORD PTR [rsp]
  01053:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01059:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0105f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01065:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0106b:    	add    rsp,0x30
  0106f:    	test   rax,rax
  01072:    	je     0x37c1a
:00087 %3 = 0: i32
  01078: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  01080: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  01088:    	sub    rsp,0x20
  0108c:    	movq   QWORD PTR [rsp],xmm2
  01091:    	movq   QWORD PTR [rsp+0x8],xmm3
  01097:    	movq   QWORD PTR [rsp+0x10],xmm4
  0109d:    	movq   QWORD PTR [rsp+0x18],xmm6
  010a3:    	mov    rdx,QWORD PTR [rbp-0x30]
  010a7:    	mov    rcx,QWORD PTR [rbp-0x50]
  010ab:    	mov    rdi,rbx
  010ae:    	mov    rsi,r12
  010b1: 3a 	movabs rax,0x563a5fe90750
  010bb:    	call   rax
  010bd:    	movq   xmm2,QWORD PTR [rsp]
  010c2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010c8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010ce:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010d4:    	add    rsp,0x20
  010d8: 3a 	movabs r13,0x563a608ff7c0
  010e2:    	test   rax,rax
  010e5:    	je     0xfffefd53
  010eb:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  010ef: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  010f7:    	sub    rsp,0x20
  010fb:    	movq   QWORD PTR [rsp],xmm3
  01100:    	movq   QWORD PTR [rsp+0x8],xmm4
  01106:    	movq   QWORD PTR [rsp+0x10],xmm6
  0110c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01110:    	mov    rcx,QWORD PTR [rbp-0x58]
  01114:    	mov    rdi,rbx
  01117:    	mov    rsi,r12
  0111a: 3a 	movabs rax,0x563a5fe90750
  01124:    	call   rax
  01126:    	movq   xmm3,QWORD PTR [rsp]
  0112b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01131:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01137:    	add    rsp,0x20
  0113b: 3a 	movabs r13,0x563a608ff7e0
  01145:    	test   rax,rax
  01148:    	je     0xfffefd53
  0114e:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  01152:    	mov    rdi,QWORD PTR [rbp-0x50]
  01156: 00 	test   rdi,0x7
  0115d:    	jne    0x37c29
  01163:    	cmp    DWORD PTR [rdi+0x4],0x25
  01167:    	jne    0x37c29
  0116d: 26 	cmp    DWORD PTR [rip+0xffffffffffff15bc],0x26        # 0xffff2730
  01174:    	jne    0x37c29
  0117a:    	sub    rsp,0x10
  0117e:    	movq   QWORD PTR [rsp],xmm3
  01183:    	movq   QWORD PTR [rsp+0x8],xmm4
  01189:    	mov    rax,QWORD PTR [rbx]
  0118c:    	lea    rdi,[rsp-0x18]
  01191:    	mov    QWORD PTR [rdi],rax
  01194:    	mov    QWORD PTR [rbx],rdi
  01197: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011a0:    	mov    QWORD PTR [rsp-0x38],rcx
  011a5:    	mov    rax,QWORD PTR [rbp-0x50]
  011a9:    	mov    QWORD PTR [rsp-0x38],rax
  011ae: 00 	mov    rdi,0x1
  011b5:    	mov    rax,QWORD PTR [rbp-0x58]
  011b9:    	mov    QWORD PTR [rsp-0x40],rax
  011be: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011c7: 09 	movabs rax,0x90000003a
  011d1:    	mov    QWORD PTR [rsp-0x28],rax
  011d6: 3a 	movabs r13,0x563a608e3b20
  011e0:    	call   0xffffbcdc
  011e5:    	lea    rdi,[rbp-0x8]
  011e9:    	mov    QWORD PTR [rbx],rdi
  011ec:    	movq   xmm3,QWORD PTR [rsp]
  011f1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011f7:    	add    rsp,0x10
  011fb: 3a 	movabs r13,0x563a608ff800
  01205:    	test   rax,rax
  01208:    	je     0xfffefd53
  0120e:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  01212:    	sub    rsp,0x10
  01216:    	movq   QWORD PTR [rsp],xmm3
  0121b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01221:    	mov    rdx,QWORD PTR [rbp-0x30]
  01225:    	mov    rcx,QWORD PTR [rbp-0x40]
  01229:    	mov    r8,QWORD PTR [rbp-0x48]
  0122d:    	mov    rdi,rbx
  01230:    	mov    rsi,r12
  01233: 3a 	movabs rax,0x563a5fe90860
  0123d:    	call   rax
  0123f:    	movq   xmm3,QWORD PTR [rsp]
  01244:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0124a:    	add    rsp,0x10
  0124e: 3a 	movabs r13,0x563a608ff820
  01258:    	test   rax,rax
  0125b:    	je     0xfffefd53
:00096 %3 = 0: i32
  01261: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  01269: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  01271:    	sub    rsp,0x10
  01275:    	movq   QWORD PTR [rsp],xmm3
  0127a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01280:    	mov    rdx,QWORD PTR [rbp-0x30]
  01284:    	mov    rcx,QWORD PTR [rbp-0x50]
  01288:    	mov    rdi,rbx
  0128b:    	mov    rsi,r12
  0128e: 3a 	movabs rax,0x563a5fe90750
  01298:    	call   rax
  0129a:    	movq   xmm3,QWORD PTR [rsp]
  0129f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012a5:    	add    rsp,0x10
  012a9: 3a 	movabs r13,0x563a608ff850
  012b3:    	test   rax,rax
  012b6:    	je     0xfffefd53
  012bc:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  012c0:    	mov    rdi,QWORD PTR [rbp-0x50]
  012c4: 00 	test   rdi,0x7
  012cb:    	jne    0x37c38
  012d1:    	cmp    DWORD PTR [rdi+0x4],0x25
  012d5:    	jne    0x37c38
  012db: 26 	cmp    DWORD PTR [rip+0xffffffffffff144e],0x26        # 0xffff2730
  012e2:    	jne    0x37c38
  012e8:    	sub    rsp,0x10
  012ec:    	movq   QWORD PTR [rsp],xmm3
  012f1:    	movq   QWORD PTR [rsp+0x8],xmm4
  012f7:    	mov    rax,QWORD PTR [rbx]
  012fa:    	lea    rdi,[rsp-0x18]
  012ff:    	mov    QWORD PTR [rdi],rax
  01302:    	mov    QWORD PTR [rbx],rdi
  01305: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0130e:    	mov    QWORD PTR [rsp-0x38],rcx
  01313:    	mov    rax,QWORD PTR [rbp-0x50]
  01317:    	mov    QWORD PTR [rsp-0x38],rax
  0131c: 00 	mov    rdi,0x0
  01323: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0132c: 07 	movabs rax,0x100070000003d
  01336:    	mov    QWORD PTR [rsp-0x28],rax
  0133b: 3a 	movabs r13,0x563a608f6640
  01345:    	call   0xffff3003
  0134a:    	lea    rdi,[rbp-0x8]
  0134e:    	mov    QWORD PTR [rbx],rdi
  01351:    	movq   xmm3,QWORD PTR [rsp]
  01356:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0135c:    	add    rsp,0x10
  01360: 3a 	movabs r13,0x563a608ff870
  0136a:    	test   rax,rax
  0136d:    	je     0xfffefd53
  01373:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  01377:    	sub    rsp,0x10
  0137b:    	movq   QWORD PTR [rsp],xmm3
  01380:    	movq   QWORD PTR [rsp+0x8],xmm4
  01386:    	mov    rdx,QWORD PTR [rbp-0x30]
  0138a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0138e:    	mov    r8,QWORD PTR [rbp-0x48]
  01392:    	mov    rdi,rbx
  01395:    	mov    rsi,r12
  01398: 3a 	movabs rax,0x563a5fe90860
  013a2:    	call   rax
  013a4:    	movq   xmm3,QWORD PTR [rsp]
  013a9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013af:    	add    rsp,0x10
  013b3: 3a 	movabs r13,0x563a608ff890
  013bd:    	test   rax,rax
  013c0:    	je     0xfffefd53
:00103 %3 = 1: i32
  013c6: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  013ce: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  013d6:    	sub    rsp,0x10
  013da:    	movq   QWORD PTR [rsp],xmm3
  013df:    	movq   QWORD PTR [rsp+0x8],xmm4
  013e5:    	mov    rdx,QWORD PTR [rbp-0x30]
  013e9:    	mov    rcx,QWORD PTR [rbp-0x50]
  013ed:    	mov    rdi,rbx
  013f0:    	mov    rsi,r12
  013f3: 3a 	movabs rax,0x563a5fe90750
  013fd:    	call   rax
  013ff:    	movq   xmm3,QWORD PTR [rsp]
  01404:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0140a:    	add    rsp,0x10
  0140e: 3a 	movabs r13,0x563a608ff8c0
  01418:    	test   rax,rax
  0141b:    	je     0xfffefd53
  01421:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  01425: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  0142d:    	sub    rsp,0x10
  01431:    	movq   QWORD PTR [rsp],xmm3
  01436:    	movq   QWORD PTR [rsp+0x8],xmm4
  0143c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01440:    	mov    rcx,QWORD PTR [rbp-0x58]
  01444:    	mov    rdi,rbx
  01447:    	mov    rsi,r12
  0144a: 3a 	movabs rax,0x563a5fe90750
  01454:    	call   rax
  01456:    	movq   xmm3,QWORD PTR [rsp]
  0145b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01461:    	add    rsp,0x10
  01465: 3a 	movabs r13,0x563a608ff8e0
  0146f:    	test   rax,rax
  01472:    	je     0xfffefd53
  01478:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  0147c:    	mov    rdi,QWORD PTR [rbp-0x50]
  01480: 00 	test   rdi,0x7
  01487:    	jne    0x37c47
  0148d:    	cmp    DWORD PTR [rdi+0x4],0x25
  01491:    	jne    0x37c47
  01497: 26 	cmp    DWORD PTR [rip+0xffffffffffff1292],0x26        # 0xffff2730
  0149e:    	jne    0x37c47
  014a4:    	sub    rsp,0x10
  014a8:    	movq   QWORD PTR [rsp],xmm3
  014ad:    	movq   QWORD PTR [rsp+0x8],xmm4
  014b3:    	mov    rax,QWORD PTR [rbx]
  014b6:    	lea    rdi,[rsp-0x18]
  014bb:    	mov    QWORD PTR [rdi],rax
  014be:    	mov    QWORD PTR [rbx],rdi
  014c1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014ca:    	mov    QWORD PTR [rsp-0x38],rcx
  014cf:    	mov    rax,QWORD PTR [rbp-0x50]
  014d3:    	mov    QWORD PTR [rsp-0x38],rax
  014d8: 00 	mov    rdi,0x1
  014df:    	mov    rax,QWORD PTR [rbp-0x58]
  014e3:    	mov    QWORD PTR [rsp-0x40],rax
  014e8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014f1: 09 	movabs rax,0x90000003a
  014fb:    	mov    QWORD PTR [rsp-0x28],rax
  01500: 3a 	movabs r13,0x563a608e3b20
  0150a:    	call   0xffffbcdc
  0150f:    	lea    rdi,[rbp-0x8]
  01513:    	mov    QWORD PTR [rbx],rdi
  01516:    	movq   xmm3,QWORD PTR [rsp]
  0151b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01521:    	add    rsp,0x10
  01525: 3a 	movabs r13,0x563a608ff900
  0152f:    	test   rax,rax
  01532:    	je     0xfffefd53
  01538:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  0153c:    	sub    rsp,0x10
  01540:    	movq   QWORD PTR [rsp],xmm3
  01545:    	movq   QWORD PTR [rsp+0x8],xmm4
  0154b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0154f:    	mov    rcx,QWORD PTR [rbp-0x40]
  01553:    	mov    r8,QWORD PTR [rbp-0x48]
  01557:    	mov    rdi,rbx
  0155a:    	mov    rsi,r12
  0155d: 3a 	movabs rax,0x563a5fe90860
  01567:    	call   rax
  01569:    	movq   xmm3,QWORD PTR [rsp]
  0156e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01574:    	add    rsp,0x10
  01578: 3a 	movabs r13,0x563a608ff920
  01582:    	test   rax,rax
  01585:    	je     0xfffefd53
:00112 %3 = 1: i32
  0158b: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  01593: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  0159b:    	sub    rsp,0x10
  0159f:    	movq   QWORD PTR [rsp],xmm3
  015a4:    	movq   QWORD PTR [rsp+0x8],xmm4
  015aa:    	mov    rdx,QWORD PTR [rbp-0x30]
  015ae:    	mov    rcx,QWORD PTR [rbp-0x50]
  015b2:    	mov    rdi,rbx
  015b5:    	mov    rsi,r12
  015b8: 3a 	movabs rax,0x563a5fe90750
  015c2:    	call   rax
  015c4:    	movq   xmm3,QWORD PTR [rsp]
  015c9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015cf:    	add    rsp,0x10
  015d3: 3a 	movabs r13,0x563a608ff950
  015dd:    	test   rax,rax
  015e0:    	je     0xfffefd53
  015e6:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  015ea:    	mov    rdi,QWORD PTR [rbp-0x50]
  015ee: 00 	test   rdi,0x7
  015f5:    	jne    0x37c56
  015fb:    	cmp    DWORD PTR [rdi+0x4],0x25
  015ff:    	jne    0x37c56
  01605: 26 	cmp    DWORD PTR [rip+0xffffffffffff1124],0x26        # 0xffff2730
  0160c:    	jne    0x37c56
  01612:    	sub    rsp,0x10
  01616:    	movq   QWORD PTR [rsp],xmm3
  0161b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01621:    	mov    rax,QWORD PTR [rbx]
  01624:    	lea    rdi,[rsp-0x18]
  01629:    	mov    QWORD PTR [rdi],rax
  0162c:    	mov    QWORD PTR [rbx],rdi
  0162f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01638:    	mov    QWORD PTR [rsp-0x38],rcx
  0163d:    	mov    rax,QWORD PTR [rbp-0x50]
  01641:    	mov    QWORD PTR [rsp-0x38],rax
  01646: 00 	mov    rdi,0x0
  0164d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01656: 07 	movabs rax,0x100070000003d
  01660:    	mov    QWORD PTR [rsp-0x28],rax
  01665: 3a 	movabs r13,0x563a608f6640
  0166f:    	call   0xffff3003
  01674:    	lea    rdi,[rbp-0x8]
  01678:    	mov    QWORD PTR [rbx],rdi
  0167b:    	movq   xmm3,QWORD PTR [rsp]
  01680:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01686:    	add    rsp,0x10
  0168a: 3a 	movabs r13,0x563a608ff970
  01694:    	test   rax,rax
  01697:    	je     0xfffefd53
  0169d:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  016a1:    	sub    rsp,0x10
  016a5:    	movq   QWORD PTR [rsp],xmm3
  016aa:    	movq   QWORD PTR [rsp+0x8],xmm4
  016b0:    	mov    rdx,QWORD PTR [rbp-0x30]
  016b4:    	mov    rcx,QWORD PTR [rbp-0x40]
  016b8:    	mov    r8,QWORD PTR [rbp-0x48]
  016bc:    	mov    rdi,rbx
  016bf:    	mov    rsi,r12
  016c2: 3a 	movabs rax,0x563a5fe90860
  016cc:    	call   rax
  016ce:    	movq   xmm3,QWORD PTR [rsp]
  016d3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016d9:    	add    rsp,0x10
  016dd: 3a 	movabs r13,0x563a608ff990
  016e7:    	test   rax,rax
  016ea:    	je     0xfffefd53
:00119 %3 = %4
  016f0:    	mov    rax,QWORD PTR [rbp-0x48]
  016f4:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  016f8:    	mov    rax,QWORD PTR [rbp-0x40]
  016fc:    	leave  
  016fd:    	ret    
:00087 %3 = 0: i32
  016fe: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  01706: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  0170e:    	sub    rsp,0x20
  01712:    	movq   QWORD PTR [rsp],xmm2
  01717:    	movq   QWORD PTR [rsp+0x8],xmm3
  0171d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01723:    	movq   QWORD PTR [rsp+0x18],xmm6
  01729:    	mov    rdx,QWORD PTR [rbp-0x30]
  0172d:    	mov    rcx,QWORD PTR [rbp-0x50]
  01731:    	mov    rdi,rbx
  01734:    	mov    rsi,r12
  01737: 3a 	movabs rax,0x563a5fe90750
  01741:    	call   rax
  01743:    	movq   xmm2,QWORD PTR [rsp]
  01748:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0174e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01754:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0175a:    	add    rsp,0x20
  0175e: 3a 	movabs r13,0x563a608ff7c0
  01768:    	test   rax,rax
  0176b:    	je     0xfffefd53
  01771:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  01775: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  0177d:    	sub    rsp,0x20
  01781:    	movq   QWORD PTR [rsp],xmm3
  01786:    	movq   QWORD PTR [rsp+0x8],xmm4
  0178c:    	movq   QWORD PTR [rsp+0x10],xmm6
  01792:    	mov    rdx,QWORD PTR [rbp-0x30]
  01796:    	mov    rcx,QWORD PTR [rbp-0x58]
  0179a:    	mov    rdi,rbx
  0179d:    	mov    rsi,r12
  017a0: 3a 	movabs rax,0x563a5fe90750
  017aa:    	call   rax
  017ac:    	movq   xmm3,QWORD PTR [rsp]
  017b1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017b7:    	movq   xmm6,QWORD PTR [rsp+0x10]
  017bd:    	add    rsp,0x20
  017c1: 3a 	movabs r13,0x563a608ff7e0
  017cb:    	test   rax,rax
  017ce:    	je     0xfffefd53
  017d4:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  017d8:    	mov    rdi,QWORD PTR [rbp-0x50]
  017dc: 00 	test   rdi,0x7
  017e3:    	jne    0x37cbd
  017e9:    	cmp    DWORD PTR [rdi+0x4],0x25
  017ed:    	jne    0x37cbd
  017f3: 26 	cmp    DWORD PTR [rip+0xffffffffffff0f36],0x26        # 0xffff2730
  017fa:    	jne    0x37cbd
  01800:    	sub    rsp,0x10
  01804:    	movq   QWORD PTR [rsp],xmm3
  01809:    	movq   QWORD PTR [rsp+0x8],xmm4
  0180f:    	mov    rax,QWORD PTR [rbx]
  01812:    	lea    rdi,[rsp-0x18]
  01817:    	mov    QWORD PTR [rdi],rax
  0181a:    	mov    QWORD PTR [rbx],rdi
  0181d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01826:    	mov    QWORD PTR [rsp-0x38],rcx
  0182b:    	mov    rax,QWORD PTR [rbp-0x50]
  0182f:    	mov    QWORD PTR [rsp-0x38],rax
  01834: 00 	mov    rdi,0x1
  0183b:    	mov    rax,QWORD PTR [rbp-0x58]
  0183f:    	mov    QWORD PTR [rsp-0x40],rax
  01844: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0184d: 09 	movabs rax,0x90000003a
  01857:    	mov    QWORD PTR [rsp-0x28],rax
  0185c: 3a 	movabs r13,0x563a608e3b20
  01866:    	call   0xffffbcdc
  0186b:    	lea    rdi,[rbp-0x8]
  0186f:    	mov    QWORD PTR [rbx],rdi
  01872:    	movq   xmm3,QWORD PTR [rsp]
  01877:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0187d:    	add    rsp,0x10
  01881: 3a 	movabs r13,0x563a608ff800
  0188b:    	test   rax,rax
  0188e:    	je     0xfffefd53
  01894:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  01898:    	sub    rsp,0x10
  0189c:    	movq   QWORD PTR [rsp],xmm3
  018a1:    	movq   QWORD PTR [rsp+0x8],xmm4
  018a7:    	mov    rdx,QWORD PTR [rbp-0x30]
  018ab:    	mov    rcx,QWORD PTR [rbp-0x40]
  018af:    	mov    r8,QWORD PTR [rbp-0x48]
  018b3:    	mov    rdi,rbx
  018b6:    	mov    rsi,r12
  018b9: 3a 	movabs rax,0x563a5fe90860
  018c3:    	call   rax
  018c5:    	movq   xmm3,QWORD PTR [rsp]
  018ca:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018d0:    	add    rsp,0x10
  018d4: 3a 	movabs r13,0x563a608ff820
  018de:    	test   rax,rax
  018e1:    	je     0xfffefd53
:00096 %3 = 0: i32
  018e7: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  018ef: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  018f7:    	sub    rsp,0x10
  018fb:    	movq   QWORD PTR [rsp],xmm3
  01900:    	movq   QWORD PTR [rsp+0x8],xmm4
  01906:    	mov    rdx,QWORD PTR [rbp-0x30]
  0190a:    	mov    rcx,QWORD PTR [rbp-0x50]
  0190e:    	mov    rdi,rbx
  01911:    	mov    rsi,r12
  01914: 3a 	movabs rax,0x563a5fe90750
  0191e:    	call   rax
  01920:    	movq   xmm3,QWORD PTR [rsp]
  01925:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0192b:    	add    rsp,0x10
  0192f: 3a 	movabs r13,0x563a608ff850
  01939:    	test   rax,rax
  0193c:    	je     0xfffefd53
  01942:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  01946:    	mov    rdi,QWORD PTR [rbp-0x50]
  0194a: 00 	test   rdi,0x7
  01951:    	jne    0x37ccc
  01957:    	cmp    DWORD PTR [rdi+0x4],0x25
  0195b:    	jne    0x37ccc
  01961: 26 	cmp    DWORD PTR [rip+0xffffffffffff0dc8],0x26        # 0xffff2730
  01968:    	jne    0x37ccc
  0196e:    	sub    rsp,0x10
  01972:    	movq   QWORD PTR [rsp],xmm3
  01977:    	movq   QWORD PTR [rsp+0x8],xmm4
  0197d:    	mov    rax,QWORD PTR [rbx]
  01980:    	lea    rdi,[rsp-0x18]
  01985:    	mov    QWORD PTR [rdi],rax
  01988:    	mov    QWORD PTR [rbx],rdi
  0198b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01994:    	mov    QWORD PTR [rsp-0x38],rcx
  01999:    	mov    rax,QWORD PTR [rbp-0x50]
  0199d:    	mov    QWORD PTR [rsp-0x38],rax
  019a2: 00 	mov    rdi,0x0
  019a9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019b2: 07 	movabs rax,0x100070000003d
  019bc:    	mov    QWORD PTR [rsp-0x28],rax
  019c1: 3a 	movabs r13,0x563a608f6640
  019cb:    	call   0xffff3003
  019d0:    	lea    rdi,[rbp-0x8]
  019d4:    	mov    QWORD PTR [rbx],rdi
  019d7:    	movq   xmm3,QWORD PTR [rsp]
  019dc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019e2:    	add    rsp,0x10
  019e6: 3a 	movabs r13,0x563a608ff870
  019f0:    	test   rax,rax
  019f3:    	je     0xfffefd53
  019f9:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  019fd:    	sub    rsp,0x10
  01a01:    	movq   QWORD PTR [rsp],xmm3
  01a06:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a0c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a10:    	mov    rcx,QWORD PTR [rbp-0x40]
  01a14:    	mov    r8,QWORD PTR [rbp-0x48]
  01a18:    	mov    rdi,rbx
  01a1b:    	mov    rsi,r12
  01a1e: 3a 	movabs rax,0x563a5fe90860
  01a28:    	call   rax
  01a2a:    	movq   xmm3,QWORD PTR [rsp]
  01a2f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a35:    	add    rsp,0x10
  01a39: 3a 	movabs r13,0x563a608ff890
  01a43:    	test   rax,rax
  01a46:    	je     0xfffefd53
:00103 %3 = 1: i32
  01a4c: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  01a54: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  01a5c:    	sub    rsp,0x10
  01a60:    	movq   QWORD PTR [rsp],xmm3
  01a65:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a6b:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a6f:    	mov    rcx,QWORD PTR [rbp-0x50]
  01a73:    	mov    rdi,rbx
  01a76:    	mov    rsi,r12
  01a79: 3a 	movabs rax,0x563a5fe90750
  01a83:    	call   rax
  01a85:    	movq   xmm3,QWORD PTR [rsp]
  01a8a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a90:    	add    rsp,0x10
  01a94: 3a 	movabs r13,0x563a608ff8c0
  01a9e:    	test   rax,rax
  01aa1:    	je     0xfffefd53
  01aa7:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  01aab: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  01ab3:    	sub    rsp,0x10
  01ab7:    	movq   QWORD PTR [rsp],xmm3
  01abc:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ac2:    	mov    rdx,QWORD PTR [rbp-0x30]
  01ac6:    	mov    rcx,QWORD PTR [rbp-0x58]
  01aca:    	mov    rdi,rbx
  01acd:    	mov    rsi,r12
  01ad0: 3a 	movabs rax,0x563a5fe90750
  01ada:    	call   rax
  01adc:    	movq   xmm3,QWORD PTR [rsp]
  01ae1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ae7:    	add    rsp,0x10
  01aeb: 3a 	movabs r13,0x563a608ff8e0
  01af5:    	test   rax,rax
  01af8:    	je     0xfffefd53
  01afe:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  01b02:    	mov    rdi,QWORD PTR [rbp-0x50]
  01b06: 00 	test   rdi,0x7
  01b0d:    	jne    0x37cdb
  01b13:    	cmp    DWORD PTR [rdi+0x4],0x25
  01b17:    	jne    0x37cdb
  01b1d: 26 	cmp    DWORD PTR [rip+0xffffffffffff0c0c],0x26        # 0xffff2730
  01b24:    	jne    0x37cdb
  01b2a:    	sub    rsp,0x10
  01b2e:    	movq   QWORD PTR [rsp],xmm3
  01b33:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b39:    	mov    rax,QWORD PTR [rbx]
  01b3c:    	lea    rdi,[rsp-0x18]
  01b41:    	mov    QWORD PTR [rdi],rax
  01b44:    	mov    QWORD PTR [rbx],rdi
  01b47: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b50:    	mov    QWORD PTR [rsp-0x38],rcx
  01b55:    	mov    rax,QWORD PTR [rbp-0x50]
  01b59:    	mov    QWORD PTR [rsp-0x38],rax
  01b5e: 00 	mov    rdi,0x1
  01b65:    	mov    rax,QWORD PTR [rbp-0x58]
  01b69:    	mov    QWORD PTR [rsp-0x40],rax
  01b6e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b77: 09 	movabs rax,0x90000003a
  01b81:    	mov    QWORD PTR [rsp-0x28],rax
  01b86: 3a 	movabs r13,0x563a608e3b20
  01b90:    	call   0xffffbcdc
  01b95:    	lea    rdi,[rbp-0x8]
  01b99:    	mov    QWORD PTR [rbx],rdi
  01b9c:    	movq   xmm3,QWORD PTR [rsp]
  01ba1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ba7:    	add    rsp,0x10
  01bab: 3a 	movabs r13,0x563a608ff900
  01bb5:    	test   rax,rax
  01bb8:    	je     0xfffefd53
  01bbe:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  01bc2:    	sub    rsp,0x10
  01bc6:    	movq   QWORD PTR [rsp],xmm3
  01bcb:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bd1:    	mov    rdx,QWORD PTR [rbp-0x30]
  01bd5:    	mov    rcx,QWORD PTR [rbp-0x40]
  01bd9:    	mov    r8,QWORD PTR [rbp-0x48]
  01bdd:    	mov    rdi,rbx
  01be0:    	mov    rsi,r12
  01be3: 3a 	movabs rax,0x563a5fe90860
  01bed:    	call   rax
  01bef:    	movq   xmm3,QWORD PTR [rsp]
  01bf4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bfa:    	add    rsp,0x10
  01bfe: 3a 	movabs r13,0x563a608ff920
  01c08:    	test   rax,rax
  01c0b:    	je     0xfffefd53
:00112 %3 = 1: i32
  01c11: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  01c19: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  01c21:    	sub    rsp,0x10
  01c25:    	movq   QWORD PTR [rsp],xmm3
  01c2a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c30:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c34:    	mov    rcx,QWORD PTR [rbp-0x50]
  01c38:    	mov    rdi,rbx
  01c3b:    	mov    rsi,r12
  01c3e: 3a 	movabs rax,0x563a5fe90750
  01c48:    	call   rax
  01c4a:    	movq   xmm3,QWORD PTR [rsp]
  01c4f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c55:    	add    rsp,0x10
  01c59: 3a 	movabs r13,0x563a608ff950
  01c63:    	test   rax,rax
  01c66:    	je     0xfffefd53
  01c6c:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  01c70:    	mov    rdi,QWORD PTR [rbp-0x50]
  01c74: 00 	test   rdi,0x7
  01c7b:    	jne    0x37cea
  01c81:    	cmp    DWORD PTR [rdi+0x4],0x25
  01c85:    	jne    0x37cea
  01c8b: 26 	cmp    DWORD PTR [rip+0xffffffffffff0a9e],0x26        # 0xffff2730
  01c92:    	jne    0x37cea
  01c98:    	sub    rsp,0x10
  01c9c:    	movq   QWORD PTR [rsp],xmm3
  01ca1:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ca7:    	mov    rax,QWORD PTR [rbx]
  01caa:    	lea    rdi,[rsp-0x18]
  01caf:    	mov    QWORD PTR [rdi],rax
  01cb2:    	mov    QWORD PTR [rbx],rdi
  01cb5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01cbe:    	mov    QWORD PTR [rsp-0x38],rcx
  01cc3:    	mov    rax,QWORD PTR [rbp-0x50]
  01cc7:    	mov    QWORD PTR [rsp-0x38],rax
  01ccc: 00 	mov    rdi,0x0
  01cd3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01cdc: 07 	movabs rax,0x100070000003d
  01ce6:    	mov    QWORD PTR [rsp-0x28],rax
  01ceb: 3a 	movabs r13,0x563a608f6640
  01cf5:    	call   0xffff3003
  01cfa:    	lea    rdi,[rbp-0x8]
  01cfe:    	mov    QWORD PTR [rbx],rdi
  01d01:    	movq   xmm3,QWORD PTR [rsp]
  01d06:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d0c:    	add    rsp,0x10
  01d10: 3a 	movabs r13,0x563a608ff970
  01d1a:    	test   rax,rax
  01d1d:    	je     0xfffefd53
  01d23:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  01d27:    	sub    rsp,0x10
  01d2b:    	movq   QWORD PTR [rsp],xmm3
  01d30:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d36:    	mov    rdx,QWORD PTR [rbp-0x30]
  01d3a:    	mov    rcx,QWORD PTR [rbp-0x40]
  01d3e:    	mov    r8,QWORD PTR [rbp-0x48]
  01d42:    	mov    rdi,rbx
  01d45:    	mov    rsi,r12
  01d48: 3a 	movabs rax,0x563a5fe90860
  01d52:    	call   rax
  01d54:    	movq   xmm3,QWORD PTR [rsp]
  01d59:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d5f:    	add    rsp,0x10
  01d63: 3a 	movabs r13,0x563a608ff990
  01d6d:    	test   rax,rax
  01d70:    	je     0xfffefd53
:00119 %3 = %4
  01d76:    	mov    rax,QWORD PTR [rbp-0x48]
  01d7a:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  01d7e:    	mov    rax,QWORD PTR [rbp-0x40]
  01d82:    	leave  
  01d83:    	ret    
