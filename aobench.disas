==> start whole compile: initialize FuncId(61) self_class:Vec start:[00000] bytecode:0x5600b9291a60
<== finished compile. elapsed:8.7µs
offset:Pos(12665) code: 135 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: mov    eax,edx
  0000d: sub    eax,0x3
  00010: jge    0x32
  00016: neg    rdx
  00019: lea    rdx,[rbp+rdx*8-0x30]
  0001e: mov    QWORD PTR [rdx],0x4
  00025: sub    rdx,0x8
  00029: add    eax,0x1
  0002c: jne    0x1e
  00032: mov    QWORD PTR [rbp-0x48],0x4
  0003a: mov    rdi,QWORD PTR [rbp-0x28]
  0003e: test   rdi,0x7
  00045: jne    0x3d3f3
  0004b: cmp    DWORD PTR [rdi+0x4],0x28
  0004f: jne    0x3d3f3
:00000 init reg_num:5 arg_num:3 stack_offset:5
:00001 @x: Vec[IvarId(0)] = %1
  00055: mov    rdi,QWORD PTR [rbp-0x28]
  00059: mov    rax,QWORD PTR [rbp-0x30]
  0005d: mov    QWORD PTR [rdi+0x10],rax
:00002 @y: Vec[IvarId(1)] = %2
  00061: mov    rdi,QWORD PTR [rbp-0x28]
  00065: mov    rax,QWORD PTR [rbp-0x38]
  00069: mov    QWORD PTR [rdi+0x18],rax
:00003 @z: Vec[IvarId(2)] = %3
  0006d: mov    rdi,QWORD PTR [rbp-0x28]
  00071: mov    rax,QWORD PTR [rbp-0x40]
  00075: mov    QWORD PTR [rdi+0x20],rax
:00004 %4 = %3
  00079: mov    rax,QWORD PTR [rbp-0x40]
  0007d: mov    QWORD PTR [rbp-0x48],rax
:00005 ret %4
  00081: mov    rax,QWORD PTR [rbp-0x48]
  00085: leave  
  00086: ret    
==> start whole compile: vdot FuncId(65) self_class:Vec start:[00000] bytecode:0x5600b92d48b0
<== finished compile. elapsed:23.9µs
offset:Pos(14606) code: 1122 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: mov    eax,edx
  0000d: sub    eax,0x1
  00010: jge    0x32
  00016: neg    rdx
  00019: lea    rdx,[rbp+rdx*8-0x30]
  0001e: mov    QWORD PTR [rdx],0x4
  00025: sub    rdx,0x8
  00029: add    eax,0x1
  0002c: jne    0x1e
  00032: mov    rax,0x4
  00039: mov    QWORD PTR [rbp-0x38],rax
  0003d: mov    QWORD PTR [rbp-0x40],rax
  00041: mov    QWORD PTR [rbp-0x48],rax
  00045: mov    rdi,QWORD PTR [rbp-0x28]
  00049: test   rdi,0x7
  00050: jne    0x3cc6d
  00056: cmp    DWORD PTR [rdi+0x4],0x28
  0005a: jne    0x3cc6d
:00000 init reg_num:5 arg_num:1 stack_offset:5
:00001 %2 = @x: Vec[IvarId(0)]
  00060: mov    rdi,QWORD PTR [rbp-0x28]
  00064: mov    rax,QWORD PTR [rdi+0x10]
  00068: mov    QWORD PTR [rbp-0x38],rax
:00002 %3 = %1.call x()                     [Vec]
  0006c: mov    rdi,QWORD PTR [rbp-0x30]
  00070: test   rdi,0x7
  00077: jne    0x3cc7c
  0007d: cmp    DWORD PTR [rdi+0x4],0x28
  00081: jne    0x3cc7c
  00087: cmp    DWORD PTR [rip+0xfffffffffffff1c7],0x26        # 0xfffff255
  0008e: jne    0x3cc7c
  00094: mov    esi,DWORD PTR [rip+0x3cc]        # 0x466
  0009a: cmp    esi,0xffffffff
  0009d: je     0x3cc8b
  000a3: cmp    WORD PTR [rdi+0x2],0x3
  000a8: jne    0xc1
  000ae: cmp    esi,0x6
  000b1: jge    0xc1
  000b7: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000bc: jmp    0xcd
  000c1: movabs rax,0x5600b755dfe0
  000cb: call   rax
  000cd: mov    QWORD PTR [rbp-0x40],rax
:00003 
:00005 %2 = %2 * %3                         [Float][Float]
  000d1: mov    rdi,QWORD PTR [rbp-0x38]
  000d5: test   rdi,0x1
  000dc: jne    0x3ccb4
  000e2: test   rdi,0x2
  000e9: je     0x125
  000ef: xorps  xmm2,xmm2
  000f2: movabs rax,0x8000000000000002
  000fc: cmp    rdi,rax
  000ff: je     0x137
  00105: mov    rax,rdi
  00108: sar    rax,0x3f
  0010c: add    rax,0x2
  00110: and    rdi,0xfffffffffffffffc
  00114: or     rdi,rax
  00117: rol    rdi,0x3d
  0011b: movq   xmm2,rdi
  00120: jmp    0x137
  00125: call   0xffffc766
  0012a: test   rax,rax
  0012d: je     0x3ccb4
  00133: movq   xmm2,xmm0
  00137: mov    rdi,QWORD PTR [rbp-0x40]
  0013b: test   rdi,0x1
  00142: jne    0x3ccc3
  00148: test   rdi,0x2
  0014f: je     0x18b
  00155: xorps  xmm3,xmm3
  00158: movabs rax,0x8000000000000002
  00162: cmp    rdi,rax
  00165: je     0x19d
  0016b: mov    rax,rdi
  0016e: sar    rax,0x3f
  00172: add    rax,0x2
  00176: and    rdi,0xfffffffffffffffc
  0017a: or     rdi,rax
  0017d: rol    rdi,0x3d
  00181: movq   xmm3,rdi
  00186: jmp    0x19d
  0018b: call   0xffffc766
  00190: test   rax,rax
  00193: je     0x3ccc3
  00199: movq   xmm3,xmm0
  0019d: mulsd  xmm2,xmm3
:00006 %3 = @y: Vec[IvarId(1)]
  001a1: mov    rdi,QWORD PTR [rbp-0x28]
  001a5: mov    rax,QWORD PTR [rdi+0x18]
  001a9: mov    QWORD PTR [rbp-0x40],rax
:00007 %4 = %1.call y()                     [Vec]
  001ad: mov    rdi,QWORD PTR [rbp-0x30]
  001b1: test   rdi,0x7
  001b8: jne    0x3ccd2
  001be: cmp    DWORD PTR [rdi+0x4],0x28
  001c2: jne    0x3ccd2
  001c8: cmp    DWORD PTR [rip+0xfffffffffffff086],0x26        # 0xfffff255
  001cf: jne    0x3ccd2
  001d5: mov    esi,DWORD PTR [rip+0x293]        # 0x46e
  001db: cmp    esi,0xffffffff
  001de: je     0x3ccee
  001e4: cmp    WORD PTR [rdi+0x2],0x3
  001e9: jne    0x202
  001ef: cmp    esi,0x6
  001f2: jge    0x202
  001f8: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001fd: jmp    0x220
  00202: sub    rsp,0x10
  00206: movq   QWORD PTR [rsp],xmm2
  0020b: movabs rax,0x5600b755dfe0
  00215: call   rax
  00217: movq   xmm2,QWORD PTR [rsp]
  0021c: add    rsp,0x10
  00220: mov    QWORD PTR [rbp-0x48],rax
:00008 
:00010 %3 = %3 * %4                         [Float][Float]
  00224: mov    rdi,QWORD PTR [rbp-0x40]
  00228: test   rdi,0x1
  0022f: jne    0x3cd29
  00235: test   rdi,0x2
  0023c: je     0x278
  00242: xorps  xmm3,xmm3
  00245: movabs rax,0x8000000000000002
  0024f: cmp    rdi,rax
  00252: je     0x28a
  00258: mov    rax,rdi
  0025b: sar    rax,0x3f
  0025f: add    rax,0x2
  00263: and    rdi,0xfffffffffffffffc
  00267: or     rdi,rax
  0026a: rol    rdi,0x3d
  0026e: movq   xmm3,rdi
  00273: jmp    0x28a
  00278: call   0xffffc766
  0027d: test   rax,rax
  00280: je     0x3cd29
  00286: movq   xmm3,xmm0
  0028a: mov    rdi,QWORD PTR [rbp-0x48]
  0028e: test   rdi,0x1
  00295: jne    0x3cd45
  0029b: test   rdi,0x2
  002a2: je     0x2de
  002a8: xorps  xmm4,xmm4
  002ab: movabs rax,0x8000000000000002
  002b5: cmp    rdi,rax
  002b8: je     0x2f0
  002be: mov    rax,rdi
  002c1: sar    rax,0x3f
  002c5: add    rax,0x2
  002c9: and    rdi,0xfffffffffffffffc
  002cd: or     rdi,rax
  002d0: rol    rdi,0x3d
  002d4: movq   xmm4,rdi
  002d9: jmp    0x2f0
  002de: call   0xffffc766
  002e3: test   rax,rax
  002e6: je     0x3cd45
  002ec: movq   xmm4,xmm0
  002f0: mulsd  xmm3,xmm4
:00011 %2 = %2 + %3                         [Float][Float]
  002f4: addsd  xmm2,xmm3
:00012 %3 = @z: Vec[IvarId(2)]
  002f8: mov    rdi,QWORD PTR [rbp-0x28]
  002fc: mov    rax,QWORD PTR [rdi+0x20]
  00300: mov    QWORD PTR [rbp-0x40],rax
:00013 %4 = %1.call z()                     [Vec]
  00304: mov    rdi,QWORD PTR [rbp-0x30]
  00308: test   rdi,0x7
  0030f: jne    0x3cd61
  00315: cmp    DWORD PTR [rdi+0x4],0x28
  00319: jne    0x3cd61
  0031f: cmp    DWORD PTR [rip+0xffffffffffffef2f],0x26        # 0xfffff255
  00326: jne    0x3cd61
  0032c: mov    esi,DWORD PTR [rip+0x144]        # 0x476
  00332: cmp    esi,0xffffffff
  00335: je     0x3cd7d
  0033b: cmp    WORD PTR [rdi+0x2],0x3
  00340: jne    0x359
  00346: cmp    esi,0x6
  00349: jge    0x359
  0034f: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00354: jmp    0x377
  00359: sub    rsp,0x10
  0035d: movq   QWORD PTR [rsp],xmm2
  00362: movabs rax,0x5600b755dfe0
  0036c: call   rax
  0036e: movq   xmm2,QWORD PTR [rsp]
  00373: add    rsp,0x10
  00377: mov    QWORD PTR [rbp-0x48],rax
:00014 
:00016 %3 = %3 * %4                         [Float][Float]
  0037b: mov    rdi,QWORD PTR [rbp-0x40]
  0037f: test   rdi,0x1
  00386: jne    0x3cdb8
  0038c: test   rdi,0x2
  00393: je     0x3cf
  00399: xorps  xmm3,xmm3
  0039c: movabs rax,0x8000000000000002
  003a6: cmp    rdi,rax
  003a9: je     0x3e1
  003af: mov    rax,rdi
  003b2: sar    rax,0x3f
  003b6: add    rax,0x2
  003ba: and    rdi,0xfffffffffffffffc
  003be: or     rdi,rax
  003c1: rol    rdi,0x3d
  003c5: movq   xmm3,rdi
  003ca: jmp    0x3e1
  003cf: call   0xffffc766
  003d4: test   rax,rax
  003d7: je     0x3cdb8
  003dd: movq   xmm3,xmm0
  003e1: mov    rdi,QWORD PTR [rbp-0x48]
  003e5: test   rdi,0x1
  003ec: jne    0x3cdd4
  003f2: test   rdi,0x2
  003f9: je     0x435
  003ff: xorps  xmm4,xmm4
  00402: movabs rax,0x8000000000000002
  0040c: cmp    rdi,rax
  0040f: je     0x447
  00415: mov    rax,rdi
  00418: sar    rax,0x3f
  0041c: add    rax,0x2
  00420: and    rdi,0xfffffffffffffffc
  00424: or     rdi,rax
  00427: rol    rdi,0x3d
  0042b: movq   xmm4,rdi
  00430: jmp    0x447
  00435: call   0xffffc766
  0043a: test   rax,rax
  0043d: je     0x3cdd4
  00443: movq   xmm4,xmm0
  00447: mulsd  xmm3,xmm4
:00017 %2 = %2 + %3                         [Float][Float]
  0044b: addsd  xmm2,xmm3
:00018 ret %2
  0044f: movq   xmm0,xmm2
  00453: call   0xffffc859
  00458: mov    QWORD PTR [rbp-0x38],rax
  0045c: mov    rax,QWORD PTR [rbp-0x38]
  00460: leave  
  00461: ret    
==> start whole compile: intersect FuncId(69) self_class:Sphere start:[00000] bytecode:0x5600b92b5360
<== finished compile. elapsed:182.9µs
offset:Pos(15898) code: 7312 bytes  data: 398 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x2
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x40],rax
  00040:    	mov    QWORD PTR [rbp-0x48],rax
  00044:    	mov    QWORD PTR [rbp-0x50],rax
  00048:    	mov    QWORD PTR [rbp-0x58],rax
  0004c:    	mov    QWORD PTR [rbp-0x60],rax
  00050:    	mov    QWORD PTR [rbp-0x68],rax
  00054:    	mov    QWORD PTR [rbp-0x70],rax
  00058:    	mov    QWORD PTR [rbp-0x78],rax
  0005c:    	mov    QWORD PTR [rbp-0x80],rax
  00060: ff 	mov    QWORD PTR [rbp-0x88],rax
  00067: ff 	mov    QWORD PTR [rbp-0x90],rax
  0006e: ff 	mov    QWORD PTR [rbp-0x98],rax
  00075: ff 	mov    QWORD PTR [rbp-0xa0],rax
  0007c:    	mov    rdi,QWORD PTR [rbp-0x28]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x3c8e4
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00091:    	jne    0x3c8e4
:00000 init reg_num:16 arg_num:2 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  00097:    	mov    rdi,QWORD PTR [rbp-0x30]
  0009b: 00 	test   rdi,0x7
  000a2:    	jne    0x3c8f3
  000a8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  000ac:    	jne    0x3c8f3
  000b2: 26 	cmp    DWORD PTR [rip+0xffffffffffffec90],0x26        # 0xffffed49
  000b9:    	jne    0x3c8f3
  000bf:    	mov    esi,DWORD PTR [rip+0x1bcf]        # 0x1c94
  000c5:    	cmp    esi,0xffffffff
  000c8:    	je     0x3c902
  000ce:    	cmp    WORD PTR [rdi+0x2],0x3
  000d3:    	jne    0xec
  000d9:    	cmp    esi,0x6
  000dc:    	jge    0xec
  000e2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000e7:    	jmp    0xf8
  000ec: 00 	movabs rax,0x5600b755dfe0
  000f6:    	call   rax
  000f8:    	mov    QWORD PTR [rbp-0x70],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  000fc:    	mov    rdi,QWORD PTR [rbp-0x28]
  00100:    	mov    rax,QWORD PTR [rdi+0x10]
  00104:    	mov    QWORD PTR [rbp-0x78],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  00108:    	mov    rdi,QWORD PTR [rbp-0x70]
  0010c: 00 	test   rdi,0x7
  00113:    	jne    0x3c92b
  00119:    	cmp    DWORD PTR [rdi+0x4],0x28
  0011d:    	jne    0x3c92b
  00123: 26 	cmp    DWORD PTR [rip+0xffffffffffffec1f],0x26        # 0xffffed49
  0012a:    	jne    0x3c92b
  00130:    	mov    rax,QWORD PTR [rbx]
  00133:    	lea    rdi,[rsp-0x18]
  00138:    	mov    QWORD PTR [rdi],rax
  0013b:    	mov    QWORD PTR [rbx],rdi
  0013e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00147:    	mov    QWORD PTR [rsp-0x38],rcx
  0014c:    	mov    rax,QWORD PTR [rbp-0x70]
  00150:    	mov    QWORD PTR [rsp-0x38],rax
  00155: 00 	mov    rdi,0x1
  0015c:    	mov    rax,QWORD PTR [rbp-0x78]
  00160:    	mov    QWORD PTR [rsp-0x40],rax
  00165: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0016e: 08 	movabs rax,0x80000003f
  00178:    	mov    QWORD PTR [rsp-0x28],rax
  0017d: 00 	movabs r13,0x5600b92a1ef0
  00187:    	call   0xfffffa0a
  0018c:    	lea    rdi,[rbp-0x8]
  00190:    	mov    QWORD PTR [rbx],rdi
  00193: 00 	movabs r13,0x5600b92b53d0
  0019d:    	test   rax,rax
  001a0:    	je     0xffffc221
  001a6:    	mov    QWORD PTR [rbp-0x40],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001aa:    	mov    rdi,QWORD PTR [rbp-0x30]
  001ae: 00 	test   rdi,0x7
  001b5:    	jne    0x3c93a
  001bb:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001bf:    	jne    0x3c93a
  001c5: 26 	cmp    DWORD PTR [rip+0xffffffffffffeb7d],0x26        # 0xffffed49
  001cc:    	jne    0x3c93a
  001d2:    	mov    esi,DWORD PTR [rip+0x1ac4]        # 0x1c9c
  001d8:    	cmp    esi,0xffffffff
  001db:    	je     0x3c949
  001e1:    	cmp    WORD PTR [rdi+0x2],0x3
  001e6:    	jne    0x1ff
  001ec:    	cmp    esi,0x6
  001ef:    	jge    0x1ff
  001f5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001fa:    	jmp    0x20b
  001ff: 00 	movabs rax,0x5600b755dfe0
  00209:    	call   rax
  0020b:    	mov    QWORD PTR [rbp-0x70],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  0020f:    	mov    rdi,QWORD PTR [rbp-0x40]
  00213: 00 	test   rdi,0x7
  0021a:    	jne    0x3c972
  00220:    	cmp    DWORD PTR [rdi+0x4],0x28
  00224:    	jne    0x3c972
  0022a: 26 	cmp    DWORD PTR [rip+0xffffffffffffeb18],0x26        # 0xffffed49
  00231:    	jne    0x3c972
  00237:    	mov    rax,QWORD PTR [rbx]
  0023a:    	lea    rdi,[rsp-0x18]
  0023f:    	mov    QWORD PTR [rdi],rax
  00242:    	mov    QWORD PTR [rbx],rdi
  00245: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0024e:    	mov    QWORD PTR [rsp-0x38],rcx
  00253:    	mov    rax,QWORD PTR [rbp-0x40]
  00257:    	mov    QWORD PTR [rsp-0x38],rax
  0025c: 00 	mov    rdi,0x1
  00263:    	mov    rax,QWORD PTR [rbp-0x70]
  00267:    	mov    QWORD PTR [rsp-0x40],rax
  0026c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00275: 05 	movabs rax,0x500000041
  0027f:    	mov    QWORD PTR [rsp-0x28],rax
  00284: 00 	movabs r13,0x5600b92d48b0
  0028e:    	call   0xfffffa9c
  00293:    	lea    rdi,[rbp-0x8]
  00297:    	mov    QWORD PTR [rbx],rdi
  0029a: 00 	movabs r13,0x5600b92b5430
  002a4:    	test   rax,rax
  002a7:    	je     0xffffc221
  002ad:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %10 = %3
  002b1:    	mov    rax,QWORD PTR [rbp-0x40]
  002b5:    	mov    QWORD PTR [rbp-0x78],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002b9:    	mov    rdi,QWORD PTR [rbp-0x40]
  002bd: 00 	test   rdi,0x7
  002c4:    	jne    0x3c981
  002ca:    	cmp    DWORD PTR [rdi+0x4],0x28
  002ce:    	jne    0x3c981
  002d4: 26 	cmp    DWORD PTR [rip+0xffffffffffffea6e],0x26        # 0xffffed49
  002db:    	jne    0x3c981
  002e1:    	mov    rax,QWORD PTR [rbx]
  002e4:    	lea    rdi,[rsp-0x18]
  002e9:    	mov    QWORD PTR [rdi],rax
  002ec:    	mov    QWORD PTR [rbx],rdi
  002ef: 00 	mov    QWORD PTR [rsp-0x20],0x0
  002f8:    	mov    QWORD PTR [rsp-0x38],rcx
  002fd:    	mov    rax,QWORD PTR [rbp-0x40]
  00301:    	mov    QWORD PTR [rsp-0x38],rax
  00306: 00 	mov    rdi,0x1
  0030d:    	mov    rax,QWORD PTR [rbp-0x78]
  00311:    	mov    QWORD PTR [rsp-0x40],rax
  00316: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0031f: 05 	movabs rax,0x500000041
  00329:    	mov    QWORD PTR [rsp-0x28],rax
  0032e: 00 	movabs r13,0x5600b92d48b0
  00338:    	call   0xfffffa9c
  0033d:    	lea    rdi,[rbp-0x8]
  00341:    	mov    QWORD PTR [rbx],rdi
  00344: 00 	movabs r13,0x5600b92b5470
  0034e:    	test   rax,rax
  00351:    	je     0xffffc221
  00357:    	mov    QWORD PTR [rbp-0x70],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  0035b:    	mov    rdi,QWORD PTR [rbp-0x28]
  0035f:    	mov    rax,QWORD PTR [rdi+0x18]
  00363:    	mov    QWORD PTR [rbp-0x78],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00367:    	mov    rdi,QWORD PTR [rbp-0x28]
  0036b:    	mov    rax,QWORD PTR [rdi+0x18]
  0036f:    	mov    QWORD PTR [rbp-0x80],rax
:00020 %10 = %10 * %11                      [Float][Float]
  00373:    	mov    rdi,QWORD PTR [rbp-0x78]
  00377: 00 	test   rdi,0x1
  0037e:    	jne    0x3c990
  00384: 00 	test   rdi,0x2
  0038b:    	je     0x3c7
  00391:    	xorps  xmm2,xmm2
  00394: 00 	movabs rax,0x8000000000000002
  0039e:    	cmp    rdi,rax
  003a1:    	je     0x3d9
  003a7:    	mov    rax,rdi
  003aa:    	sar    rax,0x3f
  003ae:    	add    rax,0x2
  003b2:    	and    rdi,0xfffffffffffffffc
  003b6:    	or     rdi,rax
  003b9:    	rol    rdi,0x3d
  003bd:    	movq   xmm2,rdi
  003c2:    	jmp    0x3d9
  003c7:    	call   0xffffc25a
  003cc:    	test   rax,rax
  003cf:    	je     0x3c990
  003d5:    	movq   xmm2,xmm0
  003d9:    	mov    rdi,QWORD PTR [rbp-0x80]
  003dd: 00 	test   rdi,0x1
  003e4:    	jne    0x3c99f
  003ea: 00 	test   rdi,0x2
  003f1:    	je     0x42d
  003f7:    	xorps  xmm3,xmm3
  003fa: 00 	movabs rax,0x8000000000000002
  00404:    	cmp    rdi,rax
  00407:    	je     0x43f
  0040d:    	mov    rax,rdi
  00410:    	sar    rax,0x3f
  00414:    	add    rax,0x2
  00418:    	and    rdi,0xfffffffffffffffc
  0041c:    	or     rdi,rax
  0041f:    	rol    rdi,0x3d
  00423:    	movq   xmm3,rdi
  00428:    	jmp    0x43f
  0042d:    	call   0xffffc25a
  00432:    	test   rax,rax
  00435:    	je     0x3c99f
  0043b:    	movq   xmm3,xmm0
  0043f:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00443:    	mov    rdi,QWORD PTR [rbp-0x70]
  00447: 00 	test   rdi,0x1
  0044e:    	jne    0x3c9ae
  00454: 00 	test   rdi,0x2
  0045b:    	je     0x497
  00461:    	xorps  xmm4,xmm4
  00464: 00 	movabs rax,0x8000000000000002
  0046e:    	cmp    rdi,rax
  00471:    	je     0x4a9
  00477:    	mov    rax,rdi
  0047a:    	sar    rax,0x3f
  0047e:    	add    rax,0x2
  00482:    	and    rdi,0xfffffffffffffffc
  00486:    	or     rdi,rax
  00489:    	rol    rdi,0x3d
  0048d:    	movq   xmm4,rdi
  00492:    	jmp    0x4a9
  00497:    	call   0xffffc25a
  0049c:    	test   rax,rax
  0049f:    	je     0x3c9ae
  004a5:    	movq   xmm4,xmm0
  004a9:    	movq   xmm5,xmm4
  004ad:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004b1:    	mov    rdi,QWORD PTR [rbp-0x48]
  004b5: 00 	test   rdi,0x1
  004bc:    	jne    0x3c9ca
  004c2: 00 	test   rdi,0x2
  004c9:    	je     0x505
  004cf:    	xorps  xmm6,xmm6
  004d2: 00 	movabs rax,0x8000000000000002
  004dc:    	cmp    rdi,rax
  004df:    	je     0x517
  004e5:    	mov    rax,rdi
  004e8:    	sar    rax,0x3f
  004ec:    	add    rax,0x2
  004f0:    	and    rdi,0xfffffffffffffffc
  004f4:    	or     rdi,rax
  004f7:    	rol    rdi,0x3d
  004fb:    	movq   xmm6,rdi
  00500:    	jmp    0x517
  00505:    	call   0xffffc25a
  0050a:    	test   rax,rax
  0050d:    	je     0x3c9ca
  00513:    	movq   xmm6,xmm0
  00517:    	movq   xmm4,xmm6
  0051b:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  0051f:    	movq   xmm7,xmm4
  00523:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00527: 00 	movq   xmm4,QWORD PTR [rip+0x1777]        # 0x1ca6
  0052f: 00 	movabs rax,0x8000000000000002
  00539:    	mov    QWORD PTR [rbp-0x70],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0053d:    	ucomisd xmm7,xmm4
  00541:    	jbe    0x3dfa6
:00027 %9 = %4
:00028 %9 = neg %9                          [<INVALID>]
  00547: 01 	sub    DWORD PTR [rip+0x1760],0x1        # 0x1cae
  0054e:    	je     0x3ca36
  00554:    	movq   xmm0,xmm6
  00558:    	call   0xffffc34d
  0055d:    	mov    QWORD PTR [rbp-0x70],rax
  00561:    	sub    rsp,0x30
  00565:    	movq   QWORD PTR [rsp],xmm2
  0056a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00570:    	movq   QWORD PTR [rsp+0x10],xmm5
  00576:    	movq   QWORD PTR [rsp+0x18],xmm6
  0057c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00582:    	mov    rdi,QWORD PTR [rbp-0x70]
  00586:    	mov    rdx,rdi
  00589:    	mov    rdi,rbx
  0058c:    	mov    rsi,r12
  0058f: 00 	movabs rax,0x5600b7596530
  00599:    	call   rax
  0059b:    	movq   xmm2,QWORD PTR [rsp]
  005a0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005a6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005ac:    	movq   xmm6,QWORD PTR [rsp+0x18]
  005b2:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005b8:    	add    rsp,0x30
  005bc: 00 	movabs r13,0x5600b92b5530
  005c6:    	test   rax,rax
  005c9:    	je     0xffffc221
  005cf:    	mov    QWORD PTR [rbp-0x70],rax
:00029 %11 = const[Math]                    [<INVALID>]
  005d3: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe77c]        # 0xffffed56
  005da: 00 	cmp    rax,QWORD PTR [rip+0x16e5]        # 0x1cc6
  005e1:    	jne    0x3ca58
  005e7: 00 	mov    rax,QWORD PTR [rip+0x16c8]        # 0x1cb6
  005ee:    	mov    QWORD PTR [rbp-0x80],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [<INVALID>]
  005f2: 01 	sub    DWORD PTR [rip+0x16d5],0x1        # 0x1cce
  005f9:    	je     0x3cb11
  005ff:    	movq   xmm0,xmm7
  00603:    	call   0xffffc34d
  00608: ff 	mov    QWORD PTR [rbp-0x88],rax
  0060f:    	sub    rsp,0x20
  00613:    	movq   QWORD PTR [rsp],xmm5
  00618:    	movq   QWORD PTR [rsp+0x8],xmm6
  0061e:    	movq   QWORD PTR [rsp+0x10],xmm7
  00624:    	mov    rdi,QWORD PTR [rbp-0x80]
  00628: 00 	movabs rax,0x5600b75a2280
  00632:    	call   rax
  00634:    	mov    r15d,eax
  00637: 00 	cmp    r15d,DWORD PTR [rip+0x1698]        # 0x1cd6
  0063e:    	jne    0x3cb33
  00644:    	mov    eax,DWORD PTR [rip+0xffffffffffffe6ff]        # 0xffffed49
  0064a:    	cmp    DWORD PTR [rip+0x1682],eax        # 0x1cd2
  00650:    	jne    0x3cb33
  00656:    	mov    rax,QWORD PTR [rbx]
  00659:    	lea    rdi,[rsp-0x18]
  0065e:    	mov    QWORD PTR [rdi],rax
  00661:    	mov    QWORD PTR [rbx],rdi
  00664: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0066d:    	mov    QWORD PTR [rsp-0x38],rcx
  00672:    	mov    rax,QWORD PTR [rbp-0x80]
  00676:    	mov    QWORD PTR [rsp-0x38],rax
  0067b: 00 	mov    rdi,0x1
  00682: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00689:    	mov    QWORD PTR [rsp-0x40],rax
  0068e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00697: 00 	movabs rax,0x0
  006a1:    	mov    QWORD PTR [rsp-0x28],rax
  006a6: 00 	movabs r13,0x0
  006b0:    	call   0xffffc1e6
  006b5:    	lea    rdi,[rbp-0x8]
  006b9:    	mov    QWORD PTR [rbx],rdi
  006bc:    	movq   xmm5,QWORD PTR [rsp]
  006c1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  006c7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  006cd:    	add    rsp,0x20
  006d1:    	test   rax,rax
  006d4:    	je     0x3cb9f
  006da:    	mov    QWORD PTR [rbp-0x78],rax
:00032 
:00034 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  006de: 01 	sub    DWORD PTR [rip+0x15f5],0x1        # 0x1cda
  006e5:    	je     0x3cbd7
  006eb:    	mov    rdi,QWORD PTR [rbp-0x70]
  006ef:    	mov    rsi,QWORD PTR [rbp-0x78]
  006f3:    	sub    rsp,0x20
  006f7:    	movq   QWORD PTR [rsp],xmm5
  006fc:    	movq   QWORD PTR [rsp+0x8],xmm6
  00702:    	movq   QWORD PTR [rsp+0x10],xmm7
  00708:    	mov    rdx,rdi
  0070b:    	mov    rcx,rsi
  0070e:    	mov    rdi,rbx
  00711:    	mov    rsi,r12
  00714: 00 	movabs rax,0x5600b7598000
  0071e:    	call   rax
  00720:    	movq   xmm5,QWORD PTR [rsp]
  00725:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0072b:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00731:    	add    rsp,0x20
  00735: 00 	movabs r13,0x5600b92b5590
  0073f:    	test   rax,rax
  00742:    	je     0xffffc221
  00748:    	mov    QWORD PTR [rbp-0x60],rax
:00035 %9 = literal[0.0]
  0074c: 00 	movq   xmm2,QWORD PTR [rip+0x1592]        # 0x1ce6
  00754: 00 	movabs rax,0x8000000000000002
  0075e:    	mov    QWORD PTR [rbp-0x70],rax
:00036 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
:00037 condnotbr _%9 =>:00113
  00762:    	mov    rdi,QWORD PTR [rbp-0x60]
  00766:    	mov    rsi,QWORD PTR [rbp-0x70]
  0076a: 00 	test   rdi,0x1
  00771:    	je     0x3cbf9
  00777: 00 	test   rsi,0x1
  0077e:    	je     0x3cbf9
  00784:    	cmp    rdi,rsi
  00787:    	jle    0x3df0d
:00038 %9 = %2.call t()                     [<INVALID>]
  0078d: 01 	sub    DWORD PTR [rip+0x155a],0x1        # 0x1cee
  00794:    	je     0x3cc6b
  0079a:    	sub    rsp,0x20
  0079e:    	movq   QWORD PTR [rsp],xmm5
  007a3:    	movq   QWORD PTR [rsp+0x8],xmm6
  007a9:    	movq   QWORD PTR [rsp+0x10],xmm7
  007af:    	mov    rdi,QWORD PTR [rbp-0x38]
  007b3: 00 	movabs rax,0x5600b75a2280
  007bd:    	call   rax
  007bf:    	mov    r15d,eax
  007c2: 00 	cmp    r15d,DWORD PTR [rip+0x152d]        # 0x1cf6
  007c9:    	jne    0x3cc8d
  007cf:    	mov    eax,DWORD PTR [rip+0xffffffffffffe574]        # 0xffffed49
  007d5:    	cmp    DWORD PTR [rip+0x1517],eax        # 0x1cf2
  007db:    	jne    0x3cc8d
  007e1:    	mov    rax,QWORD PTR [rbx]
  007e4:    	lea    rdi,[rsp-0x18]
  007e9:    	mov    QWORD PTR [rdi],rax
  007ec:    	mov    QWORD PTR [rbx],rdi
  007ef: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007f8:    	mov    QWORD PTR [rsp-0x38],rcx
  007fd:    	mov    rax,QWORD PTR [rbp-0x38]
  00801:    	mov    QWORD PTR [rsp-0x38],rax
  00806: 00 	mov    rdi,0x0
  0080d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00816: 00 	movabs rax,0x0
  00820:    	mov    QWORD PTR [rsp-0x28],rax
  00825: 00 	movabs r13,0x0
  0082f:    	call   0xffffc1e6
  00834:    	lea    rdi,[rbp-0x8]
  00838:    	mov    QWORD PTR [rbx],rdi
  0083b:    	movq   xmm5,QWORD PTR [rsp]
  00840:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00846:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0084c:    	add    rsp,0x20
  00850:    	test   rax,rax
  00853:    	je     0x3ccf9
  00859:    	mov    QWORD PTR [rbp-0x70],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  0085d:    	mov    rdi,QWORD PTR [rbp-0x60]
  00861:    	mov    rsi,QWORD PTR [rbp-0x70]
  00865: 00 	test   rdi,0x1
  0086c:    	je     0x3cd08
  00872: 00 	test   rsi,0x1
  00879:    	je     0x3cd08
  0087f:    	cmp    rdi,rsi
  00882:    	jge    0x3df40
:00043 _ = %2.call t=(%7; 1)                [<INVALID>]
  00888: 01 	sub    DWORD PTR [rip+0x146b],0x1        # 0x1cfa
  0088f:    	je     0x3cd7a
  00895:    	sub    rsp,0x20
  00899:    	movq   QWORD PTR [rsp],xmm5
  0089e:    	movq   QWORD PTR [rsp+0x8],xmm6
  008a4:    	movq   QWORD PTR [rsp+0x10],xmm7
  008aa:    	mov    rdi,QWORD PTR [rbp-0x38]
  008ae: 00 	movabs rax,0x5600b75a2280
  008b8:    	call   rax
  008ba:    	mov    r15d,eax
  008bd: 00 	cmp    r15d,DWORD PTR [rip+0x143e]        # 0x1d02
  008c4:    	jne    0x3cd9c
  008ca:    	mov    eax,DWORD PTR [rip+0xffffffffffffe479]        # 0xffffed49
  008d0:    	cmp    DWORD PTR [rip+0x1428],eax        # 0x1cfe
  008d6:    	jne    0x3cd9c
  008dc:    	mov    rax,QWORD PTR [rbx]
  008df:    	lea    rdi,[rsp-0x18]
  008e4:    	mov    QWORD PTR [rdi],rax
  008e7:    	mov    QWORD PTR [rbx],rdi
  008ea: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008f3:    	mov    QWORD PTR [rsp-0x38],rcx
  008f8:    	mov    rax,QWORD PTR [rbp-0x38]
  008fc:    	mov    QWORD PTR [rsp-0x38],rax
  00901: 00 	mov    rdi,0x1
  00908:    	mov    rax,QWORD PTR [rbp-0x60]
  0090c:    	mov    QWORD PTR [rsp-0x40],rax
  00911: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0091a: 00 	movabs rax,0x0
  00924:    	mov    QWORD PTR [rsp-0x28],rax
  00929: 00 	movabs r13,0x0
  00933:    	call   0xffffc1e6
  00938:    	lea    rdi,[rbp-0x8]
  0093c:    	mov    QWORD PTR [rbx],rdi
  0093f:    	movq   xmm5,QWORD PTR [rsp]
  00944:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0094a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00950:    	add    rsp,0x20
  00954:    	test   rax,rax
  00957:    	je     0x3ce08
:00044 
:00046 %9 = literal[true]
  0095d: 00 	mov    rax,0x1c
  00964:    	mov    QWORD PTR [rbp-0x70],rax
:00047 _ = %2.call hit=(%9; 1)              [<INVALID>]
  00968: 01 	sub    DWORD PTR [rip+0x1397],0x1        # 0x1d06
  0096f:    	je     0x3ce40
  00975:    	sub    rsp,0x20
  00979:    	movq   QWORD PTR [rsp],xmm5
  0097e:    	movq   QWORD PTR [rsp+0x8],xmm6
  00984:    	movq   QWORD PTR [rsp+0x10],xmm7
  0098a:    	mov    rdi,QWORD PTR [rbp-0x38]
  0098e: 00 	movabs rax,0x5600b75a2280
  00998:    	call   rax
  0099a:    	mov    r15d,eax
  0099d: 00 	cmp    r15d,DWORD PTR [rip+0x136a]        # 0x1d0e
  009a4:    	jne    0x3ce62
  009aa:    	mov    eax,DWORD PTR [rip+0xffffffffffffe399]        # 0xffffed49
  009b0:    	cmp    DWORD PTR [rip+0x1354],eax        # 0x1d0a
  009b6:    	jne    0x3ce62
  009bc:    	mov    rax,QWORD PTR [rbx]
  009bf:    	lea    rdi,[rsp-0x18]
  009c4:    	mov    QWORD PTR [rdi],rax
  009c7:    	mov    QWORD PTR [rbx],rdi
  009ca: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009d3:    	mov    QWORD PTR [rsp-0x38],rcx
  009d8:    	mov    rax,QWORD PTR [rbp-0x38]
  009dc:    	mov    QWORD PTR [rsp-0x38],rax
  009e1: 00 	mov    rdi,0x1
  009e8:    	mov    rax,QWORD PTR [rbp-0x70]
  009ec:    	mov    QWORD PTR [rsp-0x40],rax
  009f1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  009fa: 00 	movabs rax,0x0
  00a04:    	mov    QWORD PTR [rsp-0x28],rax
  00a09: 00 	movabs r13,0x0
  00a13:    	call   0xffffc1e6
  00a18:    	lea    rdi,[rbp-0x8]
  00a1c:    	mov    QWORD PTR [rbx],rdi
  00a1f:    	movq   xmm5,QWORD PTR [rsp]
  00a24:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00a2a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00a30:    	add    rsp,0x20
  00a34:    	test   rax,rax
  00a37:    	je     0x3cece
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  00a3d: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe312]        # 0xffffed56
  00a44: 00 	cmp    rax,QWORD PTR [rip+0x12db]        # 0x1d26
  00a4b:    	jne    0x3cedd
  00a51: 00 	mov    rax,QWORD PTR [rip+0x12be]        # 0x1d16
  00a58:    	mov    QWORD PTR [rbp-0x78],rax
:00051 %12 = %1.call org()                  [<INVALID>]
  00a5c: 01 	sub    DWORD PTR [rip+0x12cb],0x1        # 0x1d2e
  00a63:    	je     0x3cf76
  00a69:    	sub    rsp,0x20
  00a6d:    	movq   QWORD PTR [rsp],xmm5
  00a72:    	movq   QWORD PTR [rsp+0x8],xmm6
  00a78:    	movq   QWORD PTR [rsp+0x10],xmm7
  00a7e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00a82: 00 	movabs rax,0x5600b75a2280
  00a8c:    	call   rax
  00a8e:    	mov    r15d,eax
  00a91: 00 	cmp    r15d,DWORD PTR [rip+0x129e]        # 0x1d36
  00a98:    	jne    0x3cf98
  00a9e:    	mov    eax,DWORD PTR [rip+0xffffffffffffe2a5]        # 0xffffed49
  00aa4:    	cmp    DWORD PTR [rip+0x1288],eax        # 0x1d32
  00aaa:    	jne    0x3cf98
  00ab0:    	mov    rax,QWORD PTR [rbx]
  00ab3:    	lea    rdi,[rsp-0x18]
  00ab8:    	mov    QWORD PTR [rdi],rax
  00abb:    	mov    QWORD PTR [rbx],rdi
  00abe: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ac7:    	mov    QWORD PTR [rsp-0x38],rcx
  00acc:    	mov    rax,QWORD PTR [rbp-0x30]
  00ad0:    	mov    QWORD PTR [rsp-0x38],rax
  00ad5: 00 	mov    rdi,0x0
  00adc: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ae5: 00 	movabs rax,0x0
  00aef:    	mov    QWORD PTR [rsp-0x28],rax
  00af4: 00 	movabs r13,0x0
  00afe:    	call   0xffffc1e6
  00b03:    	lea    rdi,[rbp-0x8]
  00b07:    	mov    QWORD PTR [rbx],rdi
  00b0a:    	movq   xmm5,QWORD PTR [rsp]
  00b0f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00b15:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00b1b:    	add    rsp,0x20
  00b1f:    	test   rax,rax
  00b22:    	je     0x3d004
  00b28: ff 	mov    QWORD PTR [rbp-0x88],rax
:00052 
:00054 %11 = %12.call x()                   [<INVALID>]
  00b2f: 01 	sub    DWORD PTR [rip+0x1204],0x1        # 0x1d3a
  00b36:    	je     0x3d03c
  00b3c:    	sub    rsp,0x20
  00b40:    	movq   QWORD PTR [rsp],xmm5
  00b45:    	movq   QWORD PTR [rsp+0x8],xmm6
  00b4b:    	movq   QWORD PTR [rsp+0x10],xmm7
  00b51: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00b58: 00 	movabs rax,0x5600b75a2280
  00b62:    	call   rax
  00b64:    	mov    r15d,eax
  00b67: 00 	cmp    r15d,DWORD PTR [rip+0x11d4]        # 0x1d42
  00b6e:    	jne    0x3d05e
  00b74:    	mov    eax,DWORD PTR [rip+0xffffffffffffe1cf]        # 0xffffed49
  00b7a:    	cmp    DWORD PTR [rip+0x11be],eax        # 0x1d3e
  00b80:    	jne    0x3d05e
  00b86:    	mov    rax,QWORD PTR [rbx]
  00b89:    	lea    rdi,[rsp-0x18]
  00b8e:    	mov    QWORD PTR [rdi],rax
  00b91:    	mov    QWORD PTR [rbx],rdi
  00b94: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b9d:    	mov    QWORD PTR [rsp-0x38],rcx
  00ba2: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00ba9:    	mov    QWORD PTR [rsp-0x38],rax
  00bae: 00 	mov    rdi,0x0
  00bb5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00bbe: 00 	movabs rax,0x0
  00bc8:    	mov    QWORD PTR [rsp-0x28],rax
  00bcd: 00 	movabs r13,0x0
  00bd7:    	call   0xffffc1e6
  00bdc:    	lea    rdi,[rbp-0x8]
  00be0:    	mov    QWORD PTR [rbx],rdi
  00be3:    	movq   xmm5,QWORD PTR [rsp]
  00be8:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00bee:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00bf4:    	add    rsp,0x20
  00bf8:    	test   rax,rax
  00bfb:    	je     0x3d0cd
  00c01:    	mov    QWORD PTR [rbp-0x80],rax
:00055 
:00057 %13 = %1.call dir()                  [<INVALID>]
  00c05: 01 	sub    DWORD PTR [rip+0x113a],0x1        # 0x1d46
  00c0c:    	je     0x3d105
  00c12:    	sub    rsp,0x20
  00c16:    	movq   QWORD PTR [rsp],xmm5
  00c1b:    	movq   QWORD PTR [rsp+0x8],xmm6
  00c21:    	movq   QWORD PTR [rsp+0x10],xmm7
  00c27:    	mov    rdi,QWORD PTR [rbp-0x30]
  00c2b: 00 	movabs rax,0x5600b75a2280
  00c35:    	call   rax
  00c37:    	mov    r15d,eax
  00c3a: 00 	cmp    r15d,DWORD PTR [rip+0x110d]        # 0x1d4e
  00c41:    	jne    0x3d127
  00c47:    	mov    eax,DWORD PTR [rip+0xffffffffffffe0fc]        # 0xffffed49
  00c4d:    	cmp    DWORD PTR [rip+0x10f7],eax        # 0x1d4a
  00c53:    	jne    0x3d127
  00c59:    	mov    rax,QWORD PTR [rbx]
  00c5c:    	lea    rdi,[rsp-0x18]
  00c61:    	mov    QWORD PTR [rdi],rax
  00c64:    	mov    QWORD PTR [rbx],rdi
  00c67: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c70:    	mov    QWORD PTR [rsp-0x38],rcx
  00c75:    	mov    rax,QWORD PTR [rbp-0x30]
  00c79:    	mov    QWORD PTR [rsp-0x38],rax
  00c7e: 00 	mov    rdi,0x0
  00c85: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c8e: 00 	movabs rax,0x0
  00c98:    	mov    QWORD PTR [rsp-0x28],rax
  00c9d: 00 	movabs r13,0x0
  00ca7:    	call   0xffffc1e6
  00cac:    	lea    rdi,[rbp-0x8]
  00cb0:    	mov    QWORD PTR [rbx],rdi
  00cb3:    	movq   xmm5,QWORD PTR [rsp]
  00cb8:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00cbe:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00cc4:    	add    rsp,0x20
  00cc8:    	test   rax,rax
  00ccb:    	je     0x3d193
  00cd1: ff 	mov    QWORD PTR [rbp-0x90],rax
:00058 
:00060 %12 = %13.call x()                   [<INVALID>]
  00cd8: 01 	sub    DWORD PTR [rip+0x1073],0x1        # 0x1d52
  00cdf:    	je     0x3d1cb
  00ce5:    	sub    rsp,0x20
  00ce9:    	movq   QWORD PTR [rsp],xmm5
  00cee:    	movq   QWORD PTR [rsp+0x8],xmm6
  00cf4:    	movq   QWORD PTR [rsp+0x10],xmm7
  00cfa: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00d01: 00 	movabs rax,0x5600b75a2280
  00d0b:    	call   rax
  00d0d:    	mov    r15d,eax
  00d10: 00 	cmp    r15d,DWORD PTR [rip+0x1043]        # 0x1d5a
  00d17:    	jne    0x3d1ed
  00d1d:    	mov    eax,DWORD PTR [rip+0xffffffffffffe026]        # 0xffffed49
  00d23:    	cmp    DWORD PTR [rip+0x102d],eax        # 0x1d56
  00d29:    	jne    0x3d1ed
  00d2f:    	mov    rax,QWORD PTR [rbx]
  00d32:    	lea    rdi,[rsp-0x18]
  00d37:    	mov    QWORD PTR [rdi],rax
  00d3a:    	mov    QWORD PTR [rbx],rdi
  00d3d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d46:    	mov    QWORD PTR [rsp-0x38],rcx
  00d4b: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00d52:    	mov    QWORD PTR [rsp-0x38],rax
  00d57: 00 	mov    rdi,0x0
  00d5e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d67: 00 	movabs rax,0x0
  00d71:    	mov    QWORD PTR [rsp-0x28],rax
  00d76: 00 	movabs r13,0x0
  00d80:    	call   0xffffc1e6
  00d85:    	lea    rdi,[rbp-0x8]
  00d89:    	mov    QWORD PTR [rbx],rdi
  00d8c:    	movq   xmm5,QWORD PTR [rsp]
  00d91:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00d97:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00d9d:    	add    rsp,0x20
  00da1:    	test   rax,rax
  00da4:    	je     0x3d25c
  00daa: ff 	mov    QWORD PTR [rbp-0x88],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00db1: 01 	sub    DWORD PTR [rip+0xfa6],0x1        # 0x1d5e
  00db8:    	je     0x3d294
  00dbe: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00dc5:    	mov    rsi,QWORD PTR [rbp-0x60]
  00dc9:    	sub    rsp,0x20
  00dcd:    	movq   QWORD PTR [rsp],xmm5
  00dd2:    	movq   QWORD PTR [rsp+0x8],xmm6
  00dd8:    	movq   QWORD PTR [rsp+0x10],xmm7
  00dde:    	mov    rdx,rdi
  00de1:    	mov    rcx,rsi
  00de4:    	mov    rdi,rbx
  00de7:    	mov    rsi,r12
  00dea: 00 	movabs rax,0x5600b7598f60
  00df4:    	call   rax
  00df6:    	movq   xmm5,QWORD PTR [rsp]
  00dfb:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00e01:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00e07:    	add    rsp,0x20
  00e0b: 00 	movabs r13,0x5600b92b5760
  00e15:    	test   rax,rax
  00e18:    	je     0xffffc221
  00e1e: ff 	mov    QWORD PTR [rbp-0x88],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00e25: 01 	sub    DWORD PTR [rip+0xf36],0x1        # 0x1d62
  00e2c:    	je     0x3d2df
  00e32:    	mov    rdi,QWORD PTR [rbp-0x80]
  00e36: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  00e3d:    	sub    rsp,0x20
  00e41:    	movq   QWORD PTR [rsp],xmm5
  00e46:    	movq   QWORD PTR [rsp+0x8],xmm6
  00e4c:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e52:    	mov    rdx,rdi
  00e55:    	mov    rcx,rsi
  00e58:    	mov    rdi,rbx
  00e5b:    	mov    rsi,r12
  00e5e: 00 	movabs rax,0x5600b75970e0
  00e68:    	call   rax
  00e6a:    	movq   xmm5,QWORD PTR [rsp]
  00e6f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00e75:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00e7b:    	add    rsp,0x20
  00e7f: 00 	movabs r13,0x5600b92b5770
  00e89:    	test   rax,rax
  00e8c:    	je     0xffffc221
  00e92:    	mov    QWORD PTR [rbp-0x80],rax
:00065 %13 = %1.call org()                  [<INVALID>]
  00e96: 01 	sub    DWORD PTR [rip+0xec9],0x1        # 0x1d66
  00e9d:    	je     0x3d32a
  00ea3:    	sub    rsp,0x20
  00ea7:    	movq   QWORD PTR [rsp],xmm5
  00eac:    	movq   QWORD PTR [rsp+0x8],xmm6
  00eb2:    	movq   QWORD PTR [rsp+0x10],xmm7
  00eb8:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ebc: 00 	movabs rax,0x5600b75a2280
  00ec6:    	call   rax
  00ec8:    	mov    r15d,eax
  00ecb: 00 	cmp    r15d,DWORD PTR [rip+0xe9c]        # 0x1d6e
  00ed2:    	jne    0x3d34c
  00ed8:    	mov    eax,DWORD PTR [rip+0xffffffffffffde6b]        # 0xffffed49
  00ede:    	cmp    DWORD PTR [rip+0xe86],eax        # 0x1d6a
  00ee4:    	jne    0x3d34c
  00eea:    	mov    rax,QWORD PTR [rbx]
  00eed:    	lea    rdi,[rsp-0x18]
  00ef2:    	mov    QWORD PTR [rdi],rax
  00ef5:    	mov    QWORD PTR [rbx],rdi
  00ef8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f01:    	mov    QWORD PTR [rsp-0x38],rcx
  00f06:    	mov    rax,QWORD PTR [rbp-0x30]
  00f0a:    	mov    QWORD PTR [rsp-0x38],rax
  00f0f: 00 	mov    rdi,0x0
  00f16: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f1f: 00 	movabs rax,0x0
  00f29:    	mov    QWORD PTR [rsp-0x28],rax
  00f2e: 00 	movabs r13,0x0
  00f38:    	call   0xffffc1e6
  00f3d:    	lea    rdi,[rbp-0x8]
  00f41:    	mov    QWORD PTR [rbx],rdi
  00f44:    	movq   xmm5,QWORD PTR [rsp]
  00f49:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00f4f:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00f55:    	add    rsp,0x20
  00f59:    	test   rax,rax
  00f5c:    	je     0x3d3b8
  00f62: ff 	mov    QWORD PTR [rbp-0x90],rax
:00066 
:00068 %12 = %13.call y()                   [<INVALID>]
  00f69: 01 	sub    DWORD PTR [rip+0xe02],0x1        # 0x1d72
  00f70:    	je     0x3d3f0
  00f76:    	sub    rsp,0x20
  00f7a:    	movq   QWORD PTR [rsp],xmm5
  00f7f:    	movq   QWORD PTR [rsp+0x8],xmm6
  00f85:    	movq   QWORD PTR [rsp+0x10],xmm7
  00f8b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00f92: 00 	movabs rax,0x5600b75a2280
  00f9c:    	call   rax
  00f9e:    	mov    r15d,eax
  00fa1: 00 	cmp    r15d,DWORD PTR [rip+0xdd2]        # 0x1d7a
  00fa8:    	jne    0x3d412
  00fae:    	mov    eax,DWORD PTR [rip+0xffffffffffffdd95]        # 0xffffed49
  00fb4:    	cmp    DWORD PTR [rip+0xdbc],eax        # 0x1d76
  00fba:    	jne    0x3d412
  00fc0:    	mov    rax,QWORD PTR [rbx]
  00fc3:    	lea    rdi,[rsp-0x18]
  00fc8:    	mov    QWORD PTR [rdi],rax
  00fcb:    	mov    QWORD PTR [rbx],rdi
  00fce: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fd7:    	mov    QWORD PTR [rsp-0x38],rcx
  00fdc: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00fe3:    	mov    QWORD PTR [rsp-0x38],rax
  00fe8: 00 	mov    rdi,0x0
  00fef: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ff8: 00 	movabs rax,0x0
  01002:    	mov    QWORD PTR [rsp-0x28],rax
  01007: 00 	movabs r13,0x0
  01011:    	call   0xffffc1e6
  01016:    	lea    rdi,[rbp-0x8]
  0101a:    	mov    QWORD PTR [rbx],rdi
  0101d:    	movq   xmm5,QWORD PTR [rsp]
  01022:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01028:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0102e:    	add    rsp,0x20
  01032:    	test   rax,rax
  01035:    	je     0x3d481
  0103b: ff 	mov    QWORD PTR [rbp-0x88],rax
:00069 
:00071 %14 = %1.call dir()                  [<INVALID>]
  01042: 01 	sub    DWORD PTR [rip+0xd35],0x1        # 0x1d7e
  01049:    	je     0x3d4b9
  0104f:    	sub    rsp,0x20
  01053:    	movq   QWORD PTR [rsp],xmm5
  01058:    	movq   QWORD PTR [rsp+0x8],xmm6
  0105e:    	movq   QWORD PTR [rsp+0x10],xmm7
  01064:    	mov    rdi,QWORD PTR [rbp-0x30]
  01068: 00 	movabs rax,0x5600b75a2280
  01072:    	call   rax
  01074:    	mov    r15d,eax
  01077: 00 	cmp    r15d,DWORD PTR [rip+0xd08]        # 0x1d86
  0107e:    	jne    0x3d4db
  01084:    	mov    eax,DWORD PTR [rip+0xffffffffffffdcbf]        # 0xffffed49
  0108a:    	cmp    DWORD PTR [rip+0xcf2],eax        # 0x1d82
  01090:    	jne    0x3d4db
  01096:    	mov    rax,QWORD PTR [rbx]
  01099:    	lea    rdi,[rsp-0x18]
  0109e:    	mov    QWORD PTR [rdi],rax
  010a1:    	mov    QWORD PTR [rbx],rdi
  010a4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010ad:    	mov    QWORD PTR [rsp-0x38],rcx
  010b2:    	mov    rax,QWORD PTR [rbp-0x30]
  010b6:    	mov    QWORD PTR [rsp-0x38],rax
  010bb: 00 	mov    rdi,0x0
  010c2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010cb: 00 	movabs rax,0x0
  010d5:    	mov    QWORD PTR [rsp-0x28],rax
  010da: 00 	movabs r13,0x0
  010e4:    	call   0xffffc1e6
  010e9:    	lea    rdi,[rbp-0x8]
  010ed:    	mov    QWORD PTR [rbx],rdi
  010f0:    	movq   xmm5,QWORD PTR [rsp]
  010f5:    	movq   xmm6,QWORD PTR [rsp+0x8]
  010fb:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01101:    	add    rsp,0x20
  01105:    	test   rax,rax
  01108:    	je     0x3d547
  0110e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 
:00074 %13 = %14.call y()                   [<INVALID>]
  01115: 01 	sub    DWORD PTR [rip+0xc6e],0x1        # 0x1d8a
  0111c:    	je     0x3d57f
  01122:    	sub    rsp,0x20
  01126:    	movq   QWORD PTR [rsp],xmm5
  0112b:    	movq   QWORD PTR [rsp+0x8],xmm6
  01131:    	movq   QWORD PTR [rsp+0x10],xmm7
  01137: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0113e: 00 	movabs rax,0x5600b75a2280
  01148:    	call   rax
  0114a:    	mov    r15d,eax
  0114d: 00 	cmp    r15d,DWORD PTR [rip+0xc3e]        # 0x1d92
  01154:    	jne    0x3d5a1
  0115a:    	mov    eax,DWORD PTR [rip+0xffffffffffffdbe9]        # 0xffffed49
  01160:    	cmp    DWORD PTR [rip+0xc28],eax        # 0x1d8e
  01166:    	jne    0x3d5a1
  0116c:    	mov    rax,QWORD PTR [rbx]
  0116f:    	lea    rdi,[rsp-0x18]
  01174:    	mov    QWORD PTR [rdi],rax
  01177:    	mov    QWORD PTR [rbx],rdi
  0117a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01183:    	mov    QWORD PTR [rsp-0x38],rcx
  01188: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0118f:    	mov    QWORD PTR [rsp-0x38],rax
  01194: 00 	mov    rdi,0x0
  0119b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011a4: 00 	movabs rax,0x0
  011ae:    	mov    QWORD PTR [rsp-0x28],rax
  011b3: 00 	movabs r13,0x0
  011bd:    	call   0xffffc1e6
  011c2:    	lea    rdi,[rbp-0x8]
  011c6:    	mov    QWORD PTR [rbx],rdi
  011c9:    	movq   xmm5,QWORD PTR [rsp]
  011ce:    	movq   xmm6,QWORD PTR [rsp+0x8]
  011d4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  011da:    	add    rsp,0x20
  011de:    	test   rax,rax
  011e1:    	je     0x3d610
  011e7: ff 	mov    QWORD PTR [rbp-0x90],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  011ee: 01 	sub    DWORD PTR [rip+0xba1],0x1        # 0x1d96
  011f5:    	je     0x3d648
  011fb: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01202:    	mov    rsi,QWORD PTR [rbp-0x60]
  01206:    	sub    rsp,0x20
  0120a:    	movq   QWORD PTR [rsp],xmm5
  0120f:    	movq   QWORD PTR [rsp+0x8],xmm6
  01215:    	movq   QWORD PTR [rsp+0x10],xmm7
  0121b:    	mov    rdx,rdi
  0121e:    	mov    rcx,rsi
  01221:    	mov    rdi,rbx
  01224:    	mov    rsi,r12
  01227: 00 	movabs rax,0x5600b7598f60
  01231:    	call   rax
  01233:    	movq   xmm5,QWORD PTR [rsp]
  01238:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0123e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01244:    	add    rsp,0x20
  01248: 00 	movabs r13,0x5600b92b5840
  01252:    	test   rax,rax
  01255:    	je     0xffffc221
  0125b: ff 	mov    QWORD PTR [rbp-0x90],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  01262: 01 	sub    DWORD PTR [rip+0xb31],0x1        # 0x1d9a
  01269:    	je     0x3d693
  0126f: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01276: ff 	mov    rsi,QWORD PTR [rbp-0x90]
  0127d:    	sub    rsp,0x20
  01281:    	movq   QWORD PTR [rsp],xmm5
  01286:    	movq   QWORD PTR [rsp+0x8],xmm6
  0128c:    	movq   QWORD PTR [rsp+0x10],xmm7
  01292:    	mov    rdx,rdi
  01295:    	mov    rcx,rsi
  01298:    	mov    rdi,rbx
  0129b:    	mov    rsi,r12
  0129e: 00 	movabs rax,0x5600b75970e0
  012a8:    	call   rax
  012aa:    	movq   xmm5,QWORD PTR [rsp]
  012af:    	movq   xmm6,QWORD PTR [rsp+0x8]
  012b5:    	movq   xmm7,QWORD PTR [rsp+0x10]
  012bb:    	add    rsp,0x20
  012bf: 00 	movabs r13,0x5600b92b5850
  012c9:    	test   rax,rax
  012cc:    	je     0xffffc221
  012d2: ff 	mov    QWORD PTR [rbp-0x88],rax
:00079 %14 = %1.call org()                  [<INVALID>]
  012d9: 01 	sub    DWORD PTR [rip+0xabe],0x1        # 0x1d9e
  012e0:    	je     0x3d6de
  012e6:    	sub    rsp,0x20
  012ea:    	movq   QWORD PTR [rsp],xmm5
  012ef:    	movq   QWORD PTR [rsp+0x8],xmm6
  012f5:    	movq   QWORD PTR [rsp+0x10],xmm7
  012fb:    	mov    rdi,QWORD PTR [rbp-0x30]
  012ff: 00 	movabs rax,0x5600b75a2280
  01309:    	call   rax
  0130b:    	mov    r15d,eax
  0130e: 00 	cmp    r15d,DWORD PTR [rip+0xa91]        # 0x1da6
  01315:    	jne    0x3d700
  0131b:    	mov    eax,DWORD PTR [rip+0xffffffffffffda28]        # 0xffffed49
  01321:    	cmp    DWORD PTR [rip+0xa7b],eax        # 0x1da2
  01327:    	jne    0x3d700
  0132d:    	mov    rax,QWORD PTR [rbx]
  01330:    	lea    rdi,[rsp-0x18]
  01335:    	mov    QWORD PTR [rdi],rax
  01338:    	mov    QWORD PTR [rbx],rdi
  0133b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01344:    	mov    QWORD PTR [rsp-0x38],rcx
  01349:    	mov    rax,QWORD PTR [rbp-0x30]
  0134d:    	mov    QWORD PTR [rsp-0x38],rax
  01352: 00 	mov    rdi,0x0
  01359: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01362: 00 	movabs rax,0x0
  0136c:    	mov    QWORD PTR [rsp-0x28],rax
  01371: 00 	movabs r13,0x0
  0137b:    	call   0xffffc1e6
  01380:    	lea    rdi,[rbp-0x8]
  01384:    	mov    QWORD PTR [rbx],rdi
  01387:    	movq   xmm5,QWORD PTR [rsp]
  0138c:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01392:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01398:    	add    rsp,0x20
  0139c:    	test   rax,rax
  0139f:    	je     0x3d76c
  013a5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 
:00082 %13 = %14.call z()                   [<INVALID>]
  013ac: 01 	sub    DWORD PTR [rip+0x9f7],0x1        # 0x1daa
  013b3:    	je     0x3d7a4
  013b9:    	sub    rsp,0x20
  013bd:    	movq   QWORD PTR [rsp],xmm5
  013c2:    	movq   QWORD PTR [rsp+0x8],xmm6
  013c8:    	movq   QWORD PTR [rsp+0x10],xmm7
  013ce: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  013d5: 00 	movabs rax,0x5600b75a2280
  013df:    	call   rax
  013e1:    	mov    r15d,eax
  013e4: 00 	cmp    r15d,DWORD PTR [rip+0x9c7]        # 0x1db2
  013eb:    	jne    0x3d7c6
  013f1:    	mov    eax,DWORD PTR [rip+0xffffffffffffd952]        # 0xffffed49
  013f7:    	cmp    DWORD PTR [rip+0x9b1],eax        # 0x1dae
  013fd:    	jne    0x3d7c6
  01403:    	mov    rax,QWORD PTR [rbx]
  01406:    	lea    rdi,[rsp-0x18]
  0140b:    	mov    QWORD PTR [rdi],rax
  0140e:    	mov    QWORD PTR [rbx],rdi
  01411: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0141a:    	mov    QWORD PTR [rsp-0x38],rcx
  0141f: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01426:    	mov    QWORD PTR [rsp-0x38],rax
  0142b: 00 	mov    rdi,0x0
  01432: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0143b: 00 	movabs rax,0x0
  01445:    	mov    QWORD PTR [rsp-0x28],rax
  0144a: 00 	movabs r13,0x0
  01454:    	call   0xffffc1e6
  01459:    	lea    rdi,[rbp-0x8]
  0145d:    	mov    QWORD PTR [rbx],rdi
  01460:    	movq   xmm5,QWORD PTR [rsp]
  01465:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0146b:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01471:    	add    rsp,0x20
  01475:    	test   rax,rax
  01478:    	je     0x3d835
  0147e: ff 	mov    QWORD PTR [rbp-0x90],rax
:00083 
:00085 %15 = %1.call dir()                  [<INVALID>]
  01485: 01 	sub    DWORD PTR [rip+0x92a],0x1        # 0x1db6
  0148c:    	je     0x3d86d
  01492:    	sub    rsp,0x20
  01496:    	movq   QWORD PTR [rsp],xmm5
  0149b:    	movq   QWORD PTR [rsp+0x8],xmm6
  014a1:    	movq   QWORD PTR [rsp+0x10],xmm7
  014a7:    	mov    rdi,QWORD PTR [rbp-0x30]
  014ab: 00 	movabs rax,0x5600b75a2280
  014b5:    	call   rax
  014b7:    	mov    r15d,eax
  014ba: 00 	cmp    r15d,DWORD PTR [rip+0x8fd]        # 0x1dbe
  014c1:    	jne    0x3d88f
  014c7:    	mov    eax,DWORD PTR [rip+0xffffffffffffd87c]        # 0xffffed49
  014cd:    	cmp    DWORD PTR [rip+0x8e7],eax        # 0x1dba
  014d3:    	jne    0x3d88f
  014d9:    	mov    rax,QWORD PTR [rbx]
  014dc:    	lea    rdi,[rsp-0x18]
  014e1:    	mov    QWORD PTR [rdi],rax
  014e4:    	mov    QWORD PTR [rbx],rdi
  014e7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014f0:    	mov    QWORD PTR [rsp-0x38],rcx
  014f5:    	mov    rax,QWORD PTR [rbp-0x30]
  014f9:    	mov    QWORD PTR [rsp-0x38],rax
  014fe: 00 	mov    rdi,0x0
  01505: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0150e: 00 	movabs rax,0x0
  01518:    	mov    QWORD PTR [rsp-0x28],rax
  0151d: 00 	movabs r13,0x0
  01527:    	call   0xffffc1e6
  0152c:    	lea    rdi,[rbp-0x8]
  01530:    	mov    QWORD PTR [rbx],rdi
  01533:    	movq   xmm5,QWORD PTR [rsp]
  01538:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0153e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01544:    	add    rsp,0x20
  01548:    	test   rax,rax
  0154b:    	je     0x3d8fb
  01551: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00086 
:00088 %14 = %15.call z()                   [<INVALID>]
  01558: 01 	sub    DWORD PTR [rip+0x863],0x1        # 0x1dc2
  0155f:    	je     0x3d933
  01565:    	sub    rsp,0x20
  01569:    	movq   QWORD PTR [rsp],xmm5
  0156e:    	movq   QWORD PTR [rsp+0x8],xmm6
  01574:    	movq   QWORD PTR [rsp+0x10],xmm7
  0157a: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01581: 00 	movabs rax,0x5600b75a2280
  0158b:    	call   rax
  0158d:    	mov    r15d,eax
  01590: 00 	cmp    r15d,DWORD PTR [rip+0x833]        # 0x1dca
  01597:    	jne    0x3d955
  0159d:    	mov    eax,DWORD PTR [rip+0xffffffffffffd7a6]        # 0xffffed49
  015a3:    	cmp    DWORD PTR [rip+0x81d],eax        # 0x1dc6
  015a9:    	jne    0x3d955
  015af:    	mov    rax,QWORD PTR [rbx]
  015b2:    	lea    rdi,[rsp-0x18]
  015b7:    	mov    QWORD PTR [rdi],rax
  015ba:    	mov    QWORD PTR [rbx],rdi
  015bd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015c6:    	mov    QWORD PTR [rsp-0x38],rcx
  015cb: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  015d2:    	mov    QWORD PTR [rsp-0x38],rax
  015d7: 00 	mov    rdi,0x0
  015de: 00 	mov    QWORD PTR [rsp-0x30],0x0
  015e7: 00 	movabs rax,0x0
  015f1:    	mov    QWORD PTR [rsp-0x28],rax
  015f6: 00 	movabs r13,0x0
  01600:    	call   0xffffc1e6
  01605:    	lea    rdi,[rbp-0x8]
  01609:    	mov    QWORD PTR [rbx],rdi
  0160c:    	movq   xmm5,QWORD PTR [rsp]
  01611:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01617:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0161d:    	add    rsp,0x20
  01621:    	test   rax,rax
  01624:    	je     0x3d9c4
  0162a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  01631: 01 	sub    DWORD PTR [rip+0x796],0x1        # 0x1dce
  01638:    	je     0x3d9fc
  0163e: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01645:    	mov    rsi,QWORD PTR [rbp-0x60]
  01649:    	sub    rsp,0x20
  0164d:    	movq   QWORD PTR [rsp],xmm5
  01652:    	movq   QWORD PTR [rsp+0x8],xmm6
  01658:    	movq   QWORD PTR [rsp+0x10],xmm7
  0165e:    	mov    rdx,rdi
  01661:    	mov    rcx,rsi
  01664:    	mov    rdi,rbx
  01667:    	mov    rsi,r12
  0166a: 00 	movabs rax,0x5600b7598f60
  01674:    	call   rax
  01676:    	movq   xmm5,QWORD PTR [rsp]
  0167b:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01681:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01687:    	add    rsp,0x20
  0168b: 00 	movabs r13,0x5600b92b5920
  01695:    	test   rax,rax
  01698:    	je     0xffffc221
  0169e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  016a5: 01 	sub    DWORD PTR [rip+0x726],0x1        # 0x1dd2
  016ac:    	je     0x3da47
  016b2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  016b9: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  016c0:    	sub    rsp,0x20
  016c4:    	movq   QWORD PTR [rsp],xmm5
  016c9:    	movq   QWORD PTR [rsp+0x8],xmm6
  016cf:    	movq   QWORD PTR [rsp+0x10],xmm7
  016d5:    	mov    rdx,rdi
  016d8:    	mov    rcx,rsi
  016db:    	mov    rdi,rbx
  016de:    	mov    rsi,r12
  016e1: 00 	movabs rax,0x5600b75970e0
  016eb:    	call   rax
  016ed:    	movq   xmm5,QWORD PTR [rsp]
  016f2:    	movq   xmm6,QWORD PTR [rsp+0x8]
  016f8:    	movq   xmm7,QWORD PTR [rsp+0x10]
  016fe:    	add    rsp,0x20
  01702: 00 	movabs r13,0x5600b92b5930
  0170c:    	test   rax,rax
  0170f:    	je     0xffffc221
  01715: ff 	mov    QWORD PTR [rbp-0x90],rax
:00093 %9 = %10.call new(%11; 3)            [<INVALID>]
  0171c: 01 	sub    DWORD PTR [rip+0x6b3],0x1        # 0x1dd6
  01723:    	je     0x3da92
  01729:    	sub    rsp,0x20
  0172d:    	movq   QWORD PTR [rsp],xmm5
  01732:    	movq   QWORD PTR [rsp+0x8],xmm6
  01738:    	movq   QWORD PTR [rsp+0x10],xmm7
  0173e:    	mov    rdi,QWORD PTR [rbp-0x78]
  01742: 00 	movabs rax,0x5600b75a2280
  0174c:    	call   rax
  0174e:    	mov    r15d,eax
  01751: 00 	cmp    r15d,DWORD PTR [rip+0x686]        # 0x1dde
  01758:    	jne    0x3dab4
  0175e:    	mov    eax,DWORD PTR [rip+0xffffffffffffd5e5]        # 0xffffed49
  01764:    	cmp    DWORD PTR [rip+0x670],eax        # 0x1dda
  0176a:    	jne    0x3dab4
  01770:    	mov    rax,QWORD PTR [rbx]
  01773:    	lea    rdi,[rsp-0x18]
  01778:    	mov    QWORD PTR [rdi],rax
  0177b:    	mov    QWORD PTR [rbx],rdi
  0177e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01787:    	mov    QWORD PTR [rsp-0x38],rcx
  0178c:    	mov    rax,QWORD PTR [rbp-0x78]
  01790:    	mov    QWORD PTR [rsp-0x38],rax
  01795: 00 	mov    rdi,0x3
  0179c:    	mov    rax,QWORD PTR [rbp-0x80]
  017a0:    	mov    QWORD PTR [rsp-0x40],rax
  017a5: ff 	mov    rax,QWORD PTR [rbp-0x88]
  017ac:    	mov    QWORD PTR [rsp-0x48],rax
  017b1: ff 	mov    rax,QWORD PTR [rbp-0x90]
  017b8:    	mov    QWORD PTR [rsp-0x50],rax
  017bd: 00 	mov    QWORD PTR [rsp-0x30],0x0
  017c6: 00 	movabs rax,0x0
  017d0:    	mov    QWORD PTR [rsp-0x28],rax
  017d5: 00 	movabs r13,0x0
  017df:    	call   0xffffc1e6
  017e4:    	lea    rdi,[rbp-0x8]
  017e8:    	mov    QWORD PTR [rbx],rdi
  017eb:    	movq   xmm5,QWORD PTR [rsp]
  017f0:    	movq   xmm6,QWORD PTR [rsp+0x8]
  017f6:    	movq   xmm7,QWORD PTR [rsp+0x10]
  017fc:    	add    rsp,0x20
  01800:    	test   rax,rax
  01803:    	je     0x3db20
  01809:    	mov    QWORD PTR [rbp-0x70],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [<INVALID>]
  0180d: 01 	sub    DWORD PTR [rip+0x5ce],0x1        # 0x1de2
  01814:    	je     0x3db58
  0181a:    	sub    rsp,0x20
  0181e:    	movq   QWORD PTR [rsp],xmm5
  01823:    	movq   QWORD PTR [rsp+0x8],xmm6
  01829:    	movq   QWORD PTR [rsp+0x10],xmm7
  0182f:    	mov    rdi,QWORD PTR [rbp-0x38]
  01833: 00 	movabs rax,0x5600b75a2280
  0183d:    	call   rax
  0183f:    	mov    r15d,eax
  01842: 00 	cmp    r15d,DWORD PTR [rip+0x5a1]        # 0x1dea
  01849:    	jne    0x3db7a
  0184f:    	mov    eax,DWORD PTR [rip+0xffffffffffffd4f4]        # 0xffffed49
  01855:    	cmp    DWORD PTR [rip+0x58b],eax        # 0x1de6
  0185b:    	jne    0x3db7a
  01861:    	mov    rax,QWORD PTR [rbx]
  01864:    	lea    rdi,[rsp-0x18]
  01869:    	mov    QWORD PTR [rdi],rax
  0186c:    	mov    QWORD PTR [rbx],rdi
  0186f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01878:    	mov    QWORD PTR [rsp-0x38],rcx
  0187d:    	mov    rax,QWORD PTR [rbp-0x38]
  01881:    	mov    QWORD PTR [rsp-0x38],rax
  01886: 00 	mov    rdi,0x1
  0188d:    	mov    rax,QWORD PTR [rbp-0x70]
  01891:    	mov    QWORD PTR [rsp-0x40],rax
  01896: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0189f: 00 	movabs rax,0x0
  018a9:    	mov    QWORD PTR [rsp-0x28],rax
  018ae: 00 	movabs r13,0x0
  018b8:    	call   0xffffc1e6
  018bd:    	lea    rdi,[rbp-0x8]
  018c1:    	mov    QWORD PTR [rbx],rdi
  018c4:    	movq   xmm5,QWORD PTR [rsp]
  018c9:    	movq   xmm6,QWORD PTR [rsp+0x8]
  018cf:    	movq   xmm7,QWORD PTR [rsp+0x10]
  018d5:    	add    rsp,0x20
  018d9:    	test   rax,rax
  018dc:    	je     0x3dbe6
:00097 
:00099 %9 = %2.call pl()                    [<INVALID>]
  018e2: 01 	sub    DWORD PTR [rip+0x505],0x1        # 0x1dee
  018e9:    	je     0x3dc1e
  018ef:    	sub    rsp,0x20
  018f3:    	movq   QWORD PTR [rsp],xmm5
  018f8:    	movq   QWORD PTR [rsp+0x8],xmm6
  018fe:    	movq   QWORD PTR [rsp+0x10],xmm7
  01904:    	mov    rdi,QWORD PTR [rbp-0x38]
  01908: 00 	movabs rax,0x5600b75a2280
  01912:    	call   rax
  01914:    	mov    r15d,eax
  01917: 00 	cmp    r15d,DWORD PTR [rip+0x4d8]        # 0x1df6
  0191e:    	jne    0x3dc40
  01924:    	mov    eax,DWORD PTR [rip+0xffffffffffffd41f]        # 0xffffed49
  0192a:    	cmp    DWORD PTR [rip+0x4c2],eax        # 0x1df2
  01930:    	jne    0x3dc40
  01936:    	mov    rax,QWORD PTR [rbx]
  01939:    	lea    rdi,[rsp-0x18]
  0193e:    	mov    QWORD PTR [rdi],rax
  01941:    	mov    QWORD PTR [rbx],rdi
  01944: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0194d:    	mov    QWORD PTR [rsp-0x38],rcx
  01952:    	mov    rax,QWORD PTR [rbp-0x38]
  01956:    	mov    QWORD PTR [rsp-0x38],rax
  0195b: 00 	mov    rdi,0x0
  01962: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0196b: 00 	movabs rax,0x0
  01975:    	mov    QWORD PTR [rsp-0x28],rax
  0197a: 00 	movabs r13,0x0
  01984:    	call   0xffffc1e6
  01989:    	lea    rdi,[rbp-0x8]
  0198d:    	mov    QWORD PTR [rbx],rdi
  01990:    	movq   xmm5,QWORD PTR [rsp]
  01995:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0199b:    	movq   xmm7,QWORD PTR [rsp+0x10]
  019a1:    	add    rsp,0x20
  019a5:    	test   rax,rax
  019a8:    	je     0x3dcac
  019ae:    	mov    QWORD PTR [rbp-0x70],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  019b2:    	mov    rdi,QWORD PTR [rbp-0x28]
  019b6:    	sub    rsp,0x20
  019ba:    	movq   QWORD PTR [rsp],xmm5
  019bf:    	movq   QWORD PTR [rsp+0x8],xmm6
  019c5:    	movq   QWORD PTR [rsp+0x10],xmm7
  019cb: 00 	mov    rsi,0x85
  019d2:    	mov    rdx,r12
  019d5: 00 	movabs rax,0x5600b75c5460
  019df:    	call   rax
  019e1:    	movq   xmm5,QWORD PTR [rsp]
  019e6:    	movq   xmm6,QWORD PTR [rsp+0x8]
  019ec:    	movq   xmm7,QWORD PTR [rsp+0x10]
  019f2:    	add    rsp,0x20
  019f6:    	mov    QWORD PTR [rbp-0x78],rax
:00103 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  019fa: 01 	sub    DWORD PTR [rip+0x3f9],0x1        # 0x1dfa
  01a01:    	je     0x3dce4
  01a07:    	sub    rsp,0x20
  01a0b:    	movq   QWORD PTR [rsp],xmm5
  01a10:    	movq   QWORD PTR [rsp+0x8],xmm6
  01a16:    	movq   QWORD PTR [rsp+0x10],xmm7
  01a1c:    	mov    rdi,QWORD PTR [rbp-0x70]
  01a20: 00 	movabs rax,0x5600b75a2280
  01a2a:    	call   rax
  01a2c:    	mov    r15d,eax
  01a2f: 00 	cmp    r15d,DWORD PTR [rip+0x3cc]        # 0x1e02
  01a36:    	jne    0x3dd06
  01a3c:    	mov    eax,DWORD PTR [rip+0xffffffffffffd307]        # 0xffffed49
  01a42:    	cmp    DWORD PTR [rip+0x3b6],eax        # 0x1dfe
  01a48:    	jne    0x3dd06
  01a4e:    	mov    rax,QWORD PTR [rbx]
  01a51:    	lea    rdi,[rsp-0x18]
  01a56:    	mov    QWORD PTR [rdi],rax
  01a59:    	mov    QWORD PTR [rbx],rdi
  01a5c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a65:    	mov    QWORD PTR [rsp-0x38],rcx
  01a6a:    	mov    rax,QWORD PTR [rbp-0x70]
  01a6e:    	mov    QWORD PTR [rsp-0x38],rax
  01a73: 00 	mov    rdi,0x1
  01a7a:    	mov    rax,QWORD PTR [rbp-0x78]
  01a7e:    	mov    QWORD PTR [rsp-0x40],rax
  01a83: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a8c: 00 	movabs rax,0x0
  01a96:    	mov    QWORD PTR [rsp-0x28],rax
  01a9b: 00 	movabs r13,0x0
  01aa5:    	call   0xffffc1e6
  01aaa:    	lea    rdi,[rbp-0x8]
  01aae:    	mov    QWORD PTR [rbx],rdi
  01ab1:    	movq   xmm5,QWORD PTR [rsp]
  01ab6:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01abc:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01ac2:    	add    rsp,0x20
  01ac6:    	test   rax,rax
  01ac9:    	je     0x3dd72
  01acf:    	mov    QWORD PTR [rbp-0x68],rax
:00104 
:00106 %9 = %8.call vnormalize()            [<INVALID>]
  01ad3: 01 	sub    DWORD PTR [rip+0x32c],0x1        # 0x1e06
  01ada:    	je     0x3ddaa
  01ae0:    	sub    rsp,0x20
  01ae4:    	movq   QWORD PTR [rsp],xmm5
  01ae9:    	movq   QWORD PTR [rsp+0x8],xmm6
  01aef:    	movq   QWORD PTR [rsp+0x10],xmm7
  01af5:    	mov    rdi,QWORD PTR [rbp-0x68]
  01af9: 00 	movabs rax,0x5600b75a2280
  01b03:    	call   rax
  01b05:    	mov    r15d,eax
  01b08: 00 	cmp    r15d,DWORD PTR [rip+0x2ff]        # 0x1e0e
  01b0f:    	jne    0x3ddcc
  01b15:    	mov    eax,DWORD PTR [rip+0xffffffffffffd22e]        # 0xffffed49
  01b1b:    	cmp    DWORD PTR [rip+0x2e9],eax        # 0x1e0a
  01b21:    	jne    0x3ddcc
  01b27:    	mov    rax,QWORD PTR [rbx]
  01b2a:    	lea    rdi,[rsp-0x18]
  01b2f:    	mov    QWORD PTR [rdi],rax
  01b32:    	mov    QWORD PTR [rbx],rdi
  01b35: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b3e:    	mov    QWORD PTR [rsp-0x38],rcx
  01b43:    	mov    rax,QWORD PTR [rbp-0x68]
  01b47:    	mov    QWORD PTR [rsp-0x38],rax
  01b4c: 00 	mov    rdi,0x0
  01b53: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b5c: 00 	movabs rax,0x0
  01b66:    	mov    QWORD PTR [rsp-0x28],rax
  01b6b: 00 	movabs r13,0x0
  01b75:    	call   0xffffc1e6
  01b7a:    	lea    rdi,[rbp-0x8]
  01b7e:    	mov    QWORD PTR [rbx],rdi
  01b81:    	movq   xmm5,QWORD PTR [rsp]
  01b86:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01b8c:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01b92:    	add    rsp,0x20
  01b96:    	test   rax,rax
  01b99:    	je     0x3de38
  01b9f:    	mov    QWORD PTR [rbp-0x70],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [<INVALID>]
  01ba3: 01 	sub    DWORD PTR [rip+0x268],0x1        # 0x1e12
  01baa:    	je     0x3de70
  01bb0:    	sub    rsp,0x20
  01bb4:    	movq   QWORD PTR [rsp],xmm5
  01bb9:    	movq   QWORD PTR [rsp+0x8],xmm6
  01bbf:    	movq   QWORD PTR [rsp+0x10],xmm7
  01bc5:    	mov    rdi,QWORD PTR [rbp-0x38]
  01bc9: 00 	movabs rax,0x5600b75a2280
  01bd3:    	call   rax
  01bd5:    	mov    r15d,eax
  01bd8: 00 	cmp    r15d,DWORD PTR [rip+0x23b]        # 0x1e1a
  01bdf:    	jne    0x3de92
  01be5:    	mov    eax,DWORD PTR [rip+0xffffffffffffd15e]        # 0xffffed49
  01beb:    	cmp    DWORD PTR [rip+0x225],eax        # 0x1e16
  01bf1:    	jne    0x3de92
  01bf7:    	mov    rax,QWORD PTR [rbx]
  01bfa:    	lea    rdi,[rsp-0x18]
  01bff:    	mov    QWORD PTR [rdi],rax
  01c02:    	mov    QWORD PTR [rbx],rdi
  01c05: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01c0e:    	mov    QWORD PTR [rsp-0x38],rcx
  01c13:    	mov    rax,QWORD PTR [rbp-0x38]
  01c17:    	mov    QWORD PTR [rsp-0x38],rax
  01c1c: 00 	mov    rdi,0x1
  01c23:    	mov    rax,QWORD PTR [rbp-0x70]
  01c27:    	mov    QWORD PTR [rsp-0x40],rax
  01c2c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c35: 00 	movabs rax,0x0
  01c3f:    	mov    QWORD PTR [rsp-0x28],rax
  01c44: 00 	movabs r13,0x0
  01c4e:    	call   0xffffc1e6
  01c53:    	lea    rdi,[rbp-0x8]
  01c57:    	mov    QWORD PTR [rbx],rdi
  01c5a:    	movq   xmm5,QWORD PTR [rsp]
  01c5f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01c65:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01c6b:    	add    rsp,0x20
  01c6f:    	test   rax,rax
  01c72:    	je     0x3defe
:00110 
:00112 br =>:00113
  01c78:    	jmp    0x3df73
:00113 br =>:00114
  01c7d:    	jmp    0x3dfe6
:00114 %9 = nil
  01c82: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00115 ret %9
  01c8a:    	mov    rax,QWORD PTR [rbp-0x70]
  01c8e:    	leave  
  01c8f:    	ret    
==> start whole compile: vsub FuncId(63) self_class:Vec start:[00000] bytecode:0x5600b92a1ef0
<== finished compile. elapsed:39.9µs
offset:Pos(23608) code: 1373 bytes  data: 59 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: mov    eax,edx
  0000d: sub    eax,0x1
  00010: jge    0x32
  00016: neg    rdx
  00019: lea    rdx,[rbp+rdx*8-0x30]
  0001e: mov    QWORD PTR [rdx],0x4
  00025: sub    rdx,0x8
  00029: add    eax,0x1
  0002c: jne    0x1e
  00032: mov    rax,0x4
  00039: mov    QWORD PTR [rbp-0x38],rax
  0003d: mov    QWORD PTR [rbp-0x40],rax
  00041: mov    QWORD PTR [rbp-0x48],rax
  00045: mov    QWORD PTR [rbp-0x50],rax
  00049: mov    QWORD PTR [rbp-0x58],rax
  0004d: mov    QWORD PTR [rbp-0x60],rax
  00051: mov    rdi,QWORD PTR [rbp-0x28]
  00055: test   rdi,0x7
  0005c: jne    0x3c1fb
  00062: cmp    DWORD PTR [rdi+0x4],0x28
  00066: jne    0x3c1fb
:00000 init reg_num:8 arg_num:1 stack_offset:7
:00001 %3 = const[Vec]                      [Vec]
  0006c: mov    rax,QWORD PTR [rip+0xffffffffffffcec5]        # 0xffffcf38
  00073: cmp    rax,QWORD PTR [rip+0x4fe]        # 0x578
  0007a: jne    0x3c20a
  00080: mov    rax,QWORD PTR [rip+0x4e1]        # 0x568
  00087: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = @x: Vec[IvarId(0)]
  0008b: mov    rdi,QWORD PTR [rbp-0x28]
  0008f: mov    rax,QWORD PTR [rdi+0x10]
  00093: mov    QWORD PTR [rbp-0x48],rax
:00003 %5 = %1.call x()                     [Vec]
  00097: mov    rdi,QWORD PTR [rbp-0x30]
  0009b: test   rdi,0x7
  000a2: jne    0x3c250
  000a8: cmp    DWORD PTR [rdi+0x4],0x28
  000ac: jne    0x3c250
  000b2: cmp    DWORD PTR [rip+0xffffffffffffce72],0x26        # 0xffffcf2b
  000b9: jne    0x3c250
  000bf: mov    esi,DWORD PTR [rip+0x4bf]        # 0x584
  000c5: cmp    esi,0xffffffff
  000c8: je     0x3c25f
  000ce: cmp    WORD PTR [rdi+0x2],0x3
  000d3: jne    0xec
  000d9: cmp    esi,0x6
  000dc: jge    0xec
  000e2: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000e7: jmp    0xf8
  000ec: movabs rax,0x5600b755dfe0
  000f6: call   rax
  000f8: mov    QWORD PTR [rbp-0x50],rax
:00004 
:00006 %4 = %4 - %5                         [Float][Float]
  000fc: mov    rdi,QWORD PTR [rbp-0x48]
  00100: test   rdi,0x1
  00107: jne    0x3c288
  0010d: test   rdi,0x2
  00114: je     0x150
  0011a: xorps  xmm2,xmm2
  0011d: movabs rax,0x8000000000000002
  00127: cmp    rdi,rax
  0012a: je     0x162
  00130: mov    rax,rdi
  00133: sar    rax,0x3f
  00137: add    rax,0x2
  0013b: and    rdi,0xfffffffffffffffc
  0013f: or     rdi,rax
  00142: rol    rdi,0x3d
  00146: movq   xmm2,rdi
  0014b: jmp    0x162
  00150: call   0xffffa43c
  00155: test   rax,rax
  00158: je     0x3c288
  0015e: movq   xmm2,xmm0
  00162: mov    rdi,QWORD PTR [rbp-0x50]
  00166: test   rdi,0x1
  0016d: jne    0x3c297
  00173: test   rdi,0x2
  0017a: je     0x1b6
  00180: xorps  xmm3,xmm3
  00183: movabs rax,0x8000000000000002
  0018d: cmp    rdi,rax
  00190: je     0x1c8
  00196: mov    rax,rdi
  00199: sar    rax,0x3f
  0019d: add    rax,0x2
  001a1: and    rdi,0xfffffffffffffffc
  001a5: or     rdi,rax
  001a8: rol    rdi,0x3d
  001ac: movq   xmm3,rdi
  001b1: jmp    0x1c8
  001b6: call   0xffffa43c
  001bb: test   rax,rax
  001be: je     0x3c297
  001c4: movq   xmm3,xmm0
  001c8: subsd  xmm2,xmm3
:00007 %5 = @y: Vec[IvarId(1)]
  001cc: mov    rdi,QWORD PTR [rbp-0x28]
  001d0: mov    rax,QWORD PTR [rdi+0x18]
  001d4: mov    QWORD PTR [rbp-0x50],rax
:00008 %6 = %1.call y()                     [Vec]
  001d8: mov    rdi,QWORD PTR [rbp-0x30]
  001dc: test   rdi,0x7
  001e3: jne    0x3c2a6
  001e9: cmp    DWORD PTR [rdi+0x4],0x28
  001ed: jne    0x3c2a6
  001f3: cmp    DWORD PTR [rip+0xffffffffffffcd31],0x26        # 0xffffcf2b
  001fa: jne    0x3c2a6
  00200: mov    esi,DWORD PTR [rip+0x386]        # 0x58c
  00206: cmp    esi,0xffffffff
  00209: je     0x3c2c2
  0020f: cmp    WORD PTR [rdi+0x2],0x3
  00214: jne    0x22d
  0021a: cmp    esi,0x6
  0021d: jge    0x22d
  00223: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00228: jmp    0x24b
  0022d: sub    rsp,0x10
  00231: movq   QWORD PTR [rsp],xmm2
  00236: movabs rax,0x5600b755dfe0
  00240: call   rax
  00242: movq   xmm2,QWORD PTR [rsp]
  00247: add    rsp,0x10
  0024b: mov    QWORD PTR [rbp-0x58],rax
:00009 
:00011 %5 = %5 - %6                         [Float][Float]
  0024f: mov    rdi,QWORD PTR [rbp-0x50]
  00253: test   rdi,0x1
  0025a: jne    0x3c2fd
  00260: test   rdi,0x2
  00267: je     0x2a3
  0026d: xorps  xmm3,xmm3
  00270: movabs rax,0x8000000000000002
  0027a: cmp    rdi,rax
  0027d: je     0x2b5
  00283: mov    rax,rdi
  00286: sar    rax,0x3f
  0028a: add    rax,0x2
  0028e: and    rdi,0xfffffffffffffffc
  00292: or     rdi,rax
  00295: rol    rdi,0x3d
  00299: movq   xmm3,rdi
  0029e: jmp    0x2b5
  002a3: call   0xffffa43c
  002a8: test   rax,rax
  002ab: je     0x3c2fd
  002b1: movq   xmm3,xmm0
  002b5: mov    rdi,QWORD PTR [rbp-0x58]
  002b9: test   rdi,0x1
  002c0: jne    0x3c319
  002c6: test   rdi,0x2
  002cd: je     0x309
  002d3: xorps  xmm4,xmm4
  002d6: movabs rax,0x8000000000000002
  002e0: cmp    rdi,rax
  002e3: je     0x31b
  002e9: mov    rax,rdi
  002ec: sar    rax,0x3f
  002f0: add    rax,0x2
  002f4: and    rdi,0xfffffffffffffffc
  002f8: or     rdi,rax
  002fb: rol    rdi,0x3d
  002ff: movq   xmm4,rdi
  00304: jmp    0x31b
  00309: call   0xffffa43c
  0030e: test   rax,rax
  00311: je     0x3c319
  00317: movq   xmm4,xmm0
  0031b: subsd  xmm3,xmm4
:00012 %6 = @z: Vec[IvarId(2)]
  0031f: mov    rdi,QWORD PTR [rbp-0x28]
  00323: mov    rax,QWORD PTR [rdi+0x20]
  00327: mov    QWORD PTR [rbp-0x58],rax
:00013 %7 = %1.call z()                     [Vec]
  0032b: mov    rdi,QWORD PTR [rbp-0x30]
  0032f: test   rdi,0x7
  00336: jne    0x3c335
  0033c: cmp    DWORD PTR [rdi+0x4],0x28
  00340: jne    0x3c335
  00346: cmp    DWORD PTR [rip+0xffffffffffffcbde],0x26        # 0xffffcf2b
  0034d: jne    0x3c335
  00353: mov    esi,DWORD PTR [rip+0x23b]        # 0x594
  00359: cmp    esi,0xffffffff
  0035c: je     0x3c35e
  00362: cmp    WORD PTR [rdi+0x2],0x3
  00367: jne    0x380
  0036d: cmp    esi,0x6
  00370: jge    0x380
  00376: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0037b: jmp    0x3aa
  00380: sub    rsp,0x10
  00384: movq   QWORD PTR [rsp],xmm2
  00389: movq   QWORD PTR [rsp+0x8],xmm3
  0038f: movabs rax,0x5600b755dfe0
  00399: call   rax
  0039b: movq   xmm2,QWORD PTR [rsp]
  003a0: movq   xmm3,QWORD PTR [rsp+0x8]
  003a6: add    rsp,0x10
  003aa: mov    QWORD PTR [rbp-0x60],rax
:00014 
:00016 %6 = %6 - %7                         [Float][Float]
  003ae: mov    rdi,QWORD PTR [rbp-0x58]
  003b2: test   rdi,0x1
  003b9: jne    0x3c3a5
  003bf: test   rdi,0x2
  003c6: je     0x402
  003cc: xorps  xmm4,xmm4
  003cf: movabs rax,0x8000000000000002
  003d9: cmp    rdi,rax
  003dc: je     0x414
  003e2: mov    rax,rdi
  003e5: sar    rax,0x3f
  003e9: add    rax,0x2
  003ed: and    rdi,0xfffffffffffffffc
  003f1: or     rdi,rax
  003f4: rol    rdi,0x3d
  003f8: movq   xmm4,rdi
  003fd: jmp    0x414
  00402: call   0xffffa43c
  00407: test   rax,rax
  0040a: je     0x3c3a5
  00410: movq   xmm4,xmm0
  00414: mov    rdi,QWORD PTR [rbp-0x60]
  00418: test   rdi,0x1
  0041f: jne    0x3c3ce
  00425: test   rdi,0x2
  0042c: je     0x468
  00432: xorps  xmm5,xmm5
  00435: movabs rax,0x8000000000000002
  0043f: cmp    rdi,rax
  00442: je     0x47a
  00448: mov    rax,rdi
  0044b: sar    rax,0x3f
  0044f: add    rax,0x2
  00453: and    rdi,0xfffffffffffffffc
  00457: or     rdi,rax
  0045a: rol    rdi,0x3d
  0045e: movq   xmm5,rdi
  00463: jmp    0x47a
  00468: call   0xffffa43c
  0046d: test   rax,rax
  00470: je     0x3c3ce
  00476: movq   xmm5,xmm0
  0047a: subsd  xmm4,xmm5
:00017 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  0047e: movq   xmm0,xmm2
  00482: call   0xffffa52f
  00487: mov    QWORD PTR [rbp-0x48],rax
  0048b: movq   xmm0,xmm3
  0048f: call   0xffffa52f
  00494: mov    QWORD PTR [rbp-0x50],rax
  00498: movq   xmm0,xmm4
  0049c: call   0xffffa52f
  004a1: mov    QWORD PTR [rbp-0x58],rax
  004a5: mov    rdi,QWORD PTR [rbp-0x40]
  004a9: test   rdi,0x7
  004b0: jne    0x3c3f7
  004b6: cmp    DWORD PTR [rdi+0x4],0x29
  004ba: jne    0x3c3f7
  004c0: cmp    DWORD PTR [rip+0xffffffffffffca64],0x26        # 0xffffcf2b
  004c7: jne    0x3c3f7
  004cd: mov    r9,0x0
  004d4: sub    rsp,0x20
  004d8: movq   QWORD PTR [rsp],xmm2
  004dd: movq   QWORD PTR [rsp+0x8],xmm3
  004e3: movq   QWORD PTR [rsp+0x10],xmm4
  004e9: movq   QWORD PTR [rsp+0x18],xmm5
  004ef: mov    rdx,rdi
  004f2: mov    rax,QWORD PTR [rbx]
  004f5: lea    rdi,[rsp-0x18]
  004fa: mov    QWORD PTR [rdi],rax
  004fd: mov    QWORD PTR [rbx],rdi
  00500: mov    QWORD PTR [rsp-0x20],0x0
  00509: mov    QWORD PTR [rsp-0x38],rcx
  0050e: lea    rcx,[rbp-0x48]
  00512: mov    r8,0x3
  00519: call   0x3c406
  0051e: lea    rdi,[rbp-0x8]
  00522: mov    QWORD PTR [rbx],rdi
  00525: movq   xmm2,QWORD PTR [rsp]
  0052a: movq   xmm3,QWORD PTR [rsp+0x8]
  00530: movq   xmm4,QWORD PTR [rsp+0x10]
  00536: movq   xmm5,QWORD PTR [rsp+0x18]
  0053c: add    rsp,0x20
  00540: movabs r13,0x5600b92a2020
  0054a: test   rax,rax
  0054d: je     0xffffa403
  00553: mov    QWORD PTR [rbp-0x38],rax
:00018 
:00020 ret %2
  00557: mov    rax,QWORD PTR [rbp-0x38]
  0055b: leave  
  0055c: ret    
==> start whole compile: <unnamed> FuncId(82) self_class:Scene start:[00000] bytecode:0x5600b92f0960
<== finished compile. elapsed:145.7µs
offset:Pos(25311) code: 9371 bytes  data: 410 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x1
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x38],rax
  00040:    	mov    QWORD PTR [rbp-0x40],rax
  00044:    	mov    QWORD PTR [rbp-0x48],rax
  00048:    	mov    QWORD PTR [rbp-0x50],rax
  0004c:    	mov    QWORD PTR [rbp-0x58],rax
  00050:    	mov    QWORD PTR [rbp-0x60],rax
  00054:    	mov    QWORD PTR [rbp-0x68],rax
  00058:    	mov    QWORD PTR [rbp-0x70],rax
  0005c:    	mov    QWORD PTR [rbp-0x78],rax
  00060:    	mov    QWORD PTR [rbp-0x80],rax
  00064: ff 	mov    QWORD PTR [rbp-0x88],rax
  0006b: ff 	mov    QWORD PTR [rbp-0x90],rax
  00072: ff 	mov    QWORD PTR [rbp-0x98],rax
  00079: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00080: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00087: ff 	mov    QWORD PTR [rbp-0xb0],rax
  0008e: ff 	mov    QWORD PTR [rbp-0xb8],rax
  00095: ff 	mov    QWORD PTR [rbp-0xc0],rax
  0009c:    	mov    rdi,QWORD PTR [rbp-0x28]
  000a0: 00 	test   rdi,0x7
  000a7:    	jne    0x3bd91
  000ad:    	cmp    DWORD PTR [rdi+0x4],0x32
  000b1:    	jne    0x3bd91
:00000 init reg_num:20 arg_num:1 stack_offset:13
:00001 %14 = dynvar(4, %4)
  000b7:    	mov    rax,QWORD PTR [rbp-0x10]
  000bb:    	mov    rax,QWORD PTR [rax]
  000be:    	mov    rax,QWORD PTR [rax]
  000c1:    	mov    rax,QWORD PTR [rax]
  000c4:    	mov    rax,QWORD PTR [rax-0x38]
  000c8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00002 %14 = %14 + 1: i16                   [Integer][Integer]
  000cf: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000d6: 00 	test   rdi,0x1
  000dd:    	je     0x3bda0
  000e3:    	add    rdi,0x2
  000e7:    	jo     0x3bda0
  000ed: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00003 dynvar(4, %4) = %14
  000f4:    	mov    rax,QWORD PTR [rbp-0x10]
  000f8:    	mov    rax,QWORD PTR [rax]
  000fb:    	mov    rax,QWORD PTR [rax]
  000fe:    	mov    rax,QWORD PTR [rax]
  00101: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00108:    	mov    QWORD PTR [rax-0x38],rdi
:00004 %14 = dynvar(4, %1)
  0010c:    	mov    rax,QWORD PTR [rbp-0x10]
  00110:    	mov    rax,QWORD PTR [rax]
  00113:    	mov    rax,QWORD PTR [rax]
  00116:    	mov    rax,QWORD PTR [rax]
  00119:    	mov    rax,QWORD PTR [rax-0x20]
  0011d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00005 %2 = %14.call to_f()                 [Integer]
  00124: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0012b: 00 	test   rdi,0x1
  00132:    	je     0x3bdaf
  00138: 26 	cmp    DWORD PTR [rip+0xffffffffffffc745],0x26        # 0xffffc884
  0013f:    	jne    0x3bdaf
  00145:    	sar    rdi,1
  00148:    	cvtsi2sd xmm2,rdi
:00006 
:00008 %14 = dynvar(4, %2)
  0014d:    	mov    rax,QWORD PTR [rbp-0x10]
  00151:    	mov    rax,QWORD PTR [rax]
  00154:    	mov    rax,QWORD PTR [rax]
  00157:    	mov    rax,QWORD PTR [rax]
  0015a:    	mov    rax,QWORD PTR [rax-0x28]
  0015e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00009 %3 = %14.call to_f()                 [Integer]
  00165: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0016c: 00 	test   rdi,0x1
  00173:    	je     0x3bdbe
  00179: 26 	cmp    DWORD PTR [rip+0xffffffffffffc704],0x26        # 0xffffc884
  00180:    	jne    0x3bdbe
  00186:    	sar    rdi,1
  00189:    	cvtsi2sd xmm3,rdi
:00010 
:00012 %14 = dynvar(2, %1)
  0018e:    	mov    rax,QWORD PTR [rbp-0x10]
  00192:    	mov    rax,QWORD PTR [rax]
  00195:    	mov    rax,QWORD PTR [rax-0x20]
  00199: ff 	mov    QWORD PTR [rbp-0x98],rax
:00013 %4 = %14.call to_f()                 [Integer]
  001a0: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001a7: 00 	test   rdi,0x1
  001ae:    	je     0x3bdda
  001b4: 26 	cmp    DWORD PTR [rip+0xffffffffffffc6c9],0x26        # 0xffffc884
  001bb:    	jne    0x3bdda
  001c1:    	sar    rdi,1
  001c4:    	cvtsi2sd xmm4,rdi
:00014 
:00016 %14 = dynvar(3, %1)
  001c9:    	mov    rax,QWORD PTR [rbp-0x10]
  001cd:    	mov    rax,QWORD PTR [rax]
  001d0:    	mov    rax,QWORD PTR [rax]
  001d3:    	mov    rax,QWORD PTR [rax-0x20]
  001d7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00017 %5 = %14.call to_f()                 [Integer]
  001de: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001e5: 00 	test   rdi,0x1
  001ec:    	je     0x3be03
  001f2: 26 	cmp    DWORD PTR [rip+0xffffffffffffc68b],0x26        # 0xffffc884
  001f9:    	jne    0x3be03
  001ff:    	sar    rdi,1
  00202:    	cvtsi2sd xmm5,rdi
:00018 
:00020 %6 = %1.call to_f()                  [Integer]
  00207:    	mov    rdi,QWORD PTR [rbp-0x30]
  0020b: 00 	test   rdi,0x1
  00212:    	je     0x3be39
  00218: 26 	cmp    DWORD PTR [rip+0xffffffffffffc665],0x26        # 0xffffc884
  0021f:    	jne    0x3be39
  00225:    	sar    rdi,1
  00228:    	cvtsi2sd xmm6,rdi
:00021 
:00023 %14 = dynvar(1, %1)
  0022d:    	mov    rax,QWORD PTR [rbp-0x10]
  00231:    	mov    rax,QWORD PTR [rax-0x20]
  00235: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %7 = %14.call to_f()                 [Integer]
  0023c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00243: 00 	test   rdi,0x1
  0024a:    	je     0x3be7c
  00250: 26 	cmp    DWORD PTR [rip+0xffffffffffffc62d],0x26        # 0xffffc884
  00257:    	jne    0x3be7c
  0025d:    	sar    rdi,1
  00260:    	cvtsi2sd xmm7,rdi
:00025 
:00027 %14 = dynvar(4, %5)
  00265:    	mov    rax,QWORD PTR [rbp-0x10]
  00269:    	mov    rax,QWORD PTR [rax]
  0026c:    	mov    rax,QWORD PTR [rax]
  0026f:    	mov    rax,QWORD PTR [rax]
  00272:    	mov    rax,QWORD PTR [rax-0x40]
  00276: ff 	mov    QWORD PTR [rbp-0x98],rax
:00028 %14 = %6 / %14                       [Float][Float]
  0027d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00284: 00 	test   rdi,0x1
  0028b:    	jne    0x3becc
  00291: 00 	test   rdi,0x2
  00298:    	je     0x2d5
  0029e:    	xorps  xmm8,xmm8
  002a2: 00 	movabs rax,0x8000000000000002
  002ac:    	cmp    rdi,rax
  002af:    	je     0x2e8
  002b5:    	mov    rax,rdi
  002b8:    	sar    rax,0x3f
  002bc:    	add    rax,0x2
  002c0:    	and    rdi,0xfffffffffffffffc
  002c4:    	or     rdi,rax
  002c7:    	rol    rdi,0x3d
  002cb:    	movq   xmm8,rdi
  002d0:    	jmp    0x2e8
  002d5:    	call   0xffff9d95
  002da:    	test   rax,rax
  002dd:    	je     0x3becc
  002e3:    	movq   xmm8,xmm0
  002e8:    	movq   rax,xmm8
  002ed:    	test   rax,rax
  002f0:    	je     0xffff9d81
  002f6:    	movq   xmm0,xmm6
  002fa:    	divsd  xmm0,xmm8
  002ff:    	movq   xmm8,xmm0
:00029 %14 = %4 + %14                       [Float][Float]
  00304:    	addsd  xmm8,xmm4
:00030 %15 = literal[2.0]
  00309: 21 	movq   xmm9,QWORD PTR [rip+0x218f]        # 0x24a1
  00312: 00 	mov    rax,0x2
  00319: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00031 %15 = %2 / %15                       [Float][Float]
  00320:    	movq   rax,xmm9
  00325:    	test   rax,rax
  00328:    	je     0xffff9d81
  0032e:    	movq   xmm0,xmm2
  00332:    	divsd  xmm0,xmm9
  00337:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  0033c:    	subsd  xmm8,xmm9
:00033 %15 = literal[2.0]
  00341: 21 	movq   xmm9,QWORD PTR [rip+0x2167]        # 0x24b1
  0034a: 00 	mov    rax,0x2
  00351: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00034 %15 = %2 / %15                       [Float][Float]
  00358:    	movq   rax,xmm9
  0035d:    	test   rax,rax
  00360:    	je     0xffff9d81
  00366:    	movq   xmm0,xmm2
  0036a:    	divsd  xmm0,xmm9
  0036f:    	movq   xmm9,xmm0
:00035 %8 = %14 / %15                       [Float][Float]
  00374:    	movq   xmm10,xmm8
  00379:    	movq   rax,xmm9
  0037e:    	test   rax,rax
  00381:    	je     0xffff9d81
  00387:    	divsd  xmm10,xmm9
:00036 %14 = dynvar(4, %5)
  0038c:    	mov    rax,QWORD PTR [rbp-0x10]
  00390:    	mov    rax,QWORD PTR [rax]
  00393:    	mov    rax,QWORD PTR [rax]
  00396:    	mov    rax,QWORD PTR [rax]
  00399:    	mov    rax,QWORD PTR [rax-0x40]
  0039d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00037 %14 = %7 / %14                       [Float][Float]
  003a4: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003ab: 00 	test   rdi,0x1
  003b2:    	jne    0x3bf29
  003b8: 00 	test   rdi,0x2
  003bf:    	je     0x3fc
  003c5:    	xorps  xmm8,xmm8
  003c9: 00 	movabs rax,0x8000000000000002
  003d3:    	cmp    rdi,rax
  003d6:    	je     0x40f
  003dc:    	mov    rax,rdi
  003df:    	sar    rax,0x3f
  003e3:    	add    rax,0x2
  003e7:    	and    rdi,0xfffffffffffffffc
  003eb:    	or     rdi,rax
  003ee:    	rol    rdi,0x3d
  003f2:    	movq   xmm8,rdi
  003f7:    	jmp    0x40f
  003fc:    	call   0xffff9d95
  00401:    	test   rax,rax
  00404:    	je     0x3bf29
  0040a:    	movq   xmm8,xmm0
  0040f:    	movq   rax,xmm8
  00414:    	test   rax,rax
  00417:    	je     0xffff9d81
  0041d:    	movq   xmm0,xmm7
  00421:    	divsd  xmm0,xmm8
  00426:    	movq   xmm8,xmm0
:00038 %14 = %5 + %14                       [Float][Float]
  0042b:    	addsd  xmm8,xmm5
:00039 %15 = literal[2.0]
  00430: 20 	movq   xmm9,QWORD PTR [rip+0x2088]        # 0x24c1
  00439: 00 	mov    rax,0x2
  00440: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00040 %15 = %3 / %15                       [Float][Float]
  00447:    	movq   rax,xmm9
  0044c:    	test   rax,rax
  0044f:    	je     0xffff9d81
  00455:    	movq   xmm0,xmm3
  00459:    	divsd  xmm0,xmm9
  0045e:    	movq   xmm9,xmm0
:00041 %14 = %14 - %15                      [Float][Float]
  00463:    	subsd  xmm8,xmm9
:00042 %14 = neg %14                        [Float]
  00468: 00 	xorps  xmm8,XMMWORD PTR [rip+0x2061]        # 0x24d1
:00043 %15 = literal[2.0]
  00470: 20 	movq   xmm9,QWORD PTR [rip+0x2068]        # 0x24e1
  00479: 00 	mov    rax,0x2
  00480: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00044 %15 = %3 / %15                       [Float][Float]
  00487:    	movq   rax,xmm9
  0048c:    	test   rax,rax
  0048f:    	je     0xffff9d81
  00495:    	movq   xmm0,xmm3
  00499:    	divsd  xmm0,xmm9
  0049e:    	movq   xmm9,xmm0
:00045 %9 = %14 / %15                       [Float][Float]
  004a3:    	movq   xmm11,xmm8
  004a8:    	movq   rax,xmm9
  004ad:    	test   rax,rax
  004b0:    	je     0xffff9d81
  004b6:    	divsd  xmm11,xmm9
:00046 %15 = const[Vec]                     [Vec]
  004bb: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc3cf]        # 0xffffc891
  004c2: 00 	cmp    rax,QWORD PTR [rip+0x2038]        # 0x2501
  004c9:    	jne    0x3bfa5
  004cf: 00 	mov    rax,QWORD PTR [rip+0x201b]        # 0x24f1
  004d6: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00047 %16 = %8
:00048 %17 = %9
:00049 %18 = literal[-1.0]
  004dd: 20 	movq   xmm9,QWORD PTR [rip+0x202b]        # 0x2511
  004e6: 00 	movabs rax,0xff80000000000006
  004f0: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00050 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
  004f7:    	movq   xmm0,xmm10
  004fc:    	call   0xffff9e88
  00501: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00508:    	movq   xmm0,xmm11
  0050d:    	call   0xffff9e88
  00512: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00519: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00520: 00 	test   rdi,0x7
  00527:    	jne    0x3c063
  0052d:    	cmp    DWORD PTR [rdi+0x4],0x29
  00531:    	jne    0x3c063
  00537: 26 	cmp    DWORD PTR [rip+0xffffffffffffc346],0x26        # 0xffffc884
  0053e:    	jne    0x3c063
  00544: 00 	mov    r9,0x0
  0054b:    	sub    rsp,0x50
  0054f:    	movq   QWORD PTR [rsp],xmm2
  00554:    	movq   QWORD PTR [rsp+0x8],xmm3
  0055a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00560:    	movq   QWORD PTR [rsp+0x18],xmm5
  00566:    	movq   QWORD PTR [rsp+0x20],xmm6
  0056c:    	movq   QWORD PTR [rsp+0x28],xmm7
  00572: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00579: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00580: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00587:    	mov    rdx,rdi
  0058a:    	mov    rax,QWORD PTR [rbx]
  0058d:    	lea    rdi,[rsp-0x18]
  00592:    	mov    QWORD PTR [rdi],rax
  00595:    	mov    QWORD PTR [rbx],rdi
  00598: 00 	mov    QWORD PTR [rsp-0x20],0x0
  005a1:    	mov    QWORD PTR [rsp-0x38],rcx
  005a6: ff 	lea    rcx,[rbp-0xa8]
  005ad: 00 	mov    r8,0x3
  005b4:    	call   0x3c0dc
  005b9:    	lea    rdi,[rbp-0x8]
  005bd:    	mov    QWORD PTR [rbx],rdi
  005c0:    	movq   xmm2,QWORD PTR [rsp]
  005c5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005cb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005d1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005d7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  005dd:    	movq   xmm7,QWORD PTR [rsp+0x28]
  005e3: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  005ea: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  005f1: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  005f8:    	add    rsp,0x50
  005fc: 00 	movabs r13,0x5600b92f0ca0
  00606:    	test   rax,rax
  00609:    	je     0xffff9d5c
  0060f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00051 
:00053 %10 = %14.call vnormalize()          [Vec]
  00616: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0061d: 00 	test   rdi,0x7
  00624:    	jne    0x3c10e
  0062a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0062e:    	jne    0x3c10e
  00634: 26 	cmp    DWORD PTR [rip+0xffffffffffffc249],0x26        # 0xffffc884
  0063b:    	jne    0x3c10e
  00641:    	sub    rsp,0x50
  00645:    	movq   QWORD PTR [rsp],xmm2
  0064a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00650:    	movq   QWORD PTR [rsp+0x10],xmm4
  00656:    	movq   QWORD PTR [rsp+0x18],xmm5
  0065c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00662:    	movq   QWORD PTR [rsp+0x28],xmm7
  00668: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0066f: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00676: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  0067d:    	mov    rax,QWORD PTR [rbx]
  00680:    	lea    rdi,[rsp-0x18]
  00685:    	mov    QWORD PTR [rdi],rax
  00688:    	mov    QWORD PTR [rbx],rdi
  0068b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00694:    	mov    QWORD PTR [rsp-0x38],rcx
  00699: ff 	mov    rax,QWORD PTR [rbp-0x98]
  006a0:    	mov    QWORD PTR [rsp-0x38],rax
  006a5: 00 	mov    rdi,0x0
  006ac: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006b5: 07 	movabs rax,0x700000043
  006bf:    	mov    QWORD PTR [rsp-0x28],rax
  006c4: 00 	movabs r13,0x5600b92c5690
  006ce:    	call   0xffffd1ab
  006d3:    	lea    rdi,[rbp-0x8]
  006d7:    	mov    QWORD PTR [rbx],rdi
  006da:    	movq   xmm2,QWORD PTR [rsp]
  006df:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006e5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006eb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006f1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  006f7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  006fd: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00704: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0070b: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00712:    	add    rsp,0x50
  00716: 00 	movabs r13,0x5600b92f0cd0
  00720:    	test   rax,rax
  00723:    	je     0xffff9d5c
  00729:    	mov    QWORD PTR [rbp-0x78],rax
:00054 
:00056 %14 = const[Ray]                     [Ray]
  0072d: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc15d]        # 0xffffc891
  00734: 00 	cmp    rax,QWORD PTR [rip+0x1df6]        # 0x2531
  0073b:    	jne    0x3c187
  00741: 00 	mov    rax,QWORD PTR [rip+0x1dd9]        # 0x2521
  00748: ff 	mov    QWORD PTR [rbp-0x98],rax
:00057 %16 = const[Vec]                     [Vec]
  0074f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc13b]        # 0xffffc891
  00756: 00 	cmp    rax,QWORD PTR [rip+0x1df4]        # 0x2551
  0075d:    	jne    0x3c245
  00763: 00 	mov    rax,QWORD PTR [rip+0x1dd7]        # 0x2541
  0076a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00058 %17 = literal[0.0]
  00771: 1d 	movq   xmm8,QWORD PTR [rip+0x1de7]        # 0x2561
  0077a: 00 	movabs rax,0x8000000000000002
  00784: ff 	mov    QWORD PTR [rbp-0xb0],rax
:00059 %18 = literal[0.0]
  0078b: 1d 	movq   xmm9,QWORD PTR [rip+0x1ddd]        # 0x2571
  00794: 00 	movabs rax,0x8000000000000002
  0079e: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00060 %19 = literal[0.0]
  007a5: 1d 	movq   xmm12,QWORD PTR [rip+0x1dd3]        # 0x2581
  007ae: 00 	movabs rax,0x8000000000000002
  007b8: ff 	mov    QWORD PTR [rbp-0xc0],rax
:00061 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
  007bf: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  007c6: 00 	test   rdi,0x7
  007cd:    	jne    0x3c303
  007d3:    	cmp    DWORD PTR [rdi+0x4],0x29
  007d7:    	jne    0x3c303
  007dd: 26 	cmp    DWORD PTR [rip+0xffffffffffffc0a0],0x26        # 0xffffc884
  007e4:    	jne    0x3c303
  007ea: 00 	mov    r9,0x0
  007f1:    	sub    rsp,0x60
  007f5:    	movq   QWORD PTR [rsp],xmm2
  007fa:    	movq   QWORD PTR [rsp+0x8],xmm3
  00800:    	movq   QWORD PTR [rsp+0x10],xmm4
  00806:    	movq   QWORD PTR [rsp+0x18],xmm5
  0080c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00812:    	movq   QWORD PTR [rsp+0x28],xmm7
  00818: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0081f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00826: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0082d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00834: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0083b:    	mov    rdx,rdi
  0083e:    	mov    rax,QWORD PTR [rbx]
  00841:    	lea    rdi,[rsp-0x18]
  00846:    	mov    QWORD PTR [rdi],rax
  00849:    	mov    QWORD PTR [rbx],rdi
  0084c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00855:    	mov    QWORD PTR [rsp-0x38],rcx
  0085a: ff 	lea    rcx,[rbp-0xb0]
  00861: 00 	mov    r8,0x3
  00868:    	call   0x3c37c
  0086d:    	lea    rdi,[rbp-0x8]
  00871:    	mov    QWORD PTR [rbx],rdi
  00874:    	movq   xmm2,QWORD PTR [rsp]
  00879:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0087f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00885:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0088b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00891:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00897: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0089e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008a5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008ac: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008b3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008ba:    	add    rsp,0x60
  008be: 00 	movabs r13,0x5600b92f0d50
  008c8:    	test   rax,rax
  008cb:    	je     0xffff9d5c
  008d1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00062 
:00064 %16 = %10
  008d8:    	mov    rax,QWORD PTR [rbp-0x78]
  008dc: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00065 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  008e3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  008ea: 00 	test   rdi,0x7
  008f1:    	jne    0x3c3ae
  008f7:    	cmp    DWORD PTR [rdi+0x4],0x2f
  008fb:    	jne    0x3c3ae
  00901: 26 	cmp    DWORD PTR [rip+0xffffffffffffbf7c],0x26        # 0xffffc884
  00908:    	jne    0x3c3ae
  0090e: 00 	mov    r9,0x0
  00915:    	sub    rsp,0x60
  00919:    	movq   QWORD PTR [rsp],xmm2
  0091e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00924:    	movq   QWORD PTR [rsp+0x10],xmm4
  0092a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00930:    	movq   QWORD PTR [rsp+0x20],xmm6
  00936:    	movq   QWORD PTR [rsp+0x28],xmm7
  0093c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00943: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0094a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00951: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00958: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0095f:    	mov    rdx,rdi
  00962:    	mov    rax,QWORD PTR [rbx]
  00965:    	lea    rdi,[rsp-0x18]
  0096a:    	mov    QWORD PTR [rdi],rax
  0096d:    	mov    QWORD PTR [rbx],rdi
  00970: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00979:    	mov    QWORD PTR [rsp-0x38],rcx
  0097e: ff 	lea    rcx,[rbp-0xa0]
  00985: 00 	mov    r8,0x2
  0098c:    	call   0x3c427
  00991:    	lea    rdi,[rbp-0x8]
  00995:    	mov    QWORD PTR [rbx],rdi
  00998:    	movq   xmm2,QWORD PTR [rsp]
  0099d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009a3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009a9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009af:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009b5:    	movq   xmm7,QWORD PTR [rsp+0x28]
  009bb: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  009c2: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  009c9: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  009d0: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  009d7: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  009de:    	add    rsp,0x60
  009e2: 00 	movabs r13,0x5600b92f0d90
  009ec:    	test   rax,rax
  009ef:    	je     0xffff9d5c
  009f5:    	mov    QWORD PTR [rbp-0x80],rax
:00066 
:00068 %14 = const[Isect]                   [Isect]
  009f9: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffbe91]        # 0xffffc891
  00a00: 00 	cmp    rax,QWORD PTR [rip+0x1b9a]        # 0x25a1
  00a07:    	jne    0x3c459
  00a0d: 00 	mov    rax,QWORD PTR [rip+0x1b7d]        # 0x2591
  00a14: ff 	mov    QWORD PTR [rbp-0x98],rax
:00069 %12 = %14.call new()                 [#<Class:Isect>]
  00a1b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a22: 00 	test   rdi,0x7
  00a29:    	jne    0x3c533
  00a2f:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a33:    	jne    0x3c533
  00a39: 26 	cmp    DWORD PTR [rip+0xffffffffffffbe44],0x26        # 0xffffc884
  00a40:    	jne    0x3c533
  00a46: 00 	mov    r9,0x0
  00a4d:    	sub    rsp,0x60
  00a51:    	movq   QWORD PTR [rsp],xmm2
  00a56:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a5c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a62:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a68:    	movq   QWORD PTR [rsp+0x20],xmm6
  00a6e:    	movq   QWORD PTR [rsp+0x28],xmm7
  00a74: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00a7b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00a82: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00a89: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00a90: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00a97:    	mov    rdx,rdi
  00a9a:    	mov    rax,QWORD PTR [rbx]
  00a9d:    	lea    rdi,[rsp-0x18]
  00aa2:    	mov    QWORD PTR [rdi],rax
  00aa5:    	mov    QWORD PTR [rbx],rdi
  00aa8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ab1:    	mov    QWORD PTR [rsp-0x38],rcx
  00ab6: ff 	lea    rcx,[rbp-0xa0]
  00abd: 00 	mov    r8,0x0
  00ac4:    	call   0x3c5ac
  00ac9:    	lea    rdi,[rbp-0x8]
  00acd:    	mov    QWORD PTR [rbx],rdi
  00ad0:    	movq   xmm2,QWORD PTR [rsp]
  00ad5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00adb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ae1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ae7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00aed:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00af3: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00afa: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b01: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b08: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b0f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b16:    	add    rsp,0x60
  00b1a: 00 	movabs r13,0x5600b92f0dd0
  00b24:    	test   rax,rax
  00b27:    	je     0xffff9d5c
  00b2d: ff 	mov    QWORD PTR [rbp-0x88],rax
:00070 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00b34:    	mov    rdi,QWORD PTR [rbp-0x28]
  00b38:    	mov    rax,QWORD PTR [rdi+0x10]
  00b3c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00073 %15 = 0: i32
  00b43: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00074 %14 = %14.[%15]                      [Array][Integer]
  00b4e:    	sub    rsp,0x60
  00b52:    	movq   QWORD PTR [rsp],xmm2
  00b57:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b5d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b63:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b69:    	movq   QWORD PTR [rsp+0x20],xmm6
  00b6f:    	movq   QWORD PTR [rsp+0x28],xmm7
  00b75: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00b7c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00b83: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00b8a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00b91: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00b98: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00b9f: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00ba6:    	mov    rdi,rbx
  00ba9:    	mov    rsi,r12
  00bac: 00 	movabs r8,0x5600b92f0e08
  00bb6: 00 	movabs rax,0x5600b75c5240
  00bc0:    	call   rax
  00bc2:    	movq   xmm2,QWORD PTR [rsp]
  00bc7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bcd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00bd3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00bd9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00bdf:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00be5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00bec: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00bf3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00bfa: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c01: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c08:    	add    rsp,0x60
  00c0c: 00 	movabs r13,0x5600b92f0e10
  00c16:    	test   rax,rax
  00c19:    	je     0xffff9d5c
  00c1f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00075 %15 = %11
  00c26:    	mov    rax,QWORD PTR [rbp-0x80]
  00c2a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00076 %16 = %12
  00c31: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00c38: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00c3f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00c46: 00 	test   rdi,0x7
  00c4d:    	jne    0x3c5de
  00c53:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00c57:    	jne    0x3c5de
  00c5d: 26 	cmp    DWORD PTR [rip+0xffffffffffffbc20],0x26        # 0xffffc884
  00c64:    	jne    0x3c5de
  00c6a:    	sub    rsp,0x60
  00c6e:    	movq   QWORD PTR [rsp],xmm2
  00c73:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c79:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c7f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c85:    	movq   QWORD PTR [rsp+0x20],xmm6
  00c8b:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c91: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00c98: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00c9f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ca6: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00cad: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00cb4:    	mov    rax,QWORD PTR [rbx]
  00cb7:    	lea    rdi,[rsp-0x18]
  00cbc:    	mov    QWORD PTR [rdi],rax
  00cbf:    	mov    QWORD PTR [rbx],rdi
  00cc2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ccb:    	mov    QWORD PTR [rsp-0x38],rcx
  00cd0: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00cd7:    	mov    QWORD PTR [rsp-0x38],rax
  00cdc: 00 	mov    rdi,0x2
  00ce3: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00cea:    	mov    QWORD PTR [rsp-0x40],rax
  00cef: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00cf6:    	mov    QWORD PTR [rsp-0x48],rax
  00cfb: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d04: 10 	movabs rax,0x1000000045
  00d0e:    	mov    QWORD PTR [rsp-0x28],rax
  00d13: 00 	movabs r13,0x5600b92b5360
  00d1d:    	call   0xffffd4b3
  00d22:    	lea    rdi,[rbp-0x8]
  00d26:    	mov    QWORD PTR [rbx],rdi
  00d29:    	movq   xmm2,QWORD PTR [rsp]
  00d2e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d34:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d3a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d40:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d46:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d4c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00d53: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00d5a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00d61: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00d68: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00d6f:    	add    rsp,0x60
  00d73: 00 	movabs r13,0x5600b92f0e50
  00d7d:    	test   rax,rax
  00d80:    	je     0xffff9d5c
:00078 
:00080 %14 = @spheres: Scene[IvarId(0)]
  00d86:    	mov    rdi,QWORD PTR [rbp-0x28]
  00d8a:    	mov    rax,QWORD PTR [rdi+0x10]
  00d8e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00081 %15 = 1: i32
  00d95: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  00da0:    	sub    rsp,0x60
  00da4:    	movq   QWORD PTR [rsp],xmm2
  00da9:    	movq   QWORD PTR [rsp+0x8],xmm3
  00daf:    	movq   QWORD PTR [rsp+0x10],xmm4
  00db5:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dbb:    	movq   QWORD PTR [rsp+0x20],xmm6
  00dc1:    	movq   QWORD PTR [rsp+0x28],xmm7
  00dc7: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00dce: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00dd5: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ddc: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00de3: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00dea: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00df1: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00df8:    	mov    rdi,rbx
  00dfb:    	mov    rsi,r12
  00dfe: 00 	movabs r8,0x5600b92f0e88
  00e08: 00 	movabs rax,0x5600b75c5240
  00e12:    	call   rax
  00e14:    	movq   xmm2,QWORD PTR [rsp]
  00e19:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e1f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e25:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e2b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e31:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e37: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00e3e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00e45: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00e4c: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00e53: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00e5a:    	add    rsp,0x60
  00e5e: 00 	movabs r13,0x5600b92f0e90
  00e68:    	test   rax,rax
  00e6b:    	je     0xffff9d5c
  00e71: ff 	mov    QWORD PTR [rbp-0x98],rax
:00083 %15 = %11
  00e78:    	mov    rax,QWORD PTR [rbp-0x80]
  00e7c: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00084 %16 = %12
  00e83: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00e8a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00085 _ = %14.call intersect(%15; 2)       [Sphere]
  00e91: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e98: 00 	test   rdi,0x7
  00e9f:    	jne    0x3c657
  00ea5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00ea9:    	jne    0x3c657
  00eaf: 26 	cmp    DWORD PTR [rip+0xffffffffffffb9ce],0x26        # 0xffffc884
  00eb6:    	jne    0x3c657
  00ebc:    	sub    rsp,0x60
  00ec0:    	movq   QWORD PTR [rsp],xmm2
  00ec5:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ecb:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ed1:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ed7:    	movq   QWORD PTR [rsp+0x20],xmm6
  00edd:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ee3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00eea: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00ef1: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ef8: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00eff: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f06:    	mov    rax,QWORD PTR [rbx]
  00f09:    	lea    rdi,[rsp-0x18]
  00f0e:    	mov    QWORD PTR [rdi],rax
  00f11:    	mov    QWORD PTR [rbx],rdi
  00f14: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f1d:    	mov    QWORD PTR [rsp-0x38],rcx
  00f22: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00f29:    	mov    QWORD PTR [rsp-0x38],rax
  00f2e: 00 	mov    rdi,0x2
  00f35: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00f3c:    	mov    QWORD PTR [rsp-0x40],rax
  00f41: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00f48:    	mov    QWORD PTR [rsp-0x48],rax
  00f4d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f56: 10 	movabs rax,0x1000000045
  00f60:    	mov    QWORD PTR [rsp-0x28],rax
  00f65: 00 	movabs r13,0x5600b92b5360
  00f6f:    	call   0xffffd4b3
  00f74:    	lea    rdi,[rbp-0x8]
  00f78:    	mov    QWORD PTR [rbx],rdi
  00f7b:    	movq   xmm2,QWORD PTR [rsp]
  00f80:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f86:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f8c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f92:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f98:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f9e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00fa5: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00fac: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00fb3: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00fba: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00fc1:    	add    rsp,0x60
  00fc5: 00 	movabs r13,0x5600b92f0ed0
  00fcf:    	test   rax,rax
  00fd2:    	je     0xffff9d5c
:00086 
:00088 %14 = @spheres: Scene[IvarId(0)]
  00fd8:    	mov    rdi,QWORD PTR [rbp-0x28]
  00fdc:    	mov    rax,QWORD PTR [rdi+0x10]
  00fe0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %15 = 2: i32
  00fe7: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00090 %14 = %14.[%15]                      [Array][Integer]
  00ff2:    	sub    rsp,0x60
  00ff6:    	movq   QWORD PTR [rsp],xmm2
  00ffb:    	movq   QWORD PTR [rsp+0x8],xmm3
  01001:    	movq   QWORD PTR [rsp+0x10],xmm4
  01007:    	movq   QWORD PTR [rsp+0x18],xmm5
  0100d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01013:    	movq   QWORD PTR [rsp+0x28],xmm7
  01019: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01020: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01027: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0102e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01035: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0103c: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01043: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0104a:    	mov    rdi,rbx
  0104d:    	mov    rsi,r12
  01050: 00 	movabs r8,0x5600b92f0f08
  0105a: 00 	movabs rax,0x5600b75c5240
  01064:    	call   rax
  01066:    	movq   xmm2,QWORD PTR [rsp]
  0106b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01071:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01077:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0107d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01083:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01089: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01090: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01097: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0109e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  010a5: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  010ac:    	add    rsp,0x60
  010b0: 00 	movabs r13,0x5600b92f0f10
  010ba:    	test   rax,rax
  010bd:    	je     0xffff9d5c
  010c3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00091 %15 = %11
  010ca:    	mov    rax,QWORD PTR [rbp-0x80]
  010ce: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00092 %16 = %12
  010d5: ff 	mov    rax,QWORD PTR [rbp-0x88]
  010dc: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00093 _ = %14.call intersect(%15; 2)       [Sphere]
  010e3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  010ea: 00 	test   rdi,0x7
  010f1:    	jne    0x3c6d0
  010f7:    	cmp    DWORD PTR [rdi+0x4],0x2a
  010fb:    	jne    0x3c6d0
  01101: 26 	cmp    DWORD PTR [rip+0xffffffffffffb77c],0x26        # 0xffffc884
  01108:    	jne    0x3c6d0
  0110e:    	sub    rsp,0x60
  01112:    	movq   QWORD PTR [rsp],xmm2
  01117:    	movq   QWORD PTR [rsp+0x8],xmm3
  0111d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01123:    	movq   QWORD PTR [rsp+0x18],xmm5
  01129:    	movq   QWORD PTR [rsp+0x20],xmm6
  0112f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01135: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0113c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01143: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0114a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01151: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01158:    	mov    rax,QWORD PTR [rbx]
  0115b:    	lea    rdi,[rsp-0x18]
  01160:    	mov    QWORD PTR [rdi],rax
  01163:    	mov    QWORD PTR [rbx],rdi
  01166: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0116f:    	mov    QWORD PTR [rsp-0x38],rcx
  01174: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0117b:    	mov    QWORD PTR [rsp-0x38],rax
  01180: 00 	mov    rdi,0x2
  01187: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0118e:    	mov    QWORD PTR [rsp-0x40],rax
  01193: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  0119a:    	mov    QWORD PTR [rsp-0x48],rax
  0119f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011a8: 10 	movabs rax,0x1000000045
  011b2:    	mov    QWORD PTR [rsp-0x28],rax
  011b7: 00 	movabs r13,0x5600b92b5360
  011c1:    	call   0xffffd4b3
  011c6:    	lea    rdi,[rbp-0x8]
  011ca:    	mov    QWORD PTR [rbx],rdi
  011cd:    	movq   xmm2,QWORD PTR [rsp]
  011d2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  011d8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  011de:    	movq   xmm5,QWORD PTR [rsp+0x18]
  011e4:    	movq   xmm6,QWORD PTR [rsp+0x20]
  011ea:    	movq   xmm7,QWORD PTR [rsp+0x28]
  011f0: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  011f7: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  011fe: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01205: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0120c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01213:    	add    rsp,0x60
  01217: 00 	movabs r13,0x5600b92f0f50
  01221:    	test   rax,rax
  01224:    	je     0xffff9d5c
:00094 
:00096 %14 = @plane: Scene[IvarId(1)]
  0122a:    	mov    rdi,QWORD PTR [rbp-0x28]
  0122e:    	mov    rax,QWORD PTR [rdi+0x18]
  01232: ff 	mov    QWORD PTR [rbp-0x98],rax
:00097 %15 = %11
  01239:    	mov    rax,QWORD PTR [rbp-0x80]
  0123d: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00098 %16 = %12
  01244: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0124b: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00099 _ = %14.call intersect(%15; 2)       [Plane]
  01252: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01259: 00 	test   rdi,0x7
  01260:    	jne    0x3c749
  01266:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0126a:    	jne    0x3c749
  01270: 26 	cmp    DWORD PTR [rip+0xffffffffffffb60d],0x26        # 0xffffc884
  01277:    	jne    0x3c749
  0127d:    	sub    rsp,0x60
  01281:    	movq   QWORD PTR [rsp],xmm2
  01286:    	movq   QWORD PTR [rsp+0x8],xmm3
  0128c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01292:    	movq   QWORD PTR [rsp+0x18],xmm5
  01298:    	movq   QWORD PTR [rsp+0x20],xmm6
  0129e:    	movq   QWORD PTR [rsp+0x28],xmm7
  012a4: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  012ab: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  012b2: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  012b9: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  012c0: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  012c7:    	mov    rax,QWORD PTR [rbx]
  012ca:    	lea    rdi,[rsp-0x18]
  012cf:    	mov    QWORD PTR [rdi],rax
  012d2:    	mov    QWORD PTR [rbx],rdi
  012d5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012de:    	mov    QWORD PTR [rsp-0x38],rcx
  012e3: ff 	mov    rax,QWORD PTR [rbp-0x98]
  012ea:    	mov    QWORD PTR [rsp-0x38],rax
  012ef: 00 	mov    rdi,0x2
  012f6: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  012fd:    	mov    QWORD PTR [rsp-0x40],rax
  01302: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01309:    	mov    QWORD PTR [rsp-0x48],rax
  0130e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01317: 0e 	movabs rax,0xe00000047
  01321:    	mov    QWORD PTR [rsp-0x28],rax
  01326: 00 	movabs r13,0x5600b92b7200
  01330:    	call   0xffffdaa9
  01335:    	lea    rdi,[rbp-0x8]
  01339:    	mov    QWORD PTR [rbx],rdi
  0133c:    	movq   xmm2,QWORD PTR [rsp]
  01341:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01347:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0134d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01353:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01359:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0135f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01366: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0136d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01374: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0137b: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01382:    	add    rsp,0x60
  01386: 00 	movabs r13,0x5600b92f0fb0
  01390:    	test   rax,rax
  01393:    	je     0xffff9d5c
:00100 
:00102 %14 = %12.call hit()                 [Isect]
  01399: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  013a0: 00 	test   rdi,0x7
  013a7:    	jne    0x3c7c2
  013ad:    	cmp    DWORD PTR [rdi+0x4],0x30
  013b1:    	jne    0x3c7c2
  013b7: 26 	cmp    DWORD PTR [rip+0xffffffffffffb4c6],0x26        # 0xffffc884
  013be:    	jne    0x3c7c2
  013c4:    	mov    esi,DWORD PTR [rip+0x11e3]        # 0x25ad
  013ca:    	cmp    esi,0xffffffff
  013cd:    	je     0x3c83b
  013d3:    	cmp    WORD PTR [rdi+0x2],0x3
  013d8:    	jne    0x13f1
  013de:    	cmp    esi,0x6
  013e1:    	jge    0x13f1
  013e7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013ec:    	jmp    0x1491
  013f1:    	sub    rsp,0x60
  013f5:    	movq   QWORD PTR [rsp],xmm2
  013fa:    	movq   QWORD PTR [rsp+0x8],xmm3
  01400:    	movq   QWORD PTR [rsp+0x10],xmm4
  01406:    	movq   QWORD PTR [rsp+0x18],xmm5
  0140c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01412:    	movq   QWORD PTR [rsp+0x28],xmm7
  01418: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0141f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01426: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0142d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01434: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0143b: 00 	movabs rax,0x5600b755dfe0
  01445:    	call   rax
  01447:    	movq   xmm2,QWORD PTR [rsp]
  0144c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01452:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01458:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0145e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01464:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0146a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01471: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01478: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0147f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01486: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0148d:    	add    rsp,0x60
  01491: ff 	mov    QWORD PTR [rbp-0x98],rax
:00103 
:00105 condnotbr %14 =>:00148
  01498: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0149f:    	or     rax,0x10
  014a3:    	cmp    rax,0x14
  014a7:    	je     0x2487
:00106 %14 = %12
  014ad: ff 	mov    rax,QWORD PTR [rbp-0x88]
  014b4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00107 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
  014bb: 01 	sub    DWORD PTR [rip+0x10ef],0x1        # 0x25b1
  014c2:    	je     0x3c971
  014c8:    	sub    rsp,0x60
  014cc:    	movq   QWORD PTR [rsp],xmm2
  014d1:    	movq   QWORD PTR [rsp+0x8],xmm3
  014d7:    	movq   QWORD PTR [rsp+0x10],xmm4
  014dd:    	movq   QWORD PTR [rsp+0x18],xmm5
  014e3:    	movq   QWORD PTR [rsp+0x20],xmm6
  014e9:    	movq   QWORD PTR [rsp+0x28],xmm7
  014ef: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014f6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014fd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01504: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0150b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01512:    	mov    r15d,0x32
  01518: 00 	cmp    r15d,DWORD PTR [rip+0x109a]        # 0x25b9
  0151f:    	jne    0x3c993
  01525:    	mov    eax,DWORD PTR [rip+0xffffffffffffb359]        # 0xffffc884
  0152b:    	cmp    DWORD PTR [rip+0x1084],eax        # 0x25b5
  01531:    	jne    0x3c993
  01537:    	mov    rax,QWORD PTR [rbx]
  0153a:    	lea    rdi,[rsp-0x18]
  0153f:    	mov    QWORD PTR [rdi],rax
  01542:    	mov    QWORD PTR [rbx],rdi
  01545: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0154e:    	mov    QWORD PTR [rsp-0x38],rcx
  01553:    	mov    rax,QWORD PTR [rbp-0x28]
  01557:    	mov    QWORD PTR [rsp-0x38],rax
  0155c: 00 	mov    rdi,0x1
  01563: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0156a:    	mov    QWORD PTR [rsp-0x40],rax
  0156f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01578: 00 	movabs rax,0x0
  01582:    	mov    QWORD PTR [rsp-0x28],rax
  01587: 00 	movabs r13,0x0
  01591:    	call   0xffff9d21
  01596:    	lea    rdi,[rbp-0x8]
  0159a:    	mov    QWORD PTR [rbx],rdi
  0159d:    	movq   xmm2,QWORD PTR [rsp]
  015a2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015a8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015ae:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015b4:    	movq   xmm6,QWORD PTR [rsp+0x20]
  015ba:    	movq   xmm7,QWORD PTR [rsp+0x28]
  015c0: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  015c7: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  015ce: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  015d5: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  015dc: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  015e3:    	add    rsp,0x60
  015e7:    	test   rax,rax
  015ea:    	je     0x3c9ff
  015f0: ff 	mov    QWORD PTR [rbp-0x90],rax
:00108 
:00110 %14 = dynvar(2, %2)
  015f7:    	mov    rax,QWORD PTR [rbp-0x10]
  015fb:    	mov    rax,QWORD PTR [rax]
  015fe:    	mov    rax,QWORD PTR [rax-0x28]
  01602: ff 	mov    QWORD PTR [rbp-0x98],rax
:00111 %16 = dynvar(2, %2)
  01609:    	mov    rax,QWORD PTR [rbp-0x10]
  0160d:    	mov    rax,QWORD PTR [rax]
  01610:    	mov    rax,QWORD PTR [rax-0x28]
  01614: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00112 %15 = %16.call x()                   [<INVALID>]
  0161b: 01 	sub    DWORD PTR [rip+0xf9b],0x1        # 0x25bd
  01622:    	je     0x3ca87
  01628:    	sub    rsp,0x60
  0162c:    	movq   QWORD PTR [rsp],xmm2
  01631:    	movq   QWORD PTR [rsp+0x8],xmm3
  01637:    	movq   QWORD PTR [rsp+0x10],xmm4
  0163d:    	movq   QWORD PTR [rsp+0x18],xmm5
  01643:    	movq   QWORD PTR [rsp+0x20],xmm6
  01649:    	movq   QWORD PTR [rsp+0x28],xmm7
  0164f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01656: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0165d: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01664: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0166b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01672: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01679: 00 	movabs rax,0x5600b75a2280
  01683:    	call   rax
  01685:    	mov    r15d,eax
  01688: 00 	cmp    r15d,DWORD PTR [rip+0xf36]        # 0x25c5
  0168f:    	jne    0x3caa9
  01695:    	mov    eax,DWORD PTR [rip+0xffffffffffffb1e9]        # 0xffffc884
  0169b:    	cmp    DWORD PTR [rip+0xf20],eax        # 0x25c1
  016a1:    	jne    0x3caa9
  016a7:    	mov    rax,QWORD PTR [rbx]
  016aa:    	lea    rdi,[rsp-0x18]
  016af:    	mov    QWORD PTR [rdi],rax
  016b2:    	mov    QWORD PTR [rbx],rdi
  016b5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016be:    	mov    QWORD PTR [rsp-0x38],rcx
  016c3: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  016ca:    	mov    QWORD PTR [rsp-0x38],rax
  016cf: 00 	mov    rdi,0x0
  016d6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016df: 00 	movabs rax,0x0
  016e9:    	mov    QWORD PTR [rsp-0x28],rax
  016ee: 00 	movabs r13,0x0
  016f8:    	call   0xffff9d21
  016fd:    	lea    rdi,[rbp-0x8]
  01701:    	mov    QWORD PTR [rbx],rdi
  01704:    	movq   xmm2,QWORD PTR [rsp]
  01709:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0170f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01715:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0171b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01721:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01727: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0172e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01735: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0173c: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01743: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0174a:    	add    rsp,0x60
  0174e:    	test   rax,rax
  01751:    	je     0x3cb18
  01757: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00113 
:00115 %16 = %13.call x()                   [<INVALID>]
  0175e: 01 	sub    DWORD PTR [rip+0xe64],0x1        # 0x25c9
  01765:    	je     0x3cba0
  0176b:    	sub    rsp,0x60
  0176f:    	movq   QWORD PTR [rsp],xmm2
  01774:    	movq   QWORD PTR [rsp+0x8],xmm3
  0177a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01780:    	movq   QWORD PTR [rsp+0x18],xmm5
  01786:    	movq   QWORD PTR [rsp+0x20],xmm6
  0178c:    	movq   QWORD PTR [rsp+0x28],xmm7
  01792: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01799: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  017a0: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  017a7: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  017ae: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  017b5: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  017bc: 00 	movabs rax,0x5600b75a2280
  017c6:    	call   rax
  017c8:    	mov    r15d,eax
  017cb: 00 	cmp    r15d,DWORD PTR [rip+0xdff]        # 0x25d1
  017d2:    	jne    0x3cbc2
  017d8:    	mov    eax,DWORD PTR [rip+0xffffffffffffb0a6]        # 0xffffc884
  017de:    	cmp    DWORD PTR [rip+0xde9],eax        # 0x25cd
  017e4:    	jne    0x3cbc2
  017ea:    	mov    rax,QWORD PTR [rbx]
  017ed:    	lea    rdi,[rsp-0x18]
  017f2:    	mov    QWORD PTR [rdi],rax
  017f5:    	mov    QWORD PTR [rbx],rdi
  017f8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01801:    	mov    QWORD PTR [rsp-0x38],rcx
  01806: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0180d:    	mov    QWORD PTR [rsp-0x38],rax
  01812: 00 	mov    rdi,0x0
  01819: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01822: 00 	movabs rax,0x0
  0182c:    	mov    QWORD PTR [rsp-0x28],rax
  01831: 00 	movabs r13,0x0
  0183b:    	call   0xffff9d21
  01840:    	lea    rdi,[rbp-0x8]
  01844:    	mov    QWORD PTR [rbx],rdi
  01847:    	movq   xmm2,QWORD PTR [rsp]
  0184c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01852:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01858:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0185e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01864:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0186a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01871: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01878: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0187f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01886: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0188d:    	add    rsp,0x60
  01891:    	test   rax,rax
  01894:    	je     0x3cc31
  0189a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00116 
:00118 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  018a1: 01 	sub    DWORD PTR [rip+0xd2d],0x1        # 0x25d5
  018a8:    	je     0x3ccb9
  018ae: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  018b5: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  018bc:    	sub    rsp,0x60
  018c0:    	movq   QWORD PTR [rsp],xmm2
  018c5:    	movq   QWORD PTR [rsp+0x8],xmm3
  018cb:    	movq   QWORD PTR [rsp+0x10],xmm4
  018d1:    	movq   QWORD PTR [rsp+0x18],xmm5
  018d7:    	movq   QWORD PTR [rsp+0x20],xmm6
  018dd:    	movq   QWORD PTR [rsp+0x28],xmm7
  018e3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  018ea: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  018f1: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  018f8: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  018ff: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01906:    	mov    rdx,rdi
  01909:    	mov    rcx,rsi
  0190c:    	mov    rdi,rbx
  0190f:    	mov    rsi,r12
  01912: 00 	movabs rax,0x5600b75970e0
  0191c:    	call   rax
  0191e:    	movq   xmm2,QWORD PTR [rsp]
  01923:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01929:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0192f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01935:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0193b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01941: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01948: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0194f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01956: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0195d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01964:    	add    rsp,0x60
  01968: 00 	movabs r13,0x5600b92f10d0
  01972:    	test   rax,rax
  01975:    	je     0xffff9d5c
  0197b: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00119 _ = %14.call x=(%15; 1)              [<INVALID>]
  01982: 01 	sub    DWORD PTR [rip+0xc50],0x1        # 0x25d9
  01989:    	je     0x3cd54
  0198f:    	sub    rsp,0x60
  01993:    	movq   QWORD PTR [rsp],xmm2
  01998:    	movq   QWORD PTR [rsp+0x8],xmm3
  0199e:    	movq   QWORD PTR [rsp+0x10],xmm4
  019a4:    	movq   QWORD PTR [rsp+0x18],xmm5
  019aa:    	movq   QWORD PTR [rsp+0x20],xmm6
  019b0:    	movq   QWORD PTR [rsp+0x28],xmm7
  019b6: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  019bd: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  019c4: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  019cb: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  019d2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  019d9: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  019e0: 00 	movabs rax,0x5600b75a2280
  019ea:    	call   rax
  019ec:    	mov    r15d,eax
  019ef: 00 	cmp    r15d,DWORD PTR [rip+0xbeb]        # 0x25e1
  019f6:    	jne    0x3cd76
  019fc:    	mov    eax,DWORD PTR [rip+0xffffffffffffae82]        # 0xffffc884
  01a02:    	cmp    DWORD PTR [rip+0xbd5],eax        # 0x25dd
  01a08:    	jne    0x3cd76
  01a0e:    	mov    rax,QWORD PTR [rbx]
  01a11:    	lea    rdi,[rsp-0x18]
  01a16:    	mov    QWORD PTR [rdi],rax
  01a19:    	mov    QWORD PTR [rbx],rdi
  01a1c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a25:    	mov    QWORD PTR [rsp-0x38],rcx
  01a2a: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01a31:    	mov    QWORD PTR [rsp-0x38],rax
  01a36: 00 	mov    rdi,0x1
  01a3d: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01a44:    	mov    QWORD PTR [rsp-0x40],rax
  01a49: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a52: 00 	movabs rax,0x0
  01a5c:    	mov    QWORD PTR [rsp-0x28],rax
  01a61: 00 	movabs r13,0x0
  01a6b:    	call   0xffff9d21
  01a70:    	lea    rdi,[rbp-0x8]
  01a74:    	mov    QWORD PTR [rbx],rdi
  01a77:    	movq   xmm2,QWORD PTR [rsp]
  01a7c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01a82:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01a88:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01a8e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01a94:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01a9a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01aa1: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01aa8: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01aaf: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01ab6: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01abd:    	add    rsp,0x60
  01ac1:    	test   rax,rax
  01ac4:    	je     0x3cde5
:00120 
:00122 %14 = dynvar(2, %2)
  01aca:    	mov    rax,QWORD PTR [rbp-0x10]
  01ace:    	mov    rax,QWORD PTR [rax]
  01ad1:    	mov    rax,QWORD PTR [rax-0x28]
  01ad5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00123 %16 = dynvar(2, %2)
  01adc:    	mov    rax,QWORD PTR [rbp-0x10]
  01ae0:    	mov    rax,QWORD PTR [rax]
  01ae3:    	mov    rax,QWORD PTR [rax-0x28]
  01ae7: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00124 %15 = %16.call y()                   [<INVALID>]
  01aee: 01 	sub    DWORD PTR [rip+0xaf0],0x1        # 0x25e5
  01af5:    	je     0x3ce6d
  01afb:    	sub    rsp,0x60
  01aff:    	movq   QWORD PTR [rsp],xmm2
  01b04:    	movq   QWORD PTR [rsp+0x8],xmm3
  01b0a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01b10:    	movq   QWORD PTR [rsp+0x18],xmm5
  01b16:    	movq   QWORD PTR [rsp+0x20],xmm6
  01b1c:    	movq   QWORD PTR [rsp+0x28],xmm7
  01b22: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01b29: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01b30: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01b37: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01b3e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01b45: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01b4c: 00 	movabs rax,0x5600b75a2280
  01b56:    	call   rax
  01b58:    	mov    r15d,eax
  01b5b: 00 	cmp    r15d,DWORD PTR [rip+0xa8b]        # 0x25ed
  01b62:    	jne    0x3ce8f
  01b68:    	mov    eax,DWORD PTR [rip+0xffffffffffffad16]        # 0xffffc884
  01b6e:    	cmp    DWORD PTR [rip+0xa75],eax        # 0x25e9
  01b74:    	jne    0x3ce8f
  01b7a:    	mov    rax,QWORD PTR [rbx]
  01b7d:    	lea    rdi,[rsp-0x18]
  01b82:    	mov    QWORD PTR [rdi],rax
  01b85:    	mov    QWORD PTR [rbx],rdi
  01b88: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b91:    	mov    QWORD PTR [rsp-0x38],rcx
  01b96: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01b9d:    	mov    QWORD PTR [rsp-0x38],rax
  01ba2: 00 	mov    rdi,0x0
  01ba9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01bb2: 00 	movabs rax,0x0
  01bbc:    	mov    QWORD PTR [rsp-0x28],rax
  01bc1: 00 	movabs r13,0x0
  01bcb:    	call   0xffff9d21
  01bd0:    	lea    rdi,[rbp-0x8]
  01bd4:    	mov    QWORD PTR [rbx],rdi
  01bd7:    	movq   xmm2,QWORD PTR [rsp]
  01bdc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01be2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01be8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01bee:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01bf4:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01bfa: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01c01: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01c08: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01c0f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01c16: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01c1d:    	add    rsp,0x60
  01c21:    	test   rax,rax
  01c24:    	je     0x3cefe
  01c2a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00125 
:00127 %16 = %13.call y()                   [<INVALID>]
  01c31: 01 	sub    DWORD PTR [rip+0x9b9],0x1        # 0x25f1
  01c38:    	je     0x3cf86
  01c3e:    	sub    rsp,0x60
  01c42:    	movq   QWORD PTR [rsp],xmm2
  01c47:    	movq   QWORD PTR [rsp+0x8],xmm3
  01c4d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01c53:    	movq   QWORD PTR [rsp+0x18],xmm5
  01c59:    	movq   QWORD PTR [rsp+0x20],xmm6
  01c5f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01c65: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01c6c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01c73: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01c7a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01c81: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01c88: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01c8f: 00 	movabs rax,0x5600b75a2280
  01c99:    	call   rax
  01c9b:    	mov    r15d,eax
  01c9e: 00 	cmp    r15d,DWORD PTR [rip+0x954]        # 0x25f9
  01ca5:    	jne    0x3cfa8
  01cab:    	mov    eax,DWORD PTR [rip+0xffffffffffffabd3]        # 0xffffc884
  01cb1:    	cmp    DWORD PTR [rip+0x93e],eax        # 0x25f5
  01cb7:    	jne    0x3cfa8
  01cbd:    	mov    rax,QWORD PTR [rbx]
  01cc0:    	lea    rdi,[rsp-0x18]
  01cc5:    	mov    QWORD PTR [rdi],rax
  01cc8:    	mov    QWORD PTR [rbx],rdi
  01ccb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01cd4:    	mov    QWORD PTR [rsp-0x38],rcx
  01cd9: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01ce0:    	mov    QWORD PTR [rsp-0x38],rax
  01ce5: 00 	mov    rdi,0x0
  01cec: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01cf5: 00 	movabs rax,0x0
  01cff:    	mov    QWORD PTR [rsp-0x28],rax
  01d04: 00 	movabs r13,0x0
  01d0e:    	call   0xffff9d21
  01d13:    	lea    rdi,[rbp-0x8]
  01d17:    	mov    QWORD PTR [rbx],rdi
  01d1a:    	movq   xmm2,QWORD PTR [rsp]
  01d1f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01d25:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01d2b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01d31:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01d37:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01d3d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01d44: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01d4b: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01d52: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01d59: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01d60:    	add    rsp,0x60
  01d64:    	test   rax,rax
  01d67:    	je     0x3d017
  01d6d: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00128 
:00130 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  01d74: 01 	sub    DWORD PTR [rip+0x882],0x1        # 0x25fd
  01d7b:    	je     0x3d09f
  01d81: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01d88: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  01d8f:    	sub    rsp,0x60
  01d93:    	movq   QWORD PTR [rsp],xmm2
  01d98:    	movq   QWORD PTR [rsp+0x8],xmm3
  01d9e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01da4:    	movq   QWORD PTR [rsp+0x18],xmm5
  01daa:    	movq   QWORD PTR [rsp+0x20],xmm6
  01db0:    	movq   QWORD PTR [rsp+0x28],xmm7
  01db6: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01dbd: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01dc4: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01dcb: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01dd2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01dd9:    	mov    rdx,rdi
  01ddc:    	mov    rcx,rsi
  01ddf:    	mov    rdi,rbx
  01de2:    	mov    rsi,r12
  01de5: 00 	movabs rax,0x5600b75970e0
  01def:    	call   rax
  01df1:    	movq   xmm2,QWORD PTR [rsp]
  01df6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01dfc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e02:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e08:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e0e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e14: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e1b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01e22: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01e29: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01e30: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01e37:    	add    rsp,0x60
  01e3b: 00 	movabs r13,0x5600b92f1190
  01e45:    	test   rax,rax
  01e48:    	je     0xffff9d5c
  01e4e: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00131 _ = %14.call y=(%15; 1)              [<INVALID>]
  01e55: 01 	sub    DWORD PTR [rip+0x7a5],0x1        # 0x2601
  01e5c:    	je     0x3d13a
  01e62:    	sub    rsp,0x60
  01e66:    	movq   QWORD PTR [rsp],xmm2
  01e6b:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e71:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e77:    	movq   QWORD PTR [rsp+0x18],xmm5
  01e7d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01e83:    	movq   QWORD PTR [rsp+0x28],xmm7
  01e89: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01e90: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01e97: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01e9e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01ea5: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01eac: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01eb3: 00 	movabs rax,0x5600b75a2280
  01ebd:    	call   rax
  01ebf:    	mov    r15d,eax
  01ec2: 00 	cmp    r15d,DWORD PTR [rip+0x740]        # 0x2609
  01ec9:    	jne    0x3d15c
  01ecf:    	mov    eax,DWORD PTR [rip+0xffffffffffffa9af]        # 0xffffc884
  01ed5:    	cmp    DWORD PTR [rip+0x72a],eax        # 0x2605
  01edb:    	jne    0x3d15c
  01ee1:    	mov    rax,QWORD PTR [rbx]
  01ee4:    	lea    rdi,[rsp-0x18]
  01ee9:    	mov    QWORD PTR [rdi],rax
  01eec:    	mov    QWORD PTR [rbx],rdi
  01eef: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01ef8:    	mov    QWORD PTR [rsp-0x38],rcx
  01efd: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01f04:    	mov    QWORD PTR [rsp-0x38],rax
  01f09: 00 	mov    rdi,0x1
  01f10: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01f17:    	mov    QWORD PTR [rsp-0x40],rax
  01f1c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01f25: 00 	movabs rax,0x0
  01f2f:    	mov    QWORD PTR [rsp-0x28],rax
  01f34: 00 	movabs r13,0x0
  01f3e:    	call   0xffff9d21
  01f43:    	lea    rdi,[rbp-0x8]
  01f47:    	mov    QWORD PTR [rbx],rdi
  01f4a:    	movq   xmm2,QWORD PTR [rsp]
  01f4f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01f55:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01f5b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01f61:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01f67:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01f6d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01f74: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01f7b: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01f82: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01f89: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01f90:    	add    rsp,0x60
  01f94:    	test   rax,rax
  01f97:    	je     0x3d1cb
:00132 
:00134 %14 = dynvar(2, %2)
  01f9d:    	mov    rax,QWORD PTR [rbp-0x10]
  01fa1:    	mov    rax,QWORD PTR [rax]
  01fa4:    	mov    rax,QWORD PTR [rax-0x28]
  01fa8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00135 %16 = dynvar(2, %2)
  01faf:    	mov    rax,QWORD PTR [rbp-0x10]
  01fb3:    	mov    rax,QWORD PTR [rax]
  01fb6:    	mov    rax,QWORD PTR [rax-0x28]
  01fba: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00136 %15 = %16.call z()                   [<INVALID>]
  01fc1: 01 	sub    DWORD PTR [rip+0x645],0x1        # 0x260d
  01fc8:    	je     0x3d253
  01fce:    	sub    rsp,0x60
  01fd2:    	movq   QWORD PTR [rsp],xmm2
  01fd7:    	movq   QWORD PTR [rsp+0x8],xmm3
  01fdd:    	movq   QWORD PTR [rsp+0x10],xmm4
  01fe3:    	movq   QWORD PTR [rsp+0x18],xmm5
  01fe9:    	movq   QWORD PTR [rsp+0x20],xmm6
  01fef:    	movq   QWORD PTR [rsp+0x28],xmm7
  01ff5: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01ffc: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02003: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0200a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02011: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02018: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  0201f: 00 	movabs rax,0x5600b75a2280
  02029:    	call   rax
  0202b:    	mov    r15d,eax
  0202e: 00 	cmp    r15d,DWORD PTR [rip+0x5e0]        # 0x2615
  02035:    	jne    0x3d275
  0203b:    	mov    eax,DWORD PTR [rip+0xffffffffffffa843]        # 0xffffc884
  02041:    	cmp    DWORD PTR [rip+0x5ca],eax        # 0x2611
  02047:    	jne    0x3d275
  0204d:    	mov    rax,QWORD PTR [rbx]
  02050:    	lea    rdi,[rsp-0x18]
  02055:    	mov    QWORD PTR [rdi],rax
  02058:    	mov    QWORD PTR [rbx],rdi
  0205b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02064:    	mov    QWORD PTR [rsp-0x38],rcx
  02069: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  02070:    	mov    QWORD PTR [rsp-0x38],rax
  02075: 00 	mov    rdi,0x0
  0207c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02085: 00 	movabs rax,0x0
  0208f:    	mov    QWORD PTR [rsp-0x28],rax
  02094: 00 	movabs r13,0x0
  0209e:    	call   0xffff9d21
  020a3:    	lea    rdi,[rbp-0x8]
  020a7:    	mov    QWORD PTR [rbx],rdi
  020aa:    	movq   xmm2,QWORD PTR [rsp]
  020af:    	movq   xmm3,QWORD PTR [rsp+0x8]
  020b5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  020bb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  020c1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  020c7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  020cd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  020d4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  020db: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  020e2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  020e9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  020f0:    	add    rsp,0x60
  020f4:    	test   rax,rax
  020f7:    	je     0x3d2e4
  020fd: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00137 
:00139 %16 = %13.call z()                   [<INVALID>]
  02104: 01 	sub    DWORD PTR [rip+0x50e],0x1        # 0x2619
  0210b:    	je     0x3d36c
  02111:    	sub    rsp,0x60
  02115:    	movq   QWORD PTR [rsp],xmm2
  0211a:    	movq   QWORD PTR [rsp+0x8],xmm3
  02120:    	movq   QWORD PTR [rsp+0x10],xmm4
  02126:    	movq   QWORD PTR [rsp+0x18],xmm5
  0212c:    	movq   QWORD PTR [rsp+0x20],xmm6
  02132:    	movq   QWORD PTR [rsp+0x28],xmm7
  02138: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0213f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02146: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0214d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02154: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0215b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  02162: 00 	movabs rax,0x5600b75a2280
  0216c:    	call   rax
  0216e:    	mov    r15d,eax
  02171: 00 	cmp    r15d,DWORD PTR [rip+0x4a9]        # 0x2621
  02178:    	jne    0x3d38e
  0217e:    	mov    eax,DWORD PTR [rip+0xffffffffffffa700]        # 0xffffc884
  02184:    	cmp    DWORD PTR [rip+0x493],eax        # 0x261d
  0218a:    	jne    0x3d38e
  02190:    	mov    rax,QWORD PTR [rbx]
  02193:    	lea    rdi,[rsp-0x18]
  02198:    	mov    QWORD PTR [rdi],rax
  0219b:    	mov    QWORD PTR [rbx],rdi
  0219e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  021a7:    	mov    QWORD PTR [rsp-0x38],rcx
  021ac: ff 	mov    rax,QWORD PTR [rbp-0x90]
  021b3:    	mov    QWORD PTR [rsp-0x38],rax
  021b8: 00 	mov    rdi,0x0
  021bf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  021c8: 00 	movabs rax,0x0
  021d2:    	mov    QWORD PTR [rsp-0x28],rax
  021d7: 00 	movabs r13,0x0
  021e1:    	call   0xffff9d21
  021e6:    	lea    rdi,[rbp-0x8]
  021ea:    	mov    QWORD PTR [rbx],rdi
  021ed:    	movq   xmm2,QWORD PTR [rsp]
  021f2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  021f8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  021fe:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02204:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0220a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02210: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02217: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0221e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02225: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0222c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02233:    	add    rsp,0x60
  02237:    	test   rax,rax
  0223a:    	je     0x3d3fd
  02240: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00140 
:00142 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  02247: 01 	sub    DWORD PTR [rip+0x3d7],0x1        # 0x2625
  0224e:    	je     0x3d485
  02254: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0225b: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  02262:    	sub    rsp,0x60
  02266:    	movq   QWORD PTR [rsp],xmm2
  0226b:    	movq   QWORD PTR [rsp+0x8],xmm3
  02271:    	movq   QWORD PTR [rsp+0x10],xmm4
  02277:    	movq   QWORD PTR [rsp+0x18],xmm5
  0227d:    	movq   QWORD PTR [rsp+0x20],xmm6
  02283:    	movq   QWORD PTR [rsp+0x28],xmm7
  02289: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02290: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02297: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0229e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  022a5: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  022ac:    	mov    rdx,rdi
  022af:    	mov    rcx,rsi
  022b2:    	mov    rdi,rbx
  022b5:    	mov    rsi,r12
  022b8: 00 	movabs rax,0x5600b75970e0
  022c2:    	call   rax
  022c4:    	movq   xmm2,QWORD PTR [rsp]
  022c9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  022cf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  022d5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  022db:    	movq   xmm6,QWORD PTR [rsp+0x20]
  022e1:    	movq   xmm7,QWORD PTR [rsp+0x28]
  022e7: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  022ee: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  022f5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  022fc: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02303: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0230a:    	add    rsp,0x60
  0230e: 00 	movabs r13,0x5600b92f1250
  02318:    	test   rax,rax
  0231b:    	je     0xffff9d5c
  02321: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00143 _ = %14.call z=(%15; 1)              [<INVALID>]
  02328: 01 	sub    DWORD PTR [rip+0x2fa],0x1        # 0x2629
  0232f:    	je     0x3d520
  02335:    	sub    rsp,0x60
  02339:    	movq   QWORD PTR [rsp],xmm2
  0233e:    	movq   QWORD PTR [rsp+0x8],xmm3
  02344:    	movq   QWORD PTR [rsp+0x10],xmm4
  0234a:    	movq   QWORD PTR [rsp+0x18],xmm5
  02350:    	movq   QWORD PTR [rsp+0x20],xmm6
  02356:    	movq   QWORD PTR [rsp+0x28],xmm7
  0235c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02363: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0236a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02371: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02378: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0237f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  02386: 00 	movabs rax,0x5600b75a2280
  02390:    	call   rax
  02392:    	mov    r15d,eax
  02395: 00 	cmp    r15d,DWORD PTR [rip+0x295]        # 0x2631
  0239c:    	jne    0x3d542
  023a2:    	mov    eax,DWORD PTR [rip+0xffffffffffffa4dc]        # 0xffffc884
  023a8:    	cmp    DWORD PTR [rip+0x27f],eax        # 0x262d
  023ae:    	jne    0x3d542
  023b4:    	mov    rax,QWORD PTR [rbx]
  023b7:    	lea    rdi,[rsp-0x18]
  023bc:    	mov    QWORD PTR [rdi],rax
  023bf:    	mov    QWORD PTR [rbx],rdi
  023c2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  023cb:    	mov    QWORD PTR [rsp-0x38],rcx
  023d0: ff 	mov    rax,QWORD PTR [rbp-0x98]
  023d7:    	mov    QWORD PTR [rsp-0x38],rax
  023dc: 00 	mov    rdi,0x1
  023e3: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  023ea:    	mov    QWORD PTR [rsp-0x40],rax
  023ef: 00 	mov    QWORD PTR [rsp-0x30],0x0
  023f8: 00 	movabs rax,0x0
  02402:    	mov    QWORD PTR [rsp-0x28],rax
  02407: 00 	movabs r13,0x0
  02411:    	call   0xffff9d21
  02416:    	lea    rdi,[rbp-0x8]
  0241a:    	mov    QWORD PTR [rbx],rdi
  0241d:    	movq   xmm2,QWORD PTR [rsp]
  02422:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02428:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0242e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02434:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0243a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02440: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02447: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0244e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02455: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0245c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02463:    	add    rsp,0x60
  02467:    	test   rax,rax
  0246a:    	je     0x3d5b1
:00144 
:00146 %14 = %15
  02470: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02477: ff 	mov    QWORD PTR [rbp-0x98],rax
:00147 ret %14
  0247e: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02485:    	leave  
  02486:    	ret    
:00148 %14 = nil
  02487: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00149 ret %14
  02492: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02499:    	leave  
  0249a:    	ret    
==> start whole compile: vnormalize FuncId(67) self_class:Vec start:[00000] bytecode:0x5600b92c5690
<== finished compile. elapsed:50.4µs
offset:Pos(35092) code: 1800 bytes  data: 92 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: mov    eax,edx
  0000d: sub    eax,0x0
  00010: jge    0x32
  00016: neg    rdx
  00019: lea    rdx,[rbp+rdx*8-0x30]
  0001e: mov    QWORD PTR [rdx],0x4
  00025: sub    rdx,0x8
  00029: add    eax,0x1
  0002c: jne    0x1e
  00032: mov    rax,0x4
  00039: mov    QWORD PTR [rbp-0x30],rax
  0003d: mov    QWORD PTR [rbp-0x38],rax
  00041: mov    QWORD PTR [rbp-0x40],rax
  00045: mov    QWORD PTR [rbp-0x48],rax
  00049: mov    QWORD PTR [rbp-0x50],rax
  0004d: mov    QWORD PTR [rbp-0x58],rax
  00051: mov    rdi,QWORD PTR [rbp-0x28]
  00055: test   rdi,0x7
  0005c: jne    0x3af8b
  00062: cmp    DWORD PTR [rdi+0x4],0x28
  00066: jne    0x3af8b
:00000 init reg_num:7 arg_num:0 stack_offset:6
:00001 %3 = %0.call vlength()               [Vec]
  0006c: mov    rdi,QWORD PTR [rbp-0x28]
  00070: cmp    DWORD PTR [rip+0xffffffffffffa1d8],0x26        # 0xffffa24f
  00077: jne    0x3af9a
  0007d: mov    rax,QWORD PTR [rbx]
  00080: lea    rdi,[rsp-0x18]
  00085: mov    QWORD PTR [rdi],rax
  00088: mov    QWORD PTR [rbx],rdi
  0008b: mov    QWORD PTR [rsp-0x20],0x0
  00094: mov    QWORD PTR [rsp-0x38],rcx
  00099: mov    rax,QWORD PTR [rbp-0x28]
  0009d: mov    QWORD PTR [rsp-0x38],rax
  000a2: mov    rdi,0x0
  000a9: mov    QWORD PTR [rsp-0x30],0x0
  000b2: movabs rax,0x600000042
  000bc: mov    QWORD PTR [rsp-0x28],rax
  000c1: movabs r13,0x5600b92fecd0
  000cb: call   0xffffabce
  000d0: lea    rdi,[rbp-0x8]
  000d4: mov    QWORD PTR [rbx],rdi
  000d7: movabs r13,0x5600b92c56c0
  000e1: test   rax,rax
  000e4: je     0xffff7727
  000ea: mov    QWORD PTR [rbp-0x40],rax
:00002 
:00004 %1 = %3
  000ee: mov    rax,QWORD PTR [rbp-0x40]
  000f2: mov    QWORD PTR [rbp-0x30],rax
:00005 %3 = const[Vec]                      [Vec]
  000f6: mov    rax,QWORD PTR [rip+0xffffffffffffa15f]        # 0xffffa25c
  000fd: cmp    rax,QWORD PTR [rip+0x618]        # 0x71c
  00104: jne    0x3afa9
  0010a: mov    rax,QWORD PTR [rip+0x5fb]        # 0x70c
  00111: mov    QWORD PTR [rbp-0x40],rax
:00006 %4 = @x: Vec[IvarId(0)]
  00115: mov    rdi,QWORD PTR [rbp-0x28]
  00119: mov    rax,QWORD PTR [rdi+0x10]
  0011d: mov    QWORD PTR [rbp-0x48],rax
:00007 %5 = @y: Vec[IvarId(1)]
  00121: mov    rdi,QWORD PTR [rbp-0x28]
  00125: mov    rax,QWORD PTR [rdi+0x18]
  00129: mov    QWORD PTR [rbp-0x50],rax
:00008 %6 = @z: Vec[IvarId(2)]
  0012d: mov    rdi,QWORD PTR [rbp-0x28]
  00131: mov    rax,QWORD PTR [rdi+0x20]
  00135: mov    QWORD PTR [rbp-0x58],rax
:00009 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  00139: mov    rdi,QWORD PTR [rbp-0x40]
  0013d: test   rdi,0x7
  00144: jne    0x3afef
  0014a: cmp    DWORD PTR [rdi+0x4],0x29
  0014e: jne    0x3afef
  00154: cmp    DWORD PTR [rip+0xffffffffffffa0f4],0x26        # 0xffffa24f
  0015b: jne    0x3afef
  00161: mov    r9,0x0
  00168: mov    rdx,rdi
  0016b: mov    rax,QWORD PTR [rbx]
  0016e: lea    rdi,[rsp-0x18]
  00173: mov    QWORD PTR [rdi],rax
  00176: mov    QWORD PTR [rbx],rdi
  00179: mov    QWORD PTR [rsp-0x20],0x0
  00182: mov    QWORD PTR [rsp-0x38],rcx
  00187: lea    rcx,[rbp-0x48]
  0018b: mov    r8,0x3
  00192: call   0x3affe
  00197: lea    rdi,[rbp-0x8]
  0019b: mov    QWORD PTR [rbx],rdi
  0019e: movabs r13,0x5600b92c5740
  001a8: test   rax,rax
  001ab: je     0xffff7727
  001b1: mov    QWORD PTR [rbp-0x38],rax
:00010 
:00012 %3 = literal[1e-17]
  001b5: movq   xmm2,QWORD PTR [rip+0x56f]        # 0x72c
  001bd: movabs rax,0xe33877aa3236a4ba
  001c7: mov    QWORD PTR [rbp-0x40],rax
:00013 _%3 = %1 > %3                        [Float][Float]
:00014 condnotbr _%3 =>:00037
  001cb: mov    rdi,QWORD PTR [rbp-0x30]
  001cf: test   rdi,0x1
  001d6: jne    0x3b030
  001dc: test   rdi,0x2
  001e3: je     0x21f
  001e9: xorps  xmm3,xmm3
  001ec: movabs rax,0x8000000000000002
  001f6: cmp    rdi,rax
  001f9: je     0x231
  001ff: mov    rax,rdi
  00202: sar    rax,0x3f
  00206: add    rax,0x2
  0020a: and    rdi,0xfffffffffffffffc
  0020e: or     rdi,rax
  00211: rol    rdi,0x3d
  00215: movq   xmm3,rdi
  0021a: jmp    0x231
  0021f: call   0xffff7760
  00224: test   rax,rax
  00227: je     0x3b030
  0022d: movq   xmm3,xmm0
  00231: ucomisd xmm3,xmm2
  00235: jbe    0x3b261
:00015 %3 = %2.call x()                     [Vec]
  0023b: mov    rdi,QWORD PTR [rbp-0x38]
  0023f: test   rdi,0x7
  00246: jne    0x3b03f
  0024c: cmp    DWORD PTR [rdi+0x4],0x28
  00250: jne    0x3b03f
  00256: cmp    DWORD PTR [rip+0xffffffffffff9ff2],0x26        # 0xffffa24f
  0025d: jne    0x3b03f
  00263: mov    esi,DWORD PTR [rip+0x4cf]        # 0x738
  00269: cmp    esi,0xffffffff
  0026c: je     0x3b04e
  00272: cmp    WORD PTR [rdi+0x2],0x3
  00277: jne    0x290
  0027d: cmp    esi,0x6
  00280: jge    0x290
  00286: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0028b: jmp    0x2ae
  00290: sub    rsp,0x10
  00294: movq   QWORD PTR [rsp],xmm3
  00299: movabs rax,0x5600b755dfe0
  002a3: call   rax
  002a5: movq   xmm3,QWORD PTR [rsp]
  002aa: add    rsp,0x10
  002ae: mov    QWORD PTR [rbp-0x40],rax
:00016 
:00018 %3 = %3 / %1                         [Float][Float]
  002b2: mov    rdi,QWORD PTR [rbp-0x40]
  002b6: test   rdi,0x1
  002bd: jne    0x3b089
  002c3: test   rdi,0x2
  002ca: je     0x306
  002d0: xorps  xmm2,xmm2
  002d3: movabs rax,0x8000000000000002
  002dd: cmp    rdi,rax
  002e0: je     0x318
  002e6: mov    rax,rdi
  002e9: sar    rax,0x3f
  002ed: add    rax,0x2
  002f1: and    rdi,0xfffffffffffffffc
  002f5: or     rdi,rax
  002f8: rol    rdi,0x3d
  002fc: movq   xmm2,rdi
  00301: jmp    0x318
  00306: call   0xffff7760
  0030b: test   rax,rax
  0030e: je     0x3b089
  00314: movq   xmm2,xmm0
  00318: movq   rax,xmm3
  0031d: test   rax,rax
  00320: je     0xffff774c
  00326: divsd  xmm2,xmm3
:00019 _ = %2.call x=(%3; 1)                [Vec]
  0032a: movq   xmm0,xmm2
  0032e: call   0xffff7853
  00333: mov    QWORD PTR [rbp-0x40],rax
  00337: mov    rdi,QWORD PTR [rbp-0x38]
  0033b: test   rdi,0x7
  00342: jne    0x3b098
  00348: cmp    DWORD PTR [rdi+0x4],0x28
  0034c: jne    0x3b098
  00352: cmp    DWORD PTR [rip+0xffffffffffff9ef6],0x26        # 0xffffa24f
  00359: jne    0x3b098
  0035f: mov    esi,DWORD PTR [rip+0x3db]        # 0x740
  00365: cmp    esi,0xffffffff
  00368: je     0x3b0a7
  0036e: cmp    WORD PTR [rdi+0x2],0x3
  00373: jne    0x390
  00379: cmp    esi,0x6
  0037c: jge    0x390
  00382: mov    rax,QWORD PTR [rbp-0x40]
  00386: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0038b: jmp    0x3d1
  00390: sub    rsp,0x10
  00394: movq   QWORD PTR [rsp],xmm2
  00399: movq   QWORD PTR [rsp+0x8],xmm3
  0039f: mov    rdx,QWORD PTR [rbp-0x40]
  003a3: movabs rax,0x5600b755e260
  003ad: call   rax
  003af: movq   xmm2,QWORD PTR [rsp]
  003b4: movq   xmm3,QWORD PTR [rsp+0x8]
  003ba: add    rsp,0x10
  003be: movabs r13,0x5600b92c57e0
  003c8: test   rax,rax
  003cb: je     0xffff7727
:00020 
:00022 %3 = %2.call y()                     [Vec]
  003d1: mov    rdi,QWORD PTR [rbp-0x38]
  003d5: test   rdi,0x7
  003dc: jne    0x3b0f5
  003e2: cmp    DWORD PTR [rdi+0x4],0x28
  003e6: jne    0x3b0f5
  003ec: cmp    DWORD PTR [rip+0xffffffffffff9e5c],0x26        # 0xffffa24f
  003f3: jne    0x3b0f5
  003f9: mov    esi,DWORD PTR [rip+0x349]        # 0x748
  003ff: cmp    esi,0xffffffff
  00402: je     0x3b104
  00408: cmp    WORD PTR [rdi+0x2],0x3
  0040d: jne    0x426
  00413: cmp    esi,0x6
  00416: jge    0x426
  0041c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00421: jmp    0x444
  00426: sub    rsp,0x10
  0042a: movq   QWORD PTR [rsp],xmm3
  0042f: movabs rax,0x5600b755dfe0
  00439: call   rax
  0043b: movq   xmm3,QWORD PTR [rsp]
  00440: add    rsp,0x10
  00444: mov    QWORD PTR [rbp-0x40],rax
:00023 
:00025 %3 = %3 / %1                         [Float][Float]
  00448: mov    rdi,QWORD PTR [rbp-0x40]
  0044c: test   rdi,0x1
  00453: jne    0x3b13f
  00459: test   rdi,0x2
  00460: je     0x49c
  00466: xorps  xmm2,xmm2
  00469: movabs rax,0x8000000000000002
  00473: cmp    rdi,rax
  00476: je     0x4ae
  0047c: mov    rax,rdi
  0047f: sar    rax,0x3f
  00483: add    rax,0x2
  00487: and    rdi,0xfffffffffffffffc
  0048b: or     rdi,rax
  0048e: rol    rdi,0x3d
  00492: movq   xmm2,rdi
  00497: jmp    0x4ae
  0049c: call   0xffff7760
  004a1: test   rax,rax
  004a4: je     0x3b13f
  004aa: movq   xmm2,xmm0
  004ae: movq   rax,xmm3
  004b3: test   rax,rax
  004b6: je     0xffff774c
  004bc: divsd  xmm2,xmm3
:00026 _ = %2.call y=(%3; 1)                [Vec]
  004c0: movq   xmm0,xmm2
  004c4: call   0xffff7853
  004c9: mov    QWORD PTR [rbp-0x40],rax
  004cd: mov    rdi,QWORD PTR [rbp-0x38]
  004d1: test   rdi,0x7
  004d8: jne    0x3b14e
  004de: cmp    DWORD PTR [rdi+0x4],0x28
  004e2: jne    0x3b14e
  004e8: cmp    DWORD PTR [rip+0xffffffffffff9d60],0x26        # 0xffffa24f
  004ef: jne    0x3b14e
  004f5: mov    esi,DWORD PTR [rip+0x255]        # 0x750
  004fb: cmp    esi,0xffffffff
  004fe: je     0x3b15d
  00504: cmp    WORD PTR [rdi+0x2],0x3
  00509: jne    0x526
  0050f: cmp    esi,0x6
  00512: jge    0x526
  00518: mov    rax,QWORD PTR [rbp-0x40]
  0051c: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00521: jmp    0x567
  00526: sub    rsp,0x10
  0052a: movq   QWORD PTR [rsp],xmm2
  0052f: movq   QWORD PTR [rsp+0x8],xmm3
  00535: mov    rdx,QWORD PTR [rbp-0x40]
  00539: movabs rax,0x5600b755e260
  00543: call   rax
  00545: movq   xmm2,QWORD PTR [rsp]
  0054a: movq   xmm3,QWORD PTR [rsp+0x8]
  00550: add    rsp,0x10
  00554: movabs r13,0x5600b92c5850
  0055e: test   rax,rax
  00561: je     0xffff7727
:00027 
:00029 %3 = %2.call z()                     [Vec]
  00567: mov    rdi,QWORD PTR [rbp-0x38]
  0056b: test   rdi,0x7
  00572: jne    0x3b1ab
  00578: cmp    DWORD PTR [rdi+0x4],0x28
  0057c: jne    0x3b1ab
  00582: cmp    DWORD PTR [rip+0xffffffffffff9cc6],0x26        # 0xffffa24f
  00589: jne    0x3b1ab
  0058f: mov    esi,DWORD PTR [rip+0x1c3]        # 0x758
  00595: cmp    esi,0xffffffff
  00598: je     0x3b1ba
  0059e: cmp    WORD PTR [rdi+0x2],0x3
  005a3: jne    0x5bc
  005a9: cmp    esi,0x6
  005ac: jge    0x5bc
  005b2: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005b7: jmp    0x5da
  005bc: sub    rsp,0x10
  005c0: movq   QWORD PTR [rsp],xmm3
  005c5: movabs rax,0x5600b755dfe0
  005cf: call   rax
  005d1: movq   xmm3,QWORD PTR [rsp]
  005d6: add    rsp,0x10
  005da: mov    QWORD PTR [rbp-0x40],rax
:00030 
:00032 %3 = %3 / %1                         [Float][Float]
  005de: mov    rdi,QWORD PTR [rbp-0x40]
  005e2: test   rdi,0x1
  005e9: jne    0x3b1f5
  005ef: test   rdi,0x2
  005f6: je     0x632
  005fc: xorps  xmm2,xmm2
  005ff: movabs rax,0x8000000000000002
  00609: cmp    rdi,rax
  0060c: je     0x644
  00612: mov    rax,rdi
  00615: sar    rax,0x3f
  00619: add    rax,0x2
  0061d: and    rdi,0xfffffffffffffffc
  00621: or     rdi,rax
  00624: rol    rdi,0x3d
  00628: movq   xmm2,rdi
  0062d: jmp    0x644
  00632: call   0xffff7760
  00637: test   rax,rax
  0063a: je     0x3b1f5
  00640: movq   xmm2,xmm0
  00644: movq   rax,xmm3
  00649: test   rax,rax
  0064c: je     0xffff774c
  00652: divsd  xmm2,xmm3
:00033 _ = %2.call z=(%3; 1)                [Vec]
  00656: movq   xmm0,xmm2
  0065a: call   0xffff7853
  0065f: mov    QWORD PTR [rbp-0x40],rax
  00663: mov    rdi,QWORD PTR [rbp-0x38]
  00667: test   rdi,0x7
  0066e: jne    0x3b204
  00674: cmp    DWORD PTR [rdi+0x4],0x28
  00678: jne    0x3b204
  0067e: cmp    DWORD PTR [rip+0xffffffffffff9bca],0x26        # 0xffffa24f
  00685: jne    0x3b204
  0068b: mov    esi,DWORD PTR [rip+0xcf]        # 0x760
  00691: cmp    esi,0xffffffff
  00694: je     0x3b213
  0069a: cmp    WORD PTR [rdi+0x2],0x3
  0069f: jne    0x6bc
  006a5: cmp    esi,0x6
  006a8: jge    0x6bc
  006ae: mov    rax,QWORD PTR [rbp-0x40]
  006b2: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006b7: jmp    0x6fd
  006bc: sub    rsp,0x10
  006c0: movq   QWORD PTR [rsp],xmm2
  006c5: movq   QWORD PTR [rsp+0x8],xmm3
  006cb: mov    rdx,QWORD PTR [rbp-0x40]
  006cf: movabs rax,0x5600b755e260
  006d9: call   rax
  006db: movq   xmm2,QWORD PTR [rsp]
  006e0: movq   xmm3,QWORD PTR [rsp+0x8]
  006e6: add    rsp,0x10
  006ea: movabs r13,0x5600b92c58c0
  006f4: test   rax,rax
  006f7: je     0xffff7727
:00034 
:00036 br =>:00037
  006fd: jmp    0x3b27a
:00037 ret %2
  00702: mov    rax,QWORD PTR [rbp-0x38]
  00706: leave  
  00707: ret    
==> start whole compile: vlength FuncId(66) self_class:Vec start:[00000] bytecode:0x5600b92fecd0
<== finished compile. elapsed:31.8µs
offset:Pos(36984) code: 902 bytes  data: 26 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: mov    eax,edx
  0000d: sub    eax,0x0
  00010: jge    0x32
  00016: neg    rdx
  00019: lea    rdx,[rbp+rdx*8-0x30]
  0001e: mov    QWORD PTR [rdx],0x4
  00025: sub    rdx,0x8
  00029: add    eax,0x1
  0002c: jne    0x1e
  00032: mov    rax,0x4
  00039: mov    QWORD PTR [rbp-0x30],rax
  0003d: mov    QWORD PTR [rbp-0x38],rax
  00041: mov    QWORD PTR [rbp-0x40],rax
  00045: mov    QWORD PTR [rbp-0x48],rax
  00049: mov    QWORD PTR [rbp-0x50],rax
  0004d: mov    rdi,QWORD PTR [rbp-0x28]
  00051: test   rdi,0x7
  00058: jne    0x3ab2f
  0005e: cmp    DWORD PTR [rdi+0x4],0x28
  00062: jne    0x3ab2f
:00000 init reg_num:6 arg_num:0 stack_offset:6
:00001 %2 = const[Math]                     [Math]
  00068: mov    rax,QWORD PTR [rip+0xffffffffffff9a89]        # 0xffff9af8
  0006f: cmp    rax,QWORD PTR [rip+0x322]        # 0x398
  00076: jne    0x3ab3e
  0007c: mov    rax,QWORD PTR [rip+0x305]        # 0x388
  00083: mov    QWORD PTR [rbp-0x38],rax
:00002 %3 = @x: Vec[IvarId(0)]
  00087: mov    rdi,QWORD PTR [rbp-0x28]
  0008b: mov    rax,QWORD PTR [rdi+0x10]
  0008f: mov    QWORD PTR [rbp-0x40],rax
:00003 %4 = @x: Vec[IvarId(0)]
  00093: mov    rdi,QWORD PTR [rbp-0x28]
  00097: mov    rax,QWORD PTR [rdi+0x10]
  0009b: mov    QWORD PTR [rbp-0x48],rax
:00004 %3 = %3 * %4                         [Float][Float]
  0009f: mov    rdi,QWORD PTR [rbp-0x40]
  000a3: test   rdi,0x1
  000aa: jne    0x3ab84
  000b0: test   rdi,0x2
  000b7: je     0xf3
  000bd: xorps  xmm2,xmm2
  000c0: movabs rax,0x8000000000000002
  000ca: cmp    rdi,rax
  000cd: je     0x105
  000d3: mov    rax,rdi
  000d6: sar    rax,0x3f
  000da: add    rax,0x2
  000de: and    rdi,0xfffffffffffffffc
  000e2: or     rdi,rax
  000e5: rol    rdi,0x3d
  000e9: movq   xmm2,rdi
  000ee: jmp    0x105
  000f3: call   0xffff6ffc
  000f8: test   rax,rax
  000fb: je     0x3ab84
  00101: movq   xmm2,xmm0
  00105: mov    rdi,QWORD PTR [rbp-0x48]
  00109: test   rdi,0x1
  00110: jne    0x3ab93
  00116: test   rdi,0x2
  0011d: je     0x159
  00123: xorps  xmm3,xmm3
  00126: movabs rax,0x8000000000000002
  00130: cmp    rdi,rax
  00133: je     0x16b
  00139: mov    rax,rdi
  0013c: sar    rax,0x3f
  00140: add    rax,0x2
  00144: and    rdi,0xfffffffffffffffc
  00148: or     rdi,rax
  0014b: rol    rdi,0x3d
  0014f: movq   xmm3,rdi
  00154: jmp    0x16b
  00159: call   0xffff6ffc
  0015e: test   rax,rax
  00161: je     0x3ab93
  00167: movq   xmm3,xmm0
  0016b: mulsd  xmm2,xmm3
:00005 %4 = @y: Vec[IvarId(1)]
  0016f: mov    rdi,QWORD PTR [rbp-0x28]
  00173: mov    rax,QWORD PTR [rdi+0x18]
  00177: mov    QWORD PTR [rbp-0x48],rax
:00006 %5 = @y: Vec[IvarId(1)]
  0017b: mov    rdi,QWORD PTR [rbp-0x28]
  0017f: mov    rax,QWORD PTR [rdi+0x18]
  00183: mov    QWORD PTR [rbp-0x50],rax
:00007 %4 = %4 * %5                         [Float][Float]
  00187: mov    rdi,QWORD PTR [rbp-0x48]
  0018b: test   rdi,0x1
  00192: jne    0x3aba2
  00198: test   rdi,0x2
  0019f: je     0x1db
  001a5: xorps  xmm3,xmm3
  001a8: movabs rax,0x8000000000000002
  001b2: cmp    rdi,rax
  001b5: je     0x1ed
  001bb: mov    rax,rdi
  001be: sar    rax,0x3f
  001c2: add    rax,0x2
  001c6: and    rdi,0xfffffffffffffffc
  001ca: or     rdi,rax
  001cd: rol    rdi,0x3d
  001d1: movq   xmm3,rdi
  001d6: jmp    0x1ed
  001db: call   0xffff6ffc
  001e0: test   rax,rax
  001e3: je     0x3aba2
  001e9: movq   xmm3,xmm0
  001ed: mov    rdi,QWORD PTR [rbp-0x50]
  001f1: test   rdi,0x1
  001f8: jne    0x3abbe
  001fe: test   rdi,0x2
  00205: je     0x241
  0020b: xorps  xmm4,xmm4
  0020e: movabs rax,0x8000000000000002
  00218: cmp    rdi,rax
  0021b: je     0x253
  00221: mov    rax,rdi
  00224: sar    rax,0x3f
  00228: add    rax,0x2
  0022c: and    rdi,0xfffffffffffffffc
  00230: or     rdi,rax
  00233: rol    rdi,0x3d
  00237: movq   xmm4,rdi
  0023c: jmp    0x253
  00241: call   0xffff6ffc
  00246: test   rax,rax
  00249: je     0x3abbe
  0024f: movq   xmm4,xmm0
  00253: mulsd  xmm3,xmm4
:00008 %3 = %3 + %4                         [Float][Float]
  00257: addsd  xmm2,xmm3
:00009 %4 = @z: Vec[IvarId(2)]
  0025b: mov    rdi,QWORD PTR [rbp-0x28]
  0025f: mov    rax,QWORD PTR [rdi+0x20]
  00263: mov    QWORD PTR [rbp-0x48],rax
:00010 %5 = @z: Vec[IvarId(2)]
  00267: mov    rdi,QWORD PTR [rbp-0x28]
  0026b: mov    rax,QWORD PTR [rdi+0x20]
  0026f: mov    QWORD PTR [rbp-0x50],rax
:00011 %4 = %4 * %5                         [Float][Float]
  00273: mov    rdi,QWORD PTR [rbp-0x48]
  00277: test   rdi,0x1
  0027e: jne    0x3abda
  00284: test   rdi,0x2
  0028b: je     0x2c7
  00291: xorps  xmm3,xmm3
  00294: movabs rax,0x8000000000000002
  0029e: cmp    rdi,rax
  002a1: je     0x2d9
  002a7: mov    rax,rdi
  002aa: sar    rax,0x3f
  002ae: add    rax,0x2
  002b2: and    rdi,0xfffffffffffffffc
  002b6: or     rdi,rax
  002b9: rol    rdi,0x3d
  002bd: movq   xmm3,rdi
  002c2: jmp    0x2d9
  002c7: call   0xffff6ffc
  002cc: test   rax,rax
  002cf: je     0x3abda
  002d5: movq   xmm3,xmm0
  002d9: mov    rdi,QWORD PTR [rbp-0x50]
  002dd: test   rdi,0x1
  002e4: jne    0x3abf6
  002ea: test   rdi,0x2
  002f1: je     0x32d
  002f7: xorps  xmm4,xmm4
  002fa: movabs rax,0x8000000000000002
  00304: cmp    rdi,rax
  00307: je     0x33f
  0030d: mov    rax,rdi
  00310: sar    rax,0x3f
  00314: add    rax,0x2
  00318: and    rdi,0xfffffffffffffffc
  0031c: or     rdi,rax
  0031f: rol    rdi,0x3d
  00323: movq   xmm4,rdi
  00328: jmp    0x33f
  0032d: call   0xffff6ffc
  00332: test   rax,rax
  00335: je     0x3abf6
  0033b: movq   xmm4,xmm0
  0033f: mulsd  xmm3,xmm4
:00012 %3 = %3 + %4                         [Float][Float]
  00343: addsd  xmm2,xmm3
:00013 %1 = %2.call sqrt(%3; 1)             [#<Class:Math>]
  00347: mov    rdi,QWORD PTR [rbp-0x38]
  0034b: test   rdi,0x7
  00352: jne    0x3ac12
  00358: cmp    DWORD PTR [rdi+0x4],0x21
  0035c: jne    0x3ac12
  00362: cmp    DWORD PTR [rip+0xffffffffffff9782],0x26        # 0xffff9aeb
  00369: jne    0x3ac12
  0036f: sqrtsd xmm5,xmm2
:00014 
:00016 ret %1
  00373: movq   xmm0,xmm5
  00377: call   0xffff70ef
  0037c: mov    QWORD PTR [rbp-0x30],rax
  00380: mov    rax,QWORD PTR [rbp-0x30]
  00384: leave  
  00385: ret    
==> start whole compile: initialize FuncId(72) self_class:Ray start:[00000] bytecode:0x5600b92b1af0
<== finished compile. elapsed:14.3µs
offset:Pos(37912) code: 123 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: mov    eax,edx
  0000d: sub    eax,0x2
  00010: jge    0x32
  00016: neg    rdx
  00019: lea    rdx,[rbp+rdx*8-0x30]
  0001e: mov    QWORD PTR [rdx],0x4
  00025: sub    rdx,0x8
  00029: add    eax,0x1
  0002c: jne    0x1e
  00032: mov    QWORD PTR [rbp-0x40],0x4
  0003a: mov    rdi,QWORD PTR [rbp-0x28]
  0003e: test   rdi,0x7
  00045: jne    0x3a89b
  0004b: cmp    DWORD PTR [rdi+0x4],0x2e
  0004f: jne    0x3a89b
:00000 init reg_num:4 arg_num:2 stack_offset:5
:00001 @org: Ray[IvarId(0)] = %1
  00055: mov    rdi,QWORD PTR [rbp-0x28]
  00059: mov    rax,QWORD PTR [rbp-0x30]
  0005d: mov    QWORD PTR [rdi+0x10],rax
:00002 @dir: Ray[IvarId(1)] = %2
  00061: mov    rdi,QWORD PTR [rbp-0x28]
  00065: mov    rax,QWORD PTR [rbp-0x38]
  00069: mov    QWORD PTR [rdi+0x18],rax
:00003 %3 = %2
  0006d: mov    rax,QWORD PTR [rbp-0x38]
  00071: mov    QWORD PTR [rbp-0x40],rax
:00004 ret %3
  00075: mov    rax,QWORD PTR [rbp-0x40]
  00079: leave  
  0007a: ret    
==> start whole compile: initialize FuncId(73) self_class:Isect start:[00000] bytecode:0x5600b92b5b00
<== finished compile. elapsed:22.8µs
offset:Pos(38035) code: 717 bytes  data: 168 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x60
  0000b: mov    eax,edx
  0000d: sub    eax,0x0
  00010: jge    0x32
  00016: neg    rdx
  00019: lea    rdx,[rbp+rdx*8-0x30]
  0001e: mov    QWORD PTR [rdx],0x4
  00025: sub    rdx,0x8
  00029: add    eax,0x1
  0002c: jne    0x1e
  00032: mov    rax,0x4
  00039: mov    QWORD PTR [rbp-0x30],rax
  0003d: mov    QWORD PTR [rbp-0x38],rax
  00041: mov    QWORD PTR [rbp-0x40],rax
  00045: mov    QWORD PTR [rbp-0x48],rax
  00049: mov    QWORD PTR [rbp-0x50],rax
  0004d: mov    rdi,QWORD PTR [rbp-0x28]
  00051: test   rdi,0x7
  00058: jne    0x3a82f
  0005e: cmp    DWORD PTR [rdi+0x4],0x30
  00062: jne    0x3a82f
:00000 init reg_num:6 arg_num:0 stack_offset:6
:00001 %1 = literal[10000000.0]
  00068: movq   xmm2,QWORD PTR [rip+0x25d]        # 0x2cd
  00070: movabs rax,0xb18968000000002
  0007a: mov    QWORD PTR [rbp-0x30],rax
:00002 @t: Isect[IvarId(0)] = %1
  0007e: mov    rdi,QWORD PTR [rbp-0x28]
  00082: mov    rax,QWORD PTR [rbp-0x30]
  00086: mov    QWORD PTR [rdi+0x10],rax
:00003 %1 = literal[false]
  0008a: mov    rax,0x14
  00091: mov    QWORD PTR [rbp-0x30],rax
:00004 @hit: Isect[IvarId(1)] = %1
  00095: mov    rdi,QWORD PTR [rbp-0x28]
  00099: mov    rax,QWORD PTR [rbp-0x30]
  0009d: mov    QWORD PTR [rdi+0x18],rax
:00005 %2 = const[Vec]                      [Vec]
  000a1: mov    rax,QWORD PTR [rip+0xffffffffffff9635]        # 0xffff96dd
  000a8: cmp    rax,QWORD PTR [rip+0x23e]        # 0x2ed
  000af: jne    0x3a83e
  000b5: mov    rax,QWORD PTR [rip+0x221]        # 0x2dd
  000bc: mov    QWORD PTR [rbp-0x38],rax
:00006 %3 = literal[0.0]
  000c0: movq   xmm2,QWORD PTR [rip+0x235]        # 0x2fd
  000c8: movabs rax,0x8000000000000002
  000d2: mov    QWORD PTR [rbp-0x40],rax
:00007 %4 = literal[0.0]
  000d6: movq   xmm3,QWORD PTR [rip+0x22f]        # 0x30d
  000de: movabs rax,0x8000000000000002
  000e8: mov    QWORD PTR [rbp-0x48],rax
:00008 %5 = literal[0.0]
  000ec: movq   xmm4,QWORD PTR [rip+0x229]        # 0x31d
  000f4: movabs rax,0x8000000000000002
  000fe: mov    QWORD PTR [rbp-0x50],rax
:00009 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
  00102: mov    rdi,QWORD PTR [rbp-0x38]
  00106: test   rdi,0x7
  0010d: jne    0x3a884
  00113: cmp    DWORD PTR [rdi+0x4],0x29
  00117: jne    0x3a884
  0011d: cmp    DWORD PTR [rip+0xffffffffffff95ac],0x26        # 0xffff96d0
  00124: jne    0x3a884
  0012a: mov    r9,0x0
  00131: sub    rsp,0x20
  00135: movq   QWORD PTR [rsp],xmm2
  0013a: movq   QWORD PTR [rsp+0x8],xmm3
  00140: movq   QWORD PTR [rsp+0x10],xmm4
  00146: mov    rdx,rdi
  00149: mov    rax,QWORD PTR [rbx]
  0014c: lea    rdi,[rsp-0x18]
  00151: mov    QWORD PTR [rdi],rax
  00154: mov    QWORD PTR [rbx],rdi
  00157: mov    QWORD PTR [rsp-0x20],0x0
  00160: mov    QWORD PTR [rsp-0x38],rcx
  00165: lea    rcx,[rbp-0x40]
  00169: mov    r8,0x3
  00170: call   0x3a893
  00175: lea    rdi,[rbp-0x8]
  00179: mov    QWORD PTR [rbx],rdi
  0017c: movq   xmm2,QWORD PTR [rsp]
  00181: movq   xmm3,QWORD PTR [rsp+0x8]
  00187: movq   xmm4,QWORD PTR [rsp+0x10]
  0018d: add    rsp,0x20
  00191: movabs r13,0x5600b92b5bb0
  0019b: test   rax,rax
  0019e: je     0xffff6ba8
  001a4: mov    QWORD PTR [rbp-0x30],rax
:00010 
:00012 @pl: Isect[IvarId(2)] = %1
  001a8: mov    rdi,QWORD PTR [rbp-0x28]
  001ac: mov    rax,QWORD PTR [rbp-0x30]
  001b0: mov    QWORD PTR [rdi+0x20],rax
:00013 %2 = const[Vec]                      [Vec]
  001b4: mov    rax,QWORD PTR [rip+0xffffffffffff9522]        # 0xffff96dd
  001bb: cmp    rax,QWORD PTR [rip+0x17b]        # 0x33d
  001c2: jne    0x3a8c5
  001c8: mov    rax,QWORD PTR [rip+0x15e]        # 0x32d
  001cf: mov    QWORD PTR [rbp-0x38],rax
:00014 %3 = literal[0.0]
  001d3: movq   xmm2,QWORD PTR [rip+0x172]        # 0x34d
  001db: movabs rax,0x8000000000000002
  001e5: mov    QWORD PTR [rbp-0x40],rax
:00015 %4 = literal[0.0]
  001e9: movq   xmm3,QWORD PTR [rip+0x16c]        # 0x35d
  001f1: movabs rax,0x8000000000000002
  001fb: mov    QWORD PTR [rbp-0x48],rax
:00016 %5 = literal[0.0]
  001ff: movq   xmm4,QWORD PTR [rip+0x166]        # 0x36d
  00207: movabs rax,0x8000000000000002
  00211: mov    QWORD PTR [rbp-0x50],rax
:00017 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
  00215: mov    rdi,QWORD PTR [rbp-0x38]
  00219: test   rdi,0x7
  00220: jne    0x3a935
  00226: cmp    DWORD PTR [rdi+0x4],0x29
  0022a: jne    0x3a935
  00230: cmp    DWORD PTR [rip+0xffffffffffff9499],0x26        # 0xffff96d0
  00237: jne    0x3a935
  0023d: mov    r9,0x0
  00244: sub    rsp,0x20
  00248: movq   QWORD PTR [rsp],xmm2
  0024d: movq   QWORD PTR [rsp+0x8],xmm3
  00253: movq   QWORD PTR [rsp+0x10],xmm4
  00259: mov    rdx,rdi
  0025c: mov    rax,QWORD PTR [rbx]
  0025f: lea    rdi,[rsp-0x18]
  00264: mov    QWORD PTR [rdi],rax
  00267: mov    QWORD PTR [rbx],rdi
  0026a: mov    QWORD PTR [rsp-0x20],0x0
  00273: mov    QWORD PTR [rsp-0x38],rcx
  00278: lea    rcx,[rbp-0x40]
  0027c: mov    r8,0x3
  00283: call   0x3a944
  00288: lea    rdi,[rbp-0x8]
  0028c: mov    QWORD PTR [rbx],rdi
  0028f: movq   xmm2,QWORD PTR [rsp]
  00294: movq   xmm3,QWORD PTR [rsp+0x8]
  0029a: movq   xmm4,QWORD PTR [rsp+0x10]
  002a0: add    rsp,0x20
  002a4: movabs r13,0x5600b92b5c30
  002ae: test   rax,rax
  002b1: je     0xffff6ba8
  002b7: mov    QWORD PTR [rbp-0x30],rax
:00018 
:00020 @n: Isect[IvarId(3)] = %1
  002bb: mov    rdi,QWORD PTR [rbp-0x28]
  002bf: mov    rax,QWORD PTR [rbp-0x30]
  002c3: mov    QWORD PTR [rdi+0x28],rax
:00021 ret %1
  002c7: mov    rax,QWORD PTR [rbp-0x30]
  002cb: leave  
  002cc: ret    
==> start whole compile: intersect FuncId(71) self_class:Plane start:[00000] bytecode:0x5600b92b7200
<== finished compile. elapsed:121µs
offset:Pos(38920) code: 6671 bytes  data: 353 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x2
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x40],rax
  00040:    	mov    QWORD PTR [rbp-0x48],rax
  00044:    	mov    QWORD PTR [rbp-0x50],rax
  00048:    	mov    QWORD PTR [rbp-0x58],rax
  0004c:    	mov    QWORD PTR [rbp-0x60],rax
  00050:    	mov    QWORD PTR [rbp-0x68],rax
  00054:    	mov    QWORD PTR [rbp-0x70],rax
  00058:    	mov    QWORD PTR [rbp-0x78],rax
  0005c:    	mov    QWORD PTR [rbp-0x80],rax
  00060: ff 	mov    QWORD PTR [rbp-0x88],rax
  00067: ff 	mov    QWORD PTR [rbp-0x90],rax
  0006e:    	mov    rdi,QWORD PTR [rbp-0x28]
  00072: 00 	test   rdi,0x7
  00079:    	jne    0x3a601
  0007f:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00083:    	jne    0x3a601
:00000 init reg_num:14 arg_num:2 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  00089:    	mov    rdi,QWORD PTR [rbp-0x28]
  0008d:    	mov    rax,QWORD PTR [rdi+0x10]
  00091:    	mov    QWORD PTR [rbp-0x60],rax
:00002 %8 = @n: Plane[IvarId(1)]
  00095:    	mov    rdi,QWORD PTR [rbp-0x28]
  00099:    	mov    rax,QWORD PTR [rdi+0x18]
  0009d:    	mov    QWORD PTR [rbp-0x68],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  000a1:    	mov    rdi,QWORD PTR [rbp-0x60]
  000a5: 00 	test   rdi,0x7
  000ac:    	jne    0x3a610
  000b2:    	cmp    DWORD PTR [rdi+0x4],0x28
  000b6:    	jne    0x3a610
  000bc: 26 	cmp    DWORD PTR [rip+0xffffffffffff9298],0x26        # 0xffff935b
  000c3:    	jne    0x3a610
  000c9:    	mov    rax,QWORD PTR [rbx]
  000cc:    	lea    rdi,[rsp-0x18]
  000d1:    	mov    QWORD PTR [rdi],rax
  000d4:    	mov    QWORD PTR [rbx],rdi
  000d7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000e0:    	mov    QWORD PTR [rsp-0x38],rcx
  000e5:    	mov    rax,QWORD PTR [rbp-0x60]
  000e9:    	mov    QWORD PTR [rsp-0x38],rax
  000ee: 00 	mov    rdi,0x1
  000f5:    	mov    rax,QWORD PTR [rbp-0x68]
  000f9:    	mov    QWORD PTR [rsp-0x40],rax
  000fe: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00107: 05 	movabs rax,0x1000500000041
  00111:    	mov    QWORD PTR [rsp-0x28],rax
  00116: 00 	movabs r13,0x5600b92d48b0
  00120:    	call   0xffffa0ae
  00125:    	lea    rdi,[rbp-0x8]
  00129:    	mov    QWORD PTR [rbx],rdi
  0012c: 00 	movabs r13,0x5600b92b7250
  00136:    	test   rax,rax
  00139:    	je     0xffff6833
  0013f:    	mov    QWORD PTR [rbp-0x40],rax
:00004 
:00006 %3 = neg %3                          [Float]
  00143:    	mov    rdi,QWORD PTR [rbp-0x40]
  00147: 00 	test   rdi,0x1
  0014e:    	jne    0x3a61f
  00154: 00 	test   rdi,0x2
  0015b:    	je     0x197
  00161:    	xorps  xmm2,xmm2
  00164: 00 	movabs rax,0x8000000000000002
  0016e:    	cmp    rdi,rax
  00171:    	je     0x1a9
  00177:    	mov    rax,rdi
  0017a:    	sar    rax,0x3f
  0017e:    	add    rax,0x2
  00182:    	and    rdi,0xfffffffffffffffc
  00186:    	or     rdi,rax
  00189:    	rol    rdi,0x3d
  0018d:    	movq   xmm2,rdi
  00192:    	jmp    0x1a9
  00197:    	call   0xffff686c
  0019c:    	test   rax,rax
  0019f:    	je     0x3a61f
  001a5:    	movq   xmm2,xmm0
  001a9: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1868]        # 0x1a18
:00007 %7 = %1.call dir()                   [Ray]
  001b0:    	mov    rdi,QWORD PTR [rbp-0x30]
  001b4: 00 	test   rdi,0x7
  001bb:    	jne    0x3a62e
  001c1:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001c5:    	jne    0x3a62e
  001cb: 26 	cmp    DWORD PTR [rip+0xffffffffffff9189],0x26        # 0xffff935b
  001d2:    	jne    0x3a62e
  001d8:    	mov    esi,DWORD PTR [rip+0x1846]        # 0x1a24
  001de:    	cmp    esi,0xffffffff
  001e1:    	je     0x3a64a
  001e7:    	cmp    WORD PTR [rdi+0x2],0x3
  001ec:    	jne    0x205
  001f2:    	cmp    esi,0x6
  001f5:    	jge    0x205
  001fb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00200:    	jmp    0x223
  00205:    	sub    rsp,0x10
  00209:    	movq   QWORD PTR [rsp],xmm2
  0020e: 00 	movabs rax,0x5600b755dfe0
  00218:    	call   rax
  0021a:    	movq   xmm2,QWORD PTR [rsp]
  0021f:    	add    rsp,0x10
  00223:    	mov    QWORD PTR [rbp-0x60],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  00227:    	mov    rdi,QWORD PTR [rbp-0x28]
  0022b:    	mov    rax,QWORD PTR [rdi+0x18]
  0022f:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  00233:    	mov    rdi,QWORD PTR [rbp-0x60]
  00237: 00 	test   rdi,0x7
  0023e:    	jne    0x3a685
  00244:    	cmp    DWORD PTR [rdi+0x4],0x28
  00248:    	jne    0x3a685
  0024e: 26 	cmp    DWORD PTR [rip+0xffffffffffff9106],0x26        # 0xffff935b
  00255:    	jne    0x3a685
  0025b:    	sub    rsp,0x10
  0025f:    	movq   QWORD PTR [rsp],xmm2
  00264:    	mov    rax,QWORD PTR [rbx]
  00267:    	lea    rdi,[rsp-0x18]
  0026c:    	mov    QWORD PTR [rdi],rax
  0026f:    	mov    QWORD PTR [rbx],rdi
  00272: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0027b:    	mov    QWORD PTR [rsp-0x38],rcx
  00280:    	mov    rax,QWORD PTR [rbp-0x60]
  00284:    	mov    QWORD PTR [rsp-0x38],rax
  00289: 00 	mov    rdi,0x1
  00290:    	mov    rax,QWORD PTR [rbp-0x68]
  00294:    	mov    QWORD PTR [rsp-0x40],rax
  00299: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002a2: 05 	movabs rax,0x1000500000041
  002ac:    	mov    QWORD PTR [rsp-0x28],rax
  002b1: 00 	movabs r13,0x5600b92d48b0
  002bb:    	call   0xffffa0ae
  002c0:    	lea    rdi,[rbp-0x8]
  002c4:    	mov    QWORD PTR [rbx],rdi
  002c7:    	movq   xmm2,QWORD PTR [rsp]
  002cc:    	add    rsp,0x10
  002d0: 00 	movabs r13,0x5600b92b72d0
  002da:    	test   rax,rax
  002dd:    	je     0xffff6833
  002e3:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %5 = %4
  002e7:    	mov    rax,QWORD PTR [rbp-0x48]
  002eb:    	mov    QWORD PTR [rbp-0x50],rax
:00015 %7 = literal[0.0]
  002ef: 00 	movq   xmm3,QWORD PTR [rip+0x1731]        # 0x1a28
  002f7: 00 	movabs rax,0x8000000000000002
  00301:    	mov    QWORD PTR [rbp-0x60],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  00305:    	mov    rdi,QWORD PTR [rbp-0x48]
  00309: 00 	test   rdi,0x1
  00310:    	jne    0x3a6a1
  00316: 00 	test   rdi,0x2
  0031d:    	je     0x359
  00323:    	xorps  xmm4,xmm4
  00326: 00 	movabs rax,0x8000000000000002
  00330:    	cmp    rdi,rax
  00333:    	je     0x36b
  00339:    	mov    rax,rdi
  0033c:    	sar    rax,0x3f
  00340:    	add    rax,0x2
  00344:    	and    rdi,0xfffffffffffffffc
  00348:    	or     rdi,rax
  0034b:    	rol    rdi,0x3d
  0034f:    	movq   xmm4,rdi
  00354:    	jmp    0x36b
  00359:    	call   0xffff686c
  0035e:    	test   rax,rax
  00361:    	je     0x3a6a1
  00367:    	movq   xmm4,xmm0
  0036b:    	ucomisd xmm4,xmm3
  0036f:    	jae    0x3a708
:00018 %5 = %4
:00019 %5 = neg %5                          [<INVALID>]
  00375: 01 	sub    DWORD PTR [rip+0x16b4],0x1        # 0x1a30
  0037c:    	je     0x3a6e6
  00382:    	movq   xmm0,xmm4
  00386:    	call   0xffff695f
  0038b:    	mov    QWORD PTR [rbp-0x50],rax
  0038f:    	sub    rsp,0x20
  00393:    	movq   QWORD PTR [rsp],xmm2
  00398:    	movq   QWORD PTR [rsp+0x8],xmm3
  0039e:    	movq   QWORD PTR [rsp+0x10],xmm4
  003a4:    	mov    rdi,QWORD PTR [rbp-0x50]
  003a8:    	mov    rdx,rdi
  003ab:    	mov    rdi,rbx
  003ae:    	mov    rsi,r12
  003b1: 00 	movabs rax,0x5600b7596530
  003bb:    	call   rax
  003bd:    	movq   xmm2,QWORD PTR [rsp]
  003c2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003c8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003ce:    	add    rsp,0x20
  003d2: 00 	movabs r13,0x5600b92b7340
  003dc:    	test   rax,rax
  003df:    	je     0xffff6833
  003e5:    	mov    QWORD PTR [rbp-0x50],rax
:00020 br =>:00021
  003e9:    	jmp    0x3a72e
:00021 %7 = literal[1e-17]
  003ee: 00 	movq   xmm3,QWORD PTR [rip+0x1642]        # 0x1a38
  003f6: aa 	movabs rax,0xe33877aa3236a4ba
  00400:    	mov    QWORD PTR [rbp-0x60],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  00404:    	mov    rdi,QWORD PTR [rbp-0x50]
  00408: 00 	test   rdi,0x1
  0040f:    	jne    0x3a754
  00415: 00 	test   rdi,0x2
  0041c:    	je     0x458
  00422:    	xorps  xmm5,xmm5
  00425: 00 	movabs rax,0x8000000000000002
  0042f:    	cmp    rdi,rax
  00432:    	je     0x46a
  00438:    	mov    rax,rdi
  0043b:    	sar    rax,0x3f
  0043f:    	add    rax,0x2
  00443:    	and    rdi,0xfffffffffffffffc
  00447:    	or     rdi,rax
  0044a:    	rol    rdi,0x3d
  0044e:    	movq   xmm5,rdi
  00453:    	jmp    0x46a
  00458:    	call   0xffff686c
  0045d:    	test   rax,rax
  00460:    	je     0x3a754
  00466:    	movq   xmm5,xmm0
  0046a:    	ucomisd xmm5,xmm3
  0046e:    	jae    0x482
:00024 %7 = nil
  00474: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00025 ret %7
  0047c:    	mov    rax,QWORD PTR [rbp-0x60]
  00480:    	leave  
  00481:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  00482:    	mov    rdi,QWORD PTR [rbp-0x30]
  00486: 00 	test   rdi,0x7
  0048d:    	jne    0x3a770
  00493:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00497:    	jne    0x3a770
  0049d: 26 	cmp    DWORD PTR [rip+0xffffffffffff8eb7],0x26        # 0xffff935b
  004a4:    	jne    0x3a770
  004aa:    	mov    esi,DWORD PTR [rip+0x1594]        # 0x1a44
  004b0:    	cmp    esi,0xffffffff
  004b3:    	je     0x3a78c
  004b9:    	cmp    WORD PTR [rdi+0x2],0x3
  004be:    	jne    0x4d7
  004c4:    	cmp    esi,0x6
  004c7:    	jge    0x4d7
  004cd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004d2:    	jmp    0x519
  004d7:    	sub    rsp,0x20
  004db:    	movq   QWORD PTR [rsp],xmm2
  004e0:    	movq   QWORD PTR [rsp+0x8],xmm3
  004e6:    	movq   QWORD PTR [rsp+0x10],xmm4
  004ec:    	movq   QWORD PTR [rsp+0x18],xmm5
  004f2: 00 	movabs rax,0x5600b755dfe0
  004fc:    	call   rax
  004fe:    	movq   xmm2,QWORD PTR [rsp]
  00503:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00509:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0050f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00515:    	add    rsp,0x20
  00519:    	mov    QWORD PTR [rbp-0x68],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  0051d:    	mov    rdi,QWORD PTR [rbp-0x28]
  00521:    	mov    rax,QWORD PTR [rdi+0x18]
  00525:    	mov    QWORD PTR [rbp-0x70],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  00529:    	mov    rdi,QWORD PTR [rbp-0x68]
  0052d: 00 	test   rdi,0x7
  00534:    	jne    0x3a7eb
  0053a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0053e:    	jne    0x3a7eb
  00544: 26 	cmp    DWORD PTR [rip+0xffffffffffff8e10],0x26        # 0xffff935b
  0054b:    	jne    0x3a7eb
  00551:    	sub    rsp,0x20
  00555:    	movq   QWORD PTR [rsp],xmm2
  0055a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00560:    	movq   QWORD PTR [rsp+0x10],xmm5
  00566:    	mov    rax,QWORD PTR [rbx]
  00569:    	lea    rdi,[rsp-0x18]
  0056e:    	mov    QWORD PTR [rdi],rax
  00571:    	mov    QWORD PTR [rbx],rdi
  00574: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0057d:    	mov    QWORD PTR [rsp-0x38],rcx
  00582:    	mov    rax,QWORD PTR [rbp-0x68]
  00586:    	mov    QWORD PTR [rsp-0x38],rax
  0058b: 00 	mov    rdi,0x1
  00592:    	mov    rax,QWORD PTR [rbp-0x70]
  00596:    	mov    QWORD PTR [rsp-0x40],rax
  0059b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  005a4: 05 	movabs rax,0x1000500000041
  005ae:    	mov    QWORD PTR [rsp-0x28],rax
  005b3: 00 	movabs r13,0x5600b92d48b0
  005bd:    	call   0xffffa0ae
  005c2:    	lea    rdi,[rbp-0x8]
  005c6:    	mov    QWORD PTR [rbx],rdi
  005c9:    	movq   xmm2,QWORD PTR [rsp]
  005ce:    	movq   xmm4,QWORD PTR [rsp+0x8]
  005d4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005da:    	add    rsp,0x20
  005de: 00 	movabs r13,0x5600b92b7410
  005e8:    	test   rax,rax
  005eb:    	je     0xffff6833
  005f1:    	mov    QWORD PTR [rbp-0x60],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  005f5:    	mov    rdi,QWORD PTR [rbp-0x60]
  005f9: 00 	test   rdi,0x1
  00600:    	jne    0x3a807
  00606: 00 	test   rdi,0x2
  0060d:    	je     0x649
  00613:    	xorps  xmm3,xmm3
  00616: 00 	movabs rax,0x8000000000000002
  00620:    	cmp    rdi,rax
  00623:    	je     0x65b
  00629:    	mov    rax,rdi
  0062c:    	sar    rax,0x3f
  00630:    	add    rax,0x2
  00634:    	and    rdi,0xfffffffffffffffc
  00638:    	or     rdi,rax
  0063b:    	rol    rdi,0x3d
  0063f:    	movq   xmm3,rdi
  00644:    	jmp    0x65b
  00649:    	call   0xffff686c
  0064e:    	test   rax,rax
  00651:    	je     0x3a807
  00657:    	movq   xmm3,xmm0
  0065b:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  0065f: 00 	xorps  xmm3,XMMWORD PTR [rip+0x13e2]        # 0x1a48
:00036 %6 = %7 / %4                         [Float][Float]
  00666:    	movq   xmm6,xmm3
  0066a:    	movq   rax,xmm4
  0066f:    	test   rax,rax
  00672:    	je     0xffff6858
  00678:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  0067c: 00 	movq   xmm3,QWORD PTR [rip+0x13d4]        # 0x1a58
  00684: 00 	movabs rax,0x8000000000000002
  0068e:    	mov    QWORD PTR [rbp-0x60],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  00692:    	ucomisd xmm6,xmm3
  00696:    	jbe    0x3b780
:00040 %7 = %2.call t()                     [<INVALID>]
  0069c: 01 	sub    DWORD PTR [rip+0x13bd],0x1        # 0x1a60
  006a3:    	je     0x3a84c
  006a9:    	sub    rsp,0x20
  006ad:    	movq   QWORD PTR [rsp],xmm2
  006b2:    	movq   QWORD PTR [rsp+0x8],xmm4
  006b8:    	movq   QWORD PTR [rsp+0x10],xmm5
  006be:    	movq   QWORD PTR [rsp+0x18],xmm6
  006c4:    	mov    rdi,QWORD PTR [rbp-0x38]
  006c8: 00 	movabs rax,0x5600b75a2280
  006d2:    	call   rax
  006d4:    	mov    r15d,eax
  006d7: 00 	cmp    r15d,DWORD PTR [rip+0x138a]        # 0x1a68
  006de:    	jne    0x3a86e
  006e4:    	mov    eax,DWORD PTR [rip+0xffffffffffff8c71]        # 0xffff935b
  006ea:    	cmp    DWORD PTR [rip+0x1374],eax        # 0x1a64
  006f0:    	jne    0x3a86e
  006f6:    	mov    rax,QWORD PTR [rbx]
  006f9:    	lea    rdi,[rsp-0x18]
  006fe:    	mov    QWORD PTR [rdi],rax
  00701:    	mov    QWORD PTR [rbx],rdi
  00704: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0070d:    	mov    QWORD PTR [rsp-0x38],rcx
  00712:    	mov    rax,QWORD PTR [rbp-0x38]
  00716:    	mov    QWORD PTR [rsp-0x38],rax
  0071b: 00 	mov    rdi,0x0
  00722: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0072b: 00 	movabs rax,0x0
  00735:    	mov    QWORD PTR [rsp-0x28],rax
  0073a: 00 	movabs r13,0x0
  00744:    	call   0xffff67f8
  00749:    	lea    rdi,[rbp-0x8]
  0074d:    	mov    QWORD PTR [rbx],rdi
  00750:    	movq   xmm2,QWORD PTR [rsp]
  00755:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0075b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00761:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00767:    	add    rsp,0x20
  0076b:    	test   rax,rax
  0076e:    	je     0x3a8da
  00774:    	mov    QWORD PTR [rbp-0x60],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  00778:    	movq   xmm0,xmm6
  0077c:    	call   0xffff695f
  00781:    	mov    QWORD PTR [rbp-0x58],rax
  00785:    	mov    rdi,QWORD PTR [rbp-0x58]
  00789:    	mov    rsi,QWORD PTR [rbp-0x60]
  0078d: 00 	test   rdi,0x1
  00794:    	je     0x3a8e9
  0079a: 00 	test   rsi,0x1
  007a1:    	je     0x3a8e9
  007a7:    	cmp    rdi,rsi
  007aa:    	jge    0x3b7b3
:00045 %7 = literal[true]
  007b0: 00 	mov    rax,0x1c
  007b7:    	mov    QWORD PTR [rbp-0x60],rax
:00046 _ = %2.call hit=(%7; 1)              [<INVALID>]
  007bb: 01 	sub    DWORD PTR [rip+0x12aa],0x1        # 0x1a6c
  007c2:    	je     0x3a95a
  007c8:    	sub    rsp,0x20
  007cc:    	movq   QWORD PTR [rsp],xmm2
  007d1:    	movq   QWORD PTR [rsp+0x8],xmm4
  007d7:    	movq   QWORD PTR [rsp+0x10],xmm5
  007dd:    	movq   QWORD PTR [rsp+0x18],xmm6
  007e3:    	mov    rdi,QWORD PTR [rbp-0x38]
  007e7: 00 	movabs rax,0x5600b75a2280
  007f1:    	call   rax
  007f3:    	mov    r15d,eax
  007f6: 00 	cmp    r15d,DWORD PTR [rip+0x1277]        # 0x1a74
  007fd:    	jne    0x3a97c
  00803:    	mov    eax,DWORD PTR [rip+0xffffffffffff8b52]        # 0xffff935b
  00809:    	cmp    DWORD PTR [rip+0x1261],eax        # 0x1a70
  0080f:    	jne    0x3a97c
  00815:    	mov    rax,QWORD PTR [rbx]
  00818:    	lea    rdi,[rsp-0x18]
  0081d:    	mov    QWORD PTR [rdi],rax
  00820:    	mov    QWORD PTR [rbx],rdi
  00823: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0082c:    	mov    QWORD PTR [rsp-0x38],rcx
  00831:    	mov    rax,QWORD PTR [rbp-0x38]
  00835:    	mov    QWORD PTR [rsp-0x38],rax
  0083a: 00 	mov    rdi,0x1
  00841:    	mov    rax,QWORD PTR [rbp-0x60]
  00845:    	mov    QWORD PTR [rsp-0x40],rax
  0084a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00853: 00 	movabs rax,0x0
  0085d:    	mov    QWORD PTR [rsp-0x28],rax
  00862: 00 	movabs r13,0x0
  0086c:    	call   0xffff67f8
  00871:    	lea    rdi,[rbp-0x8]
  00875:    	mov    QWORD PTR [rbx],rdi
  00878:    	movq   xmm2,QWORD PTR [rsp]
  0087d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00883:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00889:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0088f:    	add    rsp,0x20
  00893:    	test   rax,rax
  00896:    	je     0x3a9e8
:00047 
:00049 _ = %2.call t=(%6; 1)                [<INVALID>]
  0089c: 01 	sub    DWORD PTR [rip+0x11d5],0x1        # 0x1a78
  008a3:    	je     0x3aa13
  008a9:    	sub    rsp,0x20
  008ad:    	movq   QWORD PTR [rsp],xmm2
  008b2:    	movq   QWORD PTR [rsp+0x8],xmm4
  008b8:    	movq   QWORD PTR [rsp+0x10],xmm5
  008be:    	movq   QWORD PTR [rsp+0x18],xmm6
  008c4:    	mov    rdi,QWORD PTR [rbp-0x38]
  008c8: 00 	movabs rax,0x5600b75a2280
  008d2:    	call   rax
  008d4:    	mov    r15d,eax
  008d7: 00 	cmp    r15d,DWORD PTR [rip+0x11a2]        # 0x1a80
  008de:    	jne    0x3aa35
  008e4:    	mov    eax,DWORD PTR [rip+0xffffffffffff8a71]        # 0xffff935b
  008ea:    	cmp    DWORD PTR [rip+0x118c],eax        # 0x1a7c
  008f0:    	jne    0x3aa35
  008f6:    	mov    rax,QWORD PTR [rbx]
  008f9:    	lea    rdi,[rsp-0x18]
  008fe:    	mov    QWORD PTR [rdi],rax
  00901:    	mov    QWORD PTR [rbx],rdi
  00904: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0090d:    	mov    QWORD PTR [rsp-0x38],rcx
  00912:    	mov    rax,QWORD PTR [rbp-0x38]
  00916:    	mov    QWORD PTR [rsp-0x38],rax
  0091b: 00 	mov    rdi,0x1
  00922:    	mov    rax,QWORD PTR [rbp-0x58]
  00926:    	mov    QWORD PTR [rsp-0x40],rax
  0092b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00934: 00 	movabs rax,0x0
  0093e:    	mov    QWORD PTR [rsp-0x28],rax
  00943: 00 	movabs r13,0x0
  0094d:    	call   0xffff67f8
  00952:    	lea    rdi,[rbp-0x8]
  00956:    	mov    QWORD PTR [rbx],rdi
  00959:    	movq   xmm2,QWORD PTR [rsp]
  0095e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00964:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0096a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00970:    	add    rsp,0x20
  00974:    	test   rax,rax
  00977:    	je     0x3aaa1
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  0097d:    	mov    rdi,QWORD PTR [rbp-0x28]
  00981:    	sub    rsp,0x20
  00985:    	movq   QWORD PTR [rsp],xmm2
  0098a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00990:    	movq   QWORD PTR [rsp+0x10],xmm5
  00996:    	movq   QWORD PTR [rsp+0x18],xmm6
  0099c: 00 	mov    rsi,0x8c
  009a3:    	mov    rdx,r12
  009a6: 00 	movabs rax,0x5600b75c5460
  009b0:    	call   rax
  009b2:    	movq   xmm2,QWORD PTR [rsp]
  009b7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009bd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009c3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009c9:    	add    rsp,0x20
  009cd:    	mov    QWORD PTR [rbp-0x60],rax
:00053 _ = %2.call n=(%7; 1)                [<INVALID>]
  009d1: 01 	sub    DWORD PTR [rip+0x10ac],0x1        # 0x1a84
  009d8:    	je     0x3aacc
  009de:    	sub    rsp,0x20
  009e2:    	movq   QWORD PTR [rsp],xmm2
  009e7:    	movq   QWORD PTR [rsp+0x8],xmm4
  009ed:    	movq   QWORD PTR [rsp+0x10],xmm5
  009f3:    	movq   QWORD PTR [rsp+0x18],xmm6
  009f9:    	mov    rdi,QWORD PTR [rbp-0x38]
  009fd: 00 	movabs rax,0x5600b75a2280
  00a07:    	call   rax
  00a09:    	mov    r15d,eax
  00a0c: 00 	cmp    r15d,DWORD PTR [rip+0x1079]        # 0x1a8c
  00a13:    	jne    0x3aaee
  00a19:    	mov    eax,DWORD PTR [rip+0xffffffffffff893c]        # 0xffff935b
  00a1f:    	cmp    DWORD PTR [rip+0x1063],eax        # 0x1a88
  00a25:    	jne    0x3aaee
  00a2b:    	mov    rax,QWORD PTR [rbx]
  00a2e:    	lea    rdi,[rsp-0x18]
  00a33:    	mov    QWORD PTR [rdi],rax
  00a36:    	mov    QWORD PTR [rbx],rdi
  00a39: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a42:    	mov    QWORD PTR [rsp-0x38],rcx
  00a47:    	mov    rax,QWORD PTR [rbp-0x38]
  00a4b:    	mov    QWORD PTR [rsp-0x38],rax
  00a50: 00 	mov    rdi,0x1
  00a57:    	mov    rax,QWORD PTR [rbp-0x60]
  00a5b:    	mov    QWORD PTR [rsp-0x40],rax
  00a60: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a69: 00 	movabs rax,0x0
  00a73:    	mov    QWORD PTR [rsp-0x28],rax
  00a78: 00 	movabs r13,0x0
  00a82:    	call   0xffff67f8
  00a87:    	lea    rdi,[rbp-0x8]
  00a8b:    	mov    QWORD PTR [rbx],rdi
  00a8e:    	movq   xmm2,QWORD PTR [rsp]
  00a93:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a99:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a9f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00aa5:    	add    rsp,0x20
  00aa9:    	test   rax,rax
  00aac:    	je     0x3ab5a
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00ab2: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff88af]        # 0xffff9368
  00ab9: 00 	cmp    rax,QWORD PTR [rip+0xfe8]        # 0x1aa8
  00ac0:    	jne    0x3ab69
  00ac6: 00 	mov    rax,QWORD PTR [rip+0xfcb]        # 0x1a98
  00acd:    	mov    QWORD PTR [rbp-0x68],rax
:00057 %10 = %1.call org()                  [<INVALID>]
  00ad1: 01 	sub    DWORD PTR [rip+0xfd8],0x1        # 0x1ab0
  00ad8:    	je     0x3ac01
  00ade:    	sub    rsp,0x20
  00ae2:    	movq   QWORD PTR [rsp],xmm2
  00ae7:    	movq   QWORD PTR [rsp+0x8],xmm4
  00aed:    	movq   QWORD PTR [rsp+0x10],xmm5
  00af3:    	movq   QWORD PTR [rsp+0x18],xmm6
  00af9:    	mov    rdi,QWORD PTR [rbp-0x30]
  00afd: 00 	movabs rax,0x5600b75a2280
  00b07:    	call   rax
  00b09:    	mov    r15d,eax
  00b0c: 00 	cmp    r15d,DWORD PTR [rip+0xfa5]        # 0x1ab8
  00b13:    	jne    0x3ac23
  00b19:    	mov    eax,DWORD PTR [rip+0xffffffffffff883c]        # 0xffff935b
  00b1f:    	cmp    DWORD PTR [rip+0xf8f],eax        # 0x1ab4
  00b25:    	jne    0x3ac23
  00b2b:    	mov    rax,QWORD PTR [rbx]
  00b2e:    	lea    rdi,[rsp-0x18]
  00b33:    	mov    QWORD PTR [rdi],rax
  00b36:    	mov    QWORD PTR [rbx],rdi
  00b39: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b42:    	mov    QWORD PTR [rsp-0x38],rcx
  00b47:    	mov    rax,QWORD PTR [rbp-0x30]
  00b4b:    	mov    QWORD PTR [rsp-0x38],rax
  00b50: 00 	mov    rdi,0x0
  00b57: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b60: 00 	movabs rax,0x0
  00b6a:    	mov    QWORD PTR [rsp-0x28],rax
  00b6f: 00 	movabs r13,0x0
  00b79:    	call   0xffff67f8
  00b7e:    	lea    rdi,[rbp-0x8]
  00b82:    	mov    QWORD PTR [rbx],rdi
  00b85:    	movq   xmm2,QWORD PTR [rsp]
  00b8a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b90:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b96:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b9c:    	add    rsp,0x20
  00ba0:    	test   rax,rax
  00ba3:    	je     0x3ac8f
  00ba9:    	mov    QWORD PTR [rbp-0x78],rax
:00058 
:00060 %9 = %10.call x()                    [<INVALID>]
  00bad: 01 	sub    DWORD PTR [rip+0xf08],0x1        # 0x1abc
  00bb4:    	je     0x3acba
  00bba:    	sub    rsp,0x20
  00bbe:    	movq   QWORD PTR [rsp],xmm2
  00bc3:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bc9:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bcf:    	movq   QWORD PTR [rsp+0x18],xmm6
  00bd5:    	mov    rdi,QWORD PTR [rbp-0x78]
  00bd9: 00 	movabs rax,0x5600b75a2280
  00be3:    	call   rax
  00be5:    	mov    r15d,eax
  00be8: 00 	cmp    r15d,DWORD PTR [rip+0xed5]        # 0x1ac4
  00bef:    	jne    0x3acdc
  00bf5:    	mov    eax,DWORD PTR [rip+0xffffffffffff8760]        # 0xffff935b
  00bfb:    	cmp    DWORD PTR [rip+0xebf],eax        # 0x1ac0
  00c01:    	jne    0x3acdc
  00c07:    	mov    rax,QWORD PTR [rbx]
  00c0a:    	lea    rdi,[rsp-0x18]
  00c0f:    	mov    QWORD PTR [rdi],rax
  00c12:    	mov    QWORD PTR [rbx],rdi
  00c15: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c1e:    	mov    QWORD PTR [rsp-0x38],rcx
  00c23:    	mov    rax,QWORD PTR [rbp-0x78]
  00c27:    	mov    QWORD PTR [rsp-0x38],rax
  00c2c: 00 	mov    rdi,0x0
  00c33: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c3c: 00 	movabs rax,0x0
  00c46:    	mov    QWORD PTR [rsp-0x28],rax
  00c4b: 00 	movabs r13,0x0
  00c55:    	call   0xffff67f8
  00c5a:    	lea    rdi,[rbp-0x8]
  00c5e:    	mov    QWORD PTR [rbx],rdi
  00c61:    	movq   xmm2,QWORD PTR [rsp]
  00c66:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c6c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c72:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c78:    	add    rsp,0x20
  00c7c:    	test   rax,rax
  00c7f:    	je     0x3ad48
  00c85:    	mov    QWORD PTR [rbp-0x70],rax
:00061 
:00063 %11 = %1.call dir()                  [<INVALID>]
  00c89: 01 	sub    DWORD PTR [rip+0xe38],0x1        # 0x1ac8
  00c90:    	je     0x3ad73
  00c96:    	sub    rsp,0x20
  00c9a:    	movq   QWORD PTR [rsp],xmm2
  00c9f:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ca5:    	movq   QWORD PTR [rsp+0x10],xmm5
  00cab:    	movq   QWORD PTR [rsp+0x18],xmm6
  00cb1:    	mov    rdi,QWORD PTR [rbp-0x30]
  00cb5: 00 	movabs rax,0x5600b75a2280
  00cbf:    	call   rax
  00cc1:    	mov    r15d,eax
  00cc4: 00 	cmp    r15d,DWORD PTR [rip+0xe05]        # 0x1ad0
  00ccb:    	jne    0x3ad95
  00cd1:    	mov    eax,DWORD PTR [rip+0xffffffffffff8684]        # 0xffff935b
  00cd7:    	cmp    DWORD PTR [rip+0xdef],eax        # 0x1acc
  00cdd:    	jne    0x3ad95
  00ce3:    	mov    rax,QWORD PTR [rbx]
  00ce6:    	lea    rdi,[rsp-0x18]
  00ceb:    	mov    QWORD PTR [rdi],rax
  00cee:    	mov    QWORD PTR [rbx],rdi
  00cf1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cfa:    	mov    QWORD PTR [rsp-0x38],rcx
  00cff:    	mov    rax,QWORD PTR [rbp-0x30]
  00d03:    	mov    QWORD PTR [rsp-0x38],rax
  00d08: 00 	mov    rdi,0x0
  00d0f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d18: 00 	movabs rax,0x0
  00d22:    	mov    QWORD PTR [rsp-0x28],rax
  00d27: 00 	movabs r13,0x0
  00d31:    	call   0xffff67f8
  00d36:    	lea    rdi,[rbp-0x8]
  00d3a:    	mov    QWORD PTR [rbx],rdi
  00d3d:    	movq   xmm2,QWORD PTR [rsp]
  00d42:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d48:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d4e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d54:    	add    rsp,0x20
  00d58:    	test   rax,rax
  00d5b:    	je     0x3ae01
  00d61:    	mov    QWORD PTR [rbp-0x80],rax
:00064 
:00066 %10 = %11.call x()                   [<INVALID>]
  00d65: 01 	sub    DWORD PTR [rip+0xd68],0x1        # 0x1ad4
  00d6c:    	je     0x3ae2c
  00d72:    	sub    rsp,0x20
  00d76:    	movq   QWORD PTR [rsp],xmm2
  00d7b:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d81:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d87:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d8d:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d91: 00 	movabs rax,0x5600b75a2280
  00d9b:    	call   rax
  00d9d:    	mov    r15d,eax
  00da0: 00 	cmp    r15d,DWORD PTR [rip+0xd35]        # 0x1adc
  00da7:    	jne    0x3ae4e
  00dad:    	mov    eax,DWORD PTR [rip+0xffffffffffff85a8]        # 0xffff935b
  00db3:    	cmp    DWORD PTR [rip+0xd1f],eax        # 0x1ad8
  00db9:    	jne    0x3ae4e
  00dbf:    	mov    rax,QWORD PTR [rbx]
  00dc2:    	lea    rdi,[rsp-0x18]
  00dc7:    	mov    QWORD PTR [rdi],rax
  00dca:    	mov    QWORD PTR [rbx],rdi
  00dcd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00dd6:    	mov    QWORD PTR [rsp-0x38],rcx
  00ddb:    	mov    rax,QWORD PTR [rbp-0x80]
  00ddf:    	mov    QWORD PTR [rsp-0x38],rax
  00de4: 00 	mov    rdi,0x0
  00deb: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00df4: 00 	movabs rax,0x0
  00dfe:    	mov    QWORD PTR [rsp-0x28],rax
  00e03: 00 	movabs r13,0x0
  00e0d:    	call   0xffff67f8
  00e12:    	lea    rdi,[rbp-0x8]
  00e16:    	mov    QWORD PTR [rbx],rdi
  00e19:    	movq   xmm2,QWORD PTR [rsp]
  00e1e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e24:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e2a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e30:    	add    rsp,0x20
  00e34:    	test   rax,rax
  00e37:    	je     0x3aeba
  00e3d:    	mov    QWORD PTR [rbp-0x78],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00e41: 01 	sub    DWORD PTR [rip+0xc98],0x1        # 0x1ae0
  00e48:    	je     0x3aee5
  00e4e:    	mov    rdi,QWORD PTR [rbp-0x58]
  00e52:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e56:    	sub    rsp,0x20
  00e5a:    	movq   QWORD PTR [rsp],xmm2
  00e5f:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e65:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e6b:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e71:    	mov    rdx,rdi
  00e74:    	mov    rcx,rsi
  00e77:    	mov    rdi,rbx
  00e7a:    	mov    rsi,r12
  00e7d: 00 	movabs rax,0x5600b7598f60
  00e87:    	call   rax
  00e89:    	movq   xmm2,QWORD PTR [rsp]
  00e8e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e94:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e9a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ea0:    	add    rsp,0x20
  00ea4: 00 	movabs r13,0x5600b92b7660
  00eae:    	test   rax,rax
  00eb1:    	je     0xffff6833
  00eb7:    	mov    QWORD PTR [rbp-0x78],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00ebb: 01 	sub    DWORD PTR [rip+0xc22],0x1        # 0x1ae4
  00ec2:    	je     0x3af23
  00ec8:    	mov    rdi,QWORD PTR [rbp-0x70]
  00ecc:    	mov    rsi,QWORD PTR [rbp-0x78]
  00ed0:    	sub    rsp,0x20
  00ed4:    	movq   QWORD PTR [rsp],xmm2
  00ed9:    	movq   QWORD PTR [rsp+0x8],xmm4
  00edf:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ee5:    	movq   QWORD PTR [rsp+0x18],xmm6
  00eeb:    	mov    rdx,rdi
  00eee:    	mov    rcx,rsi
  00ef1:    	mov    rdi,rbx
  00ef4:    	mov    rsi,r12
  00ef7: 00 	movabs rax,0x5600b75970e0
  00f01:    	call   rax
  00f03:    	movq   xmm2,QWORD PTR [rsp]
  00f08:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f0e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f14:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f1a:    	add    rsp,0x20
  00f1e: 00 	movabs r13,0x5600b92b7670
  00f28:    	test   rax,rax
  00f2b:    	je     0xffff6833
  00f31:    	mov    QWORD PTR [rbp-0x70],rax
:00071 %11 = %1.call org()                  [<INVALID>]
  00f35: 01 	sub    DWORD PTR [rip+0xbac],0x1        # 0x1ae8
  00f3c:    	je     0x3af61
  00f42:    	sub    rsp,0x20
  00f46:    	movq   QWORD PTR [rsp],xmm2
  00f4b:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f51:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f57:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f5d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f61: 00 	movabs rax,0x5600b75a2280
  00f6b:    	call   rax
  00f6d:    	mov    r15d,eax
  00f70: 00 	cmp    r15d,DWORD PTR [rip+0xb79]        # 0x1af0
  00f77:    	jne    0x3af83
  00f7d:    	mov    eax,DWORD PTR [rip+0xffffffffffff83d8]        # 0xffff935b
  00f83:    	cmp    DWORD PTR [rip+0xb63],eax        # 0x1aec
  00f89:    	jne    0x3af83
  00f8f:    	mov    rax,QWORD PTR [rbx]
  00f92:    	lea    rdi,[rsp-0x18]
  00f97:    	mov    QWORD PTR [rdi],rax
  00f9a:    	mov    QWORD PTR [rbx],rdi
  00f9d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fa6:    	mov    QWORD PTR [rsp-0x38],rcx
  00fab:    	mov    rax,QWORD PTR [rbp-0x30]
  00faf:    	mov    QWORD PTR [rsp-0x38],rax
  00fb4: 00 	mov    rdi,0x0
  00fbb: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fc4: 00 	movabs rax,0x0
  00fce:    	mov    QWORD PTR [rsp-0x28],rax
  00fd3: 00 	movabs r13,0x0
  00fdd:    	call   0xffff67f8
  00fe2:    	lea    rdi,[rbp-0x8]
  00fe6:    	mov    QWORD PTR [rbx],rdi
  00fe9:    	movq   xmm2,QWORD PTR [rsp]
  00fee:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ff4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ffa:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01000:    	add    rsp,0x20
  01004:    	test   rax,rax
  01007:    	je     0x3afef
  0100d:    	mov    QWORD PTR [rbp-0x80],rax
:00072 
:00074 %10 = %11.call y()                   [<INVALID>]
  01011: 01 	sub    DWORD PTR [rip+0xadc],0x1        # 0x1af4
  01018:    	je     0x3b01a
  0101e:    	sub    rsp,0x20
  01022:    	movq   QWORD PTR [rsp],xmm2
  01027:    	movq   QWORD PTR [rsp+0x8],xmm4
  0102d:    	movq   QWORD PTR [rsp+0x10],xmm5
  01033:    	movq   QWORD PTR [rsp+0x18],xmm6
  01039:    	mov    rdi,QWORD PTR [rbp-0x80]
  0103d: 00 	movabs rax,0x5600b75a2280
  01047:    	call   rax
  01049:    	mov    r15d,eax
  0104c: 00 	cmp    r15d,DWORD PTR [rip+0xaa9]        # 0x1afc
  01053:    	jne    0x3b03c
  01059:    	mov    eax,DWORD PTR [rip+0xffffffffffff82fc]        # 0xffff935b
  0105f:    	cmp    DWORD PTR [rip+0xa93],eax        # 0x1af8
  01065:    	jne    0x3b03c
  0106b:    	mov    rax,QWORD PTR [rbx]
  0106e:    	lea    rdi,[rsp-0x18]
  01073:    	mov    QWORD PTR [rdi],rax
  01076:    	mov    QWORD PTR [rbx],rdi
  01079: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01082:    	mov    QWORD PTR [rsp-0x38],rcx
  01087:    	mov    rax,QWORD PTR [rbp-0x80]
  0108b:    	mov    QWORD PTR [rsp-0x38],rax
  01090: 00 	mov    rdi,0x0
  01097: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010a0: 00 	movabs rax,0x0
  010aa:    	mov    QWORD PTR [rsp-0x28],rax
  010af: 00 	movabs r13,0x0
  010b9:    	call   0xffff67f8
  010be:    	lea    rdi,[rbp-0x8]
  010c2:    	mov    QWORD PTR [rbx],rdi
  010c5:    	movq   xmm2,QWORD PTR [rsp]
  010ca:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010d0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010d6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010dc:    	add    rsp,0x20
  010e0:    	test   rax,rax
  010e3:    	je     0x3b0a8
  010e9:    	mov    QWORD PTR [rbp-0x78],rax
:00075 
:00077 %12 = %1.call dir()                  [<INVALID>]
  010ed: 01 	sub    DWORD PTR [rip+0xa0c],0x1        # 0x1b00
  010f4:    	je     0x3b0d3
  010fa:    	sub    rsp,0x20
  010fe:    	movq   QWORD PTR [rsp],xmm2
  01103:    	movq   QWORD PTR [rsp+0x8],xmm4
  01109:    	movq   QWORD PTR [rsp+0x10],xmm5
  0110f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01115:    	mov    rdi,QWORD PTR [rbp-0x30]
  01119: 00 	movabs rax,0x5600b75a2280
  01123:    	call   rax
  01125:    	mov    r15d,eax
  01128: 00 	cmp    r15d,DWORD PTR [rip+0x9d9]        # 0x1b08
  0112f:    	jne    0x3b0f5
  01135:    	mov    eax,DWORD PTR [rip+0xffffffffffff8220]        # 0xffff935b
  0113b:    	cmp    DWORD PTR [rip+0x9c3],eax        # 0x1b04
  01141:    	jne    0x3b0f5
  01147:    	mov    rax,QWORD PTR [rbx]
  0114a:    	lea    rdi,[rsp-0x18]
  0114f:    	mov    QWORD PTR [rdi],rax
  01152:    	mov    QWORD PTR [rbx],rdi
  01155: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0115e:    	mov    QWORD PTR [rsp-0x38],rcx
  01163:    	mov    rax,QWORD PTR [rbp-0x30]
  01167:    	mov    QWORD PTR [rsp-0x38],rax
  0116c: 00 	mov    rdi,0x0
  01173: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0117c: 00 	movabs rax,0x0
  01186:    	mov    QWORD PTR [rsp-0x28],rax
  0118b: 00 	movabs r13,0x0
  01195:    	call   0xffff67f8
  0119a:    	lea    rdi,[rbp-0x8]
  0119e:    	mov    QWORD PTR [rbx],rdi
  011a1:    	movq   xmm2,QWORD PTR [rsp]
  011a6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011ac:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011b2:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011b8:    	add    rsp,0x20
  011bc:    	test   rax,rax
  011bf:    	je     0x3b161
  011c5: ff 	mov    QWORD PTR [rbp-0x88],rax
:00078 
:00080 %11 = %12.call y()                   [<INVALID>]
  011cc: 01 	sub    DWORD PTR [rip+0x939],0x1        # 0x1b0c
  011d3:    	je     0x3b18c
  011d9:    	sub    rsp,0x20
  011dd:    	movq   QWORD PTR [rsp],xmm2
  011e2:    	movq   QWORD PTR [rsp+0x8],xmm4
  011e8:    	movq   QWORD PTR [rsp+0x10],xmm5
  011ee:    	movq   QWORD PTR [rsp+0x18],xmm6
  011f4: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  011fb: 00 	movabs rax,0x5600b75a2280
  01205:    	call   rax
  01207:    	mov    r15d,eax
  0120a: 00 	cmp    r15d,DWORD PTR [rip+0x903]        # 0x1b14
  01211:    	jne    0x3b1ae
  01217:    	mov    eax,DWORD PTR [rip+0xffffffffffff813e]        # 0xffff935b
  0121d:    	cmp    DWORD PTR [rip+0x8ed],eax        # 0x1b10
  01223:    	jne    0x3b1ae
  01229:    	mov    rax,QWORD PTR [rbx]
  0122c:    	lea    rdi,[rsp-0x18]
  01231:    	mov    QWORD PTR [rdi],rax
  01234:    	mov    QWORD PTR [rbx],rdi
  01237: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01240:    	mov    QWORD PTR [rsp-0x38],rcx
  01245: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0124c:    	mov    QWORD PTR [rsp-0x38],rax
  01251: 00 	mov    rdi,0x0
  01258: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01261: 00 	movabs rax,0x0
  0126b:    	mov    QWORD PTR [rsp-0x28],rax
  01270: 00 	movabs r13,0x0
  0127a:    	call   0xffff67f8
  0127f:    	lea    rdi,[rbp-0x8]
  01283:    	mov    QWORD PTR [rbx],rdi
  01286:    	movq   xmm2,QWORD PTR [rsp]
  0128b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01291:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01297:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0129d:    	add    rsp,0x20
  012a1:    	test   rax,rax
  012a4:    	je     0x3b21d
  012aa:    	mov    QWORD PTR [rbp-0x80],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  012ae: 01 	sub    DWORD PTR [rip+0x863],0x1        # 0x1b18
  012b5:    	je     0x3b248
  012bb:    	mov    rdi,QWORD PTR [rbp-0x58]
  012bf:    	mov    rsi,QWORD PTR [rbp-0x80]
  012c3:    	sub    rsp,0x20
  012c7:    	movq   QWORD PTR [rsp],xmm2
  012cc:    	movq   QWORD PTR [rsp+0x8],xmm4
  012d2:    	movq   QWORD PTR [rsp+0x10],xmm5
  012d8:    	movq   QWORD PTR [rsp+0x18],xmm6
  012de:    	mov    rdx,rdi
  012e1:    	mov    rcx,rsi
  012e4:    	mov    rdi,rbx
  012e7:    	mov    rsi,r12
  012ea: 00 	movabs rax,0x5600b7598f60
  012f4:    	call   rax
  012f6:    	movq   xmm2,QWORD PTR [rsp]
  012fb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01301:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01307:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0130d:    	add    rsp,0x20
  01311: 00 	movabs r13,0x5600b92b7740
  0131b:    	test   rax,rax
  0131e:    	je     0xffff6833
  01324:    	mov    QWORD PTR [rbp-0x80],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  01328: 01 	sub    DWORD PTR [rip+0x7ed],0x1        # 0x1b1c
  0132f:    	je     0x3b286
  01335:    	mov    rdi,QWORD PTR [rbp-0x78]
  01339:    	mov    rsi,QWORD PTR [rbp-0x80]
  0133d:    	sub    rsp,0x20
  01341:    	movq   QWORD PTR [rsp],xmm2
  01346:    	movq   QWORD PTR [rsp+0x8],xmm4
  0134c:    	movq   QWORD PTR [rsp+0x10],xmm5
  01352:    	movq   QWORD PTR [rsp+0x18],xmm6
  01358:    	mov    rdx,rdi
  0135b:    	mov    rcx,rsi
  0135e:    	mov    rdi,rbx
  01361:    	mov    rsi,r12
  01364: 00 	movabs rax,0x5600b75970e0
  0136e:    	call   rax
  01370:    	movq   xmm2,QWORD PTR [rsp]
  01375:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0137b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01381:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01387:    	add    rsp,0x20
  0138b: 00 	movabs r13,0x5600b92b7750
  01395:    	test   rax,rax
  01398:    	je     0xffff6833
  0139e:    	mov    QWORD PTR [rbp-0x78],rax
:00085 %12 = %1.call org()                  [<INVALID>]
  013a2: 01 	sub    DWORD PTR [rip+0x777],0x1        # 0x1b20
  013a9:    	je     0x3b2c4
  013af:    	sub    rsp,0x20
  013b3:    	movq   QWORD PTR [rsp],xmm2
  013b8:    	movq   QWORD PTR [rsp+0x8],xmm4
  013be:    	movq   QWORD PTR [rsp+0x10],xmm5
  013c4:    	movq   QWORD PTR [rsp+0x18],xmm6
  013ca:    	mov    rdi,QWORD PTR [rbp-0x30]
  013ce: 00 	movabs rax,0x5600b75a2280
  013d8:    	call   rax
  013da:    	mov    r15d,eax
  013dd: 00 	cmp    r15d,DWORD PTR [rip+0x744]        # 0x1b28
  013e4:    	jne    0x3b2e6
  013ea:    	mov    eax,DWORD PTR [rip+0xffffffffffff7f6b]        # 0xffff935b
  013f0:    	cmp    DWORD PTR [rip+0x72e],eax        # 0x1b24
  013f6:    	jne    0x3b2e6
  013fc:    	mov    rax,QWORD PTR [rbx]
  013ff:    	lea    rdi,[rsp-0x18]
  01404:    	mov    QWORD PTR [rdi],rax
  01407:    	mov    QWORD PTR [rbx],rdi
  0140a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01413:    	mov    QWORD PTR [rsp-0x38],rcx
  01418:    	mov    rax,QWORD PTR [rbp-0x30]
  0141c:    	mov    QWORD PTR [rsp-0x38],rax
  01421: 00 	mov    rdi,0x0
  01428: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01431: 00 	movabs rax,0x0
  0143b:    	mov    QWORD PTR [rsp-0x28],rax
  01440: 00 	movabs r13,0x0
  0144a:    	call   0xffff67f8
  0144f:    	lea    rdi,[rbp-0x8]
  01453:    	mov    QWORD PTR [rbx],rdi
  01456:    	movq   xmm2,QWORD PTR [rsp]
  0145b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01461:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01467:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0146d:    	add    rsp,0x20
  01471:    	test   rax,rax
  01474:    	je     0x3b352
  0147a: ff 	mov    QWORD PTR [rbp-0x88],rax
:00086 
:00088 %11 = %12.call z()                   [<INVALID>]
  01481: 01 	sub    DWORD PTR [rip+0x6a4],0x1        # 0x1b2c
  01488:    	je     0x3b37d
  0148e:    	sub    rsp,0x20
  01492:    	movq   QWORD PTR [rsp],xmm2
  01497:    	movq   QWORD PTR [rsp+0x8],xmm4
  0149d:    	movq   QWORD PTR [rsp+0x10],xmm5
  014a3:    	movq   QWORD PTR [rsp+0x18],xmm6
  014a9: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  014b0: 00 	movabs rax,0x5600b75a2280
  014ba:    	call   rax
  014bc:    	mov    r15d,eax
  014bf: 00 	cmp    r15d,DWORD PTR [rip+0x66e]        # 0x1b34
  014c6:    	jne    0x3b39f
  014cc:    	mov    eax,DWORD PTR [rip+0xffffffffffff7e89]        # 0xffff935b
  014d2:    	cmp    DWORD PTR [rip+0x658],eax        # 0x1b30
  014d8:    	jne    0x3b39f
  014de:    	mov    rax,QWORD PTR [rbx]
  014e1:    	lea    rdi,[rsp-0x18]
  014e6:    	mov    QWORD PTR [rdi],rax
  014e9:    	mov    QWORD PTR [rbx],rdi
  014ec: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014f5:    	mov    QWORD PTR [rsp-0x38],rcx
  014fa: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01501:    	mov    QWORD PTR [rsp-0x38],rax
  01506: 00 	mov    rdi,0x0
  0150d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01516: 00 	movabs rax,0x0
  01520:    	mov    QWORD PTR [rsp-0x28],rax
  01525: 00 	movabs r13,0x0
  0152f:    	call   0xffff67f8
  01534:    	lea    rdi,[rbp-0x8]
  01538:    	mov    QWORD PTR [rbx],rdi
  0153b:    	movq   xmm2,QWORD PTR [rsp]
  01540:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01546:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0154c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01552:    	add    rsp,0x20
  01556:    	test   rax,rax
  01559:    	je     0x3b40e
  0155f:    	mov    QWORD PTR [rbp-0x80],rax
:00089 
:00091 %13 = %1.call dir()                  [<INVALID>]
  01563: 01 	sub    DWORD PTR [rip+0x5ce],0x1        # 0x1b38
  0156a:    	je     0x3b439
  01570:    	sub    rsp,0x20
  01574:    	movq   QWORD PTR [rsp],xmm2
  01579:    	movq   QWORD PTR [rsp+0x8],xmm4
  0157f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01585:    	movq   QWORD PTR [rsp+0x18],xmm6
  0158b:    	mov    rdi,QWORD PTR [rbp-0x30]
  0158f: 00 	movabs rax,0x5600b75a2280
  01599:    	call   rax
  0159b:    	mov    r15d,eax
  0159e: 00 	cmp    r15d,DWORD PTR [rip+0x59b]        # 0x1b40
  015a5:    	jne    0x3b45b
  015ab:    	mov    eax,DWORD PTR [rip+0xffffffffffff7daa]        # 0xffff935b
  015b1:    	cmp    DWORD PTR [rip+0x585],eax        # 0x1b3c
  015b7:    	jne    0x3b45b
  015bd:    	mov    rax,QWORD PTR [rbx]
  015c0:    	lea    rdi,[rsp-0x18]
  015c5:    	mov    QWORD PTR [rdi],rax
  015c8:    	mov    QWORD PTR [rbx],rdi
  015cb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015d4:    	mov    QWORD PTR [rsp-0x38],rcx
  015d9:    	mov    rax,QWORD PTR [rbp-0x30]
  015dd:    	mov    QWORD PTR [rsp-0x38],rax
  015e2: 00 	mov    rdi,0x0
  015e9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  015f2: 00 	movabs rax,0x0
  015fc:    	mov    QWORD PTR [rsp-0x28],rax
  01601: 00 	movabs r13,0x0
  0160b:    	call   0xffff67f8
  01610:    	lea    rdi,[rbp-0x8]
  01614:    	mov    QWORD PTR [rbx],rdi
  01617:    	movq   xmm2,QWORD PTR [rsp]
  0161c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01622:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01628:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0162e:    	add    rsp,0x20
  01632:    	test   rax,rax
  01635:    	je     0x3b4c7
  0163b: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 
:00094 %12 = %13.call z()                   [<INVALID>]
  01642: 01 	sub    DWORD PTR [rip+0x4fb],0x1        # 0x1b44
  01649:    	je     0x3b4f2
  0164f:    	sub    rsp,0x20
  01653:    	movq   QWORD PTR [rsp],xmm2
  01658:    	movq   QWORD PTR [rsp+0x8],xmm4
  0165e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01664:    	movq   QWORD PTR [rsp+0x18],xmm6
  0166a: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01671: 00 	movabs rax,0x5600b75a2280
  0167b:    	call   rax
  0167d:    	mov    r15d,eax
  01680: 00 	cmp    r15d,DWORD PTR [rip+0x4c5]        # 0x1b4c
  01687:    	jne    0x3b514
  0168d:    	mov    eax,DWORD PTR [rip+0xffffffffffff7cc8]        # 0xffff935b
  01693:    	cmp    DWORD PTR [rip+0x4af],eax        # 0x1b48
  01699:    	jne    0x3b514
  0169f:    	mov    rax,QWORD PTR [rbx]
  016a2:    	lea    rdi,[rsp-0x18]
  016a7:    	mov    QWORD PTR [rdi],rax
  016aa:    	mov    QWORD PTR [rbx],rdi
  016ad: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016b6:    	mov    QWORD PTR [rsp-0x38],rcx
  016bb: ff 	mov    rax,QWORD PTR [rbp-0x90]
  016c2:    	mov    QWORD PTR [rsp-0x38],rax
  016c7: 00 	mov    rdi,0x0
  016ce: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016d7: 00 	movabs rax,0x0
  016e1:    	mov    QWORD PTR [rsp-0x28],rax
  016e6: 00 	movabs r13,0x0
  016f0:    	call   0xffff67f8
  016f5:    	lea    rdi,[rbp-0x8]
  016f9:    	mov    QWORD PTR [rbx],rdi
  016fc:    	movq   xmm2,QWORD PTR [rsp]
  01701:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01707:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0170d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01713:    	add    rsp,0x20
  01717:    	test   rax,rax
  0171a:    	je     0x3b583
  01720: ff 	mov    QWORD PTR [rbp-0x88],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  01727: 01 	sub    DWORD PTR [rip+0x422],0x1        # 0x1b50
  0172e:    	je     0x3b5ae
  01734:    	mov    rdi,QWORD PTR [rbp-0x58]
  01738: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  0173f:    	sub    rsp,0x20
  01743:    	movq   QWORD PTR [rsp],xmm2
  01748:    	movq   QWORD PTR [rsp+0x8],xmm4
  0174e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01754:    	movq   QWORD PTR [rsp+0x18],xmm6
  0175a:    	mov    rdx,rdi
  0175d:    	mov    rcx,rsi
  01760:    	mov    rdi,rbx
  01763:    	mov    rsi,r12
  01766: 00 	movabs rax,0x5600b7598f60
  01770:    	call   rax
  01772:    	movq   xmm2,QWORD PTR [rsp]
  01777:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0177d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01783:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01789:    	add    rsp,0x20
  0178d: 00 	movabs r13,0x5600b92b7820
  01797:    	test   rax,rax
  0179a:    	je     0xffff6833
  017a0: ff 	mov    QWORD PTR [rbp-0x88],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  017a7: 01 	sub    DWORD PTR [rip+0x3a6],0x1        # 0x1b54
  017ae:    	je     0x3b5ec
  017b4:    	mov    rdi,QWORD PTR [rbp-0x80]
  017b8: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  017bf:    	sub    rsp,0x20
  017c3:    	movq   QWORD PTR [rsp],xmm2
  017c8:    	movq   QWORD PTR [rsp+0x8],xmm4
  017ce:    	movq   QWORD PTR [rsp+0x10],xmm5
  017d4:    	movq   QWORD PTR [rsp+0x18],xmm6
  017da:    	mov    rdx,rdi
  017dd:    	mov    rcx,rsi
  017e0:    	mov    rdi,rbx
  017e3:    	mov    rsi,r12
  017e6: 00 	movabs rax,0x5600b75970e0
  017f0:    	call   rax
  017f2:    	movq   xmm2,QWORD PTR [rsp]
  017f7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017fd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01803:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01809:    	add    rsp,0x20
  0180d: 00 	movabs r13,0x5600b92b7830
  01817:    	test   rax,rax
  0181a:    	je     0xffff6833
  01820:    	mov    QWORD PTR [rbp-0x80],rax
:00099 %7 = %8.call new(%9; 3)              [<INVALID>]
  01824: 01 	sub    DWORD PTR [rip+0x32d],0x1        # 0x1b58
  0182b:    	je     0x3b62a
  01831:    	sub    rsp,0x20
  01835:    	movq   QWORD PTR [rsp],xmm2
  0183a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01840:    	movq   QWORD PTR [rsp+0x10],xmm5
  01846:    	movq   QWORD PTR [rsp+0x18],xmm6
  0184c:    	mov    rdi,QWORD PTR [rbp-0x68]
  01850: 00 	movabs rax,0x5600b75a2280
  0185a:    	call   rax
  0185c:    	mov    r15d,eax
  0185f: 00 	cmp    r15d,DWORD PTR [rip+0x2fa]        # 0x1b60
  01866:    	jne    0x3b64c
  0186c:    	mov    eax,DWORD PTR [rip+0xffffffffffff7ae9]        # 0xffff935b
  01872:    	cmp    DWORD PTR [rip+0x2e4],eax        # 0x1b5c
  01878:    	jne    0x3b64c
  0187e:    	mov    rax,QWORD PTR [rbx]
  01881:    	lea    rdi,[rsp-0x18]
  01886:    	mov    QWORD PTR [rdi],rax
  01889:    	mov    QWORD PTR [rbx],rdi
  0188c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01895:    	mov    QWORD PTR [rsp-0x38],rcx
  0189a:    	mov    rax,QWORD PTR [rbp-0x68]
  0189e:    	mov    QWORD PTR [rsp-0x38],rax
  018a3: 00 	mov    rdi,0x3
  018aa:    	mov    rax,QWORD PTR [rbp-0x70]
  018ae:    	mov    QWORD PTR [rsp-0x40],rax
  018b3:    	mov    rax,QWORD PTR [rbp-0x78]
  018b7:    	mov    QWORD PTR [rsp-0x48],rax
  018bc:    	mov    rax,QWORD PTR [rbp-0x80]
  018c0:    	mov    QWORD PTR [rsp-0x50],rax
  018c5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018ce: 00 	movabs rax,0x0
  018d8:    	mov    QWORD PTR [rsp-0x28],rax
  018dd: 00 	movabs r13,0x0
  018e7:    	call   0xffff67f8
  018ec:    	lea    rdi,[rbp-0x8]
  018f0:    	mov    QWORD PTR [rbx],rdi
  018f3:    	movq   xmm2,QWORD PTR [rsp]
  018f8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018fe:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01904:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0190a:    	add    rsp,0x20
  0190e:    	test   rax,rax
  01911:    	je     0x3b6b8
  01917:    	mov    QWORD PTR [rbp-0x60],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [<INVALID>]
  0191b: 01 	sub    DWORD PTR [rip+0x242],0x1        # 0x1b64
  01922:    	je     0x3b6e3
  01928:    	sub    rsp,0x20
  0192c:    	movq   QWORD PTR [rsp],xmm2
  01931:    	movq   QWORD PTR [rsp+0x8],xmm4
  01937:    	movq   QWORD PTR [rsp+0x10],xmm5
  0193d:    	movq   QWORD PTR [rsp+0x18],xmm6
  01943:    	mov    rdi,QWORD PTR [rbp-0x38]
  01947: 00 	movabs rax,0x5600b75a2280
  01951:    	call   rax
  01953:    	mov    r15d,eax
  01956: 00 	cmp    r15d,DWORD PTR [rip+0x20f]        # 0x1b6c
  0195d:    	jne    0x3b705
  01963:    	mov    eax,DWORD PTR [rip+0xffffffffffff79f2]        # 0xffff935b
  01969:    	cmp    DWORD PTR [rip+0x1f9],eax        # 0x1b68
  0196f:    	jne    0x3b705
  01975:    	mov    rax,QWORD PTR [rbx]
  01978:    	lea    rdi,[rsp-0x18]
  0197d:    	mov    QWORD PTR [rdi],rax
  01980:    	mov    QWORD PTR [rbx],rdi
  01983: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0198c:    	mov    QWORD PTR [rsp-0x38],rcx
  01991:    	mov    rax,QWORD PTR [rbp-0x38]
  01995:    	mov    QWORD PTR [rsp-0x38],rax
  0199a: 00 	mov    rdi,0x1
  019a1:    	mov    rax,QWORD PTR [rbp-0x60]
  019a5:    	mov    QWORD PTR [rsp-0x40],rax
  019aa: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019b3: 00 	movabs rax,0x0
  019bd:    	mov    QWORD PTR [rsp-0x28],rax
  019c2: 00 	movabs r13,0x0
  019cc:    	call   0xffff67f8
  019d1:    	lea    rdi,[rbp-0x8]
  019d5:    	mov    QWORD PTR [rbx],rdi
  019d8:    	movq   xmm2,QWORD PTR [rsp]
  019dd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019e3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  019e9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  019ef:    	add    rsp,0x20
  019f3:    	test   rax,rax
  019f6:    	je     0x3b771
:00103 
:00105 br =>:00106
  019fc:    	jmp    0x3b7d9
:00106 %7 = nil
  01a01: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00107 ret %7
  01a09:    	mov    rax,QWORD PTR [rbp-0x60]
  01a0d:    	leave  
  01a0e:    	ret    
==> start whole compile: clamp FuncId(58) self_class:Scene start:[00000] bytecode:0x5600b9291e00
<== finished compile. elapsed:32µs
offset:Pos(45944) code: 529 bytes  data: 79 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: mov    eax,edx
  0000d: sub    eax,0x1
  00010: jge    0x32
  00016: neg    rdx
  00019: lea    rdx,[rbp+rdx*8-0x30]
  0001e: mov    QWORD PTR [rdx],0x4
  00025: sub    rdx,0x8
  00029: add    eax,0x1
  0002c: jne    0x1e
  00032: mov    QWORD PTR [rbp-0x38],0x4
  0003a: mov    QWORD PTR [rbp-0x40],0x4
  00042: mov    rdi,QWORD PTR [rbp-0x28]
  00046: test   rdi,0x7
  0004d: jne    0x39c8f
  00053: cmp    DWORD PTR [rdi+0x4],0x32
  00057: jne    0x39c8f
:00000 init reg_num:4 arg_num:1 stack_offset:5
:00001 %3 = literal[255.5]
  0005d: movq   xmm2,QWORD PTR [rip+0x1b3]        # 0x218
  00065: movabs rax,0x37f800000000002
  0006f: mov    QWORD PTR [rbp-0x40],rax
:00002 %2 = %1 * %3                         [Float][Float]
  00073: mov    rdi,QWORD PTR [rbp-0x30]
  00077: test   rdi,0x1
  0007e: jne    0x39c9e
  00084: test   rdi,0x2
  0008b: je     0xc7
  00091: xorps  xmm3,xmm3
  00094: movabs rax,0x8000000000000002
  0009e: cmp    rdi,rax
  000a1: je     0xd9
  000a7: mov    rax,rdi
  000aa: sar    rax,0x3f
  000ae: add    rax,0x2
  000b2: and    rdi,0xfffffffffffffffc
  000b6: or     rdi,rax
  000b9: rol    rdi,0x3d
  000bd: movq   xmm3,rdi
  000c2: jmp    0xd9
  000c7: call   0xffff4cfc
  000cc: test   rax,rax
  000cf: je     0x39c9e
  000d5: movq   xmm3,xmm0
  000d9: movq   xmm4,xmm3
  000dd: mulsd  xmm4,xmm2
:00003 %3 = literal[255.0]
  000e1: movq   xmm2,QWORD PTR [rip+0x13f]        # 0x228
  000e9: movabs rax,0x37f000000000002
  000f3: mov    QWORD PTR [rbp-0x40],rax
:00004 _%3 = %2 > %3                        [Float][Float]
:00005 condnotbr _%3 =>:00008
  000f7: ucomisd xmm4,xmm2
  000fb: jbe    0x39cad
:00006 %2 = literal[255.0]
  00101: movq   xmm4,QWORD PTR [rip+0x12f]        # 0x238
  00109: movabs rax,0x37f000000000002
  00113: mov    QWORD PTR [rbp-0x38],rax
:00007 br =>:00008
  00117: jmp    0x39cd3
:00008 %3 = literal[0.0]
  0011c: movq   xmm2,QWORD PTR [rip+0x124]        # 0x248
  00124: movabs rax,0x8000000000000002
  0012e: mov    QWORD PTR [rbp-0x40],rax
:00009 _%3 = %2 < %3                        [Float][Float]
:00010 condnotbr _%3 =>:00013
  00132: ucomisd xmm4,xmm2
  00136: jae    0x39cec
:00011 %2 = literal[0.0]
  0013c: movq   xmm4,QWORD PTR [rip+0x114]        # 0x258
  00144: movabs rax,0x8000000000000002
  0014e: mov    QWORD PTR [rbp-0x38],rax
:00012 br =>:00013
  00152: jmp    0x39d05
:00013 %3 = %2.call to_i()                  [Float]
  00157: mov    rdi,QWORD PTR [rbp-0x38]
  0015b: test   rdi,0x1
  00162: jne    0x39d1e
  00168: test   rdi,0x2
  0016f: jne    0x18c
  00175: test   rdi,0x7
  0017c: jne    0x39d1e
  00182: cmp    DWORD PTR [rdi+0x4],0x7
  00186: jne    0x39d1e
  0018c: cmp    DWORD PTR [rip+0xffffffffffff7658],0x26        # 0xffff77eb
  00193: jne    0x39d1e
  00199: mov    r9,0x0
  001a0: sub    rsp,0x10
  001a4: movq   QWORD PTR [rsp],xmm3
  001a9: movq   QWORD PTR [rsp+0x8],xmm4
  001af: mov    rdx,rdi
  001b2: mov    rax,QWORD PTR [rbx]
  001b5: lea    rdi,[rsp-0x18]
  001ba: mov    QWORD PTR [rdi],rax
  001bd: mov    QWORD PTR [rbx],rdi
  001c0: mov    QWORD PTR [rsp-0x20],0x0
  001c9: mov    QWORD PTR [rsp-0x38],rcx
  001ce: lea    rcx,[rbp-0x48]
  001d2: mov    r8,0x0
  001d9: call   0x39d2d
  001de: lea    rdi,[rbp-0x8]
  001e2: mov    QWORD PTR [rbx],rdi
  001e5: movq   xmm3,QWORD PTR [rsp]
  001ea: movq   xmm4,QWORD PTR [rsp+0x8]
  001f0: add    rsp,0x10
  001f4: movabs r13,0x5600b9291ef0
  001fe: test   rax,rax
  00201: je     0xffff4cc3
  00207: mov    QWORD PTR [rbp-0x40],rax
:00014 
:00016 ret %3
  0020b: mov    rax,QWORD PTR [rbp-0x40]
  0020f: leave  
  00210: ret    
==> start whole compile: <unnamed> FuncId(81) self_class:Scene start:[00000] bytecode:0x5600b92accf0
<== finished compile. elapsed:15.4µs
offset:Pos(46552) code: 242 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: mov    eax,edx
  0000d: sub    eax,0x1
  00010: jge    0x32
  00016: neg    rdx
  00019: lea    rdx,[rbp+rdx*8-0x30]
  0001e: mov    QWORD PTR [rdx],0x4
  00025: sub    rdx,0x8
  00029: add    eax,0x1
  0002c: jne    0x1e
  00032: mov    rax,0x4
  00039: mov    QWORD PTR [rbp-0x38],rax
  0003d: mov    QWORD PTR [rbp-0x40],rax
  00041: mov    QWORD PTR [rbp-0x48],rax
  00045: mov    rdi,QWORD PTR [rbp-0x28]
  00049: test   rdi,0x7
  00050: jne    0x39aff
  00056: cmp    DWORD PTR [rdi+0x4],0x32
  0005a: jne    0x39aff
:00000 init reg_num:5 arg_num:1 stack_offset:5
:00001 %3 = dynvar(3, %3)
  00060: mov    rax,QWORD PTR [rbp-0x10]
  00064: mov    rax,QWORD PTR [rax]
  00067: mov    rax,QWORD PTR [rax]
  0006a: mov    rax,QWORD PTR [rax-0x30]
  0006e: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = literal[82]
  00072: mov    rax,0xa5
  00079: mov    QWORD PTR [rbp-0x48],rax
:00003 %2 = %3.call times(&%4)              [Integer]
  0007d: mov    rdi,QWORD PTR [rbp-0x40]
  00081: test   rdi,0x1
  00088: je     0x39b0e
  0008e: cmp    DWORD PTR [rip+0xffffffffffff74f6],0x26        # 0xffff758b
  00095: jne    0x39b0e
  0009b: mov    r9,QWORD PTR [rbp-0x48]
  0009f: mov    rdx,rdi
  000a2: mov    rax,QWORD PTR [rbx]
  000a5: lea    rdi,[rsp-0x18]
  000aa: mov    QWORD PTR [rdi],rax
  000ad: mov    QWORD PTR [rbx],rdi
  000b0: mov    QWORD PTR [rsp-0x20],0x0
  000b9: mov    QWORD PTR [rsp-0x38],rcx
  000be: lea    rcx,[rbp-0x50]
  000c2: mov    r8,0x0
  000c9: call   0x39b1d
  000ce: lea    rdi,[rbp-0x8]
  000d2: mov    QWORD PTR [rbx],rdi
  000d5: movabs r13,0x5600b92acd40
  000df: test   rax,rax
  000e2: je     0xffff4a63
  000e8: mov    QWORD PTR [rbp-0x38],rax
:00004 
:00006 ret %2
  000ec: mov    rax,QWORD PTR [rbp-0x38]
  000f0: leave  
  000f1: ret    
==> start whole compile: <unnamed> FuncId(80) self_class:Scene start:[00000] bytecode:0x5600b92a1510
<== finished compile. elapsed:69.7µs
offset:Pos(46794) code: 3666 bytes  data: 100 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x80
  0000e: mov    eax,edx
  00010: sub    eax,0x1
  00013: jge    0x35
  00019: neg    rdx
  0001c: lea    rdx,[rbp+rdx*8-0x30]
  00021: mov    QWORD PTR [rdx],0x4
  00028: sub    rdx,0x8
  0002c: add    eax,0x1
  0002f: jne    0x21
  00035: mov    rax,0x4
  0003c: mov    QWORD PTR [rbp-0x38],rax
  00040: mov    QWORD PTR [rbp-0x40],rax
  00044: mov    QWORD PTR [rbp-0x48],rax
  00048: mov    QWORD PTR [rbp-0x50],rax
  0004c: mov    QWORD PTR [rbp-0x58],rax
  00050: mov    QWORD PTR [rbp-0x60],rax
  00054: mov    QWORD PTR [rbp-0x68],rax
  00058: mov    QWORD PTR [rbp-0x70],rax
  0005c: mov    rdi,QWORD PTR [rbp-0x28]
  00060: test   rdi,0x7
  00067: jne    0x39a5d
  0006d: cmp    DWORD PTR [rdi+0x4],0x32
  00071: jne    0x39a5d
:00000 init reg_num:10 arg_num:1 stack_offset:8
:00001 %6 = const[Vec]                      [Vec]
  00077: mov    rax,QWORD PTR [rip+0xffffffffffff7428]        # 0xffff74a6
  0007e: cmp    rax,QWORD PTR [rip+0xde1]        # 0xe66
  00085: jne    0x39a6c
  0008b: mov    rax,QWORD PTR [rip+0xdc4]        # 0xe56
  00092: mov    QWORD PTR [rbp-0x58],rax
:00002 %7 = literal[0.0]
  00096: movq   xmm2,QWORD PTR [rip+0xdd8]        # 0xe76
  0009e: movabs rax,0x8000000000000002
  000a8: mov    QWORD PTR [rbp-0x60],rax
:00003 %8 = literal[0.0]
  000ac: movq   xmm3,QWORD PTR [rip+0xdd2]        # 0xe86
  000b4: movabs rax,0x8000000000000002
  000be: mov    QWORD PTR [rbp-0x68],rax
:00004 %9 = literal[0.0]
  000c2: movq   xmm4,QWORD PTR [rip+0xdcc]        # 0xe96
  000ca: movabs rax,0x8000000000000002
  000d4: mov    QWORD PTR [rbp-0x70],rax
:00005 %2 = %6.call new(%7; 3)              [#<Class:Vec>]
  000d8: mov    rdi,QWORD PTR [rbp-0x58]
  000dc: test   rdi,0x7
  000e3: jne    0x39ab2
  000e9: cmp    DWORD PTR [rdi+0x4],0x29
  000ed: jne    0x39ab2
  000f3: cmp    DWORD PTR [rip+0xffffffffffff739f],0x26        # 0xffff7499
  000fa: jne    0x39ab2
  00100: mov    r9,0x0
  00107: sub    rsp,0x20
  0010b: movq   QWORD PTR [rsp],xmm2
  00110: movq   QWORD PTR [rsp+0x8],xmm3
  00116: movq   QWORD PTR [rsp+0x10],xmm4
  0011c: mov    rdx,rdi
  0011f: mov    rax,QWORD PTR [rbx]
  00122: lea    rdi,[rsp-0x18]
  00127: mov    QWORD PTR [rdi],rax
  0012a: mov    QWORD PTR [rbx],rdi
  0012d: mov    QWORD PTR [rsp-0x20],0x0
  00136: mov    QWORD PTR [rsp-0x38],rcx
  0013b: lea    rcx,[rbp-0x60]
  0013f: mov    r8,0x3
  00146: call   0x39ac1
  0014b: lea    rdi,[rbp-0x8]
  0014f: mov    QWORD PTR [rbx],rdi
  00152: movq   xmm2,QWORD PTR [rsp]
  00157: movq   xmm3,QWORD PTR [rsp+0x8]
  0015d: movq   xmm4,QWORD PTR [rsp+0x10]
  00163: add    rsp,0x20
  00167: movabs r13,0x5600b92a1580
  00171: test   rax,rax
  00174: je     0xffff4971
  0017a: mov    QWORD PTR [rbp-0x38],rax
:00006 
:00008 %6 = dynvar(2, %3)
  0017e: mov    rax,QWORD PTR [rbp-0x10]
  00182: mov    rax,QWORD PTR [rax]
  00185: mov    rax,QWORD PTR [rax-0x30]
  00189: mov    QWORD PTR [rbp-0x58],rax
:00009 %7 = literal[81]
  0018d: mov    rax,0xa3
  00194: mov    QWORD PTR [rbp-0x60],rax
:00010 _ = %6.call times(&%7)               [Integer]
  00198: mov    rdi,QWORD PTR [rbp-0x58]
  0019c: test   rdi,0x1
  001a3: je     0x39af3
  001a9: cmp    DWORD PTR [rip+0xffffffffffff72e9],0x26        # 0xffff7499
  001b0: jne    0x39af3
  001b6: mov    r9,QWORD PTR [rbp-0x60]
  001ba: sub    rsp,0x10
  001be: movq   QWORD PTR [rsp],xmm3
  001c3: movq   QWORD PTR [rsp+0x8],xmm4
  001c9: mov    rdx,rdi
  001cc: mov    rax,QWORD PTR [rbx]
  001cf: lea    rdi,[rsp-0x18]
  001d4: mov    QWORD PTR [rdi],rax
  001d7: mov    QWORD PTR [rbx],rdi
  001da: mov    QWORD PTR [rsp-0x20],0x0
  001e3: mov    QWORD PTR [rsp-0x38],rcx
  001e8: lea    rcx,[rbp-0x68]
  001ec: mov    r8,0x0
  001f3: call   0x39b02
  001f8: lea    rdi,[rbp-0x8]
  001fc: mov    QWORD PTR [rbx],rdi
  001ff: movq   xmm3,QWORD PTR [rsp]
  00204: movq   xmm4,QWORD PTR [rsp+0x8]
  0020a: add    rsp,0x10
  0020e: movabs r13,0x5600b92a15d0
  00218: test   rax,rax
  0021b: je     0xffff4971
:00011 
:00013 %6 = %2.call x()                     [Vec]
  00221: mov    rdi,QWORD PTR [rbp-0x38]
  00225: test   rdi,0x7
  0022c: jne    0x39b34
  00232: cmp    DWORD PTR [rdi+0x4],0x28
  00236: jne    0x39b34
  0023c: cmp    DWORD PTR [rip+0xffffffffffff7256],0x26        # 0xffff7499
  00243: jne    0x39b34
  00249: mov    esi,DWORD PTR [rip+0xc53]        # 0xea2
  0024f: cmp    esi,0xffffffff
  00252: je     0x39b43
  00258: cmp    WORD PTR [rdi+0x2],0x3
  0025d: jne    0x276
  00263: cmp    esi,0x6
  00266: jge    0x276
  0026c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00271: jmp    0x2a0
  00276: sub    rsp,0x10
  0027a: movq   QWORD PTR [rsp],xmm3
  0027f: movq   QWORD PTR [rsp+0x8],xmm4
  00285: movabs rax,0x5600b755dfe0
  0028f: call   rax
  00291: movq   xmm3,QWORD PTR [rsp]
  00296: movq   xmm4,QWORD PTR [rsp+0x8]
  0029c: add    rsp,0x10
  002a0: mov    QWORD PTR [rbp-0x58],rax
:00014 
:00016 %7 = dynvar(2, %5)
  002a4: mov    rax,QWORD PTR [rbp-0x10]
  002a8: mov    rax,QWORD PTR [rax]
  002ab: mov    rax,QWORD PTR [rax-0x40]
  002af: mov    QWORD PTR [rbp-0x60],rax
:00017 %8 = dynvar(2, %5)
  002b3: mov    rax,QWORD PTR [rbp-0x10]
  002b7: mov    rax,QWORD PTR [rax]
  002ba: mov    rax,QWORD PTR [rax-0x40]
  002be: mov    QWORD PTR [rbp-0x68],rax
:00018 %7 = %7 * %8                         [Float][Float]
  002c2: mov    rdi,QWORD PTR [rbp-0x60]
  002c6: test   rdi,0x1
  002cd: jne    0x39b8a
  002d3: test   rdi,0x2
  002da: je     0x316
  002e0: xorps  xmm2,xmm2
  002e3: movabs rax,0x8000000000000002
  002ed: cmp    rdi,rax
  002f0: je     0x328
  002f6: mov    rax,rdi
  002f9: sar    rax,0x3f
  002fd: add    rax,0x2
  00301: and    rdi,0xfffffffffffffffc
  00305: or     rdi,rax
  00308: rol    rdi,0x3d
  0030c: movq   xmm2,rdi
  00311: jmp    0x328
  00316: call   0xffff49aa
  0031b: test   rax,rax
  0031e: je     0x39b8a
  00324: movq   xmm2,xmm0
  00328: mov    rdi,QWORD PTR [rbp-0x68]
  0032c: test   rdi,0x1
  00333: jne    0x39b99
  00339: test   rdi,0x2
  00340: je     0x37c
  00346: xorps  xmm3,xmm3
  00349: movabs rax,0x8000000000000002
  00353: cmp    rdi,rax
  00356: je     0x38e
  0035c: mov    rax,rdi
  0035f: sar    rax,0x3f
  00363: add    rax,0x2
  00367: and    rdi,0xfffffffffffffffc
  0036b: or     rdi,rax
  0036e: rol    rdi,0x3d
  00372: movq   xmm3,rdi
  00377: jmp    0x38e
  0037c: call   0xffff49aa
  00381: test   rax,rax
  00384: je     0x39b99
  0038a: movq   xmm3,xmm0
  0038e: mulsd  xmm2,xmm3
:00019 %3 = %6 / %7                         [Float][Float]
  00392: mov    rdi,QWORD PTR [rbp-0x58]
  00396: test   rdi,0x1
  0039d: jne    0x39ba8
  003a3: test   rdi,0x2
  003aa: je     0x3e6
  003b0: xorps  xmm5,xmm5
  003b3: movabs rax,0x8000000000000002
  003bd: cmp    rdi,rax
  003c0: je     0x3f8
  003c6: mov    rax,rdi
  003c9: sar    rax,0x3f
  003cd: add    rax,0x2
  003d1: and    rdi,0xfffffffffffffffc
  003d5: or     rdi,rax
  003d8: rol    rdi,0x3d
  003dc: movq   xmm5,rdi
  003e1: jmp    0x3f8
  003e6: call   0xffff49aa
  003eb: test   rax,rax
  003ee: je     0x39ba8
  003f4: movq   xmm5,xmm0
  003f8: movq   xmm6,xmm5
  003fc: movq   rax,xmm2
  00401: test   rax,rax
  00404: je     0xffff4996
  0040a: divsd  xmm6,xmm2
:00020 %6 = %2.call y()                     [Vec]
  0040e: mov    rdi,QWORD PTR [rbp-0x38]
  00412: test   rdi,0x7
  00419: jne    0x39bc4
  0041f: cmp    DWORD PTR [rdi+0x4],0x28
  00423: jne    0x39bc4
  00429: cmp    DWORD PTR [rip+0xffffffffffff7069],0x26        # 0xffff7499
  00430: jne    0x39bc4
  00436: mov    esi,DWORD PTR [rip+0xa6e]        # 0xeaa
  0043c: cmp    esi,0xffffffff
  0043f: je     0x39bed
  00445: cmp    WORD PTR [rdi+0x2],0x3
  0044a: jne    0x463
  00450: cmp    esi,0x6
  00453: jge    0x463
  00459: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0045e: jmp    0x4a5
  00463: sub    rsp,0x20
  00467: movq   QWORD PTR [rsp],xmm2
  0046c: movq   QWORD PTR [rsp+0x8],xmm3
  00472: movq   QWORD PTR [rsp+0x10],xmm4
  00478: movq   QWORD PTR [rsp+0x18],xmm6
  0047e: movabs rax,0x5600b755dfe0
  00488: call   rax
  0048a: movq   xmm2,QWORD PTR [rsp]
  0048f: movq   xmm3,QWORD PTR [rsp+0x8]
  00495: movq   xmm4,QWORD PTR [rsp+0x10]
  0049b: movq   xmm6,QWORD PTR [rsp+0x18]
  004a1: add    rsp,0x20
  004a5: mov    QWORD PTR [rbp-0x58],rax
:00021 
:00023 %7 = dynvar(2, %5)
  004a9: mov    rax,QWORD PTR [rbp-0x10]
  004ad: mov    rax,QWORD PTR [rax]
  004b0: mov    rax,QWORD PTR [rax-0x40]
  004b4: mov    QWORD PTR [rbp-0x60],rax
:00024 %8 = dynvar(2, %5)
  004b8: mov    rax,QWORD PTR [rbp-0x10]
  004bc: mov    rax,QWORD PTR [rax]
  004bf: mov    rax,QWORD PTR [rax-0x40]
  004c3: mov    QWORD PTR [rbp-0x68],rax
:00025 %7 = %7 * %8                         [Float][Float]
  004c7: mov    rdi,QWORD PTR [rbp-0x60]
  004cb: test   rdi,0x1
  004d2: jne    0x39c4c
  004d8: test   rdi,0x2
  004df: je     0x51b
  004e5: xorps  xmm2,xmm2
  004e8: movabs rax,0x8000000000000002
  004f2: cmp    rdi,rax
  004f5: je     0x52d
  004fb: mov    rax,rdi
  004fe: sar    rax,0x3f
  00502: add    rax,0x2
  00506: and    rdi,0xfffffffffffffffc
  0050a: or     rdi,rax
  0050d: rol    rdi,0x3d
  00511: movq   xmm2,rdi
  00516: jmp    0x52d
  0051b: call   0xffff49aa
  00520: test   rax,rax
  00523: je     0x39c4c
  00529: movq   xmm2,xmm0
  0052d: mov    rdi,QWORD PTR [rbp-0x68]
  00531: test   rdi,0x1
  00538: jne    0x39c68
  0053e: test   rdi,0x2
  00545: je     0x581
  0054b: xorps  xmm3,xmm3
  0054e: movabs rax,0x8000000000000002
  00558: cmp    rdi,rax
  0055b: je     0x593
  00561: mov    rax,rdi
  00564: sar    rax,0x3f
  00568: add    rax,0x2
  0056c: and    rdi,0xfffffffffffffffc
  00570: or     rdi,rax
  00573: rol    rdi,0x3d
  00577: movq   xmm3,rdi
  0057c: jmp    0x593
  00581: call   0xffff49aa
  00586: test   rax,rax
  00589: je     0x39c68
  0058f: movq   xmm3,xmm0
  00593: mulsd  xmm2,xmm3
:00026 %4 = %6 / %7                         [Float][Float]
  00597: mov    rdi,QWORD PTR [rbp-0x58]
  0059b: test   rdi,0x1
  005a2: jne    0x39c84
  005a8: test   rdi,0x2
  005af: je     0x5eb
  005b5: xorps  xmm5,xmm5
  005b8: movabs rax,0x8000000000000002
  005c2: cmp    rdi,rax
  005c5: je     0x5fd
  005cb: mov    rax,rdi
  005ce: sar    rax,0x3f
  005d2: add    rax,0x2
  005d6: and    rdi,0xfffffffffffffffc
  005da: or     rdi,rax
  005dd: rol    rdi,0x3d
  005e1: movq   xmm5,rdi
  005e6: jmp    0x5fd
  005eb: call   0xffff49aa
  005f0: test   rax,rax
  005f3: je     0x39c84
  005f9: movq   xmm5,xmm0
  005fd: movq   xmm7,xmm5
  00601: movq   rax,xmm2
  00606: test   rax,rax
  00609: je     0xffff4996
  0060f: divsd  xmm7,xmm2
:00027 %6 = %2.call z()                     [Vec]
  00613: mov    rdi,QWORD PTR [rbp-0x38]
  00617: test   rdi,0x7
  0061e: jne    0x39cad
  00624: cmp    DWORD PTR [rdi+0x4],0x28
  00628: jne    0x39cad
  0062e: cmp    DWORD PTR [rip+0xffffffffffff6e64],0x26        # 0xffff7499
  00635: jne    0x39cad
  0063b: mov    esi,DWORD PTR [rip+0x871]        # 0xeb2
  00641: cmp    esi,0xffffffff
  00644: je     0x39ce3
  0064a: cmp    WORD PTR [rdi+0x2],0x3
  0064f: jne    0x668
  00655: cmp    esi,0x6
  00658: jge    0x668
  0065e: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00663: jmp    0x6b6
  00668: sub    rsp,0x30
  0066c: movq   QWORD PTR [rsp],xmm2
  00671: movq   QWORD PTR [rsp+0x8],xmm3
  00677: movq   QWORD PTR [rsp+0x10],xmm4
  0067d: movq   QWORD PTR [rsp+0x18],xmm6
  00683: movq   QWORD PTR [rsp+0x20],xmm7
  00689: movabs rax,0x5600b755dfe0
  00693: call   rax
  00695: movq   xmm2,QWORD PTR [rsp]
  0069a: movq   xmm3,QWORD PTR [rsp+0x8]
  006a0: movq   xmm4,QWORD PTR [rsp+0x10]
  006a6: movq   xmm6,QWORD PTR [rsp+0x18]
  006ac: movq   xmm7,QWORD PTR [rsp+0x20]
  006b2: add    rsp,0x30
  006b6: mov    QWORD PTR [rbp-0x58],rax
:00028 
:00030 %7 = dynvar(2, %5)
  006ba: mov    rax,QWORD PTR [rbp-0x10]
  006be: mov    rax,QWORD PTR [rax]
  006c1: mov    rax,QWORD PTR [rax-0x40]
  006c5: mov    QWORD PTR [rbp-0x60],rax
:00031 %8 = dynvar(2, %5)
  006c9: mov    rax,QWORD PTR [rbp-0x10]
  006cd: mov    rax,QWORD PTR [rax]
  006d0: mov    rax,QWORD PTR [rax-0x40]
  006d4: mov    QWORD PTR [rbp-0x68],rax
:00032 %7 = %7 * %8                         [Float][Float]
  006d8: mov    rdi,QWORD PTR [rbp-0x60]
  006dc: test   rdi,0x1
  006e3: jne    0x39d4e
  006e9: test   rdi,0x2
  006f0: je     0x72c
  006f6: xorps  xmm2,xmm2
  006f9: movabs rax,0x8000000000000002
  00703: cmp    rdi,rax
  00706: je     0x73e
  0070c: mov    rax,rdi
  0070f: sar    rax,0x3f
  00713: add    rax,0x2
  00717: and    rdi,0xfffffffffffffffc
  0071b: or     rdi,rax
  0071e: rol    rdi,0x3d
  00722: movq   xmm2,rdi
  00727: jmp    0x73e
  0072c: call   0xffff49aa
  00731: test   rax,rax
  00734: je     0x39d4e
  0073a: movq   xmm2,xmm0
  0073e: mov    rdi,QWORD PTR [rbp-0x68]
  00742: test   rdi,0x1
  00749: jne    0x39d77
  0074f: test   rdi,0x2
  00756: je     0x792
  0075c: xorps  xmm3,xmm3
  0075f: movabs rax,0x8000000000000002
  00769: cmp    rdi,rax
  0076c: je     0x7a4
  00772: mov    rax,rdi
  00775: sar    rax,0x3f
  00779: add    rax,0x2
  0077d: and    rdi,0xfffffffffffffffc
  00781: or     rdi,rax
  00784: rol    rdi,0x3d
  00788: movq   xmm3,rdi
  0078d: jmp    0x7a4
  00792: call   0xffff49aa
  00797: test   rax,rax
  0079a: je     0x39d77
  007a0: movq   xmm3,xmm0
  007a4: mulsd  xmm2,xmm3
:00033 %5 = %6 / %7                         [Float][Float]
  007a8: mov    rdi,QWORD PTR [rbp-0x58]
  007ac: test   rdi,0x1
  007b3: jne    0x39da0
  007b9: test   rdi,0x2
  007c0: je     0x7fc
  007c6: xorps  xmm5,xmm5
  007c9: movabs rax,0x8000000000000002
  007d3: cmp    rdi,rax
  007d6: je     0x80e
  007dc: mov    rax,rdi
  007df: sar    rax,0x3f
  007e3: add    rax,0x2
  007e7: and    rdi,0xfffffffffffffffc
  007eb: or     rdi,rax
  007ee: rol    rdi,0x3d
  007f2: movq   xmm5,rdi
  007f7: jmp    0x80e
  007fc: call   0xffff49aa
  00801: test   rax,rax
  00804: je     0x39da0
  0080a: movq   xmm5,xmm0
  0080e: movq   xmm8,xmm5
  00813: movq   rax,xmm2
  00818: test   rax,rax
  0081b: je     0xffff4996
  00821: divsd  xmm8,xmm2
:00034 %8 = %4
:00035 %7 = %0.call clamp(%8; 1)            [Scene]
  00826: movq   xmm0,xmm7
  0082a: call   0xffff4a9d
  0082f: mov    QWORD PTR [rbp-0x68],rax
  00833: mov    rdi,QWORD PTR [rbp-0x28]
  00837: cmp    DWORD PTR [rip+0xffffffffffff6c5b],0x26        # 0xffff7499
  0083e: jne    0x39dd6
  00844: sub    rsp,0x30
  00848: movq   QWORD PTR [rsp],xmm4
  0084d: movq   QWORD PTR [rsp+0x8],xmm5
  00853: movq   QWORD PTR [rsp+0x10],xmm6
  00859: movq   QWORD PTR [rsp+0x18],xmm7
  0085f: movq   QWORD PTR [rsp+0x20],xmm8
  00866: mov    rax,QWORD PTR [rbx]
  00869: lea    rdi,[rsp-0x18]
  0086e: mov    QWORD PTR [rdi],rax
  00871: mov    QWORD PTR [rbx],rdi
  00874: mov    QWORD PTR [rsp-0x20],0x0
  0087d: mov    QWORD PTR [rsp-0x38],rcx
  00882: mov    rax,QWORD PTR [rbp-0x28]
  00886: mov    QWORD PTR [rsp-0x38],rax
  0088b: mov    rdi,0x1
  00892: mov    rax,QWORD PTR [rbp-0x68]
  00896: mov    QWORD PTR [rsp-0x40],rax
  0089b: mov    QWORD PTR [rsp-0x30],0x0
  008a4: movabs rax,0x40000003a
  008ae: mov    QWORD PTR [rsp-0x28],rax
  008b3: movabs r13,0x5600b9291e00
  008bd: call   0xffffab06
  008c2: lea    rdi,[rbp-0x8]
  008c6: mov    QWORD PTR [rbx],rdi
  008c9: movq   xmm4,QWORD PTR [rsp]
  008ce: movq   xmm5,QWORD PTR [rsp+0x8]
  008d4: movq   xmm6,QWORD PTR [rsp+0x10]
  008da: movq   xmm7,QWORD PTR [rsp+0x18]
  008e0: movq   xmm8,QWORD PTR [rsp+0x20]
  008e7: add    rsp,0x30
  008eb: movabs r13,0x5600b92a1760
  008f5: test   rax,rax
  008f8: je     0xffff4971
  008fe: mov    QWORD PTR [rbp-0x60],rax
:00036 
:00038 %6 = %7.call chr()                   [Integer]
  00902: mov    rdi,QWORD PTR [rbp-0x60]
  00906: test   rdi,0x1
  0090d: je     0x39e0d
  00913: cmp    DWORD PTR [rip+0xffffffffffff6b7f],0x26        # 0xffff7499
  0091a: jne    0x39e0d
  00920: mov    r9,0x0
  00927: sub    rsp,0x20
  0092b: movq   QWORD PTR [rsp],xmm4
  00930: movq   QWORD PTR [rsp+0x8],xmm6
  00936: movq   QWORD PTR [rsp+0x10],xmm7
  0093c: movq   QWORD PTR [rsp+0x18],xmm8
  00943: mov    rdx,rdi
  00946: mov    rax,QWORD PTR [rbx]
  00949: lea    rdi,[rsp-0x18]
  0094e: mov    QWORD PTR [rdi],rax
  00951: mov    QWORD PTR [rbx],rdi
  00954: mov    QWORD PTR [rsp-0x20],0x0
  0095d: mov    QWORD PTR [rsp-0x38],rcx
  00962: lea    rcx,[rbp-0x68]
  00966: mov    r8,0x0
  0096d: call   0x39e44
  00972: lea    rdi,[rbp-0x8]
  00976: mov    QWORD PTR [rbx],rdi
  00979: movq   xmm4,QWORD PTR [rsp]
  0097e: movq   xmm6,QWORD PTR [rsp+0x8]
  00984: movq   xmm7,QWORD PTR [rsp+0x10]
  0098a: movq   xmm8,QWORD PTR [rsp+0x18]
  00991: add    rsp,0x20
  00995: movabs r13,0x5600b92a1790
  0099f: test   rax,rax
  009a2: je     0xffff4971
  009a8: mov    QWORD PTR [rbp-0x58],rax
:00039 
:00041 _ = %0.call print(%6; 1)             [Scene]
  009ac: mov    rdi,QWORD PTR [rbp-0x28]
  009b0: cmp    DWORD PTR [rip+0xffffffffffff6ae2],0x26        # 0xffff7499
  009b7: jne    0x39e76
  009bd: mov    r9,0x0
  009c4: sub    rsp,0x20
  009c8: movq   QWORD PTR [rsp],xmm4
  009cd: movq   QWORD PTR [rsp+0x8],xmm6
  009d3: movq   QWORD PTR [rsp+0x10],xmm7
  009d9: movq   QWORD PTR [rsp+0x18],xmm8
  009e0: mov    rdx,rdi
  009e3: mov    rax,QWORD PTR [rbx]
  009e6: lea    rdi,[rsp-0x18]
  009eb: mov    QWORD PTR [rdi],rax
  009ee: mov    QWORD PTR [rbx],rdi
  009f1: mov    QWORD PTR [rsp-0x20],0x0
  009fa: mov    QWORD PTR [rsp-0x38],rcx
  009ff: lea    rcx,[rbp-0x58]
  00a03: mov    r8,0x1
  00a0a: call   0x39ead
  00a0f: lea    rdi,[rbp-0x8]
  00a13: mov    QWORD PTR [rbx],rdi
  00a16: movq   xmm4,QWORD PTR [rsp]
  00a1b: movq   xmm6,QWORD PTR [rsp+0x8]
  00a21: movq   xmm7,QWORD PTR [rsp+0x10]
  00a27: movq   xmm8,QWORD PTR [rsp+0x18]
  00a2e: add    rsp,0x20
  00a32: movabs r13,0x5600b92a17c0
  00a3c: test   rax,rax
  00a3f: je     0xffff4971
:00042 
:00044 %8 = %3
:00045 %7 = %0.call clamp(%8; 1)            [Scene]
  00a45: movq   xmm0,xmm6
  00a49: call   0xffff4a9d
  00a4e: mov    QWORD PTR [rbp-0x68],rax
  00a52: mov    rdi,QWORD PTR [rbp-0x28]
  00a56: cmp    DWORD PTR [rip+0xffffffffffff6a3c],0x26        # 0xffff7499
  00a5d: jne    0x39edf
  00a63: sub    rsp,0x20
  00a67: movq   QWORD PTR [rsp],xmm4
  00a6c: movq   QWORD PTR [rsp+0x8],xmm6
  00a72: movq   QWORD PTR [rsp+0x10],xmm7
  00a78: movq   QWORD PTR [rsp+0x18],xmm8
  00a7f: mov    rax,QWORD PTR [rbx]
  00a82: lea    rdi,[rsp-0x18]
  00a87: mov    QWORD PTR [rdi],rax
  00a8a: mov    QWORD PTR [rbx],rdi
  00a8d: mov    QWORD PTR [rsp-0x20],0x0
  00a96: mov    QWORD PTR [rsp-0x38],rcx
  00a9b: mov    rax,QWORD PTR [rbp-0x28]
  00a9f: mov    QWORD PTR [rsp-0x38],rax
  00aa4: mov    rdi,0x1
  00aab: mov    rax,QWORD PTR [rbp-0x68]
  00aaf: mov    QWORD PTR [rsp-0x40],rax
  00ab4: mov    QWORD PTR [rsp-0x30],0x0
  00abd: movabs rax,0x40000003a
  00ac7: mov    QWORD PTR [rsp-0x28],rax
  00acc: movabs r13,0x5600b9291e00
  00ad6: call   0xffffab06
  00adb: lea    rdi,[rbp-0x8]
  00adf: mov    QWORD PTR [rbx],rdi
  00ae2: movq   xmm4,QWORD PTR [rsp]
  00ae7: movq   xmm6,QWORD PTR [rsp+0x8]
  00aed: movq   xmm7,QWORD PTR [rsp+0x10]
  00af3: movq   xmm8,QWORD PTR [rsp+0x18]
  00afa: add    rsp,0x20
  00afe: movabs r13,0x5600b92a1800
  00b08: test   rax,rax
  00b0b: je     0xffff4971
  00b11: mov    QWORD PTR [rbp-0x60],rax
:00046 
:00048 %6 = %7.call chr()                   [Integer]
  00b15: mov    rdi,QWORD PTR [rbp-0x60]
  00b19: test   rdi,0x1
  00b20: je     0x39f16
  00b26: cmp    DWORD PTR [rip+0xffffffffffff696c],0x26        # 0xffff7499
  00b2d: jne    0x39f16
  00b33: mov    r9,0x0
  00b3a: sub    rsp,0x20
  00b3e: movq   QWORD PTR [rsp],xmm4
  00b43: movq   QWORD PTR [rsp+0x8],xmm6
  00b49: movq   QWORD PTR [rsp+0x10],xmm7
  00b4f: movq   QWORD PTR [rsp+0x18],xmm8
  00b56: mov    rdx,rdi
  00b59: mov    rax,QWORD PTR [rbx]
  00b5c: lea    rdi,[rsp-0x18]
  00b61: mov    QWORD PTR [rdi],rax
  00b64: mov    QWORD PTR [rbx],rdi
  00b67: mov    QWORD PTR [rsp-0x20],0x0
  00b70: mov    QWORD PTR [rsp-0x38],rcx
  00b75: lea    rcx,[rbp-0x68]
  00b79: mov    r8,0x0
  00b80: call   0x39f4d
  00b85: lea    rdi,[rbp-0x8]
  00b89: mov    QWORD PTR [rbx],rdi
  00b8c: movq   xmm4,QWORD PTR [rsp]
  00b91: movq   xmm6,QWORD PTR [rsp+0x8]
  00b97: movq   xmm7,QWORD PTR [rsp+0x10]
  00b9d: movq   xmm8,QWORD PTR [rsp+0x18]
  00ba4: add    rsp,0x20
  00ba8: movabs r13,0x5600b92a1830
  00bb2: test   rax,rax
  00bb5: je     0xffff4971
  00bbb: mov    QWORD PTR [rbp-0x58],rax
:00049 
:00051 _ = %0.call print(%6; 1)             [Scene]
  00bbf: mov    rdi,QWORD PTR [rbp-0x28]
  00bc3: cmp    DWORD PTR [rip+0xffffffffffff68cf],0x26        # 0xffff7499
  00bca: jne    0x39f7f
  00bd0: mov    r9,0x0
  00bd7: sub    rsp,0x20
  00bdb: movq   QWORD PTR [rsp],xmm4
  00be0: movq   QWORD PTR [rsp+0x8],xmm6
  00be6: movq   QWORD PTR [rsp+0x10],xmm7
  00bec: movq   QWORD PTR [rsp+0x18],xmm8
  00bf3: mov    rdx,rdi
  00bf6: mov    rax,QWORD PTR [rbx]
  00bf9: lea    rdi,[rsp-0x18]
  00bfe: mov    QWORD PTR [rdi],rax
  00c01: mov    QWORD PTR [rbx],rdi
  00c04: mov    QWORD PTR [rsp-0x20],0x0
  00c0d: mov    QWORD PTR [rsp-0x38],rcx
  00c12: lea    rcx,[rbp-0x58]
  00c16: mov    r8,0x1
  00c1d: call   0x39fb6
  00c22: lea    rdi,[rbp-0x8]
  00c26: mov    QWORD PTR [rbx],rdi
  00c29: movq   xmm4,QWORD PTR [rsp]
  00c2e: movq   xmm6,QWORD PTR [rsp+0x8]
  00c34: movq   xmm7,QWORD PTR [rsp+0x10]
  00c3a: movq   xmm8,QWORD PTR [rsp+0x18]
  00c41: add    rsp,0x20
  00c45: movabs r13,0x5600b92a1860
  00c4f: test   rax,rax
  00c52: je     0xffff4971
:00052 
:00054 %9 = %5
:00055 %8 = %0.call clamp(%9; 1)            [Scene]
  00c58: movq   xmm0,xmm8
  00c5d: call   0xffff4a9d
  00c62: mov    QWORD PTR [rbp-0x70],rax
  00c66: mov    rdi,QWORD PTR [rbp-0x28]
  00c6a: cmp    DWORD PTR [rip+0xffffffffffff6828],0x26        # 0xffff7499
  00c71: jne    0x39fe8
  00c77: sub    rsp,0x20
  00c7b: movq   QWORD PTR [rsp],xmm6
  00c80: movq   QWORD PTR [rsp+0x8],xmm7
  00c86: movq   QWORD PTR [rsp+0x10],xmm8
  00c8d: mov    rax,QWORD PTR [rbx]
  00c90: lea    rdi,[rsp-0x18]
  00c95: mov    QWORD PTR [rdi],rax
  00c98: mov    QWORD PTR [rbx],rdi
  00c9b: mov    QWORD PTR [rsp-0x20],0x0
  00ca4: mov    QWORD PTR [rsp-0x38],rcx
  00ca9: mov    rax,QWORD PTR [rbp-0x28]
  00cad: mov    QWORD PTR [rsp-0x38],rax
  00cb2: mov    rdi,0x1
  00cb9: mov    rax,QWORD PTR [rbp-0x70]
  00cbd: mov    QWORD PTR [rsp-0x40],rax
  00cc2: mov    QWORD PTR [rsp-0x30],0x0
  00ccb: movabs rax,0x40000003a
  00cd5: mov    QWORD PTR [rsp-0x28],rax
  00cda: movabs r13,0x5600b9291e00
  00ce4: call   0xffffab06
  00ce9: lea    rdi,[rbp-0x8]
  00ced: mov    QWORD PTR [rbx],rdi
  00cf0: movq   xmm6,QWORD PTR [rsp]
  00cf5: movq   xmm7,QWORD PTR [rsp+0x8]
  00cfb: movq   xmm8,QWORD PTR [rsp+0x10]
  00d02: add    rsp,0x20
  00d06: movabs r13,0x5600b92a18a0
  00d10: test   rax,rax
  00d13: je     0xffff4971
  00d19: mov    QWORD PTR [rbp-0x68],rax
:00056 
:00058 %7 = %8.call chr()                   [Integer]
  00d1d: mov    rdi,QWORD PTR [rbp-0x68]
  00d21: test   rdi,0x1
  00d28: je     0x3a01f
  00d2e: cmp    DWORD PTR [rip+0xffffffffffff6764],0x26        # 0xffff7499
  00d35: jne    0x3a01f
  00d3b: mov    r9,0x0
  00d42: sub    rsp,0x20
  00d46: movq   QWORD PTR [rsp],xmm6
  00d4b: movq   QWORD PTR [rsp+0x8],xmm7
  00d51: movq   QWORD PTR [rsp+0x10],xmm8
  00d58: mov    rdx,rdi
  00d5b: mov    rax,QWORD PTR [rbx]
  00d5e: lea    rdi,[rsp-0x18]
  00d63: mov    QWORD PTR [rdi],rax
  00d66: mov    QWORD PTR [rbx],rdi
  00d69: mov    QWORD PTR [rsp-0x20],0x0
  00d72: mov    QWORD PTR [rsp-0x38],rcx
  00d77: lea    rcx,[rbp-0x70]
  00d7b: mov    r8,0x0
  00d82: call   0x3a056
  00d87: lea    rdi,[rbp-0x8]
  00d8b: mov    QWORD PTR [rbx],rdi
  00d8e: movq   xmm6,QWORD PTR [rsp]
  00d93: movq   xmm7,QWORD PTR [rsp+0x8]
  00d99: movq   xmm8,QWORD PTR [rsp+0x10]
  00da0: add    rsp,0x20
  00da4: movabs r13,0x5600b92a18d0
  00dae: test   rax,rax
  00db1: je     0xffff4971
  00db7: mov    QWORD PTR [rbp-0x60],rax
:00059 
:00061 %6 = %0.call print(%7; 1)            [Scene]
  00dbb: mov    rdi,QWORD PTR [rbp-0x28]
  00dbf: cmp    DWORD PTR [rip+0xffffffffffff66d3],0x26        # 0xffff7499
  00dc6: jne    0x3a088
  00dcc: mov    r9,0x0
  00dd3: sub    rsp,0x20
  00dd7: movq   QWORD PTR [rsp],xmm6
  00ddc: movq   QWORD PTR [rsp+0x8],xmm7
  00de2: movq   QWORD PTR [rsp+0x10],xmm8
  00de9: mov    rdx,rdi
  00dec: mov    rax,QWORD PTR [rbx]
  00def: lea    rdi,[rsp-0x18]
  00df4: mov    QWORD PTR [rdi],rax
  00df7: mov    QWORD PTR [rbx],rdi
  00dfa: mov    QWORD PTR [rsp-0x20],0x0
  00e03: mov    QWORD PTR [rsp-0x38],rcx
  00e08: lea    rcx,[rbp-0x60]
  00e0c: mov    r8,0x1
  00e13: call   0x3a0bf
  00e18: lea    rdi,[rbp-0x8]
  00e1c: mov    QWORD PTR [rbx],rdi
  00e1f: movq   xmm6,QWORD PTR [rsp]
  00e24: movq   xmm7,QWORD PTR [rsp+0x8]
  00e2a: movq   xmm8,QWORD PTR [rsp+0x10]
  00e31: add    rsp,0x20
  00e35: movabs r13,0x5600b92a1900
  00e3f: test   rax,rax
  00e42: je     0xffff4971
  00e48: mov    QWORD PTR [rbp-0x58],rax
:00062 
:00064 ret %6
  00e4c: mov    rax,QWORD PTR [rbp-0x58]
  00e50: leave  
  00e51: ret    
==> start whole compile: <unnamed> FuncId(78) self_class:Scene start:[00000] bytecode:0x5600b92cc830
<== finished compile. elapsed:22.7µs
offset:Pos(50560) code: 237 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: mov    eax,edx
  0000d: sub    eax,0x1
  00010: jge    0x32
  00016: neg    rdx
  00019: lea    rdx,[rbp+rdx*8-0x30]
  0001e: mov    QWORD PTR [rdx],0x4
  00025: sub    rdx,0x8
  00029: add    eax,0x1
  0002c: jne    0x1e
  00032: mov    QWORD PTR [rbp-0x38],0x4
  0003a: mov    QWORD PTR [rbp-0x40],0x4
  00042: mov    rdi,QWORD PTR [rbp-0x28]
  00046: test   rdi,0x7
  0004d: jne    0x3923b
  00053: cmp    DWORD PTR [rdi+0x4],0x32
  00057: jne    0x3923b
:00000 init reg_num:4 arg_num:1 stack_offset:5
:00001 %2 = dynvar(1, %1)
  0005d: mov    rax,QWORD PTR [rbp-0x10]
  00061: mov    rax,QWORD PTR [rax-0x20]
  00065: mov    QWORD PTR [rbp-0x38],rax
:00002 %3 = literal[80]
  00069: mov    rax,0xa1
  00070: mov    QWORD PTR [rbp-0x40],rax
:00003 _ = %2.call times(&%3)               [Integer]
  00074: mov    rdi,QWORD PTR [rbp-0x38]
  00078: test   rdi,0x1
  0007f: je     0x3924a
  00085: cmp    DWORD PTR [rip+0xffffffffffff6557],0x26        # 0xffff65e3
  0008c: jne    0x3924a
  00092: mov    r9,QWORD PTR [rbp-0x40]
  00096: mov    rdx,rdi
  00099: mov    rax,QWORD PTR [rbx]
  0009c: lea    rdi,[rsp-0x18]
  000a1: mov    QWORD PTR [rdi],rax
  000a4: mov    QWORD PTR [rbx],rdi
  000a7: mov    QWORD PTR [rsp-0x20],0x0
  000b0: mov    QWORD PTR [rsp-0x38],rcx
  000b5: lea    rcx,[rbp-0x48]
  000b9: mov    r8,0x0
  000c0: call   0x39259
  000c5: lea    rdi,[rbp-0x8]
  000c9: mov    QWORD PTR [rbx],rdi
  000cc: movabs r13,0x5600b92cc880
  000d6: test   rax,rax
  000d9: je     0xffff3abb
:00004 
:00006 %2 = nil
  000df: mov    QWORD PTR [rbp-0x38],0x4
:00007 ret %2
  000e7: mov    rax,QWORD PTR [rbp-0x38]
  000eb: leave  
  000ec: ret    
==> start whole compile: intersect FuncId(69) self_class:Sphere start:[00000] bytecode:0x5600b92b5360
<== finished compile. elapsed:136.6µs
offset:Pos(51846) code: 7312 bytes  data: 402 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x2
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x40],rax
  00040:    	mov    QWORD PTR [rbp-0x48],rax
  00044:    	mov    QWORD PTR [rbp-0x50],rax
  00048:    	mov    QWORD PTR [rbp-0x58],rax
  0004c:    	mov    QWORD PTR [rbp-0x60],rax
  00050:    	mov    QWORD PTR [rbp-0x68],rax
  00054:    	mov    QWORD PTR [rbp-0x70],rax
  00058:    	mov    QWORD PTR [rbp-0x78],rax
  0005c:    	mov    QWORD PTR [rbp-0x80],rax
  00060: ff 	mov    QWORD PTR [rbp-0x88],rax
  00067: ff 	mov    QWORD PTR [rbp-0x90],rax
  0006e: ff 	mov    QWORD PTR [rbp-0x98],rax
  00075: ff 	mov    QWORD PTR [rbp-0xa0],rax
  0007c:    	mov    rdi,QWORD PTR [rbp-0x28]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x38d85
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00091:    	jne    0x38d85
:00000 init reg_num:16 arg_num:2 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  00097:    	mov    rdi,QWORD PTR [rbp-0x30]
  0009b: 00 	test   rdi,0x7
  000a2:    	jne    0x38d94
  000a8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  000ac:    	jne    0x38d94
  000b2: 26 	cmp    DWORD PTR [rip+0xffffffffffff6024],0x26        # 0xffff60dd
  000b9:    	jne    0x38d94
  000bf:    	mov    esi,DWORD PTR [rip+0x1bcf]        # 0x1c94
  000c5:    	cmp    esi,0xffffffff
  000c8:    	je     0x38da3
  000ce:    	cmp    WORD PTR [rdi+0x2],0x3
  000d3:    	jne    0xec
  000d9:    	cmp    esi,0x6
  000dc:    	jge    0xec
  000e2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000e7:    	jmp    0xf8
  000ec: 00 	movabs rax,0x5600b755dfe0
  000f6:    	call   rax
  000f8:    	mov    QWORD PTR [rbp-0x70],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  000fc:    	mov    rdi,QWORD PTR [rbp-0x28]
  00100:    	mov    rax,QWORD PTR [rdi+0x10]
  00104:    	mov    QWORD PTR [rbp-0x78],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  00108:    	mov    rdi,QWORD PTR [rbp-0x70]
  0010c: 00 	test   rdi,0x7
  00113:    	jne    0x38dcc
  00119:    	cmp    DWORD PTR [rdi+0x4],0x28
  0011d:    	jne    0x38dcc
  00123: 26 	cmp    DWORD PTR [rip+0xffffffffffff5fb3],0x26        # 0xffff60dd
  0012a:    	jne    0x38dcc
  00130:    	mov    rax,QWORD PTR [rbx]
  00133:    	lea    rdi,[rsp-0x18]
  00138:    	mov    QWORD PTR [rdi],rax
  0013b:    	mov    QWORD PTR [rbx],rdi
  0013e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00147:    	mov    QWORD PTR [rsp-0x38],rcx
  0014c:    	mov    rax,QWORD PTR [rbp-0x70]
  00150:    	mov    QWORD PTR [rsp-0x38],rax
  00155: 00 	mov    rdi,0x1
  0015c:    	mov    rax,QWORD PTR [rbp-0x78]
  00160:    	mov    QWORD PTR [rsp-0x40],rax
  00165: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0016e: 08 	movabs rax,0x80000003f
  00178:    	mov    QWORD PTR [rsp-0x28],rax
  0017d: 00 	movabs r13,0x5600b92a1ef0
  00187:    	call   0xffff6d9e
  0018c:    	lea    rdi,[rbp-0x8]
  00190:    	mov    QWORD PTR [rbx],rdi
  00193: 00 	movabs r13,0x5600b92b53d0
  0019d:    	test   rax,rax
  001a0:    	je     0xffff35b5
  001a6:    	mov    QWORD PTR [rbp-0x40],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001aa:    	mov    rdi,QWORD PTR [rbp-0x30]
  001ae: 00 	test   rdi,0x7
  001b5:    	jne    0x38ddb
  001bb:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001bf:    	jne    0x38ddb
  001c5: 26 	cmp    DWORD PTR [rip+0xffffffffffff5f11],0x26        # 0xffff60dd
  001cc:    	jne    0x38ddb
  001d2:    	mov    esi,DWORD PTR [rip+0x1ac4]        # 0x1c9c
  001d8:    	cmp    esi,0xffffffff
  001db:    	je     0x38dea
  001e1:    	cmp    WORD PTR [rdi+0x2],0x3
  001e6:    	jne    0x1ff
  001ec:    	cmp    esi,0x6
  001ef:    	jge    0x1ff
  001f5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001fa:    	jmp    0x20b
  001ff: 00 	movabs rax,0x5600b755dfe0
  00209:    	call   rax
  0020b:    	mov    QWORD PTR [rbp-0x70],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  0020f:    	mov    rdi,QWORD PTR [rbp-0x40]
  00213: 00 	test   rdi,0x7
  0021a:    	jne    0x38e13
  00220:    	cmp    DWORD PTR [rdi+0x4],0x28
  00224:    	jne    0x38e13
  0022a: 26 	cmp    DWORD PTR [rip+0xffffffffffff5eac],0x26        # 0xffff60dd
  00231:    	jne    0x38e13
  00237:    	mov    rax,QWORD PTR [rbx]
  0023a:    	lea    rdi,[rsp-0x18]
  0023f:    	mov    QWORD PTR [rdi],rax
  00242:    	mov    QWORD PTR [rbx],rdi
  00245: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0024e:    	mov    QWORD PTR [rsp-0x38],rcx
  00253:    	mov    rax,QWORD PTR [rbp-0x40]
  00257:    	mov    QWORD PTR [rsp-0x38],rax
  0025c: 00 	mov    rdi,0x1
  00263:    	mov    rax,QWORD PTR [rbp-0x70]
  00267:    	mov    QWORD PTR [rsp-0x40],rax
  0026c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00275: 05 	movabs rax,0x500000041
  0027f:    	mov    QWORD PTR [rsp-0x28],rax
  00284: 00 	movabs r13,0x5600b92d48b0
  0028e:    	call   0xffff6e30
  00293:    	lea    rdi,[rbp-0x8]
  00297:    	mov    QWORD PTR [rbx],rdi
  0029a: 00 	movabs r13,0x5600b92b5430
  002a4:    	test   rax,rax
  002a7:    	je     0xffff35b5
  002ad:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %10 = %3
  002b1:    	mov    rax,QWORD PTR [rbp-0x40]
  002b5:    	mov    QWORD PTR [rbp-0x78],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002b9:    	mov    rdi,QWORD PTR [rbp-0x40]
  002bd: 00 	test   rdi,0x7
  002c4:    	jne    0x38e22
  002ca:    	cmp    DWORD PTR [rdi+0x4],0x28
  002ce:    	jne    0x38e22
  002d4: 26 	cmp    DWORD PTR [rip+0xffffffffffff5e02],0x26        # 0xffff60dd
  002db:    	jne    0x38e22
  002e1:    	mov    rax,QWORD PTR [rbx]
  002e4:    	lea    rdi,[rsp-0x18]
  002e9:    	mov    QWORD PTR [rdi],rax
  002ec:    	mov    QWORD PTR [rbx],rdi
  002ef: 00 	mov    QWORD PTR [rsp-0x20],0x0
  002f8:    	mov    QWORD PTR [rsp-0x38],rcx
  002fd:    	mov    rax,QWORD PTR [rbp-0x40]
  00301:    	mov    QWORD PTR [rsp-0x38],rax
  00306: 00 	mov    rdi,0x1
  0030d:    	mov    rax,QWORD PTR [rbp-0x78]
  00311:    	mov    QWORD PTR [rsp-0x40],rax
  00316: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0031f: 05 	movabs rax,0x500000041
  00329:    	mov    QWORD PTR [rsp-0x28],rax
  0032e: 00 	movabs r13,0x5600b92d48b0
  00338:    	call   0xffff6e30
  0033d:    	lea    rdi,[rbp-0x8]
  00341:    	mov    QWORD PTR [rbx],rdi
  00344: 00 	movabs r13,0x5600b92b5470
  0034e:    	test   rax,rax
  00351:    	je     0xffff35b5
  00357:    	mov    QWORD PTR [rbp-0x70],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  0035b:    	mov    rdi,QWORD PTR [rbp-0x28]
  0035f:    	mov    rax,QWORD PTR [rdi+0x18]
  00363:    	mov    QWORD PTR [rbp-0x78],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00367:    	mov    rdi,QWORD PTR [rbp-0x28]
  0036b:    	mov    rax,QWORD PTR [rdi+0x18]
  0036f:    	mov    QWORD PTR [rbp-0x80],rax
:00020 %10 = %10 * %11                      [Float][Float]
  00373:    	mov    rdi,QWORD PTR [rbp-0x78]
  00377: 00 	test   rdi,0x1
  0037e:    	jne    0x38e31
  00384: 00 	test   rdi,0x2
  0038b:    	je     0x3c7
  00391:    	xorps  xmm2,xmm2
  00394: 00 	movabs rax,0x8000000000000002
  0039e:    	cmp    rdi,rax
  003a1:    	je     0x3d9
  003a7:    	mov    rax,rdi
  003aa:    	sar    rax,0x3f
  003ae:    	add    rax,0x2
  003b2:    	and    rdi,0xfffffffffffffffc
  003b6:    	or     rdi,rax
  003b9:    	rol    rdi,0x3d
  003bd:    	movq   xmm2,rdi
  003c2:    	jmp    0x3d9
  003c7:    	call   0xffff35ee
  003cc:    	test   rax,rax
  003cf:    	je     0x38e31
  003d5:    	movq   xmm2,xmm0
  003d9:    	mov    rdi,QWORD PTR [rbp-0x80]
  003dd: 00 	test   rdi,0x1
  003e4:    	jne    0x38e40
  003ea: 00 	test   rdi,0x2
  003f1:    	je     0x42d
  003f7:    	xorps  xmm3,xmm3
  003fa: 00 	movabs rax,0x8000000000000002
  00404:    	cmp    rdi,rax
  00407:    	je     0x43f
  0040d:    	mov    rax,rdi
  00410:    	sar    rax,0x3f
  00414:    	add    rax,0x2
  00418:    	and    rdi,0xfffffffffffffffc
  0041c:    	or     rdi,rax
  0041f:    	rol    rdi,0x3d
  00423:    	movq   xmm3,rdi
  00428:    	jmp    0x43f
  0042d:    	call   0xffff35ee
  00432:    	test   rax,rax
  00435:    	je     0x38e40
  0043b:    	movq   xmm3,xmm0
  0043f:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00443:    	mov    rdi,QWORD PTR [rbp-0x70]
  00447: 00 	test   rdi,0x1
  0044e:    	jne    0x38e4f
  00454: 00 	test   rdi,0x2
  0045b:    	je     0x497
  00461:    	xorps  xmm4,xmm4
  00464: 00 	movabs rax,0x8000000000000002
  0046e:    	cmp    rdi,rax
  00471:    	je     0x4a9
  00477:    	mov    rax,rdi
  0047a:    	sar    rax,0x3f
  0047e:    	add    rax,0x2
  00482:    	and    rdi,0xfffffffffffffffc
  00486:    	or     rdi,rax
  00489:    	rol    rdi,0x3d
  0048d:    	movq   xmm4,rdi
  00492:    	jmp    0x4a9
  00497:    	call   0xffff35ee
  0049c:    	test   rax,rax
  0049f:    	je     0x38e4f
  004a5:    	movq   xmm4,xmm0
  004a9:    	movq   xmm5,xmm4
  004ad:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004b1:    	mov    rdi,QWORD PTR [rbp-0x48]
  004b5: 00 	test   rdi,0x1
  004bc:    	jne    0x38e6b
  004c2: 00 	test   rdi,0x2
  004c9:    	je     0x505
  004cf:    	xorps  xmm6,xmm6
  004d2: 00 	movabs rax,0x8000000000000002
  004dc:    	cmp    rdi,rax
  004df:    	je     0x517
  004e5:    	mov    rax,rdi
  004e8:    	sar    rax,0x3f
  004ec:    	add    rax,0x2
  004f0:    	and    rdi,0xfffffffffffffffc
  004f4:    	or     rdi,rax
  004f7:    	rol    rdi,0x3d
  004fb:    	movq   xmm6,rdi
  00500:    	jmp    0x517
  00505:    	call   0xffff35ee
  0050a:    	test   rax,rax
  0050d:    	je     0x38e6b
  00513:    	movq   xmm6,xmm0
  00517:    	movq   xmm4,xmm6
  0051b:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  0051f:    	movq   xmm7,xmm4
  00523:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00527: 00 	movq   xmm4,QWORD PTR [rip+0x177b]        # 0x1caa
  0052f: 00 	movabs rax,0x8000000000000002
  00539:    	mov    QWORD PTR [rbp-0x70],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0053d:    	ucomisd xmm7,xmm4
  00541:    	jbe    0x3a447
:00027 %9 = %4
:00028 %9 = neg %9                          [<INVALID>]
  00547: 01 	sub    DWORD PTR [rip+0x1764],0x1        # 0x1cb2
  0054e:    	je     0x38ed7
  00554:    	movq   xmm0,xmm6
  00558:    	call   0xffff36e1
  0055d:    	mov    QWORD PTR [rbp-0x70],rax
  00561:    	sub    rsp,0x30
  00565:    	movq   QWORD PTR [rsp],xmm2
  0056a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00570:    	movq   QWORD PTR [rsp+0x10],xmm5
  00576:    	movq   QWORD PTR [rsp+0x18],xmm6
  0057c:    	movq   QWORD PTR [rsp+0x20],xmm7
  00582:    	mov    rdi,QWORD PTR [rbp-0x70]
  00586:    	mov    rdx,rdi
  00589:    	mov    rdi,rbx
  0058c:    	mov    rsi,r12
  0058f: 00 	movabs rax,0x5600b7596530
  00599:    	call   rax
  0059b:    	movq   xmm2,QWORD PTR [rsp]
  005a0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005a6:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005ac:    	movq   xmm6,QWORD PTR [rsp+0x18]
  005b2:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005b8:    	add    rsp,0x30
  005bc: 00 	movabs r13,0x5600b92b5530
  005c6:    	test   rax,rax
  005c9:    	je     0xffff35b5
  005cf:    	mov    QWORD PTR [rbp-0x70],rax
:00029 %11 = const[Math]                    [<INVALID>]
  005d3: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5b10]        # 0xffff60ea
  005da: 00 	cmp    rax,QWORD PTR [rip+0x16e9]        # 0x1cca
  005e1:    	jne    0x38ef9
  005e7: 00 	mov    rax,QWORD PTR [rip+0x16cc]        # 0x1cba
  005ee:    	mov    QWORD PTR [rbp-0x80],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [<INVALID>]
  005f2: 01 	sub    DWORD PTR [rip+0x16d9],0x1        # 0x1cd2
  005f9:    	je     0x38fb2
  005ff:    	movq   xmm0,xmm7
  00603:    	call   0xffff36e1
  00608: ff 	mov    QWORD PTR [rbp-0x88],rax
  0060f:    	sub    rsp,0x20
  00613:    	movq   QWORD PTR [rsp],xmm5
  00618:    	movq   QWORD PTR [rsp+0x8],xmm6
  0061e:    	movq   QWORD PTR [rsp+0x10],xmm7
  00624:    	mov    rdi,QWORD PTR [rbp-0x80]
  00628: 00 	movabs rax,0x5600b75a2280
  00632:    	call   rax
  00634:    	mov    r15d,eax
  00637: 00 	cmp    r15d,DWORD PTR [rip+0x169c]        # 0x1cda
  0063e:    	jne    0x38fd4
  00644:    	mov    eax,DWORD PTR [rip+0xffffffffffff5a93]        # 0xffff60dd
  0064a:    	cmp    DWORD PTR [rip+0x1686],eax        # 0x1cd6
  00650:    	jne    0x38fd4
  00656:    	mov    rax,QWORD PTR [rbx]
  00659:    	lea    rdi,[rsp-0x18]
  0065e:    	mov    QWORD PTR [rdi],rax
  00661:    	mov    QWORD PTR [rbx],rdi
  00664: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0066d:    	mov    QWORD PTR [rsp-0x38],rcx
  00672:    	mov    rax,QWORD PTR [rbp-0x80]
  00676:    	mov    QWORD PTR [rsp-0x38],rax
  0067b: 00 	mov    rdi,0x1
  00682: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00689:    	mov    QWORD PTR [rsp-0x40],rax
  0068e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00697: 00 	movabs rax,0x0
  006a1:    	mov    QWORD PTR [rsp-0x28],rax
  006a6: 00 	movabs r13,0x0
  006b0:    	call   0xffff357a
  006b5:    	lea    rdi,[rbp-0x8]
  006b9:    	mov    QWORD PTR [rbx],rdi
  006bc:    	movq   xmm5,QWORD PTR [rsp]
  006c1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  006c7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  006cd:    	add    rsp,0x20
  006d1:    	test   rax,rax
  006d4:    	je     0x39040
  006da:    	mov    QWORD PTR [rbp-0x78],rax
:00032 
:00034 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  006de: 01 	sub    DWORD PTR [rip+0x15f9],0x1        # 0x1cde
  006e5:    	je     0x39078
  006eb:    	mov    rdi,QWORD PTR [rbp-0x70]
  006ef:    	mov    rsi,QWORD PTR [rbp-0x78]
  006f3:    	sub    rsp,0x20
  006f7:    	movq   QWORD PTR [rsp],xmm5
  006fc:    	movq   QWORD PTR [rsp+0x8],xmm6
  00702:    	movq   QWORD PTR [rsp+0x10],xmm7
  00708:    	mov    rdx,rdi
  0070b:    	mov    rcx,rsi
  0070e:    	mov    rdi,rbx
  00711:    	mov    rsi,r12
  00714: 00 	movabs rax,0x5600b7598000
  0071e:    	call   rax
  00720:    	movq   xmm5,QWORD PTR [rsp]
  00725:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0072b:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00731:    	add    rsp,0x20
  00735: 00 	movabs r13,0x5600b92b5590
  0073f:    	test   rax,rax
  00742:    	je     0xffff35b5
  00748:    	mov    QWORD PTR [rbp-0x60],rax
:00035 %9 = literal[0.0]
  0074c: 00 	movq   xmm2,QWORD PTR [rip+0x1596]        # 0x1cea
  00754: 00 	movabs rax,0x8000000000000002
  0075e:    	mov    QWORD PTR [rbp-0x70],rax
:00036 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
:00037 condnotbr _%9 =>:00113
  00762:    	mov    rdi,QWORD PTR [rbp-0x60]
  00766:    	mov    rsi,QWORD PTR [rbp-0x70]
  0076a: 00 	test   rdi,0x1
  00771:    	je     0x3909a
  00777: 00 	test   rsi,0x1
  0077e:    	je     0x3909a
  00784:    	cmp    rdi,rsi
  00787:    	jle    0x3a3ae
:00038 %9 = %2.call t()                     [<INVALID>]
  0078d: 01 	sub    DWORD PTR [rip+0x155e],0x1        # 0x1cf2
  00794:    	je     0x3910c
  0079a:    	sub    rsp,0x20
  0079e:    	movq   QWORD PTR [rsp],xmm5
  007a3:    	movq   QWORD PTR [rsp+0x8],xmm6
  007a9:    	movq   QWORD PTR [rsp+0x10],xmm7
  007af:    	mov    rdi,QWORD PTR [rbp-0x38]
  007b3: 00 	movabs rax,0x5600b75a2280
  007bd:    	call   rax
  007bf:    	mov    r15d,eax
  007c2: 00 	cmp    r15d,DWORD PTR [rip+0x1531]        # 0x1cfa
  007c9:    	jne    0x3912e
  007cf:    	mov    eax,DWORD PTR [rip+0xffffffffffff5908]        # 0xffff60dd
  007d5:    	cmp    DWORD PTR [rip+0x151b],eax        # 0x1cf6
  007db:    	jne    0x3912e
  007e1:    	mov    rax,QWORD PTR [rbx]
  007e4:    	lea    rdi,[rsp-0x18]
  007e9:    	mov    QWORD PTR [rdi],rax
  007ec:    	mov    QWORD PTR [rbx],rdi
  007ef: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007f8:    	mov    QWORD PTR [rsp-0x38],rcx
  007fd:    	mov    rax,QWORD PTR [rbp-0x38]
  00801:    	mov    QWORD PTR [rsp-0x38],rax
  00806: 00 	mov    rdi,0x0
  0080d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00816: 00 	movabs rax,0x0
  00820:    	mov    QWORD PTR [rsp-0x28],rax
  00825: 00 	movabs r13,0x0
  0082f:    	call   0xffff357a
  00834:    	lea    rdi,[rbp-0x8]
  00838:    	mov    QWORD PTR [rbx],rdi
  0083b:    	movq   xmm5,QWORD PTR [rsp]
  00840:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00846:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0084c:    	add    rsp,0x20
  00850:    	test   rax,rax
  00853:    	je     0x3919a
  00859:    	mov    QWORD PTR [rbp-0x70],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  0085d:    	mov    rdi,QWORD PTR [rbp-0x60]
  00861:    	mov    rsi,QWORD PTR [rbp-0x70]
  00865: 00 	test   rdi,0x1
  0086c:    	je     0x391a9
  00872: 00 	test   rsi,0x1
  00879:    	je     0x391a9
  0087f:    	cmp    rdi,rsi
  00882:    	jge    0x3a3e1
:00043 _ = %2.call t=(%7; 1)                [<INVALID>]
  00888: 01 	sub    DWORD PTR [rip+0x146f],0x1        # 0x1cfe
  0088f:    	je     0x3921b
  00895:    	sub    rsp,0x20
  00899:    	movq   QWORD PTR [rsp],xmm5
  0089e:    	movq   QWORD PTR [rsp+0x8],xmm6
  008a4:    	movq   QWORD PTR [rsp+0x10],xmm7
  008aa:    	mov    rdi,QWORD PTR [rbp-0x38]
  008ae: 00 	movabs rax,0x5600b75a2280
  008b8:    	call   rax
  008ba:    	mov    r15d,eax
  008bd: 00 	cmp    r15d,DWORD PTR [rip+0x1442]        # 0x1d06
  008c4:    	jne    0x3923d
  008ca:    	mov    eax,DWORD PTR [rip+0xffffffffffff580d]        # 0xffff60dd
  008d0:    	cmp    DWORD PTR [rip+0x142c],eax        # 0x1d02
  008d6:    	jne    0x3923d
  008dc:    	mov    rax,QWORD PTR [rbx]
  008df:    	lea    rdi,[rsp-0x18]
  008e4:    	mov    QWORD PTR [rdi],rax
  008e7:    	mov    QWORD PTR [rbx],rdi
  008ea: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008f3:    	mov    QWORD PTR [rsp-0x38],rcx
  008f8:    	mov    rax,QWORD PTR [rbp-0x38]
  008fc:    	mov    QWORD PTR [rsp-0x38],rax
  00901: 00 	mov    rdi,0x1
  00908:    	mov    rax,QWORD PTR [rbp-0x60]
  0090c:    	mov    QWORD PTR [rsp-0x40],rax
  00911: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0091a: 00 	movabs rax,0x0
  00924:    	mov    QWORD PTR [rsp-0x28],rax
  00929: 00 	movabs r13,0x0
  00933:    	call   0xffff357a
  00938:    	lea    rdi,[rbp-0x8]
  0093c:    	mov    QWORD PTR [rbx],rdi
  0093f:    	movq   xmm5,QWORD PTR [rsp]
  00944:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0094a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00950:    	add    rsp,0x20
  00954:    	test   rax,rax
  00957:    	je     0x392a9
:00044 
:00046 %9 = literal[true]
  0095d: 00 	mov    rax,0x1c
  00964:    	mov    QWORD PTR [rbp-0x70],rax
:00047 _ = %2.call hit=(%9; 1)              [<INVALID>]
  00968: 01 	sub    DWORD PTR [rip+0x139b],0x1        # 0x1d0a
  0096f:    	je     0x392e1
  00975:    	sub    rsp,0x20
  00979:    	movq   QWORD PTR [rsp],xmm5
  0097e:    	movq   QWORD PTR [rsp+0x8],xmm6
  00984:    	movq   QWORD PTR [rsp+0x10],xmm7
  0098a:    	mov    rdi,QWORD PTR [rbp-0x38]
  0098e: 00 	movabs rax,0x5600b75a2280
  00998:    	call   rax
  0099a:    	mov    r15d,eax
  0099d: 00 	cmp    r15d,DWORD PTR [rip+0x136e]        # 0x1d12
  009a4:    	jne    0x39303
  009aa:    	mov    eax,DWORD PTR [rip+0xffffffffffff572d]        # 0xffff60dd
  009b0:    	cmp    DWORD PTR [rip+0x1358],eax        # 0x1d0e
  009b6:    	jne    0x39303
  009bc:    	mov    rax,QWORD PTR [rbx]
  009bf:    	lea    rdi,[rsp-0x18]
  009c4:    	mov    QWORD PTR [rdi],rax
  009c7:    	mov    QWORD PTR [rbx],rdi
  009ca: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009d3:    	mov    QWORD PTR [rsp-0x38],rcx
  009d8:    	mov    rax,QWORD PTR [rbp-0x38]
  009dc:    	mov    QWORD PTR [rsp-0x38],rax
  009e1: 00 	mov    rdi,0x1
  009e8:    	mov    rax,QWORD PTR [rbp-0x70]
  009ec:    	mov    QWORD PTR [rsp-0x40],rax
  009f1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  009fa: 00 	movabs rax,0x0
  00a04:    	mov    QWORD PTR [rsp-0x28],rax
  00a09: 00 	movabs r13,0x0
  00a13:    	call   0xffff357a
  00a18:    	lea    rdi,[rbp-0x8]
  00a1c:    	mov    QWORD PTR [rbx],rdi
  00a1f:    	movq   xmm5,QWORD PTR [rsp]
  00a24:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00a2a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00a30:    	add    rsp,0x20
  00a34:    	test   rax,rax
  00a37:    	je     0x3936f
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  00a3d: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff56a6]        # 0xffff60ea
  00a44: 00 	cmp    rax,QWORD PTR [rip+0x12df]        # 0x1d2a
  00a4b:    	jne    0x3937e
  00a51: 00 	mov    rax,QWORD PTR [rip+0x12c2]        # 0x1d1a
  00a58:    	mov    QWORD PTR [rbp-0x78],rax
:00051 %12 = %1.call org()                  [<INVALID>]
  00a5c: 01 	sub    DWORD PTR [rip+0x12cf],0x1        # 0x1d32
  00a63:    	je     0x39417
  00a69:    	sub    rsp,0x20
  00a6d:    	movq   QWORD PTR [rsp],xmm5
  00a72:    	movq   QWORD PTR [rsp+0x8],xmm6
  00a78:    	movq   QWORD PTR [rsp+0x10],xmm7
  00a7e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00a82: 00 	movabs rax,0x5600b75a2280
  00a8c:    	call   rax
  00a8e:    	mov    r15d,eax
  00a91: 00 	cmp    r15d,DWORD PTR [rip+0x12a2]        # 0x1d3a
  00a98:    	jne    0x39439
  00a9e:    	mov    eax,DWORD PTR [rip+0xffffffffffff5639]        # 0xffff60dd
  00aa4:    	cmp    DWORD PTR [rip+0x128c],eax        # 0x1d36
  00aaa:    	jne    0x39439
  00ab0:    	mov    rax,QWORD PTR [rbx]
  00ab3:    	lea    rdi,[rsp-0x18]
  00ab8:    	mov    QWORD PTR [rdi],rax
  00abb:    	mov    QWORD PTR [rbx],rdi
  00abe: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ac7:    	mov    QWORD PTR [rsp-0x38],rcx
  00acc:    	mov    rax,QWORD PTR [rbp-0x30]
  00ad0:    	mov    QWORD PTR [rsp-0x38],rax
  00ad5: 00 	mov    rdi,0x0
  00adc: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ae5: 00 	movabs rax,0x0
  00aef:    	mov    QWORD PTR [rsp-0x28],rax
  00af4: 00 	movabs r13,0x0
  00afe:    	call   0xffff357a
  00b03:    	lea    rdi,[rbp-0x8]
  00b07:    	mov    QWORD PTR [rbx],rdi
  00b0a:    	movq   xmm5,QWORD PTR [rsp]
  00b0f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00b15:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00b1b:    	add    rsp,0x20
  00b1f:    	test   rax,rax
  00b22:    	je     0x394a5
  00b28: ff 	mov    QWORD PTR [rbp-0x88],rax
:00052 
:00054 %11 = %12.call x()                   [<INVALID>]
  00b2f: 01 	sub    DWORD PTR [rip+0x1208],0x1        # 0x1d3e
  00b36:    	je     0x394dd
  00b3c:    	sub    rsp,0x20
  00b40:    	movq   QWORD PTR [rsp],xmm5
  00b45:    	movq   QWORD PTR [rsp+0x8],xmm6
  00b4b:    	movq   QWORD PTR [rsp+0x10],xmm7
  00b51: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00b58: 00 	movabs rax,0x5600b75a2280
  00b62:    	call   rax
  00b64:    	mov    r15d,eax
  00b67: 00 	cmp    r15d,DWORD PTR [rip+0x11d8]        # 0x1d46
  00b6e:    	jne    0x394ff
  00b74:    	mov    eax,DWORD PTR [rip+0xffffffffffff5563]        # 0xffff60dd
  00b7a:    	cmp    DWORD PTR [rip+0x11c2],eax        # 0x1d42
  00b80:    	jne    0x394ff
  00b86:    	mov    rax,QWORD PTR [rbx]
  00b89:    	lea    rdi,[rsp-0x18]
  00b8e:    	mov    QWORD PTR [rdi],rax
  00b91:    	mov    QWORD PTR [rbx],rdi
  00b94: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b9d:    	mov    QWORD PTR [rsp-0x38],rcx
  00ba2: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00ba9:    	mov    QWORD PTR [rsp-0x38],rax
  00bae: 00 	mov    rdi,0x0
  00bb5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00bbe: 00 	movabs rax,0x0
  00bc8:    	mov    QWORD PTR [rsp-0x28],rax
  00bcd: 00 	movabs r13,0x0
  00bd7:    	call   0xffff357a
  00bdc:    	lea    rdi,[rbp-0x8]
  00be0:    	mov    QWORD PTR [rbx],rdi
  00be3:    	movq   xmm5,QWORD PTR [rsp]
  00be8:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00bee:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00bf4:    	add    rsp,0x20
  00bf8:    	test   rax,rax
  00bfb:    	je     0x3956e
  00c01:    	mov    QWORD PTR [rbp-0x80],rax
:00055 
:00057 %13 = %1.call dir()                  [<INVALID>]
  00c05: 01 	sub    DWORD PTR [rip+0x113e],0x1        # 0x1d4a
  00c0c:    	je     0x395a6
  00c12:    	sub    rsp,0x20
  00c16:    	movq   QWORD PTR [rsp],xmm5
  00c1b:    	movq   QWORD PTR [rsp+0x8],xmm6
  00c21:    	movq   QWORD PTR [rsp+0x10],xmm7
  00c27:    	mov    rdi,QWORD PTR [rbp-0x30]
  00c2b: 00 	movabs rax,0x5600b75a2280
  00c35:    	call   rax
  00c37:    	mov    r15d,eax
  00c3a: 00 	cmp    r15d,DWORD PTR [rip+0x1111]        # 0x1d52
  00c41:    	jne    0x395c8
  00c47:    	mov    eax,DWORD PTR [rip+0xffffffffffff5490]        # 0xffff60dd
  00c4d:    	cmp    DWORD PTR [rip+0x10fb],eax        # 0x1d4e
  00c53:    	jne    0x395c8
  00c59:    	mov    rax,QWORD PTR [rbx]
  00c5c:    	lea    rdi,[rsp-0x18]
  00c61:    	mov    QWORD PTR [rdi],rax
  00c64:    	mov    QWORD PTR [rbx],rdi
  00c67: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c70:    	mov    QWORD PTR [rsp-0x38],rcx
  00c75:    	mov    rax,QWORD PTR [rbp-0x30]
  00c79:    	mov    QWORD PTR [rsp-0x38],rax
  00c7e: 00 	mov    rdi,0x0
  00c85: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c8e: 00 	movabs rax,0x0
  00c98:    	mov    QWORD PTR [rsp-0x28],rax
  00c9d: 00 	movabs r13,0x0
  00ca7:    	call   0xffff357a
  00cac:    	lea    rdi,[rbp-0x8]
  00cb0:    	mov    QWORD PTR [rbx],rdi
  00cb3:    	movq   xmm5,QWORD PTR [rsp]
  00cb8:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00cbe:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00cc4:    	add    rsp,0x20
  00cc8:    	test   rax,rax
  00ccb:    	je     0x39634
  00cd1: ff 	mov    QWORD PTR [rbp-0x90],rax
:00058 
:00060 %12 = %13.call x()                   [<INVALID>]
  00cd8: 01 	sub    DWORD PTR [rip+0x1077],0x1        # 0x1d56
  00cdf:    	je     0x3966c
  00ce5:    	sub    rsp,0x20
  00ce9:    	movq   QWORD PTR [rsp],xmm5
  00cee:    	movq   QWORD PTR [rsp+0x8],xmm6
  00cf4:    	movq   QWORD PTR [rsp+0x10],xmm7
  00cfa: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00d01: 00 	movabs rax,0x5600b75a2280
  00d0b:    	call   rax
  00d0d:    	mov    r15d,eax
  00d10: 00 	cmp    r15d,DWORD PTR [rip+0x1047]        # 0x1d5e
  00d17:    	jne    0x3968e
  00d1d:    	mov    eax,DWORD PTR [rip+0xffffffffffff53ba]        # 0xffff60dd
  00d23:    	cmp    DWORD PTR [rip+0x1031],eax        # 0x1d5a
  00d29:    	jne    0x3968e
  00d2f:    	mov    rax,QWORD PTR [rbx]
  00d32:    	lea    rdi,[rsp-0x18]
  00d37:    	mov    QWORD PTR [rdi],rax
  00d3a:    	mov    QWORD PTR [rbx],rdi
  00d3d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d46:    	mov    QWORD PTR [rsp-0x38],rcx
  00d4b: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00d52:    	mov    QWORD PTR [rsp-0x38],rax
  00d57: 00 	mov    rdi,0x0
  00d5e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d67: 00 	movabs rax,0x0
  00d71:    	mov    QWORD PTR [rsp-0x28],rax
  00d76: 00 	movabs r13,0x0
  00d80:    	call   0xffff357a
  00d85:    	lea    rdi,[rbp-0x8]
  00d89:    	mov    QWORD PTR [rbx],rdi
  00d8c:    	movq   xmm5,QWORD PTR [rsp]
  00d91:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00d97:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00d9d:    	add    rsp,0x20
  00da1:    	test   rax,rax
  00da4:    	je     0x396fd
  00daa: ff 	mov    QWORD PTR [rbp-0x88],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00db1: 01 	sub    DWORD PTR [rip+0xfaa],0x1        # 0x1d62
  00db8:    	je     0x39735
  00dbe: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00dc5:    	mov    rsi,QWORD PTR [rbp-0x60]
  00dc9:    	sub    rsp,0x20
  00dcd:    	movq   QWORD PTR [rsp],xmm5
  00dd2:    	movq   QWORD PTR [rsp+0x8],xmm6
  00dd8:    	movq   QWORD PTR [rsp+0x10],xmm7
  00dde:    	mov    rdx,rdi
  00de1:    	mov    rcx,rsi
  00de4:    	mov    rdi,rbx
  00de7:    	mov    rsi,r12
  00dea: 00 	movabs rax,0x5600b7598f60
  00df4:    	call   rax
  00df6:    	movq   xmm5,QWORD PTR [rsp]
  00dfb:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00e01:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00e07:    	add    rsp,0x20
  00e0b: 00 	movabs r13,0x5600b92b5760
  00e15:    	test   rax,rax
  00e18:    	je     0xffff35b5
  00e1e: ff 	mov    QWORD PTR [rbp-0x88],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00e25: 01 	sub    DWORD PTR [rip+0xf3a],0x1        # 0x1d66
  00e2c:    	je     0x39780
  00e32:    	mov    rdi,QWORD PTR [rbp-0x80]
  00e36: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  00e3d:    	sub    rsp,0x20
  00e41:    	movq   QWORD PTR [rsp],xmm5
  00e46:    	movq   QWORD PTR [rsp+0x8],xmm6
  00e4c:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e52:    	mov    rdx,rdi
  00e55:    	mov    rcx,rsi
  00e58:    	mov    rdi,rbx
  00e5b:    	mov    rsi,r12
  00e5e: 00 	movabs rax,0x5600b75970e0
  00e68:    	call   rax
  00e6a:    	movq   xmm5,QWORD PTR [rsp]
  00e6f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00e75:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00e7b:    	add    rsp,0x20
  00e7f: 00 	movabs r13,0x5600b92b5770
  00e89:    	test   rax,rax
  00e8c:    	je     0xffff35b5
  00e92:    	mov    QWORD PTR [rbp-0x80],rax
:00065 %13 = %1.call org()                  [<INVALID>]
  00e96: 01 	sub    DWORD PTR [rip+0xecd],0x1        # 0x1d6a
  00e9d:    	je     0x397cb
  00ea3:    	sub    rsp,0x20
  00ea7:    	movq   QWORD PTR [rsp],xmm5
  00eac:    	movq   QWORD PTR [rsp+0x8],xmm6
  00eb2:    	movq   QWORD PTR [rsp+0x10],xmm7
  00eb8:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ebc: 00 	movabs rax,0x5600b75a2280
  00ec6:    	call   rax
  00ec8:    	mov    r15d,eax
  00ecb: 00 	cmp    r15d,DWORD PTR [rip+0xea0]        # 0x1d72
  00ed2:    	jne    0x397ed
  00ed8:    	mov    eax,DWORD PTR [rip+0xffffffffffff51ff]        # 0xffff60dd
  00ede:    	cmp    DWORD PTR [rip+0xe8a],eax        # 0x1d6e
  00ee4:    	jne    0x397ed
  00eea:    	mov    rax,QWORD PTR [rbx]
  00eed:    	lea    rdi,[rsp-0x18]
  00ef2:    	mov    QWORD PTR [rdi],rax
  00ef5:    	mov    QWORD PTR [rbx],rdi
  00ef8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f01:    	mov    QWORD PTR [rsp-0x38],rcx
  00f06:    	mov    rax,QWORD PTR [rbp-0x30]
  00f0a:    	mov    QWORD PTR [rsp-0x38],rax
  00f0f: 00 	mov    rdi,0x0
  00f16: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f1f: 00 	movabs rax,0x0
  00f29:    	mov    QWORD PTR [rsp-0x28],rax
  00f2e: 00 	movabs r13,0x0
  00f38:    	call   0xffff357a
  00f3d:    	lea    rdi,[rbp-0x8]
  00f41:    	mov    QWORD PTR [rbx],rdi
  00f44:    	movq   xmm5,QWORD PTR [rsp]
  00f49:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00f4f:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00f55:    	add    rsp,0x20
  00f59:    	test   rax,rax
  00f5c:    	je     0x39859
  00f62: ff 	mov    QWORD PTR [rbp-0x90],rax
:00066 
:00068 %12 = %13.call y()                   [<INVALID>]
  00f69: 01 	sub    DWORD PTR [rip+0xe06],0x1        # 0x1d76
  00f70:    	je     0x39891
  00f76:    	sub    rsp,0x20
  00f7a:    	movq   QWORD PTR [rsp],xmm5
  00f7f:    	movq   QWORD PTR [rsp+0x8],xmm6
  00f85:    	movq   QWORD PTR [rsp+0x10],xmm7
  00f8b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00f92: 00 	movabs rax,0x5600b75a2280
  00f9c:    	call   rax
  00f9e:    	mov    r15d,eax
  00fa1: 00 	cmp    r15d,DWORD PTR [rip+0xdd6]        # 0x1d7e
  00fa8:    	jne    0x398b3
  00fae:    	mov    eax,DWORD PTR [rip+0xffffffffffff5129]        # 0xffff60dd
  00fb4:    	cmp    DWORD PTR [rip+0xdc0],eax        # 0x1d7a
  00fba:    	jne    0x398b3
  00fc0:    	mov    rax,QWORD PTR [rbx]
  00fc3:    	lea    rdi,[rsp-0x18]
  00fc8:    	mov    QWORD PTR [rdi],rax
  00fcb:    	mov    QWORD PTR [rbx],rdi
  00fce: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fd7:    	mov    QWORD PTR [rsp-0x38],rcx
  00fdc: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00fe3:    	mov    QWORD PTR [rsp-0x38],rax
  00fe8: 00 	mov    rdi,0x0
  00fef: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ff8: 00 	movabs rax,0x0
  01002:    	mov    QWORD PTR [rsp-0x28],rax
  01007: 00 	movabs r13,0x0
  01011:    	call   0xffff357a
  01016:    	lea    rdi,[rbp-0x8]
  0101a:    	mov    QWORD PTR [rbx],rdi
  0101d:    	movq   xmm5,QWORD PTR [rsp]
  01022:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01028:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0102e:    	add    rsp,0x20
  01032:    	test   rax,rax
  01035:    	je     0x39922
  0103b: ff 	mov    QWORD PTR [rbp-0x88],rax
:00069 
:00071 %14 = %1.call dir()                  [<INVALID>]
  01042: 01 	sub    DWORD PTR [rip+0xd39],0x1        # 0x1d82
  01049:    	je     0x3995a
  0104f:    	sub    rsp,0x20
  01053:    	movq   QWORD PTR [rsp],xmm5
  01058:    	movq   QWORD PTR [rsp+0x8],xmm6
  0105e:    	movq   QWORD PTR [rsp+0x10],xmm7
  01064:    	mov    rdi,QWORD PTR [rbp-0x30]
  01068: 00 	movabs rax,0x5600b75a2280
  01072:    	call   rax
  01074:    	mov    r15d,eax
  01077: 00 	cmp    r15d,DWORD PTR [rip+0xd0c]        # 0x1d8a
  0107e:    	jne    0x3997c
  01084:    	mov    eax,DWORD PTR [rip+0xffffffffffff5053]        # 0xffff60dd
  0108a:    	cmp    DWORD PTR [rip+0xcf6],eax        # 0x1d86
  01090:    	jne    0x3997c
  01096:    	mov    rax,QWORD PTR [rbx]
  01099:    	lea    rdi,[rsp-0x18]
  0109e:    	mov    QWORD PTR [rdi],rax
  010a1:    	mov    QWORD PTR [rbx],rdi
  010a4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010ad:    	mov    QWORD PTR [rsp-0x38],rcx
  010b2:    	mov    rax,QWORD PTR [rbp-0x30]
  010b6:    	mov    QWORD PTR [rsp-0x38],rax
  010bb: 00 	mov    rdi,0x0
  010c2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010cb: 00 	movabs rax,0x0
  010d5:    	mov    QWORD PTR [rsp-0x28],rax
  010da: 00 	movabs r13,0x0
  010e4:    	call   0xffff357a
  010e9:    	lea    rdi,[rbp-0x8]
  010ed:    	mov    QWORD PTR [rbx],rdi
  010f0:    	movq   xmm5,QWORD PTR [rsp]
  010f5:    	movq   xmm6,QWORD PTR [rsp+0x8]
  010fb:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01101:    	add    rsp,0x20
  01105:    	test   rax,rax
  01108:    	je     0x399e8
  0110e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 
:00074 %13 = %14.call y()                   [<INVALID>]
  01115: 01 	sub    DWORD PTR [rip+0xc72],0x1        # 0x1d8e
  0111c:    	je     0x39a20
  01122:    	sub    rsp,0x20
  01126:    	movq   QWORD PTR [rsp],xmm5
  0112b:    	movq   QWORD PTR [rsp+0x8],xmm6
  01131:    	movq   QWORD PTR [rsp+0x10],xmm7
  01137: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0113e: 00 	movabs rax,0x5600b75a2280
  01148:    	call   rax
  0114a:    	mov    r15d,eax
  0114d: 00 	cmp    r15d,DWORD PTR [rip+0xc42]        # 0x1d96
  01154:    	jne    0x39a42
  0115a:    	mov    eax,DWORD PTR [rip+0xffffffffffff4f7d]        # 0xffff60dd
  01160:    	cmp    DWORD PTR [rip+0xc2c],eax        # 0x1d92
  01166:    	jne    0x39a42
  0116c:    	mov    rax,QWORD PTR [rbx]
  0116f:    	lea    rdi,[rsp-0x18]
  01174:    	mov    QWORD PTR [rdi],rax
  01177:    	mov    QWORD PTR [rbx],rdi
  0117a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01183:    	mov    QWORD PTR [rsp-0x38],rcx
  01188: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0118f:    	mov    QWORD PTR [rsp-0x38],rax
  01194: 00 	mov    rdi,0x0
  0119b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011a4: 00 	movabs rax,0x0
  011ae:    	mov    QWORD PTR [rsp-0x28],rax
  011b3: 00 	movabs r13,0x0
  011bd:    	call   0xffff357a
  011c2:    	lea    rdi,[rbp-0x8]
  011c6:    	mov    QWORD PTR [rbx],rdi
  011c9:    	movq   xmm5,QWORD PTR [rsp]
  011ce:    	movq   xmm6,QWORD PTR [rsp+0x8]
  011d4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  011da:    	add    rsp,0x20
  011de:    	test   rax,rax
  011e1:    	je     0x39ab1
  011e7: ff 	mov    QWORD PTR [rbp-0x90],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  011ee: 01 	sub    DWORD PTR [rip+0xba5],0x1        # 0x1d9a
  011f5:    	je     0x39ae9
  011fb: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01202:    	mov    rsi,QWORD PTR [rbp-0x60]
  01206:    	sub    rsp,0x20
  0120a:    	movq   QWORD PTR [rsp],xmm5
  0120f:    	movq   QWORD PTR [rsp+0x8],xmm6
  01215:    	movq   QWORD PTR [rsp+0x10],xmm7
  0121b:    	mov    rdx,rdi
  0121e:    	mov    rcx,rsi
  01221:    	mov    rdi,rbx
  01224:    	mov    rsi,r12
  01227: 00 	movabs rax,0x5600b7598f60
  01231:    	call   rax
  01233:    	movq   xmm5,QWORD PTR [rsp]
  01238:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0123e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01244:    	add    rsp,0x20
  01248: 00 	movabs r13,0x5600b92b5840
  01252:    	test   rax,rax
  01255:    	je     0xffff35b5
  0125b: ff 	mov    QWORD PTR [rbp-0x90],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  01262: 01 	sub    DWORD PTR [rip+0xb35],0x1        # 0x1d9e
  01269:    	je     0x39b34
  0126f: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01276: ff 	mov    rsi,QWORD PTR [rbp-0x90]
  0127d:    	sub    rsp,0x20
  01281:    	movq   QWORD PTR [rsp],xmm5
  01286:    	movq   QWORD PTR [rsp+0x8],xmm6
  0128c:    	movq   QWORD PTR [rsp+0x10],xmm7
  01292:    	mov    rdx,rdi
  01295:    	mov    rcx,rsi
  01298:    	mov    rdi,rbx
  0129b:    	mov    rsi,r12
  0129e: 00 	movabs rax,0x5600b75970e0
  012a8:    	call   rax
  012aa:    	movq   xmm5,QWORD PTR [rsp]
  012af:    	movq   xmm6,QWORD PTR [rsp+0x8]
  012b5:    	movq   xmm7,QWORD PTR [rsp+0x10]
  012bb:    	add    rsp,0x20
  012bf: 00 	movabs r13,0x5600b92b5850
  012c9:    	test   rax,rax
  012cc:    	je     0xffff35b5
  012d2: ff 	mov    QWORD PTR [rbp-0x88],rax
:00079 %14 = %1.call org()                  [<INVALID>]
  012d9: 01 	sub    DWORD PTR [rip+0xac2],0x1        # 0x1da2
  012e0:    	je     0x39b7f
  012e6:    	sub    rsp,0x20
  012ea:    	movq   QWORD PTR [rsp],xmm5
  012ef:    	movq   QWORD PTR [rsp+0x8],xmm6
  012f5:    	movq   QWORD PTR [rsp+0x10],xmm7
  012fb:    	mov    rdi,QWORD PTR [rbp-0x30]
  012ff: 00 	movabs rax,0x5600b75a2280
  01309:    	call   rax
  0130b:    	mov    r15d,eax
  0130e: 00 	cmp    r15d,DWORD PTR [rip+0xa95]        # 0x1daa
  01315:    	jne    0x39ba1
  0131b:    	mov    eax,DWORD PTR [rip+0xffffffffffff4dbc]        # 0xffff60dd
  01321:    	cmp    DWORD PTR [rip+0xa7f],eax        # 0x1da6
  01327:    	jne    0x39ba1
  0132d:    	mov    rax,QWORD PTR [rbx]
  01330:    	lea    rdi,[rsp-0x18]
  01335:    	mov    QWORD PTR [rdi],rax
  01338:    	mov    QWORD PTR [rbx],rdi
  0133b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01344:    	mov    QWORD PTR [rsp-0x38],rcx
  01349:    	mov    rax,QWORD PTR [rbp-0x30]
  0134d:    	mov    QWORD PTR [rsp-0x38],rax
  01352: 00 	mov    rdi,0x0
  01359: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01362: 00 	movabs rax,0x0
  0136c:    	mov    QWORD PTR [rsp-0x28],rax
  01371: 00 	movabs r13,0x0
  0137b:    	call   0xffff357a
  01380:    	lea    rdi,[rbp-0x8]
  01384:    	mov    QWORD PTR [rbx],rdi
  01387:    	movq   xmm5,QWORD PTR [rsp]
  0138c:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01392:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01398:    	add    rsp,0x20
  0139c:    	test   rax,rax
  0139f:    	je     0x39c0d
  013a5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 
:00082 %13 = %14.call z()                   [<INVALID>]
  013ac: 01 	sub    DWORD PTR [rip+0x9fb],0x1        # 0x1dae
  013b3:    	je     0x39c45
  013b9:    	sub    rsp,0x20
  013bd:    	movq   QWORD PTR [rsp],xmm5
  013c2:    	movq   QWORD PTR [rsp+0x8],xmm6
  013c8:    	movq   QWORD PTR [rsp+0x10],xmm7
  013ce: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  013d5: 00 	movabs rax,0x5600b75a2280
  013df:    	call   rax
  013e1:    	mov    r15d,eax
  013e4: 00 	cmp    r15d,DWORD PTR [rip+0x9cb]        # 0x1db6
  013eb:    	jne    0x39c67
  013f1:    	mov    eax,DWORD PTR [rip+0xffffffffffff4ce6]        # 0xffff60dd
  013f7:    	cmp    DWORD PTR [rip+0x9b5],eax        # 0x1db2
  013fd:    	jne    0x39c67
  01403:    	mov    rax,QWORD PTR [rbx]
  01406:    	lea    rdi,[rsp-0x18]
  0140b:    	mov    QWORD PTR [rdi],rax
  0140e:    	mov    QWORD PTR [rbx],rdi
  01411: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0141a:    	mov    QWORD PTR [rsp-0x38],rcx
  0141f: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01426:    	mov    QWORD PTR [rsp-0x38],rax
  0142b: 00 	mov    rdi,0x0
  01432: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0143b: 00 	movabs rax,0x0
  01445:    	mov    QWORD PTR [rsp-0x28],rax
  0144a: 00 	movabs r13,0x0
  01454:    	call   0xffff357a
  01459:    	lea    rdi,[rbp-0x8]
  0145d:    	mov    QWORD PTR [rbx],rdi
  01460:    	movq   xmm5,QWORD PTR [rsp]
  01465:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0146b:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01471:    	add    rsp,0x20
  01475:    	test   rax,rax
  01478:    	je     0x39cd6
  0147e: ff 	mov    QWORD PTR [rbp-0x90],rax
:00083 
:00085 %15 = %1.call dir()                  [<INVALID>]
  01485: 01 	sub    DWORD PTR [rip+0x92e],0x1        # 0x1dba
  0148c:    	je     0x39d0e
  01492:    	sub    rsp,0x20
  01496:    	movq   QWORD PTR [rsp],xmm5
  0149b:    	movq   QWORD PTR [rsp+0x8],xmm6
  014a1:    	movq   QWORD PTR [rsp+0x10],xmm7
  014a7:    	mov    rdi,QWORD PTR [rbp-0x30]
  014ab: 00 	movabs rax,0x5600b75a2280
  014b5:    	call   rax
  014b7:    	mov    r15d,eax
  014ba: 00 	cmp    r15d,DWORD PTR [rip+0x901]        # 0x1dc2
  014c1:    	jne    0x39d30
  014c7:    	mov    eax,DWORD PTR [rip+0xffffffffffff4c10]        # 0xffff60dd
  014cd:    	cmp    DWORD PTR [rip+0x8eb],eax        # 0x1dbe
  014d3:    	jne    0x39d30
  014d9:    	mov    rax,QWORD PTR [rbx]
  014dc:    	lea    rdi,[rsp-0x18]
  014e1:    	mov    QWORD PTR [rdi],rax
  014e4:    	mov    QWORD PTR [rbx],rdi
  014e7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014f0:    	mov    QWORD PTR [rsp-0x38],rcx
  014f5:    	mov    rax,QWORD PTR [rbp-0x30]
  014f9:    	mov    QWORD PTR [rsp-0x38],rax
  014fe: 00 	mov    rdi,0x0
  01505: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0150e: 00 	movabs rax,0x0
  01518:    	mov    QWORD PTR [rsp-0x28],rax
  0151d: 00 	movabs r13,0x0
  01527:    	call   0xffff357a
  0152c:    	lea    rdi,[rbp-0x8]
  01530:    	mov    QWORD PTR [rbx],rdi
  01533:    	movq   xmm5,QWORD PTR [rsp]
  01538:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0153e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01544:    	add    rsp,0x20
  01548:    	test   rax,rax
  0154b:    	je     0x39d9c
  01551: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00086 
:00088 %14 = %15.call z()                   [<INVALID>]
  01558: 01 	sub    DWORD PTR [rip+0x867],0x1        # 0x1dc6
  0155f:    	je     0x39dd4
  01565:    	sub    rsp,0x20
  01569:    	movq   QWORD PTR [rsp],xmm5
  0156e:    	movq   QWORD PTR [rsp+0x8],xmm6
  01574:    	movq   QWORD PTR [rsp+0x10],xmm7
  0157a: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01581: 00 	movabs rax,0x5600b75a2280
  0158b:    	call   rax
  0158d:    	mov    r15d,eax
  01590: 00 	cmp    r15d,DWORD PTR [rip+0x837]        # 0x1dce
  01597:    	jne    0x39df6
  0159d:    	mov    eax,DWORD PTR [rip+0xffffffffffff4b3a]        # 0xffff60dd
  015a3:    	cmp    DWORD PTR [rip+0x821],eax        # 0x1dca
  015a9:    	jne    0x39df6
  015af:    	mov    rax,QWORD PTR [rbx]
  015b2:    	lea    rdi,[rsp-0x18]
  015b7:    	mov    QWORD PTR [rdi],rax
  015ba:    	mov    QWORD PTR [rbx],rdi
  015bd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015c6:    	mov    QWORD PTR [rsp-0x38],rcx
  015cb: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  015d2:    	mov    QWORD PTR [rsp-0x38],rax
  015d7: 00 	mov    rdi,0x0
  015de: 00 	mov    QWORD PTR [rsp-0x30],0x0
  015e7: 00 	movabs rax,0x0
  015f1:    	mov    QWORD PTR [rsp-0x28],rax
  015f6: 00 	movabs r13,0x0
  01600:    	call   0xffff357a
  01605:    	lea    rdi,[rbp-0x8]
  01609:    	mov    QWORD PTR [rbx],rdi
  0160c:    	movq   xmm5,QWORD PTR [rsp]
  01611:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01617:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0161d:    	add    rsp,0x20
  01621:    	test   rax,rax
  01624:    	je     0x39e65
  0162a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  01631: 01 	sub    DWORD PTR [rip+0x79a],0x1        # 0x1dd2
  01638:    	je     0x39e9d
  0163e: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01645:    	mov    rsi,QWORD PTR [rbp-0x60]
  01649:    	sub    rsp,0x20
  0164d:    	movq   QWORD PTR [rsp],xmm5
  01652:    	movq   QWORD PTR [rsp+0x8],xmm6
  01658:    	movq   QWORD PTR [rsp+0x10],xmm7
  0165e:    	mov    rdx,rdi
  01661:    	mov    rcx,rsi
  01664:    	mov    rdi,rbx
  01667:    	mov    rsi,r12
  0166a: 00 	movabs rax,0x5600b7598f60
  01674:    	call   rax
  01676:    	movq   xmm5,QWORD PTR [rsp]
  0167b:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01681:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01687:    	add    rsp,0x20
  0168b: 00 	movabs r13,0x5600b92b5920
  01695:    	test   rax,rax
  01698:    	je     0xffff35b5
  0169e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  016a5: 01 	sub    DWORD PTR [rip+0x72a],0x1        # 0x1dd6
  016ac:    	je     0x39ee8
  016b2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  016b9: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  016c0:    	sub    rsp,0x20
  016c4:    	movq   QWORD PTR [rsp],xmm5
  016c9:    	movq   QWORD PTR [rsp+0x8],xmm6
  016cf:    	movq   QWORD PTR [rsp+0x10],xmm7
  016d5:    	mov    rdx,rdi
  016d8:    	mov    rcx,rsi
  016db:    	mov    rdi,rbx
  016de:    	mov    rsi,r12
  016e1: 00 	movabs rax,0x5600b75970e0
  016eb:    	call   rax
  016ed:    	movq   xmm5,QWORD PTR [rsp]
  016f2:    	movq   xmm6,QWORD PTR [rsp+0x8]
  016f8:    	movq   xmm7,QWORD PTR [rsp+0x10]
  016fe:    	add    rsp,0x20
  01702: 00 	movabs r13,0x5600b92b5930
  0170c:    	test   rax,rax
  0170f:    	je     0xffff35b5
  01715: ff 	mov    QWORD PTR [rbp-0x90],rax
:00093 %9 = %10.call new(%11; 3)            [<INVALID>]
  0171c: 01 	sub    DWORD PTR [rip+0x6b7],0x1        # 0x1dda
  01723:    	je     0x39f33
  01729:    	sub    rsp,0x20
  0172d:    	movq   QWORD PTR [rsp],xmm5
  01732:    	movq   QWORD PTR [rsp+0x8],xmm6
  01738:    	movq   QWORD PTR [rsp+0x10],xmm7
  0173e:    	mov    rdi,QWORD PTR [rbp-0x78]
  01742: 00 	movabs rax,0x5600b75a2280
  0174c:    	call   rax
  0174e:    	mov    r15d,eax
  01751: 00 	cmp    r15d,DWORD PTR [rip+0x68a]        # 0x1de2
  01758:    	jne    0x39f55
  0175e:    	mov    eax,DWORD PTR [rip+0xffffffffffff4979]        # 0xffff60dd
  01764:    	cmp    DWORD PTR [rip+0x674],eax        # 0x1dde
  0176a:    	jne    0x39f55
  01770:    	mov    rax,QWORD PTR [rbx]
  01773:    	lea    rdi,[rsp-0x18]
  01778:    	mov    QWORD PTR [rdi],rax
  0177b:    	mov    QWORD PTR [rbx],rdi
  0177e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01787:    	mov    QWORD PTR [rsp-0x38],rcx
  0178c:    	mov    rax,QWORD PTR [rbp-0x78]
  01790:    	mov    QWORD PTR [rsp-0x38],rax
  01795: 00 	mov    rdi,0x3
  0179c:    	mov    rax,QWORD PTR [rbp-0x80]
  017a0:    	mov    QWORD PTR [rsp-0x40],rax
  017a5: ff 	mov    rax,QWORD PTR [rbp-0x88]
  017ac:    	mov    QWORD PTR [rsp-0x48],rax
  017b1: ff 	mov    rax,QWORD PTR [rbp-0x90]
  017b8:    	mov    QWORD PTR [rsp-0x50],rax
  017bd: 00 	mov    QWORD PTR [rsp-0x30],0x0
  017c6: 00 	movabs rax,0x0
  017d0:    	mov    QWORD PTR [rsp-0x28],rax
  017d5: 00 	movabs r13,0x0
  017df:    	call   0xffff357a
  017e4:    	lea    rdi,[rbp-0x8]
  017e8:    	mov    QWORD PTR [rbx],rdi
  017eb:    	movq   xmm5,QWORD PTR [rsp]
  017f0:    	movq   xmm6,QWORD PTR [rsp+0x8]
  017f6:    	movq   xmm7,QWORD PTR [rsp+0x10]
  017fc:    	add    rsp,0x20
  01800:    	test   rax,rax
  01803:    	je     0x39fc1
  01809:    	mov    QWORD PTR [rbp-0x70],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [<INVALID>]
  0180d: 01 	sub    DWORD PTR [rip+0x5d2],0x1        # 0x1de6
  01814:    	je     0x39ff9
  0181a:    	sub    rsp,0x20
  0181e:    	movq   QWORD PTR [rsp],xmm5
  01823:    	movq   QWORD PTR [rsp+0x8],xmm6
  01829:    	movq   QWORD PTR [rsp+0x10],xmm7
  0182f:    	mov    rdi,QWORD PTR [rbp-0x38]
  01833: 00 	movabs rax,0x5600b75a2280
  0183d:    	call   rax
  0183f:    	mov    r15d,eax
  01842: 00 	cmp    r15d,DWORD PTR [rip+0x5a5]        # 0x1dee
  01849:    	jne    0x3a01b
  0184f:    	mov    eax,DWORD PTR [rip+0xffffffffffff4888]        # 0xffff60dd
  01855:    	cmp    DWORD PTR [rip+0x58f],eax        # 0x1dea
  0185b:    	jne    0x3a01b
  01861:    	mov    rax,QWORD PTR [rbx]
  01864:    	lea    rdi,[rsp-0x18]
  01869:    	mov    QWORD PTR [rdi],rax
  0186c:    	mov    QWORD PTR [rbx],rdi
  0186f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01878:    	mov    QWORD PTR [rsp-0x38],rcx
  0187d:    	mov    rax,QWORD PTR [rbp-0x38]
  01881:    	mov    QWORD PTR [rsp-0x38],rax
  01886: 00 	mov    rdi,0x1
  0188d:    	mov    rax,QWORD PTR [rbp-0x70]
  01891:    	mov    QWORD PTR [rsp-0x40],rax
  01896: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0189f: 00 	movabs rax,0x0
  018a9:    	mov    QWORD PTR [rsp-0x28],rax
  018ae: 00 	movabs r13,0x0
  018b8:    	call   0xffff357a
  018bd:    	lea    rdi,[rbp-0x8]
  018c1:    	mov    QWORD PTR [rbx],rdi
  018c4:    	movq   xmm5,QWORD PTR [rsp]
  018c9:    	movq   xmm6,QWORD PTR [rsp+0x8]
  018cf:    	movq   xmm7,QWORD PTR [rsp+0x10]
  018d5:    	add    rsp,0x20
  018d9:    	test   rax,rax
  018dc:    	je     0x3a087
:00097 
:00099 %9 = %2.call pl()                    [<INVALID>]
  018e2: 01 	sub    DWORD PTR [rip+0x509],0x1        # 0x1df2
  018e9:    	je     0x3a0bf
  018ef:    	sub    rsp,0x20
  018f3:    	movq   QWORD PTR [rsp],xmm5
  018f8:    	movq   QWORD PTR [rsp+0x8],xmm6
  018fe:    	movq   QWORD PTR [rsp+0x10],xmm7
  01904:    	mov    rdi,QWORD PTR [rbp-0x38]
  01908: 00 	movabs rax,0x5600b75a2280
  01912:    	call   rax
  01914:    	mov    r15d,eax
  01917: 00 	cmp    r15d,DWORD PTR [rip+0x4dc]        # 0x1dfa
  0191e:    	jne    0x3a0e1
  01924:    	mov    eax,DWORD PTR [rip+0xffffffffffff47b3]        # 0xffff60dd
  0192a:    	cmp    DWORD PTR [rip+0x4c6],eax        # 0x1df6
  01930:    	jne    0x3a0e1
  01936:    	mov    rax,QWORD PTR [rbx]
  01939:    	lea    rdi,[rsp-0x18]
  0193e:    	mov    QWORD PTR [rdi],rax
  01941:    	mov    QWORD PTR [rbx],rdi
  01944: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0194d:    	mov    QWORD PTR [rsp-0x38],rcx
  01952:    	mov    rax,QWORD PTR [rbp-0x38]
  01956:    	mov    QWORD PTR [rsp-0x38],rax
  0195b: 00 	mov    rdi,0x0
  01962: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0196b: 00 	movabs rax,0x0
  01975:    	mov    QWORD PTR [rsp-0x28],rax
  0197a: 00 	movabs r13,0x0
  01984:    	call   0xffff357a
  01989:    	lea    rdi,[rbp-0x8]
  0198d:    	mov    QWORD PTR [rbx],rdi
  01990:    	movq   xmm5,QWORD PTR [rsp]
  01995:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0199b:    	movq   xmm7,QWORD PTR [rsp+0x10]
  019a1:    	add    rsp,0x20
  019a5:    	test   rax,rax
  019a8:    	je     0x3a14d
  019ae:    	mov    QWORD PTR [rbp-0x70],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  019b2:    	mov    rdi,QWORD PTR [rbp-0x28]
  019b6:    	sub    rsp,0x20
  019ba:    	movq   QWORD PTR [rsp],xmm5
  019bf:    	movq   QWORD PTR [rsp+0x8],xmm6
  019c5:    	movq   QWORD PTR [rsp+0x10],xmm7
  019cb: 00 	mov    rsi,0x85
  019d2:    	mov    rdx,r12
  019d5: 00 	movabs rax,0x5600b75c5460
  019df:    	call   rax
  019e1:    	movq   xmm5,QWORD PTR [rsp]
  019e6:    	movq   xmm6,QWORD PTR [rsp+0x8]
  019ec:    	movq   xmm7,QWORD PTR [rsp+0x10]
  019f2:    	add    rsp,0x20
  019f6:    	mov    QWORD PTR [rbp-0x78],rax
:00103 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  019fa: 01 	sub    DWORD PTR [rip+0x3fd],0x1        # 0x1dfe
  01a01:    	je     0x3a185
  01a07:    	sub    rsp,0x20
  01a0b:    	movq   QWORD PTR [rsp],xmm5
  01a10:    	movq   QWORD PTR [rsp+0x8],xmm6
  01a16:    	movq   QWORD PTR [rsp+0x10],xmm7
  01a1c:    	mov    rdi,QWORD PTR [rbp-0x70]
  01a20: 00 	movabs rax,0x5600b75a2280
  01a2a:    	call   rax
  01a2c:    	mov    r15d,eax
  01a2f: 00 	cmp    r15d,DWORD PTR [rip+0x3d0]        # 0x1e06
  01a36:    	jne    0x3a1a7
  01a3c:    	mov    eax,DWORD PTR [rip+0xffffffffffff469b]        # 0xffff60dd
  01a42:    	cmp    DWORD PTR [rip+0x3ba],eax        # 0x1e02
  01a48:    	jne    0x3a1a7
  01a4e:    	mov    rax,QWORD PTR [rbx]
  01a51:    	lea    rdi,[rsp-0x18]
  01a56:    	mov    QWORD PTR [rdi],rax
  01a59:    	mov    QWORD PTR [rbx],rdi
  01a5c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a65:    	mov    QWORD PTR [rsp-0x38],rcx
  01a6a:    	mov    rax,QWORD PTR [rbp-0x70]
  01a6e:    	mov    QWORD PTR [rsp-0x38],rax
  01a73: 00 	mov    rdi,0x1
  01a7a:    	mov    rax,QWORD PTR [rbp-0x78]
  01a7e:    	mov    QWORD PTR [rsp-0x40],rax
  01a83: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a8c: 00 	movabs rax,0x0
  01a96:    	mov    QWORD PTR [rsp-0x28],rax
  01a9b: 00 	movabs r13,0x0
  01aa5:    	call   0xffff357a
  01aaa:    	lea    rdi,[rbp-0x8]
  01aae:    	mov    QWORD PTR [rbx],rdi
  01ab1:    	movq   xmm5,QWORD PTR [rsp]
  01ab6:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01abc:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01ac2:    	add    rsp,0x20
  01ac6:    	test   rax,rax
  01ac9:    	je     0x3a213
  01acf:    	mov    QWORD PTR [rbp-0x68],rax
:00104 
:00106 %9 = %8.call vnormalize()            [<INVALID>]
  01ad3: 01 	sub    DWORD PTR [rip+0x330],0x1        # 0x1e0a
  01ada:    	je     0x3a24b
  01ae0:    	sub    rsp,0x20
  01ae4:    	movq   QWORD PTR [rsp],xmm5
  01ae9:    	movq   QWORD PTR [rsp+0x8],xmm6
  01aef:    	movq   QWORD PTR [rsp+0x10],xmm7
  01af5:    	mov    rdi,QWORD PTR [rbp-0x68]
  01af9: 00 	movabs rax,0x5600b75a2280
  01b03:    	call   rax
  01b05:    	mov    r15d,eax
  01b08: 00 	cmp    r15d,DWORD PTR [rip+0x303]        # 0x1e12
  01b0f:    	jne    0x3a26d
  01b15:    	mov    eax,DWORD PTR [rip+0xffffffffffff45c2]        # 0xffff60dd
  01b1b:    	cmp    DWORD PTR [rip+0x2ed],eax        # 0x1e0e
  01b21:    	jne    0x3a26d
  01b27:    	mov    rax,QWORD PTR [rbx]
  01b2a:    	lea    rdi,[rsp-0x18]
  01b2f:    	mov    QWORD PTR [rdi],rax
  01b32:    	mov    QWORD PTR [rbx],rdi
  01b35: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b3e:    	mov    QWORD PTR [rsp-0x38],rcx
  01b43:    	mov    rax,QWORD PTR [rbp-0x68]
  01b47:    	mov    QWORD PTR [rsp-0x38],rax
  01b4c: 00 	mov    rdi,0x0
  01b53: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b5c: 00 	movabs rax,0x0
  01b66:    	mov    QWORD PTR [rsp-0x28],rax
  01b6b: 00 	movabs r13,0x0
  01b75:    	call   0xffff357a
  01b7a:    	lea    rdi,[rbp-0x8]
  01b7e:    	mov    QWORD PTR [rbx],rdi
  01b81:    	movq   xmm5,QWORD PTR [rsp]
  01b86:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01b8c:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01b92:    	add    rsp,0x20
  01b96:    	test   rax,rax
  01b99:    	je     0x3a2d9
  01b9f:    	mov    QWORD PTR [rbp-0x70],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [<INVALID>]
  01ba3: 01 	sub    DWORD PTR [rip+0x26c],0x1        # 0x1e16
  01baa:    	je     0x3a311
  01bb0:    	sub    rsp,0x20
  01bb4:    	movq   QWORD PTR [rsp],xmm5
  01bb9:    	movq   QWORD PTR [rsp+0x8],xmm6
  01bbf:    	movq   QWORD PTR [rsp+0x10],xmm7
  01bc5:    	mov    rdi,QWORD PTR [rbp-0x38]
  01bc9: 00 	movabs rax,0x5600b75a2280
  01bd3:    	call   rax
  01bd5:    	mov    r15d,eax
  01bd8: 00 	cmp    r15d,DWORD PTR [rip+0x23f]        # 0x1e1e
  01bdf:    	jne    0x3a333
  01be5:    	mov    eax,DWORD PTR [rip+0xffffffffffff44f2]        # 0xffff60dd
  01beb:    	cmp    DWORD PTR [rip+0x229],eax        # 0x1e1a
  01bf1:    	jne    0x3a333
  01bf7:    	mov    rax,QWORD PTR [rbx]
  01bfa:    	lea    rdi,[rsp-0x18]
  01bff:    	mov    QWORD PTR [rdi],rax
  01c02:    	mov    QWORD PTR [rbx],rdi
  01c05: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01c0e:    	mov    QWORD PTR [rsp-0x38],rcx
  01c13:    	mov    rax,QWORD PTR [rbp-0x38]
  01c17:    	mov    QWORD PTR [rsp-0x38],rax
  01c1c: 00 	mov    rdi,0x1
  01c23:    	mov    rax,QWORD PTR [rbp-0x70]
  01c27:    	mov    QWORD PTR [rsp-0x40],rax
  01c2c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c35: 00 	movabs rax,0x0
  01c3f:    	mov    QWORD PTR [rsp-0x28],rax
  01c44: 00 	movabs r13,0x0
  01c4e:    	call   0xffff357a
  01c53:    	lea    rdi,[rbp-0x8]
  01c57:    	mov    QWORD PTR [rbx],rdi
  01c5a:    	movq   xmm5,QWORD PTR [rsp]
  01c5f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01c65:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01c6b:    	add    rsp,0x20
  01c6f:    	test   rax,rax
  01c72:    	je     0x3a39f
:00110 
:00112 br =>:00113
  01c78:    	jmp    0x3a414
:00113 br =>:00114
  01c7d:    	jmp    0x3a487
:00114 %9 = nil
  01c82: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00115 ret %9
  01c8a:    	mov    rax,QWORD PTR [rbp-0x70]
  01c8e:    	leave  
  01c8f:    	ret    
==> start whole compile: <unnamed> FuncId(79) self_class:Scene start:[00000] bytecode:0x5600b92adc30
<== finished compile. elapsed:191µs
offset:Pos(59560) code: 9101 bytes  data: 419 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x1
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x38],rax
  00040:    	mov    QWORD PTR [rbp-0x40],rax
  00044:    	mov    QWORD PTR [rbp-0x48],rax
  00048:    	mov    QWORD PTR [rbp-0x50],rax
  0004c:    	mov    QWORD PTR [rbp-0x58],rax
  00050:    	mov    QWORD PTR [rbp-0x60],rax
  00054:    	mov    QWORD PTR [rbp-0x68],rax
  00058:    	mov    QWORD PTR [rbp-0x70],rax
  0005c:    	mov    QWORD PTR [rbp-0x78],rax
  00060:    	mov    QWORD PTR [rbp-0x80],rax
  00064: ff 	mov    QWORD PTR [rbp-0x88],rax
  0006b: ff 	mov    QWORD PTR [rbp-0x90],rax
  00072: ff 	mov    QWORD PTR [rbp-0x98],rax
  00079: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00080: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00087:    	mov    rdi,QWORD PTR [rbp-0x28]
  0008b: 00 	test   rdi,0x7
  00092:    	jne    0x38698
  00098:    	cmp    DWORD PTR [rdi+0x4],0x32
  0009c:    	jne    0x38698
:00000 init reg_num:17 arg_num:1 stack_offset:11
:00001 %13 = %0.call rand()                 [Scene]
  000a2:    	mov    rdi,QWORD PTR [rbp-0x28]
  000a6: 26 	cmp    DWORD PTR [rip+0xffffffffffff420e],0x26        # 0xffff42bb
  000ad:    	jne    0x386a7
  000b3: 00 	mov    r9,0x0
  000ba:    	mov    rdx,rdi
  000bd:    	mov    rax,QWORD PTR [rbx]
  000c0:    	lea    rdi,[rsp-0x18]
  000c5:    	mov    QWORD PTR [rdi],rax
  000c8:    	mov    QWORD PTR [rbx],rdi
  000cb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000d4:    	mov    QWORD PTR [rsp-0x38],rcx
  000d9: ff 	lea    rcx,[rbp-0x98]
  000e0: 00 	mov    r8,0x0
  000e7:    	call   0x386b6
  000ec:    	lea    rdi,[rbp-0x8]
  000f0:    	mov    QWORD PTR [rbx],rdi
  000f3: 00 	movabs r13,0x5600b92adc60
  000fd:    	test   rax,rax
  00100:    	je     0xffff1793
  00106: ff 	mov    QWORD PTR [rbp-0x90],rax
:00002 
:00004 %2 = %13
  0010d: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00114:    	mov    QWORD PTR [rbp-0x38],rax
:00005 %13 = literal[2.0]
  00118: 00 	movq   xmm2,QWORD PTR [rip+0x2278]        # 0x2398
  00120: 00 	mov    rax,0x2
  00127: ff 	mov    QWORD PTR [rbp-0x90],rax
:00006 %14 = literal[3.14159265]
  0012e: 00 	movq   xmm3,QWORD PTR [rip+0x2272]        # 0x23a8
  00136: da 	movabs rax,0x490fda9e46a78a
  00140: ff 	mov    QWORD PTR [rbp-0x98],rax
:00007 %13 = %13 * %14                      [Float][Float]
  00147:    	mulsd  xmm2,xmm3
:00008 %14 = %0.call rand()                 [Scene]
  0014b:    	mov    rdi,QWORD PTR [rbp-0x28]
  0014f: 26 	cmp    DWORD PTR [rip+0xffffffffffff4165],0x26        # 0xffff42bb
  00156:    	jne    0x386e8
  0015c: 00 	mov    r9,0x0
  00163:    	sub    rsp,0x10
  00167:    	movq   QWORD PTR [rsp],xmm2
  0016c:    	mov    rdx,rdi
  0016f:    	mov    rax,QWORD PTR [rbx]
  00172:    	lea    rdi,[rsp-0x18]
  00177:    	mov    QWORD PTR [rdi],rax
  0017a:    	mov    QWORD PTR [rbx],rdi
  0017d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00186:    	mov    QWORD PTR [rsp-0x38],rcx
  0018b: ff 	lea    rcx,[rbp-0xa0]
  00192: 00 	mov    r8,0x0
  00199:    	call   0x38707
  0019e:    	lea    rdi,[rbp-0x8]
  001a2:    	mov    QWORD PTR [rbx],rdi
  001a5:    	movq   xmm2,QWORD PTR [rsp]
  001aa:    	add    rsp,0x10
  001ae: 00 	movabs r13,0x5600b92adcd0
  001b8:    	test   rax,rax
  001bb:    	je     0xffff1793
  001c1: ff 	mov    QWORD PTR [rbp-0x98],rax
:00009 
:00011 %3 = %13 * %14                       [Float][Float]
  001c8: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001cf: 00 	test   rdi,0x1
  001d6:    	jne    0x38739
  001dc: 00 	test   rdi,0x2
  001e3:    	je     0x21f
  001e9:    	xorps  xmm3,xmm3
  001ec: 00 	movabs rax,0x8000000000000002
  001f6:    	cmp    rdi,rax
  001f9:    	je     0x231
  001ff:    	mov    rax,rdi
  00202:    	sar    rax,0x3f
  00206:    	add    rax,0x2
  0020a:    	and    rdi,0xfffffffffffffffc
  0020e:    	or     rdi,rax
  00211:    	rol    rdi,0x3d
  00215:    	movq   xmm3,rdi
  0021a:    	jmp    0x231
  0021f:    	call   0xffff17cc
  00224:    	test   rax,rax
  00227:    	je     0x38739
  0022d:    	movq   xmm3,xmm0
  00231:    	movq   xmm4,xmm2
  00235:    	mulsd  xmm4,xmm3
:00012 %14 = const[Math]                    [Math]
  00239: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4088]        # 0xffff42c8
  00240: 00 	cmp    rax,QWORD PTR [rip+0x2181]        # 0x23c8
  00247:    	jne    0x38758
  0024d: 00 	mov    rax,QWORD PTR [rip+0x2164]        # 0x23b8
  00254: ff 	mov    QWORD PTR [rbp-0x98],rax
:00013 %15 = %3
:00014 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
  0025b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00262: 00 	test   rdi,0x7
  00269:    	jne    0x387bc
  0026f:    	cmp    DWORD PTR [rdi+0x4],0x21
  00273:    	jne    0x387bc
  00279: 26 	cmp    DWORD PTR [rip+0xffffffffffff403b],0x26        # 0xffff42bb
  00280:    	jne    0x387bc
  00286:    	sub    rsp,0x10
  0028a:    	movq   QWORD PTR [rsp],xmm2
  0028f:    	movq   QWORD PTR [rsp+0x8],xmm4
  00295:    	movq   xmm0,xmm4
  00299: 00 	movabs rax,0x5600b75a8970
  002a3:    	call   rax
  002a5:    	movq   xmm2,QWORD PTR [rsp]
  002aa:    	movq   xmm4,QWORD PTR [rsp+0x8]
  002b0:    	add    rsp,0x10
  002b4:    	movq   xmm2,xmm0
:00015 
:00017 %15 = const[Math]                    [Math]
  002b8: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4009]        # 0xffff42c8
  002bf: 00 	cmp    rax,QWORD PTR [rip+0x2122]        # 0x23e8
  002c6:    	jne    0x387df
  002cc: 00 	mov    rax,QWORD PTR [rip+0x2105]        # 0x23d8
  002d3: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00018 %16 = literal[1.0]
  002da: 00 	movq   xmm3,QWORD PTR [rip+0x2116]        # 0x23f8
  002e2: 00 	movabs rax,0xff80000000000002
  002ec: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00019 %16 = %16 - %2                       [Float][Float]
  002f3:    	mov    rdi,QWORD PTR [rbp-0x38]
  002f7: 00 	test   rdi,0x1
  002fe:    	jne    0x38843
  00304: 00 	test   rdi,0x2
  0030b:    	je     0x347
  00311:    	xorps  xmm5,xmm5
  00314: 00 	movabs rax,0x8000000000000002
  0031e:    	cmp    rdi,rax
  00321:    	je     0x359
  00327:    	mov    rax,rdi
  0032a:    	sar    rax,0x3f
  0032e:    	add    rax,0x2
  00332:    	and    rdi,0xfffffffffffffffc
  00336:    	or     rdi,rax
  00339:    	rol    rdi,0x3d
  0033d:    	movq   xmm5,rdi
  00342:    	jmp    0x359
  00347:    	call   0xffff17cc
  0034c:    	test   rax,rax
  0034f:    	je     0x38843
  00355:    	movq   xmm5,xmm0
  00359:    	subsd  xmm3,xmm5
:00020 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  0035d: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00364: 00 	test   rdi,0x7
  0036b:    	jne    0x3886f
  00371:    	cmp    DWORD PTR [rdi+0x4],0x21
  00375:    	jne    0x3886f
  0037b: 26 	cmp    DWORD PTR [rip+0xffffffffffff3f39],0x26        # 0xffff42bb
  00382:    	jne    0x3886f
  00388:    	sqrtsd xmm6,xmm3
:00021 
:00023 %4 = %13 * %14                       [Float][Float]
  0038c:    	movq   xmm7,xmm2
  00390:    	mulsd  xmm7,xmm6
:00024 %14 = const[Math]                    [Math]
  00394: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3f2d]        # 0xffff42c8
  0039b: 00 	cmp    rax,QWORD PTR [rip+0x2076]        # 0x2418
  003a2:    	jne    0x388ab
  003a8: 00 	mov    rax,QWORD PTR [rip+0x2059]        # 0x2408
  003af: ff 	mov    QWORD PTR [rbp-0x98],rax
:00025 %15 = %3
:00026 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
  003b6: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003bd: 00 	test   rdi,0x7
  003c4:    	jne    0x38933
  003ca:    	cmp    DWORD PTR [rdi+0x4],0x21
  003ce:    	jne    0x38933
  003d4: 26 	cmp    DWORD PTR [rip+0xffffffffffff3ee0],0x26        # 0xffff42bb
  003db:    	jne    0x38933
  003e1:    	sub    rsp,0x30
  003e5:    	movq   QWORD PTR [rsp],xmm2
  003ea:    	movq   QWORD PTR [rsp+0x8],xmm3
  003f0:    	movq   QWORD PTR [rsp+0x10],xmm4
  003f6:    	movq   QWORD PTR [rsp+0x18],xmm5
  003fc:    	movq   QWORD PTR [rsp+0x20],xmm7
  00402:    	movq   xmm0,xmm4
  00406: 00 	movabs rax,0x5600b75a8980
  00410:    	call   rax
  00412:    	movq   xmm2,QWORD PTR [rsp]
  00417:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0041d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00423:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00429:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0042f:    	add    rsp,0x30
  00433:    	movq   xmm2,xmm0
:00027 
:00029 %15 = const[Math]                    [Math]
  00437: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3e8a]        # 0xffff42c8
  0043e: 00 	cmp    rax,QWORD PTR [rip+0x1ff3]        # 0x2438
  00445:    	jne    0x38973
  0044b: 00 	mov    rax,QWORD PTR [rip+0x1fd6]        # 0x2428
  00452: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00030 %16 = literal[1.0]
  00459: 00 	movq   xmm3,QWORD PTR [rip+0x1fe7]        # 0x2448
  00461: 00 	movabs rax,0xff80000000000002
  0046b: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00031 %16 = %16 - %2                       [Float][Float]
  00472:    	subsd  xmm3,xmm5
:00032 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
  00476: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0047d: 00 	test   rdi,0x7
  00484:    	jne    0x389fb
  0048a:    	cmp    DWORD PTR [rdi+0x4],0x21
  0048e:    	jne    0x389fb
  00494: 26 	cmp    DWORD PTR [rip+0xffffffffffff3e20],0x26        # 0xffff42bb
  0049b:    	jne    0x389fb
  004a1:    	sqrtsd xmm6,xmm3
:00033 
:00035 %5 = %13 * %14                       [Float][Float]
  004a5:    	movq   xmm8,xmm2
  004aa:    	mulsd  xmm8,xmm6
:00036 %13 = const[Math]                    [Math]
  004af: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3e12]        # 0xffff42c8
  004b6: 00 	cmp    rax,QWORD PTR [rip+0x1fab]        # 0x2468
  004bd:    	jne    0x38a44
  004c3: 00 	mov    rax,QWORD PTR [rip+0x1f8e]        # 0x2458
  004ca: ff 	mov    QWORD PTR [rbp-0x90],rax
:00037 %14 = %2
:00038 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
  004d1: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  004d8: 00 	test   rdi,0x7
  004df:    	jne    0x38ada
  004e5:    	cmp    DWORD PTR [rdi+0x4],0x21
  004e9:    	jne    0x38ada
  004ef: 26 	cmp    DWORD PTR [rip+0xffffffffffff3dc5],0x26        # 0xffff42bb
  004f6:    	jne    0x38ada
  004fc:    	sqrtsd xmm2,xmm5
:00039 
:00041 %14 = dynvar(2, %2)
  00500:    	mov    rax,QWORD PTR [rbp-0x10]
  00504:    	mov    rax,QWORD PTR [rax]
  00507:    	mov    rax,QWORD PTR [rax-0x28]
  0050b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00042 %15 = 0: i32
  00512: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00043 %14 = %14.[%15]                      [Array][Integer]
  0051d:    	sub    rsp,0x30
  00521:    	movq   QWORD PTR [rsp],xmm2
  00526:    	movq   QWORD PTR [rsp+0x8],xmm3
  0052c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00532:    	movq   QWORD PTR [rsp+0x18],xmm5
  00538:    	movq   QWORD PTR [rsp+0x20],xmm7
  0053e: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00545: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  0054c: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00553:    	mov    rdi,rbx
  00556:    	mov    rsi,r12
  00559: 00 	movabs r8,0x5600b92adee8
  00563: 00 	movabs rax,0x5600b75c5240
  0056d:    	call   rax
  0056f:    	movq   xmm2,QWORD PTR [rsp]
  00574:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0057a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00580:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00586:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0058c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00593:    	add    rsp,0x30
  00597: 00 	movabs r13,0x5600b92adef0
  005a1:    	test   rax,rax
  005a4:    	je     0xffff1793
  005aa: ff 	mov    QWORD PTR [rbp-0x98],rax
:00044 %13 = %14.call x()                   [Vec]
  005b1: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  005b8: 00 	test   rdi,0x7
  005bf:    	jne    0x38b31
  005c5:    	cmp    DWORD PTR [rdi+0x4],0x28
  005c9:    	jne    0x38b31
  005cf: 26 	cmp    DWORD PTR [rip+0xffffffffffff3ce5],0x26        # 0xffff42bb
  005d6:    	jne    0x38b31
  005dc:    	mov    esi,DWORD PTR [rip+0x1e92]        # 0x2474
  005e2:    	cmp    esi,0xffffffff
  005e5:    	je     0x38b85
  005eb:    	cmp    WORD PTR [rdi+0x2],0x3
  005f0:    	jne    0x609
  005f6:    	cmp    esi,0x6
  005f9:    	jge    0x609
  005ff:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00604:    	jmp    0x665
  00609:    	sub    rsp,0x30
  0060d:    	movq   QWORD PTR [rsp],xmm2
  00612:    	movq   QWORD PTR [rsp+0x8],xmm3
  00618:    	movq   QWORD PTR [rsp+0x10],xmm4
  0061e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00624:    	movq   QWORD PTR [rsp+0x20],xmm7
  0062a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00631: 00 	movabs rax,0x5600b755dfe0
  0063b:    	call   rax
  0063d:    	movq   xmm2,QWORD PTR [rsp]
  00642:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00648:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0064e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00654:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0065a: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00661:    	add    rsp,0x30
  00665: ff 	mov    QWORD PTR [rbp-0x90],rax
:00045 
:00047 %13 = %4 * %13                       [Float][Float]
  0066c: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00673: 00 	test   rdi,0x1
  0067a:    	jne    0x38bfe
  00680: 00 	test   rdi,0x2
  00687:    	je     0x6c3
  0068d:    	xorps  xmm6,xmm6
  00690: 00 	movabs rax,0x8000000000000002
  0069a:    	cmp    rdi,rax
  0069d:    	je     0x6d5
  006a3:    	mov    rax,rdi
  006a6:    	sar    rax,0x3f
  006aa:    	add    rax,0x2
  006ae:    	and    rdi,0xfffffffffffffffc
  006b2:    	or     rdi,rax
  006b5:    	rol    rdi,0x3d
  006b9:    	movq   xmm6,rdi
  006be:    	jmp    0x6d5
  006c3:    	call   0xffff17cc
  006c8:    	test   rax,rax
  006cb:    	je     0x38bfe
  006d1:    	movq   xmm6,xmm0
  006d5:    	mulsd  xmm6,xmm7
:00048 %15 = dynvar(2, %2)
  006d9:    	mov    rax,QWORD PTR [rbp-0x10]
  006dd:    	mov    rax,QWORD PTR [rax]
  006e0:    	mov    rax,QWORD PTR [rax-0x28]
  006e4: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00049 %16 = 1: i32
  006eb: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00050 %15 = %15.[%16]                      [Array][Integer]
  006f6:    	sub    rsp,0x30
  006fa:    	movq   QWORD PTR [rsp],xmm2
  006ff:    	movq   QWORD PTR [rsp+0x8],xmm4
  00705:    	movq   QWORD PTR [rsp+0x10],xmm5
  0070b:    	movq   QWORD PTR [rsp+0x18],xmm6
  00711:    	movq   QWORD PTR [rsp+0x20],xmm7
  00717: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0071e: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00725: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0072c:    	mov    rdi,rbx
  0072f:    	mov    rsi,r12
  00732: 00 	movabs r8,0x5600b92adf58
  0073c: 00 	movabs rax,0x5600b75c5240
  00746:    	call   rax
  00748:    	movq   xmm2,QWORD PTR [rsp]
  0074d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00753:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00759:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0075f:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00765: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0076c:    	add    rsp,0x30
  00770: 00 	movabs r13,0x5600b92adf60
  0077a:    	test   rax,rax
  0077d:    	je     0xffff1793
  00783: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00051 %14 = %15.call x()                   [Vec]
  0078a: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00791: 00 	test   rdi,0x7
  00798:    	jne    0x38c52
  0079e:    	cmp    DWORD PTR [rdi+0x4],0x28
  007a2:    	jne    0x38c52
  007a8: 26 	cmp    DWORD PTR [rip+0xffffffffffff3b0c],0x26        # 0xffff42bb
  007af:    	jne    0x38c52
  007b5:    	mov    esi,DWORD PTR [rip+0x1cc1]        # 0x247c
  007bb:    	cmp    esi,0xffffffff
  007be:    	je     0x38ca6
  007c4:    	cmp    WORD PTR [rdi+0x2],0x3
  007c9:    	jne    0x7e2
  007cf:    	cmp    esi,0x6
  007d2:    	jge    0x7e2
  007d8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007dd:    	jmp    0x83e
  007e2:    	sub    rsp,0x30
  007e6:    	movq   QWORD PTR [rsp],xmm2
  007eb:    	movq   QWORD PTR [rsp+0x8],xmm4
  007f1:    	movq   QWORD PTR [rsp+0x10],xmm5
  007f7:    	movq   QWORD PTR [rsp+0x18],xmm6
  007fd:    	movq   QWORD PTR [rsp+0x20],xmm7
  00803: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0080a: 00 	movabs rax,0x5600b755dfe0
  00814:    	call   rax
  00816:    	movq   xmm2,QWORD PTR [rsp]
  0081b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00821:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00827:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0082d:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00833: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0083a:    	add    rsp,0x30
  0083e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00052 
:00054 %14 = %5 * %14                       [Float][Float]
  00845: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0084c: 00 	test   rdi,0x1
  00853:    	jne    0x38d1f
  00859: 00 	test   rdi,0x2
  00860:    	je     0x89c
  00866:    	xorps  xmm3,xmm3
  00869: 00 	movabs rax,0x8000000000000002
  00873:    	cmp    rdi,rax
  00876:    	je     0x8ae
  0087c:    	mov    rax,rdi
  0087f:    	sar    rax,0x3f
  00883:    	add    rax,0x2
  00887:    	and    rdi,0xfffffffffffffffc
  0088b:    	or     rdi,rax
  0088e:    	rol    rdi,0x3d
  00892:    	movq   xmm3,rdi
  00897:    	jmp    0x8ae
  0089c:    	call   0xffff17cc
  008a1:    	test   rax,rax
  008a4:    	je     0x38d1f
  008aa:    	movq   xmm3,xmm0
  008ae:    	mulsd  xmm3,xmm8
:00055 %13 = %13 + %14                      [Float][Float]
  008b3:    	addsd  xmm6,xmm3
:00056 %15 = dynvar(2, %2)
  008b7:    	mov    rax,QWORD PTR [rbp-0x10]
  008bb:    	mov    rax,QWORD PTR [rax]
  008be:    	mov    rax,QWORD PTR [rax-0x28]
  008c2: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00057 %16 = 2: i32
  008c9: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00058 %15 = %15.[%16]                      [Array][Integer]
  008d4:    	sub    rsp,0x40
  008d8:    	movq   QWORD PTR [rsp],xmm2
  008dd:    	movq   QWORD PTR [rsp+0x8],xmm3
  008e3:    	movq   QWORD PTR [rsp+0x10],xmm4
  008e9:    	movq   QWORD PTR [rsp+0x18],xmm5
  008ef:    	movq   QWORD PTR [rsp+0x20],xmm6
  008f5:    	movq   QWORD PTR [rsp+0x28],xmm7
  008fb: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00902: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00909: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00910:    	mov    rdi,rbx
  00913:    	mov    rsi,r12
  00916: 00 	movabs r8,0x5600b92adfd8
  00920: 00 	movabs rax,0x5600b75c5240
  0092a:    	call   rax
  0092c:    	movq   xmm2,QWORD PTR [rsp]
  00931:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00937:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0093d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00943:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00949:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0094f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00956:    	add    rsp,0x40
  0095a: 00 	movabs r13,0x5600b92adfe0
  00964:    	test   rax,rax
  00967:    	je     0xffff1793
  0096d: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00059 %14 = %15.call x()                   [Vec]
  00974: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0097b: 00 	test   rdi,0x7
  00982:    	jne    0x38d73
  00988:    	cmp    DWORD PTR [rdi+0x4],0x28
  0098c:    	jne    0x38d73
  00992: 26 	cmp    DWORD PTR [rip+0xffffffffffff3922],0x26        # 0xffff42bb
  00999:    	jne    0x38d73
  0099f:    	mov    esi,DWORD PTR [rip+0x1adf]        # 0x2484
  009a5:    	cmp    esi,0xffffffff
  009a8:    	je     0x38dc7
  009ae:    	cmp    WORD PTR [rdi+0x2],0x3
  009b3:    	jne    0x9cc
  009b9:    	cmp    esi,0x6
  009bc:    	jge    0x9cc
  009c2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009c7:    	jmp    0xa28
  009cc:    	sub    rsp,0x30
  009d0:    	movq   QWORD PTR [rsp],xmm2
  009d5:    	movq   QWORD PTR [rsp+0x8],xmm4
  009db:    	movq   QWORD PTR [rsp+0x10],xmm5
  009e1:    	movq   QWORD PTR [rsp+0x18],xmm6
  009e7:    	movq   QWORD PTR [rsp+0x20],xmm7
  009ed: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  009f4: 00 	movabs rax,0x5600b755dfe0
  009fe:    	call   rax
  00a00:    	movq   xmm2,QWORD PTR [rsp]
  00a05:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a0b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a11:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a17:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00a1d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00a24:    	add    rsp,0x30
  00a28: ff 	mov    QWORD PTR [rbp-0x98],rax
:00060 
:00062 %14 = %6 * %14                       [Float][Float]
  00a2f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a36: 00 	test   rdi,0x1
  00a3d:    	jne    0x38e40
  00a43: 00 	test   rdi,0x2
  00a4a:    	je     0xa86
  00a50:    	xorps  xmm3,xmm3
  00a53: 00 	movabs rax,0x8000000000000002
  00a5d:    	cmp    rdi,rax
  00a60:    	je     0xa98
  00a66:    	mov    rax,rdi
  00a69:    	sar    rax,0x3f
  00a6d:    	add    rax,0x2
  00a71:    	and    rdi,0xfffffffffffffffc
  00a75:    	or     rdi,rax
  00a78:    	rol    rdi,0x3d
  00a7c:    	movq   xmm3,rdi
  00a81:    	jmp    0xa98
  00a86:    	call   0xffff17cc
  00a8b:    	test   rax,rax
  00a8e:    	je     0x38e40
  00a94:    	movq   xmm3,xmm0
  00a98:    	mulsd  xmm3,xmm2
:00063 %7 = %13 + %14                       [Float][Float]
  00a9c:    	movq   xmm9,xmm6
  00aa1:    	addsd  xmm9,xmm3
:00064 %14 = dynvar(2, %2)
  00aa6:    	mov    rax,QWORD PTR [rbp-0x10]
  00aaa:    	mov    rax,QWORD PTR [rax]
  00aad:    	mov    rax,QWORD PTR [rax-0x28]
  00ab1: ff 	mov    QWORD PTR [rbp-0x98],rax
:00065 %15 = 0: i32
  00ab8: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00066 %14 = %14.[%15]                      [Array][Integer]
  00ac3:    	sub    rsp,0x40
  00ac7:    	movq   QWORD PTR [rsp],xmm2
  00acc:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ad2:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ad8:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ade:    	movq   QWORD PTR [rsp+0x20],xmm7
  00ae4: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00aeb: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00af2: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00af9: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00b00:    	mov    rdi,rbx
  00b03:    	mov    rsi,r12
  00b06: 00 	movabs r8,0x5600b92ae058
  00b10: 00 	movabs rax,0x5600b75c5240
  00b1a:    	call   rax
  00b1c:    	movq   xmm2,QWORD PTR [rsp]
  00b21:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b27:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b2d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b33:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00b39: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00b40: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00b47:    	add    rsp,0x40
  00b4b: 00 	movabs r13,0x5600b92ae060
  00b55:    	test   rax,rax
  00b58:    	je     0xffff1793
  00b5e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00067 %13 = %14.call y()                   [Vec]
  00b65: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00b6c: 00 	test   rdi,0x7
  00b73:    	jne    0x38e94
  00b79:    	cmp    DWORD PTR [rdi+0x4],0x28
  00b7d:    	jne    0x38e94
  00b83: 26 	cmp    DWORD PTR [rip+0xffffffffffff3731],0x26        # 0xffff42bb
  00b8a:    	jne    0x38e94
  00b90:    	mov    esi,DWORD PTR [rip+0x18f6]        # 0x248c
  00b96:    	cmp    esi,0xffffffff
  00b99:    	je     0x38ee6
  00b9f:    	cmp    WORD PTR [rdi+0x2],0x3
  00ba4:    	jne    0xbbd
  00baa:    	cmp    esi,0x6
  00bad:    	jge    0xbbd
  00bb3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00bb8:    	jmp    0xc1b
  00bbd:    	sub    rsp,0x30
  00bc1:    	movq   QWORD PTR [rsp],xmm2
  00bc6:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bcc:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bd2:    	movq   QWORD PTR [rsp+0x18],xmm7
  00bd8: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00bdf: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00be6: 00 	movabs rax,0x5600b755dfe0
  00bf0:    	call   rax
  00bf2:    	movq   xmm2,QWORD PTR [rsp]
  00bf7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bfd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c03:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c09: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00c10: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00c17:    	add    rsp,0x30
  00c1b: ff 	mov    QWORD PTR [rbp-0x90],rax
:00068 
:00070 %13 = %4 * %13                       [Float][Float]
  00c22: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00c29: 00 	test   rdi,0x1
  00c30:    	jne    0x38f61
  00c36: 00 	test   rdi,0x2
  00c3d:    	je     0xc79
  00c43:    	xorps  xmm3,xmm3
  00c46: 00 	movabs rax,0x8000000000000002
  00c50:    	cmp    rdi,rax
  00c53:    	je     0xc8b
  00c59:    	mov    rax,rdi
  00c5c:    	sar    rax,0x3f
  00c60:    	add    rax,0x2
  00c64:    	and    rdi,0xfffffffffffffffc
  00c68:    	or     rdi,rax
  00c6b:    	rol    rdi,0x3d
  00c6f:    	movq   xmm3,rdi
  00c74:    	jmp    0xc8b
  00c79:    	call   0xffff17cc
  00c7e:    	test   rax,rax
  00c81:    	je     0x38f61
  00c87:    	movq   xmm3,xmm0
  00c8b:    	mulsd  xmm3,xmm7
:00071 %15 = dynvar(2, %2)
  00c8f:    	mov    rax,QWORD PTR [rbp-0x10]
  00c93:    	mov    rax,QWORD PTR [rax]
  00c96:    	mov    rax,QWORD PTR [rax-0x28]
  00c9a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00072 %16 = 1: i32
  00ca1: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00073 %15 = %15.[%16]                      [Array][Integer]
  00cac:    	sub    rsp,0x40
  00cb0:    	movq   QWORD PTR [rsp],xmm2
  00cb5:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cbb:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cc1:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cc7:    	movq   QWORD PTR [rsp+0x20],xmm7
  00ccd: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00cd4: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00cdb: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00ce2: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00ce9:    	mov    rdi,rbx
  00cec:    	mov    rsi,r12
  00cef: 00 	movabs r8,0x5600b92ae0c8
  00cf9: 00 	movabs rax,0x5600b75c5240
  00d03:    	call   rax
  00d05:    	movq   xmm2,QWORD PTR [rsp]
  00d0a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d10:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d16:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d1c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d22: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00d29: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00d30:    	add    rsp,0x40
  00d34: 00 	movabs r13,0x5600b92ae0d0
  00d3e:    	test   rax,rax
  00d41:    	je     0xffff1793
  00d47: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00074 %14 = %15.call y()                   [Vec]
  00d4e: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00d55: 00 	test   rdi,0x7
  00d5c:    	jne    0x38fb3
  00d62:    	cmp    DWORD PTR [rdi+0x4],0x28
  00d66:    	jne    0x38fb3
  00d6c: 26 	cmp    DWORD PTR [rip+0xffffffffffff3548],0x26        # 0xffff42bb
  00d73:    	jne    0x38fb3
  00d79:    	mov    esi,DWORD PTR [rip+0x1715]        # 0x2494
  00d7f:    	cmp    esi,0xffffffff
  00d82:    	je     0x39015
  00d88:    	cmp    WORD PTR [rdi+0x2],0x3
  00d8d:    	jne    0xda6
  00d93:    	cmp    esi,0x6
  00d96:    	jge    0xda6
  00d9c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00da1:    	jmp    0xe10
  00da6:    	sub    rsp,0x40
  00daa:    	movq   QWORD PTR [rsp],xmm2
  00daf:    	movq   QWORD PTR [rsp+0x8],xmm3
  00db5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00dbb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dc1:    	movq   QWORD PTR [rsp+0x20],xmm7
  00dc7: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00dce: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00dd5: 00 	movabs rax,0x5600b755dfe0
  00ddf:    	call   rax
  00de1:    	movq   xmm2,QWORD PTR [rsp]
  00de6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00dec:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00df2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00df8:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00dfe: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00e05: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00e0c:    	add    rsp,0x40
  00e10: ff 	mov    QWORD PTR [rbp-0x98],rax
:00075 
:00077 %14 = %5 * %14                       [Float][Float]
  00e17: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e1e: 00 	test   rdi,0x1
  00e25:    	jne    0x3909c
  00e2b: 00 	test   rdi,0x2
  00e32:    	je     0xe6e
  00e38:    	xorps  xmm6,xmm6
  00e3b: 00 	movabs rax,0x8000000000000002
  00e45:    	cmp    rdi,rax
  00e48:    	je     0xe80
  00e4e:    	mov    rax,rdi
  00e51:    	sar    rax,0x3f
  00e55:    	add    rax,0x2
  00e59:    	and    rdi,0xfffffffffffffffc
  00e5d:    	or     rdi,rax
  00e60:    	rol    rdi,0x3d
  00e64:    	movq   xmm6,rdi
  00e69:    	jmp    0xe80
  00e6e:    	call   0xffff17cc
  00e73:    	test   rax,rax
  00e76:    	je     0x3909c
  00e7c:    	movq   xmm6,xmm0
  00e80:    	mulsd  xmm6,xmm8
:00078 %13 = %13 + %14                      [Float][Float]
  00e85:    	addsd  xmm3,xmm6
:00079 %15 = dynvar(2, %2)
  00e89:    	mov    rax,QWORD PTR [rbp-0x10]
  00e8d:    	mov    rax,QWORD PTR [rax]
  00e90:    	mov    rax,QWORD PTR [rax-0x28]
  00e94: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00080 %16 = 2: i32
  00e9b: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00081 %15 = %15.[%16]                      [Array][Integer]
  00ea6:    	sub    rsp,0x40
  00eaa:    	movq   QWORD PTR [rsp],xmm2
  00eaf:    	movq   QWORD PTR [rsp+0x8],xmm3
  00eb5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ebb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ec1:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ec7:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ecd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00ed4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00edb: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00ee2: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00ee9:    	mov    rdi,rbx
  00eec:    	mov    rsi,r12
  00eef: 00 	movabs r8,0x5600b92ae148
  00ef9: 00 	movabs rax,0x5600b75c5240
  00f03:    	call   rax
  00f05:    	movq   xmm2,QWORD PTR [rsp]
  00f0a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f10:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f16:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f1c:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f22:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f28: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00f2f: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00f36:    	add    rsp,0x40
  00f3a: 00 	movabs r13,0x5600b92ae150
  00f44:    	test   rax,rax
  00f47:    	je     0xffff1793
  00f4d: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00082 %14 = %15.call y()                   [Vec]
  00f54: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00f5b: 00 	test   rdi,0x7
  00f62:    	jne    0x390fe
  00f68:    	cmp    DWORD PTR [rdi+0x4],0x28
  00f6c:    	jne    0x390fe
  00f72: 26 	cmp    DWORD PTR [rip+0xffffffffffff3342],0x26        # 0xffff42bb
  00f79:    	jne    0x390fe
  00f7f:    	mov    esi,DWORD PTR [rip+0x1517]        # 0x249c
  00f85:    	cmp    esi,0xffffffff
  00f88:    	je     0x39160
  00f8e:    	cmp    WORD PTR [rdi+0x2],0x3
  00f93:    	jne    0xfac
  00f99:    	cmp    esi,0x6
  00f9c:    	jge    0xfac
  00fa2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fa7:    	jmp    0x1016
  00fac:    	sub    rsp,0x40
  00fb0:    	movq   QWORD PTR [rsp],xmm2
  00fb5:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fbb:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fc1:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fc7:    	movq   QWORD PTR [rsp+0x20],xmm7
  00fcd: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00fd4: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00fdb: 00 	movabs rax,0x5600b755dfe0
  00fe5:    	call   rax
  00fe7:    	movq   xmm2,QWORD PTR [rsp]
  00fec:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ff2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ff8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ffe:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01004: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0100b: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01012:    	add    rsp,0x40
  01016: ff 	mov    QWORD PTR [rbp-0x98],rax
:00083 
:00085 %14 = %6 * %14                       [Float][Float]
  0101d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01024: 00 	test   rdi,0x1
  0102b:    	jne    0x391e7
  01031: 00 	test   rdi,0x2
  01038:    	je     0x1074
  0103e:    	xorps  xmm6,xmm6
  01041: 00 	movabs rax,0x8000000000000002
  0104b:    	cmp    rdi,rax
  0104e:    	je     0x1086
  01054:    	mov    rax,rdi
  01057:    	sar    rax,0x3f
  0105b:    	add    rax,0x2
  0105f:    	and    rdi,0xfffffffffffffffc
  01063:    	or     rdi,rax
  01066:    	rol    rdi,0x3d
  0106a:    	movq   xmm6,rdi
  0106f:    	jmp    0x1086
  01074:    	call   0xffff17cc
  01079:    	test   rax,rax
  0107c:    	je     0x391e7
  01082:    	movq   xmm6,xmm0
  01086:    	mulsd  xmm6,xmm2
:00086 %8 = %13 + %14                       [Float][Float]
  0108a:    	movq   xmm10,xmm3
  0108f:    	addsd  xmm10,xmm6
:00087 %14 = dynvar(2, %2)
  01094:    	mov    rax,QWORD PTR [rbp-0x10]
  01098:    	mov    rax,QWORD PTR [rax]
  0109b:    	mov    rax,QWORD PTR [rax-0x28]
  0109f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00088 %15 = 0: i32
  010a6: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00089 %14 = %14.[%15]                      [Array][Integer]
  010b1:    	sub    rsp,0x40
  010b5:    	movq   QWORD PTR [rsp],xmm2
  010ba:    	movq   QWORD PTR [rsp+0x8],xmm3
  010c0:    	movq   QWORD PTR [rsp+0x10],xmm4
  010c6:    	movq   QWORD PTR [rsp+0x18],xmm5
  010cc:    	movq   QWORD PTR [rsp+0x20],xmm7
  010d2: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  010d9: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  010e0: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  010e7: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  010ee: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  010f5:    	mov    rdi,rbx
  010f8:    	mov    rsi,r12
  010fb: 00 	movabs r8,0x5600b92ae1c8
  01105: 00 	movabs rax,0x5600b75c5240
  0110f:    	call   rax
  01111:    	movq   xmm2,QWORD PTR [rsp]
  01116:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0111c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01122:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01128:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0112e: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01135: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0113c: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01143:    	add    rsp,0x40
  01147: 00 	movabs r13,0x5600b92ae1d0
  01151:    	test   rax,rax
  01154:    	je     0xffff1793
  0115a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %13 = %14.call z()                   [Vec]
  01161: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01168: 00 	test   rdi,0x7
  0116f:    	jne    0x39249
  01175:    	cmp    DWORD PTR [rdi+0x4],0x28
  01179:    	jne    0x39249
  0117f: 26 	cmp    DWORD PTR [rip+0xffffffffffff3135],0x26        # 0xffff42bb
  01186:    	jne    0x39249
  0118c:    	mov    esi,DWORD PTR [rip+0x1312]        # 0x24a4
  01192:    	cmp    esi,0xffffffff
  01195:    	je     0x392a9
  0119b:    	cmp    WORD PTR [rdi+0x2],0x3
  011a0:    	jne    0x11b9
  011a6:    	cmp    esi,0x6
  011a9:    	jge    0x11b9
  011af:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011b4:    	jmp    0x1225
  011b9:    	sub    rsp,0x40
  011bd:    	movq   QWORD PTR [rsp],xmm2
  011c2:    	movq   QWORD PTR [rsp+0x8],xmm4
  011c8:    	movq   QWORD PTR [rsp+0x10],xmm5
  011ce:    	movq   QWORD PTR [rsp+0x18],xmm7
  011d4: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  011db: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  011e2: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  011e9: 00 	movabs rax,0x5600b755dfe0
  011f3:    	call   rax
  011f5:    	movq   xmm2,QWORD PTR [rsp]
  011fa:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01200:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01206:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0120c: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01213: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0121a: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01221:    	add    rsp,0x40
  01225: ff 	mov    QWORD PTR [rbp-0x90],rax
:00091 
:00093 %13 = %4 * %13                       [Float][Float]
  0122c: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01233: 00 	test   rdi,0x1
  0123a:    	jne    0x39332
  01240: 00 	test   rdi,0x2
  01247:    	je     0x1283
  0124d:    	xorps  xmm3,xmm3
  01250: 00 	movabs rax,0x8000000000000002
  0125a:    	cmp    rdi,rax
  0125d:    	je     0x1295
  01263:    	mov    rax,rdi
  01266:    	sar    rax,0x3f
  0126a:    	add    rax,0x2
  0126e:    	and    rdi,0xfffffffffffffffc
  01272:    	or     rdi,rax
  01275:    	rol    rdi,0x3d
  01279:    	movq   xmm3,rdi
  0127e:    	jmp    0x1295
  01283:    	call   0xffff17cc
  01288:    	test   rax,rax
  0128b:    	je     0x39332
  01291:    	movq   xmm3,xmm0
  01295:    	mulsd  xmm3,xmm7
:00094 %15 = dynvar(2, %2)
  01299:    	mov    rax,QWORD PTR [rbp-0x10]
  0129d:    	mov    rax,QWORD PTR [rax]
  012a0:    	mov    rax,QWORD PTR [rax-0x28]
  012a4: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00095 %16 = 1: i32
  012ab: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00096 %15 = %15.[%16]                      [Array][Integer]
  012b6:    	sub    rsp,0x40
  012ba:    	movq   QWORD PTR [rsp],xmm2
  012bf:    	movq   QWORD PTR [rsp+0x8],xmm3
  012c5:    	movq   QWORD PTR [rsp+0x10],xmm4
  012cb:    	movq   QWORD PTR [rsp+0x18],xmm5
  012d1:    	movq   QWORD PTR [rsp+0x20],xmm7
  012d7: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  012de: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  012e5: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  012ec: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  012f3: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  012fa:    	mov    rdi,rbx
  012fd:    	mov    rsi,r12
  01300: 00 	movabs r8,0x5600b92ae238
  0130a: 00 	movabs rax,0x5600b75c5240
  01314:    	call   rax
  01316:    	movq   xmm2,QWORD PTR [rsp]
  0131b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01321:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01327:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0132d:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01333: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0133a: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01341: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01348:    	add    rsp,0x40
  0134c: 00 	movabs r13,0x5600b92ae240
  01356:    	test   rax,rax
  01359:    	je     0xffff1793
  0135f: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00097 %14 = %15.call z()                   [Vec]
  01366: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0136d: 00 	test   rdi,0x7
  01374:    	jne    0x39392
  0137a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0137e:    	jne    0x39392
  01384: 26 	cmp    DWORD PTR [rip+0xffffffffffff2f30],0x26        # 0xffff42bb
  0138b:    	jne    0x39392
  01391:    	mov    esi,DWORD PTR [rip+0x1115]        # 0x24ac
  01397:    	cmp    esi,0xffffffff
  0139a:    	je     0x39402
  013a0:    	cmp    WORD PTR [rdi+0x2],0x3
  013a5:    	jne    0x13be
  013ab:    	cmp    esi,0x6
  013ae:    	jge    0x13be
  013b4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013b9:    	jmp    0x1436
  013be:    	sub    rsp,0x40
  013c2:    	movq   QWORD PTR [rsp],xmm2
  013c7:    	movq   QWORD PTR [rsp+0x8],xmm3
  013cd:    	movq   QWORD PTR [rsp+0x10],xmm4
  013d3:    	movq   QWORD PTR [rsp+0x18],xmm5
  013d9:    	movq   QWORD PTR [rsp+0x20],xmm7
  013df: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  013e6: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  013ed: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  013f4: 00 	movabs rax,0x5600b755dfe0
  013fe:    	call   rax
  01400:    	movq   xmm2,QWORD PTR [rsp]
  01405:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0140b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01411:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01417:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0141d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01424: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0142b: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01432:    	add    rsp,0x40
  01436: ff 	mov    QWORD PTR [rbp-0x98],rax
:00098 
:00100 %14 = %5 * %14                       [Float][Float]
  0143d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01444: 00 	test   rdi,0x1
  0144b:    	jne    0x39497
  01451: 00 	test   rdi,0x2
  01458:    	je     0x1494
  0145e:    	xorps  xmm6,xmm6
  01461: 00 	movabs rax,0x8000000000000002
  0146b:    	cmp    rdi,rax
  0146e:    	je     0x14a6
  01474:    	mov    rax,rdi
  01477:    	sar    rax,0x3f
  0147b:    	add    rax,0x2
  0147f:    	and    rdi,0xfffffffffffffffc
  01483:    	or     rdi,rax
  01486:    	rol    rdi,0x3d
  0148a:    	movq   xmm6,rdi
  0148f:    	jmp    0x14a6
  01494:    	call   0xffff17cc
  01499:    	test   rax,rax
  0149c:    	je     0x39497
  014a2:    	movq   xmm6,xmm0
  014a6:    	mulsd  xmm6,xmm8
:00101 %13 = %13 + %14                      [Float][Float]
  014ab:    	addsd  xmm3,xmm6
:00102 %15 = dynvar(2, %2)
  014af:    	mov    rax,QWORD PTR [rbp-0x10]
  014b3:    	mov    rax,QWORD PTR [rax]
  014b6:    	mov    rax,QWORD PTR [rax-0x28]
  014ba: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00103 %16 = 2: i32
  014c1: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00104 %15 = %15.[%16]                      [Array][Integer]
  014cc:    	sub    rsp,0x50
  014d0:    	movq   QWORD PTR [rsp],xmm2
  014d5:    	movq   QWORD PTR [rsp+0x8],xmm3
  014db:    	movq   QWORD PTR [rsp+0x10],xmm4
  014e1:    	movq   QWORD PTR [rsp+0x18],xmm5
  014e7:    	movq   QWORD PTR [rsp+0x20],xmm6
  014ed:    	movq   QWORD PTR [rsp+0x28],xmm7
  014f3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014fa: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01501: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01508: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  0150f: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  01516:    	mov    rdi,rbx
  01519:    	mov    rsi,r12
  0151c: 00 	movabs r8,0x5600b92ae2b8
  01526: 00 	movabs rax,0x5600b75c5240
  01530:    	call   rax
  01532:    	movq   xmm2,QWORD PTR [rsp]
  01537:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0153d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01543:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01549:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0154f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01555: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0155c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01563: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0156a:    	add    rsp,0x50
  0156e: 00 	movabs r13,0x5600b92ae2c0
  01578:    	test   rax,rax
  0157b:    	je     0xffff1793
  01581: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00105 %14 = %15.call z()                   [Vec]
  01588: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0158f: 00 	test   rdi,0x7
  01596:    	jne    0x39507
  0159c:    	cmp    DWORD PTR [rdi+0x4],0x28
  015a0:    	jne    0x39507
  015a6: 26 	cmp    DWORD PTR [rip+0xffffffffffff2d0e],0x26        # 0xffff42bb
  015ad:    	jne    0x39507
  015b3:    	mov    esi,DWORD PTR [rip+0xefb]        # 0x24b4
  015b9:    	cmp    esi,0xffffffff
  015bc:    	je     0x39577
  015c2:    	cmp    WORD PTR [rdi+0x2],0x3
  015c7:    	jne    0x15e0
  015cd:    	cmp    esi,0x6
  015d0:    	jge    0x15e0
  015d6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  015db:    	jmp    0x1658
  015e0:    	sub    rsp,0x40
  015e4:    	movq   QWORD PTR [rsp],xmm2
  015e9:    	movq   QWORD PTR [rsp+0x8],xmm3
  015ef:    	movq   QWORD PTR [rsp+0x10],xmm4
  015f5:    	movq   QWORD PTR [rsp+0x18],xmm5
  015fb:    	movq   QWORD PTR [rsp+0x20],xmm7
  01601: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01608: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0160f: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01616: 00 	movabs rax,0x5600b755dfe0
  01620:    	call   rax
  01622:    	movq   xmm2,QWORD PTR [rsp]
  01627:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0162d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01633:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01639:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0163f: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01646: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0164d: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01654:    	add    rsp,0x40
  01658: ff 	mov    QWORD PTR [rbp-0x98],rax
:00106 
:00108 %14 = %6 * %14                       [Float][Float]
  0165f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01666: 00 	test   rdi,0x1
  0166d:    	jne    0x3960c
  01673: 00 	test   rdi,0x2
  0167a:    	je     0x16b6
  01680:    	xorps  xmm6,xmm6
  01683: 00 	movabs rax,0x8000000000000002
  0168d:    	cmp    rdi,rax
  01690:    	je     0x16c8
  01696:    	mov    rax,rdi
  01699:    	sar    rax,0x3f
  0169d:    	add    rax,0x2
  016a1:    	and    rdi,0xfffffffffffffffc
  016a5:    	or     rdi,rax
  016a8:    	rol    rdi,0x3d
  016ac:    	movq   xmm6,rdi
  016b1:    	jmp    0x16c8
  016b6:    	call   0xffff17cc
  016bb:    	test   rax,rax
  016be:    	je     0x3960c
  016c4:    	movq   xmm6,xmm0
  016c8:    	mulsd  xmm6,xmm2
:00109 %9 = %13 + %14                       [Float][Float]
  016cc:    	movq   xmm11,xmm3
  016d1:    	addsd  xmm11,xmm6
:00110 %13 = const[Vec]                     [Vec]
  016d6: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2beb]        # 0xffff42c8
  016dd: 00 	cmp    rax,QWORD PTR [rip+0xde4]        # 0x24c8
  016e4:    	jne    0x3967c
  016ea: 00 	mov    rax,QWORD PTR [rip+0xdc7]        # 0x24b8
  016f1: ff 	mov    QWORD PTR [rbp-0x90],rax
:00111 %14 = %7
:00112 %15 = %8
:00113 %16 = %9
:00114 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
  016f8:    	movq   xmm0,xmm9
  016fd:    	call   0xffff18bf
  01702: ff 	mov    QWORD PTR [rbp-0x98],rax
  01709:    	movq   xmm0,xmm10
  0170e:    	call   0xffff18bf
  01713: ff 	mov    QWORD PTR [rbp-0xa0],rax
  0171a:    	movq   xmm0,xmm11
  0171f:    	call   0xffff18bf
  01724: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0172b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01732: 00 	test   rdi,0x7
  01739:    	jne    0x3973c
  0173f:    	cmp    DWORD PTR [rdi+0x4],0x29
  01743:    	jne    0x3973c
  01749: 26 	cmp    DWORD PTR [rip+0xffffffffffff2b6b],0x26        # 0xffff42bb
  01750:    	jne    0x3973c
  01756: 00 	mov    r9,0x0
  0175d:    	sub    rsp,0x40
  01761:    	movq   QWORD PTR [rsp],xmm2
  01766:    	movq   QWORD PTR [rsp+0x8],xmm4
  0176c:    	movq   QWORD PTR [rsp+0x10],xmm5
  01772:    	movq   QWORD PTR [rsp+0x18],xmm7
  01778: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0177f: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01786: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0178d: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01794:    	mov    rdx,rdi
  01797:    	mov    rax,QWORD PTR [rbx]
  0179a:    	lea    rdi,[rsp-0x18]
  0179f:    	mov    QWORD PTR [rdi],rax
  017a2:    	mov    QWORD PTR [rbx],rdi
  017a5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017ae:    	mov    QWORD PTR [rsp-0x38],rcx
  017b3: ff 	lea    rcx,[rbp-0x98]
  017ba: 00 	mov    r8,0x3
  017c1:    	call   0x397aa
  017c6:    	lea    rdi,[rbp-0x8]
  017ca:    	mov    QWORD PTR [rbx],rdi
  017cd:    	movq   xmm2,QWORD PTR [rsp]
  017d2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017d8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017de:    	movq   xmm7,QWORD PTR [rsp+0x18]
  017e4: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  017eb: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  017f2: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  017f9: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01800:    	add    rsp,0x40
  01804: 00 	movabs r13,0x5600b92ae370
  0180e:    	test   rax,rax
  01811:    	je     0xffff1793
  01817:    	mov    QWORD PTR [rbp-0x78],rax
:00115 
:00117 %13 = const[Ray]                     [Ray]
  0181b: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2aa6]        # 0xffff42c8
  01822: 00 	cmp    rax,QWORD PTR [rip+0xcbf]        # 0x24e8
  01829:    	jne    0x397dc
  0182f: 00 	mov    rax,QWORD PTR [rip+0xca2]        # 0x24d8
  01836: ff 	mov    QWORD PTR [rbp-0x90],rax
:00118 %14 = dynvar(2, %7)
  0183d:    	mov    rax,QWORD PTR [rbp-0x10]
  01841:    	mov    rax,QWORD PTR [rax]
  01844:    	mov    rax,QWORD PTR [rax-0x50]
  01848: ff 	mov    QWORD PTR [rbp-0x98],rax
:00119 %15 = %10
  0184f:    	mov    rax,QWORD PTR [rbp-0x78]
  01853: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00120 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
  0185a: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01861: 00 	test   rdi,0x7
  01868:    	jne    0x39890
  0186e:    	cmp    DWORD PTR [rdi+0x4],0x2f
  01872:    	jne    0x39890
  01878: 26 	cmp    DWORD PTR [rip+0xffffffffffff2a3c],0x26        # 0xffff42bb
  0187f:    	jne    0x39890
  01885: 00 	mov    r9,0x0
  0188c:    	sub    rsp,0x40
  01890:    	movq   QWORD PTR [rsp],xmm2
  01895:    	movq   QWORD PTR [rsp+0x8],xmm4
  0189b:    	movq   QWORD PTR [rsp+0x10],xmm5
  018a1:    	movq   QWORD PTR [rsp+0x18],xmm7
  018a7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  018ae: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  018b5: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  018bc: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  018c3:    	mov    rdx,rdi
  018c6:    	mov    rax,QWORD PTR [rbx]
  018c9:    	lea    rdi,[rsp-0x18]
  018ce:    	mov    QWORD PTR [rdi],rax
  018d1:    	mov    QWORD PTR [rbx],rdi
  018d4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  018dd:    	mov    QWORD PTR [rsp-0x38],rcx
  018e2: ff 	lea    rcx,[rbp-0x98]
  018e9: 00 	mov    r8,0x2
  018f0:    	call   0x398fe
  018f5:    	lea    rdi,[rbp-0x8]
  018f9:    	mov    QWORD PTR [rbx],rdi
  018fc:    	movq   xmm2,QWORD PTR [rsp]
  01901:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01907:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0190d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01913: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0191a: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01921: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01928: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0192f:    	add    rsp,0x40
  01933: 00 	movabs r13,0x5600b92ae3d0
  0193d:    	test   rax,rax
  01940:    	je     0xffff1793
  01946:    	mov    QWORD PTR [rbp-0x80],rax
:00121 
:00123 %13 = const[Isect]                   [Isect]
  0194a: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2977]        # 0xffff42c8
  01951: 00 	cmp    rax,QWORD PTR [rip+0xbb0]        # 0x2508
  01958:    	jne    0x39930
  0195e: 00 	mov    rax,QWORD PTR [rip+0xb93]        # 0x24f8
  01965: ff 	mov    QWORD PTR [rbp-0x90],rax
:00124 %12 = %13.call new()                 [#<Class:Isect>]
  0196c: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01973: 00 	test   rdi,0x7
  0197a:    	jne    0x399e4
  01980:    	cmp    DWORD PTR [rdi+0x4],0x31
  01984:    	jne    0x399e4
  0198a: 26 	cmp    DWORD PTR [rip+0xffffffffffff292a],0x26        # 0xffff42bb
  01991:    	jne    0x399e4
  01997: 00 	mov    r9,0x0
  0199e:    	sub    rsp,0x40
  019a2:    	movq   QWORD PTR [rsp],xmm2
  019a7:    	movq   QWORD PTR [rsp+0x8],xmm4
  019ad:    	movq   QWORD PTR [rsp+0x10],xmm5
  019b3:    	movq   QWORD PTR [rsp+0x18],xmm7
  019b9: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  019c0: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  019c7: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  019ce: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  019d5:    	mov    rdx,rdi
  019d8:    	mov    rax,QWORD PTR [rbx]
  019db:    	lea    rdi,[rsp-0x18]
  019e0:    	mov    QWORD PTR [rdi],rax
  019e3:    	mov    QWORD PTR [rbx],rdi
  019e6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  019ef:    	mov    QWORD PTR [rsp-0x38],rcx
  019f4: ff 	lea    rcx,[rbp-0x98]
  019fb: 00 	mov    r8,0x0
  01a02:    	call   0x39a52
  01a07:    	lea    rdi,[rbp-0x8]
  01a0b:    	mov    QWORD PTR [rbx],rdi
  01a0e:    	movq   xmm2,QWORD PTR [rsp]
  01a13:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a19:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a1f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a25: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a2c: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a33: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a3a: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a41:    	add    rsp,0x40
  01a45: 00 	movabs r13,0x5600b92ae410
  01a4f:    	test   rax,rax
  01a52:    	je     0xffff1793
  01a58: ff 	mov    QWORD PTR [rbp-0x88],rax
:00125 
:00127 %13 = @spheres: Scene[IvarId(0)]
  01a5f:    	mov    rdi,QWORD PTR [rbp-0x28]
  01a63:    	mov    rax,QWORD PTR [rdi+0x10]
  01a67: ff 	mov    QWORD PTR [rbp-0x90],rax
:00128 %14 = 0: i32
  01a6e: ff 	mov    QWORD PTR [rbp-0x98],0x1
:00129 %13 = %13.[%14]                      [Array][Integer]
  01a79:    	sub    rsp,0x40
  01a7d:    	movq   QWORD PTR [rsp],xmm2
  01a82:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a88:    	movq   QWORD PTR [rsp+0x10],xmm5
  01a8e:    	movq   QWORD PTR [rsp+0x18],xmm7
  01a94: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01a9b: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01aa2: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01aa9: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01ab0: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01ab7: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01abe:    	mov    rdi,rbx
  01ac1:    	mov    rsi,r12
  01ac4: 00 	movabs r8,0x5600b92ae448
  01ace: 00 	movabs rax,0x5600b75c5240
  01ad8:    	call   rax
  01ada:    	movq   xmm2,QWORD PTR [rsp]
  01adf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ae5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01aeb:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01af1: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01af8: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01aff: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01b06: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01b0d:    	add    rsp,0x40
  01b11: 00 	movabs r13,0x5600b92ae450
  01b1b:    	test   rax,rax
  01b1e:    	je     0xffff1793
  01b24: ff 	mov    QWORD PTR [rbp-0x90],rax
:00130 %14 = %11
  01b2b:    	mov    rax,QWORD PTR [rbp-0x80]
  01b2f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00131 %15 = %12
  01b36: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01b3d: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00132 _ = %13.call intersect(%14; 2)       [Sphere]
  01b44: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01b4b: 00 	test   rdi,0x7
  01b52:    	jne    0x39a84
  01b58:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01b5c:    	jne    0x39a84
  01b62: 26 	cmp    DWORD PTR [rip+0xffffffffffff2752],0x26        # 0xffff42bb
  01b69:    	jne    0x39a84
  01b6f:    	sub    rsp,0x40
  01b73:    	movq   QWORD PTR [rsp],xmm2
  01b78:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b7e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01b84:    	movq   QWORD PTR [rsp+0x18],xmm7
  01b8a: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01b91: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01b98: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01b9f: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01ba6:    	mov    rax,QWORD PTR [rbx]
  01ba9:    	lea    rdi,[rsp-0x18]
  01bae:    	mov    QWORD PTR [rdi],rax
  01bb1:    	mov    QWORD PTR [rbx],rdi
  01bb4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01bbd:    	mov    QWORD PTR [rsp-0x38],rcx
  01bc2: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01bc9:    	mov    QWORD PTR [rsp-0x38],rax
  01bce: 00 	mov    rdi,0x2
  01bd5: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01bdc:    	mov    QWORD PTR [rsp-0x40],rax
  01be1: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01be8:    	mov    QWORD PTR [rsp-0x48],rax
  01bed: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01bf6: 10 	movabs rax,0x1001000000045
  01c00:    	mov    QWORD PTR [rsp-0x28],rax
  01c05: 00 	movabs r13,0x5600b92b5360
  01c0f:    	call   0xffff4eea
  01c14:    	lea    rdi,[rbp-0x8]
  01c18:    	mov    QWORD PTR [rbx],rdi
  01c1b:    	movq   xmm2,QWORD PTR [rsp]
  01c20:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c26:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01c2c:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c32: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01c39: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01c40: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01c47: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01c4e:    	add    rsp,0x40
  01c52: 00 	movabs r13,0x5600b92ae490
  01c5c:    	test   rax,rax
  01c5f:    	je     0xffff1793
:00133 
:00135 %13 = @spheres: Scene[IvarId(0)]
  01c65:    	mov    rdi,QWORD PTR [rbp-0x28]
  01c69:    	mov    rax,QWORD PTR [rdi+0x10]
  01c6d: ff 	mov    QWORD PTR [rbp-0x90],rax
:00136 %14 = 1: i32
  01c74: ff 	mov    QWORD PTR [rbp-0x98],0x3
:00137 %13 = %13.[%14]                      [Array][Integer]
  01c7f:    	sub    rsp,0x40
  01c83:    	movq   QWORD PTR [rsp],xmm2
  01c88:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c8e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01c94:    	movq   QWORD PTR [rsp+0x18],xmm7
  01c9a: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01ca1: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ca8: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01caf: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01cb6: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01cbd: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01cc4:    	mov    rdi,rbx
  01cc7:    	mov    rsi,r12
  01cca: 00 	movabs r8,0x5600b92ae4c8
  01cd4: 00 	movabs rax,0x5600b75c5240
  01cde:    	call   rax
  01ce0:    	movq   xmm2,QWORD PTR [rsp]
  01ce5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ceb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01cf1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01cf7: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01cfe: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01d05: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01d0c: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01d13:    	add    rsp,0x40
  01d17: 00 	movabs r13,0x5600b92ae4d0
  01d21:    	test   rax,rax
  01d24:    	je     0xffff1793
  01d2a: ff 	mov    QWORD PTR [rbp-0x90],rax
:00138 %14 = %11
  01d31:    	mov    rax,QWORD PTR [rbp-0x80]
  01d35: ff 	mov    QWORD PTR [rbp-0x98],rax
:00139 %15 = %12
  01d3c: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01d43: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00140 _ = %13.call intersect(%14; 2)       [Sphere]
  01d4a: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01d51: 00 	test   rdi,0x7
  01d58:    	jne    0x39af2
  01d5e:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01d62:    	jne    0x39af2
  01d68: 26 	cmp    DWORD PTR [rip+0xffffffffffff254c],0x26        # 0xffff42bb
  01d6f:    	jne    0x39af2
  01d75:    	sub    rsp,0x40
  01d79:    	movq   QWORD PTR [rsp],xmm2
  01d7e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d84:    	movq   QWORD PTR [rsp+0x10],xmm5
  01d8a:    	movq   QWORD PTR [rsp+0x18],xmm7
  01d90: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01d97: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01d9e: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01da5: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01dac:    	mov    rax,QWORD PTR [rbx]
  01daf:    	lea    rdi,[rsp-0x18]
  01db4:    	mov    QWORD PTR [rdi],rax
  01db7:    	mov    QWORD PTR [rbx],rdi
  01dba: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01dc3:    	mov    QWORD PTR [rsp-0x38],rcx
  01dc8: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01dcf:    	mov    QWORD PTR [rsp-0x38],rax
  01dd4: 00 	mov    rdi,0x2
  01ddb: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01de2:    	mov    QWORD PTR [rsp-0x40],rax
  01de7: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01dee:    	mov    QWORD PTR [rsp-0x48],rax
  01df3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01dfc: 10 	movabs rax,0x1001000000045
  01e06:    	mov    QWORD PTR [rsp-0x28],rax
  01e0b: 00 	movabs r13,0x5600b92b5360
  01e15:    	call   0xffff4eea
  01e1a:    	lea    rdi,[rbp-0x8]
  01e1e:    	mov    QWORD PTR [rbx],rdi
  01e21:    	movq   xmm2,QWORD PTR [rsp]
  01e26:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e2c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01e32:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01e38: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01e3f: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01e46: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01e4d: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01e54:    	add    rsp,0x40
  01e58: 00 	movabs r13,0x5600b92ae510
  01e62:    	test   rax,rax
  01e65:    	je     0xffff1793
:00141 
:00143 %13 = @spheres: Scene[IvarId(0)]
  01e6b:    	mov    rdi,QWORD PTR [rbp-0x28]
  01e6f:    	mov    rax,QWORD PTR [rdi+0x10]
  01e73: ff 	mov    QWORD PTR [rbp-0x90],rax
:00144 %14 = 2: i32
  01e7a: ff 	mov    QWORD PTR [rbp-0x98],0x5
:00145 %13 = %13.[%14]                      [Array][Integer]
  01e85:    	sub    rsp,0x40
  01e89:    	movq   QWORD PTR [rsp],xmm2
  01e8e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01e94:    	movq   QWORD PTR [rsp+0x10],xmm5
  01e9a:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ea0: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01ea7: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01eae: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01eb5: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01ebc: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01ec3: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01eca:    	mov    rdi,rbx
  01ecd:    	mov    rsi,r12
  01ed0: 00 	movabs r8,0x5600b92ae548
  01eda: 00 	movabs rax,0x5600b75c5240
  01ee4:    	call   rax
  01ee6:    	movq   xmm2,QWORD PTR [rsp]
  01eeb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ef1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01ef7:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01efd: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01f04: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01f0b: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01f12: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01f19:    	add    rsp,0x40
  01f1d: 00 	movabs r13,0x5600b92ae550
  01f27:    	test   rax,rax
  01f2a:    	je     0xffff1793
  01f30: ff 	mov    QWORD PTR [rbp-0x90],rax
:00146 %14 = %11
  01f37:    	mov    rax,QWORD PTR [rbp-0x80]
  01f3b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00147 %15 = %12
  01f42: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01f49: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00148 _ = %13.call intersect(%14; 2)       [Sphere]
  01f50: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01f57: 00 	test   rdi,0x7
  01f5e:    	jne    0x39b60
  01f64:    	cmp    DWORD PTR [rdi+0x4],0x2a
  01f68:    	jne    0x39b60
  01f6e: 26 	cmp    DWORD PTR [rip+0xffffffffffff2346],0x26        # 0xffff42bb
  01f75:    	jne    0x39b60
  01f7b:    	sub    rsp,0x40
  01f7f:    	movq   QWORD PTR [rsp],xmm2
  01f84:    	movq   QWORD PTR [rsp+0x8],xmm4
  01f8a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01f90:    	movq   QWORD PTR [rsp+0x18],xmm7
  01f96: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01f9d: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01fa4: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01fab: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01fb2:    	mov    rax,QWORD PTR [rbx]
  01fb5:    	lea    rdi,[rsp-0x18]
  01fba:    	mov    QWORD PTR [rdi],rax
  01fbd:    	mov    QWORD PTR [rbx],rdi
  01fc0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01fc9:    	mov    QWORD PTR [rsp-0x38],rcx
  01fce: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01fd5:    	mov    QWORD PTR [rsp-0x38],rax
  01fda: 00 	mov    rdi,0x2
  01fe1: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01fe8:    	mov    QWORD PTR [rsp-0x40],rax
  01fed: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01ff4:    	mov    QWORD PTR [rsp-0x48],rax
  01ff9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02002: 10 	movabs rax,0x1001000000045
  0200c:    	mov    QWORD PTR [rsp-0x28],rax
  02011: 00 	movabs r13,0x5600b92b5360
  0201b:    	call   0xffff4eea
  02020:    	lea    rdi,[rbp-0x8]
  02024:    	mov    QWORD PTR [rbx],rdi
  02027:    	movq   xmm2,QWORD PTR [rsp]
  0202c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  02032:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02038:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0203e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02045: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0204c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  02053: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0205a:    	add    rsp,0x40
  0205e: 00 	movabs r13,0x5600b92ae590
  02068:    	test   rax,rax
  0206b:    	je     0xffff1793
:00149 
:00151 %13 = @plane: Scene[IvarId(1)]
  02071:    	mov    rdi,QWORD PTR [rbp-0x28]
  02075:    	mov    rax,QWORD PTR [rdi+0x18]
  02079: ff 	mov    QWORD PTR [rbp-0x90],rax
:00152 %14 = %11
  02080:    	mov    rax,QWORD PTR [rbp-0x80]
  02084: ff 	mov    QWORD PTR [rbp-0x98],rax
:00153 %15 = %12
  0208b: ff 	mov    rax,QWORD PTR [rbp-0x88]
  02092: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00154 _ = %13.call intersect(%14; 2)       [Plane]
  02099: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  020a0: 00 	test   rdi,0x7
  020a7:    	jne    0x39bce
  020ad:    	cmp    DWORD PTR [rdi+0x4],0x2c
  020b1:    	jne    0x39bce
  020b7: 26 	cmp    DWORD PTR [rip+0xffffffffffff21fd],0x26        # 0xffff42bb
  020be:    	jne    0x39bce
  020c4:    	sub    rsp,0x40
  020c8:    	movq   QWORD PTR [rsp],xmm2
  020cd:    	movq   QWORD PTR [rsp+0x8],xmm4
  020d3:    	movq   QWORD PTR [rsp+0x10],xmm5
  020d9:    	movq   QWORD PTR [rsp+0x18],xmm7
  020df: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  020e6: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  020ed: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  020f4: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  020fb:    	mov    rax,QWORD PTR [rbx]
  020fe:    	lea    rdi,[rsp-0x18]
  02103:    	mov    QWORD PTR [rdi],rax
  02106:    	mov    QWORD PTR [rbx],rdi
  02109: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02112:    	mov    QWORD PTR [rsp-0x38],rcx
  02117: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0211e:    	mov    QWORD PTR [rsp-0x38],rax
  02123: 00 	mov    rdi,0x2
  0212a: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02131:    	mov    QWORD PTR [rsp-0x40],rax
  02136: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0213d:    	mov    QWORD PTR [rsp-0x48],rax
  02142: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0214b: 0e 	movabs rax,0x1000e00000047
  02155:    	mov    QWORD PTR [rsp-0x28],rax
  0215a: 00 	movabs r13,0x5600b92b7200
  02164:    	call   0xffff54e0
  02169:    	lea    rdi,[rbp-0x8]
  0216d:    	mov    QWORD PTR [rbx],rdi
  02170:    	movq   xmm2,QWORD PTR [rsp]
  02175:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0217b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02181:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02187: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0218e: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02195: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0219c: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  021a3:    	add    rsp,0x40
  021a7: 00 	movabs r13,0x5600b92ae5f0
  021b1:    	test   rax,rax
  021b4:    	je     0xffff1793
:00155 
:00157 %13 = %12.call hit()                 [Isect]
  021ba: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  021c1: 00 	test   rdi,0x7
  021c8:    	jne    0x39c3c
  021ce:    	cmp    DWORD PTR [rdi+0x4],0x30
  021d2:    	jne    0x39c3c
  021d8: 26 	cmp    DWORD PTR [rip+0xffffffffffff20dc],0x26        # 0xffff42bb
  021df:    	jne    0x39c3c
  021e5:    	mov    esi,DWORD PTR [rip+0x329]        # 0x2514
  021eb:    	cmp    esi,0xffffffff
  021ee:    	je     0x39caa
  021f4:    	cmp    WORD PTR [rdi+0x2],0x3
  021f9:    	jne    0x2212
  021ff:    	cmp    esi,0x6
  02202:    	jge    0x2212
  02208:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0220d:    	jmp    0x228c
  02212:    	sub    rsp,0x40
  02216:    	movq   QWORD PTR [rsp],xmm2
  0221b:    	movq   QWORD PTR [rsp+0x8],xmm4
  02221:    	movq   QWORD PTR [rsp+0x10],xmm5
  02227:    	movq   QWORD PTR [rsp+0x18],xmm7
  0222d: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02234: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0223b: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  02242: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02249: 00 	movabs rax,0x5600b755dfe0
  02253:    	call   rax
  02255:    	movq   xmm2,QWORD PTR [rsp]
  0225a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  02260:    	movq   xmm5,QWORD PTR [rsp+0x10]
  02266:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0226c: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02273: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0227a: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  02281: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02288:    	add    rsp,0x40
  0228c: ff 	mov    QWORD PTR [rbp-0x90],rax
:00158 
:00160 condnotbr %13 =>:00166
  02293: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0229a:    	or     rax,0x10
  0229e:    	cmp    rax,0x14
  022a2:    	je     0x236b
:00161 %13 = dynvar(2, %6)
  022a8:    	mov    rax,QWORD PTR [rbp-0x10]
  022ac:    	mov    rax,QWORD PTR [rax]
  022af:    	mov    rax,QWORD PTR [rax-0x48]
  022b3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00162 %14 = literal[1.0]
  022ba: 00 	movq   xmm3,QWORD PTR [rip+0x256]        # 0x2518
  022c2: 00 	movabs rax,0xff80000000000002
  022cc: ff 	mov    QWORD PTR [rbp-0x98],rax
:00163 %13 = %13 + %14                      [Float][Float]
  022d3: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  022da: 00 	test   rdi,0x1
  022e1:    	jne    0x39d41
  022e7: 00 	test   rdi,0x2
  022ee:    	je     0x232a
  022f4:    	xorps  xmm6,xmm6
  022f7: 00 	movabs rax,0x8000000000000002
  02301:    	cmp    rdi,rax
  02304:    	je     0x233c
  0230a:    	mov    rax,rdi
  0230d:    	sar    rax,0x3f
  02311:    	add    rax,0x2
  02315:    	and    rdi,0xfffffffffffffffc
  02319:    	or     rdi,rax
  0231c:    	rol    rdi,0x3d
  02320:    	movq   xmm6,rdi
  02325:    	jmp    0x233c
  0232a:    	call   0xffff17cc
  0232f:    	test   rax,rax
  02332:    	je     0x39d41
  02338:    	movq   xmm6,xmm0
  0233c:    	addsd  xmm6,xmm3
:00164 dynvar(2, %6) = %13
  02340:    	movq   xmm0,xmm6
  02344:    	call   0xffff18bf
  02349: ff 	mov    QWORD PTR [rbp-0x90],rax
  02350:    	mov    rax,QWORD PTR [rbp-0x10]
  02354:    	mov    rax,QWORD PTR [rax]
  02357: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0235e:    	mov    QWORD PTR [rax-0x48],rdi
:00165 ret %13
  02362: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02369:    	leave  
  0236a:    	ret    
:00166 %13 = literal[0.0]
  0236b: 00 	movq   xmm3,QWORD PTR [rip+0x1b5]        # 0x2528
  02373: 00 	movabs rax,0x8000000000000002
  0237d: ff 	mov    QWORD PTR [rbp-0x90],rax
:00167 ret %13
  02384: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0238b:    	leave  
  0238c:    	ret    
==> start whole compile: intersect FuncId(69) self_class:Sphere start:[00000] bytecode:0x5600b92b5360
<== finished compile. elapsed:174.5µs
offset:Pos(69080) code: 7241 bytes  data: 407 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x2
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x40],rax
  00040:    	mov    QWORD PTR [rbp-0x48],rax
  00044:    	mov    QWORD PTR [rbp-0x50],rax
  00048:    	mov    QWORD PTR [rbp-0x58],rax
  0004c:    	mov    QWORD PTR [rbp-0x60],rax
  00050:    	mov    QWORD PTR [rbp-0x68],rax
  00054:    	mov    QWORD PTR [rbp-0x70],rax
  00058:    	mov    QWORD PTR [rbp-0x78],rax
  0005c:    	mov    QWORD PTR [rbp-0x80],rax
  00060: ff 	mov    QWORD PTR [rbp-0x88],rax
  00067: ff 	mov    QWORD PTR [rbp-0x90],rax
  0006e: ff 	mov    QWORD PTR [rbp-0x98],rax
  00075: ff 	mov    QWORD PTR [rbp-0xa0],rax
  0007c:    	mov    rdi,QWORD PTR [rbp-0x28]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x3787f
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00091:    	jne    0x3787f
:00000 init reg_num:16 arg_num:2 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  00097:    	mov    rdi,QWORD PTR [rbp-0x30]
  0009b: 00 	test   rdi,0x7
  000a2:    	jne    0x3788e
  000a8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  000ac:    	jne    0x3788e
  000b2: 26 	cmp    DWORD PTR [rip+0xffffffffffff1cd2],0x26        # 0xffff1d8b
  000b9:    	jne    0x3788e
  000bf:    	mov    esi,DWORD PTR [rip+0x1b88]        # 0x1c4d
  000c5:    	cmp    esi,0xffffffff
  000c8:    	je     0x3789d
  000ce:    	cmp    WORD PTR [rdi+0x2],0x3
  000d3:    	jne    0xec
  000d9:    	cmp    esi,0x6
  000dc:    	jge    0xec
  000e2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000e7:    	jmp    0xf8
  000ec: 00 	movabs rax,0x5600b755dfe0
  000f6:    	call   rax
  000f8:    	mov    QWORD PTR [rbp-0x70],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  000fc:    	mov    rdi,QWORD PTR [rbp-0x28]
  00100:    	mov    rax,QWORD PTR [rdi+0x10]
  00104:    	mov    QWORD PTR [rbp-0x78],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  00108:    	mov    rdi,QWORD PTR [rbp-0x70]
  0010c: 00 	test   rdi,0x7
  00113:    	jne    0x378c6
  00119:    	cmp    DWORD PTR [rdi+0x4],0x28
  0011d:    	jne    0x378c6
  00123: 26 	cmp    DWORD PTR [rip+0xffffffffffff1c61],0x26        # 0xffff1d8b
  0012a:    	jne    0x378c6
  00130:    	mov    rax,QWORD PTR [rbx]
  00133:    	lea    rdi,[rsp-0x18]
  00138:    	mov    QWORD PTR [rdi],rax
  0013b:    	mov    QWORD PTR [rbx],rdi
  0013e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00147:    	mov    QWORD PTR [rsp-0x38],rcx
  0014c:    	mov    rax,QWORD PTR [rbp-0x70]
  00150:    	mov    QWORD PTR [rsp-0x38],rax
  00155: 00 	mov    rdi,0x1
  0015c:    	mov    rax,QWORD PTR [rbp-0x78]
  00160:    	mov    QWORD PTR [rsp-0x40],rax
  00165: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0016e: 08 	movabs rax,0x80000003f
  00178:    	mov    QWORD PTR [rsp-0x28],rax
  0017d: 00 	movabs r13,0x5600b92a1ef0
  00187:    	call   0xffff2a4c
  0018c:    	lea    rdi,[rbp-0x8]
  00190:    	mov    QWORD PTR [rbx],rdi
  00193: 00 	movabs r13,0x5600b92b53d0
  0019d:    	test   rax,rax
  001a0:    	je     0xfffef263
  001a6:    	mov    QWORD PTR [rbp-0x40],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001aa:    	mov    rdi,QWORD PTR [rbp-0x30]
  001ae: 00 	test   rdi,0x7
  001b5:    	jne    0x378d5
  001bb:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001bf:    	jne    0x378d5
  001c5: 26 	cmp    DWORD PTR [rip+0xffffffffffff1bbf],0x26        # 0xffff1d8b
  001cc:    	jne    0x378d5
  001d2:    	mov    esi,DWORD PTR [rip+0x1a7d]        # 0x1c55
  001d8:    	cmp    esi,0xffffffff
  001db:    	je     0x378e4
  001e1:    	cmp    WORD PTR [rdi+0x2],0x3
  001e6:    	jne    0x1ff
  001ec:    	cmp    esi,0x6
  001ef:    	jge    0x1ff
  001f5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001fa:    	jmp    0x20b
  001ff: 00 	movabs rax,0x5600b755dfe0
  00209:    	call   rax
  0020b:    	mov    QWORD PTR [rbp-0x70],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  0020f:    	mov    rdi,QWORD PTR [rbp-0x40]
  00213: 00 	test   rdi,0x7
  0021a:    	jne    0x3790d
  00220:    	cmp    DWORD PTR [rdi+0x4],0x28
  00224:    	jne    0x3790d
  0022a: 26 	cmp    DWORD PTR [rip+0xffffffffffff1b5a],0x26        # 0xffff1d8b
  00231:    	jne    0x3790d
  00237:    	mov    rax,QWORD PTR [rbx]
  0023a:    	lea    rdi,[rsp-0x18]
  0023f:    	mov    QWORD PTR [rdi],rax
  00242:    	mov    QWORD PTR [rbx],rdi
  00245: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0024e:    	mov    QWORD PTR [rsp-0x38],rcx
  00253:    	mov    rax,QWORD PTR [rbp-0x40]
  00257:    	mov    QWORD PTR [rsp-0x38],rax
  0025c: 00 	mov    rdi,0x1
  00263:    	mov    rax,QWORD PTR [rbp-0x70]
  00267:    	mov    QWORD PTR [rsp-0x40],rax
  0026c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00275: 05 	movabs rax,0x500000041
  0027f:    	mov    QWORD PTR [rsp-0x28],rax
  00284: 00 	movabs r13,0x5600b92d48b0
  0028e:    	call   0xffff2ade
  00293:    	lea    rdi,[rbp-0x8]
  00297:    	mov    QWORD PTR [rbx],rdi
  0029a: 00 	movabs r13,0x5600b92b5430
  002a4:    	test   rax,rax
  002a7:    	je     0xfffef263
  002ad:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %10 = %3
  002b1:    	mov    rax,QWORD PTR [rbp-0x40]
  002b5:    	mov    QWORD PTR [rbp-0x78],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002b9:    	mov    rdi,QWORD PTR [rbp-0x40]
  002bd: 00 	test   rdi,0x7
  002c4:    	jne    0x3791c
  002ca:    	cmp    DWORD PTR [rdi+0x4],0x28
  002ce:    	jne    0x3791c
  002d4: 26 	cmp    DWORD PTR [rip+0xffffffffffff1ab0],0x26        # 0xffff1d8b
  002db:    	jne    0x3791c
  002e1:    	mov    rax,QWORD PTR [rbx]
  002e4:    	lea    rdi,[rsp-0x18]
  002e9:    	mov    QWORD PTR [rdi],rax
  002ec:    	mov    QWORD PTR [rbx],rdi
  002ef: 00 	mov    QWORD PTR [rsp-0x20],0x0
  002f8:    	mov    QWORD PTR [rsp-0x38],rcx
  002fd:    	mov    rax,QWORD PTR [rbp-0x40]
  00301:    	mov    QWORD PTR [rsp-0x38],rax
  00306: 00 	mov    rdi,0x1
  0030d:    	mov    rax,QWORD PTR [rbp-0x78]
  00311:    	mov    QWORD PTR [rsp-0x40],rax
  00316: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0031f: 05 	movabs rax,0x500000041
  00329:    	mov    QWORD PTR [rsp-0x28],rax
  0032e: 00 	movabs r13,0x5600b92d48b0
  00338:    	call   0xffff2ade
  0033d:    	lea    rdi,[rbp-0x8]
  00341:    	mov    QWORD PTR [rbx],rdi
  00344: 00 	movabs r13,0x5600b92b5470
  0034e:    	test   rax,rax
  00351:    	je     0xfffef263
  00357:    	mov    QWORD PTR [rbp-0x70],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  0035b:    	mov    rdi,QWORD PTR [rbp-0x28]
  0035f:    	mov    rax,QWORD PTR [rdi+0x18]
  00363:    	mov    QWORD PTR [rbp-0x78],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00367:    	mov    rdi,QWORD PTR [rbp-0x28]
  0036b:    	mov    rax,QWORD PTR [rdi+0x18]
  0036f:    	mov    QWORD PTR [rbp-0x80],rax
:00020 %10 = %10 * %11                      [Float][Float]
  00373:    	mov    rdi,QWORD PTR [rbp-0x78]
  00377: 00 	test   rdi,0x1
  0037e:    	jne    0x3792b
  00384: 00 	test   rdi,0x2
  0038b:    	je     0x3c7
  00391:    	xorps  xmm2,xmm2
  00394: 00 	movabs rax,0x8000000000000002
  0039e:    	cmp    rdi,rax
  003a1:    	je     0x3d9
  003a7:    	mov    rax,rdi
  003aa:    	sar    rax,0x3f
  003ae:    	add    rax,0x2
  003b2:    	and    rdi,0xfffffffffffffffc
  003b6:    	or     rdi,rax
  003b9:    	rol    rdi,0x3d
  003bd:    	movq   xmm2,rdi
  003c2:    	jmp    0x3d9
  003c7:    	call   0xfffef29c
  003cc:    	test   rax,rax
  003cf:    	je     0x3792b
  003d5:    	movq   xmm2,xmm0
  003d9:    	mov    rdi,QWORD PTR [rbp-0x80]
  003dd: 00 	test   rdi,0x1
  003e4:    	jne    0x3793a
  003ea: 00 	test   rdi,0x2
  003f1:    	je     0x42d
  003f7:    	xorps  xmm3,xmm3
  003fa: 00 	movabs rax,0x8000000000000002
  00404:    	cmp    rdi,rax
  00407:    	je     0x43f
  0040d:    	mov    rax,rdi
  00410:    	sar    rax,0x3f
  00414:    	add    rax,0x2
  00418:    	and    rdi,0xfffffffffffffffc
  0041c:    	or     rdi,rax
  0041f:    	rol    rdi,0x3d
  00423:    	movq   xmm3,rdi
  00428:    	jmp    0x43f
  0042d:    	call   0xfffef29c
  00432:    	test   rax,rax
  00435:    	je     0x3793a
  0043b:    	movq   xmm3,xmm0
  0043f:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00443:    	mov    rdi,QWORD PTR [rbp-0x70]
  00447: 00 	test   rdi,0x1
  0044e:    	jne    0x37949
  00454: 00 	test   rdi,0x2
  0045b:    	je     0x497
  00461:    	xorps  xmm4,xmm4
  00464: 00 	movabs rax,0x8000000000000002
  0046e:    	cmp    rdi,rax
  00471:    	je     0x4a9
  00477:    	mov    rax,rdi
  0047a:    	sar    rax,0x3f
  0047e:    	add    rax,0x2
  00482:    	and    rdi,0xfffffffffffffffc
  00486:    	or     rdi,rax
  00489:    	rol    rdi,0x3d
  0048d:    	movq   xmm4,rdi
  00492:    	jmp    0x4a9
  00497:    	call   0xfffef29c
  0049c:    	test   rax,rax
  0049f:    	je     0x37949
  004a5:    	movq   xmm4,xmm0
  004a9:    	movq   xmm5,xmm4
  004ad:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004b1:    	mov    rdi,QWORD PTR [rbp-0x48]
  004b5: 00 	test   rdi,0x1
  004bc:    	jne    0x37965
  004c2: 00 	test   rdi,0x2
  004c9:    	je     0x505
  004cf:    	xorps  xmm6,xmm6
  004d2: 00 	movabs rax,0x8000000000000002
  004dc:    	cmp    rdi,rax
  004df:    	je     0x517
  004e5:    	mov    rax,rdi
  004e8:    	sar    rax,0x3f
  004ec:    	add    rax,0x2
  004f0:    	and    rdi,0xfffffffffffffffc
  004f4:    	or     rdi,rax
  004f7:    	rol    rdi,0x3d
  004fb:    	movq   xmm6,rdi
  00500:    	jmp    0x517
  00505:    	call   0xfffef29c
  0050a:    	test   rax,rax
  0050d:    	je     0x37965
  00513:    	movq   xmm6,xmm0
  00517:    	movq   xmm4,xmm6
  0051b:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  0051f:    	movq   xmm7,xmm4
  00523:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00527: 00 	movq   xmm4,QWORD PTR [rip+0x1739]        # 0x1c68
  0052f: 00 	movabs rax,0x8000000000000002
  00539:    	mov    QWORD PTR [rbp-0x70],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0053d:    	ucomisd xmm7,xmm4
  00541:    	jbe    0x38ed2
:00027 %9 = %4
:00028 %9 = neg %9                          [Float]
  00547:    	movq   xmm4,xmm6
  0054b: 00 	xorps  xmm4,XMMWORD PTR [rip+0x1726]        # 0x1c78
:00029 %11 = const[Math]                    [Math]
  00552: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff183f]        # 0xffff1d98
  00559: 00 	cmp    rax,QWORD PTR [rip+0x1738]        # 0x1c98
  00560:    	jne    0x3798e
  00566: 00 	mov    rax,QWORD PTR [rip+0x171b]        # 0x1c88
  0056d:    	mov    QWORD PTR [rbp-0x80],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
  00571:    	mov    rdi,QWORD PTR [rbp-0x80]
  00575: 00 	test   rdi,0x7
  0057c:    	jne    0x37a16
  00582:    	cmp    DWORD PTR [rdi+0x4],0x21
  00586:    	jne    0x37a16
  0058c: 26 	cmp    DWORD PTR [rip+0xffffffffffff17f8],0x26        # 0xffff1d8b
  00593:    	jne    0x37a16
  00599:    	sqrtsd xmm2,xmm7
:00032 
:00034 %7 = %9 - %10                        [Float][Float]
  0059d:    	movq   xmm3,xmm4
  005a1:    	subsd  xmm3,xmm2
:00035 %9 = literal[0.0]
  005a5: 00 	movq   xmm4,QWORD PTR [rip+0x16fb]        # 0x1ca8
  005ad: 00 	movabs rax,0x8000000000000002
  005b7:    	mov    QWORD PTR [rbp-0x70],rax
:00036 _%9 = %7 > %9                        [Float][Float]
:00037 condnotbr _%9 =>:00113
  005bb:    	ucomisd xmm3,xmm4
  005bf:    	jbe    0x38d92
:00038 %9 = %2.call t()                     [<INVALID>]
  005c5: 01 	sub    DWORD PTR [rip+0x16e4],0x1        # 0x1cb0
  005cc:    	je     0x37a9d
  005d2:    	sub    rsp,0x30
  005d6:    	movq   QWORD PTR [rsp],xmm2
  005db:    	movq   QWORD PTR [rsp+0x8],xmm3
  005e1:    	movq   QWORD PTR [rsp+0x10],xmm5
  005e7:    	movq   QWORD PTR [rsp+0x18],xmm6
  005ed:    	movq   QWORD PTR [rsp+0x20],xmm7
  005f3:    	mov    rdi,QWORD PTR [rbp-0x38]
  005f7: 00 	movabs rax,0x5600b75a2280
  00601:    	call   rax
  00603:    	mov    r15d,eax
  00606: 00 	cmp    r15d,DWORD PTR [rip+0x16ab]        # 0x1cb8
  0060d:    	jne    0x37abf
  00613:    	mov    eax,DWORD PTR [rip+0xffffffffffff1772]        # 0xffff1d8b
  00619:    	cmp    DWORD PTR [rip+0x1695],eax        # 0x1cb4
  0061f:    	jne    0x37abf
  00625:    	mov    rax,QWORD PTR [rbx]
  00628:    	lea    rdi,[rsp-0x18]
  0062d:    	mov    QWORD PTR [rdi],rax
  00630:    	mov    QWORD PTR [rbx],rdi
  00633: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0063c:    	mov    QWORD PTR [rsp-0x38],rcx
  00641:    	mov    rax,QWORD PTR [rbp-0x38]
  00645:    	mov    QWORD PTR [rsp-0x38],rax
  0064a: 00 	mov    rdi,0x0
  00651: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0065a: 00 	movabs rax,0x0
  00664:    	mov    QWORD PTR [rsp-0x28],rax
  00669: 00 	movabs r13,0x0
  00673:    	call   0xfffef228
  00678:    	lea    rdi,[rbp-0x8]
  0067c:    	mov    QWORD PTR [rbx],rdi
  0067f:    	movq   xmm2,QWORD PTR [rsp]
  00684:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0068a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00690:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00696:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0069c:    	add    rsp,0x30
  006a0:    	test   rax,rax
  006a3:    	je     0x37b2b
  006a9:    	mov    QWORD PTR [rbp-0x70],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  006ad:    	movq   xmm0,xmm3
  006b1:    	call   0xfffef38f
  006b6:    	mov    QWORD PTR [rbp-0x60],rax
  006ba:    	mov    rdi,QWORD PTR [rbp-0x60]
  006be:    	mov    rsi,QWORD PTR [rbp-0x70]
  006c2: 00 	test   rdi,0x1
  006c9:    	je     0x37b3a
  006cf: 00 	test   rsi,0x1
  006d6:    	je     0x37b3a
  006dc:    	cmp    rdi,rsi
  006df:    	jge    0x38e1f
:00043 _ = %2.call t=(%7; 1)                [<INVALID>]
  006e5: 01 	sub    DWORD PTR [rip+0x15d0],0x1        # 0x1cbc
  006ec:    	je     0x37bd8
  006f2:    	sub    rsp,0x30
  006f6:    	movq   QWORD PTR [rsp],xmm2
  006fb:    	movq   QWORD PTR [rsp+0x8],xmm3
  00701:    	movq   QWORD PTR [rsp+0x10],xmm5
  00707:    	movq   QWORD PTR [rsp+0x18],xmm6
  0070d:    	movq   QWORD PTR [rsp+0x20],xmm7
  00713:    	mov    rdi,QWORD PTR [rbp-0x38]
  00717: 00 	movabs rax,0x5600b75a2280
  00721:    	call   rax
  00723:    	mov    r15d,eax
  00726: 00 	cmp    r15d,DWORD PTR [rip+0x1597]        # 0x1cc4
  0072d:    	jne    0x37bfa
  00733:    	mov    eax,DWORD PTR [rip+0xffffffffffff1652]        # 0xffff1d8b
  00739:    	cmp    DWORD PTR [rip+0x1581],eax        # 0x1cc0
  0073f:    	jne    0x37bfa
  00745:    	mov    rax,QWORD PTR [rbx]
  00748:    	lea    rdi,[rsp-0x18]
  0074d:    	mov    QWORD PTR [rdi],rax
  00750:    	mov    QWORD PTR [rbx],rdi
  00753: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0075c:    	mov    QWORD PTR [rsp-0x38],rcx
  00761:    	mov    rax,QWORD PTR [rbp-0x38]
  00765:    	mov    QWORD PTR [rsp-0x38],rax
  0076a: 00 	mov    rdi,0x1
  00771:    	mov    rax,QWORD PTR [rbp-0x60]
  00775:    	mov    QWORD PTR [rsp-0x40],rax
  0077a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00783: 00 	movabs rax,0x0
  0078d:    	mov    QWORD PTR [rsp-0x28],rax
  00792: 00 	movabs r13,0x0
  0079c:    	call   0xfffef228
  007a1:    	lea    rdi,[rbp-0x8]
  007a5:    	mov    QWORD PTR [rbx],rdi
  007a8:    	movq   xmm2,QWORD PTR [rsp]
  007ad:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007b3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007b9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007bf:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007c5:    	add    rsp,0x30
  007c9:    	test   rax,rax
  007cc:    	je     0x37c66
:00044 
:00046 %9 = literal[true]
  007d2: 00 	mov    rax,0x1c
  007d9:    	mov    QWORD PTR [rbp-0x70],rax
:00047 _ = %2.call hit=(%9; 1)              [<INVALID>]
  007dd: 01 	sub    DWORD PTR [rip+0x14e4],0x1        # 0x1cc8
  007e4:    	je     0x37cb2
  007ea:    	sub    rsp,0x30
  007ee:    	movq   QWORD PTR [rsp],xmm2
  007f3:    	movq   QWORD PTR [rsp+0x8],xmm3
  007f9:    	movq   QWORD PTR [rsp+0x10],xmm5
  007ff:    	movq   QWORD PTR [rsp+0x18],xmm6
  00805:    	movq   QWORD PTR [rsp+0x20],xmm7
  0080b:    	mov    rdi,QWORD PTR [rbp-0x38]
  0080f: 00 	movabs rax,0x5600b75a2280
  00819:    	call   rax
  0081b:    	mov    r15d,eax
  0081e: 00 	cmp    r15d,DWORD PTR [rip+0x14ab]        # 0x1cd0
  00825:    	jne    0x37cd4
  0082b:    	mov    eax,DWORD PTR [rip+0xffffffffffff155a]        # 0xffff1d8b
  00831:    	cmp    DWORD PTR [rip+0x1495],eax        # 0x1ccc
  00837:    	jne    0x37cd4
  0083d:    	mov    rax,QWORD PTR [rbx]
  00840:    	lea    rdi,[rsp-0x18]
  00845:    	mov    QWORD PTR [rdi],rax
  00848:    	mov    QWORD PTR [rbx],rdi
  0084b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00854:    	mov    QWORD PTR [rsp-0x38],rcx
  00859:    	mov    rax,QWORD PTR [rbp-0x38]
  0085d:    	mov    QWORD PTR [rsp-0x38],rax
  00862: 00 	mov    rdi,0x1
  00869:    	mov    rax,QWORD PTR [rbp-0x70]
  0086d:    	mov    QWORD PTR [rsp-0x40],rax
  00872: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0087b: 00 	movabs rax,0x0
  00885:    	mov    QWORD PTR [rsp-0x28],rax
  0088a: 00 	movabs r13,0x0
  00894:    	call   0xfffef228
  00899:    	lea    rdi,[rbp-0x8]
  0089d:    	mov    QWORD PTR [rbx],rdi
  008a0:    	movq   xmm2,QWORD PTR [rsp]
  008a5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008ab:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008b1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008b7:    	movq   xmm7,QWORD PTR [rsp+0x20]
  008bd:    	add    rsp,0x30
  008c1:    	test   rax,rax
  008c4:    	je     0x37d40
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  008ca: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff14c7]        # 0xffff1d98
  008d1: 00 	cmp    rax,QWORD PTR [rip+0x1410]        # 0x1ce8
  008d8:    	jne    0x37d4f
  008de: 00 	mov    rax,QWORD PTR [rip+0x13f3]        # 0x1cd8
  008e5:    	mov    QWORD PTR [rbp-0x78],rax
:00051 %12 = %1.call org()                  [<INVALID>]
  008e9: 01 	sub    DWORD PTR [rip+0x1400],0x1        # 0x1cf0
  008f0:    	je     0x37dfb
  008f6:    	sub    rsp,0x20
  008fa:    	movq   QWORD PTR [rsp],xmm3
  008ff:    	movq   QWORD PTR [rsp+0x8],xmm5
  00905:    	movq   QWORD PTR [rsp+0x10],xmm6
  0090b:    	movq   QWORD PTR [rsp+0x18],xmm7
  00911:    	mov    rdi,QWORD PTR [rbp-0x30]
  00915: 00 	movabs rax,0x5600b75a2280
  0091f:    	call   rax
  00921:    	mov    r15d,eax
  00924: 00 	cmp    r15d,DWORD PTR [rip+0x13cd]        # 0x1cf8
  0092b:    	jne    0x37e1d
  00931:    	mov    eax,DWORD PTR [rip+0xffffffffffff1454]        # 0xffff1d8b
  00937:    	cmp    DWORD PTR [rip+0x13b7],eax        # 0x1cf4
  0093d:    	jne    0x37e1d
  00943:    	mov    rax,QWORD PTR [rbx]
  00946:    	lea    rdi,[rsp-0x18]
  0094b:    	mov    QWORD PTR [rdi],rax
  0094e:    	mov    QWORD PTR [rbx],rdi
  00951: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0095a:    	mov    QWORD PTR [rsp-0x38],rcx
  0095f:    	mov    rax,QWORD PTR [rbp-0x30]
  00963:    	mov    QWORD PTR [rsp-0x38],rax
  00968: 00 	mov    rdi,0x0
  0096f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00978: 00 	movabs rax,0x0
  00982:    	mov    QWORD PTR [rsp-0x28],rax
  00987: 00 	movabs r13,0x0
  00991:    	call   0xfffef228
  00996:    	lea    rdi,[rbp-0x8]
  0099a:    	mov    QWORD PTR [rbx],rdi
  0099d:    	movq   xmm3,QWORD PTR [rsp]
  009a2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  009a8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  009ae:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009b4:    	add    rsp,0x20
  009b8:    	test   rax,rax
  009bb:    	je     0x37e89
  009c1: ff 	mov    QWORD PTR [rbp-0x88],rax
:00052 
:00054 %11 = %12.call x()                   [<INVALID>]
  009c8: 01 	sub    DWORD PTR [rip+0x132d],0x1        # 0x1cfc
  009cf:    	je     0x37ec1
  009d5:    	sub    rsp,0x20
  009d9:    	movq   QWORD PTR [rsp],xmm3
  009de:    	movq   QWORD PTR [rsp+0x8],xmm5
  009e4:    	movq   QWORD PTR [rsp+0x10],xmm6
  009ea:    	movq   QWORD PTR [rsp+0x18],xmm7
  009f0: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  009f7: 00 	movabs rax,0x5600b75a2280
  00a01:    	call   rax
  00a03:    	mov    r15d,eax
  00a06: 00 	cmp    r15d,DWORD PTR [rip+0x12f7]        # 0x1d04
  00a0d:    	jne    0x37ee3
  00a13:    	mov    eax,DWORD PTR [rip+0xffffffffffff1372]        # 0xffff1d8b
  00a19:    	cmp    DWORD PTR [rip+0x12e1],eax        # 0x1d00
  00a1f:    	jne    0x37ee3
  00a25:    	mov    rax,QWORD PTR [rbx]
  00a28:    	lea    rdi,[rsp-0x18]
  00a2d:    	mov    QWORD PTR [rdi],rax
  00a30:    	mov    QWORD PTR [rbx],rdi
  00a33: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a3c:    	mov    QWORD PTR [rsp-0x38],rcx
  00a41: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00a48:    	mov    QWORD PTR [rsp-0x38],rax
  00a4d: 00 	mov    rdi,0x0
  00a54: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a5d: 00 	movabs rax,0x0
  00a67:    	mov    QWORD PTR [rsp-0x28],rax
  00a6c: 00 	movabs r13,0x0
  00a76:    	call   0xfffef228
  00a7b:    	lea    rdi,[rbp-0x8]
  00a7f:    	mov    QWORD PTR [rbx],rdi
  00a82:    	movq   xmm3,QWORD PTR [rsp]
  00a87:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00a8d:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00a93:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00a99:    	add    rsp,0x20
  00a9d:    	test   rax,rax
  00aa0:    	je     0x37f52
  00aa6:    	mov    QWORD PTR [rbp-0x80],rax
:00055 
:00057 %13 = %1.call dir()                  [<INVALID>]
  00aaa: 01 	sub    DWORD PTR [rip+0x1257],0x1        # 0x1d08
  00ab1:    	je     0x37f8a
  00ab7:    	sub    rsp,0x20
  00abb:    	movq   QWORD PTR [rsp],xmm3
  00ac0:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ac6:    	movq   QWORD PTR [rsp+0x10],xmm6
  00acc:    	movq   QWORD PTR [rsp+0x18],xmm7
  00ad2:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ad6: 00 	movabs rax,0x5600b75a2280
  00ae0:    	call   rax
  00ae2:    	mov    r15d,eax
  00ae5: 00 	cmp    r15d,DWORD PTR [rip+0x1224]        # 0x1d10
  00aec:    	jne    0x37fac
  00af2:    	mov    eax,DWORD PTR [rip+0xffffffffffff1293]        # 0xffff1d8b
  00af8:    	cmp    DWORD PTR [rip+0x120e],eax        # 0x1d0c
  00afe:    	jne    0x37fac
  00b04:    	mov    rax,QWORD PTR [rbx]
  00b07:    	lea    rdi,[rsp-0x18]
  00b0c:    	mov    QWORD PTR [rdi],rax
  00b0f:    	mov    QWORD PTR [rbx],rdi
  00b12: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b1b:    	mov    QWORD PTR [rsp-0x38],rcx
  00b20:    	mov    rax,QWORD PTR [rbp-0x30]
  00b24:    	mov    QWORD PTR [rsp-0x38],rax
  00b29: 00 	mov    rdi,0x0
  00b30: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b39: 00 	movabs rax,0x0
  00b43:    	mov    QWORD PTR [rsp-0x28],rax
  00b48: 00 	movabs r13,0x0
  00b52:    	call   0xfffef228
  00b57:    	lea    rdi,[rbp-0x8]
  00b5b:    	mov    QWORD PTR [rbx],rdi
  00b5e:    	movq   xmm3,QWORD PTR [rsp]
  00b63:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00b69:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00b6f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00b75:    	add    rsp,0x20
  00b79:    	test   rax,rax
  00b7c:    	je     0x38018
  00b82: ff 	mov    QWORD PTR [rbp-0x90],rax
:00058 
:00060 %12 = %13.call x()                   [<INVALID>]
  00b89: 01 	sub    DWORD PTR [rip+0x1184],0x1        # 0x1d14
  00b90:    	je     0x38050
  00b96:    	sub    rsp,0x20
  00b9a:    	movq   QWORD PTR [rsp],xmm3
  00b9f:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ba5:    	movq   QWORD PTR [rsp+0x10],xmm6
  00bab:    	movq   QWORD PTR [rsp+0x18],xmm7
  00bb1: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00bb8: 00 	movabs rax,0x5600b75a2280
  00bc2:    	call   rax
  00bc4:    	mov    r15d,eax
  00bc7: 00 	cmp    r15d,DWORD PTR [rip+0x114e]        # 0x1d1c
  00bce:    	jne    0x38072
  00bd4:    	mov    eax,DWORD PTR [rip+0xffffffffffff11b1]        # 0xffff1d8b
  00bda:    	cmp    DWORD PTR [rip+0x1138],eax        # 0x1d18
  00be0:    	jne    0x38072
  00be6:    	mov    rax,QWORD PTR [rbx]
  00be9:    	lea    rdi,[rsp-0x18]
  00bee:    	mov    QWORD PTR [rdi],rax
  00bf1:    	mov    QWORD PTR [rbx],rdi
  00bf4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00bfd:    	mov    QWORD PTR [rsp-0x38],rcx
  00c02: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00c09:    	mov    QWORD PTR [rsp-0x38],rax
  00c0e: 00 	mov    rdi,0x0
  00c15: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c1e: 00 	movabs rax,0x0
  00c28:    	mov    QWORD PTR [rsp-0x28],rax
  00c2d: 00 	movabs r13,0x0
  00c37:    	call   0xfffef228
  00c3c:    	lea    rdi,[rbp-0x8]
  00c40:    	mov    QWORD PTR [rbx],rdi
  00c43:    	movq   xmm3,QWORD PTR [rsp]
  00c48:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00c4e:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00c54:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c5a:    	add    rsp,0x20
  00c5e:    	test   rax,rax
  00c61:    	je     0x380e1
  00c67: ff 	mov    QWORD PTR [rbp-0x88],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00c6e: 01 	sub    DWORD PTR [rip+0x10ab],0x1        # 0x1d20
  00c75:    	je     0x38119
  00c7b: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00c82:    	mov    rsi,QWORD PTR [rbp-0x60]
  00c86:    	sub    rsp,0x20
  00c8a:    	movq   QWORD PTR [rsp],xmm3
  00c8f:    	movq   QWORD PTR [rsp+0x8],xmm5
  00c95:    	movq   QWORD PTR [rsp+0x10],xmm6
  00c9b:    	movq   QWORD PTR [rsp+0x18],xmm7
  00ca1:    	mov    rdx,rdi
  00ca4:    	mov    rcx,rsi
  00ca7:    	mov    rdi,rbx
  00caa:    	mov    rsi,r12
  00cad: 00 	movabs rax,0x5600b7598f60
  00cb7:    	call   rax
  00cb9:    	movq   xmm3,QWORD PTR [rsp]
  00cbe:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00cc4:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00cca:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00cd0:    	add    rsp,0x20
  00cd4: 00 	movabs r13,0x5600b92b5760
  00cde:    	test   rax,rax
  00ce1:    	je     0xfffef263
  00ce7: ff 	mov    QWORD PTR [rbp-0x88],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00cee: 01 	sub    DWORD PTR [rip+0x102f],0x1        # 0x1d24
  00cf5:    	je     0x38164
  00cfb:    	mov    rdi,QWORD PTR [rbp-0x80]
  00cff: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  00d06:    	sub    rsp,0x20
  00d0a:    	movq   QWORD PTR [rsp],xmm3
  00d0f:    	movq   QWORD PTR [rsp+0x8],xmm5
  00d15:    	movq   QWORD PTR [rsp+0x10],xmm6
  00d1b:    	movq   QWORD PTR [rsp+0x18],xmm7
  00d21:    	mov    rdx,rdi
  00d24:    	mov    rcx,rsi
  00d27:    	mov    rdi,rbx
  00d2a:    	mov    rsi,r12
  00d2d: 00 	movabs rax,0x5600b75970e0
  00d37:    	call   rax
  00d39:    	movq   xmm3,QWORD PTR [rsp]
  00d3e:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00d44:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00d4a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00d50:    	add    rsp,0x20
  00d54: 00 	movabs r13,0x5600b92b5770
  00d5e:    	test   rax,rax
  00d61:    	je     0xfffef263
  00d67:    	mov    QWORD PTR [rbp-0x80],rax
:00065 %13 = %1.call org()                  [<INVALID>]
  00d6b: 01 	sub    DWORD PTR [rip+0xfb6],0x1        # 0x1d28
  00d72:    	je     0x381af
  00d78:    	sub    rsp,0x20
  00d7c:    	movq   QWORD PTR [rsp],xmm3
  00d81:    	movq   QWORD PTR [rsp+0x8],xmm5
  00d87:    	movq   QWORD PTR [rsp+0x10],xmm6
  00d8d:    	movq   QWORD PTR [rsp+0x18],xmm7
  00d93:    	mov    rdi,QWORD PTR [rbp-0x30]
  00d97: 00 	movabs rax,0x5600b75a2280
  00da1:    	call   rax
  00da3:    	mov    r15d,eax
  00da6: 00 	cmp    r15d,DWORD PTR [rip+0xf83]        # 0x1d30
  00dad:    	jne    0x381d1
  00db3:    	mov    eax,DWORD PTR [rip+0xffffffffffff0fd2]        # 0xffff1d8b
  00db9:    	cmp    DWORD PTR [rip+0xf6d],eax        # 0x1d2c
  00dbf:    	jne    0x381d1
  00dc5:    	mov    rax,QWORD PTR [rbx]
  00dc8:    	lea    rdi,[rsp-0x18]
  00dcd:    	mov    QWORD PTR [rdi],rax
  00dd0:    	mov    QWORD PTR [rbx],rdi
  00dd3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ddc:    	mov    QWORD PTR [rsp-0x38],rcx
  00de1:    	mov    rax,QWORD PTR [rbp-0x30]
  00de5:    	mov    QWORD PTR [rsp-0x38],rax
  00dea: 00 	mov    rdi,0x0
  00df1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00dfa: 00 	movabs rax,0x0
  00e04:    	mov    QWORD PTR [rsp-0x28],rax
  00e09: 00 	movabs r13,0x0
  00e13:    	call   0xfffef228
  00e18:    	lea    rdi,[rbp-0x8]
  00e1c:    	mov    QWORD PTR [rbx],rdi
  00e1f:    	movq   xmm3,QWORD PTR [rsp]
  00e24:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00e2a:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00e30:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00e36:    	add    rsp,0x20
  00e3a:    	test   rax,rax
  00e3d:    	je     0x3823d
  00e43: ff 	mov    QWORD PTR [rbp-0x90],rax
:00066 
:00068 %12 = %13.call y()                   [<INVALID>]
  00e4a: 01 	sub    DWORD PTR [rip+0xee3],0x1        # 0x1d34
  00e51:    	je     0x38275
  00e57:    	sub    rsp,0x20
  00e5b:    	movq   QWORD PTR [rsp],xmm3
  00e60:    	movq   QWORD PTR [rsp+0x8],xmm5
  00e66:    	movq   QWORD PTR [rsp+0x10],xmm6
  00e6c:    	movq   QWORD PTR [rsp+0x18],xmm7
  00e72: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00e79: 00 	movabs rax,0x5600b75a2280
  00e83:    	call   rax
  00e85:    	mov    r15d,eax
  00e88: 00 	cmp    r15d,DWORD PTR [rip+0xead]        # 0x1d3c
  00e8f:    	jne    0x38297
  00e95:    	mov    eax,DWORD PTR [rip+0xffffffffffff0ef0]        # 0xffff1d8b
  00e9b:    	cmp    DWORD PTR [rip+0xe97],eax        # 0x1d38
  00ea1:    	jne    0x38297
  00ea7:    	mov    rax,QWORD PTR [rbx]
  00eaa:    	lea    rdi,[rsp-0x18]
  00eaf:    	mov    QWORD PTR [rdi],rax
  00eb2:    	mov    QWORD PTR [rbx],rdi
  00eb5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ebe:    	mov    QWORD PTR [rsp-0x38],rcx
  00ec3: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00eca:    	mov    QWORD PTR [rsp-0x38],rax
  00ecf: 00 	mov    rdi,0x0
  00ed6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00edf: 00 	movabs rax,0x0
  00ee9:    	mov    QWORD PTR [rsp-0x28],rax
  00eee: 00 	movabs r13,0x0
  00ef8:    	call   0xfffef228
  00efd:    	lea    rdi,[rbp-0x8]
  00f01:    	mov    QWORD PTR [rbx],rdi
  00f04:    	movq   xmm3,QWORD PTR [rsp]
  00f09:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00f0f:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00f15:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00f1b:    	add    rsp,0x20
  00f1f:    	test   rax,rax
  00f22:    	je     0x38306
  00f28: ff 	mov    QWORD PTR [rbp-0x88],rax
:00069 
:00071 %14 = %1.call dir()                  [<INVALID>]
  00f2f: 01 	sub    DWORD PTR [rip+0xe0a],0x1        # 0x1d40
  00f36:    	je     0x3833e
  00f3c:    	sub    rsp,0x20
  00f40:    	movq   QWORD PTR [rsp],xmm3
  00f45:    	movq   QWORD PTR [rsp+0x8],xmm5
  00f4b:    	movq   QWORD PTR [rsp+0x10],xmm6
  00f51:    	movq   QWORD PTR [rsp+0x18],xmm7
  00f57:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f5b: 00 	movabs rax,0x5600b75a2280
  00f65:    	call   rax
  00f67:    	mov    r15d,eax
  00f6a: 00 	cmp    r15d,DWORD PTR [rip+0xdd7]        # 0x1d48
  00f71:    	jne    0x38360
  00f77:    	mov    eax,DWORD PTR [rip+0xffffffffffff0e0e]        # 0xffff1d8b
  00f7d:    	cmp    DWORD PTR [rip+0xdc1],eax        # 0x1d44
  00f83:    	jne    0x38360
  00f89:    	mov    rax,QWORD PTR [rbx]
  00f8c:    	lea    rdi,[rsp-0x18]
  00f91:    	mov    QWORD PTR [rdi],rax
  00f94:    	mov    QWORD PTR [rbx],rdi
  00f97: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fa0:    	mov    QWORD PTR [rsp-0x38],rcx
  00fa5:    	mov    rax,QWORD PTR [rbp-0x30]
  00fa9:    	mov    QWORD PTR [rsp-0x38],rax
  00fae: 00 	mov    rdi,0x0
  00fb5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fbe: 00 	movabs rax,0x0
  00fc8:    	mov    QWORD PTR [rsp-0x28],rax
  00fcd: 00 	movabs r13,0x0
  00fd7:    	call   0xfffef228
  00fdc:    	lea    rdi,[rbp-0x8]
  00fe0:    	mov    QWORD PTR [rbx],rdi
  00fe3:    	movq   xmm3,QWORD PTR [rsp]
  00fe8:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00fee:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00ff4:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00ffa:    	add    rsp,0x20
  00ffe:    	test   rax,rax
  01001:    	je     0x383cc
  01007: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 
:00074 %13 = %14.call y()                   [<INVALID>]
  0100e: 01 	sub    DWORD PTR [rip+0xd37],0x1        # 0x1d4c
  01015:    	je     0x38404
  0101b:    	sub    rsp,0x20
  0101f:    	movq   QWORD PTR [rsp],xmm3
  01024:    	movq   QWORD PTR [rsp+0x8],xmm5
  0102a:    	movq   QWORD PTR [rsp+0x10],xmm6
  01030:    	movq   QWORD PTR [rsp+0x18],xmm7
  01036: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0103d: 00 	movabs rax,0x5600b75a2280
  01047:    	call   rax
  01049:    	mov    r15d,eax
  0104c: 00 	cmp    r15d,DWORD PTR [rip+0xd01]        # 0x1d54
  01053:    	jne    0x38426
  01059:    	mov    eax,DWORD PTR [rip+0xffffffffffff0d2c]        # 0xffff1d8b
  0105f:    	cmp    DWORD PTR [rip+0xceb],eax        # 0x1d50
  01065:    	jne    0x38426
  0106b:    	mov    rax,QWORD PTR [rbx]
  0106e:    	lea    rdi,[rsp-0x18]
  01073:    	mov    QWORD PTR [rdi],rax
  01076:    	mov    QWORD PTR [rbx],rdi
  01079: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01082:    	mov    QWORD PTR [rsp-0x38],rcx
  01087: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0108e:    	mov    QWORD PTR [rsp-0x38],rax
  01093: 00 	mov    rdi,0x0
  0109a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010a3: 00 	movabs rax,0x0
  010ad:    	mov    QWORD PTR [rsp-0x28],rax
  010b2: 00 	movabs r13,0x0
  010bc:    	call   0xfffef228
  010c1:    	lea    rdi,[rbp-0x8]
  010c5:    	mov    QWORD PTR [rbx],rdi
  010c8:    	movq   xmm3,QWORD PTR [rsp]
  010cd:    	movq   xmm5,QWORD PTR [rsp+0x8]
  010d3:    	movq   xmm6,QWORD PTR [rsp+0x10]
  010d9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  010df:    	add    rsp,0x20
  010e3:    	test   rax,rax
  010e6:    	je     0x38495
  010ec: ff 	mov    QWORD PTR [rbp-0x90],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  010f3: 01 	sub    DWORD PTR [rip+0xc5e],0x1        # 0x1d58
  010fa:    	je     0x384cd
  01100: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01107:    	mov    rsi,QWORD PTR [rbp-0x60]
  0110b:    	sub    rsp,0x20
  0110f:    	movq   QWORD PTR [rsp],xmm3
  01114:    	movq   QWORD PTR [rsp+0x8],xmm5
  0111a:    	movq   QWORD PTR [rsp+0x10],xmm6
  01120:    	movq   QWORD PTR [rsp+0x18],xmm7
  01126:    	mov    rdx,rdi
  01129:    	mov    rcx,rsi
  0112c:    	mov    rdi,rbx
  0112f:    	mov    rsi,r12
  01132: 00 	movabs rax,0x5600b7598f60
  0113c:    	call   rax
  0113e:    	movq   xmm3,QWORD PTR [rsp]
  01143:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01149:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0114f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01155:    	add    rsp,0x20
  01159: 00 	movabs r13,0x5600b92b5840
  01163:    	test   rax,rax
  01166:    	je     0xfffef263
  0116c: ff 	mov    QWORD PTR [rbp-0x90],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  01173: 01 	sub    DWORD PTR [rip+0xbe2],0x1        # 0x1d5c
  0117a:    	je     0x38518
  01180: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01187: ff 	mov    rsi,QWORD PTR [rbp-0x90]
  0118e:    	sub    rsp,0x20
  01192:    	movq   QWORD PTR [rsp],xmm3
  01197:    	movq   QWORD PTR [rsp+0x8],xmm5
  0119d:    	movq   QWORD PTR [rsp+0x10],xmm6
  011a3:    	movq   QWORD PTR [rsp+0x18],xmm7
  011a9:    	mov    rdx,rdi
  011ac:    	mov    rcx,rsi
  011af:    	mov    rdi,rbx
  011b2:    	mov    rsi,r12
  011b5: 00 	movabs rax,0x5600b75970e0
  011bf:    	call   rax
  011c1:    	movq   xmm3,QWORD PTR [rsp]
  011c6:    	movq   xmm5,QWORD PTR [rsp+0x8]
  011cc:    	movq   xmm6,QWORD PTR [rsp+0x10]
  011d2:    	movq   xmm7,QWORD PTR [rsp+0x18]
  011d8:    	add    rsp,0x20
  011dc: 00 	movabs r13,0x5600b92b5850
  011e6:    	test   rax,rax
  011e9:    	je     0xfffef263
  011ef: ff 	mov    QWORD PTR [rbp-0x88],rax
:00079 %14 = %1.call org()                  [<INVALID>]
  011f6: 01 	sub    DWORD PTR [rip+0xb63],0x1        # 0x1d60
  011fd:    	je     0x38563
  01203:    	sub    rsp,0x20
  01207:    	movq   QWORD PTR [rsp],xmm3
  0120c:    	movq   QWORD PTR [rsp+0x8],xmm5
  01212:    	movq   QWORD PTR [rsp+0x10],xmm6
  01218:    	movq   QWORD PTR [rsp+0x18],xmm7
  0121e:    	mov    rdi,QWORD PTR [rbp-0x30]
  01222: 00 	movabs rax,0x5600b75a2280
  0122c:    	call   rax
  0122e:    	mov    r15d,eax
  01231: 00 	cmp    r15d,DWORD PTR [rip+0xb30]        # 0x1d68
  01238:    	jne    0x38585
  0123e:    	mov    eax,DWORD PTR [rip+0xffffffffffff0b47]        # 0xffff1d8b
  01244:    	cmp    DWORD PTR [rip+0xb1a],eax        # 0x1d64
  0124a:    	jne    0x38585
  01250:    	mov    rax,QWORD PTR [rbx]
  01253:    	lea    rdi,[rsp-0x18]
  01258:    	mov    QWORD PTR [rdi],rax
  0125b:    	mov    QWORD PTR [rbx],rdi
  0125e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01267:    	mov    QWORD PTR [rsp-0x38],rcx
  0126c:    	mov    rax,QWORD PTR [rbp-0x30]
  01270:    	mov    QWORD PTR [rsp-0x38],rax
  01275: 00 	mov    rdi,0x0
  0127c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01285: 00 	movabs rax,0x0
  0128f:    	mov    QWORD PTR [rsp-0x28],rax
  01294: 00 	movabs r13,0x0
  0129e:    	call   0xfffef228
  012a3:    	lea    rdi,[rbp-0x8]
  012a7:    	mov    QWORD PTR [rbx],rdi
  012aa:    	movq   xmm3,QWORD PTR [rsp]
  012af:    	movq   xmm5,QWORD PTR [rsp+0x8]
  012b5:    	movq   xmm6,QWORD PTR [rsp+0x10]
  012bb:    	movq   xmm7,QWORD PTR [rsp+0x18]
  012c1:    	add    rsp,0x20
  012c5:    	test   rax,rax
  012c8:    	je     0x385f1
  012ce: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 
:00082 %13 = %14.call z()                   [<INVALID>]
  012d5: 01 	sub    DWORD PTR [rip+0xa90],0x1        # 0x1d6c
  012dc:    	je     0x38629
  012e2:    	sub    rsp,0x20
  012e6:    	movq   QWORD PTR [rsp],xmm3
  012eb:    	movq   QWORD PTR [rsp+0x8],xmm5
  012f1:    	movq   QWORD PTR [rsp+0x10],xmm6
  012f7:    	movq   QWORD PTR [rsp+0x18],xmm7
  012fd: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01304: 00 	movabs rax,0x5600b75a2280
  0130e:    	call   rax
  01310:    	mov    r15d,eax
  01313: 00 	cmp    r15d,DWORD PTR [rip+0xa5a]        # 0x1d74
  0131a:    	jne    0x3864b
  01320:    	mov    eax,DWORD PTR [rip+0xffffffffffff0a65]        # 0xffff1d8b
  01326:    	cmp    DWORD PTR [rip+0xa44],eax        # 0x1d70
  0132c:    	jne    0x3864b
  01332:    	mov    rax,QWORD PTR [rbx]
  01335:    	lea    rdi,[rsp-0x18]
  0133a:    	mov    QWORD PTR [rdi],rax
  0133d:    	mov    QWORD PTR [rbx],rdi
  01340: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01349:    	mov    QWORD PTR [rsp-0x38],rcx
  0134e: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01355:    	mov    QWORD PTR [rsp-0x38],rax
  0135a: 00 	mov    rdi,0x0
  01361: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0136a: 00 	movabs rax,0x0
  01374:    	mov    QWORD PTR [rsp-0x28],rax
  01379: 00 	movabs r13,0x0
  01383:    	call   0xfffef228
  01388:    	lea    rdi,[rbp-0x8]
  0138c:    	mov    QWORD PTR [rbx],rdi
  0138f:    	movq   xmm3,QWORD PTR [rsp]
  01394:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0139a:    	movq   xmm6,QWORD PTR [rsp+0x10]
  013a0:    	movq   xmm7,QWORD PTR [rsp+0x18]
  013a6:    	add    rsp,0x20
  013aa:    	test   rax,rax
  013ad:    	je     0x386ba
  013b3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00083 
:00085 %15 = %1.call dir()                  [<INVALID>]
  013ba: 01 	sub    DWORD PTR [rip+0x9b7],0x1        # 0x1d78
  013c1:    	je     0x386f2
  013c7:    	sub    rsp,0x20
  013cb:    	movq   QWORD PTR [rsp],xmm3
  013d0:    	movq   QWORD PTR [rsp+0x8],xmm5
  013d6:    	movq   QWORD PTR [rsp+0x10],xmm6
  013dc:    	movq   QWORD PTR [rsp+0x18],xmm7
  013e2:    	mov    rdi,QWORD PTR [rbp-0x30]
  013e6: 00 	movabs rax,0x5600b75a2280
  013f0:    	call   rax
  013f2:    	mov    r15d,eax
  013f5: 00 	cmp    r15d,DWORD PTR [rip+0x984]        # 0x1d80
  013fc:    	jne    0x38714
  01402:    	mov    eax,DWORD PTR [rip+0xffffffffffff0983]        # 0xffff1d8b
  01408:    	cmp    DWORD PTR [rip+0x96e],eax        # 0x1d7c
  0140e:    	jne    0x38714
  01414:    	mov    rax,QWORD PTR [rbx]
  01417:    	lea    rdi,[rsp-0x18]
  0141c:    	mov    QWORD PTR [rdi],rax
  0141f:    	mov    QWORD PTR [rbx],rdi
  01422: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0142b:    	mov    QWORD PTR [rsp-0x38],rcx
  01430:    	mov    rax,QWORD PTR [rbp-0x30]
  01434:    	mov    QWORD PTR [rsp-0x38],rax
  01439: 00 	mov    rdi,0x0
  01440: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01449: 00 	movabs rax,0x0
  01453:    	mov    QWORD PTR [rsp-0x28],rax
  01458: 00 	movabs r13,0x0
  01462:    	call   0xfffef228
  01467:    	lea    rdi,[rbp-0x8]
  0146b:    	mov    QWORD PTR [rbx],rdi
  0146e:    	movq   xmm3,QWORD PTR [rsp]
  01473:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01479:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0147f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01485:    	add    rsp,0x20
  01489:    	test   rax,rax
  0148c:    	je     0x38780
  01492: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00086 
:00088 %14 = %15.call z()                   [<INVALID>]
  01499: 01 	sub    DWORD PTR [rip+0x8e4],0x1        # 0x1d84
  014a0:    	je     0x387b8
  014a6:    	sub    rsp,0x20
  014aa:    	movq   QWORD PTR [rsp],xmm3
  014af:    	movq   QWORD PTR [rsp+0x8],xmm5
  014b5:    	movq   QWORD PTR [rsp+0x10],xmm6
  014bb:    	movq   QWORD PTR [rsp+0x18],xmm7
  014c1: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  014c8: 00 	movabs rax,0x5600b75a2280
  014d2:    	call   rax
  014d4:    	mov    r15d,eax
  014d7: 00 	cmp    r15d,DWORD PTR [rip+0x8ae]        # 0x1d8c
  014de:    	jne    0x387da
  014e4:    	mov    eax,DWORD PTR [rip+0xffffffffffff08a1]        # 0xffff1d8b
  014ea:    	cmp    DWORD PTR [rip+0x898],eax        # 0x1d88
  014f0:    	jne    0x387da
  014f6:    	mov    rax,QWORD PTR [rbx]
  014f9:    	lea    rdi,[rsp-0x18]
  014fe:    	mov    QWORD PTR [rdi],rax
  01501:    	mov    QWORD PTR [rbx],rdi
  01504: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0150d:    	mov    QWORD PTR [rsp-0x38],rcx
  01512: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01519:    	mov    QWORD PTR [rsp-0x38],rax
  0151e: 00 	mov    rdi,0x0
  01525: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0152e: 00 	movabs rax,0x0
  01538:    	mov    QWORD PTR [rsp-0x28],rax
  0153d: 00 	movabs r13,0x0
  01547:    	call   0xfffef228
  0154c:    	lea    rdi,[rbp-0x8]
  01550:    	mov    QWORD PTR [rbx],rdi
  01553:    	movq   xmm3,QWORD PTR [rsp]
  01558:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0155e:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01564:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0156a:    	add    rsp,0x20
  0156e:    	test   rax,rax
  01571:    	je     0x38849
  01577: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  0157e: 01 	sub    DWORD PTR [rip+0x80b],0x1        # 0x1d90
  01585:    	je     0x38881
  0158b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01592:    	mov    rsi,QWORD PTR [rbp-0x60]
  01596:    	sub    rsp,0x20
  0159a:    	movq   QWORD PTR [rsp],xmm3
  0159f:    	movq   QWORD PTR [rsp+0x8],xmm5
  015a5:    	movq   QWORD PTR [rsp+0x10],xmm6
  015ab:    	movq   QWORD PTR [rsp+0x18],xmm7
  015b1:    	mov    rdx,rdi
  015b4:    	mov    rcx,rsi
  015b7:    	mov    rdi,rbx
  015ba:    	mov    rsi,r12
  015bd: 00 	movabs rax,0x5600b7598f60
  015c7:    	call   rax
  015c9:    	movq   xmm3,QWORD PTR [rsp]
  015ce:    	movq   xmm5,QWORD PTR [rsp+0x8]
  015d4:    	movq   xmm6,QWORD PTR [rsp+0x10]
  015da:    	movq   xmm7,QWORD PTR [rsp+0x18]
  015e0:    	add    rsp,0x20
  015e4: 00 	movabs r13,0x5600b92b5920
  015ee:    	test   rax,rax
  015f1:    	je     0xfffef263
  015f7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  015fe: 01 	sub    DWORD PTR [rip+0x78f],0x1        # 0x1d94
  01605:    	je     0x388cc
  0160b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01612: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  01619:    	sub    rsp,0x20
  0161d:    	movq   QWORD PTR [rsp],xmm3
  01622:    	movq   QWORD PTR [rsp+0x8],xmm5
  01628:    	movq   QWORD PTR [rsp+0x10],xmm6
  0162e:    	movq   QWORD PTR [rsp+0x18],xmm7
  01634:    	mov    rdx,rdi
  01637:    	mov    rcx,rsi
  0163a:    	mov    rdi,rbx
  0163d:    	mov    rsi,r12
  01640: 00 	movabs rax,0x5600b75970e0
  0164a:    	call   rax
  0164c:    	movq   xmm3,QWORD PTR [rsp]
  01651:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01657:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0165d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01663:    	add    rsp,0x20
  01667: 00 	movabs r13,0x5600b92b5930
  01671:    	test   rax,rax
  01674:    	je     0xfffef263
  0167a: ff 	mov    QWORD PTR [rbp-0x90],rax
:00093 %9 = %10.call new(%11; 3)            [<INVALID>]
  01681: 01 	sub    DWORD PTR [rip+0x710],0x1        # 0x1d98
  01688:    	je     0x38917
  0168e:    	sub    rsp,0x20
  01692:    	movq   QWORD PTR [rsp],xmm3
  01697:    	movq   QWORD PTR [rsp+0x8],xmm5
  0169d:    	movq   QWORD PTR [rsp+0x10],xmm6
  016a3:    	movq   QWORD PTR [rsp+0x18],xmm7
  016a9:    	mov    rdi,QWORD PTR [rbp-0x78]
  016ad: 00 	movabs rax,0x5600b75a2280
  016b7:    	call   rax
  016b9:    	mov    r15d,eax
  016bc: 00 	cmp    r15d,DWORD PTR [rip+0x6dd]        # 0x1da0
  016c3:    	jne    0x38939
  016c9:    	mov    eax,DWORD PTR [rip+0xffffffffffff06bc]        # 0xffff1d8b
  016cf:    	cmp    DWORD PTR [rip+0x6c7],eax        # 0x1d9c
  016d5:    	jne    0x38939
  016db:    	mov    rax,QWORD PTR [rbx]
  016de:    	lea    rdi,[rsp-0x18]
  016e3:    	mov    QWORD PTR [rdi],rax
  016e6:    	mov    QWORD PTR [rbx],rdi
  016e9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016f2:    	mov    QWORD PTR [rsp-0x38],rcx
  016f7:    	mov    rax,QWORD PTR [rbp-0x78]
  016fb:    	mov    QWORD PTR [rsp-0x38],rax
  01700: 00 	mov    rdi,0x3
  01707:    	mov    rax,QWORD PTR [rbp-0x80]
  0170b:    	mov    QWORD PTR [rsp-0x40],rax
  01710: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01717:    	mov    QWORD PTR [rsp-0x48],rax
  0171c: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01723:    	mov    QWORD PTR [rsp-0x50],rax
  01728: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01731: 00 	movabs rax,0x0
  0173b:    	mov    QWORD PTR [rsp-0x28],rax
  01740: 00 	movabs r13,0x0
  0174a:    	call   0xfffef228
  0174f:    	lea    rdi,[rbp-0x8]
  01753:    	mov    QWORD PTR [rbx],rdi
  01756:    	movq   xmm3,QWORD PTR [rsp]
  0175b:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01761:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01767:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0176d:    	add    rsp,0x20
  01771:    	test   rax,rax
  01774:    	je     0x389a5
  0177a:    	mov    QWORD PTR [rbp-0x70],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [<INVALID>]
  0177e: 01 	sub    DWORD PTR [rip+0x61f],0x1        # 0x1da4
  01785:    	je     0x389dd
  0178b:    	sub    rsp,0x20
  0178f:    	movq   QWORD PTR [rsp],xmm3
  01794:    	movq   QWORD PTR [rsp+0x8],xmm5
  0179a:    	movq   QWORD PTR [rsp+0x10],xmm6
  017a0:    	movq   QWORD PTR [rsp+0x18],xmm7
  017a6:    	mov    rdi,QWORD PTR [rbp-0x38]
  017aa: 00 	movabs rax,0x5600b75a2280
  017b4:    	call   rax
  017b6:    	mov    r15d,eax
  017b9: 00 	cmp    r15d,DWORD PTR [rip+0x5ec]        # 0x1dac
  017c0:    	jne    0x389ff
  017c6:    	mov    eax,DWORD PTR [rip+0xffffffffffff05bf]        # 0xffff1d8b
  017cc:    	cmp    DWORD PTR [rip+0x5d6],eax        # 0x1da8
  017d2:    	jne    0x389ff
  017d8:    	mov    rax,QWORD PTR [rbx]
  017db:    	lea    rdi,[rsp-0x18]
  017e0:    	mov    QWORD PTR [rdi],rax
  017e3:    	mov    QWORD PTR [rbx],rdi
  017e6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017ef:    	mov    QWORD PTR [rsp-0x38],rcx
  017f4:    	mov    rax,QWORD PTR [rbp-0x38]
  017f8:    	mov    QWORD PTR [rsp-0x38],rax
  017fd: 00 	mov    rdi,0x1
  01804:    	mov    rax,QWORD PTR [rbp-0x70]
  01808:    	mov    QWORD PTR [rsp-0x40],rax
  0180d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01816: 00 	movabs rax,0x0
  01820:    	mov    QWORD PTR [rsp-0x28],rax
  01825: 00 	movabs r13,0x0
  0182f:    	call   0xfffef228
  01834:    	lea    rdi,[rbp-0x8]
  01838:    	mov    QWORD PTR [rbx],rdi
  0183b:    	movq   xmm3,QWORD PTR [rsp]
  01840:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01846:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0184c:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01852:    	add    rsp,0x20
  01856:    	test   rax,rax
  01859:    	je     0x38a6b
:00097 
:00099 %9 = %2.call pl()                    [<INVALID>]
  0185f: 01 	sub    DWORD PTR [rip+0x54a],0x1        # 0x1db0
  01866:    	je     0x38aa3
  0186c:    	sub    rsp,0x20
  01870:    	movq   QWORD PTR [rsp],xmm3
  01875:    	movq   QWORD PTR [rsp+0x8],xmm5
  0187b:    	movq   QWORD PTR [rsp+0x10],xmm6
  01881:    	movq   QWORD PTR [rsp+0x18],xmm7
  01887:    	mov    rdi,QWORD PTR [rbp-0x38]
  0188b: 00 	movabs rax,0x5600b75a2280
  01895:    	call   rax
  01897:    	mov    r15d,eax
  0189a: 00 	cmp    r15d,DWORD PTR [rip+0x517]        # 0x1db8
  018a1:    	jne    0x38ac5
  018a7:    	mov    eax,DWORD PTR [rip+0xffffffffffff04de]        # 0xffff1d8b
  018ad:    	cmp    DWORD PTR [rip+0x501],eax        # 0x1db4
  018b3:    	jne    0x38ac5
  018b9:    	mov    rax,QWORD PTR [rbx]
  018bc:    	lea    rdi,[rsp-0x18]
  018c1:    	mov    QWORD PTR [rdi],rax
  018c4:    	mov    QWORD PTR [rbx],rdi
  018c7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  018d0:    	mov    QWORD PTR [rsp-0x38],rcx
  018d5:    	mov    rax,QWORD PTR [rbp-0x38]
  018d9:    	mov    QWORD PTR [rsp-0x38],rax
  018de: 00 	mov    rdi,0x0
  018e5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018ee: 00 	movabs rax,0x0
  018f8:    	mov    QWORD PTR [rsp-0x28],rax
  018fd: 00 	movabs r13,0x0
  01907:    	call   0xfffef228
  0190c:    	lea    rdi,[rbp-0x8]
  01910:    	mov    QWORD PTR [rbx],rdi
  01913:    	movq   xmm3,QWORD PTR [rsp]
  01918:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0191e:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01924:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0192a:    	add    rsp,0x20
  0192e:    	test   rax,rax
  01931:    	je     0x38b31
  01937:    	mov    QWORD PTR [rbp-0x70],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  0193b:    	mov    rdi,QWORD PTR [rbp-0x28]
  0193f:    	sub    rsp,0x20
  01943:    	movq   QWORD PTR [rsp],xmm3
  01948:    	movq   QWORD PTR [rsp+0x8],xmm5
  0194e:    	movq   QWORD PTR [rsp+0x10],xmm6
  01954:    	movq   QWORD PTR [rsp+0x18],xmm7
  0195a: 00 	mov    rsi,0x85
  01961:    	mov    rdx,r12
  01964: 00 	movabs rax,0x5600b75c5460
  0196e:    	call   rax
  01970:    	movq   xmm3,QWORD PTR [rsp]
  01975:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0197b:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01981:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01987:    	add    rsp,0x20
  0198b:    	mov    QWORD PTR [rbp-0x78],rax
:00103 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  0198f: 01 	sub    DWORD PTR [rip+0x426],0x1        # 0x1dbc
  01996:    	je     0x38b69
  0199c:    	sub    rsp,0x20
  019a0:    	movq   QWORD PTR [rsp],xmm3
  019a5:    	movq   QWORD PTR [rsp+0x8],xmm5
  019ab:    	movq   QWORD PTR [rsp+0x10],xmm6
  019b1:    	movq   QWORD PTR [rsp+0x18],xmm7
  019b7:    	mov    rdi,QWORD PTR [rbp-0x70]
  019bb: 00 	movabs rax,0x5600b75a2280
  019c5:    	call   rax
  019c7:    	mov    r15d,eax
  019ca: 00 	cmp    r15d,DWORD PTR [rip+0x3f3]        # 0x1dc4
  019d1:    	jne    0x38b8b
  019d7:    	mov    eax,DWORD PTR [rip+0xffffffffffff03ae]        # 0xffff1d8b
  019dd:    	cmp    DWORD PTR [rip+0x3dd],eax        # 0x1dc0
  019e3:    	jne    0x38b8b
  019e9:    	mov    rax,QWORD PTR [rbx]
  019ec:    	lea    rdi,[rsp-0x18]
  019f1:    	mov    QWORD PTR [rdi],rax
  019f4:    	mov    QWORD PTR [rbx],rdi
  019f7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a00:    	mov    QWORD PTR [rsp-0x38],rcx
  01a05:    	mov    rax,QWORD PTR [rbp-0x70]
  01a09:    	mov    QWORD PTR [rsp-0x38],rax
  01a0e: 00 	mov    rdi,0x1
  01a15:    	mov    rax,QWORD PTR [rbp-0x78]
  01a19:    	mov    QWORD PTR [rsp-0x40],rax
  01a1e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a27: 00 	movabs rax,0x0
  01a31:    	mov    QWORD PTR [rsp-0x28],rax
  01a36: 00 	movabs r13,0x0
  01a40:    	call   0xfffef228
  01a45:    	lea    rdi,[rbp-0x8]
  01a49:    	mov    QWORD PTR [rbx],rdi
  01a4c:    	movq   xmm3,QWORD PTR [rsp]
  01a51:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01a57:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01a5d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a63:    	add    rsp,0x20
  01a67:    	test   rax,rax
  01a6a:    	je     0x38bf7
  01a70:    	mov    QWORD PTR [rbp-0x68],rax
:00104 
:00106 %9 = %8.call vnormalize()            [<INVALID>]
  01a74: 01 	sub    DWORD PTR [rip+0x34d],0x1        # 0x1dc8
  01a7b:    	je     0x38c2f
  01a81:    	sub    rsp,0x20
  01a85:    	movq   QWORD PTR [rsp],xmm3
  01a8a:    	movq   QWORD PTR [rsp+0x8],xmm5
  01a90:    	movq   QWORD PTR [rsp+0x10],xmm6
  01a96:    	movq   QWORD PTR [rsp+0x18],xmm7
  01a9c:    	mov    rdi,QWORD PTR [rbp-0x68]
  01aa0: 00 	movabs rax,0x5600b75a2280
  01aaa:    	call   rax
  01aac:    	mov    r15d,eax
  01aaf: 00 	cmp    r15d,DWORD PTR [rip+0x31a]        # 0x1dd0
  01ab6:    	jne    0x38c51
  01abc:    	mov    eax,DWORD PTR [rip+0xffffffffffff02c9]        # 0xffff1d8b
  01ac2:    	cmp    DWORD PTR [rip+0x304],eax        # 0x1dcc
  01ac8:    	jne    0x38c51
  01ace:    	mov    rax,QWORD PTR [rbx]
  01ad1:    	lea    rdi,[rsp-0x18]
  01ad6:    	mov    QWORD PTR [rdi],rax
  01ad9:    	mov    QWORD PTR [rbx],rdi
  01adc: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01ae5:    	mov    QWORD PTR [rsp-0x38],rcx
  01aea:    	mov    rax,QWORD PTR [rbp-0x68]
  01aee:    	mov    QWORD PTR [rsp-0x38],rax
  01af3: 00 	mov    rdi,0x0
  01afa: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b03: 00 	movabs rax,0x0
  01b0d:    	mov    QWORD PTR [rsp-0x28],rax
  01b12: 00 	movabs r13,0x0
  01b1c:    	call   0xfffef228
  01b21:    	lea    rdi,[rbp-0x8]
  01b25:    	mov    QWORD PTR [rbx],rdi
  01b28:    	movq   xmm3,QWORD PTR [rsp]
  01b2d:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01b33:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01b39:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b3f:    	add    rsp,0x20
  01b43:    	test   rax,rax
  01b46:    	je     0x38cbd
  01b4c:    	mov    QWORD PTR [rbp-0x70],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [<INVALID>]
  01b50: 01 	sub    DWORD PTR [rip+0x27d],0x1        # 0x1dd4
  01b57:    	je     0x38cf5
  01b5d:    	sub    rsp,0x20
  01b61:    	movq   QWORD PTR [rsp],xmm3
  01b66:    	movq   QWORD PTR [rsp+0x8],xmm5
  01b6c:    	movq   QWORD PTR [rsp+0x10],xmm6
  01b72:    	movq   QWORD PTR [rsp+0x18],xmm7
  01b78:    	mov    rdi,QWORD PTR [rbp-0x38]
  01b7c: 00 	movabs rax,0x5600b75a2280
  01b86:    	call   rax
  01b88:    	mov    r15d,eax
  01b8b: 00 	cmp    r15d,DWORD PTR [rip+0x24a]        # 0x1ddc
  01b92:    	jne    0x38d17
  01b98:    	mov    eax,DWORD PTR [rip+0xffffffffffff01ed]        # 0xffff1d8b
  01b9e:    	cmp    DWORD PTR [rip+0x234],eax        # 0x1dd8
  01ba4:    	jne    0x38d17
  01baa:    	mov    rax,QWORD PTR [rbx]
  01bad:    	lea    rdi,[rsp-0x18]
  01bb2:    	mov    QWORD PTR [rdi],rax
  01bb5:    	mov    QWORD PTR [rbx],rdi
  01bb8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01bc1:    	mov    QWORD PTR [rsp-0x38],rcx
  01bc6:    	mov    rax,QWORD PTR [rbp-0x38]
  01bca:    	mov    QWORD PTR [rsp-0x38],rax
  01bcf: 00 	mov    rdi,0x1
  01bd6:    	mov    rax,QWORD PTR [rbp-0x70]
  01bda:    	mov    QWORD PTR [rsp-0x40],rax
  01bdf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01be8: 00 	movabs rax,0x0
  01bf2:    	mov    QWORD PTR [rsp-0x28],rax
  01bf7: 00 	movabs r13,0x0
  01c01:    	call   0xfffef228
  01c06:    	lea    rdi,[rbp-0x8]
  01c0a:    	mov    QWORD PTR [rbx],rdi
  01c0d:    	movq   xmm3,QWORD PTR [rsp]
  01c12:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01c18:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01c1e:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c24:    	add    rsp,0x20
  01c28:    	test   rax,rax
  01c2b:    	je     0x38d83
:00110 
:00112 br =>:00113
  01c31:    	jmp    0x38e9f
:00113 br =>:00114
  01c36:    	jmp    0x38f12
:00114 %9 = nil
  01c3b: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00115 ret %9
  01c43:    	mov    rax,QWORD PTR [rbp-0x70]
  01c47:    	leave  
  01c48:    	ret    
==> start whole compile: <unnamed> FuncId(77) self_class:Scene start:[00000] bytecode:0x5600b928f480
<== finished compile. elapsed:27.8µs
offset:Pos(76728) code: 236 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x50
  0000b: mov    eax,edx
  0000d: sub    eax,0x1
  00010: jge    0x32
  00016: neg    rdx
  00019: lea    rdx,[rbp+rdx*8-0x30]
  0001e: mov    QWORD PTR [rdx],0x4
  00025: sub    rdx,0x8
  00029: add    eax,0x1
  0002c: jne    0x1e
  00032: mov    rax,0x4
  00039: mov    QWORD PTR [rbp-0x38],rax
  0003d: mov    QWORD PTR [rbp-0x40],rax
  00041: mov    QWORD PTR [rbp-0x48],rax
  00045: mov    rdi,QWORD PTR [rbp-0x28]
  00049: test   rdi,0x7
  00050: jne    0x37165
  00056: cmp    DWORD PTR [rdi+0x4],0x32
  0005a: jne    0x37165
:00000 init reg_num:5 arg_num:1 stack_offset:5
:00001 %3 = dynvar(1, %3)
  00060: mov    rax,QWORD PTR [rbp-0x10]
  00064: mov    rax,QWORD PTR [rax-0x30]
  00068: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = literal[79]
  0006c: mov    rax,0x9f
  00073: mov    QWORD PTR [rbp-0x48],rax
:00003 %2 = %3.call times(&%4)              [Integer]
  00077: mov    rdi,QWORD PTR [rbp-0x40]
  0007b: test   rdi,0x1
  00082: je     0x37174
  00088: cmp    DWORD PTR [rip+0xfffffffffffeff1c],0x26        # 0xfffeffab
  0008f: jne    0x37174
  00095: mov    r9,QWORD PTR [rbp-0x48]
  00099: mov    rdx,rdi
  0009c: mov    rax,QWORD PTR [rbx]
  0009f: lea    rdi,[rsp-0x18]
  000a4: mov    QWORD PTR [rdi],rax
  000a7: mov    QWORD PTR [rbx],rdi
  000aa: mov    QWORD PTR [rsp-0x20],0x0
  000b3: mov    QWORD PTR [rsp-0x38],rcx
  000b8: lea    rcx,[rbp-0x50]
  000bc: mov    r8,0x0
  000c3: call   0x37183
  000c8: lea    rdi,[rbp-0x8]
  000cc: mov    QWORD PTR [rbx],rdi
  000cf: movabs r13,0x5600b928f4d0
  000d9: test   rax,rax
  000dc: je     0xfffed483
  000e2: mov    QWORD PTR [rbp-0x38],rax
:00004 
:00006 ret %2
  000e6: mov    rax,QWORD PTR [rbp-0x38]
  000ea: leave  
  000eb: ret    
==> start whole compile: vcross FuncId(64) self_class:Vec start:[00000] bytecode:0x5600b92b2b70
<== finished compile. elapsed:66.5µs
offset:Pos(76964) code: 2454 bytes  data: 78 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0x70
  0000b: mov    eax,edx
  0000d: sub    eax,0x1
  00010: jge    0x32
  00016: neg    rdx
  00019: lea    rdx,[rbp+rdx*8-0x30]
  0001e: mov    QWORD PTR [rdx],0x4
  00025: sub    rdx,0x8
  00029: add    eax,0x1
  0002c: jne    0x1e
  00032: mov    rax,0x4
  00039: mov    QWORD PTR [rbp-0x38],rax
  0003d: mov    QWORD PTR [rbp-0x40],rax
  00041: mov    QWORD PTR [rbp-0x48],rax
  00045: mov    QWORD PTR [rbp-0x50],rax
  00049: mov    QWORD PTR [rbp-0x58],rax
  0004d: mov    QWORD PTR [rbp-0x60],rax
  00051: mov    QWORD PTR [rbp-0x68],rax
  00055: mov    rdi,QWORD PTR [rbp-0x28]
  00059: test   rdi,0x7
  00060: jne    0x370c9
  00066: cmp    DWORD PTR [rdi+0x4],0x28
  0006a: jne    0x370c9
:00000 init reg_num:9 arg_num:1 stack_offset:7
:00001 %3 = const[Vec]                      [Vec]
  00070: mov    rax,QWORD PTR [rip+0xfffffffffffefe55]        # 0xfffefecc
  00077: cmp    rax,QWORD PTR [rip+0x92e]        # 0x9ac
  0007e: jne    0x370d8
  00084: mov    rax,QWORD PTR [rip+0x911]        # 0x99c
  0008b: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = @y: Vec[IvarId(1)]
  0008f: mov    rdi,QWORD PTR [rbp-0x28]
  00093: mov    rax,QWORD PTR [rdi+0x18]
  00097: mov    QWORD PTR [rbp-0x48],rax
:00003 %5 = %1.call z()                     [Vec]
  0009b: mov    rdi,QWORD PTR [rbp-0x30]
  0009f: test   rdi,0x7
  000a6: jne    0x3711e
  000ac: cmp    DWORD PTR [rdi+0x4],0x28
  000b0: jne    0x3711e
  000b6: cmp    DWORD PTR [rip+0xfffffffffffefe02],0x26        # 0xfffefebf
  000bd: jne    0x3711e
  000c3: mov    esi,DWORD PTR [rip+0x8ef]        # 0x9b8
  000c9: cmp    esi,0xffffffff
  000cc: je     0x3712d
  000d2: cmp    WORD PTR [rdi+0x2],0x3
  000d7: jne    0xf0
  000dd: cmp    esi,0x6
  000e0: jge    0xf0
  000e6: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000eb: jmp    0xfc
  000f0: movabs rax,0x5600b755dfe0
  000fa: call   rax
  000fc: mov    QWORD PTR [rbp-0x50],rax
:00004 
:00006 %4 = %4 * %5                         [Float][Float]
  00100: mov    rdi,QWORD PTR [rbp-0x48]
  00104: test   rdi,0x1
  0010b: jne    0x37156
  00111: test   rdi,0x2
  00118: je     0x154
  0011e: xorps  xmm2,xmm2
  00121: movabs rax,0x8000000000000002
  0012b: cmp    rdi,rax
  0012e: je     0x166
  00134: mov    rax,rdi
  00137: sar    rax,0x3f
  0013b: add    rax,0x2
  0013f: and    rdi,0xfffffffffffffffc
  00143: or     rdi,rax
  00146: rol    rdi,0x3d
  0014a: movq   xmm2,rdi
  0014f: jmp    0x166
  00154: call   0xfffed3d0
  00159: test   rax,rax
  0015c: je     0x37156
  00162: movq   xmm2,xmm0
  00166: mov    rdi,QWORD PTR [rbp-0x50]
  0016a: test   rdi,0x1
  00171: jne    0x37165
  00177: test   rdi,0x2
  0017e: je     0x1ba
  00184: xorps  xmm3,xmm3
  00187: movabs rax,0x8000000000000002
  00191: cmp    rdi,rax
  00194: je     0x1cc
  0019a: mov    rax,rdi
  0019d: sar    rax,0x3f
  001a1: add    rax,0x2
  001a5: and    rdi,0xfffffffffffffffc
  001a9: or     rdi,rax
  001ac: rol    rdi,0x3d
  001b0: movq   xmm3,rdi
  001b5: jmp    0x1cc
  001ba: call   0xfffed3d0
  001bf: test   rax,rax
  001c2: je     0x37165
  001c8: movq   xmm3,xmm0
  001cc: mulsd  xmm2,xmm3
:00007 %5 = @z: Vec[IvarId(2)]
  001d0: mov    rdi,QWORD PTR [rbp-0x28]
  001d4: mov    rax,QWORD PTR [rdi+0x20]
  001d8: mov    QWORD PTR [rbp-0x50],rax
:00008 %6 = %1.call y()                     [Vec]
  001dc: mov    rdi,QWORD PTR [rbp-0x30]
  001e0: test   rdi,0x7
  001e7: jne    0x37174
  001ed: cmp    DWORD PTR [rdi+0x4],0x28
  001f1: jne    0x37174
  001f7: cmp    DWORD PTR [rip+0xfffffffffffefcc1],0x26        # 0xfffefebf
  001fe: jne    0x37174
  00204: mov    esi,DWORD PTR [rip+0x7b6]        # 0x9c0
  0020a: cmp    esi,0xffffffff
  0020d: je     0x37190
  00213: cmp    WORD PTR [rdi+0x2],0x3
  00218: jne    0x231
  0021e: cmp    esi,0x6
  00221: jge    0x231
  00227: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0022c: jmp    0x24f
  00231: sub    rsp,0x10
  00235: movq   QWORD PTR [rsp],xmm2
  0023a: movabs rax,0x5600b755dfe0
  00244: call   rax
  00246: movq   xmm2,QWORD PTR [rsp]
  0024b: add    rsp,0x10
  0024f: mov    QWORD PTR [rbp-0x58],rax
:00009 
:00011 %5 = %5 * %6                         [Float][Float]
  00253: mov    rdi,QWORD PTR [rbp-0x50]
  00257: test   rdi,0x1
  0025e: jne    0x371cb
  00264: test   rdi,0x2
  0026b: je     0x2a7
  00271: xorps  xmm3,xmm3
  00274: movabs rax,0x8000000000000002
  0027e: cmp    rdi,rax
  00281: je     0x2b9
  00287: mov    rax,rdi
  0028a: sar    rax,0x3f
  0028e: add    rax,0x2
  00292: and    rdi,0xfffffffffffffffc
  00296: or     rdi,rax
  00299: rol    rdi,0x3d
  0029d: movq   xmm3,rdi
  002a2: jmp    0x2b9
  002a7: call   0xfffed3d0
  002ac: test   rax,rax
  002af: je     0x371cb
  002b5: movq   xmm3,xmm0
  002b9: mov    rdi,QWORD PTR [rbp-0x58]
  002bd: test   rdi,0x1
  002c4: jne    0x371e7
  002ca: test   rdi,0x2
  002d1: je     0x30d
  002d7: xorps  xmm4,xmm4
  002da: movabs rax,0x8000000000000002
  002e4: cmp    rdi,rax
  002e7: je     0x31f
  002ed: mov    rax,rdi
  002f0: sar    rax,0x3f
  002f4: add    rax,0x2
  002f8: and    rdi,0xfffffffffffffffc
  002fc: or     rdi,rax
  002ff: rol    rdi,0x3d
  00303: movq   xmm4,rdi
  00308: jmp    0x31f
  0030d: call   0xfffed3d0
  00312: test   rax,rax
  00315: je     0x371e7
  0031b: movq   xmm4,xmm0
  0031f: mulsd  xmm3,xmm4
:00012 %4 = %4 - %5                         [Float][Float]
  00323: subsd  xmm2,xmm3
:00013 %5 = @z: Vec[IvarId(2)]
  00327: mov    rdi,QWORD PTR [rbp-0x28]
  0032b: mov    rax,QWORD PTR [rdi+0x20]
  0032f: mov    QWORD PTR [rbp-0x50],rax
:00014 %6 = %1.call x()                     [Vec]
  00333: mov    rdi,QWORD PTR [rbp-0x30]
  00337: test   rdi,0x7
  0033e: jne    0x37203
  00344: cmp    DWORD PTR [rdi+0x4],0x28
  00348: jne    0x37203
  0034e: cmp    DWORD PTR [rip+0xfffffffffffefb6a],0x26        # 0xfffefebf
  00355: jne    0x37203
  0035b: mov    esi,DWORD PTR [rip+0x667]        # 0x9c8
  00361: cmp    esi,0xffffffff
  00364: je     0x3721f
  0036a: cmp    WORD PTR [rdi+0x2],0x3
  0036f: jne    0x388
  00375: cmp    esi,0x6
  00378: jge    0x388
  0037e: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00383: jmp    0x3a6
  00388: sub    rsp,0x10
  0038c: movq   QWORD PTR [rsp],xmm2
  00391: movabs rax,0x5600b755dfe0
  0039b: call   rax
  0039d: movq   xmm2,QWORD PTR [rsp]
  003a2: add    rsp,0x10
  003a6: mov    QWORD PTR [rbp-0x58],rax
:00015 
:00017 %5 = %5 * %6                         [Float][Float]
  003aa: mov    rdi,QWORD PTR [rbp-0x50]
  003ae: test   rdi,0x1
  003b5: jne    0x3725a
  003bb: test   rdi,0x2
  003c2: je     0x3fe
  003c8: xorps  xmm3,xmm3
  003cb: movabs rax,0x8000000000000002
  003d5: cmp    rdi,rax
  003d8: je     0x410
  003de: mov    rax,rdi
  003e1: sar    rax,0x3f
  003e5: add    rax,0x2
  003e9: and    rdi,0xfffffffffffffffc
  003ed: or     rdi,rax
  003f0: rol    rdi,0x3d
  003f4: movq   xmm3,rdi
  003f9: jmp    0x410
  003fe: call   0xfffed3d0
  00403: test   rax,rax
  00406: je     0x3725a
  0040c: movq   xmm3,xmm0
  00410: mov    rdi,QWORD PTR [rbp-0x58]
  00414: test   rdi,0x1
  0041b: jne    0x37276
  00421: test   rdi,0x2
  00428: je     0x464
  0042e: xorps  xmm4,xmm4
  00431: movabs rax,0x8000000000000002
  0043b: cmp    rdi,rax
  0043e: je     0x476
  00444: mov    rax,rdi
  00447: sar    rax,0x3f
  0044b: add    rax,0x2
  0044f: and    rdi,0xfffffffffffffffc
  00453: or     rdi,rax
  00456: rol    rdi,0x3d
  0045a: movq   xmm4,rdi
  0045f: jmp    0x476
  00464: call   0xfffed3d0
  00469: test   rax,rax
  0046c: je     0x37276
  00472: movq   xmm4,xmm0
  00476: mulsd  xmm3,xmm4
:00018 %6 = @x: Vec[IvarId(0)]
  0047a: mov    rdi,QWORD PTR [rbp-0x28]
  0047e: mov    rax,QWORD PTR [rdi+0x10]
  00482: mov    QWORD PTR [rbp-0x58],rax
:00019 %7 = %1.call z()                     [Vec]
  00486: mov    rdi,QWORD PTR [rbp-0x30]
  0048a: test   rdi,0x7
  00491: jne    0x37292
  00497: cmp    DWORD PTR [rdi+0x4],0x28
  0049b: jne    0x37292
  004a1: cmp    DWORD PTR [rip+0xfffffffffffefa17],0x26        # 0xfffefebf
  004a8: jne    0x37292
  004ae: mov    esi,DWORD PTR [rip+0x51c]        # 0x9d0
  004b4: cmp    esi,0xffffffff
  004b7: je     0x372bb
  004bd: cmp    WORD PTR [rdi+0x2],0x3
  004c2: jne    0x4db
  004c8: cmp    esi,0x6
  004cb: jge    0x4db
  004d1: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004d6: jmp    0x505
  004db: sub    rsp,0x10
  004df: movq   QWORD PTR [rsp],xmm2
  004e4: movq   QWORD PTR [rsp+0x8],xmm3
  004ea: movabs rax,0x5600b755dfe0
  004f4: call   rax
  004f6: movq   xmm2,QWORD PTR [rsp]
  004fb: movq   xmm3,QWORD PTR [rsp+0x8]
  00501: add    rsp,0x10
  00505: mov    QWORD PTR [rbp-0x60],rax
:00020 
:00022 %6 = %6 * %7                         [Float][Float]
  00509: mov    rdi,QWORD PTR [rbp-0x58]
  0050d: test   rdi,0x1
  00514: jne    0x37302
  0051a: test   rdi,0x2
  00521: je     0x55d
  00527: xorps  xmm4,xmm4
  0052a: movabs rax,0x8000000000000002
  00534: cmp    rdi,rax
  00537: je     0x56f
  0053d: mov    rax,rdi
  00540: sar    rax,0x3f
  00544: add    rax,0x2
  00548: and    rdi,0xfffffffffffffffc
  0054c: or     rdi,rax
  0054f: rol    rdi,0x3d
  00553: movq   xmm4,rdi
  00558: jmp    0x56f
  0055d: call   0xfffed3d0
  00562: test   rax,rax
  00565: je     0x37302
  0056b: movq   xmm4,xmm0
  0056f: mov    rdi,QWORD PTR [rbp-0x60]
  00573: test   rdi,0x1
  0057a: jne    0x3732b
  00580: test   rdi,0x2
  00587: je     0x5c3
  0058d: xorps  xmm5,xmm5
  00590: movabs rax,0x8000000000000002
  0059a: cmp    rdi,rax
  0059d: je     0x5d5
  005a3: mov    rax,rdi
  005a6: sar    rax,0x3f
  005aa: add    rax,0x2
  005ae: and    rdi,0xfffffffffffffffc
  005b2: or     rdi,rax
  005b5: rol    rdi,0x3d
  005b9: movq   xmm5,rdi
  005be: jmp    0x5d5
  005c3: call   0xfffed3d0
  005c8: test   rax,rax
  005cb: je     0x3732b
  005d1: movq   xmm5,xmm0
  005d5: mulsd  xmm4,xmm5
:00023 %5 = %5 - %6                         [Float][Float]
  005d9: subsd  xmm3,xmm4
:00024 %6 = @x: Vec[IvarId(0)]
  005dd: mov    rdi,QWORD PTR [rbp-0x28]
  005e1: mov    rax,QWORD PTR [rdi+0x10]
  005e5: mov    QWORD PTR [rbp-0x58],rax
:00025 %7 = %1.call y()                     [Vec]
  005e9: mov    rdi,QWORD PTR [rbp-0x30]
  005ed: test   rdi,0x7
  005f4: jne    0x37354
  005fa: cmp    DWORD PTR [rdi+0x4],0x28
  005fe: jne    0x37354
  00604: cmp    DWORD PTR [rip+0xfffffffffffef8b4],0x26        # 0xfffefebf
  0060b: jne    0x37354
  00611: mov    esi,DWORD PTR [rip+0x3c1]        # 0x9d8
  00617: cmp    esi,0xffffffff
  0061a: je     0x3737d
  00620: cmp    WORD PTR [rdi+0x2],0x3
  00625: jne    0x63e
  0062b: cmp    esi,0x6
  0062e: jge    0x63e
  00634: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00639: jmp    0x668
  0063e: sub    rsp,0x10
  00642: movq   QWORD PTR [rsp],xmm2
  00647: movq   QWORD PTR [rsp+0x8],xmm3
  0064d: movabs rax,0x5600b755dfe0
  00657: call   rax
  00659: movq   xmm2,QWORD PTR [rsp]
  0065e: movq   xmm3,QWORD PTR [rsp+0x8]
  00664: add    rsp,0x10
  00668: mov    QWORD PTR [rbp-0x60],rax
:00026 
:00028 %6 = %6 * %7                         [Float][Float]
  0066c: mov    rdi,QWORD PTR [rbp-0x58]
  00670: test   rdi,0x1
  00677: jne    0x373c4
  0067d: test   rdi,0x2
  00684: je     0x6c0
  0068a: xorps  xmm4,xmm4
  0068d: movabs rax,0x8000000000000002
  00697: cmp    rdi,rax
  0069a: je     0x6d2
  006a0: mov    rax,rdi
  006a3: sar    rax,0x3f
  006a7: add    rax,0x2
  006ab: and    rdi,0xfffffffffffffffc
  006af: or     rdi,rax
  006b2: rol    rdi,0x3d
  006b6: movq   xmm4,rdi
  006bb: jmp    0x6d2
  006c0: call   0xfffed3d0
  006c5: test   rax,rax
  006c8: je     0x373c4
  006ce: movq   xmm4,xmm0
  006d2: mov    rdi,QWORD PTR [rbp-0x60]
  006d6: test   rdi,0x1
  006dd: jne    0x373ed
  006e3: test   rdi,0x2
  006ea: je     0x726
  006f0: xorps  xmm5,xmm5
  006f3: movabs rax,0x8000000000000002
  006fd: cmp    rdi,rax
  00700: je     0x738
  00706: mov    rax,rdi
  00709: sar    rax,0x3f
  0070d: add    rax,0x2
  00711: and    rdi,0xfffffffffffffffc
  00715: or     rdi,rax
  00718: rol    rdi,0x3d
  0071c: movq   xmm5,rdi
  00721: jmp    0x738
  00726: call   0xfffed3d0
  0072b: test   rax,rax
  0072e: je     0x373ed
  00734: movq   xmm5,xmm0
  00738: mulsd  xmm4,xmm5
:00029 %7 = @y: Vec[IvarId(1)]
  0073c: mov    rdi,QWORD PTR [rbp-0x28]
  00740: mov    rax,QWORD PTR [rdi+0x18]
  00744: mov    QWORD PTR [rbp-0x60],rax
:00030 %8 = %1.call x()                     [Vec]
  00748: mov    rdi,QWORD PTR [rbp-0x30]
  0074c: test   rdi,0x7
  00753: jne    0x37416
  00759: cmp    DWORD PTR [rdi+0x4],0x28
  0075d: jne    0x37416
  00763: cmp    DWORD PTR [rip+0xfffffffffffef755],0x26        # 0xfffefebf
  0076a: jne    0x37416
  00770: mov    esi,DWORD PTR [rip+0x26a]        # 0x9e0
  00776: cmp    esi,0xffffffff
  00779: je     0x3744c
  0077f: cmp    WORD PTR [rdi+0x2],0x3
  00784: jne    0x79d
  0078a: cmp    esi,0x6
  0078d: jge    0x79d
  00793: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00798: jmp    0x7d3
  0079d: sub    rsp,0x20
  007a1: movq   QWORD PTR [rsp],xmm2
  007a6: movq   QWORD PTR [rsp+0x8],xmm3
  007ac: movq   QWORD PTR [rsp+0x10],xmm4
  007b2: movabs rax,0x5600b755dfe0
  007bc: call   rax
  007be: movq   xmm2,QWORD PTR [rsp]
  007c3: movq   xmm3,QWORD PTR [rsp+0x8]
  007c9: movq   xmm4,QWORD PTR [rsp+0x10]
  007cf: add    rsp,0x20
  007d3: mov    QWORD PTR [rbp-0x68],rax
:00031 
:00033 %7 = %7 * %8                         [Float][Float]
  007d7: mov    rdi,QWORD PTR [rbp-0x60]
  007db: test   rdi,0x1
  007e2: jne    0x3749f
  007e8: test   rdi,0x2
  007ef: je     0x82b
  007f5: xorps  xmm5,xmm5
  007f8: movabs rax,0x8000000000000002
  00802: cmp    rdi,rax
  00805: je     0x83d
  0080b: mov    rax,rdi
  0080e: sar    rax,0x3f
  00812: add    rax,0x2
  00816: and    rdi,0xfffffffffffffffc
  0081a: or     rdi,rax
  0081d: rol    rdi,0x3d
  00821: movq   xmm5,rdi
  00826: jmp    0x83d
  0082b: call   0xfffed3d0
  00830: test   rax,rax
  00833: je     0x3749f
  00839: movq   xmm5,xmm0
  0083d: mov    rdi,QWORD PTR [rbp-0x68]
  00841: test   rdi,0x1
  00848: jne    0x374d5
  0084e: test   rdi,0x2
  00855: je     0x891
  0085b: xorps  xmm6,xmm6
  0085e: movabs rax,0x8000000000000002
  00868: cmp    rdi,rax
  0086b: je     0x8a3
  00871: mov    rax,rdi
  00874: sar    rax,0x3f
  00878: add    rax,0x2
  0087c: and    rdi,0xfffffffffffffffc
  00880: or     rdi,rax
  00883: rol    rdi,0x3d
  00887: movq   xmm6,rdi
  0088c: jmp    0x8a3
  00891: call   0xfffed3d0
  00896: test   rax,rax
  00899: je     0x374d5
  0089f: movq   xmm6,xmm0
  008a3: mulsd  xmm5,xmm6
:00034 %6 = %6 - %7                         [Float][Float]
  008a7: subsd  xmm4,xmm5
:00035 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
  008ab: movq   xmm0,xmm2
  008af: call   0xfffed4c3
  008b4: mov    QWORD PTR [rbp-0x48],rax
  008b8: movq   xmm0,xmm3
  008bc: call   0xfffed4c3
  008c1: mov    QWORD PTR [rbp-0x50],rax
  008c5: movq   xmm0,xmm4
  008c9: call   0xfffed4c3
  008ce: mov    QWORD PTR [rbp-0x58],rax
  008d2: mov    rdi,QWORD PTR [rbp-0x40]
  008d6: test   rdi,0x7
  008dd: jne    0x3750b
  008e3: cmp    DWORD PTR [rdi+0x4],0x29
  008e7: jne    0x3750b
  008ed: cmp    DWORD PTR [rip+0xfffffffffffef5cb],0x26        # 0xfffefebf
  008f4: jne    0x3750b
  008fa: mov    r9,0x0
  00901: sub    rsp,0x30
  00905: movq   QWORD PTR [rsp],xmm2
  0090a: movq   QWORD PTR [rsp+0x8],xmm3
  00910: movq   QWORD PTR [rsp+0x10],xmm4
  00916: movq   QWORD PTR [rsp+0x18],xmm5
  0091c: movq   QWORD PTR [rsp+0x20],xmm6
  00922: mov    rdx,rdi
  00925: mov    rax,QWORD PTR [rbx]
  00928: lea    rdi,[rsp-0x18]
  0092d: mov    QWORD PTR [rdi],rax
  00930: mov    QWORD PTR [rbx],rdi
  00933: mov    QWORD PTR [rsp-0x20],0x0
  0093c: mov    QWORD PTR [rsp-0x38],rcx
  00941: lea    rcx,[rbp-0x48]
  00945: mov    r8,0x3
  0094c: call   0x37527
  00951: lea    rdi,[rbp-0x8]
  00955: mov    QWORD PTR [rbx],rdi
  00958: movq   xmm2,QWORD PTR [rsp]
  0095d: movq   xmm3,QWORD PTR [rsp+0x8]
  00963: movq   xmm4,QWORD PTR [rsp+0x10]
  00969: movq   xmm5,QWORD PTR [rsp+0x18]
  0096f: movq   xmm6,QWORD PTR [rsp+0x20]
  00975: add    rsp,0x30
  00979: movabs r13,0x5600b92b2dc0
  00983: test   rax,rax
  00986: je     0xfffed397
  0098c: mov    QWORD PTR [rbp-0x38],rax
:00036 
:00038 ret %2
  00990: mov    rax,QWORD PTR [rbp-0x38]
  00994: leave  
  00995: ret    
==> start whole compile: <unnamed> FuncId(82) self_class:Scene start:[00000] bytecode:0x5600b92f0960
<== finished compile. elapsed:149.2µs
offset:Pos(79496) code: 9371 bytes  data: 417 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x1
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x38],rax
  00040:    	mov    QWORD PTR [rbp-0x40],rax
  00044:    	mov    QWORD PTR [rbp-0x48],rax
  00048:    	mov    QWORD PTR [rbp-0x50],rax
  0004c:    	mov    QWORD PTR [rbp-0x58],rax
  00050:    	mov    QWORD PTR [rbp-0x60],rax
  00054:    	mov    QWORD PTR [rbp-0x68],rax
  00058:    	mov    QWORD PTR [rbp-0x70],rax
  0005c:    	mov    QWORD PTR [rbp-0x78],rax
  00060:    	mov    QWORD PTR [rbp-0x80],rax
  00064: ff 	mov    QWORD PTR [rbp-0x88],rax
  0006b: ff 	mov    QWORD PTR [rbp-0x90],rax
  00072: ff 	mov    QWORD PTR [rbp-0x98],rax
  00079: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00080: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00087: ff 	mov    QWORD PTR [rbp-0xb0],rax
  0008e: ff 	mov    QWORD PTR [rbp-0xb8],rax
  00095: ff 	mov    QWORD PTR [rbp-0xc0],rax
  0009c:    	mov    rdi,QWORD PTR [rbp-0x28]
  000a0: 00 	test   rdi,0x7
  000a7:    	jne    0x36b75
  000ad:    	cmp    DWORD PTR [rdi+0x4],0x32
  000b1:    	jne    0x36b75
:00000 init reg_num:20 arg_num:1 stack_offset:13
:00001 %14 = dynvar(4, %4)
  000b7:    	mov    rax,QWORD PTR [rbp-0x10]
  000bb:    	mov    rax,QWORD PTR [rax]
  000be:    	mov    rax,QWORD PTR [rax]
  000c1:    	mov    rax,QWORD PTR [rax]
  000c4:    	mov    rax,QWORD PTR [rax-0x38]
  000c8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00002 %14 = %14 + 1: i16                   [Integer][Integer]
  000cf: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000d6: 00 	test   rdi,0x1
  000dd:    	je     0x36b84
  000e3:    	add    rdi,0x2
  000e7:    	jo     0x36b84
  000ed: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00003 dynvar(4, %4) = %14
  000f4:    	mov    rax,QWORD PTR [rbp-0x10]
  000f8:    	mov    rax,QWORD PTR [rax]
  000fb:    	mov    rax,QWORD PTR [rax]
  000fe:    	mov    rax,QWORD PTR [rax]
  00101: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00108:    	mov    QWORD PTR [rax-0x38],rdi
:00004 %14 = dynvar(4, %1)
  0010c:    	mov    rax,QWORD PTR [rbp-0x10]
  00110:    	mov    rax,QWORD PTR [rax]
  00113:    	mov    rax,QWORD PTR [rax]
  00116:    	mov    rax,QWORD PTR [rax]
  00119:    	mov    rax,QWORD PTR [rax-0x20]
  0011d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00005 %2 = %14.call to_f()                 [Integer]
  00124: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0012b: 00 	test   rdi,0x1
  00132:    	je     0x36b93
  00138: 26 	cmp    DWORD PTR [rip+0xfffffffffffef39c],0x26        # 0xfffef4db
  0013f:    	jne    0x36b93
  00145:    	sar    rdi,1
  00148:    	cvtsi2sd xmm2,rdi
:00006 
:00008 %14 = dynvar(4, %2)
  0014d:    	mov    rax,QWORD PTR [rbp-0x10]
  00151:    	mov    rax,QWORD PTR [rax]
  00154:    	mov    rax,QWORD PTR [rax]
  00157:    	mov    rax,QWORD PTR [rax]
  0015a:    	mov    rax,QWORD PTR [rax-0x28]
  0015e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00009 %3 = %14.call to_f()                 [Integer]
  00165: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0016c: 00 	test   rdi,0x1
  00173:    	je     0x36ba2
  00179: 26 	cmp    DWORD PTR [rip+0xfffffffffffef35b],0x26        # 0xfffef4db
  00180:    	jne    0x36ba2
  00186:    	sar    rdi,1
  00189:    	cvtsi2sd xmm3,rdi
:00010 
:00012 %14 = dynvar(2, %1)
  0018e:    	mov    rax,QWORD PTR [rbp-0x10]
  00192:    	mov    rax,QWORD PTR [rax]
  00195:    	mov    rax,QWORD PTR [rax-0x20]
  00199: ff 	mov    QWORD PTR [rbp-0x98],rax
:00013 %4 = %14.call to_f()                 [Integer]
  001a0: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001a7: 00 	test   rdi,0x1
  001ae:    	je     0x36bbe
  001b4: 26 	cmp    DWORD PTR [rip+0xfffffffffffef320],0x26        # 0xfffef4db
  001bb:    	jne    0x36bbe
  001c1:    	sar    rdi,1
  001c4:    	cvtsi2sd xmm4,rdi
:00014 
:00016 %14 = dynvar(3, %1)
  001c9:    	mov    rax,QWORD PTR [rbp-0x10]
  001cd:    	mov    rax,QWORD PTR [rax]
  001d0:    	mov    rax,QWORD PTR [rax]
  001d3:    	mov    rax,QWORD PTR [rax-0x20]
  001d7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00017 %5 = %14.call to_f()                 [Integer]
  001de: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001e5: 00 	test   rdi,0x1
  001ec:    	je     0x36be7
  001f2: 26 	cmp    DWORD PTR [rip+0xfffffffffffef2e2],0x26        # 0xfffef4db
  001f9:    	jne    0x36be7
  001ff:    	sar    rdi,1
  00202:    	cvtsi2sd xmm5,rdi
:00018 
:00020 %6 = %1.call to_f()                  [Integer]
  00207:    	mov    rdi,QWORD PTR [rbp-0x30]
  0020b: 00 	test   rdi,0x1
  00212:    	je     0x36c1d
  00218: 26 	cmp    DWORD PTR [rip+0xfffffffffffef2bc],0x26        # 0xfffef4db
  0021f:    	jne    0x36c1d
  00225:    	sar    rdi,1
  00228:    	cvtsi2sd xmm6,rdi
:00021 
:00023 %14 = dynvar(1, %1)
  0022d:    	mov    rax,QWORD PTR [rbp-0x10]
  00231:    	mov    rax,QWORD PTR [rax-0x20]
  00235: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %7 = %14.call to_f()                 [Integer]
  0023c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00243: 00 	test   rdi,0x1
  0024a:    	je     0x36c60
  00250: 26 	cmp    DWORD PTR [rip+0xfffffffffffef284],0x26        # 0xfffef4db
  00257:    	jne    0x36c60
  0025d:    	sar    rdi,1
  00260:    	cvtsi2sd xmm7,rdi
:00025 
:00027 %14 = dynvar(4, %5)
  00265:    	mov    rax,QWORD PTR [rbp-0x10]
  00269:    	mov    rax,QWORD PTR [rax]
  0026c:    	mov    rax,QWORD PTR [rax]
  0026f:    	mov    rax,QWORD PTR [rax]
  00272:    	mov    rax,QWORD PTR [rax-0x40]
  00276: ff 	mov    QWORD PTR [rbp-0x98],rax
:00028 %14 = %6 / %14                       [Float][Float]
  0027d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00284: 00 	test   rdi,0x1
  0028b:    	jne    0x36cb0
  00291: 00 	test   rdi,0x2
  00298:    	je     0x2d5
  0029e:    	xorps  xmm8,xmm8
  002a2: 00 	movabs rax,0x8000000000000002
  002ac:    	cmp    rdi,rax
  002af:    	je     0x2e8
  002b5:    	mov    rax,rdi
  002b8:    	sar    rax,0x3f
  002bc:    	add    rax,0x2
  002c0:    	and    rdi,0xfffffffffffffffc
  002c4:    	or     rdi,rax
  002c7:    	rol    rdi,0x3d
  002cb:    	movq   xmm8,rdi
  002d0:    	jmp    0x2e8
  002d5:    	call   0xfffec9ec
  002da:    	test   rax,rax
  002dd:    	je     0x36cb0
  002e3:    	movq   xmm8,xmm0
  002e8:    	movq   rax,xmm8
  002ed:    	test   rax,rax
  002f0:    	je     0xfffec9d8
  002f6:    	movq   xmm0,xmm6
  002fa:    	divsd  xmm0,xmm8
  002ff:    	movq   xmm8,xmm0
:00029 %14 = %4 + %14                       [Float][Float]
  00304:    	addsd  xmm8,xmm4
:00030 %15 = literal[2.0]
  00309: 21 	movq   xmm9,QWORD PTR [rip+0x2196]        # 0x24a8
  00312: 00 	mov    rax,0x2
  00319: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00031 %15 = %2 / %15                       [Float][Float]
  00320:    	movq   rax,xmm9
  00325:    	test   rax,rax
  00328:    	je     0xfffec9d8
  0032e:    	movq   xmm0,xmm2
  00332:    	divsd  xmm0,xmm9
  00337:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  0033c:    	subsd  xmm8,xmm9
:00033 %15 = literal[2.0]
  00341: 21 	movq   xmm9,QWORD PTR [rip+0x216e]        # 0x24b8
  0034a: 00 	mov    rax,0x2
  00351: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00034 %15 = %2 / %15                       [Float][Float]
  00358:    	movq   rax,xmm9
  0035d:    	test   rax,rax
  00360:    	je     0xfffec9d8
  00366:    	movq   xmm0,xmm2
  0036a:    	divsd  xmm0,xmm9
  0036f:    	movq   xmm9,xmm0
:00035 %8 = %14 / %15                       [Float][Float]
  00374:    	movq   xmm10,xmm8
  00379:    	movq   rax,xmm9
  0037e:    	test   rax,rax
  00381:    	je     0xfffec9d8
  00387:    	divsd  xmm10,xmm9
:00036 %14 = dynvar(4, %5)
  0038c:    	mov    rax,QWORD PTR [rbp-0x10]
  00390:    	mov    rax,QWORD PTR [rax]
  00393:    	mov    rax,QWORD PTR [rax]
  00396:    	mov    rax,QWORD PTR [rax]
  00399:    	mov    rax,QWORD PTR [rax-0x40]
  0039d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00037 %14 = %7 / %14                       [Float][Float]
  003a4: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003ab: 00 	test   rdi,0x1
  003b2:    	jne    0x36d0d
  003b8: 00 	test   rdi,0x2
  003bf:    	je     0x3fc
  003c5:    	xorps  xmm8,xmm8
  003c9: 00 	movabs rax,0x8000000000000002
  003d3:    	cmp    rdi,rax
  003d6:    	je     0x40f
  003dc:    	mov    rax,rdi
  003df:    	sar    rax,0x3f
  003e3:    	add    rax,0x2
  003e7:    	and    rdi,0xfffffffffffffffc
  003eb:    	or     rdi,rax
  003ee:    	rol    rdi,0x3d
  003f2:    	movq   xmm8,rdi
  003f7:    	jmp    0x40f
  003fc:    	call   0xfffec9ec
  00401:    	test   rax,rax
  00404:    	je     0x36d0d
  0040a:    	movq   xmm8,xmm0
  0040f:    	movq   rax,xmm8
  00414:    	test   rax,rax
  00417:    	je     0xfffec9d8
  0041d:    	movq   xmm0,xmm7
  00421:    	divsd  xmm0,xmm8
  00426:    	movq   xmm8,xmm0
:00038 %14 = %5 + %14                       [Float][Float]
  0042b:    	addsd  xmm8,xmm5
:00039 %15 = literal[2.0]
  00430: 20 	movq   xmm9,QWORD PTR [rip+0x208f]        # 0x24c8
  00439: 00 	mov    rax,0x2
  00440: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00040 %15 = %3 / %15                       [Float][Float]
  00447:    	movq   rax,xmm9
  0044c:    	test   rax,rax
  0044f:    	je     0xfffec9d8
  00455:    	movq   xmm0,xmm3
  00459:    	divsd  xmm0,xmm9
  0045e:    	movq   xmm9,xmm0
:00041 %14 = %14 - %15                      [Float][Float]
  00463:    	subsd  xmm8,xmm9
:00042 %14 = neg %14                        [Float]
  00468: 00 	xorps  xmm8,XMMWORD PTR [rip+0x2068]        # 0x24d8
:00043 %15 = literal[2.0]
  00470: 20 	movq   xmm9,QWORD PTR [rip+0x206f]        # 0x24e8
  00479: 00 	mov    rax,0x2
  00480: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00044 %15 = %3 / %15                       [Float][Float]
  00487:    	movq   rax,xmm9
  0048c:    	test   rax,rax
  0048f:    	je     0xfffec9d8
  00495:    	movq   xmm0,xmm3
  00499:    	divsd  xmm0,xmm9
  0049e:    	movq   xmm9,xmm0
:00045 %9 = %14 / %15                       [Float][Float]
  004a3:    	movq   xmm11,xmm8
  004a8:    	movq   rax,xmm9
  004ad:    	test   rax,rax
  004b0:    	je     0xfffec9d8
  004b6:    	divsd  xmm11,xmm9
:00046 %15 = const[Vec]                     [Vec]
  004bb: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffef026]        # 0xfffef4e8
  004c2: 00 	cmp    rax,QWORD PTR [rip+0x203f]        # 0x2508
  004c9:    	jne    0x36d89
  004cf: 00 	mov    rax,QWORD PTR [rip+0x2022]        # 0x24f8
  004d6: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00047 %16 = %8
:00048 %17 = %9
:00049 %18 = literal[-1.0]
  004dd: 20 	movq   xmm9,QWORD PTR [rip+0x2032]        # 0x2518
  004e6: 00 	movabs rax,0xff80000000000006
  004f0: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00050 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
  004f7:    	movq   xmm0,xmm10
  004fc:    	call   0xfffecadf
  00501: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00508:    	movq   xmm0,xmm11
  0050d:    	call   0xfffecadf
  00512: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00519: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00520: 00 	test   rdi,0x7
  00527:    	jne    0x36e47
  0052d:    	cmp    DWORD PTR [rdi+0x4],0x29
  00531:    	jne    0x36e47
  00537: 26 	cmp    DWORD PTR [rip+0xfffffffffffeef9d],0x26        # 0xfffef4db
  0053e:    	jne    0x36e47
  00544: 00 	mov    r9,0x0
  0054b:    	sub    rsp,0x50
  0054f:    	movq   QWORD PTR [rsp],xmm2
  00554:    	movq   QWORD PTR [rsp+0x8],xmm3
  0055a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00560:    	movq   QWORD PTR [rsp+0x18],xmm5
  00566:    	movq   QWORD PTR [rsp+0x20],xmm6
  0056c:    	movq   QWORD PTR [rsp+0x28],xmm7
  00572: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00579: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00580: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00587:    	mov    rdx,rdi
  0058a:    	mov    rax,QWORD PTR [rbx]
  0058d:    	lea    rdi,[rsp-0x18]
  00592:    	mov    QWORD PTR [rdi],rax
  00595:    	mov    QWORD PTR [rbx],rdi
  00598: 00 	mov    QWORD PTR [rsp-0x20],0x0
  005a1:    	mov    QWORD PTR [rsp-0x38],rcx
  005a6: ff 	lea    rcx,[rbp-0xa8]
  005ad: 00 	mov    r8,0x3
  005b4:    	call   0x36ec0
  005b9:    	lea    rdi,[rbp-0x8]
  005bd:    	mov    QWORD PTR [rbx],rdi
  005c0:    	movq   xmm2,QWORD PTR [rsp]
  005c5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005cb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005d1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005d7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  005dd:    	movq   xmm7,QWORD PTR [rsp+0x28]
  005e3: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  005ea: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  005f1: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  005f8:    	add    rsp,0x50
  005fc: 00 	movabs r13,0x5600b92f0ca0
  00606:    	test   rax,rax
  00609:    	je     0xfffec9b3
  0060f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00051 
:00053 %10 = %14.call vnormalize()          [Vec]
  00616: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0061d: 00 	test   rdi,0x7
  00624:    	jne    0x36ef2
  0062a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0062e:    	jne    0x36ef2
  00634: 26 	cmp    DWORD PTR [rip+0xfffffffffffeeea0],0x26        # 0xfffef4db
  0063b:    	jne    0x36ef2
  00641:    	sub    rsp,0x50
  00645:    	movq   QWORD PTR [rsp],xmm2
  0064a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00650:    	movq   QWORD PTR [rsp+0x10],xmm4
  00656:    	movq   QWORD PTR [rsp+0x18],xmm5
  0065c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00662:    	movq   QWORD PTR [rsp+0x28],xmm7
  00668: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0066f: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00676: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  0067d:    	mov    rax,QWORD PTR [rbx]
  00680:    	lea    rdi,[rsp-0x18]
  00685:    	mov    QWORD PTR [rdi],rax
  00688:    	mov    QWORD PTR [rbx],rdi
  0068b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00694:    	mov    QWORD PTR [rsp-0x38],rcx
  00699: ff 	mov    rax,QWORD PTR [rbp-0x98]
  006a0:    	mov    QWORD PTR [rsp-0x38],rax
  006a5: 00 	mov    rdi,0x0
  006ac: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006b5: 07 	movabs rax,0x700000043
  006bf:    	mov    QWORD PTR [rsp-0x28],rax
  006c4: 00 	movabs r13,0x5600b92c5690
  006ce:    	call   0xfffefe02
  006d3:    	lea    rdi,[rbp-0x8]
  006d7:    	mov    QWORD PTR [rbx],rdi
  006da:    	movq   xmm2,QWORD PTR [rsp]
  006df:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006e5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006eb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006f1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  006f7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  006fd: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00704: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0070b: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00712:    	add    rsp,0x50
  00716: 00 	movabs r13,0x5600b92f0cd0
  00720:    	test   rax,rax
  00723:    	je     0xfffec9b3
  00729:    	mov    QWORD PTR [rbp-0x78],rax
:00054 
:00056 %14 = const[Ray]                     [Ray]
  0072d: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeedb4]        # 0xfffef4e8
  00734: 00 	cmp    rax,QWORD PTR [rip+0x1dfd]        # 0x2538
  0073b:    	jne    0x36f6b
  00741: 00 	mov    rax,QWORD PTR [rip+0x1de0]        # 0x2528
  00748: ff 	mov    QWORD PTR [rbp-0x98],rax
:00057 %16 = const[Vec]                     [Vec]
  0074f: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeed92]        # 0xfffef4e8
  00756: 00 	cmp    rax,QWORD PTR [rip+0x1dfb]        # 0x2558
  0075d:    	jne    0x37029
  00763: 00 	mov    rax,QWORD PTR [rip+0x1dde]        # 0x2548
  0076a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00058 %17 = literal[0.0]
  00771: 1d 	movq   xmm8,QWORD PTR [rip+0x1dee]        # 0x2568
  0077a: 00 	movabs rax,0x8000000000000002
  00784: ff 	mov    QWORD PTR [rbp-0xb0],rax
:00059 %18 = literal[0.0]
  0078b: 1d 	movq   xmm9,QWORD PTR [rip+0x1de4]        # 0x2578
  00794: 00 	movabs rax,0x8000000000000002
  0079e: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00060 %19 = literal[0.0]
  007a5: 1d 	movq   xmm12,QWORD PTR [rip+0x1dda]        # 0x2588
  007ae: 00 	movabs rax,0x8000000000000002
  007b8: ff 	mov    QWORD PTR [rbp-0xc0],rax
:00061 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
  007bf: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  007c6: 00 	test   rdi,0x7
  007cd:    	jne    0x370e7
  007d3:    	cmp    DWORD PTR [rdi+0x4],0x29
  007d7:    	jne    0x370e7
  007dd: 26 	cmp    DWORD PTR [rip+0xfffffffffffeecf7],0x26        # 0xfffef4db
  007e4:    	jne    0x370e7
  007ea: 00 	mov    r9,0x0
  007f1:    	sub    rsp,0x60
  007f5:    	movq   QWORD PTR [rsp],xmm2
  007fa:    	movq   QWORD PTR [rsp+0x8],xmm3
  00800:    	movq   QWORD PTR [rsp+0x10],xmm4
  00806:    	movq   QWORD PTR [rsp+0x18],xmm5
  0080c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00812:    	movq   QWORD PTR [rsp+0x28],xmm7
  00818: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0081f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00826: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0082d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00834: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0083b:    	mov    rdx,rdi
  0083e:    	mov    rax,QWORD PTR [rbx]
  00841:    	lea    rdi,[rsp-0x18]
  00846:    	mov    QWORD PTR [rdi],rax
  00849:    	mov    QWORD PTR [rbx],rdi
  0084c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00855:    	mov    QWORD PTR [rsp-0x38],rcx
  0085a: ff 	lea    rcx,[rbp-0xb0]
  00861: 00 	mov    r8,0x3
  00868:    	call   0x37160
  0086d:    	lea    rdi,[rbp-0x8]
  00871:    	mov    QWORD PTR [rbx],rdi
  00874:    	movq   xmm2,QWORD PTR [rsp]
  00879:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0087f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00885:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0088b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00891:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00897: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0089e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008a5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008ac: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008b3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008ba:    	add    rsp,0x60
  008be: 00 	movabs r13,0x5600b92f0d50
  008c8:    	test   rax,rax
  008cb:    	je     0xfffec9b3
  008d1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00062 
:00064 %16 = %10
  008d8:    	mov    rax,QWORD PTR [rbp-0x78]
  008dc: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00065 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  008e3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  008ea: 00 	test   rdi,0x7
  008f1:    	jne    0x37192
  008f7:    	cmp    DWORD PTR [rdi+0x4],0x2f
  008fb:    	jne    0x37192
  00901: 26 	cmp    DWORD PTR [rip+0xfffffffffffeebd3],0x26        # 0xfffef4db
  00908:    	jne    0x37192
  0090e: 00 	mov    r9,0x0
  00915:    	sub    rsp,0x60
  00919:    	movq   QWORD PTR [rsp],xmm2
  0091e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00924:    	movq   QWORD PTR [rsp+0x10],xmm4
  0092a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00930:    	movq   QWORD PTR [rsp+0x20],xmm6
  00936:    	movq   QWORD PTR [rsp+0x28],xmm7
  0093c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00943: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0094a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00951: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00958: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0095f:    	mov    rdx,rdi
  00962:    	mov    rax,QWORD PTR [rbx]
  00965:    	lea    rdi,[rsp-0x18]
  0096a:    	mov    QWORD PTR [rdi],rax
  0096d:    	mov    QWORD PTR [rbx],rdi
  00970: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00979:    	mov    QWORD PTR [rsp-0x38],rcx
  0097e: ff 	lea    rcx,[rbp-0xa0]
  00985: 00 	mov    r8,0x2
  0098c:    	call   0x3720b
  00991:    	lea    rdi,[rbp-0x8]
  00995:    	mov    QWORD PTR [rbx],rdi
  00998:    	movq   xmm2,QWORD PTR [rsp]
  0099d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009a3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009a9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009af:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009b5:    	movq   xmm7,QWORD PTR [rsp+0x28]
  009bb: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  009c2: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  009c9: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  009d0: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  009d7: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  009de:    	add    rsp,0x60
  009e2: 00 	movabs r13,0x5600b92f0d90
  009ec:    	test   rax,rax
  009ef:    	je     0xfffec9b3
  009f5:    	mov    QWORD PTR [rbp-0x80],rax
:00066 
:00068 %14 = const[Isect]                   [Isect]
  009f9: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeeae8]        # 0xfffef4e8
  00a00: 00 	cmp    rax,QWORD PTR [rip+0x1ba1]        # 0x25a8
  00a07:    	jne    0x3723d
  00a0d: 00 	mov    rax,QWORD PTR [rip+0x1b84]        # 0x2598
  00a14: ff 	mov    QWORD PTR [rbp-0x98],rax
:00069 %12 = %14.call new()                 [#<Class:Isect>]
  00a1b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a22: 00 	test   rdi,0x7
  00a29:    	jne    0x37317
  00a2f:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a33:    	jne    0x37317
  00a39: 26 	cmp    DWORD PTR [rip+0xfffffffffffeea9b],0x26        # 0xfffef4db
  00a40:    	jne    0x37317
  00a46: 00 	mov    r9,0x0
  00a4d:    	sub    rsp,0x60
  00a51:    	movq   QWORD PTR [rsp],xmm2
  00a56:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a5c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a62:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a68:    	movq   QWORD PTR [rsp+0x20],xmm6
  00a6e:    	movq   QWORD PTR [rsp+0x28],xmm7
  00a74: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00a7b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00a82: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00a89: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00a90: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00a97:    	mov    rdx,rdi
  00a9a:    	mov    rax,QWORD PTR [rbx]
  00a9d:    	lea    rdi,[rsp-0x18]
  00aa2:    	mov    QWORD PTR [rdi],rax
  00aa5:    	mov    QWORD PTR [rbx],rdi
  00aa8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ab1:    	mov    QWORD PTR [rsp-0x38],rcx
  00ab6: ff 	lea    rcx,[rbp-0xa0]
  00abd: 00 	mov    r8,0x0
  00ac4:    	call   0x37390
  00ac9:    	lea    rdi,[rbp-0x8]
  00acd:    	mov    QWORD PTR [rbx],rdi
  00ad0:    	movq   xmm2,QWORD PTR [rsp]
  00ad5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00adb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ae1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ae7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00aed:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00af3: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00afa: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b01: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b08: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b0f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b16:    	add    rsp,0x60
  00b1a: 00 	movabs r13,0x5600b92f0dd0
  00b24:    	test   rax,rax
  00b27:    	je     0xfffec9b3
  00b2d: ff 	mov    QWORD PTR [rbp-0x88],rax
:00070 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00b34:    	mov    rdi,QWORD PTR [rbp-0x28]
  00b38:    	mov    rax,QWORD PTR [rdi+0x10]
  00b3c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00073 %15 = 0: i32
  00b43: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00074 %14 = %14.[%15]                      [Array][Integer]
  00b4e:    	sub    rsp,0x60
  00b52:    	movq   QWORD PTR [rsp],xmm2
  00b57:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b5d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b63:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b69:    	movq   QWORD PTR [rsp+0x20],xmm6
  00b6f:    	movq   QWORD PTR [rsp+0x28],xmm7
  00b75: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00b7c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00b83: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00b8a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00b91: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00b98: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00b9f: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00ba6:    	mov    rdi,rbx
  00ba9:    	mov    rsi,r12
  00bac: 00 	movabs r8,0x5600b92f0e08
  00bb6: 00 	movabs rax,0x5600b75c5240
  00bc0:    	call   rax
  00bc2:    	movq   xmm2,QWORD PTR [rsp]
  00bc7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bcd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00bd3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00bd9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00bdf:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00be5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00bec: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00bf3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00bfa: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c01: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c08:    	add    rsp,0x60
  00c0c: 00 	movabs r13,0x5600b92f0e10
  00c16:    	test   rax,rax
  00c19:    	je     0xfffec9b3
  00c1f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00075 %15 = %11
  00c26:    	mov    rax,QWORD PTR [rbp-0x80]
  00c2a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00076 %16 = %12
  00c31: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00c38: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00c3f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00c46: 00 	test   rdi,0x7
  00c4d:    	jne    0x373c2
  00c53:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00c57:    	jne    0x373c2
  00c5d: 26 	cmp    DWORD PTR [rip+0xfffffffffffee877],0x26        # 0xfffef4db
  00c64:    	jne    0x373c2
  00c6a:    	sub    rsp,0x60
  00c6e:    	movq   QWORD PTR [rsp],xmm2
  00c73:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c79:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c7f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c85:    	movq   QWORD PTR [rsp+0x20],xmm6
  00c8b:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c91: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00c98: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00c9f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ca6: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00cad: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00cb4:    	mov    rax,QWORD PTR [rbx]
  00cb7:    	lea    rdi,[rsp-0x18]
  00cbc:    	mov    QWORD PTR [rdi],rax
  00cbf:    	mov    QWORD PTR [rbx],rdi
  00cc2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ccb:    	mov    QWORD PTR [rsp-0x38],rcx
  00cd0: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00cd7:    	mov    QWORD PTR [rsp-0x38],rax
  00cdc: 00 	mov    rdi,0x2
  00ce3: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00cea:    	mov    QWORD PTR [rsp-0x40],rax
  00cef: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00cf6:    	mov    QWORD PTR [rsp-0x48],rax
  00cfb: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d04: 10 	movabs rax,0x1000000045
  00d0e:    	mov    QWORD PTR [rsp-0x28],rax
  00d13: 00 	movabs r13,0x5600b92b5360
  00d1d:    	call   0xffff010a
  00d22:    	lea    rdi,[rbp-0x8]
  00d26:    	mov    QWORD PTR [rbx],rdi
  00d29:    	movq   xmm2,QWORD PTR [rsp]
  00d2e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d34:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d3a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d40:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d46:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d4c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00d53: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00d5a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00d61: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00d68: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00d6f:    	add    rsp,0x60
  00d73: 00 	movabs r13,0x5600b92f0e50
  00d7d:    	test   rax,rax
  00d80:    	je     0xfffec9b3
:00078 
:00080 %14 = @spheres: Scene[IvarId(0)]
  00d86:    	mov    rdi,QWORD PTR [rbp-0x28]
  00d8a:    	mov    rax,QWORD PTR [rdi+0x10]
  00d8e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00081 %15 = 1: i32
  00d95: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  00da0:    	sub    rsp,0x60
  00da4:    	movq   QWORD PTR [rsp],xmm2
  00da9:    	movq   QWORD PTR [rsp+0x8],xmm3
  00daf:    	movq   QWORD PTR [rsp+0x10],xmm4
  00db5:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dbb:    	movq   QWORD PTR [rsp+0x20],xmm6
  00dc1:    	movq   QWORD PTR [rsp+0x28],xmm7
  00dc7: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00dce: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00dd5: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ddc: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00de3: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00dea: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00df1: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00df8:    	mov    rdi,rbx
  00dfb:    	mov    rsi,r12
  00dfe: 00 	movabs r8,0x5600b92f0e88
  00e08: 00 	movabs rax,0x5600b75c5240
  00e12:    	call   rax
  00e14:    	movq   xmm2,QWORD PTR [rsp]
  00e19:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e1f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e25:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e2b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e31:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e37: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00e3e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00e45: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00e4c: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00e53: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00e5a:    	add    rsp,0x60
  00e5e: 00 	movabs r13,0x5600b92f0e90
  00e68:    	test   rax,rax
  00e6b:    	je     0xfffec9b3
  00e71: ff 	mov    QWORD PTR [rbp-0x98],rax
:00083 %15 = %11
  00e78:    	mov    rax,QWORD PTR [rbp-0x80]
  00e7c: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00084 %16 = %12
  00e83: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00e8a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00085 _ = %14.call intersect(%15; 2)       [Sphere]
  00e91: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e98: 00 	test   rdi,0x7
  00e9f:    	jne    0x3743b
  00ea5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00ea9:    	jne    0x3743b
  00eaf: 26 	cmp    DWORD PTR [rip+0xfffffffffffee625],0x26        # 0xfffef4db
  00eb6:    	jne    0x3743b
  00ebc:    	sub    rsp,0x60
  00ec0:    	movq   QWORD PTR [rsp],xmm2
  00ec5:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ecb:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ed1:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ed7:    	movq   QWORD PTR [rsp+0x20],xmm6
  00edd:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ee3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00eea: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00ef1: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ef8: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00eff: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f06:    	mov    rax,QWORD PTR [rbx]
  00f09:    	lea    rdi,[rsp-0x18]
  00f0e:    	mov    QWORD PTR [rdi],rax
  00f11:    	mov    QWORD PTR [rbx],rdi
  00f14: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f1d:    	mov    QWORD PTR [rsp-0x38],rcx
  00f22: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00f29:    	mov    QWORD PTR [rsp-0x38],rax
  00f2e: 00 	mov    rdi,0x2
  00f35: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00f3c:    	mov    QWORD PTR [rsp-0x40],rax
  00f41: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00f48:    	mov    QWORD PTR [rsp-0x48],rax
  00f4d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f56: 10 	movabs rax,0x1000000045
  00f60:    	mov    QWORD PTR [rsp-0x28],rax
  00f65: 00 	movabs r13,0x5600b92b5360
  00f6f:    	call   0xffff010a
  00f74:    	lea    rdi,[rbp-0x8]
  00f78:    	mov    QWORD PTR [rbx],rdi
  00f7b:    	movq   xmm2,QWORD PTR [rsp]
  00f80:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f86:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f8c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f92:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f98:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f9e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00fa5: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00fac: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00fb3: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00fba: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00fc1:    	add    rsp,0x60
  00fc5: 00 	movabs r13,0x5600b92f0ed0
  00fcf:    	test   rax,rax
  00fd2:    	je     0xfffec9b3
:00086 
:00088 %14 = @spheres: Scene[IvarId(0)]
  00fd8:    	mov    rdi,QWORD PTR [rbp-0x28]
  00fdc:    	mov    rax,QWORD PTR [rdi+0x10]
  00fe0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %15 = 2: i32
  00fe7: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00090 %14 = %14.[%15]                      [Array][Integer]
  00ff2:    	sub    rsp,0x60
  00ff6:    	movq   QWORD PTR [rsp],xmm2
  00ffb:    	movq   QWORD PTR [rsp+0x8],xmm3
  01001:    	movq   QWORD PTR [rsp+0x10],xmm4
  01007:    	movq   QWORD PTR [rsp+0x18],xmm5
  0100d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01013:    	movq   QWORD PTR [rsp+0x28],xmm7
  01019: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01020: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01027: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0102e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01035: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0103c: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01043: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0104a:    	mov    rdi,rbx
  0104d:    	mov    rsi,r12
  01050: 00 	movabs r8,0x5600b92f0f08
  0105a: 00 	movabs rax,0x5600b75c5240
  01064:    	call   rax
  01066:    	movq   xmm2,QWORD PTR [rsp]
  0106b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01071:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01077:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0107d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01083:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01089: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01090: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01097: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0109e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  010a5: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  010ac:    	add    rsp,0x60
  010b0: 00 	movabs r13,0x5600b92f0f10
  010ba:    	test   rax,rax
  010bd:    	je     0xfffec9b3
  010c3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00091 %15 = %11
  010ca:    	mov    rax,QWORD PTR [rbp-0x80]
  010ce: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00092 %16 = %12
  010d5: ff 	mov    rax,QWORD PTR [rbp-0x88]
  010dc: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00093 _ = %14.call intersect(%15; 2)       [Sphere]
  010e3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  010ea: 00 	test   rdi,0x7
  010f1:    	jne    0x374b4
  010f7:    	cmp    DWORD PTR [rdi+0x4],0x2a
  010fb:    	jne    0x374b4
  01101: 26 	cmp    DWORD PTR [rip+0xfffffffffffee3d3],0x26        # 0xfffef4db
  01108:    	jne    0x374b4
  0110e:    	sub    rsp,0x60
  01112:    	movq   QWORD PTR [rsp],xmm2
  01117:    	movq   QWORD PTR [rsp+0x8],xmm3
  0111d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01123:    	movq   QWORD PTR [rsp+0x18],xmm5
  01129:    	movq   QWORD PTR [rsp+0x20],xmm6
  0112f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01135: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0113c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01143: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0114a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01151: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01158:    	mov    rax,QWORD PTR [rbx]
  0115b:    	lea    rdi,[rsp-0x18]
  01160:    	mov    QWORD PTR [rdi],rax
  01163:    	mov    QWORD PTR [rbx],rdi
  01166: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0116f:    	mov    QWORD PTR [rsp-0x38],rcx
  01174: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0117b:    	mov    QWORD PTR [rsp-0x38],rax
  01180: 00 	mov    rdi,0x2
  01187: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0118e:    	mov    QWORD PTR [rsp-0x40],rax
  01193: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  0119a:    	mov    QWORD PTR [rsp-0x48],rax
  0119f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011a8: 10 	movabs rax,0x1000000045
  011b2:    	mov    QWORD PTR [rsp-0x28],rax
  011b7: 00 	movabs r13,0x5600b92b5360
  011c1:    	call   0xffff010a
  011c6:    	lea    rdi,[rbp-0x8]
  011ca:    	mov    QWORD PTR [rbx],rdi
  011cd:    	movq   xmm2,QWORD PTR [rsp]
  011d2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  011d8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  011de:    	movq   xmm5,QWORD PTR [rsp+0x18]
  011e4:    	movq   xmm6,QWORD PTR [rsp+0x20]
  011ea:    	movq   xmm7,QWORD PTR [rsp+0x28]
  011f0: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  011f7: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  011fe: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01205: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0120c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01213:    	add    rsp,0x60
  01217: 00 	movabs r13,0x5600b92f0f50
  01221:    	test   rax,rax
  01224:    	je     0xfffec9b3
:00094 
:00096 %14 = @plane: Scene[IvarId(1)]
  0122a:    	mov    rdi,QWORD PTR [rbp-0x28]
  0122e:    	mov    rax,QWORD PTR [rdi+0x18]
  01232: ff 	mov    QWORD PTR [rbp-0x98],rax
:00097 %15 = %11
  01239:    	mov    rax,QWORD PTR [rbp-0x80]
  0123d: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00098 %16 = %12
  01244: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0124b: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00099 _ = %14.call intersect(%15; 2)       [Plane]
  01252: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01259: 00 	test   rdi,0x7
  01260:    	jne    0x3752d
  01266:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0126a:    	jne    0x3752d
  01270: 26 	cmp    DWORD PTR [rip+0xfffffffffffee264],0x26        # 0xfffef4db
  01277:    	jne    0x3752d
  0127d:    	sub    rsp,0x60
  01281:    	movq   QWORD PTR [rsp],xmm2
  01286:    	movq   QWORD PTR [rsp+0x8],xmm3
  0128c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01292:    	movq   QWORD PTR [rsp+0x18],xmm5
  01298:    	movq   QWORD PTR [rsp+0x20],xmm6
  0129e:    	movq   QWORD PTR [rsp+0x28],xmm7
  012a4: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  012ab: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  012b2: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  012b9: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  012c0: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  012c7:    	mov    rax,QWORD PTR [rbx]
  012ca:    	lea    rdi,[rsp-0x18]
  012cf:    	mov    QWORD PTR [rdi],rax
  012d2:    	mov    QWORD PTR [rbx],rdi
  012d5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012de:    	mov    QWORD PTR [rsp-0x38],rcx
  012e3: ff 	mov    rax,QWORD PTR [rbp-0x98]
  012ea:    	mov    QWORD PTR [rsp-0x38],rax
  012ef: 00 	mov    rdi,0x2
  012f6: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  012fd:    	mov    QWORD PTR [rsp-0x40],rax
  01302: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01309:    	mov    QWORD PTR [rsp-0x48],rax
  0130e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01317: 0e 	movabs rax,0xe00000047
  01321:    	mov    QWORD PTR [rsp-0x28],rax
  01326: 00 	movabs r13,0x5600b92b7200
  01330:    	call   0xffff0700
  01335:    	lea    rdi,[rbp-0x8]
  01339:    	mov    QWORD PTR [rbx],rdi
  0133c:    	movq   xmm2,QWORD PTR [rsp]
  01341:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01347:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0134d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01353:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01359:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0135f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01366: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0136d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01374: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0137b: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01382:    	add    rsp,0x60
  01386: 00 	movabs r13,0x5600b92f0fb0
  01390:    	test   rax,rax
  01393:    	je     0xfffec9b3
:00100 
:00102 %14 = %12.call hit()                 [Isect]
  01399: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  013a0: 00 	test   rdi,0x7
  013a7:    	jne    0x375a6
  013ad:    	cmp    DWORD PTR [rdi+0x4],0x30
  013b1:    	jne    0x375a6
  013b7: 26 	cmp    DWORD PTR [rip+0xfffffffffffee11d],0x26        # 0xfffef4db
  013be:    	jne    0x375a6
  013c4:    	mov    esi,DWORD PTR [rip+0x11ea]        # 0x25b4
  013ca:    	cmp    esi,0xffffffff
  013cd:    	je     0x3761f
  013d3:    	cmp    WORD PTR [rdi+0x2],0x3
  013d8:    	jne    0x13f1
  013de:    	cmp    esi,0x6
  013e1:    	jge    0x13f1
  013e7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013ec:    	jmp    0x1491
  013f1:    	sub    rsp,0x60
  013f5:    	movq   QWORD PTR [rsp],xmm2
  013fa:    	movq   QWORD PTR [rsp+0x8],xmm3
  01400:    	movq   QWORD PTR [rsp+0x10],xmm4
  01406:    	movq   QWORD PTR [rsp+0x18],xmm5
  0140c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01412:    	movq   QWORD PTR [rsp+0x28],xmm7
  01418: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0141f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01426: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0142d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01434: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0143b: 00 	movabs rax,0x5600b755dfe0
  01445:    	call   rax
  01447:    	movq   xmm2,QWORD PTR [rsp]
  0144c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01452:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01458:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0145e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01464:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0146a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01471: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01478: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0147f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01486: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0148d:    	add    rsp,0x60
  01491: ff 	mov    QWORD PTR [rbp-0x98],rax
:00103 
:00105 condnotbr %14 =>:00148
  01498: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0149f:    	or     rax,0x10
  014a3:    	cmp    rax,0x14
  014a7:    	je     0x2487
:00106 %14 = %12
  014ad: ff 	mov    rax,QWORD PTR [rbp-0x88]
  014b4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00107 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
  014bb: 01 	sub    DWORD PTR [rip+0x10f6],0x1        # 0x25b8
  014c2:    	je     0x37755
  014c8:    	sub    rsp,0x60
  014cc:    	movq   QWORD PTR [rsp],xmm2
  014d1:    	movq   QWORD PTR [rsp+0x8],xmm3
  014d7:    	movq   QWORD PTR [rsp+0x10],xmm4
  014dd:    	movq   QWORD PTR [rsp+0x18],xmm5
  014e3:    	movq   QWORD PTR [rsp+0x20],xmm6
  014e9:    	movq   QWORD PTR [rsp+0x28],xmm7
  014ef: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014f6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014fd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01504: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0150b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01512:    	mov    r15d,0x32
  01518: 00 	cmp    r15d,DWORD PTR [rip+0x10a1]        # 0x25c0
  0151f:    	jne    0x37777
  01525:    	mov    eax,DWORD PTR [rip+0xfffffffffffedfb0]        # 0xfffef4db
  0152b:    	cmp    DWORD PTR [rip+0x108b],eax        # 0x25bc
  01531:    	jne    0x37777
  01537:    	mov    rax,QWORD PTR [rbx]
  0153a:    	lea    rdi,[rsp-0x18]
  0153f:    	mov    QWORD PTR [rdi],rax
  01542:    	mov    QWORD PTR [rbx],rdi
  01545: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0154e:    	mov    QWORD PTR [rsp-0x38],rcx
  01553:    	mov    rax,QWORD PTR [rbp-0x28]
  01557:    	mov    QWORD PTR [rsp-0x38],rax
  0155c: 00 	mov    rdi,0x1
  01563: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0156a:    	mov    QWORD PTR [rsp-0x40],rax
  0156f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01578: 00 	movabs rax,0x0
  01582:    	mov    QWORD PTR [rsp-0x28],rax
  01587: 00 	movabs r13,0x0
  01591:    	call   0xfffec978
  01596:    	lea    rdi,[rbp-0x8]
  0159a:    	mov    QWORD PTR [rbx],rdi
  0159d:    	movq   xmm2,QWORD PTR [rsp]
  015a2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015a8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015ae:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015b4:    	movq   xmm6,QWORD PTR [rsp+0x20]
  015ba:    	movq   xmm7,QWORD PTR [rsp+0x28]
  015c0: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  015c7: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  015ce: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  015d5: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  015dc: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  015e3:    	add    rsp,0x60
  015e7:    	test   rax,rax
  015ea:    	je     0x377e3
  015f0: ff 	mov    QWORD PTR [rbp-0x90],rax
:00108 
:00110 %14 = dynvar(2, %2)
  015f7:    	mov    rax,QWORD PTR [rbp-0x10]
  015fb:    	mov    rax,QWORD PTR [rax]
  015fe:    	mov    rax,QWORD PTR [rax-0x28]
  01602: ff 	mov    QWORD PTR [rbp-0x98],rax
:00111 %16 = dynvar(2, %2)
  01609:    	mov    rax,QWORD PTR [rbp-0x10]
  0160d:    	mov    rax,QWORD PTR [rax]
  01610:    	mov    rax,QWORD PTR [rax-0x28]
  01614: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00112 %15 = %16.call x()                   [<INVALID>]
  0161b: 01 	sub    DWORD PTR [rip+0xfa2],0x1        # 0x25c4
  01622:    	je     0x3786b
  01628:    	sub    rsp,0x60
  0162c:    	movq   QWORD PTR [rsp],xmm2
  01631:    	movq   QWORD PTR [rsp+0x8],xmm3
  01637:    	movq   QWORD PTR [rsp+0x10],xmm4
  0163d:    	movq   QWORD PTR [rsp+0x18],xmm5
  01643:    	movq   QWORD PTR [rsp+0x20],xmm6
  01649:    	movq   QWORD PTR [rsp+0x28],xmm7
  0164f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01656: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0165d: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01664: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0166b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01672: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01679: 00 	movabs rax,0x5600b75a2280
  01683:    	call   rax
  01685:    	mov    r15d,eax
  01688: 00 	cmp    r15d,DWORD PTR [rip+0xf3d]        # 0x25cc
  0168f:    	jne    0x3788d
  01695:    	mov    eax,DWORD PTR [rip+0xfffffffffffede40]        # 0xfffef4db
  0169b:    	cmp    DWORD PTR [rip+0xf27],eax        # 0x25c8
  016a1:    	jne    0x3788d
  016a7:    	mov    rax,QWORD PTR [rbx]
  016aa:    	lea    rdi,[rsp-0x18]
  016af:    	mov    QWORD PTR [rdi],rax
  016b2:    	mov    QWORD PTR [rbx],rdi
  016b5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016be:    	mov    QWORD PTR [rsp-0x38],rcx
  016c3: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  016ca:    	mov    QWORD PTR [rsp-0x38],rax
  016cf: 00 	mov    rdi,0x0
  016d6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016df: 00 	movabs rax,0x0
  016e9:    	mov    QWORD PTR [rsp-0x28],rax
  016ee: 00 	movabs r13,0x0
  016f8:    	call   0xfffec978
  016fd:    	lea    rdi,[rbp-0x8]
  01701:    	mov    QWORD PTR [rbx],rdi
  01704:    	movq   xmm2,QWORD PTR [rsp]
  01709:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0170f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01715:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0171b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01721:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01727: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0172e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01735: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0173c: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01743: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0174a:    	add    rsp,0x60
  0174e:    	test   rax,rax
  01751:    	je     0x378fc
  01757: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00113 
:00115 %16 = %13.call x()                   [<INVALID>]
  0175e: 01 	sub    DWORD PTR [rip+0xe6b],0x1        # 0x25d0
  01765:    	je     0x37984
  0176b:    	sub    rsp,0x60
  0176f:    	movq   QWORD PTR [rsp],xmm2
  01774:    	movq   QWORD PTR [rsp+0x8],xmm3
  0177a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01780:    	movq   QWORD PTR [rsp+0x18],xmm5
  01786:    	movq   QWORD PTR [rsp+0x20],xmm6
  0178c:    	movq   QWORD PTR [rsp+0x28],xmm7
  01792: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01799: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  017a0: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  017a7: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  017ae: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  017b5: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  017bc: 00 	movabs rax,0x5600b75a2280
  017c6:    	call   rax
  017c8:    	mov    r15d,eax
  017cb: 00 	cmp    r15d,DWORD PTR [rip+0xe06]        # 0x25d8
  017d2:    	jne    0x379a6
  017d8:    	mov    eax,DWORD PTR [rip+0xfffffffffffedcfd]        # 0xfffef4db
  017de:    	cmp    DWORD PTR [rip+0xdf0],eax        # 0x25d4
  017e4:    	jne    0x379a6
  017ea:    	mov    rax,QWORD PTR [rbx]
  017ed:    	lea    rdi,[rsp-0x18]
  017f2:    	mov    QWORD PTR [rdi],rax
  017f5:    	mov    QWORD PTR [rbx],rdi
  017f8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01801:    	mov    QWORD PTR [rsp-0x38],rcx
  01806: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0180d:    	mov    QWORD PTR [rsp-0x38],rax
  01812: 00 	mov    rdi,0x0
  01819: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01822: 00 	movabs rax,0x0
  0182c:    	mov    QWORD PTR [rsp-0x28],rax
  01831: 00 	movabs r13,0x0
  0183b:    	call   0xfffec978
  01840:    	lea    rdi,[rbp-0x8]
  01844:    	mov    QWORD PTR [rbx],rdi
  01847:    	movq   xmm2,QWORD PTR [rsp]
  0184c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01852:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01858:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0185e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01864:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0186a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01871: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01878: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0187f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01886: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0188d:    	add    rsp,0x60
  01891:    	test   rax,rax
  01894:    	je     0x37a15
  0189a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00116 
:00118 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  018a1: 01 	sub    DWORD PTR [rip+0xd34],0x1        # 0x25dc
  018a8:    	je     0x37a9d
  018ae: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  018b5: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  018bc:    	sub    rsp,0x60
  018c0:    	movq   QWORD PTR [rsp],xmm2
  018c5:    	movq   QWORD PTR [rsp+0x8],xmm3
  018cb:    	movq   QWORD PTR [rsp+0x10],xmm4
  018d1:    	movq   QWORD PTR [rsp+0x18],xmm5
  018d7:    	movq   QWORD PTR [rsp+0x20],xmm6
  018dd:    	movq   QWORD PTR [rsp+0x28],xmm7
  018e3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  018ea: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  018f1: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  018f8: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  018ff: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01906:    	mov    rdx,rdi
  01909:    	mov    rcx,rsi
  0190c:    	mov    rdi,rbx
  0190f:    	mov    rsi,r12
  01912: 00 	movabs rax,0x5600b75970e0
  0191c:    	call   rax
  0191e:    	movq   xmm2,QWORD PTR [rsp]
  01923:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01929:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0192f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01935:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0193b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01941: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01948: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0194f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01956: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0195d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01964:    	add    rsp,0x60
  01968: 00 	movabs r13,0x5600b92f10d0
  01972:    	test   rax,rax
  01975:    	je     0xfffec9b3
  0197b: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00119 _ = %14.call x=(%15; 1)              [<INVALID>]
  01982: 01 	sub    DWORD PTR [rip+0xc57],0x1        # 0x25e0
  01989:    	je     0x37b38
  0198f:    	sub    rsp,0x60
  01993:    	movq   QWORD PTR [rsp],xmm2
  01998:    	movq   QWORD PTR [rsp+0x8],xmm3
  0199e:    	movq   QWORD PTR [rsp+0x10],xmm4
  019a4:    	movq   QWORD PTR [rsp+0x18],xmm5
  019aa:    	movq   QWORD PTR [rsp+0x20],xmm6
  019b0:    	movq   QWORD PTR [rsp+0x28],xmm7
  019b6: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  019bd: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  019c4: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  019cb: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  019d2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  019d9: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  019e0: 00 	movabs rax,0x5600b75a2280
  019ea:    	call   rax
  019ec:    	mov    r15d,eax
  019ef: 00 	cmp    r15d,DWORD PTR [rip+0xbf2]        # 0x25e8
  019f6:    	jne    0x37b5a
  019fc:    	mov    eax,DWORD PTR [rip+0xfffffffffffedad9]        # 0xfffef4db
  01a02:    	cmp    DWORD PTR [rip+0xbdc],eax        # 0x25e4
  01a08:    	jne    0x37b5a
  01a0e:    	mov    rax,QWORD PTR [rbx]
  01a11:    	lea    rdi,[rsp-0x18]
  01a16:    	mov    QWORD PTR [rdi],rax
  01a19:    	mov    QWORD PTR [rbx],rdi
  01a1c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a25:    	mov    QWORD PTR [rsp-0x38],rcx
  01a2a: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01a31:    	mov    QWORD PTR [rsp-0x38],rax
  01a36: 00 	mov    rdi,0x1
  01a3d: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01a44:    	mov    QWORD PTR [rsp-0x40],rax
  01a49: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a52: 00 	movabs rax,0x0
  01a5c:    	mov    QWORD PTR [rsp-0x28],rax
  01a61: 00 	movabs r13,0x0
  01a6b:    	call   0xfffec978
  01a70:    	lea    rdi,[rbp-0x8]
  01a74:    	mov    QWORD PTR [rbx],rdi
  01a77:    	movq   xmm2,QWORD PTR [rsp]
  01a7c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01a82:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01a88:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01a8e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01a94:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01a9a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01aa1: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01aa8: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01aaf: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01ab6: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01abd:    	add    rsp,0x60
  01ac1:    	test   rax,rax
  01ac4:    	je     0x37bc9
:00120 
:00122 %14 = dynvar(2, %2)
  01aca:    	mov    rax,QWORD PTR [rbp-0x10]
  01ace:    	mov    rax,QWORD PTR [rax]
  01ad1:    	mov    rax,QWORD PTR [rax-0x28]
  01ad5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00123 %16 = dynvar(2, %2)
  01adc:    	mov    rax,QWORD PTR [rbp-0x10]
  01ae0:    	mov    rax,QWORD PTR [rax]
  01ae3:    	mov    rax,QWORD PTR [rax-0x28]
  01ae7: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00124 %15 = %16.call y()                   [<INVALID>]
  01aee: 01 	sub    DWORD PTR [rip+0xaf7],0x1        # 0x25ec
  01af5:    	je     0x37c51
  01afb:    	sub    rsp,0x60
  01aff:    	movq   QWORD PTR [rsp],xmm2
  01b04:    	movq   QWORD PTR [rsp+0x8],xmm3
  01b0a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01b10:    	movq   QWORD PTR [rsp+0x18],xmm5
  01b16:    	movq   QWORD PTR [rsp+0x20],xmm6
  01b1c:    	movq   QWORD PTR [rsp+0x28],xmm7
  01b22: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01b29: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01b30: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01b37: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01b3e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01b45: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01b4c: 00 	movabs rax,0x5600b75a2280
  01b56:    	call   rax
  01b58:    	mov    r15d,eax
  01b5b: 00 	cmp    r15d,DWORD PTR [rip+0xa92]        # 0x25f4
  01b62:    	jne    0x37c73
  01b68:    	mov    eax,DWORD PTR [rip+0xfffffffffffed96d]        # 0xfffef4db
  01b6e:    	cmp    DWORD PTR [rip+0xa7c],eax        # 0x25f0
  01b74:    	jne    0x37c73
  01b7a:    	mov    rax,QWORD PTR [rbx]
  01b7d:    	lea    rdi,[rsp-0x18]
  01b82:    	mov    QWORD PTR [rdi],rax
  01b85:    	mov    QWORD PTR [rbx],rdi
  01b88: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b91:    	mov    QWORD PTR [rsp-0x38],rcx
  01b96: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01b9d:    	mov    QWORD PTR [rsp-0x38],rax
  01ba2: 00 	mov    rdi,0x0
  01ba9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01bb2: 00 	movabs rax,0x0
  01bbc:    	mov    QWORD PTR [rsp-0x28],rax
  01bc1: 00 	movabs r13,0x0
  01bcb:    	call   0xfffec978
  01bd0:    	lea    rdi,[rbp-0x8]
  01bd4:    	mov    QWORD PTR [rbx],rdi
  01bd7:    	movq   xmm2,QWORD PTR [rsp]
  01bdc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01be2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01be8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01bee:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01bf4:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01bfa: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01c01: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01c08: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01c0f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01c16: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01c1d:    	add    rsp,0x60
  01c21:    	test   rax,rax
  01c24:    	je     0x37ce2
  01c2a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00125 
:00127 %16 = %13.call y()                   [<INVALID>]
  01c31: 01 	sub    DWORD PTR [rip+0x9c0],0x1        # 0x25f8
  01c38:    	je     0x37d6a
  01c3e:    	sub    rsp,0x60
  01c42:    	movq   QWORD PTR [rsp],xmm2
  01c47:    	movq   QWORD PTR [rsp+0x8],xmm3
  01c4d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01c53:    	movq   QWORD PTR [rsp+0x18],xmm5
  01c59:    	movq   QWORD PTR [rsp+0x20],xmm6
  01c5f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01c65: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01c6c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01c73: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01c7a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01c81: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01c88: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01c8f: 00 	movabs rax,0x5600b75a2280
  01c99:    	call   rax
  01c9b:    	mov    r15d,eax
  01c9e: 00 	cmp    r15d,DWORD PTR [rip+0x95b]        # 0x2600
  01ca5:    	jne    0x37d8c
  01cab:    	mov    eax,DWORD PTR [rip+0xfffffffffffed82a]        # 0xfffef4db
  01cb1:    	cmp    DWORD PTR [rip+0x945],eax        # 0x25fc
  01cb7:    	jne    0x37d8c
  01cbd:    	mov    rax,QWORD PTR [rbx]
  01cc0:    	lea    rdi,[rsp-0x18]
  01cc5:    	mov    QWORD PTR [rdi],rax
  01cc8:    	mov    QWORD PTR [rbx],rdi
  01ccb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01cd4:    	mov    QWORD PTR [rsp-0x38],rcx
  01cd9: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01ce0:    	mov    QWORD PTR [rsp-0x38],rax
  01ce5: 00 	mov    rdi,0x0
  01cec: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01cf5: 00 	movabs rax,0x0
  01cff:    	mov    QWORD PTR [rsp-0x28],rax
  01d04: 00 	movabs r13,0x0
  01d0e:    	call   0xfffec978
  01d13:    	lea    rdi,[rbp-0x8]
  01d17:    	mov    QWORD PTR [rbx],rdi
  01d1a:    	movq   xmm2,QWORD PTR [rsp]
  01d1f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01d25:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01d2b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01d31:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01d37:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01d3d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01d44: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01d4b: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01d52: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01d59: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01d60:    	add    rsp,0x60
  01d64:    	test   rax,rax
  01d67:    	je     0x37dfb
  01d6d: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00128 
:00130 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  01d74: 01 	sub    DWORD PTR [rip+0x889],0x1        # 0x2604
  01d7b:    	je     0x37e83
  01d81: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01d88: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  01d8f:    	sub    rsp,0x60
  01d93:    	movq   QWORD PTR [rsp],xmm2
  01d98:    	movq   QWORD PTR [rsp+0x8],xmm3
  01d9e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01da4:    	movq   QWORD PTR [rsp+0x18],xmm5
  01daa:    	movq   QWORD PTR [rsp+0x20],xmm6
  01db0:    	movq   QWORD PTR [rsp+0x28],xmm7
  01db6: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01dbd: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01dc4: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01dcb: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01dd2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01dd9:    	mov    rdx,rdi
  01ddc:    	mov    rcx,rsi
  01ddf:    	mov    rdi,rbx
  01de2:    	mov    rsi,r12
  01de5: 00 	movabs rax,0x5600b75970e0
  01def:    	call   rax
  01df1:    	movq   xmm2,QWORD PTR [rsp]
  01df6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01dfc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e02:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e08:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e0e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e14: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e1b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01e22: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01e29: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01e30: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01e37:    	add    rsp,0x60
  01e3b: 00 	movabs r13,0x5600b92f1190
  01e45:    	test   rax,rax
  01e48:    	je     0xfffec9b3
  01e4e: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00131 _ = %14.call y=(%15; 1)              [<INVALID>]
  01e55: 01 	sub    DWORD PTR [rip+0x7ac],0x1        # 0x2608
  01e5c:    	je     0x37f1e
  01e62:    	sub    rsp,0x60
  01e66:    	movq   QWORD PTR [rsp],xmm2
  01e6b:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e71:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e77:    	movq   QWORD PTR [rsp+0x18],xmm5
  01e7d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01e83:    	movq   QWORD PTR [rsp+0x28],xmm7
  01e89: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01e90: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01e97: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01e9e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01ea5: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01eac: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01eb3: 00 	movabs rax,0x5600b75a2280
  01ebd:    	call   rax
  01ebf:    	mov    r15d,eax
  01ec2: 00 	cmp    r15d,DWORD PTR [rip+0x747]        # 0x2610
  01ec9:    	jne    0x37f40
  01ecf:    	mov    eax,DWORD PTR [rip+0xfffffffffffed606]        # 0xfffef4db
  01ed5:    	cmp    DWORD PTR [rip+0x731],eax        # 0x260c
  01edb:    	jne    0x37f40
  01ee1:    	mov    rax,QWORD PTR [rbx]
  01ee4:    	lea    rdi,[rsp-0x18]
  01ee9:    	mov    QWORD PTR [rdi],rax
  01eec:    	mov    QWORD PTR [rbx],rdi
  01eef: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01ef8:    	mov    QWORD PTR [rsp-0x38],rcx
  01efd: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01f04:    	mov    QWORD PTR [rsp-0x38],rax
  01f09: 00 	mov    rdi,0x1
  01f10: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01f17:    	mov    QWORD PTR [rsp-0x40],rax
  01f1c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01f25: 00 	movabs rax,0x0
  01f2f:    	mov    QWORD PTR [rsp-0x28],rax
  01f34: 00 	movabs r13,0x0
  01f3e:    	call   0xfffec978
  01f43:    	lea    rdi,[rbp-0x8]
  01f47:    	mov    QWORD PTR [rbx],rdi
  01f4a:    	movq   xmm2,QWORD PTR [rsp]
  01f4f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01f55:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01f5b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01f61:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01f67:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01f6d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01f74: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01f7b: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01f82: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01f89: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01f90:    	add    rsp,0x60
  01f94:    	test   rax,rax
  01f97:    	je     0x37faf
:00132 
:00134 %14 = dynvar(2, %2)
  01f9d:    	mov    rax,QWORD PTR [rbp-0x10]
  01fa1:    	mov    rax,QWORD PTR [rax]
  01fa4:    	mov    rax,QWORD PTR [rax-0x28]
  01fa8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00135 %16 = dynvar(2, %2)
  01faf:    	mov    rax,QWORD PTR [rbp-0x10]
  01fb3:    	mov    rax,QWORD PTR [rax]
  01fb6:    	mov    rax,QWORD PTR [rax-0x28]
  01fba: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00136 %15 = %16.call z()                   [<INVALID>]
  01fc1: 01 	sub    DWORD PTR [rip+0x64c],0x1        # 0x2614
  01fc8:    	je     0x38037
  01fce:    	sub    rsp,0x60
  01fd2:    	movq   QWORD PTR [rsp],xmm2
  01fd7:    	movq   QWORD PTR [rsp+0x8],xmm3
  01fdd:    	movq   QWORD PTR [rsp+0x10],xmm4
  01fe3:    	movq   QWORD PTR [rsp+0x18],xmm5
  01fe9:    	movq   QWORD PTR [rsp+0x20],xmm6
  01fef:    	movq   QWORD PTR [rsp+0x28],xmm7
  01ff5: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01ffc: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02003: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0200a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02011: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02018: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  0201f: 00 	movabs rax,0x5600b75a2280
  02029:    	call   rax
  0202b:    	mov    r15d,eax
  0202e: 00 	cmp    r15d,DWORD PTR [rip+0x5e7]        # 0x261c
  02035:    	jne    0x38059
  0203b:    	mov    eax,DWORD PTR [rip+0xfffffffffffed49a]        # 0xfffef4db
  02041:    	cmp    DWORD PTR [rip+0x5d1],eax        # 0x2618
  02047:    	jne    0x38059
  0204d:    	mov    rax,QWORD PTR [rbx]
  02050:    	lea    rdi,[rsp-0x18]
  02055:    	mov    QWORD PTR [rdi],rax
  02058:    	mov    QWORD PTR [rbx],rdi
  0205b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02064:    	mov    QWORD PTR [rsp-0x38],rcx
  02069: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  02070:    	mov    QWORD PTR [rsp-0x38],rax
  02075: 00 	mov    rdi,0x0
  0207c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02085: 00 	movabs rax,0x0
  0208f:    	mov    QWORD PTR [rsp-0x28],rax
  02094: 00 	movabs r13,0x0
  0209e:    	call   0xfffec978
  020a3:    	lea    rdi,[rbp-0x8]
  020a7:    	mov    QWORD PTR [rbx],rdi
  020aa:    	movq   xmm2,QWORD PTR [rsp]
  020af:    	movq   xmm3,QWORD PTR [rsp+0x8]
  020b5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  020bb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  020c1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  020c7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  020cd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  020d4: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  020db: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  020e2: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  020e9: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  020f0:    	add    rsp,0x60
  020f4:    	test   rax,rax
  020f7:    	je     0x380c8
  020fd: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00137 
:00139 %16 = %13.call z()                   [<INVALID>]
  02104: 01 	sub    DWORD PTR [rip+0x515],0x1        # 0x2620
  0210b:    	je     0x38150
  02111:    	sub    rsp,0x60
  02115:    	movq   QWORD PTR [rsp],xmm2
  0211a:    	movq   QWORD PTR [rsp+0x8],xmm3
  02120:    	movq   QWORD PTR [rsp+0x10],xmm4
  02126:    	movq   QWORD PTR [rsp+0x18],xmm5
  0212c:    	movq   QWORD PTR [rsp+0x20],xmm6
  02132:    	movq   QWORD PTR [rsp+0x28],xmm7
  02138: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0213f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02146: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0214d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02154: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0215b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  02162: 00 	movabs rax,0x5600b75a2280
  0216c:    	call   rax
  0216e:    	mov    r15d,eax
  02171: 00 	cmp    r15d,DWORD PTR [rip+0x4b0]        # 0x2628
  02178:    	jne    0x38172
  0217e:    	mov    eax,DWORD PTR [rip+0xfffffffffffed357]        # 0xfffef4db
  02184:    	cmp    DWORD PTR [rip+0x49a],eax        # 0x2624
  0218a:    	jne    0x38172
  02190:    	mov    rax,QWORD PTR [rbx]
  02193:    	lea    rdi,[rsp-0x18]
  02198:    	mov    QWORD PTR [rdi],rax
  0219b:    	mov    QWORD PTR [rbx],rdi
  0219e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  021a7:    	mov    QWORD PTR [rsp-0x38],rcx
  021ac: ff 	mov    rax,QWORD PTR [rbp-0x90]
  021b3:    	mov    QWORD PTR [rsp-0x38],rax
  021b8: 00 	mov    rdi,0x0
  021bf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  021c8: 00 	movabs rax,0x0
  021d2:    	mov    QWORD PTR [rsp-0x28],rax
  021d7: 00 	movabs r13,0x0
  021e1:    	call   0xfffec978
  021e6:    	lea    rdi,[rbp-0x8]
  021ea:    	mov    QWORD PTR [rbx],rdi
  021ed:    	movq   xmm2,QWORD PTR [rsp]
  021f2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  021f8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  021fe:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02204:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0220a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02210: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02217: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0221e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02225: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0222c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02233:    	add    rsp,0x60
  02237:    	test   rax,rax
  0223a:    	je     0x381e1
  02240: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00140 
:00142 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  02247: 01 	sub    DWORD PTR [rip+0x3de],0x1        # 0x262c
  0224e:    	je     0x38269
  02254: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0225b: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  02262:    	sub    rsp,0x60
  02266:    	movq   QWORD PTR [rsp],xmm2
  0226b:    	movq   QWORD PTR [rsp+0x8],xmm3
  02271:    	movq   QWORD PTR [rsp+0x10],xmm4
  02277:    	movq   QWORD PTR [rsp+0x18],xmm5
  0227d:    	movq   QWORD PTR [rsp+0x20],xmm6
  02283:    	movq   QWORD PTR [rsp+0x28],xmm7
  02289: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02290: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02297: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0229e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  022a5: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  022ac:    	mov    rdx,rdi
  022af:    	mov    rcx,rsi
  022b2:    	mov    rdi,rbx
  022b5:    	mov    rsi,r12
  022b8: 00 	movabs rax,0x5600b75970e0
  022c2:    	call   rax
  022c4:    	movq   xmm2,QWORD PTR [rsp]
  022c9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  022cf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  022d5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  022db:    	movq   xmm6,QWORD PTR [rsp+0x20]
  022e1:    	movq   xmm7,QWORD PTR [rsp+0x28]
  022e7: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  022ee: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  022f5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  022fc: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02303: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0230a:    	add    rsp,0x60
  0230e: 00 	movabs r13,0x5600b92f1250
  02318:    	test   rax,rax
  0231b:    	je     0xfffec9b3
  02321: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00143 _ = %14.call z=(%15; 1)              [<INVALID>]
  02328: 01 	sub    DWORD PTR [rip+0x301],0x1        # 0x2630
  0232f:    	je     0x38304
  02335:    	sub    rsp,0x60
  02339:    	movq   QWORD PTR [rsp],xmm2
  0233e:    	movq   QWORD PTR [rsp+0x8],xmm3
  02344:    	movq   QWORD PTR [rsp+0x10],xmm4
  0234a:    	movq   QWORD PTR [rsp+0x18],xmm5
  02350:    	movq   QWORD PTR [rsp+0x20],xmm6
  02356:    	movq   QWORD PTR [rsp+0x28],xmm7
  0235c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02363: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0236a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02371: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02378: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0237f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  02386: 00 	movabs rax,0x5600b75a2280
  02390:    	call   rax
  02392:    	mov    r15d,eax
  02395: 00 	cmp    r15d,DWORD PTR [rip+0x29c]        # 0x2638
  0239c:    	jne    0x38326
  023a2:    	mov    eax,DWORD PTR [rip+0xfffffffffffed133]        # 0xfffef4db
  023a8:    	cmp    DWORD PTR [rip+0x286],eax        # 0x2634
  023ae:    	jne    0x38326
  023b4:    	mov    rax,QWORD PTR [rbx]
  023b7:    	lea    rdi,[rsp-0x18]
  023bc:    	mov    QWORD PTR [rdi],rax
  023bf:    	mov    QWORD PTR [rbx],rdi
  023c2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  023cb:    	mov    QWORD PTR [rsp-0x38],rcx
  023d0: ff 	mov    rax,QWORD PTR [rbp-0x98]
  023d7:    	mov    QWORD PTR [rsp-0x38],rax
  023dc: 00 	mov    rdi,0x1
  023e3: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  023ea:    	mov    QWORD PTR [rsp-0x40],rax
  023ef: 00 	mov    QWORD PTR [rsp-0x30],0x0
  023f8: 00 	movabs rax,0x0
  02402:    	mov    QWORD PTR [rsp-0x28],rax
  02407: 00 	movabs r13,0x0
  02411:    	call   0xfffec978
  02416:    	lea    rdi,[rbp-0x8]
  0241a:    	mov    QWORD PTR [rbx],rdi
  0241d:    	movq   xmm2,QWORD PTR [rsp]
  02422:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02428:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0242e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02434:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0243a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02440: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02447: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0244e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02455: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0245c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02463:    	add    rsp,0x60
  02467:    	test   rax,rax
  0246a:    	je     0x38395
:00144 
:00146 %14 = %15
  02470: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02477: ff 	mov    QWORD PTR [rbp-0x98],rax
:00147 ret %14
  0247e: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02485:    	leave  
  02486:    	ret    
:00148 %14 = nil
  02487: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00149 ret %14
  02492: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02499:    	leave  
  0249a:    	ret    
==> start whole compile: ambient_occlusion FuncId(75) self_class:Scene start:[00000] bytecode:0x5600b92b7910
<== finished compile. elapsed:88.1µs
offset:Pos(89284) code: 4008 bytes  data: 284 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: mov    rdx,rdi
  00007: sub    rsp,0xa0
  0000e: mov    eax,edx
  00010: sub    eax,0x1
  00013: jge    0x35
  00019: neg    rdx
  0001c: lea    rdx,[rbp+rdx*8-0x30]
  00021: mov    QWORD PTR [rdx],0x4
  00028: sub    rdx,0x8
  0002c: add    eax,0x1
  0002f: jne    0x21
  00035: mov    rax,0x4
  0003c: mov    QWORD PTR [rbp-0x38],rax
  00040: mov    QWORD PTR [rbp-0x40],rax
  00044: mov    QWORD PTR [rbp-0x48],rax
  00048: mov    QWORD PTR [rbp-0x50],rax
  0004c: mov    QWORD PTR [rbp-0x58],rax
  00050: mov    QWORD PTR [rbp-0x60],rax
  00054: mov    QWORD PTR [rbp-0x68],rax
  00058: mov    QWORD PTR [rbp-0x70],rax
  0005c: mov    QWORD PTR [rbp-0x78],rax
  00060: mov    QWORD PTR [rbp-0x80],rax
  00064: mov    QWORD PTR [rbp-0x88],rax
  0006b: mov    QWORD PTR [rbp-0x90],rax
  00072: mov    rdi,QWORD PTR [rbp-0x28]
  00076: test   rdi,0x7
  0007d: jne    0x35d68
  00083: cmp    DWORD PTR [rdi+0x4],0x32
  00087: jne    0x35d68
:00000 init reg_num:14 arg_num:1 stack_offset:10
:00001 %8 = const[Array]                    [Array]
  0008d: mov    rax,QWORD PTR [rip+0xfffffffffffece18]        # 0xfffeceac
  00094: cmp    rax,QWORD PTR [rip+0xf21]        # 0xfbc
  0009b: jne    0x35d77
  000a1: mov    rax,QWORD PTR [rip+0xf04]        # 0xfac
  000a8: mov    QWORD PTR [rbp-0x68],rax
:00002 %2 = %8.call new()                   [#<Class:Array>]
  000ac: mov    rdi,QWORD PTR [rbp-0x68]
  000b0: test   rdi,0x7
  000b7: jne    0x35dbd
  000bd: cmp    DWORD PTR [rdi+0x4],0x1e
  000c1: jne    0x35dbd
  000c7: cmp    DWORD PTR [rip+0xfffffffffffecdd1],0x26        # 0xfffece9f
  000ce: jne    0x35dbd
  000d4: mov    r9,0x0
  000db: mov    rdx,rdi
  000de: mov    rax,QWORD PTR [rbx]
  000e1: lea    rdi,[rsp-0x18]
  000e6: mov    QWORD PTR [rdi],rax
  000e9: mov    QWORD PTR [rbx],rdi
  000ec: mov    QWORD PTR [rsp-0x20],0x0
  000f5: mov    QWORD PTR [rsp-0x38],rcx
  000fa: lea    rcx,[rbp-0x70]
  000fe: mov    r8,0x0
  00105: call   0x35dcc
  0010a: lea    rdi,[rbp-0x8]
  0010e: mov    QWORD PTR [rbx],rdi
  00111: movabs r13,0x5600b92b7950
  0011b: test   rax,rax
  0011e: je     0xfffea377
  00124: mov    QWORD PTR [rbp-0x38],rax
:00003 
:00005 %8 = %2
  00128: mov    rax,QWORD PTR [rbp-0x38]
  0012c: mov    QWORD PTR [rbp-0x68],rax
:00006 %9 = %1.call n()                     [Isect]
  00130: mov    rdi,QWORD PTR [rbp-0x30]
  00134: test   rdi,0x7
  0013b: jne    0x35dfe
  00141: cmp    DWORD PTR [rdi+0x4],0x30
  00145: jne    0x35dfe
  0014b: cmp    DWORD PTR [rip+0xfffffffffffecd4d],0x26        # 0xfffece9f
  00152: jne    0x35dfe
  00158: mov    esi,DWORD PTR [rip+0xe6a]        # 0xfc8
  0015e: cmp    esi,0xffffffff
  00161: je     0x35e0d
  00167: cmp    WORD PTR [rdi+0x2],0x3
  0016c: jne    0x185
  00172: cmp    esi,0x6
  00175: jge    0x185
  0017b: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00180: jmp    0x191
  00185: movabs rax,0x5600b755dfe0
  0018f: call   rax
  00191: mov    QWORD PTR [rbp-0x70],rax
:00007 
:00009 _ = %0.call otherBasis(%8; 2)        [Scene]
  00195: mov    rdi,QWORD PTR [rbp-0x28]
  00199: cmp    DWORD PTR [rip+0xfffffffffffeccff],0x26        # 0xfffece9f
  001a0: jne    0x35e36
  001a6: mov    rax,QWORD PTR [rbx]
  001a9: lea    rdi,[rsp-0x18]
  001ae: mov    QWORD PTR [rdi],rax
  001b1: mov    QWORD PTR [rbx],rdi
  001b4: mov    QWORD PTR [rsp-0x20],0x0
  001bd: mov    QWORD PTR [rsp-0x38],rcx
  001c2: mov    rax,QWORD PTR [rbp-0x28]
  001c6: mov    QWORD PTR [rsp-0x38],rax
  001cb: mov    rdi,0x2
  001d2: mov    rax,QWORD PTR [rbp-0x68]
  001d6: mov    QWORD PTR [rsp-0x40],rax
  001db: mov    rax,QWORD PTR [rbp-0x70]
  001df: mov    QWORD PTR [rsp-0x48],rax
  001e4: mov    QWORD PTR [rsp-0x30],0x0
  001ed: movabs rax,0x90000003b
  001f7: mov    QWORD PTR [rsp-0x28],rax
  001fc: movabs r13,0x5600b92cdf40
  00206: call   0xffff6bab
  0020b: lea    rdi,[rbp-0x8]
  0020f: mov    QWORD PTR [rbx],rdi
  00212: movabs r13,0x5600b92b79c0
  0021c: test   rax,rax
  0021f: je     0xfffea377
:00010 
:00012 %3 = const[NAO_SAMPLES]              [8]
  00225: mov    rax,QWORD PTR [rip+0xfffffffffffecc80]        # 0xfffeceac
  0022c: cmp    rax,QWORD PTR [rip+0xda9]        # 0xfdc
  00233: jne    0x35e45
  00239: mov    rax,QWORD PTR [rip+0xd8c]        # 0xfcc
  00240: mov    QWORD PTR [rbp-0x40],rax
:00013 %4 = const[NAO_SAMPLES]              [8]
  00244: mov    rax,QWORD PTR [rip+0xfffffffffffecc61]        # 0xfffeceac
  0024b: cmp    rax,QWORD PTR [rip+0xdaa]        # 0xffc
  00252: jne    0x35e8b
  00258: mov    rax,QWORD PTR [rip+0xd8d]        # 0xfec
  0025f: mov    QWORD PTR [rbp-0x48],rax
:00014 %5 = literal[0.0001]
  00263: movq   xmm2,QWORD PTR [rip+0xda1]        # 0x100c
  0026b: movabs rax,0xf8d1b71758e2196a
  00275: mov    QWORD PTR [rbp-0x50],rax
:00015 %6 = literal[0.0]
  00279: movq   xmm3,QWORD PTR [rip+0xd9b]        # 0x101c
  00281: movabs rax,0x8000000000000002
  0028b: mov    QWORD PTR [rbp-0x58],rax
:00016 %8 = const[Vec]                      [Vec]
  0028f: mov    rax,QWORD PTR [rip+0xfffffffffffecc16]        # 0xfffeceac
  00296: cmp    rax,QWORD PTR [rip+0xd9f]        # 0x103c
  0029d: jne    0x35ed1
  002a3: mov    rax,QWORD PTR [rip+0xd82]        # 0x102c
  002aa: mov    QWORD PTR [rbp-0x68],rax
:00017 %10 = %1.call pl()                   [Isect]
  002ae: mov    rdi,QWORD PTR [rbp-0x30]
  002b2: test   rdi,0x7
  002b9: jne    0x35f35
  002bf: cmp    DWORD PTR [rdi+0x4],0x30
  002c3: jne    0x35f35
  002c9: cmp    DWORD PTR [rip+0xfffffffffffecbcf],0x26        # 0xfffece9f
  002d0: jne    0x35f35
  002d6: mov    esi,DWORD PTR [rip+0xd6c]        # 0x1048
  002dc: cmp    esi,0xffffffff
  002df: je     0x35f44
  002e5: cmp    WORD PTR [rdi+0x2],0x3
  002ea: jne    0x303
  002f0: cmp    esi,0x6
  002f3: jge    0x303
  002f9: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  002fe: jmp    0x32d
  00303: sub    rsp,0x10
  00307: movq   QWORD PTR [rsp],xmm2
  0030c: movq   QWORD PTR [rsp+0x8],xmm3
  00312: movabs rax,0x5600b755dfe0
  0031c: call   rax
  0031e: movq   xmm2,QWORD PTR [rsp]
  00323: movq   xmm3,QWORD PTR [rsp+0x8]
  00329: add    rsp,0x10
  0032d: mov    QWORD PTR [rbp-0x78],rax
:00018 
:00020 %9 = %10.call x()                    [Vec]
  00331: mov    rdi,QWORD PTR [rbp-0x78]
  00335: test   rdi,0x7
  0033c: jne    0x35f8b
  00342: cmp    DWORD PTR [rdi+0x4],0x28
  00346: jne    0x35f8b
  0034c: cmp    DWORD PTR [rip+0xfffffffffffecb4c],0x26        # 0xfffece9f
  00353: jne    0x35f8b
  00359: mov    esi,DWORD PTR [rip+0xcf1]        # 0x1050
  0035f: cmp    esi,0xffffffff
  00362: je     0x35f9a
  00368: cmp    WORD PTR [rdi+0x2],0x3
  0036d: jne    0x386
  00373: cmp    esi,0x6
  00376: jge    0x386
  0037c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00381: jmp    0x3b0
  00386: sub    rsp,0x10
  0038a: movq   QWORD PTR [rsp],xmm2
  0038f: movq   QWORD PTR [rsp+0x8],xmm3
  00395: movabs rax,0x5600b755dfe0
  0039f: call   rax
  003a1: movq   xmm2,QWORD PTR [rsp]
  003a6: movq   xmm3,QWORD PTR [rsp+0x8]
  003ac: add    rsp,0x10
  003b0: mov    QWORD PTR [rbp-0x70],rax
:00021 
:00023 %11 = %1.call n()                    [Isect]
  003b4: mov    rdi,QWORD PTR [rbp-0x30]
  003b8: test   rdi,0x7
  003bf: jne    0x35fe1
  003c5: cmp    DWORD PTR [rdi+0x4],0x30
  003c9: jne    0x35fe1
  003cf: cmp    DWORD PTR [rip+0xfffffffffffecac9],0x26        # 0xfffece9f
  003d6: jne    0x35fe1
  003dc: mov    esi,DWORD PTR [rip+0xc76]        # 0x1058
  003e2: cmp    esi,0xffffffff
  003e5: je     0x35ff0
  003eb: cmp    WORD PTR [rdi+0x2],0x3
  003f0: jne    0x409
  003f6: cmp    esi,0x6
  003f9: jge    0x409
  003ff: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00404: jmp    0x433
  00409: sub    rsp,0x10
  0040d: movq   QWORD PTR [rsp],xmm2
  00412: movq   QWORD PTR [rsp+0x8],xmm3
  00418: movabs rax,0x5600b755dfe0
  00422: call   rax
  00424: movq   xmm2,QWORD PTR [rsp]
  00429: movq   xmm3,QWORD PTR [rsp+0x8]
  0042f: add    rsp,0x10
  00433: mov    QWORD PTR [rbp-0x80],rax
:00024 
:00026 %10 = %11.call x()                   [Vec]
  00437: mov    rdi,QWORD PTR [rbp-0x80]
  0043b: test   rdi,0x7
  00442: jne    0x36037
  00448: cmp    DWORD PTR [rdi+0x4],0x28
  0044c: jne    0x36037
  00452: cmp    DWORD PTR [rip+0xfffffffffffeca46],0x26        # 0xfffece9f
  00459: jne    0x36037
  0045f: mov    esi,DWORD PTR [rip+0xbfb]        # 0x1060
  00465: cmp    esi,0xffffffff
  00468: je     0x36046
  0046e: cmp    WORD PTR [rdi+0x2],0x3
  00473: jne    0x48c
  00479: cmp    esi,0x6
  0047c: jge    0x48c
  00482: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00487: jmp    0x4b6
  0048c: sub    rsp,0x10
  00490: movq   QWORD PTR [rsp],xmm2
  00495: movq   QWORD PTR [rsp+0x8],xmm3
  0049b: movabs rax,0x5600b755dfe0
  004a5: call   rax
  004a7: movq   xmm2,QWORD PTR [rsp]
  004ac: movq   xmm3,QWORD PTR [rsp+0x8]
  004b2: add    rsp,0x10
  004b6: mov    QWORD PTR [rbp-0x78],rax
:00027 
:00029 %10 = %5 * %10                       [Float][Float]
  004ba: mov    rdi,QWORD PTR [rbp-0x78]
  004be: test   rdi,0x1
  004c5: jne    0x3608d
  004cb: test   rdi,0x2
  004d2: je     0x50e
  004d8: xorps  xmm4,xmm4
  004db: movabs rax,0x8000000000000002
  004e5: cmp    rdi,rax
  004e8: je     0x520
  004ee: mov    rax,rdi
  004f1: sar    rax,0x3f
  004f5: add    rax,0x2
  004f9: and    rdi,0xfffffffffffffffc
  004fd: or     rdi,rax
  00500: rol    rdi,0x3d
  00504: movq   xmm4,rdi
  00509: jmp    0x520
  0050e: call   0xfffea3b0
  00513: test   rax,rax
  00516: je     0x3608d
  0051c: movq   xmm4,xmm0
  00520: mulsd  xmm4,xmm2
:00030 %9 = %9 + %10                        [Float][Float]
  00524: mov    rdi,QWORD PTR [rbp-0x70]
  00528: test   rdi,0x1
  0052f: jne    0x3609c
  00535: test   rdi,0x2
  0053c: je     0x578
  00542: xorps  xmm5,xmm5
  00545: movabs rax,0x8000000000000002
  0054f: cmp    rdi,rax
  00552: je     0x58a
  00558: mov    rax,rdi
  0055b: sar    rax,0x3f
  0055f: add    rax,0x2
  00563: and    rdi,0xfffffffffffffffc
  00567: or     rdi,rax
  0056a: rol    rdi,0x3d
  0056e: movq   xmm5,rdi
  00573: jmp    0x58a
  00578: call   0xfffea3b0
  0057d: test   rax,rax
  00580: je     0x3609c
  00586: movq   xmm5,xmm0
  0058a: addsd  xmm5,xmm4
:00031 %11 = %1.call pl()                   [Isect]
  0058e: mov    rdi,QWORD PTR [rbp-0x30]
  00592: test   rdi,0x7
  00599: jne    0x360b8
  0059f: cmp    DWORD PTR [rdi+0x4],0x30
  005a3: jne    0x360b8
  005a9: cmp    DWORD PTR [rip+0xfffffffffffec8ef],0x26        # 0xfffece9f
  005b0: jne    0x360b8
  005b6: mov    esi,DWORD PTR [rip+0xaac]        # 0x1068
  005bc: cmp    esi,0xffffffff
  005bf: je     0x360e1
  005c5: cmp    WORD PTR [rdi+0x2],0x3
  005ca: jne    0x5e3
  005d0: cmp    esi,0x6
  005d3: jge    0x5e3
  005d9: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005de: jmp    0x625
  005e3: sub    rsp,0x20
  005e7: movq   QWORD PTR [rsp],xmm2
  005ec: movq   QWORD PTR [rsp+0x8],xmm3
  005f2: movq   QWORD PTR [rsp+0x10],xmm4
  005f8: movq   QWORD PTR [rsp+0x18],xmm5
  005fe: movabs rax,0x5600b755dfe0
  00608: call   rax
  0060a: movq   xmm2,QWORD PTR [rsp]
  0060f: movq   xmm3,QWORD PTR [rsp+0x8]
  00615: movq   xmm4,QWORD PTR [rsp+0x10]
  0061b: movq   xmm5,QWORD PTR [rsp+0x18]
  00621: add    rsp,0x20
  00625: mov    QWORD PTR [rbp-0x80],rax
:00032 
:00034 %10 = %11.call y()                   [Vec]
  00629: mov    rdi,QWORD PTR [rbp-0x80]
  0062d: test   rdi,0x7
  00634: jne    0x36140
  0063a: cmp    DWORD PTR [rdi+0x4],0x28
  0063e: jne    0x36140
  00644: cmp    DWORD PTR [rip+0xfffffffffffec854],0x26        # 0xfffece9f
  0064b: jne    0x36140
  00651: mov    esi,DWORD PTR [rip+0xa19]        # 0x1070
  00657: cmp    esi,0xffffffff
  0065a: je     0x3615c
  00660: cmp    WORD PTR [rdi+0x2],0x3
  00665: jne    0x67e
  0066b: cmp    esi,0x6
  0066e: jge    0x67e
  00674: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00679: jmp    0x6b4
  0067e: sub    rsp,0x20
  00682: movq   QWORD PTR [rsp],xmm2
  00687: movq   QWORD PTR [rsp+0x8],xmm3
  0068d: movq   QWORD PTR [rsp+0x10],xmm5
  00693: movabs rax,0x5600b755dfe0
  0069d: call   rax
  0069f: movq   xmm2,QWORD PTR [rsp]
  006a4: movq   xmm3,QWORD PTR [rsp+0x8]
  006aa: movq   xmm5,QWORD PTR [rsp+0x10]
  006b0: add    rsp,0x20
  006b4: mov    QWORD PTR [rbp-0x78],rax
:00035 
:00037 %12 = %1.call n()                    [Isect]
  006b8: mov    rdi,QWORD PTR [rbp-0x30]
  006bc: test   rdi,0x7
  006c3: jne    0x361af
  006c9: cmp    DWORD PTR [rdi+0x4],0x30
  006cd: jne    0x361af
  006d3: cmp    DWORD PTR [rip+0xfffffffffffec7c5],0x26        # 0xfffece9f
  006da: jne    0x361af
  006e0: mov    esi,DWORD PTR [rip+0x992]        # 0x1078
  006e6: cmp    esi,0xffffffff
  006e9: je     0x361cb
  006ef: cmp    WORD PTR [rdi+0x2],0x3
  006f4: jne    0x70d
  006fa: cmp    esi,0x6
  006fd: jge    0x70d
  00703: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00708: jmp    0x743
  0070d: sub    rsp,0x20
  00711: movq   QWORD PTR [rsp],xmm2
  00716: movq   QWORD PTR [rsp+0x8],xmm3
  0071c: movq   QWORD PTR [rsp+0x10],xmm5
  00722: movabs rax,0x5600b755dfe0
  0072c: call   rax
  0072e: movq   xmm2,QWORD PTR [rsp]
  00733: movq   xmm3,QWORD PTR [rsp+0x8]
  00739: movq   xmm5,QWORD PTR [rsp+0x10]
  0073f: add    rsp,0x20
  00743: mov    QWORD PTR [rbp-0x88],rax
:00038 
:00040 %11 = %12.call y()                   [Vec]
  0074a: mov    rdi,QWORD PTR [rbp-0x88]
  00751: test   rdi,0x7
  00758: jne    0x3621e
  0075e: cmp    DWORD PTR [rdi+0x4],0x28
  00762: jne    0x3621e
  00768: cmp    DWORD PTR [rip+0xfffffffffffec730],0x26        # 0xfffece9f
  0076f: jne    0x3621e
  00775: mov    esi,DWORD PTR [rip+0x905]        # 0x1080
  0077b: cmp    esi,0xffffffff
  0077e: je     0x3623a
  00784: cmp    WORD PTR [rdi+0x2],0x3
  00789: jne    0x7a2
  0078f: cmp    esi,0x6
  00792: jge    0x7a2
  00798: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0079d: jmp    0x7d8
  007a2: sub    rsp,0x20
  007a6: movq   QWORD PTR [rsp],xmm2
  007ab: movq   QWORD PTR [rsp+0x8],xmm3
  007b1: movq   QWORD PTR [rsp+0x10],xmm5
  007b7: movabs rax,0x5600b755dfe0
  007c1: call   rax
  007c3: movq   xmm2,QWORD PTR [rsp]
  007c8: movq   xmm3,QWORD PTR [rsp+0x8]
  007ce: movq   xmm5,QWORD PTR [rsp+0x10]
  007d4: add    rsp,0x20
  007d8: mov    QWORD PTR [rbp-0x80],rax
:00041 
:00043 %11 = %5 * %11                       [Float][Float]
  007dc: mov    rdi,QWORD PTR [rbp-0x80]
  007e0: test   rdi,0x1
  007e7: jne    0x3628d
  007ed: test   rdi,0x2
  007f4: je     0x830
  007fa: xorps  xmm4,xmm4
  007fd: movabs rax,0x8000000000000002
  00807: cmp    rdi,rax
  0080a: je     0x842
  00810: mov    rax,rdi
  00813: sar    rax,0x3f
  00817: add    rax,0x2
  0081b: and    rdi,0xfffffffffffffffc
  0081f: or     rdi,rax
  00822: rol    rdi,0x3d
  00826: movq   xmm4,rdi
  0082b: jmp    0x842
  00830: call   0xfffea3b0
  00835: test   rax,rax
  00838: je     0x3628d
  0083e: movq   xmm4,xmm0
  00842: mulsd  xmm4,xmm2
:00044 %10 = %10 + %11                      [Float][Float]
  00846: mov    rdi,QWORD PTR [rbp-0x78]
  0084a: test   rdi,0x1
  00851: jne    0x362a9
  00857: test   rdi,0x2
  0085e: je     0x89a
  00864: xorps  xmm6,xmm6
  00867: movabs rax,0x8000000000000002
  00871: cmp    rdi,rax
  00874: je     0x8ac
  0087a: mov    rax,rdi
  0087d: sar    rax,0x3f
  00881: add    rax,0x2
  00885: and    rdi,0xfffffffffffffffc
  00889: or     rdi,rax
  0088c: rol    rdi,0x3d
  00890: movq   xmm6,rdi
  00895: jmp    0x8ac
  0089a: call   0xfffea3b0
  0089f: test   rax,rax
  008a2: je     0x362a9
  008a8: movq   xmm6,xmm0
  008ac: addsd  xmm6,xmm4
:00045 %12 = %1.call pl()                   [Isect]
  008b0: mov    rdi,QWORD PTR [rbp-0x30]
  008b4: test   rdi,0x7
  008bb: jne    0x362d2
  008c1: cmp    DWORD PTR [rdi+0x4],0x30
  008c5: jne    0x362d2
  008cb: cmp    DWORD PTR [rip+0xfffffffffffec5cd],0x26        # 0xfffece9f
  008d2: jne    0x362d2
  008d8: mov    esi,DWORD PTR [rip+0x7aa]        # 0x1088
  008de: cmp    esi,0xffffffff
  008e1: je     0x36308
  008e7: cmp    WORD PTR [rdi+0x2],0x3
  008ec: jne    0x905
  008f2: cmp    esi,0x6
  008f5: jge    0x905
  008fb: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00900: jmp    0x953
  00905: sub    rsp,0x30
  00909: movq   QWORD PTR [rsp],xmm2
  0090e: movq   QWORD PTR [rsp+0x8],xmm3
  00914: movq   QWORD PTR [rsp+0x10],xmm4
  0091a: movq   QWORD PTR [rsp+0x18],xmm5
  00920: movq   QWORD PTR [rsp+0x20],xmm6
  00926: movabs rax,0x5600b755dfe0
  00930: call   rax
  00932: movq   xmm2,QWORD PTR [rsp]
  00937: movq   xmm3,QWORD PTR [rsp+0x8]
  0093d: movq   xmm4,QWORD PTR [rsp+0x10]
  00943: movq   xmm5,QWORD PTR [rsp+0x18]
  00949: movq   xmm6,QWORD PTR [rsp+0x20]
  0094f: add    rsp,0x30
  00953: mov    QWORD PTR [rbp-0x88],rax
:00046 
:00048 %11 = %12.call z()                   [Vec]
  0095a: mov    rdi,QWORD PTR [rbp-0x88]
  00961: test   rdi,0x7
  00968: jne    0x36373
  0096e: cmp    DWORD PTR [rdi+0x4],0x28
  00972: jne    0x36373
  00978: cmp    DWORD PTR [rip+0xfffffffffffec520],0x26        # 0xfffece9f
  0097f: jne    0x36373
  00985: mov    esi,DWORD PTR [rip+0x705]        # 0x1090
  0098b: cmp    esi,0xffffffff
  0098e: je     0x3639c
  00994: cmp    WORD PTR [rdi+0x2],0x3
  00999: jne    0x9b2
  0099f: cmp    esi,0x6
  009a2: jge    0x9b2
  009a8: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009ad: jmp    0x9f4
  009b2: sub    rsp,0x20
  009b6: movq   QWORD PTR [rsp],xmm2
  009bb: movq   QWORD PTR [rsp+0x8],xmm3
  009c1: movq   QWORD PTR [rsp+0x10],xmm5
  009c7: movq   QWORD PTR [rsp+0x18],xmm6
  009cd: movabs rax,0x5600b755dfe0
  009d7: call   rax
  009d9: movq   xmm2,QWORD PTR [rsp]
  009de: movq   xmm3,QWORD PTR [rsp+0x8]
  009e4: movq   xmm5,QWORD PTR [rsp+0x10]
  009ea: movq   xmm6,QWORD PTR [rsp+0x18]
  009f0: add    rsp,0x20
  009f4: mov    QWORD PTR [rbp-0x80],rax
:00049 
:00051 %13 = %1.call n()                    [Isect]
  009f8: mov    rdi,QWORD PTR [rbp-0x30]
  009fc: test   rdi,0x7
  00a03: jne    0x363fb
  00a09: cmp    DWORD PTR [rdi+0x4],0x30
  00a0d: jne    0x363fb
  00a13: cmp    DWORD PTR [rip+0xfffffffffffec485],0x26        # 0xfffece9f
  00a1a: jne    0x363fb
  00a20: mov    esi,DWORD PTR [rip+0x672]        # 0x1098
  00a26: cmp    esi,0xffffffff
  00a29: je     0x36424
  00a2f: cmp    WORD PTR [rdi+0x2],0x3
  00a34: jne    0xa4d
  00a3a: cmp    esi,0x6
  00a3d: jge    0xa4d
  00a43: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a48: jmp    0xa8f
  00a4d: sub    rsp,0x20
  00a51: movq   QWORD PTR [rsp],xmm2
  00a56: movq   QWORD PTR [rsp+0x8],xmm3
  00a5c: movq   QWORD PTR [rsp+0x10],xmm5
  00a62: movq   QWORD PTR [rsp+0x18],xmm6
  00a68: movabs rax,0x5600b755dfe0
  00a72: call   rax
  00a74: movq   xmm2,QWORD PTR [rsp]
  00a79: movq   xmm3,QWORD PTR [rsp+0x8]
  00a7f: movq   xmm5,QWORD PTR [rsp+0x10]
  00a85: movq   xmm6,QWORD PTR [rsp+0x18]
  00a8b: add    rsp,0x20
  00a8f: mov    QWORD PTR [rbp-0x90],rax
:00052 
:00054 %12 = %13.call z()                   [Vec]
  00a96: mov    rdi,QWORD PTR [rbp-0x90]
  00a9d: test   rdi,0x7
  00aa4: jne    0x36483
  00aaa: cmp    DWORD PTR [rdi+0x4],0x28
  00aae: jne    0x36483
  00ab4: cmp    DWORD PTR [rip+0xfffffffffffec3e4],0x26        # 0xfffece9f
  00abb: jne    0x36483
  00ac1: mov    esi,DWORD PTR [rip+0x5d9]        # 0x10a0
  00ac7: cmp    esi,0xffffffff
  00aca: je     0x364ac
  00ad0: cmp    WORD PTR [rdi+0x2],0x3
  00ad5: jne    0xaee
  00adb: cmp    esi,0x6
  00ade: jge    0xaee
  00ae4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ae9: jmp    0xb30
  00aee: sub    rsp,0x20
  00af2: movq   QWORD PTR [rsp],xmm2
  00af7: movq   QWORD PTR [rsp+0x8],xmm3
  00afd: movq   QWORD PTR [rsp+0x10],xmm5
  00b03: movq   QWORD PTR [rsp+0x18],xmm6
  00b09: movabs rax,0x5600b755dfe0
  00b13: call   rax
  00b15: movq   xmm2,QWORD PTR [rsp]
  00b1a: movq   xmm3,QWORD PTR [rsp+0x8]
  00b20: movq   xmm5,QWORD PTR [rsp+0x10]
  00b26: movq   xmm6,QWORD PTR [rsp+0x18]
  00b2c: add    rsp,0x20
  00b30: mov    QWORD PTR [rbp-0x88],rax
:00055 
:00057 %12 = %5 * %12                       [Float][Float]
  00b37: mov    rdi,QWORD PTR [rbp-0x88]
  00b3e: test   rdi,0x1
  00b45: jne    0x3650b
  00b4b: test   rdi,0x2
  00b52: je     0xb8e
  00b58: xorps  xmm4,xmm4
  00b5b: movabs rax,0x8000000000000002
  00b65: cmp    rdi,rax
  00b68: je     0xba0
  00b6e: mov    rax,rdi
  00b71: sar    rax,0x3f
  00b75: add    rax,0x2
  00b79: and    rdi,0xfffffffffffffffc
  00b7d: or     rdi,rax
  00b80: rol    rdi,0x3d
  00b84: movq   xmm4,rdi
  00b89: jmp    0xba0
  00b8e: call   0xfffea3b0
  00b93: test   rax,rax
  00b96: je     0x3650b
  00b9c: movq   xmm4,xmm0
  00ba0: mulsd  xmm4,xmm2
:00058 %11 = %11 + %12                      [Float][Float]
  00ba4: mov    rdi,QWORD PTR [rbp-0x80]
  00ba8: test   rdi,0x1
  00baf: jne    0x36534
  00bb5: test   rdi,0x2
  00bbc: je     0xbf8
  00bc2: xorps  xmm7,xmm7
  00bc5: movabs rax,0x8000000000000002
  00bcf: cmp    rdi,rax
  00bd2: je     0xc0a
  00bd8: mov    rax,rdi
  00bdb: sar    rax,0x3f
  00bdf: add    rax,0x2
  00be3: and    rdi,0xfffffffffffffffc
  00be7: or     rdi,rax
  00bea: rol    rdi,0x3d
  00bee: movq   xmm7,rdi
  00bf3: jmp    0xc0a
  00bf8: call   0xfffea3b0
  00bfd: test   rax,rax
  00c00: je     0x36534
  00c06: movq   xmm7,xmm0
  00c0a: addsd  xmm7,xmm4
:00059 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  00c0e: movq   xmm0,xmm5
  00c12: call   0xfffea4a3
  00c17: mov    QWORD PTR [rbp-0x70],rax
  00c1b: movq   xmm0,xmm6
  00c1f: call   0xfffea4a3
  00c24: mov    QWORD PTR [rbp-0x78],rax
  00c28: movq   xmm0,xmm7
  00c2c: call   0xfffea4a3
  00c31: mov    QWORD PTR [rbp-0x80],rax
  00c35: mov    rdi,QWORD PTR [rbp-0x68]
  00c39: test   rdi,0x7
  00c40: jne    0x3656d
  00c46: cmp    DWORD PTR [rdi+0x4],0x29
  00c4a: jne    0x3656d
  00c50: cmp    DWORD PTR [rip+0xfffffffffffec248],0x26        # 0xfffece9f
  00c57: jne    0x3656d
  00c5d: mov    r9,0x0
  00c64: sub    rsp,0x30
  00c68: movq   QWORD PTR [rsp],xmm2
  00c6d: movq   QWORD PTR [rsp+0x8],xmm3
  00c73: movq   QWORD PTR [rsp+0x10],xmm4
  00c79: movq   QWORD PTR [rsp+0x18],xmm5
  00c7f: movq   QWORD PTR [rsp+0x20],xmm6
  00c85: movq   QWORD PTR [rsp+0x28],xmm7
  00c8b: mov    rdx,rdi
  00c8e: mov    rax,QWORD PTR [rbx]
  00c91: lea    rdi,[rsp-0x18]
  00c96: mov    QWORD PTR [rdi],rax
  00c99: mov    QWORD PTR [rbx],rdi
  00c9c: mov    QWORD PTR [rsp-0x20],0x0
  00ca5: mov    QWORD PTR [rsp-0x38],rcx
  00caa: lea    rcx,[rbp-0x70]
  00cae: mov    r8,0x3
  00cb5: call   0x3658c
  00cba: lea    rdi,[rbp-0x8]
  00cbe: mov    QWORD PTR [rbx],rdi
  00cc1: movq   xmm2,QWORD PTR [rsp]
  00cc6: movq   xmm3,QWORD PTR [rsp+0x8]
  00ccc: movq   xmm4,QWORD PTR [rsp+0x10]
  00cd2: movq   xmm5,QWORD PTR [rsp+0x18]
  00cd8: movq   xmm6,QWORD PTR [rsp+0x20]
  00cde: movq   xmm7,QWORD PTR [rsp+0x28]
  00ce4: add    rsp,0x30
  00ce8: movabs r13,0x5600b92b7ce0
  00cf2: test   rax,rax
  00cf5: je     0xfffea377
  00cfb: mov    QWORD PTR [rbp-0x60],rax
:00060 
:00062 %8 = literal[77]
  00cff: mov    rax,0x9b
  00d06: mov    QWORD PTR [rbp-0x68],rax
:00063 _ = %4.call times(&%8)               [Integer]
  00d0a: mov    rdi,QWORD PTR [rbp-0x48]
  00d0e: test   rdi,0x1
  00d15: je     0x365be
  00d1b: cmp    DWORD PTR [rip+0xfffffffffffec17d],0x26        # 0xfffece9f
  00d22: jne    0x365be
  00d28: mov    r9,QWORD PTR [rbp-0x68]
  00d2c: sub    rsp,0x20
  00d30: movq   QWORD PTR [rsp],xmm4
  00d35: movq   QWORD PTR [rsp+0x8],xmm5
  00d3b: movq   QWORD PTR [rsp+0x10],xmm6
  00d41: movq   QWORD PTR [rsp+0x18],xmm7
  00d47: mov    rdx,rdi
  00d4a: mov    rax,QWORD PTR [rbx]
  00d4d: lea    rdi,[rsp-0x18]
  00d52: mov    QWORD PTR [rdi],rax
  00d55: mov    QWORD PTR [rbx],rdi
  00d58: mov    QWORD PTR [rsp-0x20],0x0
  00d61: mov    QWORD PTR [rsp-0x38],rcx
  00d66: lea    rcx,[rbp-0x70]
  00d6a: mov    r8,0x0
  00d71: call   0x365dd
  00d76: lea    rdi,[rbp-0x8]
  00d7a: mov    QWORD PTR [rbx],rdi
  00d7d: movq   xmm4,QWORD PTR [rsp]
  00d82: movq   xmm5,QWORD PTR [rsp+0x8]
  00d88: movq   xmm6,QWORD PTR [rsp+0x10]
  00d8e: movq   xmm7,QWORD PTR [rsp+0x18]
  00d94: add    rsp,0x20
  00d98: movabs r13,0x5600b92b7d20
  00da2: test   rax,rax
  00da5: je     0xfffea377
:00064 
:00066 %8 = %3.call to_f()                  [Integer]
  00dab: mov    rdi,QWORD PTR [rbp-0x40]
  00daf: test   rdi,0x1
  00db6: je     0x3660f
  00dbc: cmp    DWORD PTR [rip+0xfffffffffffec0dc],0x26        # 0xfffece9f
  00dc3: jne    0x3660f
  00dc9: sar    rdi,1
  00dcc: cvtsi2sd xmm2,rdi
:00067 
:00069 %9 = %4.call to_f()                  [Integer]
  00dd1: mov    rdi,QWORD PTR [rbp-0x48]
  00dd5: test   rdi,0x1
  00ddc: je     0x3662e
  00de2: cmp    DWORD PTR [rip+0xfffffffffffec0b6],0x26        # 0xfffece9f
  00de9: jne    0x3662e
  00def: sar    rdi,1
  00df2: cvtsi2sd xmm3,rdi
:00070 
:00072 %8 = %8 * %9                         [Float][Float]
  00df7: mulsd  xmm2,xmm3
:00073 %8 = %8 - %6                         [Float][Float]
  00dfb: mov    rdi,QWORD PTR [rbp-0x58]
  00dff: test   rdi,0x1
  00e06: jne    0x3665a
  00e0c: test   rdi,0x2
  00e13: je     0xe4f
  00e19: xorps  xmm5,xmm5
  00e1c: movabs rax,0x8000000000000002
  00e26: cmp    rdi,rax
  00e29: je     0xe61
  00e2f: mov    rax,rdi
  00e32: sar    rax,0x3f
  00e36: add    rax,0x2
  00e3a: and    rdi,0xfffffffffffffffc
  00e3e: or     rdi,rax
  00e41: rol    rdi,0x3d
  00e45: movq   xmm5,rdi
  00e4a: jmp    0xe61
  00e4f: call   0xfffea3b0
  00e54: test   rax,rax
  00e57: je     0x3665a
  00e5d: movq   xmm5,xmm0
  00e61: subsd  xmm2,xmm5
:00074 %9 = %3.call to_f()                  [Integer]
  00e65: mov    rdi,QWORD PTR [rbp-0x40]
  00e69: test   rdi,0x1
  00e70: je     0x36693
  00e76: cmp    DWORD PTR [rip+0xfffffffffffec022],0x26        # 0xfffece9f
  00e7d: jne    0x36693
  00e83: sar    rdi,1
  00e86: cvtsi2sd xmm3,rdi
:00075 
:00077 %10 = %4.call to_f()                 [Integer]
  00e8b: mov    rdi,QWORD PTR [rbp-0x48]
  00e8f: test   rdi,0x1
  00e96: je     0x366bf
  00e9c: cmp    DWORD PTR [rip+0xfffffffffffebffc],0x26        # 0xfffece9f
  00ea3: jne    0x366bf
  00ea9: sar    rdi,1
  00eac: cvtsi2sd xmm6,rdi
:00078 
:00080 %9 = %9 * %10                        [Float][Float]
  00eb1: mulsd  xmm3,xmm6
:00081 %6 = %8 / %9                         [Float][Float]
  00eb5: movq   xmm5,xmm2
  00eb9: movq   rax,xmm3
  00ebe: test   rax,rax
  00ec1: je     0xfffea39c
  00ec7: divsd  xmm5,xmm3
:00082 %9 = const[Vec]                      [Vec]
  00ecb: mov    rax,QWORD PTR [rip+0xfffffffffffebfda]        # 0xfffeceac
  00ed2: cmp    rax,QWORD PTR [rip+0x1e3]        # 0x10bc
  00ed9: jne    0x366f8
  00edf: mov    rax,QWORD PTR [rip+0x1c6]        # 0x10ac
  00ee6: mov    QWORD PTR [rbp-0x70],rax
:00083 %10 = %6
:00084 %11 = %6
:00085 %12 = %6
:00086 %8 = %9.call new(%10; 3)             [#<Class:Vec>]
  00eea: movq   xmm0,xmm5
  00eee: call   0xfffea4a3
  00ef3: mov    QWORD PTR [rbp-0x78],rax
  00ef7: movq   xmm0,xmm5
  00efb: call   0xfffea4a3
  00f00: mov    QWORD PTR [rbp-0x80],rax
  00f04: movq   xmm0,xmm5
  00f08: call   0xfffea4a3
  00f0d: mov    QWORD PTR [rbp-0x88],rax
  00f14: mov    rdi,QWORD PTR [rbp-0x70]
  00f18: test   rdi,0x7
  00f1f: jne    0x36780
  00f25: cmp    DWORD PTR [rdi+0x4],0x29
  00f29: jne    0x36780
  00f2f: cmp    DWORD PTR [rip+0xfffffffffffebf69],0x26        # 0xfffece9f
  00f36: jne    0x36780
  00f3c: mov    r9,0x0
  00f43: sub    rsp,0x10
  00f47: movq   QWORD PTR [rsp],xmm5
  00f4c: mov    rdx,rdi
  00f4f: mov    rax,QWORD PTR [rbx]
  00f52: lea    rdi,[rsp-0x18]
  00f57: mov    QWORD PTR [rdi],rax
  00f5a: mov    QWORD PTR [rbx],rdi
  00f5d: mov    QWORD PTR [rsp-0x20],0x0
  00f66: mov    QWORD PTR [rsp-0x38],rcx
  00f6b: lea    rcx,[rbp-0x78]
  00f6f: mov    r8,0x3
  00f76: call   0x3679c
  00f7b: lea    rdi,[rbp-0x8]
  00f7f: mov    QWORD PTR [rbx],rdi
  00f82: movq   xmm5,QWORD PTR [rsp]
  00f87: add    rsp,0x10
  00f8b: movabs r13,0x5600b92b7e90
  00f95: test   rax,rax
  00f98: je     0xfffea377
  00f9e: mov    QWORD PTR [rbp-0x68],rax
:00087 
:00089 ret %8
  00fa2: mov    rax,QWORD PTR [rbp-0x68]
  00fa6: leave  
  00fa7: ret    
==> start whole compile: otherBasis FuncId(59) self_class:Scene start:[00000] bytecode:0x5600b92cdf40
<== finished compile. elapsed:210.6µs
offset:Pos(93576) code: 7591 bytes  data: 373 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	mov    eax,edx
  0000d:    	sub    eax,0x2
  00010:    	jge    0x32
  00016:    	neg    rdx
  00019:    	lea    rdx,[rbp+rdx*8-0x30]
  0001e: 00 	mov    QWORD PTR [rdx],0x4
  00025:    	sub    rdx,0x8
  00029:    	add    eax,0x1
  0002c:    	jne    0x1e
  00032: 00 	mov    rax,0x4
  00039:    	mov    QWORD PTR [rbp-0x40],rax
  0003d:    	mov    QWORD PTR [rbp-0x48],rax
  00041:    	mov    QWORD PTR [rbp-0x50],rax
  00045:    	mov    QWORD PTR [rbp-0x58],rax
  00049:    	mov    QWORD PTR [rbp-0x60],rax
  0004d:    	mov    QWORD PTR [rbp-0x68],rax
  00051:    	mov    rdi,QWORD PTR [rbp-0x28]
  00055: 00 	test   rdi,0x7
  0005c:    	jne    0x3570a
  00062:    	cmp    DWORD PTR [rdi+0x4],0x32
  00066:    	jne    0x3570a
:00000 init reg_num:9 arg_num:2 stack_offset:7
:00001 %3 = 2: i32
  0006c: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00002 %5 = const[Vec]                      [Vec]
  00074: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffebd6d]        # 0xfffebde8
  0007b: 00 	cmp    rax,QWORD PTR [rip+0x1d36]        # 0x1db8
  00082:    	jne    0x35719
  00088: 00 	mov    rax,QWORD PTR [rip+0x1d19]        # 0x1da8
  0008f:    	mov    QWORD PTR [rbp-0x50],rax
:00003 %6 = %2.call x()                     [Vec]
  00093:    	mov    rdi,QWORD PTR [rbp-0x38]
  00097: 00 	test   rdi,0x7
  0009e:    	jne    0x3575f
  000a4:    	cmp    DWORD PTR [rdi+0x4],0x28
  000a8:    	jne    0x3575f
  000ae: 26 	cmp    DWORD PTR [rip+0xfffffffffffebd26],0x26        # 0xfffebddb
  000b5:    	jne    0x3575f
  000bb:    	mov    esi,DWORD PTR [rip+0x1d03]        # 0x1dc4
  000c1:    	cmp    esi,0xffffffff
  000c4:    	je     0x3576e
  000ca:    	cmp    WORD PTR [rdi+0x2],0x3
  000cf:    	jne    0xe8
  000d5:    	cmp    esi,0x6
  000d8:    	jge    0xe8
  000de:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000e3:    	jmp    0xf4
  000e8: 00 	movabs rax,0x5600b755dfe0
  000f2:    	call   rax
  000f4:    	mov    QWORD PTR [rbp-0x58],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  000f8:    	mov    rdi,QWORD PTR [rbp-0x38]
  000fc: 00 	test   rdi,0x7
  00103:    	jne    0x35797
  00109:    	cmp    DWORD PTR [rdi+0x4],0x28
  0010d:    	jne    0x35797
  00113: 26 	cmp    DWORD PTR [rip+0xfffffffffffebcc1],0x26        # 0xfffebddb
  0011a:    	jne    0x35797
  00120:    	mov    esi,DWORD PTR [rip+0x1ca6]        # 0x1dcc
  00126:    	cmp    esi,0xffffffff
  00129:    	je     0x357a6
  0012f:    	cmp    WORD PTR [rdi+0x2],0x3
  00134:    	jne    0x14d
  0013a:    	cmp    esi,0x6
  0013d:    	jge    0x14d
  00143:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00148:    	jmp    0x159
  0014d: 00 	movabs rax,0x5600b755dfe0
  00157:    	call   rax
  00159:    	mov    QWORD PTR [rbp-0x60],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  0015d:    	mov    rdi,QWORD PTR [rbp-0x38]
  00161: 00 	test   rdi,0x7
  00168:    	jne    0x357cf
  0016e:    	cmp    DWORD PTR [rdi+0x4],0x28
  00172:    	jne    0x357cf
  00178: 26 	cmp    DWORD PTR [rip+0xfffffffffffebc5c],0x26        # 0xfffebddb
  0017f:    	jne    0x357cf
  00185:    	mov    esi,DWORD PTR [rip+0x1c49]        # 0x1dd4
  0018b:    	cmp    esi,0xffffffff
  0018e:    	je     0x357de
  00194:    	cmp    WORD PTR [rdi+0x2],0x3
  00199:    	jne    0x1b2
  0019f:    	cmp    esi,0x6
  001a2:    	jge    0x1b2
  001a8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ad:    	jmp    0x1be
  001b2: 00 	movabs rax,0x5600b755dfe0
  001bc:    	call   rax
  001be:    	mov    QWORD PTR [rbp-0x68],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001c2:    	mov    rdi,QWORD PTR [rbp-0x50]
  001c6: 00 	test   rdi,0x7
  001cd:    	jne    0x35807
  001d3:    	cmp    DWORD PTR [rdi+0x4],0x29
  001d7:    	jne    0x35807
  001dd: 26 	cmp    DWORD PTR [rip+0xfffffffffffebbf7],0x26        # 0xfffebddb
  001e4:    	jne    0x35807
  001ea: 00 	mov    r9,0x0
  001f1:    	mov    rdx,rdi
  001f4:    	mov    rax,QWORD PTR [rbx]
  001f7:    	lea    rdi,[rsp-0x18]
  001fc:    	mov    QWORD PTR [rdi],rax
  001ff:    	mov    QWORD PTR [rbx],rdi
  00202: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0020b:    	mov    QWORD PTR [rsp-0x38],rcx
  00210:    	lea    rcx,[rbp-0x58]
  00214: 00 	mov    r8,0x3
  0021b:    	call   0x35816
  00220:    	lea    rdi,[rbp-0x8]
  00224:    	mov    QWORD PTR [rbx],rdi
  00227: 00 	movabs r13,0x5600b92ce020
  00231:    	test   rax,rax
  00234:    	je     0xfffe92b3
  0023a:    	mov    QWORD PTR [rbp-0x48],rax
:00013 
:00015 %1:.[%3:] = %4
  0023e:    	mov    rdx,QWORD PTR [rbp-0x30]
  00242:    	mov    rcx,QWORD PTR [rbp-0x40]
  00246:    	mov    r8,QWORD PTR [rbp-0x48]
  0024a:    	mov    rdi,rbx
  0024d:    	mov    rsi,r12
  00250: 00 	movabs rax,0x5600b75c5370
  0025a:    	call   rax
  0025c: 00 	movabs r13,0x5600b92ce040
  00266:    	test   rax,rax
  00269:    	je     0xfffe92b3
:00016 %3 = 1: i32
  0026f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00017 %5 = const[Vec]                      [Vec]
  00277: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffebb6a]        # 0xfffebde8
  0027e: 00 	cmp    rax,QWORD PTR [rip+0x1b63]        # 0x1de8
  00285:    	jne    0x35848
  0028b: 00 	mov    rax,QWORD PTR [rip+0x1b46]        # 0x1dd8
  00292:    	mov    QWORD PTR [rbp-0x50],rax
:00018 %6 = literal[0.0]
  00296: 00 	movq   xmm2,QWORD PTR [rip+0x1b5a]        # 0x1df8
  0029e: 00 	movabs rax,0x8000000000000002
  002a8:    	mov    QWORD PTR [rbp-0x58],rax
:00019 %7 = literal[0.0]
  002ac: 00 	movq   xmm3,QWORD PTR [rip+0x1b54]        # 0x1e08
  002b4: 00 	movabs rax,0x8000000000000002
  002be:    	mov    QWORD PTR [rbp-0x60],rax
:00020 %8 = literal[0.0]
  002c2: 00 	movq   xmm4,QWORD PTR [rip+0x1b4e]        # 0x1e18
  002ca: 00 	movabs rax,0x8000000000000002
  002d4:    	mov    QWORD PTR [rbp-0x68],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002d8:    	mov    rdi,QWORD PTR [rbp-0x50]
  002dc: 00 	test   rdi,0x7
  002e3:    	jne    0x3588e
  002e9:    	cmp    DWORD PTR [rdi+0x4],0x29
  002ed:    	jne    0x3588e
  002f3: 26 	cmp    DWORD PTR [rip+0xfffffffffffebae1],0x26        # 0xfffebddb
  002fa:    	jne    0x3588e
  00300: 00 	mov    r9,0x0
  00307:    	sub    rsp,0x20
  0030b:    	movq   QWORD PTR [rsp],xmm2
  00310:    	movq   QWORD PTR [rsp+0x8],xmm3
  00316:    	movq   QWORD PTR [rsp+0x10],xmm4
  0031c:    	mov    rdx,rdi
  0031f:    	mov    rax,QWORD PTR [rbx]
  00322:    	lea    rdi,[rsp-0x18]
  00327:    	mov    QWORD PTR [rdi],rax
  0032a:    	mov    QWORD PTR [rbx],rdi
  0032d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00336:    	mov    QWORD PTR [rsp-0x38],rcx
  0033b:    	lea    rcx,[rbp-0x58]
  0033f: 00 	mov    r8,0x3
  00346:    	call   0x3589d
  0034b:    	lea    rdi,[rbp-0x8]
  0034f:    	mov    QWORD PTR [rbx],rdi
  00352:    	movq   xmm2,QWORD PTR [rsp]
  00357:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0035d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00363:    	add    rsp,0x20
  00367: 00 	movabs r13,0x5600b92ce0b0
  00371:    	test   rax,rax
  00374:    	je     0xfffe92b3
  0037a:    	mov    QWORD PTR [rbp-0x48],rax
:00022 
:00024 %1:.[%3:] = %4
  0037e:    	sub    rsp,0x20
  00382:    	movq   QWORD PTR [rsp],xmm2
  00387:    	movq   QWORD PTR [rsp+0x8],xmm3
  0038d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00393:    	mov    rdx,QWORD PTR [rbp-0x30]
  00397:    	mov    rcx,QWORD PTR [rbp-0x40]
  0039b:    	mov    r8,QWORD PTR [rbp-0x48]
  0039f:    	mov    rdi,rbx
  003a2:    	mov    rsi,r12
  003a5: 00 	movabs rax,0x5600b75c5370
  003af:    	call   rax
  003b1:    	movq   xmm2,QWORD PTR [rsp]
  003b6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003bc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003c2:    	add    rsp,0x20
  003c6: 00 	movabs r13,0x5600b92ce0d0
  003d0:    	test   rax,rax
  003d3:    	je     0xfffe92b3
:00025 %3 = %2.call x()                     [Vec]
  003d9:    	mov    rdi,QWORD PTR [rbp-0x38]
  003dd: 00 	test   rdi,0x7
  003e4:    	jne    0x358cf
  003ea:    	cmp    DWORD PTR [rdi+0x4],0x28
  003ee:    	jne    0x358cf
  003f4: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb9e0],0x26        # 0xfffebddb
  003fb:    	jne    0x358cf
  00401:    	mov    esi,DWORD PTR [rip+0x1a1d]        # 0x1e24
  00407:    	cmp    esi,0xffffffff
  0040a:    	je     0x358de
  00410:    	cmp    WORD PTR [rdi+0x2],0x3
  00415:    	jne    0x42e
  0041b:    	cmp    esi,0x6
  0041e:    	jge    0x42e
  00424:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00429:    	jmp    0x464
  0042e:    	sub    rsp,0x20
  00432:    	movq   QWORD PTR [rsp],xmm2
  00437:    	movq   QWORD PTR [rsp+0x8],xmm3
  0043d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00443: 00 	movabs rax,0x5600b755dfe0
  0044d:    	call   rax
  0044f:    	movq   xmm2,QWORD PTR [rsp]
  00454:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0045a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00460:    	add    rsp,0x20
  00464:    	mov    QWORD PTR [rbp-0x40],rax
:00026 
:00028 %4 = literal[0.6]
  00468: 00 	movq   xmm5,QWORD PTR [rip+0x19b8]        # 0x1e28
  00470: 99 	movabs rax,0xff1999999999999a
  0047a:    	mov    QWORD PTR [rbp-0x48],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  0047e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00482: 00 	test   rdi,0x1
  00489:    	jne    0x35931
  0048f: 00 	test   rdi,0x2
  00496:    	je     0x4d2
  0049c:    	xorps  xmm6,xmm6
  0049f: 00 	movabs rax,0x8000000000000002
  004a9:    	cmp    rdi,rax
  004ac:    	je     0x4e4
  004b2:    	mov    rax,rdi
  004b5:    	sar    rax,0x3f
  004b9:    	add    rax,0x2
  004bd:    	and    rdi,0xfffffffffffffffc
  004c1:    	or     rdi,rax
  004c4:    	rol    rdi,0x3d
  004c8:    	movq   xmm6,rdi
  004cd:    	jmp    0x4e4
  004d2:    	call   0xfffe92ec
  004d7:    	test   rax,rax
  004da:    	je     0x35931
  004e0:    	movq   xmm6,xmm0
  004e4:    	ucomisd xmm6,xmm5
  004e8:    	jae    0x35a32
:00031 %3 = %2.call x()                     [Vec]
  004ee:    	mov    rdi,QWORD PTR [rbp-0x38]
  004f2: 00 	test   rdi,0x7
  004f9:    	jne    0x35940
  004ff:    	cmp    DWORD PTR [rdi+0x4],0x28
  00503:    	jne    0x35940
  00509: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb8cb],0x26        # 0xfffebddb
  00510:    	jne    0x35940
  00516:    	mov    esi,DWORD PTR [rip+0x1918]        # 0x1e34
  0051c:    	cmp    esi,0xffffffff
  0051f:    	je     0x3594f
  00525:    	cmp    WORD PTR [rdi+0x2],0x3
  0052a:    	jne    0x543
  00530:    	cmp    esi,0x6
  00533:    	jge    0x543
  00539:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0053e:    	jmp    0x585
  00543:    	sub    rsp,0x20
  00547:    	movq   QWORD PTR [rsp],xmm2
  0054c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00552:    	movq   QWORD PTR [rsp+0x10],xmm4
  00558:    	movq   QWORD PTR [rsp+0x18],xmm5
  0055e: 00 	movabs rax,0x5600b755dfe0
  00568:    	call   rax
  0056a:    	movq   xmm2,QWORD PTR [rsp]
  0056f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00575:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0057b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00581:    	add    rsp,0x20
  00585:    	mov    QWORD PTR [rbp-0x40],rax
:00032 
:00034 %4 = literal[-0.6]
  00589: 00 	movq   xmm5,QWORD PTR [rip+0x18a7]        # 0x1e38
  00591: 99 	movabs rax,0xff1999999999999e
  0059b:    	mov    QWORD PTR [rbp-0x48],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  0059f:    	mov    rdi,QWORD PTR [rbp-0x40]
  005a3: 00 	test   rdi,0x1
  005aa:    	jne    0x359ae
  005b0: 00 	test   rdi,0x2
  005b7:    	je     0x5f3
  005bd:    	xorps  xmm6,xmm6
  005c0: 00 	movabs rax,0x8000000000000002
  005ca:    	cmp    rdi,rax
  005cd:    	je     0x605
  005d3:    	mov    rax,rdi
  005d6:    	sar    rax,0x3f
  005da:    	add    rax,0x2
  005de:    	and    rdi,0xfffffffffffffffc
  005e2:    	or     rdi,rax
  005e5:    	rol    rdi,0x3d
  005e9:    	movq   xmm6,rdi
  005ee:    	jmp    0x605
  005f3:    	call   0xfffe92ec
  005f8:    	test   rax,rax
  005fb:    	je     0x359ae
  00601:    	movq   xmm6,xmm0
  00605:    	ucomisd xmm6,xmm5
  00609:    	jbe    0x35a4b
:00037 %3 = 1: i32
  0060f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  00617:    	sub    rsp,0x20
  0061b:    	movq   QWORD PTR [rsp],xmm2
  00620:    	movq   QWORD PTR [rsp+0x8],xmm3
  00626:    	movq   QWORD PTR [rsp+0x10],xmm4
  0062c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00632:    	mov    rdx,QWORD PTR [rbp-0x30]
  00636:    	mov    rcx,QWORD PTR [rbp-0x40]
  0063a:    	mov    rdi,rbx
  0063d:    	mov    rsi,r12
  00640: 00 	movabs r8,0x5600b92ce1a8
  0064a: 00 	movabs rax,0x5600b75c5240
  00654:    	call   rax
  00656:    	movq   xmm2,QWORD PTR [rsp]
  0065b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00661:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00667:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0066d:    	add    rsp,0x20
  00671: 00 	movabs r13,0x5600b92ce1b0
  0067b:    	test   rax,rax
  0067e:    	je     0xfffe92b3
  00684:    	mov    QWORD PTR [rbp-0x40],rax
:00039 %4 = literal[1.0]
  00688: 00 	movq   xmm5,QWORD PTR [rip+0x17b8]        # 0x1e48
  00690: 00 	movabs rax,0xff80000000000002
  0069a:    	mov    QWORD PTR [rbp-0x48],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  0069e:    	mov    rdi,QWORD PTR [rbp-0x40]
  006a2: 00 	test   rdi,0x7
  006a9:    	jne    0x359bd
  006af:    	cmp    DWORD PTR [rdi+0x4],0x28
  006b3:    	jne    0x359bd
  006b9: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb71b],0x26        # 0xfffebddb
  006c0:    	jne    0x359bd
  006c6:    	mov    esi,DWORD PTR [rip+0x1788]        # 0x1e54
  006cc:    	cmp    esi,0xffffffff
  006cf:    	je     0x359cc
  006d5:    	cmp    WORD PTR [rdi+0x2],0x3
  006da:    	jne    0x6f7
  006e0:    	cmp    esi,0x6
  006e3:    	jge    0x6f7
  006e9:    	mov    rax,QWORD PTR [rbp-0x48]
  006ed:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006f2:    	jmp    0x750
  006f7:    	sub    rsp,0x20
  006fb:    	movq   QWORD PTR [rsp],xmm2
  00700:    	movq   QWORD PTR [rsp+0x8],xmm3
  00706:    	movq   QWORD PTR [rsp+0x10],xmm4
  0070c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00712:    	mov    rdx,QWORD PTR [rbp-0x48]
  00716: 00 	movabs rax,0x5600b755e260
  00720:    	call   rax
  00722:    	movq   xmm2,QWORD PTR [rsp]
  00727:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0072d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00733:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00739:    	add    rsp,0x20
  0073d: 00 	movabs r13,0x5600b92ce1e0
  00747:    	test   rax,rax
  0074a:    	je     0xfffe92b3
:00041 
:00043 br =>:00088
  00750:    	jmp    0x3610c
:00044 %3 = %2.call y()                     [<INVALID>]
  00755: 01 	sub    DWORD PTR [rip+0x16fc],0x1        # 0x1e58
  0075c:    	je     0x35a73
  00762:    	sub    rsp,0x20
  00766:    	movq   QWORD PTR [rsp],xmm2
  0076b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00771:    	movq   QWORD PTR [rsp+0x10],xmm4
  00777:    	movq   QWORD PTR [rsp+0x18],xmm5
  0077d:    	mov    rdi,QWORD PTR [rbp-0x38]
  00781: 00 	movabs rax,0x5600b75a2280
  0078b:    	call   rax
  0078d:    	mov    r15d,eax
  00790: 00 	cmp    r15d,DWORD PTR [rip+0x16c9]        # 0x1e60
  00797:    	jne    0x35a95
  0079d:    	mov    eax,DWORD PTR [rip+0xfffffffffffeb638]        # 0xfffebddb
  007a3:    	cmp    DWORD PTR [rip+0x16b3],eax        # 0x1e5c
  007a9:    	jne    0x35a95
  007af:    	mov    rax,QWORD PTR [rbx]
  007b2:    	lea    rdi,[rsp-0x18]
  007b7:    	mov    QWORD PTR [rdi],rax
  007ba:    	mov    QWORD PTR [rbx],rdi
  007bd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007c6:    	mov    QWORD PTR [rsp-0x38],rcx
  007cb:    	mov    rax,QWORD PTR [rbp-0x38]
  007cf:    	mov    QWORD PTR [rsp-0x38],rax
  007d4: 00 	mov    rdi,0x0
  007db: 00 	mov    QWORD PTR [rsp-0x30],0x0
  007e4: 00 	movabs rax,0x0
  007ee:    	mov    QWORD PTR [rsp-0x28],rax
  007f3: 00 	movabs r13,0x0
  007fd:    	call   0xfffe9278
  00802:    	lea    rdi,[rbp-0x8]
  00806:    	mov    QWORD PTR [rbx],rdi
  00809:    	movq   xmm2,QWORD PTR [rsp]
  0080e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00814:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0081a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00820:    	add    rsp,0x20
  00824:    	test   rax,rax
  00827:    	je     0x35b01
  0082d:    	mov    QWORD PTR [rbp-0x40],rax
:00045 
:00047 %4 = literal[0.6]
  00831: 00 	movq   xmm5,QWORD PTR [rip+0x162f]        # 0x1e68
  00839: 99 	movabs rax,0xff1999999999999a
  00843:    	mov    QWORD PTR [rbp-0x48],rax
:00048 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00049 condnotbr _%3 =>:00063
  00847:    	mov    rdi,QWORD PTR [rbp-0x40]
  0084b:    	mov    rsi,QWORD PTR [rbp-0x48]
  0084f: 00 	test   rdi,0x1
  00856:    	je     0x35b10
  0085c: 00 	test   rsi,0x1
  00863:    	je     0x35b10
  00869:    	cmp    rdi,rsi
  0086c:    	jge    0x35d12
:00050 %3 = %2.call y()                     [<INVALID>]
  00872: 01 	sub    DWORD PTR [rip+0x15f7],0x1        # 0x1e70
  00879:    	je     0x35b74
  0087f:    	sub    rsp,0x20
  00883:    	movq   QWORD PTR [rsp],xmm2
  00888:    	movq   QWORD PTR [rsp+0x8],xmm3
  0088e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00894:    	movq   QWORD PTR [rsp+0x18],xmm5
  0089a:    	mov    rdi,QWORD PTR [rbp-0x38]
  0089e: 00 	movabs rax,0x5600b75a2280
  008a8:    	call   rax
  008aa:    	mov    r15d,eax
  008ad: 00 	cmp    r15d,DWORD PTR [rip+0x15c4]        # 0x1e78
  008b4:    	jne    0x35b96
  008ba:    	mov    eax,DWORD PTR [rip+0xfffffffffffeb51b]        # 0xfffebddb
  008c0:    	cmp    DWORD PTR [rip+0x15ae],eax        # 0x1e74
  008c6:    	jne    0x35b96
  008cc:    	mov    rax,QWORD PTR [rbx]
  008cf:    	lea    rdi,[rsp-0x18]
  008d4:    	mov    QWORD PTR [rdi],rax
  008d7:    	mov    QWORD PTR [rbx],rdi
  008da: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008e3:    	mov    QWORD PTR [rsp-0x38],rcx
  008e8:    	mov    rax,QWORD PTR [rbp-0x38]
  008ec:    	mov    QWORD PTR [rsp-0x38],rax
  008f1: 00 	mov    rdi,0x0
  008f8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00901: 00 	movabs rax,0x0
  0090b:    	mov    QWORD PTR [rsp-0x28],rax
  00910: 00 	movabs r13,0x0
  0091a:    	call   0xfffe9278
  0091f:    	lea    rdi,[rbp-0x8]
  00923:    	mov    QWORD PTR [rbx],rdi
  00926:    	movq   xmm2,QWORD PTR [rsp]
  0092b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00931:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00937:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0093d:    	add    rsp,0x20
  00941:    	test   rax,rax
  00944:    	je     0x35c02
  0094a:    	mov    QWORD PTR [rbp-0x40],rax
:00051 
:00053 %4 = literal[-0.6]
  0094e: 00 	movq   xmm5,QWORD PTR [rip+0x1532]        # 0x1e88
  00956: 99 	movabs rax,0xff1999999999999e
  00960:    	mov    QWORD PTR [rbp-0x48],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  00964:    	mov    rdi,QWORD PTR [rbp-0x40]
  00968:    	mov    rsi,QWORD PTR [rbp-0x48]
  0096c: 00 	test   rdi,0x1
  00973:    	je     0x35c11
  00979: 00 	test   rsi,0x1
  00980:    	je     0x35c11
  00986:    	cmp    rdi,rsi
  00989:    	jle    0x35d2b
:00056 %3 = 1: i32
  0098f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00057 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00997:    	sub    rsp,0x20
  0099b:    	movq   QWORD PTR [rsp],xmm2
  009a0:    	movq   QWORD PTR [rsp+0x8],xmm3
  009a6:    	movq   QWORD PTR [rsp+0x10],xmm4
  009ac:    	movq   QWORD PTR [rsp+0x18],xmm5
  009b2:    	mov    rdx,QWORD PTR [rbp-0x30]
  009b6:    	mov    rcx,QWORD PTR [rbp-0x40]
  009ba:    	mov    rdi,rbx
  009bd:    	mov    rsi,r12
  009c0: 00 	movabs r8,0x5600b92ce2d8
  009ca: 00 	movabs rax,0x5600b75c5240
  009d4:    	call   rax
  009d6:    	movq   xmm2,QWORD PTR [rsp]
  009db:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009e7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009ed:    	add    rsp,0x20
  009f1: 00 	movabs r13,0x5600b92ce2e0
  009fb:    	test   rax,rax
  009fe:    	je     0xfffe92b3
  00a04:    	mov    QWORD PTR [rbp-0x40],rax
:00058 %4 = literal[1.0]
  00a08: 00 	movq   xmm5,QWORD PTR [rip+0x1488]        # 0x1e98
  00a10: 00 	movabs rax,0xff80000000000002
  00a1a:    	mov    QWORD PTR [rbp-0x48],rax
:00059 _ = %3.call y=(%4; 1)                [<INVALID>]
  00a1e: 01 	sub    DWORD PTR [rip+0x147b],0x1        # 0x1ea0
  00a25:    	je     0x35c75
  00a2b:    	sub    rsp,0x20
  00a2f:    	movq   QWORD PTR [rsp],xmm2
  00a34:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a3a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a40:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a46:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a4a: 00 	movabs rax,0x5600b75a2280
  00a54:    	call   rax
  00a56:    	mov    r15d,eax
  00a59: 00 	cmp    r15d,DWORD PTR [rip+0x1448]        # 0x1ea8
  00a60:    	jne    0x35c97
  00a66:    	mov    eax,DWORD PTR [rip+0xfffffffffffeb36f]        # 0xfffebddb
  00a6c:    	cmp    DWORD PTR [rip+0x1432],eax        # 0x1ea4
  00a72:    	jne    0x35c97
  00a78:    	mov    rax,QWORD PTR [rbx]
  00a7b:    	lea    rdi,[rsp-0x18]
  00a80:    	mov    QWORD PTR [rdi],rax
  00a83:    	mov    QWORD PTR [rbx],rdi
  00a86: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a8f:    	mov    QWORD PTR [rsp-0x38],rcx
  00a94:    	mov    rax,QWORD PTR [rbp-0x40]
  00a98:    	mov    QWORD PTR [rsp-0x38],rax
  00a9d: 00 	mov    rdi,0x1
  00aa4:    	mov    rax,QWORD PTR [rbp-0x48]
  00aa8:    	mov    QWORD PTR [rsp-0x40],rax
  00aad: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ab6: 00 	movabs rax,0x0
  00ac0:    	mov    QWORD PTR [rsp-0x28],rax
  00ac5: 00 	movabs r13,0x0
  00acf:    	call   0xfffe9278
  00ad4:    	lea    rdi,[rbp-0x8]
  00ad8:    	mov    QWORD PTR [rbx],rdi
  00adb:    	movq   xmm2,QWORD PTR [rsp]
  00ae0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ae6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00aec:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00af2:    	add    rsp,0x20
  00af6:    	test   rax,rax
  00af9:    	je     0x35d03
:00060 
:00062 br =>:00088
  00aff:    	jmp    0x36125
:00063 %3 = %2.call z()                     [<INVALID>]
  00b04: 01 	sub    DWORD PTR [rip+0x13a1],0x1        # 0x1eac
  00b0b:    	je     0x35d53
  00b11:    	sub    rsp,0x20
  00b15:    	movq   QWORD PTR [rsp],xmm2
  00b1a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b20:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b26:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b2c:    	mov    rdi,QWORD PTR [rbp-0x38]
  00b30: 00 	movabs rax,0x5600b75a2280
  00b3a:    	call   rax
  00b3c:    	mov    r15d,eax
  00b3f: 00 	cmp    r15d,DWORD PTR [rip+0x136e]        # 0x1eb4
  00b46:    	jne    0x35d75
  00b4c:    	mov    eax,DWORD PTR [rip+0xfffffffffffeb289]        # 0xfffebddb
  00b52:    	cmp    DWORD PTR [rip+0x1358],eax        # 0x1eb0
  00b58:    	jne    0x35d75
  00b5e:    	mov    rax,QWORD PTR [rbx]
  00b61:    	lea    rdi,[rsp-0x18]
  00b66:    	mov    QWORD PTR [rdi],rax
  00b69:    	mov    QWORD PTR [rbx],rdi
  00b6c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b75:    	mov    QWORD PTR [rsp-0x38],rcx
  00b7a:    	mov    rax,QWORD PTR [rbp-0x38]
  00b7e:    	mov    QWORD PTR [rsp-0x38],rax
  00b83: 00 	mov    rdi,0x0
  00b8a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b93: 00 	movabs rax,0x0
  00b9d:    	mov    QWORD PTR [rsp-0x28],rax
  00ba2: 00 	movabs r13,0x0
  00bac:    	call   0xfffe9278
  00bb1:    	lea    rdi,[rbp-0x8]
  00bb5:    	mov    QWORD PTR [rbx],rdi
  00bb8:    	movq   xmm2,QWORD PTR [rsp]
  00bbd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bc3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00bc9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00bcf:    	add    rsp,0x20
  00bd3:    	test   rax,rax
  00bd6:    	je     0x35de1
  00bdc:    	mov    QWORD PTR [rbp-0x40],rax
:00064 
:00066 %4 = literal[0.6]
  00be0: 00 	movq   xmm5,QWORD PTR [rip+0x12d0]        # 0x1eb8
  00be8: 99 	movabs rax,0xff1999999999999a
  00bf2:    	mov    QWORD PTR [rbp-0x48],rax
:00067 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00068 condnotbr _%3 =>:00082
  00bf6:    	mov    rdi,QWORD PTR [rbp-0x40]
  00bfa:    	mov    rsi,QWORD PTR [rbp-0x48]
  00bfe: 00 	test   rdi,0x1
  00c05:    	je     0x35df0
  00c0b: 00 	test   rsi,0x1
  00c12:    	je     0x35df0
  00c18:    	cmp    rdi,rsi
  00c1b:    	jge    0x35ff2
:00069 %3 = %2.call z()                     [<INVALID>]
  00c21: 01 	sub    DWORD PTR [rip+0x1298],0x1        # 0x1ec0
  00c28:    	je     0x35e54
  00c2e:    	sub    rsp,0x20
  00c32:    	movq   QWORD PTR [rsp],xmm2
  00c37:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c3d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c43:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c49:    	mov    rdi,QWORD PTR [rbp-0x38]
  00c4d: 00 	movabs rax,0x5600b75a2280
  00c57:    	call   rax
  00c59:    	mov    r15d,eax
  00c5c: 00 	cmp    r15d,DWORD PTR [rip+0x1265]        # 0x1ec8
  00c63:    	jne    0x35e76
  00c69:    	mov    eax,DWORD PTR [rip+0xfffffffffffeb16c]        # 0xfffebddb
  00c6f:    	cmp    DWORD PTR [rip+0x124f],eax        # 0x1ec4
  00c75:    	jne    0x35e76
  00c7b:    	mov    rax,QWORD PTR [rbx]
  00c7e:    	lea    rdi,[rsp-0x18]
  00c83:    	mov    QWORD PTR [rdi],rax
  00c86:    	mov    QWORD PTR [rbx],rdi
  00c89: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c92:    	mov    QWORD PTR [rsp-0x38],rcx
  00c97:    	mov    rax,QWORD PTR [rbp-0x38]
  00c9b:    	mov    QWORD PTR [rsp-0x38],rax
  00ca0: 00 	mov    rdi,0x0
  00ca7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00cb0: 00 	movabs rax,0x0
  00cba:    	mov    QWORD PTR [rsp-0x28],rax
  00cbf: 00 	movabs r13,0x0
  00cc9:    	call   0xfffe9278
  00cce:    	lea    rdi,[rbp-0x8]
  00cd2:    	mov    QWORD PTR [rbx],rdi
  00cd5:    	movq   xmm2,QWORD PTR [rsp]
  00cda:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ce0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ce6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cec:    	add    rsp,0x20
  00cf0:    	test   rax,rax
  00cf3:    	je     0x35ee2
  00cf9:    	mov    QWORD PTR [rbp-0x40],rax
:00070 
:00072 %4 = literal[-0.6]
  00cfd: 00 	movq   xmm5,QWORD PTR [rip+0x11d3]        # 0x1ed8
  00d05: 99 	movabs rax,0xff1999999999999e
  00d0f:    	mov    QWORD PTR [rbp-0x48],rax
:00073 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00074 condnotbr _%3 =>:00082
  00d13:    	mov    rdi,QWORD PTR [rbp-0x40]
  00d17:    	mov    rsi,QWORD PTR [rbp-0x48]
  00d1b: 00 	test   rdi,0x1
  00d22:    	je     0x35ef1
  00d28: 00 	test   rsi,0x1
  00d2f:    	je     0x35ef1
  00d35:    	cmp    rdi,rsi
  00d38:    	jle    0x3600b
:00075 %3 = 1: i32
  00d3e: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00076 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00d46:    	sub    rsp,0x20
  00d4a:    	movq   QWORD PTR [rsp],xmm2
  00d4f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d55:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d5b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d61:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d65:    	mov    rcx,QWORD PTR [rbp-0x40]
  00d69:    	mov    rdi,rbx
  00d6c:    	mov    rsi,r12
  00d6f: 00 	movabs r8,0x5600b92ce408
  00d79: 00 	movabs rax,0x5600b75c5240
  00d83:    	call   rax
  00d85:    	movq   xmm2,QWORD PTR [rsp]
  00d8a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d90:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d96:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d9c:    	add    rsp,0x20
  00da0: 00 	movabs r13,0x5600b92ce410
  00daa:    	test   rax,rax
  00dad:    	je     0xfffe92b3
  00db3:    	mov    QWORD PTR [rbp-0x40],rax
:00077 %4 = literal[1.0]
  00db7: 00 	movq   xmm5,QWORD PTR [rip+0x1129]        # 0x1ee8
  00dbf: 00 	movabs rax,0xff80000000000002
  00dc9:    	mov    QWORD PTR [rbp-0x48],rax
:00078 _ = %3.call z=(%4; 1)                [<INVALID>]
  00dcd: 01 	sub    DWORD PTR [rip+0x111c],0x1        # 0x1ef0
  00dd4:    	je     0x35f55
  00dda:    	sub    rsp,0x20
  00dde:    	movq   QWORD PTR [rsp],xmm2
  00de3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00de9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00def:    	movq   QWORD PTR [rsp+0x18],xmm5
  00df5:    	mov    rdi,QWORD PTR [rbp-0x40]
  00df9: 00 	movabs rax,0x5600b75a2280
  00e03:    	call   rax
  00e05:    	mov    r15d,eax
  00e08: 00 	cmp    r15d,DWORD PTR [rip+0x10e9]        # 0x1ef8
  00e0f:    	jne    0x35f77
  00e15:    	mov    eax,DWORD PTR [rip+0xfffffffffffeafc0]        # 0xfffebddb
  00e1b:    	cmp    DWORD PTR [rip+0x10d3],eax        # 0x1ef4
  00e21:    	jne    0x35f77
  00e27:    	mov    rax,QWORD PTR [rbx]
  00e2a:    	lea    rdi,[rsp-0x18]
  00e2f:    	mov    QWORD PTR [rdi],rax
  00e32:    	mov    QWORD PTR [rbx],rdi
  00e35: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e3e:    	mov    QWORD PTR [rsp-0x38],rcx
  00e43:    	mov    rax,QWORD PTR [rbp-0x40]
  00e47:    	mov    QWORD PTR [rsp-0x38],rax
  00e4c: 00 	mov    rdi,0x1
  00e53:    	mov    rax,QWORD PTR [rbp-0x48]
  00e57:    	mov    QWORD PTR [rsp-0x40],rax
  00e5c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00e65: 00 	movabs rax,0x0
  00e6f:    	mov    QWORD PTR [rsp-0x28],rax
  00e74: 00 	movabs r13,0x0
  00e7e:    	call   0xfffe9278
  00e83:    	lea    rdi,[rbp-0x8]
  00e87:    	mov    QWORD PTR [rbx],rdi
  00e8a:    	movq   xmm2,QWORD PTR [rsp]
  00e8f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e95:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e9b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ea1:    	add    rsp,0x20
  00ea5:    	test   rax,rax
  00ea8:    	je     0x35fe3
:00079 
:00081 br =>:00088
  00eae:    	jmp    0x3613e
:00082 %3 = 1: i32
  00eb3: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00ebb:    	sub    rsp,0x20
  00ebf:    	movq   QWORD PTR [rsp],xmm2
  00ec4:    	movq   QWORD PTR [rsp+0x8],xmm3
  00eca:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ed0:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ed6:    	mov    rdx,QWORD PTR [rbp-0x30]
  00eda:    	mov    rcx,QWORD PTR [rbp-0x40]
  00ede:    	mov    rdi,rbx
  00ee1:    	mov    rsi,r12
  00ee4: 00 	movabs r8,0x5600b92ce478
  00eee: 00 	movabs rax,0x5600b75c5240
  00ef8:    	call   rax
  00efa:    	movq   xmm2,QWORD PTR [rsp]
  00eff:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f05:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f0b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f11:    	add    rsp,0x20
  00f15: 00 	movabs r13,0x5600b92ce480
  00f1f:    	test   rax,rax
  00f22:    	je     0xfffe92b3
  00f28:    	mov    QWORD PTR [rbp-0x40],rax
:00084 %4 = literal[1.0]
  00f2c: 00 	movq   xmm5,QWORD PTR [rip+0xfd4]        # 0x1f08
  00f34: 00 	movabs rax,0xff80000000000002
  00f3e:    	mov    QWORD PTR [rbp-0x48],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f42: 01 	sub    DWORD PTR [rip+0xfc7],0x1        # 0x1f10
  00f49:    	je     0x36033
  00f4f:    	sub    rsp,0x20
  00f53:    	movq   QWORD PTR [rsp],xmm2
  00f58:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f5e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f64:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f6a:    	mov    rdi,QWORD PTR [rbp-0x40]
  00f6e: 00 	movabs rax,0x5600b75a2280
  00f78:    	call   rax
  00f7a:    	mov    r15d,eax
  00f7d: 00 	cmp    r15d,DWORD PTR [rip+0xf94]        # 0x1f18
  00f84:    	jne    0x36055
  00f8a:    	mov    eax,DWORD PTR [rip+0xfffffffffffeae4b]        # 0xfffebddb
  00f90:    	cmp    DWORD PTR [rip+0xf7e],eax        # 0x1f14
  00f96:    	jne    0x36055
  00f9c:    	mov    rax,QWORD PTR [rbx]
  00f9f:    	lea    rdi,[rsp-0x18]
  00fa4:    	mov    QWORD PTR [rdi],rax
  00fa7:    	mov    QWORD PTR [rbx],rdi
  00faa: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fb3:    	mov    QWORD PTR [rsp-0x38],rcx
  00fb8:    	mov    rax,QWORD PTR [rbp-0x40]
  00fbc:    	mov    QWORD PTR [rsp-0x38],rax
  00fc1: 00 	mov    rdi,0x1
  00fc8:    	mov    rax,QWORD PTR [rbp-0x48]
  00fcc:    	mov    QWORD PTR [rsp-0x40],rax
  00fd1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fda: 00 	movabs rax,0x0
  00fe4:    	mov    QWORD PTR [rsp-0x28],rax
  00fe9: 00 	movabs r13,0x0
  00ff3:    	call   0xfffe9278
  00ff8:    	lea    rdi,[rbp-0x8]
  00ffc:    	mov    QWORD PTR [rbx],rdi
  00fff:    	movq   xmm2,QWORD PTR [rsp]
  01004:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0100a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01010:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01016:    	add    rsp,0x20
  0101a:    	test   rax,rax
  0101d:    	je     0x360c1
:00086 
:00088 %3 = 0: i32
  01023: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  0102b: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01033:    	sub    rsp,0x20
  01037:    	movq   QWORD PTR [rsp],xmm2
  0103c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01042:    	movq   QWORD PTR [rsp+0x10],xmm4
  01048:    	movq   QWORD PTR [rsp+0x18],xmm5
  0104e:    	mov    rdx,QWORD PTR [rbp-0x30]
  01052:    	mov    rcx,QWORD PTR [rbp-0x50]
  01056:    	mov    rdi,rbx
  01059:    	mov    rsi,r12
  0105c: 00 	movabs r8,0x5600b92ce4e8
  01066: 00 	movabs rax,0x5600b75c5240
  01070:    	call   rax
  01072:    	movq   xmm2,QWORD PTR [rsp]
  01077:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0107d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01083:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01089:    	add    rsp,0x20
  0108d: 00 	movabs r13,0x5600b92ce4f0
  01097:    	test   rax,rax
  0109a:    	je     0xfffe92b3
  010a0:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  010a4: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  010ac:    	sub    rsp,0x20
  010b0:    	movq   QWORD PTR [rsp],xmm3
  010b5:    	movq   QWORD PTR [rsp+0x8],xmm4
  010bb:    	movq   QWORD PTR [rsp+0x10],xmm5
  010c1:    	mov    rdx,QWORD PTR [rbp-0x30]
  010c5:    	mov    rcx,QWORD PTR [rbp-0x58]
  010c9:    	mov    rdi,rbx
  010cc:    	mov    rsi,r12
  010cf: 00 	movabs r8,0x5600b92ce508
  010d9: 00 	movabs rax,0x5600b75c5240
  010e3:    	call   rax
  010e5:    	movq   xmm3,QWORD PTR [rsp]
  010ea:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010f0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010f6:    	add    rsp,0x20
  010fa: 00 	movabs r13,0x5600b92ce510
  01104:    	test   rax,rax
  01107:    	je     0xfffe92b3
  0110d:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  01111:    	mov    rdi,QWORD PTR [rbp-0x50]
  01115: 00 	test   rdi,0x7
  0111c:    	jne    0x360d0
  01122:    	cmp    DWORD PTR [rdi+0x4],0x28
  01126:    	jne    0x360d0
  0112c: 26 	cmp    DWORD PTR [rip+0xfffffffffffeaca8],0x26        # 0xfffebddb
  01133:    	jne    0x360d0
  01139:    	sub    rsp,0x10
  0113d:    	movq   QWORD PTR [rsp],xmm3
  01142:    	movq   QWORD PTR [rsp+0x8],xmm4
  01148:    	mov    rax,QWORD PTR [rbx]
  0114b:    	lea    rdi,[rsp-0x18]
  01150:    	mov    QWORD PTR [rdi],rax
  01153:    	mov    QWORD PTR [rbx],rdi
  01156: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0115f:    	mov    QWORD PTR [rsp-0x38],rcx
  01164:    	mov    rax,QWORD PTR [rbp-0x50]
  01168:    	mov    QWORD PTR [rsp-0x38],rax
  0116d: 00 	mov    rdi,0x1
  01174:    	mov    rax,QWORD PTR [rbp-0x58]
  01178:    	mov    QWORD PTR [rsp-0x40],rax
  0117d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01186: 09 	movabs rax,0x900000040
  01190:    	mov    QWORD PTR [rsp-0x28],rax
  01195: 00 	movabs r13,0x5600b92b2b70
  0119f:    	call   0xffff5b3f
  011a4:    	lea    rdi,[rbp-0x8]
  011a8:    	mov    QWORD PTR [rbx],rdi
  011ab:    	movq   xmm3,QWORD PTR [rsp]
  011b0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011b6:    	add    rsp,0x10
  011ba: 00 	movabs r13,0x5600b92ce530
  011c4:    	test   rax,rax
  011c7:    	je     0xfffe92b3
  011cd:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  011d1:    	sub    rsp,0x10
  011d5:    	movq   QWORD PTR [rsp],xmm3
  011da:    	movq   QWORD PTR [rsp+0x8],xmm4
  011e0:    	mov    rdx,QWORD PTR [rbp-0x30]
  011e4:    	mov    rcx,QWORD PTR [rbp-0x40]
  011e8:    	mov    r8,QWORD PTR [rbp-0x48]
  011ec:    	mov    rdi,rbx
  011ef:    	mov    rsi,r12
  011f2: 00 	movabs rax,0x5600b75c5370
  011fc:    	call   rax
  011fe:    	movq   xmm3,QWORD PTR [rsp]
  01203:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01209:    	add    rsp,0x10
  0120d: 00 	movabs r13,0x5600b92ce550
  01217:    	test   rax,rax
  0121a:    	je     0xfffe92b3
:00097 %3 = 0: i32
  01220: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  01228: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01230:    	sub    rsp,0x10
  01234:    	movq   QWORD PTR [rsp],xmm3
  01239:    	movq   QWORD PTR [rsp+0x8],xmm4
  0123f:    	mov    rdx,QWORD PTR [rbp-0x30]
  01243:    	mov    rcx,QWORD PTR [rbp-0x50]
  01247:    	mov    rdi,rbx
  0124a:    	mov    rsi,r12
  0124d: 00 	movabs r8,0x5600b92ce578
  01257: 00 	movabs rax,0x5600b75c5240
  01261:    	call   rax
  01263:    	movq   xmm3,QWORD PTR [rsp]
  01268:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0126e:    	add    rsp,0x10
  01272: 00 	movabs r13,0x5600b92ce580
  0127c:    	test   rax,rax
  0127f:    	je     0xfffe92b3
  01285:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01289:    	mov    rdi,QWORD PTR [rbp-0x50]
  0128d: 00 	test   rdi,0x7
  01294:    	jne    0x360df
  0129a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0129e:    	jne    0x360df
  012a4: 26 	cmp    DWORD PTR [rip+0xfffffffffffeab30],0x26        # 0xfffebddb
  012ab:    	jne    0x360df
  012b1:    	sub    rsp,0x10
  012b5:    	movq   QWORD PTR [rsp],xmm3
  012ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  012c0:    	mov    rax,QWORD PTR [rbx]
  012c3:    	lea    rdi,[rsp-0x18]
  012c8:    	mov    QWORD PTR [rdi],rax
  012cb:    	mov    QWORD PTR [rbx],rdi
  012ce: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012d7:    	mov    QWORD PTR [rsp-0x38],rcx
  012dc:    	mov    rax,QWORD PTR [rbp-0x50]
  012e0:    	mov    QWORD PTR [rsp-0x38],rax
  012e5: 00 	mov    rdi,0x0
  012ec: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012f5: 07 	movabs rax,0x1000700000043
  012ff:    	mov    QWORD PTR [rsp-0x28],rax
  01304: 00 	movabs r13,0x5600b92c5690
  0130e:    	call   0xfffec702
  01313:    	lea    rdi,[rbp-0x8]
  01317:    	mov    QWORD PTR [rbx],rdi
  0131a:    	movq   xmm3,QWORD PTR [rsp]
  0131f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01325:    	add    rsp,0x10
  01329: 00 	movabs r13,0x5600b92ce5a0
  01333:    	test   rax,rax
  01336:    	je     0xfffe92b3
  0133c:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  01340:    	sub    rsp,0x10
  01344:    	movq   QWORD PTR [rsp],xmm3
  01349:    	movq   QWORD PTR [rsp+0x8],xmm4
  0134f:    	mov    rdx,QWORD PTR [rbp-0x30]
  01353:    	mov    rcx,QWORD PTR [rbp-0x40]
  01357:    	mov    r8,QWORD PTR [rbp-0x48]
  0135b:    	mov    rdi,rbx
  0135e:    	mov    rsi,r12
  01361: 00 	movabs rax,0x5600b75c5370
  0136b:    	call   rax
  0136d:    	movq   xmm3,QWORD PTR [rsp]
  01372:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01378:    	add    rsp,0x10
  0137c: 00 	movabs r13,0x5600b92ce5c0
  01386:    	test   rax,rax
  01389:    	je     0xfffe92b3
:00104 %3 = 1: i32
  0138f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01397: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  0139f:    	sub    rsp,0x10
  013a3:    	movq   QWORD PTR [rsp],xmm3
  013a8:    	movq   QWORD PTR [rsp+0x8],xmm4
  013ae:    	mov    rdx,QWORD PTR [rbp-0x30]
  013b2:    	mov    rcx,QWORD PTR [rbp-0x50]
  013b6:    	mov    rdi,rbx
  013b9:    	mov    rsi,r12
  013bc: 00 	movabs r8,0x5600b92ce5e8
  013c6: 00 	movabs rax,0x5600b75c5240
  013d0:    	call   rax
  013d2:    	movq   xmm3,QWORD PTR [rsp]
  013d7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013dd:    	add    rsp,0x10
  013e1: 00 	movabs r13,0x5600b92ce5f0
  013eb:    	test   rax,rax
  013ee:    	je     0xfffe92b3
  013f4:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  013f8: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01400:    	sub    rsp,0x10
  01404:    	movq   QWORD PTR [rsp],xmm3
  01409:    	movq   QWORD PTR [rsp+0x8],xmm4
  0140f:    	mov    rdx,QWORD PTR [rbp-0x30]
  01413:    	mov    rcx,QWORD PTR [rbp-0x58]
  01417:    	mov    rdi,rbx
  0141a:    	mov    rsi,r12
  0141d: 00 	movabs r8,0x5600b92ce608
  01427: 00 	movabs rax,0x5600b75c5240
  01431:    	call   rax
  01433:    	movq   xmm3,QWORD PTR [rsp]
  01438:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0143e:    	add    rsp,0x10
  01442: 00 	movabs r13,0x5600b92ce610
  0144c:    	test   rax,rax
  0144f:    	je     0xfffe92b3
  01455:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01459:    	mov    rdi,QWORD PTR [rbp-0x50]
  0145d: 00 	test   rdi,0x7
  01464:    	jne    0x360ee
  0146a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0146e:    	jne    0x360ee
  01474: 26 	cmp    DWORD PTR [rip+0xfffffffffffea960],0x26        # 0xfffebddb
  0147b:    	jne    0x360ee
  01481:    	sub    rsp,0x10
  01485:    	movq   QWORD PTR [rsp],xmm3
  0148a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01490:    	mov    rax,QWORD PTR [rbx]
  01493:    	lea    rdi,[rsp-0x18]
  01498:    	mov    QWORD PTR [rdi],rax
  0149b:    	mov    QWORD PTR [rbx],rdi
  0149e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014a7:    	mov    QWORD PTR [rsp-0x38],rcx
  014ac:    	mov    rax,QWORD PTR [rbp-0x50]
  014b0:    	mov    QWORD PTR [rsp-0x38],rax
  014b5: 00 	mov    rdi,0x1
  014bc:    	mov    rax,QWORD PTR [rbp-0x58]
  014c0:    	mov    QWORD PTR [rsp-0x40],rax
  014c5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014ce: 09 	movabs rax,0x900000040
  014d8:    	mov    QWORD PTR [rsp-0x28],rax
  014dd: 00 	movabs r13,0x5600b92b2b70
  014e7:    	call   0xffff5b3f
  014ec:    	lea    rdi,[rbp-0x8]
  014f0:    	mov    QWORD PTR [rbx],rdi
  014f3:    	movq   xmm3,QWORD PTR [rsp]
  014f8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014fe:    	add    rsp,0x10
  01502: 00 	movabs r13,0x5600b92ce630
  0150c:    	test   rax,rax
  0150f:    	je     0xfffe92b3
  01515:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01519:    	sub    rsp,0x10
  0151d:    	movq   QWORD PTR [rsp],xmm3
  01522:    	movq   QWORD PTR [rsp+0x8],xmm4
  01528:    	mov    rdx,QWORD PTR [rbp-0x30]
  0152c:    	mov    rcx,QWORD PTR [rbp-0x40]
  01530:    	mov    r8,QWORD PTR [rbp-0x48]
  01534:    	mov    rdi,rbx
  01537:    	mov    rsi,r12
  0153a: 00 	movabs rax,0x5600b75c5370
  01544:    	call   rax
  01546:    	movq   xmm3,QWORD PTR [rsp]
  0154b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01551:    	add    rsp,0x10
  01555: 00 	movabs r13,0x5600b92ce650
  0155f:    	test   rax,rax
  01562:    	je     0xfffe92b3
:00113 %3 = 1: i32
  01568: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01570: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01578:    	sub    rsp,0x10
  0157c:    	movq   QWORD PTR [rsp],xmm3
  01581:    	movq   QWORD PTR [rsp+0x8],xmm4
  01587:    	mov    rdx,QWORD PTR [rbp-0x30]
  0158b:    	mov    rcx,QWORD PTR [rbp-0x50]
  0158f:    	mov    rdi,rbx
  01592:    	mov    rsi,r12
  01595: 00 	movabs r8,0x5600b92ce678
  0159f: 00 	movabs rax,0x5600b75c5240
  015a9:    	call   rax
  015ab:    	movq   xmm3,QWORD PTR [rsp]
  015b0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015b6:    	add    rsp,0x10
  015ba: 00 	movabs r13,0x5600b92ce680
  015c4:    	test   rax,rax
  015c7:    	je     0xfffe92b3
  015cd:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  015d1:    	mov    rdi,QWORD PTR [rbp-0x50]
  015d5: 00 	test   rdi,0x7
  015dc:    	jne    0x360fd
  015e2:    	cmp    DWORD PTR [rdi+0x4],0x28
  015e6:    	jne    0x360fd
  015ec: 26 	cmp    DWORD PTR [rip+0xfffffffffffea7e8],0x26        # 0xfffebddb
  015f3:    	jne    0x360fd
  015f9:    	sub    rsp,0x10
  015fd:    	movq   QWORD PTR [rsp],xmm3
  01602:    	movq   QWORD PTR [rsp+0x8],xmm4
  01608:    	mov    rax,QWORD PTR [rbx]
  0160b:    	lea    rdi,[rsp-0x18]
  01610:    	mov    QWORD PTR [rdi],rax
  01613:    	mov    QWORD PTR [rbx],rdi
  01616: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0161f:    	mov    QWORD PTR [rsp-0x38],rcx
  01624:    	mov    rax,QWORD PTR [rbp-0x50]
  01628:    	mov    QWORD PTR [rsp-0x38],rax
  0162d: 00 	mov    rdi,0x0
  01634: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0163d: 07 	movabs rax,0x1000700000043
  01647:    	mov    QWORD PTR [rsp-0x28],rax
  0164c: 00 	movabs r13,0x5600b92c5690
  01656:    	call   0xfffec702
  0165b:    	lea    rdi,[rbp-0x8]
  0165f:    	mov    QWORD PTR [rbx],rdi
  01662:    	movq   xmm3,QWORD PTR [rsp]
  01667:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0166d:    	add    rsp,0x10
  01671: 00 	movabs r13,0x5600b92ce6a0
  0167b:    	test   rax,rax
  0167e:    	je     0xfffe92b3
  01684:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01688:    	sub    rsp,0x10
  0168c:    	movq   QWORD PTR [rsp],xmm3
  01691:    	movq   QWORD PTR [rsp+0x8],xmm4
  01697:    	mov    rdx,QWORD PTR [rbp-0x30]
  0169b:    	mov    rcx,QWORD PTR [rbp-0x40]
  0169f:    	mov    r8,QWORD PTR [rbp-0x48]
  016a3:    	mov    rdi,rbx
  016a6:    	mov    rsi,r12
  016a9: 00 	movabs rax,0x5600b75c5370
  016b3:    	call   rax
  016b5:    	movq   xmm3,QWORD PTR [rsp]
  016ba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016c0:    	add    rsp,0x10
  016c4: 00 	movabs r13,0x5600b92ce6c0
  016ce:    	test   rax,rax
  016d1:    	je     0xfffe92b3
:00120 %3 = %4
  016d7:    	mov    rax,QWORD PTR [rbp-0x48]
  016db:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  016df:    	mov    rax,QWORD PTR [rbp-0x40]
  016e3:    	leave  
  016e4:    	ret    
:00088 %3 = 0: i32
  016e5: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  016ed: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  016f5:    	sub    rsp,0x20
  016f9:    	movq   QWORD PTR [rsp],xmm2
  016fe:    	movq   QWORD PTR [rsp+0x8],xmm3
  01704:    	movq   QWORD PTR [rsp+0x10],xmm4
  0170a:    	movq   QWORD PTR [rsp+0x18],xmm5
  01710:    	mov    rdx,QWORD PTR [rbp-0x30]
  01714:    	mov    rcx,QWORD PTR [rbp-0x50]
  01718:    	mov    rdi,rbx
  0171b:    	mov    rsi,r12
  0171e: 00 	movabs r8,0x5600b92ce4e8
  01728: 00 	movabs rax,0x5600b75c5240
  01732:    	call   rax
  01734:    	movq   xmm2,QWORD PTR [rsp]
  01739:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0173f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01745:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0174b:    	add    rsp,0x20
  0174f: 00 	movabs r13,0x5600b92ce4f0
  01759:    	test   rax,rax
  0175c:    	je     0xfffe92b3
  01762:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  01766: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  0176e:    	sub    rsp,0x20
  01772:    	movq   QWORD PTR [rsp],xmm3
  01777:    	movq   QWORD PTR [rsp+0x8],xmm4
  0177d:    	movq   QWORD PTR [rsp+0x10],xmm5
  01783:    	mov    rdx,QWORD PTR [rbp-0x30]
  01787:    	mov    rcx,QWORD PTR [rbp-0x58]
  0178b:    	mov    rdi,rbx
  0178e:    	mov    rsi,r12
  01791: 00 	movabs r8,0x5600b92ce508
  0179b: 00 	movabs rax,0x5600b75c5240
  017a5:    	call   rax
  017a7:    	movq   xmm3,QWORD PTR [rsp]
  017ac:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017b2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017b8:    	add    rsp,0x20
  017bc: 00 	movabs r13,0x5600b92ce510
  017c6:    	test   rax,rax
  017c9:    	je     0xfffe92b3
  017cf:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  017d3:    	mov    rdi,QWORD PTR [rbp-0x50]
  017d7: 00 	test   rdi,0x7
  017de:    	jne    0x36157
  017e4:    	cmp    DWORD PTR [rdi+0x4],0x28
  017e8:    	jne    0x36157
  017ee: 26 	cmp    DWORD PTR [rip+0xfffffffffffea5e6],0x26        # 0xfffebddb
  017f5:    	jne    0x36157
  017fb:    	sub    rsp,0x10
  017ff:    	movq   QWORD PTR [rsp],xmm3
  01804:    	movq   QWORD PTR [rsp+0x8],xmm4
  0180a:    	mov    rax,QWORD PTR [rbx]
  0180d:    	lea    rdi,[rsp-0x18]
  01812:    	mov    QWORD PTR [rdi],rax
  01815:    	mov    QWORD PTR [rbx],rdi
  01818: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01821:    	mov    QWORD PTR [rsp-0x38],rcx
  01826:    	mov    rax,QWORD PTR [rbp-0x50]
  0182a:    	mov    QWORD PTR [rsp-0x38],rax
  0182f: 00 	mov    rdi,0x1
  01836:    	mov    rax,QWORD PTR [rbp-0x58]
  0183a:    	mov    QWORD PTR [rsp-0x40],rax
  0183f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01848: 09 	movabs rax,0x900000040
  01852:    	mov    QWORD PTR [rsp-0x28],rax
  01857: 00 	movabs r13,0x5600b92b2b70
  01861:    	call   0xffff5b3f
  01866:    	lea    rdi,[rbp-0x8]
  0186a:    	mov    QWORD PTR [rbx],rdi
  0186d:    	movq   xmm3,QWORD PTR [rsp]
  01872:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01878:    	add    rsp,0x10
  0187c: 00 	movabs r13,0x5600b92ce530
  01886:    	test   rax,rax
  01889:    	je     0xfffe92b3
  0188f:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  01893:    	sub    rsp,0x10
  01897:    	movq   QWORD PTR [rsp],xmm3
  0189c:    	movq   QWORD PTR [rsp+0x8],xmm4
  018a2:    	mov    rdx,QWORD PTR [rbp-0x30]
  018a6:    	mov    rcx,QWORD PTR [rbp-0x40]
  018aa:    	mov    r8,QWORD PTR [rbp-0x48]
  018ae:    	mov    rdi,rbx
  018b1:    	mov    rsi,r12
  018b4: 00 	movabs rax,0x5600b75c5370
  018be:    	call   rax
  018c0:    	movq   xmm3,QWORD PTR [rsp]
  018c5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018cb:    	add    rsp,0x10
  018cf: 00 	movabs r13,0x5600b92ce550
  018d9:    	test   rax,rax
  018dc:    	je     0xfffe92b3
:00097 %3 = 0: i32
  018e2: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  018ea: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  018f2:    	sub    rsp,0x10
  018f6:    	movq   QWORD PTR [rsp],xmm3
  018fb:    	movq   QWORD PTR [rsp+0x8],xmm4
  01901:    	mov    rdx,QWORD PTR [rbp-0x30]
  01905:    	mov    rcx,QWORD PTR [rbp-0x50]
  01909:    	mov    rdi,rbx
  0190c:    	mov    rsi,r12
  0190f: 00 	movabs r8,0x5600b92ce578
  01919: 00 	movabs rax,0x5600b75c5240
  01923:    	call   rax
  01925:    	movq   xmm3,QWORD PTR [rsp]
  0192a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01930:    	add    rsp,0x10
  01934: 00 	movabs r13,0x5600b92ce580
  0193e:    	test   rax,rax
  01941:    	je     0xfffe92b3
  01947:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  0194b:    	mov    rdi,QWORD PTR [rbp-0x50]
  0194f: 00 	test   rdi,0x7
  01956:    	jne    0x36166
  0195c:    	cmp    DWORD PTR [rdi+0x4],0x28
  01960:    	jne    0x36166
  01966: 26 	cmp    DWORD PTR [rip+0xfffffffffffea46e],0x26        # 0xfffebddb
  0196d:    	jne    0x36166
  01973:    	sub    rsp,0x10
  01977:    	movq   QWORD PTR [rsp],xmm3
  0197c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01982:    	mov    rax,QWORD PTR [rbx]
  01985:    	lea    rdi,[rsp-0x18]
  0198a:    	mov    QWORD PTR [rdi],rax
  0198d:    	mov    QWORD PTR [rbx],rdi
  01990: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01999:    	mov    QWORD PTR [rsp-0x38],rcx
  0199e:    	mov    rax,QWORD PTR [rbp-0x50]
  019a2:    	mov    QWORD PTR [rsp-0x38],rax
  019a7: 00 	mov    rdi,0x0
  019ae: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019b7: 07 	movabs rax,0x1000700000043
  019c1:    	mov    QWORD PTR [rsp-0x28],rax
  019c6: 00 	movabs r13,0x5600b92c5690
  019d0:    	call   0xfffec702
  019d5:    	lea    rdi,[rbp-0x8]
  019d9:    	mov    QWORD PTR [rbx],rdi
  019dc:    	movq   xmm3,QWORD PTR [rsp]
  019e1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019e7:    	add    rsp,0x10
  019eb: 00 	movabs r13,0x5600b92ce5a0
  019f5:    	test   rax,rax
  019f8:    	je     0xfffe92b3
  019fe:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  01a02:    	sub    rsp,0x10
  01a06:    	movq   QWORD PTR [rsp],xmm3
  01a0b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a11:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a15:    	mov    rcx,QWORD PTR [rbp-0x40]
  01a19:    	mov    r8,QWORD PTR [rbp-0x48]
  01a1d:    	mov    rdi,rbx
  01a20:    	mov    rsi,r12
  01a23: 00 	movabs rax,0x5600b75c5370
  01a2d:    	call   rax
  01a2f:    	movq   xmm3,QWORD PTR [rsp]
  01a34:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a3a:    	add    rsp,0x10
  01a3e: 00 	movabs r13,0x5600b92ce5c0
  01a48:    	test   rax,rax
  01a4b:    	je     0xfffe92b3
:00104 %3 = 1: i32
  01a51: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01a59: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01a61:    	sub    rsp,0x10
  01a65:    	movq   QWORD PTR [rsp],xmm3
  01a6a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a70:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a74:    	mov    rcx,QWORD PTR [rbp-0x50]
  01a78:    	mov    rdi,rbx
  01a7b:    	mov    rsi,r12
  01a7e: 00 	movabs r8,0x5600b92ce5e8
  01a88: 00 	movabs rax,0x5600b75c5240
  01a92:    	call   rax
  01a94:    	movq   xmm3,QWORD PTR [rsp]
  01a99:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a9f:    	add    rsp,0x10
  01aa3: 00 	movabs r13,0x5600b92ce5f0
  01aad:    	test   rax,rax
  01ab0:    	je     0xfffe92b3
  01ab6:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  01aba: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01ac2:    	sub    rsp,0x10
  01ac6:    	movq   QWORD PTR [rsp],xmm3
  01acb:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ad1:    	mov    rdx,QWORD PTR [rbp-0x30]
  01ad5:    	mov    rcx,QWORD PTR [rbp-0x58]
  01ad9:    	mov    rdi,rbx
  01adc:    	mov    rsi,r12
  01adf: 00 	movabs r8,0x5600b92ce608
  01ae9: 00 	movabs rax,0x5600b75c5240
  01af3:    	call   rax
  01af5:    	movq   xmm3,QWORD PTR [rsp]
  01afa:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b00:    	add    rsp,0x10
  01b04: 00 	movabs r13,0x5600b92ce610
  01b0e:    	test   rax,rax
  01b11:    	je     0xfffe92b3
  01b17:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01b1b:    	mov    rdi,QWORD PTR [rbp-0x50]
  01b1f: 00 	test   rdi,0x7
  01b26:    	jne    0x36175
  01b2c:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b30:    	jne    0x36175
  01b36: 26 	cmp    DWORD PTR [rip+0xfffffffffffea29e],0x26        # 0xfffebddb
  01b3d:    	jne    0x36175
  01b43:    	sub    rsp,0x10
  01b47:    	movq   QWORD PTR [rsp],xmm3
  01b4c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b52:    	mov    rax,QWORD PTR [rbx]
  01b55:    	lea    rdi,[rsp-0x18]
  01b5a:    	mov    QWORD PTR [rdi],rax
  01b5d:    	mov    QWORD PTR [rbx],rdi
  01b60: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b69:    	mov    QWORD PTR [rsp-0x38],rcx
  01b6e:    	mov    rax,QWORD PTR [rbp-0x50]
  01b72:    	mov    QWORD PTR [rsp-0x38],rax
  01b77: 00 	mov    rdi,0x1
  01b7e:    	mov    rax,QWORD PTR [rbp-0x58]
  01b82:    	mov    QWORD PTR [rsp-0x40],rax
  01b87: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b90: 09 	movabs rax,0x900000040
  01b9a:    	mov    QWORD PTR [rsp-0x28],rax
  01b9f: 00 	movabs r13,0x5600b92b2b70
  01ba9:    	call   0xffff5b3f
  01bae:    	lea    rdi,[rbp-0x8]
  01bb2:    	mov    QWORD PTR [rbx],rdi
  01bb5:    	movq   xmm3,QWORD PTR [rsp]
  01bba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bc0:    	add    rsp,0x10
  01bc4: 00 	movabs r13,0x5600b92ce630
  01bce:    	test   rax,rax
  01bd1:    	je     0xfffe92b3
  01bd7:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01bdb:    	sub    rsp,0x10
  01bdf:    	movq   QWORD PTR [rsp],xmm3
  01be4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bea:    	mov    rdx,QWORD PTR [rbp-0x30]
  01bee:    	mov    rcx,QWORD PTR [rbp-0x40]
  01bf2:    	mov    r8,QWORD PTR [rbp-0x48]
  01bf6:    	mov    rdi,rbx
  01bf9:    	mov    rsi,r12
  01bfc: 00 	movabs rax,0x5600b75c5370
  01c06:    	call   rax
  01c08:    	movq   xmm3,QWORD PTR [rsp]
  01c0d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c13:    	add    rsp,0x10
  01c17: 00 	movabs r13,0x5600b92ce650
  01c21:    	test   rax,rax
  01c24:    	je     0xfffe92b3
:00113 %3 = 1: i32
  01c2a: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01c32: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01c3a:    	sub    rsp,0x10
  01c3e:    	movq   QWORD PTR [rsp],xmm3
  01c43:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c49:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c4d:    	mov    rcx,QWORD PTR [rbp-0x50]
  01c51:    	mov    rdi,rbx
  01c54:    	mov    rsi,r12
  01c57: 00 	movabs r8,0x5600b92ce678
  01c61: 00 	movabs rax,0x5600b75c5240
  01c6b:    	call   rax
  01c6d:    	movq   xmm3,QWORD PTR [rsp]
  01c72:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c78:    	add    rsp,0x10
  01c7c: 00 	movabs r13,0x5600b92ce680
  01c86:    	test   rax,rax
  01c89:    	je     0xfffe92b3
  01c8f:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01c93:    	mov    rdi,QWORD PTR [rbp-0x50]
  01c97: 00 	test   rdi,0x7
  01c9e:    	jne    0x36184
  01ca4:    	cmp    DWORD PTR [rdi+0x4],0x28
  01ca8:    	jne    0x36184
  01cae: 26 	cmp    DWORD PTR [rip+0xfffffffffffea126],0x26        # 0xfffebddb
  01cb5:    	jne    0x36184
  01cbb:    	sub    rsp,0x10
  01cbf:    	movq   QWORD PTR [rsp],xmm3
  01cc4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cca:    	mov    rax,QWORD PTR [rbx]
  01ccd:    	lea    rdi,[rsp-0x18]
  01cd2:    	mov    QWORD PTR [rdi],rax
  01cd5:    	mov    QWORD PTR [rbx],rdi
  01cd8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01ce1:    	mov    QWORD PTR [rsp-0x38],rcx
  01ce6:    	mov    rax,QWORD PTR [rbp-0x50]
  01cea:    	mov    QWORD PTR [rsp-0x38],rax
  01cef: 00 	mov    rdi,0x0
  01cf6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01cff: 07 	movabs rax,0x1000700000043
  01d09:    	mov    QWORD PTR [rsp-0x28],rax
  01d0e: 00 	movabs r13,0x5600b92c5690
  01d18:    	call   0xfffec702
  01d1d:    	lea    rdi,[rbp-0x8]
  01d21:    	mov    QWORD PTR [rbx],rdi
  01d24:    	movq   xmm3,QWORD PTR [rsp]
  01d29:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d2f:    	add    rsp,0x10
  01d33: 00 	movabs r13,0x5600b92ce6a0
  01d3d:    	test   rax,rax
  01d40:    	je     0xfffe92b3
  01d46:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01d4a:    	sub    rsp,0x10
  01d4e:    	movq   QWORD PTR [rsp],xmm3
  01d53:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d59:    	mov    rdx,QWORD PTR [rbp-0x30]
  01d5d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01d61:    	mov    r8,QWORD PTR [rbp-0x48]
  01d65:    	mov    rdi,rbx
  01d68:    	mov    rsi,r12
  01d6b: 00 	movabs rax,0x5600b75c5370
  01d75:    	call   rax
  01d77:    	movq   xmm3,QWORD PTR [rsp]
  01d7c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d82:    	add    rsp,0x10
  01d86: 00 	movabs r13,0x5600b92ce6c0
  01d90:    	test   rax,rax
  01d93:    	je     0xfffe92b3
:00120 %3 = %4
  01d99:    	mov    rax,QWORD PTR [rbp-0x48]
  01d9d:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  01da1:    	mov    rax,QWORD PTR [rbp-0x40]
  01da5:    	leave  
  01da6:    	ret    
==> start whole compile: intersect FuncId(69) self_class:Sphere start:[00000] bytecode:0x5600b92b5360
<== finished compile. elapsed:147.3µs
offset:Pos(101540) code: 7241 bytes  data: 395 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x2
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x40],rax
  00040:    	mov    QWORD PTR [rbp-0x48],rax
  00044:    	mov    QWORD PTR [rbp-0x50],rax
  00048:    	mov    QWORD PTR [rbp-0x58],rax
  0004c:    	mov    QWORD PTR [rbp-0x60],rax
  00050:    	mov    QWORD PTR [rbp-0x68],rax
  00054:    	mov    QWORD PTR [rbp-0x70],rax
  00058:    	mov    QWORD PTR [rbp-0x78],rax
  0005c:    	mov    QWORD PTR [rbp-0x80],rax
  00060: ff 	mov    QWORD PTR [rbp-0x88],rax
  00067: ff 	mov    QWORD PTR [rbp-0x90],rax
  0006e: ff 	mov    QWORD PTR [rbp-0x98],rax
  00075: ff 	mov    QWORD PTR [rbp-0xa0],rax
  0007c:    	mov    rdi,QWORD PTR [rbp-0x28]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x34277
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00091:    	jne    0x34277
:00000 init reg_num:16 arg_num:2 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  00097:    	mov    rdi,QWORD PTR [rbp-0x30]
  0009b: 00 	test   rdi,0x7
  000a2:    	jne    0x34286
  000a8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  000ac:    	jne    0x34286
  000b2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9e06],0x26        # 0xfffe9ebf
  000b9:    	jne    0x34286
  000bf:    	mov    esi,DWORD PTR [rip+0x1b88]        # 0x1c4d
  000c5:    	cmp    esi,0xffffffff
  000c8:    	je     0x34295
  000ce:    	cmp    WORD PTR [rdi+0x2],0x3
  000d3:    	jne    0xec
  000d9:    	cmp    esi,0x6
  000dc:    	jge    0xec
  000e2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000e7:    	jmp    0xf8
  000ec: 00 	movabs rax,0x5600b755dfe0
  000f6:    	call   rax
  000f8:    	mov    QWORD PTR [rbp-0x70],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  000fc:    	mov    rdi,QWORD PTR [rbp-0x28]
  00100:    	mov    rax,QWORD PTR [rdi+0x10]
  00104:    	mov    QWORD PTR [rbp-0x78],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  00108:    	mov    rdi,QWORD PTR [rbp-0x70]
  0010c: 00 	test   rdi,0x7
  00113:    	jne    0x342be
  00119:    	cmp    DWORD PTR [rdi+0x4],0x28
  0011d:    	jne    0x342be
  00123: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9d95],0x26        # 0xfffe9ebf
  0012a:    	jne    0x342be
  00130:    	mov    rax,QWORD PTR [rbx]
  00133:    	lea    rdi,[rsp-0x18]
  00138:    	mov    QWORD PTR [rdi],rax
  0013b:    	mov    QWORD PTR [rbx],rdi
  0013e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00147:    	mov    QWORD PTR [rsp-0x38],rcx
  0014c:    	mov    rax,QWORD PTR [rbp-0x70]
  00150:    	mov    QWORD PTR [rsp-0x38],rax
  00155: 00 	mov    rdi,0x1
  0015c:    	mov    rax,QWORD PTR [rbp-0x78]
  00160:    	mov    QWORD PTR [rsp-0x40],rax
  00165: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0016e: 08 	movabs rax,0x80000003f
  00178:    	mov    QWORD PTR [rsp-0x28],rax
  0017d: 00 	movabs r13,0x5600b92a1ef0
  00187:    	call   0xfffeab80
  0018c:    	lea    rdi,[rbp-0x8]
  00190:    	mov    QWORD PTR [rbx],rdi
  00193: 00 	movabs r13,0x5600b92b53d0
  0019d:    	test   rax,rax
  001a0:    	je     0xfffe7397
  001a6:    	mov    QWORD PTR [rbp-0x40],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001aa:    	mov    rdi,QWORD PTR [rbp-0x30]
  001ae: 00 	test   rdi,0x7
  001b5:    	jne    0x342cd
  001bb:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001bf:    	jne    0x342cd
  001c5: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9cf3],0x26        # 0xfffe9ebf
  001cc:    	jne    0x342cd
  001d2:    	mov    esi,DWORD PTR [rip+0x1a7d]        # 0x1c55
  001d8:    	cmp    esi,0xffffffff
  001db:    	je     0x342dc
  001e1:    	cmp    WORD PTR [rdi+0x2],0x3
  001e6:    	jne    0x1ff
  001ec:    	cmp    esi,0x6
  001ef:    	jge    0x1ff
  001f5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001fa:    	jmp    0x20b
  001ff: 00 	movabs rax,0x5600b755dfe0
  00209:    	call   rax
  0020b:    	mov    QWORD PTR [rbp-0x70],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  0020f:    	mov    rdi,QWORD PTR [rbp-0x40]
  00213: 00 	test   rdi,0x7
  0021a:    	jne    0x34305
  00220:    	cmp    DWORD PTR [rdi+0x4],0x28
  00224:    	jne    0x34305
  0022a: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9c8e],0x26        # 0xfffe9ebf
  00231:    	jne    0x34305
  00237:    	mov    rax,QWORD PTR [rbx]
  0023a:    	lea    rdi,[rsp-0x18]
  0023f:    	mov    QWORD PTR [rdi],rax
  00242:    	mov    QWORD PTR [rbx],rdi
  00245: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0024e:    	mov    QWORD PTR [rsp-0x38],rcx
  00253:    	mov    rax,QWORD PTR [rbp-0x40]
  00257:    	mov    QWORD PTR [rsp-0x38],rax
  0025c: 00 	mov    rdi,0x1
  00263:    	mov    rax,QWORD PTR [rbp-0x70]
  00267:    	mov    QWORD PTR [rsp-0x40],rax
  0026c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00275: 05 	movabs rax,0x500000041
  0027f:    	mov    QWORD PTR [rsp-0x28],rax
  00284: 00 	movabs r13,0x5600b92d48b0
  0028e:    	call   0xfffeac12
  00293:    	lea    rdi,[rbp-0x8]
  00297:    	mov    QWORD PTR [rbx],rdi
  0029a: 00 	movabs r13,0x5600b92b5430
  002a4:    	test   rax,rax
  002a7:    	je     0xfffe7397
  002ad:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %10 = %3
  002b1:    	mov    rax,QWORD PTR [rbp-0x40]
  002b5:    	mov    QWORD PTR [rbp-0x78],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002b9:    	mov    rdi,QWORD PTR [rbp-0x40]
  002bd: 00 	test   rdi,0x7
  002c4:    	jne    0x34314
  002ca:    	cmp    DWORD PTR [rdi+0x4],0x28
  002ce:    	jne    0x34314
  002d4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9be4],0x26        # 0xfffe9ebf
  002db:    	jne    0x34314
  002e1:    	mov    rax,QWORD PTR [rbx]
  002e4:    	lea    rdi,[rsp-0x18]
  002e9:    	mov    QWORD PTR [rdi],rax
  002ec:    	mov    QWORD PTR [rbx],rdi
  002ef: 00 	mov    QWORD PTR [rsp-0x20],0x0
  002f8:    	mov    QWORD PTR [rsp-0x38],rcx
  002fd:    	mov    rax,QWORD PTR [rbp-0x40]
  00301:    	mov    QWORD PTR [rsp-0x38],rax
  00306: 00 	mov    rdi,0x1
  0030d:    	mov    rax,QWORD PTR [rbp-0x78]
  00311:    	mov    QWORD PTR [rsp-0x40],rax
  00316: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0031f: 05 	movabs rax,0x500000041
  00329:    	mov    QWORD PTR [rsp-0x28],rax
  0032e: 00 	movabs r13,0x5600b92d48b0
  00338:    	call   0xfffeac12
  0033d:    	lea    rdi,[rbp-0x8]
  00341:    	mov    QWORD PTR [rbx],rdi
  00344: 00 	movabs r13,0x5600b92b5470
  0034e:    	test   rax,rax
  00351:    	je     0xfffe7397
  00357:    	mov    QWORD PTR [rbp-0x70],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  0035b:    	mov    rdi,QWORD PTR [rbp-0x28]
  0035f:    	mov    rax,QWORD PTR [rdi+0x18]
  00363:    	mov    QWORD PTR [rbp-0x78],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00367:    	mov    rdi,QWORD PTR [rbp-0x28]
  0036b:    	mov    rax,QWORD PTR [rdi+0x18]
  0036f:    	mov    QWORD PTR [rbp-0x80],rax
:00020 %10 = %10 * %11                      [Float][Float]
  00373:    	mov    rdi,QWORD PTR [rbp-0x78]
  00377: 00 	test   rdi,0x1
  0037e:    	jne    0x34323
  00384: 00 	test   rdi,0x2
  0038b:    	je     0x3c7
  00391:    	xorps  xmm2,xmm2
  00394: 00 	movabs rax,0x8000000000000002
  0039e:    	cmp    rdi,rax
  003a1:    	je     0x3d9
  003a7:    	mov    rax,rdi
  003aa:    	sar    rax,0x3f
  003ae:    	add    rax,0x2
  003b2:    	and    rdi,0xfffffffffffffffc
  003b6:    	or     rdi,rax
  003b9:    	rol    rdi,0x3d
  003bd:    	movq   xmm2,rdi
  003c2:    	jmp    0x3d9
  003c7:    	call   0xfffe73d0
  003cc:    	test   rax,rax
  003cf:    	je     0x34323
  003d5:    	movq   xmm2,xmm0
  003d9:    	mov    rdi,QWORD PTR [rbp-0x80]
  003dd: 00 	test   rdi,0x1
  003e4:    	jne    0x34332
  003ea: 00 	test   rdi,0x2
  003f1:    	je     0x42d
  003f7:    	xorps  xmm3,xmm3
  003fa: 00 	movabs rax,0x8000000000000002
  00404:    	cmp    rdi,rax
  00407:    	je     0x43f
  0040d:    	mov    rax,rdi
  00410:    	sar    rax,0x3f
  00414:    	add    rax,0x2
  00418:    	and    rdi,0xfffffffffffffffc
  0041c:    	or     rdi,rax
  0041f:    	rol    rdi,0x3d
  00423:    	movq   xmm3,rdi
  00428:    	jmp    0x43f
  0042d:    	call   0xfffe73d0
  00432:    	test   rax,rax
  00435:    	je     0x34332
  0043b:    	movq   xmm3,xmm0
  0043f:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00443:    	mov    rdi,QWORD PTR [rbp-0x70]
  00447: 00 	test   rdi,0x1
  0044e:    	jne    0x34341
  00454: 00 	test   rdi,0x2
  0045b:    	je     0x497
  00461:    	xorps  xmm4,xmm4
  00464: 00 	movabs rax,0x8000000000000002
  0046e:    	cmp    rdi,rax
  00471:    	je     0x4a9
  00477:    	mov    rax,rdi
  0047a:    	sar    rax,0x3f
  0047e:    	add    rax,0x2
  00482:    	and    rdi,0xfffffffffffffffc
  00486:    	or     rdi,rax
  00489:    	rol    rdi,0x3d
  0048d:    	movq   xmm4,rdi
  00492:    	jmp    0x4a9
  00497:    	call   0xfffe73d0
  0049c:    	test   rax,rax
  0049f:    	je     0x34341
  004a5:    	movq   xmm4,xmm0
  004a9:    	movq   xmm5,xmm4
  004ad:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004b1:    	mov    rdi,QWORD PTR [rbp-0x48]
  004b5: 00 	test   rdi,0x1
  004bc:    	jne    0x3435d
  004c2: 00 	test   rdi,0x2
  004c9:    	je     0x505
  004cf:    	xorps  xmm6,xmm6
  004d2: 00 	movabs rax,0x8000000000000002
  004dc:    	cmp    rdi,rax
  004df:    	je     0x517
  004e5:    	mov    rax,rdi
  004e8:    	sar    rax,0x3f
  004ec:    	add    rax,0x2
  004f0:    	and    rdi,0xfffffffffffffffc
  004f4:    	or     rdi,rax
  004f7:    	rol    rdi,0x3d
  004fb:    	movq   xmm6,rdi
  00500:    	jmp    0x517
  00505:    	call   0xfffe73d0
  0050a:    	test   rax,rax
  0050d:    	je     0x3435d
  00513:    	movq   xmm6,xmm0
  00517:    	movq   xmm4,xmm6
  0051b:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  0051f:    	movq   xmm7,xmm4
  00523:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00527: 00 	movq   xmm4,QWORD PTR [rip+0x172d]        # 0x1c5c
  0052f: 00 	movabs rax,0x8000000000000002
  00539:    	mov    QWORD PTR [rbp-0x70],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0053d:    	ucomisd xmm7,xmm4
  00541:    	jbe    0x358ca
:00027 %9 = %4
:00028 %9 = neg %9                          [Float]
  00547:    	movq   xmm4,xmm6
  0054b: 00 	xorps  xmm4,XMMWORD PTR [rip+0x171a]        # 0x1c6c
:00029 %11 = const[Math]                    [Math]
  00552: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe9973]        # 0xfffe9ecc
  00559: 00 	cmp    rax,QWORD PTR [rip+0x172c]        # 0x1c8c
  00560:    	jne    0x34386
  00566: 00 	mov    rax,QWORD PTR [rip+0x170f]        # 0x1c7c
  0056d:    	mov    QWORD PTR [rbp-0x80],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
  00571:    	mov    rdi,QWORD PTR [rbp-0x80]
  00575: 00 	test   rdi,0x7
  0057c:    	jne    0x3440e
  00582:    	cmp    DWORD PTR [rdi+0x4],0x21
  00586:    	jne    0x3440e
  0058c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe992c],0x26        # 0xfffe9ebf
  00593:    	jne    0x3440e
  00599:    	sqrtsd xmm2,xmm7
:00032 
:00034 %7 = %9 - %10                        [Float][Float]
  0059d:    	movq   xmm3,xmm4
  005a1:    	subsd  xmm3,xmm2
:00035 %9 = literal[0.0]
  005a5: 00 	movq   xmm4,QWORD PTR [rip+0x16ef]        # 0x1c9c
  005ad: 00 	movabs rax,0x8000000000000002
  005b7:    	mov    QWORD PTR [rbp-0x70],rax
:00036 _%9 = %7 > %9                        [Float][Float]
:00037 condnotbr _%9 =>:00113
  005bb:    	ucomisd xmm3,xmm4
  005bf:    	jbe    0x3578a
:00038 %9 = %2.call t()                     [<INVALID>]
  005c5: 01 	sub    DWORD PTR [rip+0x16d8],0x1        # 0x1ca4
  005cc:    	je     0x34495
  005d2:    	sub    rsp,0x30
  005d6:    	movq   QWORD PTR [rsp],xmm2
  005db:    	movq   QWORD PTR [rsp+0x8],xmm3
  005e1:    	movq   QWORD PTR [rsp+0x10],xmm5
  005e7:    	movq   QWORD PTR [rsp+0x18],xmm6
  005ed:    	movq   QWORD PTR [rsp+0x20],xmm7
  005f3:    	mov    rdi,QWORD PTR [rbp-0x38]
  005f7: 00 	movabs rax,0x5600b75a2280
  00601:    	call   rax
  00603:    	mov    r15d,eax
  00606: 00 	cmp    r15d,DWORD PTR [rip+0x169f]        # 0x1cac
  0060d:    	jne    0x344b7
  00613:    	mov    eax,DWORD PTR [rip+0xfffffffffffe98a6]        # 0xfffe9ebf
  00619:    	cmp    DWORD PTR [rip+0x1689],eax        # 0x1ca8
  0061f:    	jne    0x344b7
  00625:    	mov    rax,QWORD PTR [rbx]
  00628:    	lea    rdi,[rsp-0x18]
  0062d:    	mov    QWORD PTR [rdi],rax
  00630:    	mov    QWORD PTR [rbx],rdi
  00633: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0063c:    	mov    QWORD PTR [rsp-0x38],rcx
  00641:    	mov    rax,QWORD PTR [rbp-0x38]
  00645:    	mov    QWORD PTR [rsp-0x38],rax
  0064a: 00 	mov    rdi,0x0
  00651: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0065a: 00 	movabs rax,0x0
  00664:    	mov    QWORD PTR [rsp-0x28],rax
  00669: 00 	movabs r13,0x0
  00673:    	call   0xfffe735c
  00678:    	lea    rdi,[rbp-0x8]
  0067c:    	mov    QWORD PTR [rbx],rdi
  0067f:    	movq   xmm2,QWORD PTR [rsp]
  00684:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0068a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00690:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00696:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0069c:    	add    rsp,0x30
  006a0:    	test   rax,rax
  006a3:    	je     0x34523
  006a9:    	mov    QWORD PTR [rbp-0x70],rax
:00039 
:00041 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00042 condnotbr _%9 =>:00113
  006ad:    	movq   xmm0,xmm3
  006b1:    	call   0xfffe74c3
  006b6:    	mov    QWORD PTR [rbp-0x60],rax
  006ba:    	mov    rdi,QWORD PTR [rbp-0x60]
  006be:    	mov    rsi,QWORD PTR [rbp-0x70]
  006c2: 00 	test   rdi,0x1
  006c9:    	je     0x34532
  006cf: 00 	test   rsi,0x1
  006d6:    	je     0x34532
  006dc:    	cmp    rdi,rsi
  006df:    	jge    0x35817
:00043 _ = %2.call t=(%7; 1)                [<INVALID>]
  006e5: 01 	sub    DWORD PTR [rip+0x15c4],0x1        # 0x1cb0
  006ec:    	je     0x345d0
  006f2:    	sub    rsp,0x30
  006f6:    	movq   QWORD PTR [rsp],xmm2
  006fb:    	movq   QWORD PTR [rsp+0x8],xmm3
  00701:    	movq   QWORD PTR [rsp+0x10],xmm5
  00707:    	movq   QWORD PTR [rsp+0x18],xmm6
  0070d:    	movq   QWORD PTR [rsp+0x20],xmm7
  00713:    	mov    rdi,QWORD PTR [rbp-0x38]
  00717: 00 	movabs rax,0x5600b75a2280
  00721:    	call   rax
  00723:    	mov    r15d,eax
  00726: 00 	cmp    r15d,DWORD PTR [rip+0x158b]        # 0x1cb8
  0072d:    	jne    0x345f2
  00733:    	mov    eax,DWORD PTR [rip+0xfffffffffffe9786]        # 0xfffe9ebf
  00739:    	cmp    DWORD PTR [rip+0x1575],eax        # 0x1cb4
  0073f:    	jne    0x345f2
  00745:    	mov    rax,QWORD PTR [rbx]
  00748:    	lea    rdi,[rsp-0x18]
  0074d:    	mov    QWORD PTR [rdi],rax
  00750:    	mov    QWORD PTR [rbx],rdi
  00753: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0075c:    	mov    QWORD PTR [rsp-0x38],rcx
  00761:    	mov    rax,QWORD PTR [rbp-0x38]
  00765:    	mov    QWORD PTR [rsp-0x38],rax
  0076a: 00 	mov    rdi,0x1
  00771:    	mov    rax,QWORD PTR [rbp-0x60]
  00775:    	mov    QWORD PTR [rsp-0x40],rax
  0077a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00783: 00 	movabs rax,0x0
  0078d:    	mov    QWORD PTR [rsp-0x28],rax
  00792: 00 	movabs r13,0x0
  0079c:    	call   0xfffe735c
  007a1:    	lea    rdi,[rbp-0x8]
  007a5:    	mov    QWORD PTR [rbx],rdi
  007a8:    	movq   xmm2,QWORD PTR [rsp]
  007ad:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007b3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007b9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007bf:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007c5:    	add    rsp,0x30
  007c9:    	test   rax,rax
  007cc:    	je     0x3465e
:00044 
:00046 %9 = literal[true]
  007d2: 00 	mov    rax,0x1c
  007d9:    	mov    QWORD PTR [rbp-0x70],rax
:00047 _ = %2.call hit=(%9; 1)              [<INVALID>]
  007dd: 01 	sub    DWORD PTR [rip+0x14d8],0x1        # 0x1cbc
  007e4:    	je     0x346aa
  007ea:    	sub    rsp,0x30
  007ee:    	movq   QWORD PTR [rsp],xmm2
  007f3:    	movq   QWORD PTR [rsp+0x8],xmm3
  007f9:    	movq   QWORD PTR [rsp+0x10],xmm5
  007ff:    	movq   QWORD PTR [rsp+0x18],xmm6
  00805:    	movq   QWORD PTR [rsp+0x20],xmm7
  0080b:    	mov    rdi,QWORD PTR [rbp-0x38]
  0080f: 00 	movabs rax,0x5600b75a2280
  00819:    	call   rax
  0081b:    	mov    r15d,eax
  0081e: 00 	cmp    r15d,DWORD PTR [rip+0x149f]        # 0x1cc4
  00825:    	jne    0x346cc
  0082b:    	mov    eax,DWORD PTR [rip+0xfffffffffffe968e]        # 0xfffe9ebf
  00831:    	cmp    DWORD PTR [rip+0x1489],eax        # 0x1cc0
  00837:    	jne    0x346cc
  0083d:    	mov    rax,QWORD PTR [rbx]
  00840:    	lea    rdi,[rsp-0x18]
  00845:    	mov    QWORD PTR [rdi],rax
  00848:    	mov    QWORD PTR [rbx],rdi
  0084b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00854:    	mov    QWORD PTR [rsp-0x38],rcx
  00859:    	mov    rax,QWORD PTR [rbp-0x38]
  0085d:    	mov    QWORD PTR [rsp-0x38],rax
  00862: 00 	mov    rdi,0x1
  00869:    	mov    rax,QWORD PTR [rbp-0x70]
  0086d:    	mov    QWORD PTR [rsp-0x40],rax
  00872: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0087b: 00 	movabs rax,0x0
  00885:    	mov    QWORD PTR [rsp-0x28],rax
  0088a: 00 	movabs r13,0x0
  00894:    	call   0xfffe735c
  00899:    	lea    rdi,[rbp-0x8]
  0089d:    	mov    QWORD PTR [rbx],rdi
  008a0:    	movq   xmm2,QWORD PTR [rsp]
  008a5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008ab:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008b1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008b7:    	movq   xmm7,QWORD PTR [rsp+0x20]
  008bd:    	add    rsp,0x30
  008c1:    	test   rax,rax
  008c4:    	je     0x34738
:00048 
:00050 %10 = const[Vec]                     [<INVALID>]
  008ca: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe95fb]        # 0xfffe9ecc
  008d1: 00 	cmp    rax,QWORD PTR [rip+0x1404]        # 0x1cdc
  008d8:    	jne    0x34747
  008de: 00 	mov    rax,QWORD PTR [rip+0x13e7]        # 0x1ccc
  008e5:    	mov    QWORD PTR [rbp-0x78],rax
:00051 %12 = %1.call org()                  [<INVALID>]
  008e9: 01 	sub    DWORD PTR [rip+0x13f4],0x1        # 0x1ce4
  008f0:    	je     0x347f3
  008f6:    	sub    rsp,0x20
  008fa:    	movq   QWORD PTR [rsp],xmm3
  008ff:    	movq   QWORD PTR [rsp+0x8],xmm5
  00905:    	movq   QWORD PTR [rsp+0x10],xmm6
  0090b:    	movq   QWORD PTR [rsp+0x18],xmm7
  00911:    	mov    rdi,QWORD PTR [rbp-0x30]
  00915: 00 	movabs rax,0x5600b75a2280
  0091f:    	call   rax
  00921:    	mov    r15d,eax
  00924: 00 	cmp    r15d,DWORD PTR [rip+0x13c1]        # 0x1cec
  0092b:    	jne    0x34815
  00931:    	mov    eax,DWORD PTR [rip+0xfffffffffffe9588]        # 0xfffe9ebf
  00937:    	cmp    DWORD PTR [rip+0x13ab],eax        # 0x1ce8
  0093d:    	jne    0x34815
  00943:    	mov    rax,QWORD PTR [rbx]
  00946:    	lea    rdi,[rsp-0x18]
  0094b:    	mov    QWORD PTR [rdi],rax
  0094e:    	mov    QWORD PTR [rbx],rdi
  00951: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0095a:    	mov    QWORD PTR [rsp-0x38],rcx
  0095f:    	mov    rax,QWORD PTR [rbp-0x30]
  00963:    	mov    QWORD PTR [rsp-0x38],rax
  00968: 00 	mov    rdi,0x0
  0096f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00978: 00 	movabs rax,0x0
  00982:    	mov    QWORD PTR [rsp-0x28],rax
  00987: 00 	movabs r13,0x0
  00991:    	call   0xfffe735c
  00996:    	lea    rdi,[rbp-0x8]
  0099a:    	mov    QWORD PTR [rbx],rdi
  0099d:    	movq   xmm3,QWORD PTR [rsp]
  009a2:    	movq   xmm5,QWORD PTR [rsp+0x8]
  009a8:    	movq   xmm6,QWORD PTR [rsp+0x10]
  009ae:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009b4:    	add    rsp,0x20
  009b8:    	test   rax,rax
  009bb:    	je     0x34881
  009c1: ff 	mov    QWORD PTR [rbp-0x88],rax
:00052 
:00054 %11 = %12.call x()                   [<INVALID>]
  009c8: 01 	sub    DWORD PTR [rip+0x1321],0x1        # 0x1cf0
  009cf:    	je     0x348b9
  009d5:    	sub    rsp,0x20
  009d9:    	movq   QWORD PTR [rsp],xmm3
  009de:    	movq   QWORD PTR [rsp+0x8],xmm5
  009e4:    	movq   QWORD PTR [rsp+0x10],xmm6
  009ea:    	movq   QWORD PTR [rsp+0x18],xmm7
  009f0: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  009f7: 00 	movabs rax,0x5600b75a2280
  00a01:    	call   rax
  00a03:    	mov    r15d,eax
  00a06: 00 	cmp    r15d,DWORD PTR [rip+0x12eb]        # 0x1cf8
  00a0d:    	jne    0x348db
  00a13:    	mov    eax,DWORD PTR [rip+0xfffffffffffe94a6]        # 0xfffe9ebf
  00a19:    	cmp    DWORD PTR [rip+0x12d5],eax        # 0x1cf4
  00a1f:    	jne    0x348db
  00a25:    	mov    rax,QWORD PTR [rbx]
  00a28:    	lea    rdi,[rsp-0x18]
  00a2d:    	mov    QWORD PTR [rdi],rax
  00a30:    	mov    QWORD PTR [rbx],rdi
  00a33: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a3c:    	mov    QWORD PTR [rsp-0x38],rcx
  00a41: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00a48:    	mov    QWORD PTR [rsp-0x38],rax
  00a4d: 00 	mov    rdi,0x0
  00a54: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a5d: 00 	movabs rax,0x0
  00a67:    	mov    QWORD PTR [rsp-0x28],rax
  00a6c: 00 	movabs r13,0x0
  00a76:    	call   0xfffe735c
  00a7b:    	lea    rdi,[rbp-0x8]
  00a7f:    	mov    QWORD PTR [rbx],rdi
  00a82:    	movq   xmm3,QWORD PTR [rsp]
  00a87:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00a8d:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00a93:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00a99:    	add    rsp,0x20
  00a9d:    	test   rax,rax
  00aa0:    	je     0x3494a
  00aa6:    	mov    QWORD PTR [rbp-0x80],rax
:00055 
:00057 %13 = %1.call dir()                  [<INVALID>]
  00aaa: 01 	sub    DWORD PTR [rip+0x124b],0x1        # 0x1cfc
  00ab1:    	je     0x34982
  00ab7:    	sub    rsp,0x20
  00abb:    	movq   QWORD PTR [rsp],xmm3
  00ac0:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ac6:    	movq   QWORD PTR [rsp+0x10],xmm6
  00acc:    	movq   QWORD PTR [rsp+0x18],xmm7
  00ad2:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ad6: 00 	movabs rax,0x5600b75a2280
  00ae0:    	call   rax
  00ae2:    	mov    r15d,eax
  00ae5: 00 	cmp    r15d,DWORD PTR [rip+0x1218]        # 0x1d04
  00aec:    	jne    0x349a4
  00af2:    	mov    eax,DWORD PTR [rip+0xfffffffffffe93c7]        # 0xfffe9ebf
  00af8:    	cmp    DWORD PTR [rip+0x1202],eax        # 0x1d00
  00afe:    	jne    0x349a4
  00b04:    	mov    rax,QWORD PTR [rbx]
  00b07:    	lea    rdi,[rsp-0x18]
  00b0c:    	mov    QWORD PTR [rdi],rax
  00b0f:    	mov    QWORD PTR [rbx],rdi
  00b12: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b1b:    	mov    QWORD PTR [rsp-0x38],rcx
  00b20:    	mov    rax,QWORD PTR [rbp-0x30]
  00b24:    	mov    QWORD PTR [rsp-0x38],rax
  00b29: 00 	mov    rdi,0x0
  00b30: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b39: 00 	movabs rax,0x0
  00b43:    	mov    QWORD PTR [rsp-0x28],rax
  00b48: 00 	movabs r13,0x0
  00b52:    	call   0xfffe735c
  00b57:    	lea    rdi,[rbp-0x8]
  00b5b:    	mov    QWORD PTR [rbx],rdi
  00b5e:    	movq   xmm3,QWORD PTR [rsp]
  00b63:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00b69:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00b6f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00b75:    	add    rsp,0x20
  00b79:    	test   rax,rax
  00b7c:    	je     0x34a10
  00b82: ff 	mov    QWORD PTR [rbp-0x90],rax
:00058 
:00060 %12 = %13.call x()                   [<INVALID>]
  00b89: 01 	sub    DWORD PTR [rip+0x1178],0x1        # 0x1d08
  00b90:    	je     0x34a48
  00b96:    	sub    rsp,0x20
  00b9a:    	movq   QWORD PTR [rsp],xmm3
  00b9f:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ba5:    	movq   QWORD PTR [rsp+0x10],xmm6
  00bab:    	movq   QWORD PTR [rsp+0x18],xmm7
  00bb1: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00bb8: 00 	movabs rax,0x5600b75a2280
  00bc2:    	call   rax
  00bc4:    	mov    r15d,eax
  00bc7: 00 	cmp    r15d,DWORD PTR [rip+0x1142]        # 0x1d10
  00bce:    	jne    0x34a6a
  00bd4:    	mov    eax,DWORD PTR [rip+0xfffffffffffe92e5]        # 0xfffe9ebf
  00bda:    	cmp    DWORD PTR [rip+0x112c],eax        # 0x1d0c
  00be0:    	jne    0x34a6a
  00be6:    	mov    rax,QWORD PTR [rbx]
  00be9:    	lea    rdi,[rsp-0x18]
  00bee:    	mov    QWORD PTR [rdi],rax
  00bf1:    	mov    QWORD PTR [rbx],rdi
  00bf4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00bfd:    	mov    QWORD PTR [rsp-0x38],rcx
  00c02: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00c09:    	mov    QWORD PTR [rsp-0x38],rax
  00c0e: 00 	mov    rdi,0x0
  00c15: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c1e: 00 	movabs rax,0x0
  00c28:    	mov    QWORD PTR [rsp-0x28],rax
  00c2d: 00 	movabs r13,0x0
  00c37:    	call   0xfffe735c
  00c3c:    	lea    rdi,[rbp-0x8]
  00c40:    	mov    QWORD PTR [rbx],rdi
  00c43:    	movq   xmm3,QWORD PTR [rsp]
  00c48:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00c4e:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00c54:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00c5a:    	add    rsp,0x20
  00c5e:    	test   rax,rax
  00c61:    	je     0x34ad9
  00c67: ff 	mov    QWORD PTR [rbp-0x88],rax
:00061 
:00063 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00c6e: 01 	sub    DWORD PTR [rip+0x109f],0x1        # 0x1d14
  00c75:    	je     0x34b11
  00c7b: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00c82:    	mov    rsi,QWORD PTR [rbp-0x60]
  00c86:    	sub    rsp,0x20
  00c8a:    	movq   QWORD PTR [rsp],xmm3
  00c8f:    	movq   QWORD PTR [rsp+0x8],xmm5
  00c95:    	movq   QWORD PTR [rsp+0x10],xmm6
  00c9b:    	movq   QWORD PTR [rsp+0x18],xmm7
  00ca1:    	mov    rdx,rdi
  00ca4:    	mov    rcx,rsi
  00ca7:    	mov    rdi,rbx
  00caa:    	mov    rsi,r12
  00cad: 00 	movabs rax,0x5600b7598f60
  00cb7:    	call   rax
  00cb9:    	movq   xmm3,QWORD PTR [rsp]
  00cbe:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00cc4:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00cca:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00cd0:    	add    rsp,0x20
  00cd4: 00 	movabs r13,0x5600b92b5760
  00cde:    	test   rax,rax
  00ce1:    	je     0xfffe7397
  00ce7: ff 	mov    QWORD PTR [rbp-0x88],rax
:00064 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00cee: 01 	sub    DWORD PTR [rip+0x1023],0x1        # 0x1d18
  00cf5:    	je     0x34b5c
  00cfb:    	mov    rdi,QWORD PTR [rbp-0x80]
  00cff: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  00d06:    	sub    rsp,0x20
  00d0a:    	movq   QWORD PTR [rsp],xmm3
  00d0f:    	movq   QWORD PTR [rsp+0x8],xmm5
  00d15:    	movq   QWORD PTR [rsp+0x10],xmm6
  00d1b:    	movq   QWORD PTR [rsp+0x18],xmm7
  00d21:    	mov    rdx,rdi
  00d24:    	mov    rcx,rsi
  00d27:    	mov    rdi,rbx
  00d2a:    	mov    rsi,r12
  00d2d: 00 	movabs rax,0x5600b75970e0
  00d37:    	call   rax
  00d39:    	movq   xmm3,QWORD PTR [rsp]
  00d3e:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00d44:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00d4a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00d50:    	add    rsp,0x20
  00d54: 00 	movabs r13,0x5600b92b5770
  00d5e:    	test   rax,rax
  00d61:    	je     0xfffe7397
  00d67:    	mov    QWORD PTR [rbp-0x80],rax
:00065 %13 = %1.call org()                  [<INVALID>]
  00d6b: 01 	sub    DWORD PTR [rip+0xfaa],0x1        # 0x1d1c
  00d72:    	je     0x34ba7
  00d78:    	sub    rsp,0x20
  00d7c:    	movq   QWORD PTR [rsp],xmm3
  00d81:    	movq   QWORD PTR [rsp+0x8],xmm5
  00d87:    	movq   QWORD PTR [rsp+0x10],xmm6
  00d8d:    	movq   QWORD PTR [rsp+0x18],xmm7
  00d93:    	mov    rdi,QWORD PTR [rbp-0x30]
  00d97: 00 	movabs rax,0x5600b75a2280
  00da1:    	call   rax
  00da3:    	mov    r15d,eax
  00da6: 00 	cmp    r15d,DWORD PTR [rip+0xf77]        # 0x1d24
  00dad:    	jne    0x34bc9
  00db3:    	mov    eax,DWORD PTR [rip+0xfffffffffffe9106]        # 0xfffe9ebf
  00db9:    	cmp    DWORD PTR [rip+0xf61],eax        # 0x1d20
  00dbf:    	jne    0x34bc9
  00dc5:    	mov    rax,QWORD PTR [rbx]
  00dc8:    	lea    rdi,[rsp-0x18]
  00dcd:    	mov    QWORD PTR [rdi],rax
  00dd0:    	mov    QWORD PTR [rbx],rdi
  00dd3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ddc:    	mov    QWORD PTR [rsp-0x38],rcx
  00de1:    	mov    rax,QWORD PTR [rbp-0x30]
  00de5:    	mov    QWORD PTR [rsp-0x38],rax
  00dea: 00 	mov    rdi,0x0
  00df1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00dfa: 00 	movabs rax,0x0
  00e04:    	mov    QWORD PTR [rsp-0x28],rax
  00e09: 00 	movabs r13,0x0
  00e13:    	call   0xfffe735c
  00e18:    	lea    rdi,[rbp-0x8]
  00e1c:    	mov    QWORD PTR [rbx],rdi
  00e1f:    	movq   xmm3,QWORD PTR [rsp]
  00e24:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00e2a:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00e30:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00e36:    	add    rsp,0x20
  00e3a:    	test   rax,rax
  00e3d:    	je     0x34c35
  00e43: ff 	mov    QWORD PTR [rbp-0x90],rax
:00066 
:00068 %12 = %13.call y()                   [<INVALID>]
  00e4a: 01 	sub    DWORD PTR [rip+0xed7],0x1        # 0x1d28
  00e51:    	je     0x34c6d
  00e57:    	sub    rsp,0x20
  00e5b:    	movq   QWORD PTR [rsp],xmm3
  00e60:    	movq   QWORD PTR [rsp+0x8],xmm5
  00e66:    	movq   QWORD PTR [rsp+0x10],xmm6
  00e6c:    	movq   QWORD PTR [rsp+0x18],xmm7
  00e72: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00e79: 00 	movabs rax,0x5600b75a2280
  00e83:    	call   rax
  00e85:    	mov    r15d,eax
  00e88: 00 	cmp    r15d,DWORD PTR [rip+0xea1]        # 0x1d30
  00e8f:    	jne    0x34c8f
  00e95:    	mov    eax,DWORD PTR [rip+0xfffffffffffe9024]        # 0xfffe9ebf
  00e9b:    	cmp    DWORD PTR [rip+0xe8b],eax        # 0x1d2c
  00ea1:    	jne    0x34c8f
  00ea7:    	mov    rax,QWORD PTR [rbx]
  00eaa:    	lea    rdi,[rsp-0x18]
  00eaf:    	mov    QWORD PTR [rdi],rax
  00eb2:    	mov    QWORD PTR [rbx],rdi
  00eb5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ebe:    	mov    QWORD PTR [rsp-0x38],rcx
  00ec3: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00eca:    	mov    QWORD PTR [rsp-0x38],rax
  00ecf: 00 	mov    rdi,0x0
  00ed6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00edf: 00 	movabs rax,0x0
  00ee9:    	mov    QWORD PTR [rsp-0x28],rax
  00eee: 00 	movabs r13,0x0
  00ef8:    	call   0xfffe735c
  00efd:    	lea    rdi,[rbp-0x8]
  00f01:    	mov    QWORD PTR [rbx],rdi
  00f04:    	movq   xmm3,QWORD PTR [rsp]
  00f09:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00f0f:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00f15:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00f1b:    	add    rsp,0x20
  00f1f:    	test   rax,rax
  00f22:    	je     0x34cfe
  00f28: ff 	mov    QWORD PTR [rbp-0x88],rax
:00069 
:00071 %14 = %1.call dir()                  [<INVALID>]
  00f2f: 01 	sub    DWORD PTR [rip+0xdfe],0x1        # 0x1d34
  00f36:    	je     0x34d36
  00f3c:    	sub    rsp,0x20
  00f40:    	movq   QWORD PTR [rsp],xmm3
  00f45:    	movq   QWORD PTR [rsp+0x8],xmm5
  00f4b:    	movq   QWORD PTR [rsp+0x10],xmm6
  00f51:    	movq   QWORD PTR [rsp+0x18],xmm7
  00f57:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f5b: 00 	movabs rax,0x5600b75a2280
  00f65:    	call   rax
  00f67:    	mov    r15d,eax
  00f6a: 00 	cmp    r15d,DWORD PTR [rip+0xdcb]        # 0x1d3c
  00f71:    	jne    0x34d58
  00f77:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8f42]        # 0xfffe9ebf
  00f7d:    	cmp    DWORD PTR [rip+0xdb5],eax        # 0x1d38
  00f83:    	jne    0x34d58
  00f89:    	mov    rax,QWORD PTR [rbx]
  00f8c:    	lea    rdi,[rsp-0x18]
  00f91:    	mov    QWORD PTR [rdi],rax
  00f94:    	mov    QWORD PTR [rbx],rdi
  00f97: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fa0:    	mov    QWORD PTR [rsp-0x38],rcx
  00fa5:    	mov    rax,QWORD PTR [rbp-0x30]
  00fa9:    	mov    QWORD PTR [rsp-0x38],rax
  00fae: 00 	mov    rdi,0x0
  00fb5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fbe: 00 	movabs rax,0x0
  00fc8:    	mov    QWORD PTR [rsp-0x28],rax
  00fcd: 00 	movabs r13,0x0
  00fd7:    	call   0xfffe735c
  00fdc:    	lea    rdi,[rbp-0x8]
  00fe0:    	mov    QWORD PTR [rbx],rdi
  00fe3:    	movq   xmm3,QWORD PTR [rsp]
  00fe8:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00fee:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00ff4:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00ffa:    	add    rsp,0x20
  00ffe:    	test   rax,rax
  01001:    	je     0x34dc4
  01007: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 
:00074 %13 = %14.call y()                   [<INVALID>]
  0100e: 01 	sub    DWORD PTR [rip+0xd2b],0x1        # 0x1d40
  01015:    	je     0x34dfc
  0101b:    	sub    rsp,0x20
  0101f:    	movq   QWORD PTR [rsp],xmm3
  01024:    	movq   QWORD PTR [rsp+0x8],xmm5
  0102a:    	movq   QWORD PTR [rsp+0x10],xmm6
  01030:    	movq   QWORD PTR [rsp+0x18],xmm7
  01036: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0103d: 00 	movabs rax,0x5600b75a2280
  01047:    	call   rax
  01049:    	mov    r15d,eax
  0104c: 00 	cmp    r15d,DWORD PTR [rip+0xcf5]        # 0x1d48
  01053:    	jne    0x34e1e
  01059:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8e60]        # 0xfffe9ebf
  0105f:    	cmp    DWORD PTR [rip+0xcdf],eax        # 0x1d44
  01065:    	jne    0x34e1e
  0106b:    	mov    rax,QWORD PTR [rbx]
  0106e:    	lea    rdi,[rsp-0x18]
  01073:    	mov    QWORD PTR [rdi],rax
  01076:    	mov    QWORD PTR [rbx],rdi
  01079: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01082:    	mov    QWORD PTR [rsp-0x38],rcx
  01087: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0108e:    	mov    QWORD PTR [rsp-0x38],rax
  01093: 00 	mov    rdi,0x0
  0109a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010a3: 00 	movabs rax,0x0
  010ad:    	mov    QWORD PTR [rsp-0x28],rax
  010b2: 00 	movabs r13,0x0
  010bc:    	call   0xfffe735c
  010c1:    	lea    rdi,[rbp-0x8]
  010c5:    	mov    QWORD PTR [rbx],rdi
  010c8:    	movq   xmm3,QWORD PTR [rsp]
  010cd:    	movq   xmm5,QWORD PTR [rsp+0x8]
  010d3:    	movq   xmm6,QWORD PTR [rsp+0x10]
  010d9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  010df:    	add    rsp,0x20
  010e3:    	test   rax,rax
  010e6:    	je     0x34e8d
  010ec: ff 	mov    QWORD PTR [rbp-0x90],rax
:00075 
:00077 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  010f3: 01 	sub    DWORD PTR [rip+0xc52],0x1        # 0x1d4c
  010fa:    	je     0x34ec5
  01100: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01107:    	mov    rsi,QWORD PTR [rbp-0x60]
  0110b:    	sub    rsp,0x20
  0110f:    	movq   QWORD PTR [rsp],xmm3
  01114:    	movq   QWORD PTR [rsp+0x8],xmm5
  0111a:    	movq   QWORD PTR [rsp+0x10],xmm6
  01120:    	movq   QWORD PTR [rsp+0x18],xmm7
  01126:    	mov    rdx,rdi
  01129:    	mov    rcx,rsi
  0112c:    	mov    rdi,rbx
  0112f:    	mov    rsi,r12
  01132: 00 	movabs rax,0x5600b7598f60
  0113c:    	call   rax
  0113e:    	movq   xmm3,QWORD PTR [rsp]
  01143:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01149:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0114f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01155:    	add    rsp,0x20
  01159: 00 	movabs r13,0x5600b92b5840
  01163:    	test   rax,rax
  01166:    	je     0xfffe7397
  0116c: ff 	mov    QWORD PTR [rbp-0x90],rax
:00078 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  01173: 01 	sub    DWORD PTR [rip+0xbd6],0x1        # 0x1d50
  0117a:    	je     0x34f10
  01180: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01187: ff 	mov    rsi,QWORD PTR [rbp-0x90]
  0118e:    	sub    rsp,0x20
  01192:    	movq   QWORD PTR [rsp],xmm3
  01197:    	movq   QWORD PTR [rsp+0x8],xmm5
  0119d:    	movq   QWORD PTR [rsp+0x10],xmm6
  011a3:    	movq   QWORD PTR [rsp+0x18],xmm7
  011a9:    	mov    rdx,rdi
  011ac:    	mov    rcx,rsi
  011af:    	mov    rdi,rbx
  011b2:    	mov    rsi,r12
  011b5: 00 	movabs rax,0x5600b75970e0
  011bf:    	call   rax
  011c1:    	movq   xmm3,QWORD PTR [rsp]
  011c6:    	movq   xmm5,QWORD PTR [rsp+0x8]
  011cc:    	movq   xmm6,QWORD PTR [rsp+0x10]
  011d2:    	movq   xmm7,QWORD PTR [rsp+0x18]
  011d8:    	add    rsp,0x20
  011dc: 00 	movabs r13,0x5600b92b5850
  011e6:    	test   rax,rax
  011e9:    	je     0xfffe7397
  011ef: ff 	mov    QWORD PTR [rbp-0x88],rax
:00079 %14 = %1.call org()                  [<INVALID>]
  011f6: 01 	sub    DWORD PTR [rip+0xb57],0x1        # 0x1d54
  011fd:    	je     0x34f5b
  01203:    	sub    rsp,0x20
  01207:    	movq   QWORD PTR [rsp],xmm3
  0120c:    	movq   QWORD PTR [rsp+0x8],xmm5
  01212:    	movq   QWORD PTR [rsp+0x10],xmm6
  01218:    	movq   QWORD PTR [rsp+0x18],xmm7
  0121e:    	mov    rdi,QWORD PTR [rbp-0x30]
  01222: 00 	movabs rax,0x5600b75a2280
  0122c:    	call   rax
  0122e:    	mov    r15d,eax
  01231: 00 	cmp    r15d,DWORD PTR [rip+0xb24]        # 0x1d5c
  01238:    	jne    0x34f7d
  0123e:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8c7b]        # 0xfffe9ebf
  01244:    	cmp    DWORD PTR [rip+0xb0e],eax        # 0x1d58
  0124a:    	jne    0x34f7d
  01250:    	mov    rax,QWORD PTR [rbx]
  01253:    	lea    rdi,[rsp-0x18]
  01258:    	mov    QWORD PTR [rdi],rax
  0125b:    	mov    QWORD PTR [rbx],rdi
  0125e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01267:    	mov    QWORD PTR [rsp-0x38],rcx
  0126c:    	mov    rax,QWORD PTR [rbp-0x30]
  01270:    	mov    QWORD PTR [rsp-0x38],rax
  01275: 00 	mov    rdi,0x0
  0127c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01285: 00 	movabs rax,0x0
  0128f:    	mov    QWORD PTR [rsp-0x28],rax
  01294: 00 	movabs r13,0x0
  0129e:    	call   0xfffe735c
  012a3:    	lea    rdi,[rbp-0x8]
  012a7:    	mov    QWORD PTR [rbx],rdi
  012aa:    	movq   xmm3,QWORD PTR [rsp]
  012af:    	movq   xmm5,QWORD PTR [rsp+0x8]
  012b5:    	movq   xmm6,QWORD PTR [rsp+0x10]
  012bb:    	movq   xmm7,QWORD PTR [rsp+0x18]
  012c1:    	add    rsp,0x20
  012c5:    	test   rax,rax
  012c8:    	je     0x34fe9
  012ce: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 
:00082 %13 = %14.call z()                   [<INVALID>]
  012d5: 01 	sub    DWORD PTR [rip+0xa84],0x1        # 0x1d60
  012dc:    	je     0x35021
  012e2:    	sub    rsp,0x20
  012e6:    	movq   QWORD PTR [rsp],xmm3
  012eb:    	movq   QWORD PTR [rsp+0x8],xmm5
  012f1:    	movq   QWORD PTR [rsp+0x10],xmm6
  012f7:    	movq   QWORD PTR [rsp+0x18],xmm7
  012fd: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01304: 00 	movabs rax,0x5600b75a2280
  0130e:    	call   rax
  01310:    	mov    r15d,eax
  01313: 00 	cmp    r15d,DWORD PTR [rip+0xa4e]        # 0x1d68
  0131a:    	jne    0x35043
  01320:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8b99]        # 0xfffe9ebf
  01326:    	cmp    DWORD PTR [rip+0xa38],eax        # 0x1d64
  0132c:    	jne    0x35043
  01332:    	mov    rax,QWORD PTR [rbx]
  01335:    	lea    rdi,[rsp-0x18]
  0133a:    	mov    QWORD PTR [rdi],rax
  0133d:    	mov    QWORD PTR [rbx],rdi
  01340: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01349:    	mov    QWORD PTR [rsp-0x38],rcx
  0134e: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01355:    	mov    QWORD PTR [rsp-0x38],rax
  0135a: 00 	mov    rdi,0x0
  01361: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0136a: 00 	movabs rax,0x0
  01374:    	mov    QWORD PTR [rsp-0x28],rax
  01379: 00 	movabs r13,0x0
  01383:    	call   0xfffe735c
  01388:    	lea    rdi,[rbp-0x8]
  0138c:    	mov    QWORD PTR [rbx],rdi
  0138f:    	movq   xmm3,QWORD PTR [rsp]
  01394:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0139a:    	movq   xmm6,QWORD PTR [rsp+0x10]
  013a0:    	movq   xmm7,QWORD PTR [rsp+0x18]
  013a6:    	add    rsp,0x20
  013aa:    	test   rax,rax
  013ad:    	je     0x350b2
  013b3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00083 
:00085 %15 = %1.call dir()                  [<INVALID>]
  013ba: 01 	sub    DWORD PTR [rip+0x9ab],0x1        # 0x1d6c
  013c1:    	je     0x350ea
  013c7:    	sub    rsp,0x20
  013cb:    	movq   QWORD PTR [rsp],xmm3
  013d0:    	movq   QWORD PTR [rsp+0x8],xmm5
  013d6:    	movq   QWORD PTR [rsp+0x10],xmm6
  013dc:    	movq   QWORD PTR [rsp+0x18],xmm7
  013e2:    	mov    rdi,QWORD PTR [rbp-0x30]
  013e6: 00 	movabs rax,0x5600b75a2280
  013f0:    	call   rax
  013f2:    	mov    r15d,eax
  013f5: 00 	cmp    r15d,DWORD PTR [rip+0x978]        # 0x1d74
  013fc:    	jne    0x3510c
  01402:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8ab7]        # 0xfffe9ebf
  01408:    	cmp    DWORD PTR [rip+0x962],eax        # 0x1d70
  0140e:    	jne    0x3510c
  01414:    	mov    rax,QWORD PTR [rbx]
  01417:    	lea    rdi,[rsp-0x18]
  0141c:    	mov    QWORD PTR [rdi],rax
  0141f:    	mov    QWORD PTR [rbx],rdi
  01422: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0142b:    	mov    QWORD PTR [rsp-0x38],rcx
  01430:    	mov    rax,QWORD PTR [rbp-0x30]
  01434:    	mov    QWORD PTR [rsp-0x38],rax
  01439: 00 	mov    rdi,0x0
  01440: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01449: 00 	movabs rax,0x0
  01453:    	mov    QWORD PTR [rsp-0x28],rax
  01458: 00 	movabs r13,0x0
  01462:    	call   0xfffe735c
  01467:    	lea    rdi,[rbp-0x8]
  0146b:    	mov    QWORD PTR [rbx],rdi
  0146e:    	movq   xmm3,QWORD PTR [rsp]
  01473:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01479:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0147f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01485:    	add    rsp,0x20
  01489:    	test   rax,rax
  0148c:    	je     0x35178
  01492: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00086 
:00088 %14 = %15.call z()                   [<INVALID>]
  01499: 01 	sub    DWORD PTR [rip+0x8d8],0x1        # 0x1d78
  014a0:    	je     0x351b0
  014a6:    	sub    rsp,0x20
  014aa:    	movq   QWORD PTR [rsp],xmm3
  014af:    	movq   QWORD PTR [rsp+0x8],xmm5
  014b5:    	movq   QWORD PTR [rsp+0x10],xmm6
  014bb:    	movq   QWORD PTR [rsp+0x18],xmm7
  014c1: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  014c8: 00 	movabs rax,0x5600b75a2280
  014d2:    	call   rax
  014d4:    	mov    r15d,eax
  014d7: 00 	cmp    r15d,DWORD PTR [rip+0x8a2]        # 0x1d80
  014de:    	jne    0x351d2
  014e4:    	mov    eax,DWORD PTR [rip+0xfffffffffffe89d5]        # 0xfffe9ebf
  014ea:    	cmp    DWORD PTR [rip+0x88c],eax        # 0x1d7c
  014f0:    	jne    0x351d2
  014f6:    	mov    rax,QWORD PTR [rbx]
  014f9:    	lea    rdi,[rsp-0x18]
  014fe:    	mov    QWORD PTR [rdi],rax
  01501:    	mov    QWORD PTR [rbx],rdi
  01504: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0150d:    	mov    QWORD PTR [rsp-0x38],rcx
  01512: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01519:    	mov    QWORD PTR [rsp-0x38],rax
  0151e: 00 	mov    rdi,0x0
  01525: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0152e: 00 	movabs rax,0x0
  01538:    	mov    QWORD PTR [rsp-0x28],rax
  0153d: 00 	movabs r13,0x0
  01547:    	call   0xfffe735c
  0154c:    	lea    rdi,[rbp-0x8]
  01550:    	mov    QWORD PTR [rbx],rdi
  01553:    	movq   xmm3,QWORD PTR [rsp]
  01558:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0155e:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01564:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0156a:    	add    rsp,0x20
  0156e:    	test   rax,rax
  01571:    	je     0x35241
  01577: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 
:00091 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  0157e: 01 	sub    DWORD PTR [rip+0x7ff],0x1        # 0x1d84
  01585:    	je     0x35279
  0158b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01592:    	mov    rsi,QWORD PTR [rbp-0x60]
  01596:    	sub    rsp,0x20
  0159a:    	movq   QWORD PTR [rsp],xmm3
  0159f:    	movq   QWORD PTR [rsp+0x8],xmm5
  015a5:    	movq   QWORD PTR [rsp+0x10],xmm6
  015ab:    	movq   QWORD PTR [rsp+0x18],xmm7
  015b1:    	mov    rdx,rdi
  015b4:    	mov    rcx,rsi
  015b7:    	mov    rdi,rbx
  015ba:    	mov    rsi,r12
  015bd: 00 	movabs rax,0x5600b7598f60
  015c7:    	call   rax
  015c9:    	movq   xmm3,QWORD PTR [rsp]
  015ce:    	movq   xmm5,QWORD PTR [rsp+0x8]
  015d4:    	movq   xmm6,QWORD PTR [rsp+0x10]
  015da:    	movq   xmm7,QWORD PTR [rsp+0x18]
  015e0:    	add    rsp,0x20
  015e4: 00 	movabs r13,0x5600b92b5920
  015ee:    	test   rax,rax
  015f1:    	je     0xfffe7397
  015f7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00092 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  015fe: 01 	sub    DWORD PTR [rip+0x783],0x1        # 0x1d88
  01605:    	je     0x352c4
  0160b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01612: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  01619:    	sub    rsp,0x20
  0161d:    	movq   QWORD PTR [rsp],xmm3
  01622:    	movq   QWORD PTR [rsp+0x8],xmm5
  01628:    	movq   QWORD PTR [rsp+0x10],xmm6
  0162e:    	movq   QWORD PTR [rsp+0x18],xmm7
  01634:    	mov    rdx,rdi
  01637:    	mov    rcx,rsi
  0163a:    	mov    rdi,rbx
  0163d:    	mov    rsi,r12
  01640: 00 	movabs rax,0x5600b75970e0
  0164a:    	call   rax
  0164c:    	movq   xmm3,QWORD PTR [rsp]
  01651:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01657:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0165d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01663:    	add    rsp,0x20
  01667: 00 	movabs r13,0x5600b92b5930
  01671:    	test   rax,rax
  01674:    	je     0xfffe7397
  0167a: ff 	mov    QWORD PTR [rbp-0x90],rax
:00093 %9 = %10.call new(%11; 3)            [<INVALID>]
  01681: 01 	sub    DWORD PTR [rip+0x704],0x1        # 0x1d8c
  01688:    	je     0x3530f
  0168e:    	sub    rsp,0x20
  01692:    	movq   QWORD PTR [rsp],xmm3
  01697:    	movq   QWORD PTR [rsp+0x8],xmm5
  0169d:    	movq   QWORD PTR [rsp+0x10],xmm6
  016a3:    	movq   QWORD PTR [rsp+0x18],xmm7
  016a9:    	mov    rdi,QWORD PTR [rbp-0x78]
  016ad: 00 	movabs rax,0x5600b75a2280
  016b7:    	call   rax
  016b9:    	mov    r15d,eax
  016bc: 00 	cmp    r15d,DWORD PTR [rip+0x6d1]        # 0x1d94
  016c3:    	jne    0x35331
  016c9:    	mov    eax,DWORD PTR [rip+0xfffffffffffe87f0]        # 0xfffe9ebf
  016cf:    	cmp    DWORD PTR [rip+0x6bb],eax        # 0x1d90
  016d5:    	jne    0x35331
  016db:    	mov    rax,QWORD PTR [rbx]
  016de:    	lea    rdi,[rsp-0x18]
  016e3:    	mov    QWORD PTR [rdi],rax
  016e6:    	mov    QWORD PTR [rbx],rdi
  016e9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016f2:    	mov    QWORD PTR [rsp-0x38],rcx
  016f7:    	mov    rax,QWORD PTR [rbp-0x78]
  016fb:    	mov    QWORD PTR [rsp-0x38],rax
  01700: 00 	mov    rdi,0x3
  01707:    	mov    rax,QWORD PTR [rbp-0x80]
  0170b:    	mov    QWORD PTR [rsp-0x40],rax
  01710: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01717:    	mov    QWORD PTR [rsp-0x48],rax
  0171c: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01723:    	mov    QWORD PTR [rsp-0x50],rax
  01728: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01731: 00 	movabs rax,0x0
  0173b:    	mov    QWORD PTR [rsp-0x28],rax
  01740: 00 	movabs r13,0x0
  0174a:    	call   0xfffe735c
  0174f:    	lea    rdi,[rbp-0x8]
  01753:    	mov    QWORD PTR [rbx],rdi
  01756:    	movq   xmm3,QWORD PTR [rsp]
  0175b:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01761:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01767:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0176d:    	add    rsp,0x20
  01771:    	test   rax,rax
  01774:    	je     0x3539d
  0177a:    	mov    QWORD PTR [rbp-0x70],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [<INVALID>]
  0177e: 01 	sub    DWORD PTR [rip+0x613],0x1        # 0x1d98
  01785:    	je     0x353d5
  0178b:    	sub    rsp,0x20
  0178f:    	movq   QWORD PTR [rsp],xmm3
  01794:    	movq   QWORD PTR [rsp+0x8],xmm5
  0179a:    	movq   QWORD PTR [rsp+0x10],xmm6
  017a0:    	movq   QWORD PTR [rsp+0x18],xmm7
  017a6:    	mov    rdi,QWORD PTR [rbp-0x38]
  017aa: 00 	movabs rax,0x5600b75a2280
  017b4:    	call   rax
  017b6:    	mov    r15d,eax
  017b9: 00 	cmp    r15d,DWORD PTR [rip+0x5e0]        # 0x1da0
  017c0:    	jne    0x353f7
  017c6:    	mov    eax,DWORD PTR [rip+0xfffffffffffe86f3]        # 0xfffe9ebf
  017cc:    	cmp    DWORD PTR [rip+0x5ca],eax        # 0x1d9c
  017d2:    	jne    0x353f7
  017d8:    	mov    rax,QWORD PTR [rbx]
  017db:    	lea    rdi,[rsp-0x18]
  017e0:    	mov    QWORD PTR [rdi],rax
  017e3:    	mov    QWORD PTR [rbx],rdi
  017e6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017ef:    	mov    QWORD PTR [rsp-0x38],rcx
  017f4:    	mov    rax,QWORD PTR [rbp-0x38]
  017f8:    	mov    QWORD PTR [rsp-0x38],rax
  017fd: 00 	mov    rdi,0x1
  01804:    	mov    rax,QWORD PTR [rbp-0x70]
  01808:    	mov    QWORD PTR [rsp-0x40],rax
  0180d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01816: 00 	movabs rax,0x0
  01820:    	mov    QWORD PTR [rsp-0x28],rax
  01825: 00 	movabs r13,0x0
  0182f:    	call   0xfffe735c
  01834:    	lea    rdi,[rbp-0x8]
  01838:    	mov    QWORD PTR [rbx],rdi
  0183b:    	movq   xmm3,QWORD PTR [rsp]
  01840:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01846:    	movq   xmm6,QWORD PTR [rsp+0x10]
  0184c:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01852:    	add    rsp,0x20
  01856:    	test   rax,rax
  01859:    	je     0x35463
:00097 
:00099 %9 = %2.call pl()                    [<INVALID>]
  0185f: 01 	sub    DWORD PTR [rip+0x53e],0x1        # 0x1da4
  01866:    	je     0x3549b
  0186c:    	sub    rsp,0x20
  01870:    	movq   QWORD PTR [rsp],xmm3
  01875:    	movq   QWORD PTR [rsp+0x8],xmm5
  0187b:    	movq   QWORD PTR [rsp+0x10],xmm6
  01881:    	movq   QWORD PTR [rsp+0x18],xmm7
  01887:    	mov    rdi,QWORD PTR [rbp-0x38]
  0188b: 00 	movabs rax,0x5600b75a2280
  01895:    	call   rax
  01897:    	mov    r15d,eax
  0189a: 00 	cmp    r15d,DWORD PTR [rip+0x50b]        # 0x1dac
  018a1:    	jne    0x354bd
  018a7:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8612]        # 0xfffe9ebf
  018ad:    	cmp    DWORD PTR [rip+0x4f5],eax        # 0x1da8
  018b3:    	jne    0x354bd
  018b9:    	mov    rax,QWORD PTR [rbx]
  018bc:    	lea    rdi,[rsp-0x18]
  018c1:    	mov    QWORD PTR [rdi],rax
  018c4:    	mov    QWORD PTR [rbx],rdi
  018c7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  018d0:    	mov    QWORD PTR [rsp-0x38],rcx
  018d5:    	mov    rax,QWORD PTR [rbp-0x38]
  018d9:    	mov    QWORD PTR [rsp-0x38],rax
  018de: 00 	mov    rdi,0x0
  018e5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018ee: 00 	movabs rax,0x0
  018f8:    	mov    QWORD PTR [rsp-0x28],rax
  018fd: 00 	movabs r13,0x0
  01907:    	call   0xfffe735c
  0190c:    	lea    rdi,[rbp-0x8]
  01910:    	mov    QWORD PTR [rbx],rdi
  01913:    	movq   xmm3,QWORD PTR [rsp]
  01918:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0191e:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01924:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0192a:    	add    rsp,0x20
  0192e:    	test   rax,rax
  01931:    	je     0x35529
  01937:    	mov    QWORD PTR [rbp-0x70],rax
:00100 
:00102 %10 = @center: <INVALID>[IvarId(0)]
  0193b:    	mov    rdi,QWORD PTR [rbp-0x28]
  0193f:    	sub    rsp,0x20
  01943:    	movq   QWORD PTR [rsp],xmm3
  01948:    	movq   QWORD PTR [rsp+0x8],xmm5
  0194e:    	movq   QWORD PTR [rsp+0x10],xmm6
  01954:    	movq   QWORD PTR [rsp+0x18],xmm7
  0195a: 00 	mov    rsi,0x85
  01961:    	mov    rdx,r12
  01964: 00 	movabs rax,0x5600b75c5460
  0196e:    	call   rax
  01970:    	movq   xmm3,QWORD PTR [rsp]
  01975:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0197b:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01981:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01987:    	add    rsp,0x20
  0198b:    	mov    QWORD PTR [rbp-0x78],rax
:00103 %8 = %9.call vsub(%10; 1)            [<INVALID>]
  0198f: 01 	sub    DWORD PTR [rip+0x41a],0x1        # 0x1db0
  01996:    	je     0x35561
  0199c:    	sub    rsp,0x20
  019a0:    	movq   QWORD PTR [rsp],xmm3
  019a5:    	movq   QWORD PTR [rsp+0x8],xmm5
  019ab:    	movq   QWORD PTR [rsp+0x10],xmm6
  019b1:    	movq   QWORD PTR [rsp+0x18],xmm7
  019b7:    	mov    rdi,QWORD PTR [rbp-0x70]
  019bb: 00 	movabs rax,0x5600b75a2280
  019c5:    	call   rax
  019c7:    	mov    r15d,eax
  019ca: 00 	cmp    r15d,DWORD PTR [rip+0x3e7]        # 0x1db8
  019d1:    	jne    0x35583
  019d7:    	mov    eax,DWORD PTR [rip+0xfffffffffffe84e2]        # 0xfffe9ebf
  019dd:    	cmp    DWORD PTR [rip+0x3d1],eax        # 0x1db4
  019e3:    	jne    0x35583
  019e9:    	mov    rax,QWORD PTR [rbx]
  019ec:    	lea    rdi,[rsp-0x18]
  019f1:    	mov    QWORD PTR [rdi],rax
  019f4:    	mov    QWORD PTR [rbx],rdi
  019f7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a00:    	mov    QWORD PTR [rsp-0x38],rcx
  01a05:    	mov    rax,QWORD PTR [rbp-0x70]
  01a09:    	mov    QWORD PTR [rsp-0x38],rax
  01a0e: 00 	mov    rdi,0x1
  01a15:    	mov    rax,QWORD PTR [rbp-0x78]
  01a19:    	mov    QWORD PTR [rsp-0x40],rax
  01a1e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a27: 00 	movabs rax,0x0
  01a31:    	mov    QWORD PTR [rsp-0x28],rax
  01a36: 00 	movabs r13,0x0
  01a40:    	call   0xfffe735c
  01a45:    	lea    rdi,[rbp-0x8]
  01a49:    	mov    QWORD PTR [rbx],rdi
  01a4c:    	movq   xmm3,QWORD PTR [rsp]
  01a51:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01a57:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01a5d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a63:    	add    rsp,0x20
  01a67:    	test   rax,rax
  01a6a:    	je     0x355ef
  01a70:    	mov    QWORD PTR [rbp-0x68],rax
:00104 
:00106 %9 = %8.call vnormalize()            [<INVALID>]
  01a74: 01 	sub    DWORD PTR [rip+0x341],0x1        # 0x1dbc
  01a7b:    	je     0x35627
  01a81:    	sub    rsp,0x20
  01a85:    	movq   QWORD PTR [rsp],xmm3
  01a8a:    	movq   QWORD PTR [rsp+0x8],xmm5
  01a90:    	movq   QWORD PTR [rsp+0x10],xmm6
  01a96:    	movq   QWORD PTR [rsp+0x18],xmm7
  01a9c:    	mov    rdi,QWORD PTR [rbp-0x68]
  01aa0: 00 	movabs rax,0x5600b75a2280
  01aaa:    	call   rax
  01aac:    	mov    r15d,eax
  01aaf: 00 	cmp    r15d,DWORD PTR [rip+0x30e]        # 0x1dc4
  01ab6:    	jne    0x35649
  01abc:    	mov    eax,DWORD PTR [rip+0xfffffffffffe83fd]        # 0xfffe9ebf
  01ac2:    	cmp    DWORD PTR [rip+0x2f8],eax        # 0x1dc0
  01ac8:    	jne    0x35649
  01ace:    	mov    rax,QWORD PTR [rbx]
  01ad1:    	lea    rdi,[rsp-0x18]
  01ad6:    	mov    QWORD PTR [rdi],rax
  01ad9:    	mov    QWORD PTR [rbx],rdi
  01adc: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01ae5:    	mov    QWORD PTR [rsp-0x38],rcx
  01aea:    	mov    rax,QWORD PTR [rbp-0x68]
  01aee:    	mov    QWORD PTR [rsp-0x38],rax
  01af3: 00 	mov    rdi,0x0
  01afa: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b03: 00 	movabs rax,0x0
  01b0d:    	mov    QWORD PTR [rsp-0x28],rax
  01b12: 00 	movabs r13,0x0
  01b1c:    	call   0xfffe735c
  01b21:    	lea    rdi,[rbp-0x8]
  01b25:    	mov    QWORD PTR [rbx],rdi
  01b28:    	movq   xmm3,QWORD PTR [rsp]
  01b2d:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01b33:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01b39:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b3f:    	add    rsp,0x20
  01b43:    	test   rax,rax
  01b46:    	je     0x356b5
  01b4c:    	mov    QWORD PTR [rbp-0x70],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [<INVALID>]
  01b50: 01 	sub    DWORD PTR [rip+0x271],0x1        # 0x1dc8
  01b57:    	je     0x356ed
  01b5d:    	sub    rsp,0x20
  01b61:    	movq   QWORD PTR [rsp],xmm3
  01b66:    	movq   QWORD PTR [rsp+0x8],xmm5
  01b6c:    	movq   QWORD PTR [rsp+0x10],xmm6
  01b72:    	movq   QWORD PTR [rsp+0x18],xmm7
  01b78:    	mov    rdi,QWORD PTR [rbp-0x38]
  01b7c: 00 	movabs rax,0x5600b75a2280
  01b86:    	call   rax
  01b88:    	mov    r15d,eax
  01b8b: 00 	cmp    r15d,DWORD PTR [rip+0x23e]        # 0x1dd0
  01b92:    	jne    0x3570f
  01b98:    	mov    eax,DWORD PTR [rip+0xfffffffffffe8321]        # 0xfffe9ebf
  01b9e:    	cmp    DWORD PTR [rip+0x228],eax        # 0x1dcc
  01ba4:    	jne    0x3570f
  01baa:    	mov    rax,QWORD PTR [rbx]
  01bad:    	lea    rdi,[rsp-0x18]
  01bb2:    	mov    QWORD PTR [rdi],rax
  01bb5:    	mov    QWORD PTR [rbx],rdi
  01bb8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01bc1:    	mov    QWORD PTR [rsp-0x38],rcx
  01bc6:    	mov    rax,QWORD PTR [rbp-0x38]
  01bca:    	mov    QWORD PTR [rsp-0x38],rax
  01bcf: 00 	mov    rdi,0x1
  01bd6:    	mov    rax,QWORD PTR [rbp-0x70]
  01bda:    	mov    QWORD PTR [rsp-0x40],rax
  01bdf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01be8: 00 	movabs rax,0x0
  01bf2:    	mov    QWORD PTR [rsp-0x28],rax
  01bf7: 00 	movabs r13,0x0
  01c01:    	call   0xfffe735c
  01c06:    	lea    rdi,[rbp-0x8]
  01c0a:    	mov    QWORD PTR [rbx],rdi
  01c0d:    	movq   xmm3,QWORD PTR [rsp]
  01c12:    	movq   xmm5,QWORD PTR [rsp+0x8]
  01c18:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01c1e:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c24:    	add    rsp,0x20
  01c28:    	test   rax,rax
  01c2b:    	je     0x3577b
:00110 
:00112 br =>:00113
  01c31:    	jmp    0x35897
:00113 br =>:00114
  01c36:    	jmp    0x3590a
:00114 %9 = nil
  01c3b: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00115 ret %9
  01c43:    	mov    rax,QWORD PTR [rbp-0x70]
  01c47:    	leave  
  01c48:    	ret    
==> start whole compile: intersect FuncId(71) self_class:Plane start:[00000] bytecode:0x5600b92b7200
<== finished compile. elapsed:178.9µs
offset:Pos(109176) code: 6671 bytes  data: 353 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x2
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x40],rax
  00040:    	mov    QWORD PTR [rbp-0x48],rax
  00044:    	mov    QWORD PTR [rbp-0x50],rax
  00048:    	mov    QWORD PTR [rbp-0x58],rax
  0004c:    	mov    QWORD PTR [rbp-0x60],rax
  00050:    	mov    QWORD PTR [rbp-0x68],rax
  00054:    	mov    QWORD PTR [rbp-0x70],rax
  00058:    	mov    QWORD PTR [rbp-0x78],rax
  0005c:    	mov    QWORD PTR [rbp-0x80],rax
  00060: ff 	mov    QWORD PTR [rbp-0x88],rax
  00067: ff 	mov    QWORD PTR [rbp-0x90],rax
  0006e:    	mov    rdi,QWORD PTR [rbp-0x28]
  00072: 00 	test   rdi,0x7
  00079:    	jne    0x33b69
  0007f:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00083:    	jne    0x33b69
:00000 init reg_num:14 arg_num:2 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  00089:    	mov    rdi,QWORD PTR [rbp-0x28]
  0008d:    	mov    rax,QWORD PTR [rdi+0x10]
  00091:    	mov    QWORD PTR [rbp-0x60],rax
:00002 %8 = @n: Plane[IvarId(1)]
  00095:    	mov    rdi,QWORD PTR [rbp-0x28]
  00099:    	mov    rax,QWORD PTR [rdi+0x18]
  0009d:    	mov    QWORD PTR [rbp-0x68],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  000a1:    	mov    rdi,QWORD PTR [rbp-0x60]
  000a5: 00 	test   rdi,0x7
  000ac:    	jne    0x33b78
  000b2:    	cmp    DWORD PTR [rdi+0x4],0x28
  000b6:    	jne    0x33b78
  000bc: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8028],0x26        # 0xfffe80eb
  000c3:    	jne    0x33b78
  000c9:    	mov    rax,QWORD PTR [rbx]
  000cc:    	lea    rdi,[rsp-0x18]
  000d1:    	mov    QWORD PTR [rdi],rax
  000d4:    	mov    QWORD PTR [rbx],rdi
  000d7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000e0:    	mov    QWORD PTR [rsp-0x38],rcx
  000e5:    	mov    rax,QWORD PTR [rbp-0x60]
  000e9:    	mov    QWORD PTR [rsp-0x38],rax
  000ee: 00 	mov    rdi,0x1
  000f5:    	mov    rax,QWORD PTR [rbp-0x68]
  000f9:    	mov    QWORD PTR [rsp-0x40],rax
  000fe: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00107: 05 	movabs rax,0x1000500000041
  00111:    	mov    QWORD PTR [rsp-0x28],rax
  00116: 00 	movabs r13,0x5600b92d48b0
  00120:    	call   0xfffe8e3e
  00125:    	lea    rdi,[rbp-0x8]
  00129:    	mov    QWORD PTR [rbx],rdi
  0012c: 00 	movabs r13,0x5600b92b7250
  00136:    	test   rax,rax
  00139:    	je     0xfffe55c3
  0013f:    	mov    QWORD PTR [rbp-0x40],rax
:00004 
:00006 %3 = neg %3                          [Float]
  00143:    	mov    rdi,QWORD PTR [rbp-0x40]
  00147: 00 	test   rdi,0x1
  0014e:    	jne    0x33b87
  00154: 00 	test   rdi,0x2
  0015b:    	je     0x197
  00161:    	xorps  xmm2,xmm2
  00164: 00 	movabs rax,0x8000000000000002
  0016e:    	cmp    rdi,rax
  00171:    	je     0x1a9
  00177:    	mov    rax,rdi
  0017a:    	sar    rax,0x3f
  0017e:    	add    rax,0x2
  00182:    	and    rdi,0xfffffffffffffffc
  00186:    	or     rdi,rax
  00189:    	rol    rdi,0x3d
  0018d:    	movq   xmm2,rdi
  00192:    	jmp    0x1a9
  00197:    	call   0xfffe55fc
  0019c:    	test   rax,rax
  0019f:    	je     0x33b87
  001a5:    	movq   xmm2,xmm0
  001a9: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1868]        # 0x1a18
:00007 %7 = %1.call dir()                   [Ray]
  001b0:    	mov    rdi,QWORD PTR [rbp-0x30]
  001b4: 00 	test   rdi,0x7
  001bb:    	jne    0x33b96
  001c1:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001c5:    	jne    0x33b96
  001cb: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7f19],0x26        # 0xfffe80eb
  001d2:    	jne    0x33b96
  001d8:    	mov    esi,DWORD PTR [rip+0x1846]        # 0x1a24
  001de:    	cmp    esi,0xffffffff
  001e1:    	je     0x33bb2
  001e7:    	cmp    WORD PTR [rdi+0x2],0x3
  001ec:    	jne    0x205
  001f2:    	cmp    esi,0x6
  001f5:    	jge    0x205
  001fb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00200:    	jmp    0x223
  00205:    	sub    rsp,0x10
  00209:    	movq   QWORD PTR [rsp],xmm2
  0020e: 00 	movabs rax,0x5600b755dfe0
  00218:    	call   rax
  0021a:    	movq   xmm2,QWORD PTR [rsp]
  0021f:    	add    rsp,0x10
  00223:    	mov    QWORD PTR [rbp-0x60],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  00227:    	mov    rdi,QWORD PTR [rbp-0x28]
  0022b:    	mov    rax,QWORD PTR [rdi+0x18]
  0022f:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  00233:    	mov    rdi,QWORD PTR [rbp-0x60]
  00237: 00 	test   rdi,0x7
  0023e:    	jne    0x33bed
  00244:    	cmp    DWORD PTR [rdi+0x4],0x28
  00248:    	jne    0x33bed
  0024e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7e96],0x26        # 0xfffe80eb
  00255:    	jne    0x33bed
  0025b:    	sub    rsp,0x10
  0025f:    	movq   QWORD PTR [rsp],xmm2
  00264:    	mov    rax,QWORD PTR [rbx]
  00267:    	lea    rdi,[rsp-0x18]
  0026c:    	mov    QWORD PTR [rdi],rax
  0026f:    	mov    QWORD PTR [rbx],rdi
  00272: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0027b:    	mov    QWORD PTR [rsp-0x38],rcx
  00280:    	mov    rax,QWORD PTR [rbp-0x60]
  00284:    	mov    QWORD PTR [rsp-0x38],rax
  00289: 00 	mov    rdi,0x1
  00290:    	mov    rax,QWORD PTR [rbp-0x68]
  00294:    	mov    QWORD PTR [rsp-0x40],rax
  00299: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002a2: 05 	movabs rax,0x1000500000041
  002ac:    	mov    QWORD PTR [rsp-0x28],rax
  002b1: 00 	movabs r13,0x5600b92d48b0
  002bb:    	call   0xfffe8e3e
  002c0:    	lea    rdi,[rbp-0x8]
  002c4:    	mov    QWORD PTR [rbx],rdi
  002c7:    	movq   xmm2,QWORD PTR [rsp]
  002cc:    	add    rsp,0x10
  002d0: 00 	movabs r13,0x5600b92b72d0
  002da:    	test   rax,rax
  002dd:    	je     0xfffe55c3
  002e3:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %5 = %4
  002e7:    	mov    rax,QWORD PTR [rbp-0x48]
  002eb:    	mov    QWORD PTR [rbp-0x50],rax
:00015 %7 = literal[0.0]
  002ef: 00 	movq   xmm3,QWORD PTR [rip+0x1731]        # 0x1a28
  002f7: 00 	movabs rax,0x8000000000000002
  00301:    	mov    QWORD PTR [rbp-0x60],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  00305:    	mov    rdi,QWORD PTR [rbp-0x48]
  00309: 00 	test   rdi,0x1
  00310:    	jne    0x33c09
  00316: 00 	test   rdi,0x2
  0031d:    	je     0x359
  00323:    	xorps  xmm4,xmm4
  00326: 00 	movabs rax,0x8000000000000002
  00330:    	cmp    rdi,rax
  00333:    	je     0x36b
  00339:    	mov    rax,rdi
  0033c:    	sar    rax,0x3f
  00340:    	add    rax,0x2
  00344:    	and    rdi,0xfffffffffffffffc
  00348:    	or     rdi,rax
  0034b:    	rol    rdi,0x3d
  0034f:    	movq   xmm4,rdi
  00354:    	jmp    0x36b
  00359:    	call   0xfffe55fc
  0035e:    	test   rax,rax
  00361:    	je     0x33c09
  00367:    	movq   xmm4,xmm0
  0036b:    	ucomisd xmm4,xmm3
  0036f:    	jae    0x33c70
:00018 %5 = %4
:00019 %5 = neg %5                          [<INVALID>]
  00375: 01 	sub    DWORD PTR [rip+0x16b4],0x1        # 0x1a30
  0037c:    	je     0x33c4e
  00382:    	movq   xmm0,xmm4
  00386:    	call   0xfffe56ef
  0038b:    	mov    QWORD PTR [rbp-0x50],rax
  0038f:    	sub    rsp,0x20
  00393:    	movq   QWORD PTR [rsp],xmm2
  00398:    	movq   QWORD PTR [rsp+0x8],xmm3
  0039e:    	movq   QWORD PTR [rsp+0x10],xmm4
  003a4:    	mov    rdi,QWORD PTR [rbp-0x50]
  003a8:    	mov    rdx,rdi
  003ab:    	mov    rdi,rbx
  003ae:    	mov    rsi,r12
  003b1: 00 	movabs rax,0x5600b7596530
  003bb:    	call   rax
  003bd:    	movq   xmm2,QWORD PTR [rsp]
  003c2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003c8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003ce:    	add    rsp,0x20
  003d2: 00 	movabs r13,0x5600b92b7340
  003dc:    	test   rax,rax
  003df:    	je     0xfffe55c3
  003e5:    	mov    QWORD PTR [rbp-0x50],rax
:00020 br =>:00021
  003e9:    	jmp    0x33c96
:00021 %7 = literal[1e-17]
  003ee: 00 	movq   xmm3,QWORD PTR [rip+0x1642]        # 0x1a38
  003f6: aa 	movabs rax,0xe33877aa3236a4ba
  00400:    	mov    QWORD PTR [rbp-0x60],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  00404:    	mov    rdi,QWORD PTR [rbp-0x50]
  00408: 00 	test   rdi,0x1
  0040f:    	jne    0x33cbc
  00415: 00 	test   rdi,0x2
  0041c:    	je     0x458
  00422:    	xorps  xmm5,xmm5
  00425: 00 	movabs rax,0x8000000000000002
  0042f:    	cmp    rdi,rax
  00432:    	je     0x46a
  00438:    	mov    rax,rdi
  0043b:    	sar    rax,0x3f
  0043f:    	add    rax,0x2
  00443:    	and    rdi,0xfffffffffffffffc
  00447:    	or     rdi,rax
  0044a:    	rol    rdi,0x3d
  0044e:    	movq   xmm5,rdi
  00453:    	jmp    0x46a
  00458:    	call   0xfffe55fc
  0045d:    	test   rax,rax
  00460:    	je     0x33cbc
  00466:    	movq   xmm5,xmm0
  0046a:    	ucomisd xmm5,xmm3
  0046e:    	jae    0x482
:00024 %7 = nil
  00474: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00025 ret %7
  0047c:    	mov    rax,QWORD PTR [rbp-0x60]
  00480:    	leave  
  00481:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  00482:    	mov    rdi,QWORD PTR [rbp-0x30]
  00486: 00 	test   rdi,0x7
  0048d:    	jne    0x33cd8
  00493:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00497:    	jne    0x33cd8
  0049d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7c47],0x26        # 0xfffe80eb
  004a4:    	jne    0x33cd8
  004aa:    	mov    esi,DWORD PTR [rip+0x1594]        # 0x1a44
  004b0:    	cmp    esi,0xffffffff
  004b3:    	je     0x33cf4
  004b9:    	cmp    WORD PTR [rdi+0x2],0x3
  004be:    	jne    0x4d7
  004c4:    	cmp    esi,0x6
  004c7:    	jge    0x4d7
  004cd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004d2:    	jmp    0x519
  004d7:    	sub    rsp,0x20
  004db:    	movq   QWORD PTR [rsp],xmm2
  004e0:    	movq   QWORD PTR [rsp+0x8],xmm3
  004e6:    	movq   QWORD PTR [rsp+0x10],xmm4
  004ec:    	movq   QWORD PTR [rsp+0x18],xmm5
  004f2: 00 	movabs rax,0x5600b755dfe0
  004fc:    	call   rax
  004fe:    	movq   xmm2,QWORD PTR [rsp]
  00503:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00509:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0050f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00515:    	add    rsp,0x20
  00519:    	mov    QWORD PTR [rbp-0x68],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  0051d:    	mov    rdi,QWORD PTR [rbp-0x28]
  00521:    	mov    rax,QWORD PTR [rdi+0x18]
  00525:    	mov    QWORD PTR [rbp-0x70],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  00529:    	mov    rdi,QWORD PTR [rbp-0x68]
  0052d: 00 	test   rdi,0x7
  00534:    	jne    0x33d53
  0053a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0053e:    	jne    0x33d53
  00544: 26 	cmp    DWORD PTR [rip+0xfffffffffffe7ba0],0x26        # 0xfffe80eb
  0054b:    	jne    0x33d53
  00551:    	sub    rsp,0x20
  00555:    	movq   QWORD PTR [rsp],xmm2
  0055a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00560:    	movq   QWORD PTR [rsp+0x10],xmm5
  00566:    	mov    rax,QWORD PTR [rbx]
  00569:    	lea    rdi,[rsp-0x18]
  0056e:    	mov    QWORD PTR [rdi],rax
  00571:    	mov    QWORD PTR [rbx],rdi
  00574: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0057d:    	mov    QWORD PTR [rsp-0x38],rcx
  00582:    	mov    rax,QWORD PTR [rbp-0x68]
  00586:    	mov    QWORD PTR [rsp-0x38],rax
  0058b: 00 	mov    rdi,0x1
  00592:    	mov    rax,QWORD PTR [rbp-0x70]
  00596:    	mov    QWORD PTR [rsp-0x40],rax
  0059b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  005a4: 05 	movabs rax,0x1000500000041
  005ae:    	mov    QWORD PTR [rsp-0x28],rax
  005b3: 00 	movabs r13,0x5600b92d48b0
  005bd:    	call   0xfffe8e3e
  005c2:    	lea    rdi,[rbp-0x8]
  005c6:    	mov    QWORD PTR [rbx],rdi
  005c9:    	movq   xmm2,QWORD PTR [rsp]
  005ce:    	movq   xmm4,QWORD PTR [rsp+0x8]
  005d4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005da:    	add    rsp,0x20
  005de: 00 	movabs r13,0x5600b92b7410
  005e8:    	test   rax,rax
  005eb:    	je     0xfffe55c3
  005f1:    	mov    QWORD PTR [rbp-0x60],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  005f5:    	mov    rdi,QWORD PTR [rbp-0x60]
  005f9: 00 	test   rdi,0x1
  00600:    	jne    0x33d6f
  00606: 00 	test   rdi,0x2
  0060d:    	je     0x649
  00613:    	xorps  xmm3,xmm3
  00616: 00 	movabs rax,0x8000000000000002
  00620:    	cmp    rdi,rax
  00623:    	je     0x65b
  00629:    	mov    rax,rdi
  0062c:    	sar    rax,0x3f
  00630:    	add    rax,0x2
  00634:    	and    rdi,0xfffffffffffffffc
  00638:    	or     rdi,rax
  0063b:    	rol    rdi,0x3d
  0063f:    	movq   xmm3,rdi
  00644:    	jmp    0x65b
  00649:    	call   0xfffe55fc
  0064e:    	test   rax,rax
  00651:    	je     0x33d6f
  00657:    	movq   xmm3,xmm0
  0065b:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  0065f: 00 	xorps  xmm3,XMMWORD PTR [rip+0x13e2]        # 0x1a48
:00036 %6 = %7 / %4                         [Float][Float]
  00666:    	movq   xmm6,xmm3
  0066a:    	movq   rax,xmm4
  0066f:    	test   rax,rax
  00672:    	je     0xfffe55e8
  00678:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  0067c: 00 	movq   xmm3,QWORD PTR [rip+0x13d4]        # 0x1a58
  00684: 00 	movabs rax,0x8000000000000002
  0068e:    	mov    QWORD PTR [rbp-0x60],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  00692:    	ucomisd xmm6,xmm3
  00696:    	jbe    0x34ce8
:00040 %7 = %2.call t()                     [<INVALID>]
  0069c: 01 	sub    DWORD PTR [rip+0x13bd],0x1        # 0x1a60
  006a3:    	je     0x33db4
  006a9:    	sub    rsp,0x20
  006ad:    	movq   QWORD PTR [rsp],xmm2
  006b2:    	movq   QWORD PTR [rsp+0x8],xmm4
  006b8:    	movq   QWORD PTR [rsp+0x10],xmm5
  006be:    	movq   QWORD PTR [rsp+0x18],xmm6
  006c4:    	mov    rdi,QWORD PTR [rbp-0x38]
  006c8: 00 	movabs rax,0x5600b75a2280
  006d2:    	call   rax
  006d4:    	mov    r15d,eax
  006d7: 00 	cmp    r15d,DWORD PTR [rip+0x138a]        # 0x1a68
  006de:    	jne    0x33dd6
  006e4:    	mov    eax,DWORD PTR [rip+0xfffffffffffe7a01]        # 0xfffe80eb
  006ea:    	cmp    DWORD PTR [rip+0x1374],eax        # 0x1a64
  006f0:    	jne    0x33dd6
  006f6:    	mov    rax,QWORD PTR [rbx]
  006f9:    	lea    rdi,[rsp-0x18]
  006fe:    	mov    QWORD PTR [rdi],rax
  00701:    	mov    QWORD PTR [rbx],rdi
  00704: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0070d:    	mov    QWORD PTR [rsp-0x38],rcx
  00712:    	mov    rax,QWORD PTR [rbp-0x38]
  00716:    	mov    QWORD PTR [rsp-0x38],rax
  0071b: 00 	mov    rdi,0x0
  00722: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0072b: 00 	movabs rax,0x0
  00735:    	mov    QWORD PTR [rsp-0x28],rax
  0073a: 00 	movabs r13,0x0
  00744:    	call   0xfffe5588
  00749:    	lea    rdi,[rbp-0x8]
  0074d:    	mov    QWORD PTR [rbx],rdi
  00750:    	movq   xmm2,QWORD PTR [rsp]
  00755:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0075b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00761:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00767:    	add    rsp,0x20
  0076b:    	test   rax,rax
  0076e:    	je     0x33e42
  00774:    	mov    QWORD PTR [rbp-0x60],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  00778:    	movq   xmm0,xmm6
  0077c:    	call   0xfffe56ef
  00781:    	mov    QWORD PTR [rbp-0x58],rax
  00785:    	mov    rdi,QWORD PTR [rbp-0x58]
  00789:    	mov    rsi,QWORD PTR [rbp-0x60]
  0078d: 00 	test   rdi,0x1
  00794:    	je     0x33e51
  0079a: 00 	test   rsi,0x1
  007a1:    	je     0x33e51
  007a7:    	cmp    rdi,rsi
  007aa:    	jge    0x34d1b
:00045 %7 = literal[true]
  007b0: 00 	mov    rax,0x1c
  007b7:    	mov    QWORD PTR [rbp-0x60],rax
:00046 _ = %2.call hit=(%7; 1)              [<INVALID>]
  007bb: 01 	sub    DWORD PTR [rip+0x12aa],0x1        # 0x1a6c
  007c2:    	je     0x33ec2
  007c8:    	sub    rsp,0x20
  007cc:    	movq   QWORD PTR [rsp],xmm2
  007d1:    	movq   QWORD PTR [rsp+0x8],xmm4
  007d7:    	movq   QWORD PTR [rsp+0x10],xmm5
  007dd:    	movq   QWORD PTR [rsp+0x18],xmm6
  007e3:    	mov    rdi,QWORD PTR [rbp-0x38]
  007e7: 00 	movabs rax,0x5600b75a2280
  007f1:    	call   rax
  007f3:    	mov    r15d,eax
  007f6: 00 	cmp    r15d,DWORD PTR [rip+0x1277]        # 0x1a74
  007fd:    	jne    0x33ee4
  00803:    	mov    eax,DWORD PTR [rip+0xfffffffffffe78e2]        # 0xfffe80eb
  00809:    	cmp    DWORD PTR [rip+0x1261],eax        # 0x1a70
  0080f:    	jne    0x33ee4
  00815:    	mov    rax,QWORD PTR [rbx]
  00818:    	lea    rdi,[rsp-0x18]
  0081d:    	mov    QWORD PTR [rdi],rax
  00820:    	mov    QWORD PTR [rbx],rdi
  00823: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0082c:    	mov    QWORD PTR [rsp-0x38],rcx
  00831:    	mov    rax,QWORD PTR [rbp-0x38]
  00835:    	mov    QWORD PTR [rsp-0x38],rax
  0083a: 00 	mov    rdi,0x1
  00841:    	mov    rax,QWORD PTR [rbp-0x60]
  00845:    	mov    QWORD PTR [rsp-0x40],rax
  0084a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00853: 00 	movabs rax,0x0
  0085d:    	mov    QWORD PTR [rsp-0x28],rax
  00862: 00 	movabs r13,0x0
  0086c:    	call   0xfffe5588
  00871:    	lea    rdi,[rbp-0x8]
  00875:    	mov    QWORD PTR [rbx],rdi
  00878:    	movq   xmm2,QWORD PTR [rsp]
  0087d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00883:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00889:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0088f:    	add    rsp,0x20
  00893:    	test   rax,rax
  00896:    	je     0x33f50
:00047 
:00049 _ = %2.call t=(%6; 1)                [<INVALID>]
  0089c: 01 	sub    DWORD PTR [rip+0x11d5],0x1        # 0x1a78
  008a3:    	je     0x33f7b
  008a9:    	sub    rsp,0x20
  008ad:    	movq   QWORD PTR [rsp],xmm2
  008b2:    	movq   QWORD PTR [rsp+0x8],xmm4
  008b8:    	movq   QWORD PTR [rsp+0x10],xmm5
  008be:    	movq   QWORD PTR [rsp+0x18],xmm6
  008c4:    	mov    rdi,QWORD PTR [rbp-0x38]
  008c8: 00 	movabs rax,0x5600b75a2280
  008d2:    	call   rax
  008d4:    	mov    r15d,eax
  008d7: 00 	cmp    r15d,DWORD PTR [rip+0x11a2]        # 0x1a80
  008de:    	jne    0x33f9d
  008e4:    	mov    eax,DWORD PTR [rip+0xfffffffffffe7801]        # 0xfffe80eb
  008ea:    	cmp    DWORD PTR [rip+0x118c],eax        # 0x1a7c
  008f0:    	jne    0x33f9d
  008f6:    	mov    rax,QWORD PTR [rbx]
  008f9:    	lea    rdi,[rsp-0x18]
  008fe:    	mov    QWORD PTR [rdi],rax
  00901:    	mov    QWORD PTR [rbx],rdi
  00904: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0090d:    	mov    QWORD PTR [rsp-0x38],rcx
  00912:    	mov    rax,QWORD PTR [rbp-0x38]
  00916:    	mov    QWORD PTR [rsp-0x38],rax
  0091b: 00 	mov    rdi,0x1
  00922:    	mov    rax,QWORD PTR [rbp-0x58]
  00926:    	mov    QWORD PTR [rsp-0x40],rax
  0092b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00934: 00 	movabs rax,0x0
  0093e:    	mov    QWORD PTR [rsp-0x28],rax
  00943: 00 	movabs r13,0x0
  0094d:    	call   0xfffe5588
  00952:    	lea    rdi,[rbp-0x8]
  00956:    	mov    QWORD PTR [rbx],rdi
  00959:    	movq   xmm2,QWORD PTR [rsp]
  0095e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00964:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0096a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00970:    	add    rsp,0x20
  00974:    	test   rax,rax
  00977:    	je     0x34009
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  0097d:    	mov    rdi,QWORD PTR [rbp-0x28]
  00981:    	sub    rsp,0x20
  00985:    	movq   QWORD PTR [rsp],xmm2
  0098a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00990:    	movq   QWORD PTR [rsp+0x10],xmm5
  00996:    	movq   QWORD PTR [rsp+0x18],xmm6
  0099c: 00 	mov    rsi,0x8c
  009a3:    	mov    rdx,r12
  009a6: 00 	movabs rax,0x5600b75c5460
  009b0:    	call   rax
  009b2:    	movq   xmm2,QWORD PTR [rsp]
  009b7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009bd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009c3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009c9:    	add    rsp,0x20
  009cd:    	mov    QWORD PTR [rbp-0x60],rax
:00053 _ = %2.call n=(%7; 1)                [<INVALID>]
  009d1: 01 	sub    DWORD PTR [rip+0x10ac],0x1        # 0x1a84
  009d8:    	je     0x34034
  009de:    	sub    rsp,0x20
  009e2:    	movq   QWORD PTR [rsp],xmm2
  009e7:    	movq   QWORD PTR [rsp+0x8],xmm4
  009ed:    	movq   QWORD PTR [rsp+0x10],xmm5
  009f3:    	movq   QWORD PTR [rsp+0x18],xmm6
  009f9:    	mov    rdi,QWORD PTR [rbp-0x38]
  009fd: 00 	movabs rax,0x5600b75a2280
  00a07:    	call   rax
  00a09:    	mov    r15d,eax
  00a0c: 00 	cmp    r15d,DWORD PTR [rip+0x1079]        # 0x1a8c
  00a13:    	jne    0x34056
  00a19:    	mov    eax,DWORD PTR [rip+0xfffffffffffe76cc]        # 0xfffe80eb
  00a1f:    	cmp    DWORD PTR [rip+0x1063],eax        # 0x1a88
  00a25:    	jne    0x34056
  00a2b:    	mov    rax,QWORD PTR [rbx]
  00a2e:    	lea    rdi,[rsp-0x18]
  00a33:    	mov    QWORD PTR [rdi],rax
  00a36:    	mov    QWORD PTR [rbx],rdi
  00a39: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a42:    	mov    QWORD PTR [rsp-0x38],rcx
  00a47:    	mov    rax,QWORD PTR [rbp-0x38]
  00a4b:    	mov    QWORD PTR [rsp-0x38],rax
  00a50: 00 	mov    rdi,0x1
  00a57:    	mov    rax,QWORD PTR [rbp-0x60]
  00a5b:    	mov    QWORD PTR [rsp-0x40],rax
  00a60: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a69: 00 	movabs rax,0x0
  00a73:    	mov    QWORD PTR [rsp-0x28],rax
  00a78: 00 	movabs r13,0x0
  00a82:    	call   0xfffe5588
  00a87:    	lea    rdi,[rbp-0x8]
  00a8b:    	mov    QWORD PTR [rbx],rdi
  00a8e:    	movq   xmm2,QWORD PTR [rsp]
  00a93:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a99:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a9f:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00aa5:    	add    rsp,0x20
  00aa9:    	test   rax,rax
  00aac:    	je     0x340c2
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00ab2: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe763f]        # 0xfffe80f8
  00ab9: 00 	cmp    rax,QWORD PTR [rip+0xfe8]        # 0x1aa8
  00ac0:    	jne    0x340d1
  00ac6: 00 	mov    rax,QWORD PTR [rip+0xfcb]        # 0x1a98
  00acd:    	mov    QWORD PTR [rbp-0x68],rax
:00057 %10 = %1.call org()                  [<INVALID>]
  00ad1: 01 	sub    DWORD PTR [rip+0xfd8],0x1        # 0x1ab0
  00ad8:    	je     0x34169
  00ade:    	sub    rsp,0x20
  00ae2:    	movq   QWORD PTR [rsp],xmm2
  00ae7:    	movq   QWORD PTR [rsp+0x8],xmm4
  00aed:    	movq   QWORD PTR [rsp+0x10],xmm5
  00af3:    	movq   QWORD PTR [rsp+0x18],xmm6
  00af9:    	mov    rdi,QWORD PTR [rbp-0x30]
  00afd: 00 	movabs rax,0x5600b75a2280
  00b07:    	call   rax
  00b09:    	mov    r15d,eax
  00b0c: 00 	cmp    r15d,DWORD PTR [rip+0xfa5]        # 0x1ab8
  00b13:    	jne    0x3418b
  00b19:    	mov    eax,DWORD PTR [rip+0xfffffffffffe75cc]        # 0xfffe80eb
  00b1f:    	cmp    DWORD PTR [rip+0xf8f],eax        # 0x1ab4
  00b25:    	jne    0x3418b
  00b2b:    	mov    rax,QWORD PTR [rbx]
  00b2e:    	lea    rdi,[rsp-0x18]
  00b33:    	mov    QWORD PTR [rdi],rax
  00b36:    	mov    QWORD PTR [rbx],rdi
  00b39: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b42:    	mov    QWORD PTR [rsp-0x38],rcx
  00b47:    	mov    rax,QWORD PTR [rbp-0x30]
  00b4b:    	mov    QWORD PTR [rsp-0x38],rax
  00b50: 00 	mov    rdi,0x0
  00b57: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b60: 00 	movabs rax,0x0
  00b6a:    	mov    QWORD PTR [rsp-0x28],rax
  00b6f: 00 	movabs r13,0x0
  00b79:    	call   0xfffe5588
  00b7e:    	lea    rdi,[rbp-0x8]
  00b82:    	mov    QWORD PTR [rbx],rdi
  00b85:    	movq   xmm2,QWORD PTR [rsp]
  00b8a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b90:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b96:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b9c:    	add    rsp,0x20
  00ba0:    	test   rax,rax
  00ba3:    	je     0x341f7
  00ba9:    	mov    QWORD PTR [rbp-0x78],rax
:00058 
:00060 %9 = %10.call x()                    [<INVALID>]
  00bad: 01 	sub    DWORD PTR [rip+0xf08],0x1        # 0x1abc
  00bb4:    	je     0x34222
  00bba:    	sub    rsp,0x20
  00bbe:    	movq   QWORD PTR [rsp],xmm2
  00bc3:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bc9:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bcf:    	movq   QWORD PTR [rsp+0x18],xmm6
  00bd5:    	mov    rdi,QWORD PTR [rbp-0x78]
  00bd9: 00 	movabs rax,0x5600b75a2280
  00be3:    	call   rax
  00be5:    	mov    r15d,eax
  00be8: 00 	cmp    r15d,DWORD PTR [rip+0xed5]        # 0x1ac4
  00bef:    	jne    0x34244
  00bf5:    	mov    eax,DWORD PTR [rip+0xfffffffffffe74f0]        # 0xfffe80eb
  00bfb:    	cmp    DWORD PTR [rip+0xebf],eax        # 0x1ac0
  00c01:    	jne    0x34244
  00c07:    	mov    rax,QWORD PTR [rbx]
  00c0a:    	lea    rdi,[rsp-0x18]
  00c0f:    	mov    QWORD PTR [rdi],rax
  00c12:    	mov    QWORD PTR [rbx],rdi
  00c15: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c1e:    	mov    QWORD PTR [rsp-0x38],rcx
  00c23:    	mov    rax,QWORD PTR [rbp-0x78]
  00c27:    	mov    QWORD PTR [rsp-0x38],rax
  00c2c: 00 	mov    rdi,0x0
  00c33: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c3c: 00 	movabs rax,0x0
  00c46:    	mov    QWORD PTR [rsp-0x28],rax
  00c4b: 00 	movabs r13,0x0
  00c55:    	call   0xfffe5588
  00c5a:    	lea    rdi,[rbp-0x8]
  00c5e:    	mov    QWORD PTR [rbx],rdi
  00c61:    	movq   xmm2,QWORD PTR [rsp]
  00c66:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c6c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c72:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c78:    	add    rsp,0x20
  00c7c:    	test   rax,rax
  00c7f:    	je     0x342b0
  00c85:    	mov    QWORD PTR [rbp-0x70],rax
:00061 
:00063 %11 = %1.call dir()                  [<INVALID>]
  00c89: 01 	sub    DWORD PTR [rip+0xe38],0x1        # 0x1ac8
  00c90:    	je     0x342db
  00c96:    	sub    rsp,0x20
  00c9a:    	movq   QWORD PTR [rsp],xmm2
  00c9f:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ca5:    	movq   QWORD PTR [rsp+0x10],xmm5
  00cab:    	movq   QWORD PTR [rsp+0x18],xmm6
  00cb1:    	mov    rdi,QWORD PTR [rbp-0x30]
  00cb5: 00 	movabs rax,0x5600b75a2280
  00cbf:    	call   rax
  00cc1:    	mov    r15d,eax
  00cc4: 00 	cmp    r15d,DWORD PTR [rip+0xe05]        # 0x1ad0
  00ccb:    	jne    0x342fd
  00cd1:    	mov    eax,DWORD PTR [rip+0xfffffffffffe7414]        # 0xfffe80eb
  00cd7:    	cmp    DWORD PTR [rip+0xdef],eax        # 0x1acc
  00cdd:    	jne    0x342fd
  00ce3:    	mov    rax,QWORD PTR [rbx]
  00ce6:    	lea    rdi,[rsp-0x18]
  00ceb:    	mov    QWORD PTR [rdi],rax
  00cee:    	mov    QWORD PTR [rbx],rdi
  00cf1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cfa:    	mov    QWORD PTR [rsp-0x38],rcx
  00cff:    	mov    rax,QWORD PTR [rbp-0x30]
  00d03:    	mov    QWORD PTR [rsp-0x38],rax
  00d08: 00 	mov    rdi,0x0
  00d0f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d18: 00 	movabs rax,0x0
  00d22:    	mov    QWORD PTR [rsp-0x28],rax
  00d27: 00 	movabs r13,0x0
  00d31:    	call   0xfffe5588
  00d36:    	lea    rdi,[rbp-0x8]
  00d3a:    	mov    QWORD PTR [rbx],rdi
  00d3d:    	movq   xmm2,QWORD PTR [rsp]
  00d42:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d48:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d4e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d54:    	add    rsp,0x20
  00d58:    	test   rax,rax
  00d5b:    	je     0x34369
  00d61:    	mov    QWORD PTR [rbp-0x80],rax
:00064 
:00066 %10 = %11.call x()                   [<INVALID>]
  00d65: 01 	sub    DWORD PTR [rip+0xd68],0x1        # 0x1ad4
  00d6c:    	je     0x34394
  00d72:    	sub    rsp,0x20
  00d76:    	movq   QWORD PTR [rsp],xmm2
  00d7b:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d81:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d87:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d8d:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d91: 00 	movabs rax,0x5600b75a2280
  00d9b:    	call   rax
  00d9d:    	mov    r15d,eax
  00da0: 00 	cmp    r15d,DWORD PTR [rip+0xd35]        # 0x1adc
  00da7:    	jne    0x343b6
  00dad:    	mov    eax,DWORD PTR [rip+0xfffffffffffe7338]        # 0xfffe80eb
  00db3:    	cmp    DWORD PTR [rip+0xd1f],eax        # 0x1ad8
  00db9:    	jne    0x343b6
  00dbf:    	mov    rax,QWORD PTR [rbx]
  00dc2:    	lea    rdi,[rsp-0x18]
  00dc7:    	mov    QWORD PTR [rdi],rax
  00dca:    	mov    QWORD PTR [rbx],rdi
  00dcd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00dd6:    	mov    QWORD PTR [rsp-0x38],rcx
  00ddb:    	mov    rax,QWORD PTR [rbp-0x80]
  00ddf:    	mov    QWORD PTR [rsp-0x38],rax
  00de4: 00 	mov    rdi,0x0
  00deb: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00df4: 00 	movabs rax,0x0
  00dfe:    	mov    QWORD PTR [rsp-0x28],rax
  00e03: 00 	movabs r13,0x0
  00e0d:    	call   0xfffe5588
  00e12:    	lea    rdi,[rbp-0x8]
  00e16:    	mov    QWORD PTR [rbx],rdi
  00e19:    	movq   xmm2,QWORD PTR [rsp]
  00e1e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e24:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e2a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e30:    	add    rsp,0x20
  00e34:    	test   rax,rax
  00e37:    	je     0x34422
  00e3d:    	mov    QWORD PTR [rbp-0x78],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00e41: 01 	sub    DWORD PTR [rip+0xc98],0x1        # 0x1ae0
  00e48:    	je     0x3444d
  00e4e:    	mov    rdi,QWORD PTR [rbp-0x58]
  00e52:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e56:    	sub    rsp,0x20
  00e5a:    	movq   QWORD PTR [rsp],xmm2
  00e5f:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e65:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e6b:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e71:    	mov    rdx,rdi
  00e74:    	mov    rcx,rsi
  00e77:    	mov    rdi,rbx
  00e7a:    	mov    rsi,r12
  00e7d: 00 	movabs rax,0x5600b7598f60
  00e87:    	call   rax
  00e89:    	movq   xmm2,QWORD PTR [rsp]
  00e8e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e94:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e9a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ea0:    	add    rsp,0x20
  00ea4: 00 	movabs r13,0x5600b92b7660
  00eae:    	test   rax,rax
  00eb1:    	je     0xfffe55c3
  00eb7:    	mov    QWORD PTR [rbp-0x78],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00ebb: 01 	sub    DWORD PTR [rip+0xc22],0x1        # 0x1ae4
  00ec2:    	je     0x3448b
  00ec8:    	mov    rdi,QWORD PTR [rbp-0x70]
  00ecc:    	mov    rsi,QWORD PTR [rbp-0x78]
  00ed0:    	sub    rsp,0x20
  00ed4:    	movq   QWORD PTR [rsp],xmm2
  00ed9:    	movq   QWORD PTR [rsp+0x8],xmm4
  00edf:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ee5:    	movq   QWORD PTR [rsp+0x18],xmm6
  00eeb:    	mov    rdx,rdi
  00eee:    	mov    rcx,rsi
  00ef1:    	mov    rdi,rbx
  00ef4:    	mov    rsi,r12
  00ef7: 00 	movabs rax,0x5600b75970e0
  00f01:    	call   rax
  00f03:    	movq   xmm2,QWORD PTR [rsp]
  00f08:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f0e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f14:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f1a:    	add    rsp,0x20
  00f1e: 00 	movabs r13,0x5600b92b7670
  00f28:    	test   rax,rax
  00f2b:    	je     0xfffe55c3
  00f31:    	mov    QWORD PTR [rbp-0x70],rax
:00071 %11 = %1.call org()                  [<INVALID>]
  00f35: 01 	sub    DWORD PTR [rip+0xbac],0x1        # 0x1ae8
  00f3c:    	je     0x344c9
  00f42:    	sub    rsp,0x20
  00f46:    	movq   QWORD PTR [rsp],xmm2
  00f4b:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f51:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f57:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f5d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f61: 00 	movabs rax,0x5600b75a2280
  00f6b:    	call   rax
  00f6d:    	mov    r15d,eax
  00f70: 00 	cmp    r15d,DWORD PTR [rip+0xb79]        # 0x1af0
  00f77:    	jne    0x344eb
  00f7d:    	mov    eax,DWORD PTR [rip+0xfffffffffffe7168]        # 0xfffe80eb
  00f83:    	cmp    DWORD PTR [rip+0xb63],eax        # 0x1aec
  00f89:    	jne    0x344eb
  00f8f:    	mov    rax,QWORD PTR [rbx]
  00f92:    	lea    rdi,[rsp-0x18]
  00f97:    	mov    QWORD PTR [rdi],rax
  00f9a:    	mov    QWORD PTR [rbx],rdi
  00f9d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fa6:    	mov    QWORD PTR [rsp-0x38],rcx
  00fab:    	mov    rax,QWORD PTR [rbp-0x30]
  00faf:    	mov    QWORD PTR [rsp-0x38],rax
  00fb4: 00 	mov    rdi,0x0
  00fbb: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fc4: 00 	movabs rax,0x0
  00fce:    	mov    QWORD PTR [rsp-0x28],rax
  00fd3: 00 	movabs r13,0x0
  00fdd:    	call   0xfffe5588
  00fe2:    	lea    rdi,[rbp-0x8]
  00fe6:    	mov    QWORD PTR [rbx],rdi
  00fe9:    	movq   xmm2,QWORD PTR [rsp]
  00fee:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ff4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ffa:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01000:    	add    rsp,0x20
  01004:    	test   rax,rax
  01007:    	je     0x34557
  0100d:    	mov    QWORD PTR [rbp-0x80],rax
:00072 
:00074 %10 = %11.call y()                   [<INVALID>]
  01011: 01 	sub    DWORD PTR [rip+0xadc],0x1        # 0x1af4
  01018:    	je     0x34582
  0101e:    	sub    rsp,0x20
  01022:    	movq   QWORD PTR [rsp],xmm2
  01027:    	movq   QWORD PTR [rsp+0x8],xmm4
  0102d:    	movq   QWORD PTR [rsp+0x10],xmm5
  01033:    	movq   QWORD PTR [rsp+0x18],xmm6
  01039:    	mov    rdi,QWORD PTR [rbp-0x80]
  0103d: 00 	movabs rax,0x5600b75a2280
  01047:    	call   rax
  01049:    	mov    r15d,eax
  0104c: 00 	cmp    r15d,DWORD PTR [rip+0xaa9]        # 0x1afc
  01053:    	jne    0x345a4
  01059:    	mov    eax,DWORD PTR [rip+0xfffffffffffe708c]        # 0xfffe80eb
  0105f:    	cmp    DWORD PTR [rip+0xa93],eax        # 0x1af8
  01065:    	jne    0x345a4
  0106b:    	mov    rax,QWORD PTR [rbx]
  0106e:    	lea    rdi,[rsp-0x18]
  01073:    	mov    QWORD PTR [rdi],rax
  01076:    	mov    QWORD PTR [rbx],rdi
  01079: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01082:    	mov    QWORD PTR [rsp-0x38],rcx
  01087:    	mov    rax,QWORD PTR [rbp-0x80]
  0108b:    	mov    QWORD PTR [rsp-0x38],rax
  01090: 00 	mov    rdi,0x0
  01097: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010a0: 00 	movabs rax,0x0
  010aa:    	mov    QWORD PTR [rsp-0x28],rax
  010af: 00 	movabs r13,0x0
  010b9:    	call   0xfffe5588
  010be:    	lea    rdi,[rbp-0x8]
  010c2:    	mov    QWORD PTR [rbx],rdi
  010c5:    	movq   xmm2,QWORD PTR [rsp]
  010ca:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010d0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010d6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010dc:    	add    rsp,0x20
  010e0:    	test   rax,rax
  010e3:    	je     0x34610
  010e9:    	mov    QWORD PTR [rbp-0x78],rax
:00075 
:00077 %12 = %1.call dir()                  [<INVALID>]
  010ed: 01 	sub    DWORD PTR [rip+0xa0c],0x1        # 0x1b00
  010f4:    	je     0x3463b
  010fa:    	sub    rsp,0x20
  010fe:    	movq   QWORD PTR [rsp],xmm2
  01103:    	movq   QWORD PTR [rsp+0x8],xmm4
  01109:    	movq   QWORD PTR [rsp+0x10],xmm5
  0110f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01115:    	mov    rdi,QWORD PTR [rbp-0x30]
  01119: 00 	movabs rax,0x5600b75a2280
  01123:    	call   rax
  01125:    	mov    r15d,eax
  01128: 00 	cmp    r15d,DWORD PTR [rip+0x9d9]        # 0x1b08
  0112f:    	jne    0x3465d
  01135:    	mov    eax,DWORD PTR [rip+0xfffffffffffe6fb0]        # 0xfffe80eb
  0113b:    	cmp    DWORD PTR [rip+0x9c3],eax        # 0x1b04
  01141:    	jne    0x3465d
  01147:    	mov    rax,QWORD PTR [rbx]
  0114a:    	lea    rdi,[rsp-0x18]
  0114f:    	mov    QWORD PTR [rdi],rax
  01152:    	mov    QWORD PTR [rbx],rdi
  01155: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0115e:    	mov    QWORD PTR [rsp-0x38],rcx
  01163:    	mov    rax,QWORD PTR [rbp-0x30]
  01167:    	mov    QWORD PTR [rsp-0x38],rax
  0116c: 00 	mov    rdi,0x0
  01173: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0117c: 00 	movabs rax,0x0
  01186:    	mov    QWORD PTR [rsp-0x28],rax
  0118b: 00 	movabs r13,0x0
  01195:    	call   0xfffe5588
  0119a:    	lea    rdi,[rbp-0x8]
  0119e:    	mov    QWORD PTR [rbx],rdi
  011a1:    	movq   xmm2,QWORD PTR [rsp]
  011a6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011ac:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011b2:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011b8:    	add    rsp,0x20
  011bc:    	test   rax,rax
  011bf:    	je     0x346c9
  011c5: ff 	mov    QWORD PTR [rbp-0x88],rax
:00078 
:00080 %11 = %12.call y()                   [<INVALID>]
  011cc: 01 	sub    DWORD PTR [rip+0x939],0x1        # 0x1b0c
  011d3:    	je     0x346f4
  011d9:    	sub    rsp,0x20
  011dd:    	movq   QWORD PTR [rsp],xmm2
  011e2:    	movq   QWORD PTR [rsp+0x8],xmm4
  011e8:    	movq   QWORD PTR [rsp+0x10],xmm5
  011ee:    	movq   QWORD PTR [rsp+0x18],xmm6
  011f4: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  011fb: 00 	movabs rax,0x5600b75a2280
  01205:    	call   rax
  01207:    	mov    r15d,eax
  0120a: 00 	cmp    r15d,DWORD PTR [rip+0x903]        # 0x1b14
  01211:    	jne    0x34716
  01217:    	mov    eax,DWORD PTR [rip+0xfffffffffffe6ece]        # 0xfffe80eb
  0121d:    	cmp    DWORD PTR [rip+0x8ed],eax        # 0x1b10
  01223:    	jne    0x34716
  01229:    	mov    rax,QWORD PTR [rbx]
  0122c:    	lea    rdi,[rsp-0x18]
  01231:    	mov    QWORD PTR [rdi],rax
  01234:    	mov    QWORD PTR [rbx],rdi
  01237: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01240:    	mov    QWORD PTR [rsp-0x38],rcx
  01245: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0124c:    	mov    QWORD PTR [rsp-0x38],rax
  01251: 00 	mov    rdi,0x0
  01258: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01261: 00 	movabs rax,0x0
  0126b:    	mov    QWORD PTR [rsp-0x28],rax
  01270: 00 	movabs r13,0x0
  0127a:    	call   0xfffe5588
  0127f:    	lea    rdi,[rbp-0x8]
  01283:    	mov    QWORD PTR [rbx],rdi
  01286:    	movq   xmm2,QWORD PTR [rsp]
  0128b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01291:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01297:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0129d:    	add    rsp,0x20
  012a1:    	test   rax,rax
  012a4:    	je     0x34785
  012aa:    	mov    QWORD PTR [rbp-0x80],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  012ae: 01 	sub    DWORD PTR [rip+0x863],0x1        # 0x1b18
  012b5:    	je     0x347b0
  012bb:    	mov    rdi,QWORD PTR [rbp-0x58]
  012bf:    	mov    rsi,QWORD PTR [rbp-0x80]
  012c3:    	sub    rsp,0x20
  012c7:    	movq   QWORD PTR [rsp],xmm2
  012cc:    	movq   QWORD PTR [rsp+0x8],xmm4
  012d2:    	movq   QWORD PTR [rsp+0x10],xmm5
  012d8:    	movq   QWORD PTR [rsp+0x18],xmm6
  012de:    	mov    rdx,rdi
  012e1:    	mov    rcx,rsi
  012e4:    	mov    rdi,rbx
  012e7:    	mov    rsi,r12
  012ea: 00 	movabs rax,0x5600b7598f60
  012f4:    	call   rax
  012f6:    	movq   xmm2,QWORD PTR [rsp]
  012fb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01301:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01307:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0130d:    	add    rsp,0x20
  01311: 00 	movabs r13,0x5600b92b7740
  0131b:    	test   rax,rax
  0131e:    	je     0xfffe55c3
  01324:    	mov    QWORD PTR [rbp-0x80],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  01328: 01 	sub    DWORD PTR [rip+0x7ed],0x1        # 0x1b1c
  0132f:    	je     0x347ee
  01335:    	mov    rdi,QWORD PTR [rbp-0x78]
  01339:    	mov    rsi,QWORD PTR [rbp-0x80]
  0133d:    	sub    rsp,0x20
  01341:    	movq   QWORD PTR [rsp],xmm2
  01346:    	movq   QWORD PTR [rsp+0x8],xmm4
  0134c:    	movq   QWORD PTR [rsp+0x10],xmm5
  01352:    	movq   QWORD PTR [rsp+0x18],xmm6
  01358:    	mov    rdx,rdi
  0135b:    	mov    rcx,rsi
  0135e:    	mov    rdi,rbx
  01361:    	mov    rsi,r12
  01364: 00 	movabs rax,0x5600b75970e0
  0136e:    	call   rax
  01370:    	movq   xmm2,QWORD PTR [rsp]
  01375:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0137b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01381:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01387:    	add    rsp,0x20
  0138b: 00 	movabs r13,0x5600b92b7750
  01395:    	test   rax,rax
  01398:    	je     0xfffe55c3
  0139e:    	mov    QWORD PTR [rbp-0x78],rax
:00085 %12 = %1.call org()                  [<INVALID>]
  013a2: 01 	sub    DWORD PTR [rip+0x777],0x1        # 0x1b20
  013a9:    	je     0x3482c
  013af:    	sub    rsp,0x20
  013b3:    	movq   QWORD PTR [rsp],xmm2
  013b8:    	movq   QWORD PTR [rsp+0x8],xmm4
  013be:    	movq   QWORD PTR [rsp+0x10],xmm5
  013c4:    	movq   QWORD PTR [rsp+0x18],xmm6
  013ca:    	mov    rdi,QWORD PTR [rbp-0x30]
  013ce: 00 	movabs rax,0x5600b75a2280
  013d8:    	call   rax
  013da:    	mov    r15d,eax
  013dd: 00 	cmp    r15d,DWORD PTR [rip+0x744]        # 0x1b28
  013e4:    	jne    0x3484e
  013ea:    	mov    eax,DWORD PTR [rip+0xfffffffffffe6cfb]        # 0xfffe80eb
  013f0:    	cmp    DWORD PTR [rip+0x72e],eax        # 0x1b24
  013f6:    	jne    0x3484e
  013fc:    	mov    rax,QWORD PTR [rbx]
  013ff:    	lea    rdi,[rsp-0x18]
  01404:    	mov    QWORD PTR [rdi],rax
  01407:    	mov    QWORD PTR [rbx],rdi
  0140a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01413:    	mov    QWORD PTR [rsp-0x38],rcx
  01418:    	mov    rax,QWORD PTR [rbp-0x30]
  0141c:    	mov    QWORD PTR [rsp-0x38],rax
  01421: 00 	mov    rdi,0x0
  01428: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01431: 00 	movabs rax,0x0
  0143b:    	mov    QWORD PTR [rsp-0x28],rax
  01440: 00 	movabs r13,0x0
  0144a:    	call   0xfffe5588
  0144f:    	lea    rdi,[rbp-0x8]
  01453:    	mov    QWORD PTR [rbx],rdi
  01456:    	movq   xmm2,QWORD PTR [rsp]
  0145b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01461:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01467:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0146d:    	add    rsp,0x20
  01471:    	test   rax,rax
  01474:    	je     0x348ba
  0147a: ff 	mov    QWORD PTR [rbp-0x88],rax
:00086 
:00088 %11 = %12.call z()                   [<INVALID>]
  01481: 01 	sub    DWORD PTR [rip+0x6a4],0x1        # 0x1b2c
  01488:    	je     0x348e5
  0148e:    	sub    rsp,0x20
  01492:    	movq   QWORD PTR [rsp],xmm2
  01497:    	movq   QWORD PTR [rsp+0x8],xmm4
  0149d:    	movq   QWORD PTR [rsp+0x10],xmm5
  014a3:    	movq   QWORD PTR [rsp+0x18],xmm6
  014a9: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  014b0: 00 	movabs rax,0x5600b75a2280
  014ba:    	call   rax
  014bc:    	mov    r15d,eax
  014bf: 00 	cmp    r15d,DWORD PTR [rip+0x66e]        # 0x1b34
  014c6:    	jne    0x34907
  014cc:    	mov    eax,DWORD PTR [rip+0xfffffffffffe6c19]        # 0xfffe80eb
  014d2:    	cmp    DWORD PTR [rip+0x658],eax        # 0x1b30
  014d8:    	jne    0x34907
  014de:    	mov    rax,QWORD PTR [rbx]
  014e1:    	lea    rdi,[rsp-0x18]
  014e6:    	mov    QWORD PTR [rdi],rax
  014e9:    	mov    QWORD PTR [rbx],rdi
  014ec: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014f5:    	mov    QWORD PTR [rsp-0x38],rcx
  014fa: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01501:    	mov    QWORD PTR [rsp-0x38],rax
  01506: 00 	mov    rdi,0x0
  0150d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01516: 00 	movabs rax,0x0
  01520:    	mov    QWORD PTR [rsp-0x28],rax
  01525: 00 	movabs r13,0x0
  0152f:    	call   0xfffe5588
  01534:    	lea    rdi,[rbp-0x8]
  01538:    	mov    QWORD PTR [rbx],rdi
  0153b:    	movq   xmm2,QWORD PTR [rsp]
  01540:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01546:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0154c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01552:    	add    rsp,0x20
  01556:    	test   rax,rax
  01559:    	je     0x34976
  0155f:    	mov    QWORD PTR [rbp-0x80],rax
:00089 
:00091 %13 = %1.call dir()                  [<INVALID>]
  01563: 01 	sub    DWORD PTR [rip+0x5ce],0x1        # 0x1b38
  0156a:    	je     0x349a1
  01570:    	sub    rsp,0x20
  01574:    	movq   QWORD PTR [rsp],xmm2
  01579:    	movq   QWORD PTR [rsp+0x8],xmm4
  0157f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01585:    	movq   QWORD PTR [rsp+0x18],xmm6
  0158b:    	mov    rdi,QWORD PTR [rbp-0x30]
  0158f: 00 	movabs rax,0x5600b75a2280
  01599:    	call   rax
  0159b:    	mov    r15d,eax
  0159e: 00 	cmp    r15d,DWORD PTR [rip+0x59b]        # 0x1b40
  015a5:    	jne    0x349c3
  015ab:    	mov    eax,DWORD PTR [rip+0xfffffffffffe6b3a]        # 0xfffe80eb
  015b1:    	cmp    DWORD PTR [rip+0x585],eax        # 0x1b3c
  015b7:    	jne    0x349c3
  015bd:    	mov    rax,QWORD PTR [rbx]
  015c0:    	lea    rdi,[rsp-0x18]
  015c5:    	mov    QWORD PTR [rdi],rax
  015c8:    	mov    QWORD PTR [rbx],rdi
  015cb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015d4:    	mov    QWORD PTR [rsp-0x38],rcx
  015d9:    	mov    rax,QWORD PTR [rbp-0x30]
  015dd:    	mov    QWORD PTR [rsp-0x38],rax
  015e2: 00 	mov    rdi,0x0
  015e9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  015f2: 00 	movabs rax,0x0
  015fc:    	mov    QWORD PTR [rsp-0x28],rax
  01601: 00 	movabs r13,0x0
  0160b:    	call   0xfffe5588
  01610:    	lea    rdi,[rbp-0x8]
  01614:    	mov    QWORD PTR [rbx],rdi
  01617:    	movq   xmm2,QWORD PTR [rsp]
  0161c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01622:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01628:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0162e:    	add    rsp,0x20
  01632:    	test   rax,rax
  01635:    	je     0x34a2f
  0163b: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 
:00094 %12 = %13.call z()                   [<INVALID>]
  01642: 01 	sub    DWORD PTR [rip+0x4fb],0x1        # 0x1b44
  01649:    	je     0x34a5a
  0164f:    	sub    rsp,0x20
  01653:    	movq   QWORD PTR [rsp],xmm2
  01658:    	movq   QWORD PTR [rsp+0x8],xmm4
  0165e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01664:    	movq   QWORD PTR [rsp+0x18],xmm6
  0166a: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01671: 00 	movabs rax,0x5600b75a2280
  0167b:    	call   rax
  0167d:    	mov    r15d,eax
  01680: 00 	cmp    r15d,DWORD PTR [rip+0x4c5]        # 0x1b4c
  01687:    	jne    0x34a7c
  0168d:    	mov    eax,DWORD PTR [rip+0xfffffffffffe6a58]        # 0xfffe80eb
  01693:    	cmp    DWORD PTR [rip+0x4af],eax        # 0x1b48
  01699:    	jne    0x34a7c
  0169f:    	mov    rax,QWORD PTR [rbx]
  016a2:    	lea    rdi,[rsp-0x18]
  016a7:    	mov    QWORD PTR [rdi],rax
  016aa:    	mov    QWORD PTR [rbx],rdi
  016ad: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016b6:    	mov    QWORD PTR [rsp-0x38],rcx
  016bb: ff 	mov    rax,QWORD PTR [rbp-0x90]
  016c2:    	mov    QWORD PTR [rsp-0x38],rax
  016c7: 00 	mov    rdi,0x0
  016ce: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016d7: 00 	movabs rax,0x0
  016e1:    	mov    QWORD PTR [rsp-0x28],rax
  016e6: 00 	movabs r13,0x0
  016f0:    	call   0xfffe5588
  016f5:    	lea    rdi,[rbp-0x8]
  016f9:    	mov    QWORD PTR [rbx],rdi
  016fc:    	movq   xmm2,QWORD PTR [rsp]
  01701:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01707:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0170d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01713:    	add    rsp,0x20
  01717:    	test   rax,rax
  0171a:    	je     0x34aeb
  01720: ff 	mov    QWORD PTR [rbp-0x88],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  01727: 01 	sub    DWORD PTR [rip+0x422],0x1        # 0x1b50
  0172e:    	je     0x34b16
  01734:    	mov    rdi,QWORD PTR [rbp-0x58]
  01738: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  0173f:    	sub    rsp,0x20
  01743:    	movq   QWORD PTR [rsp],xmm2
  01748:    	movq   QWORD PTR [rsp+0x8],xmm4
  0174e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01754:    	movq   QWORD PTR [rsp+0x18],xmm6
  0175a:    	mov    rdx,rdi
  0175d:    	mov    rcx,rsi
  01760:    	mov    rdi,rbx
  01763:    	mov    rsi,r12
  01766: 00 	movabs rax,0x5600b7598f60
  01770:    	call   rax
  01772:    	movq   xmm2,QWORD PTR [rsp]
  01777:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0177d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01783:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01789:    	add    rsp,0x20
  0178d: 00 	movabs r13,0x5600b92b7820
  01797:    	test   rax,rax
  0179a:    	je     0xfffe55c3
  017a0: ff 	mov    QWORD PTR [rbp-0x88],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  017a7: 01 	sub    DWORD PTR [rip+0x3a6],0x1        # 0x1b54
  017ae:    	je     0x34b54
  017b4:    	mov    rdi,QWORD PTR [rbp-0x80]
  017b8: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  017bf:    	sub    rsp,0x20
  017c3:    	movq   QWORD PTR [rsp],xmm2
  017c8:    	movq   QWORD PTR [rsp+0x8],xmm4
  017ce:    	movq   QWORD PTR [rsp+0x10],xmm5
  017d4:    	movq   QWORD PTR [rsp+0x18],xmm6
  017da:    	mov    rdx,rdi
  017dd:    	mov    rcx,rsi
  017e0:    	mov    rdi,rbx
  017e3:    	mov    rsi,r12
  017e6: 00 	movabs rax,0x5600b75970e0
  017f0:    	call   rax
  017f2:    	movq   xmm2,QWORD PTR [rsp]
  017f7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017fd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01803:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01809:    	add    rsp,0x20
  0180d: 00 	movabs r13,0x5600b92b7830
  01817:    	test   rax,rax
  0181a:    	je     0xfffe55c3
  01820:    	mov    QWORD PTR [rbp-0x80],rax
:00099 %7 = %8.call new(%9; 3)              [<INVALID>]
  01824: 01 	sub    DWORD PTR [rip+0x32d],0x1        # 0x1b58
  0182b:    	je     0x34b92
  01831:    	sub    rsp,0x20
  01835:    	movq   QWORD PTR [rsp],xmm2
  0183a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01840:    	movq   QWORD PTR [rsp+0x10],xmm5
  01846:    	movq   QWORD PTR [rsp+0x18],xmm6
  0184c:    	mov    rdi,QWORD PTR [rbp-0x68]
  01850: 00 	movabs rax,0x5600b75a2280
  0185a:    	call   rax
  0185c:    	mov    r15d,eax
  0185f: 00 	cmp    r15d,DWORD PTR [rip+0x2fa]        # 0x1b60
  01866:    	jne    0x34bb4
  0186c:    	mov    eax,DWORD PTR [rip+0xfffffffffffe6879]        # 0xfffe80eb
  01872:    	cmp    DWORD PTR [rip+0x2e4],eax        # 0x1b5c
  01878:    	jne    0x34bb4
  0187e:    	mov    rax,QWORD PTR [rbx]
  01881:    	lea    rdi,[rsp-0x18]
  01886:    	mov    QWORD PTR [rdi],rax
  01889:    	mov    QWORD PTR [rbx],rdi
  0188c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01895:    	mov    QWORD PTR [rsp-0x38],rcx
  0189a:    	mov    rax,QWORD PTR [rbp-0x68]
  0189e:    	mov    QWORD PTR [rsp-0x38],rax
  018a3: 00 	mov    rdi,0x3
  018aa:    	mov    rax,QWORD PTR [rbp-0x70]
  018ae:    	mov    QWORD PTR [rsp-0x40],rax
  018b3:    	mov    rax,QWORD PTR [rbp-0x78]
  018b7:    	mov    QWORD PTR [rsp-0x48],rax
  018bc:    	mov    rax,QWORD PTR [rbp-0x80]
  018c0:    	mov    QWORD PTR [rsp-0x50],rax
  018c5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018ce: 00 	movabs rax,0x0
  018d8:    	mov    QWORD PTR [rsp-0x28],rax
  018dd: 00 	movabs r13,0x0
  018e7:    	call   0xfffe5588
  018ec:    	lea    rdi,[rbp-0x8]
  018f0:    	mov    QWORD PTR [rbx],rdi
  018f3:    	movq   xmm2,QWORD PTR [rsp]
  018f8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018fe:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01904:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0190a:    	add    rsp,0x20
  0190e:    	test   rax,rax
  01911:    	je     0x34c20
  01917:    	mov    QWORD PTR [rbp-0x60],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [<INVALID>]
  0191b: 01 	sub    DWORD PTR [rip+0x242],0x1        # 0x1b64
  01922:    	je     0x34c4b
  01928:    	sub    rsp,0x20
  0192c:    	movq   QWORD PTR [rsp],xmm2
  01931:    	movq   QWORD PTR [rsp+0x8],xmm4
  01937:    	movq   QWORD PTR [rsp+0x10],xmm5
  0193d:    	movq   QWORD PTR [rsp+0x18],xmm6
  01943:    	mov    rdi,QWORD PTR [rbp-0x38]
  01947: 00 	movabs rax,0x5600b75a2280
  01951:    	call   rax
  01953:    	mov    r15d,eax
  01956: 00 	cmp    r15d,DWORD PTR [rip+0x20f]        # 0x1b6c
  0195d:    	jne    0x34c6d
  01963:    	mov    eax,DWORD PTR [rip+0xfffffffffffe6782]        # 0xfffe80eb
  01969:    	cmp    DWORD PTR [rip+0x1f9],eax        # 0x1b68
  0196f:    	jne    0x34c6d
  01975:    	mov    rax,QWORD PTR [rbx]
  01978:    	lea    rdi,[rsp-0x18]
  0197d:    	mov    QWORD PTR [rdi],rax
  01980:    	mov    QWORD PTR [rbx],rdi
  01983: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0198c:    	mov    QWORD PTR [rsp-0x38],rcx
  01991:    	mov    rax,QWORD PTR [rbp-0x38]
  01995:    	mov    QWORD PTR [rsp-0x38],rax
  0199a: 00 	mov    rdi,0x1
  019a1:    	mov    rax,QWORD PTR [rbp-0x60]
  019a5:    	mov    QWORD PTR [rsp-0x40],rax
  019aa: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019b3: 00 	movabs rax,0x0
  019bd:    	mov    QWORD PTR [rsp-0x28],rax
  019c2: 00 	movabs r13,0x0
  019cc:    	call   0xfffe5588
  019d1:    	lea    rdi,[rbp-0x8]
  019d5:    	mov    QWORD PTR [rbx],rdi
  019d8:    	movq   xmm2,QWORD PTR [rsp]
  019dd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019e3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  019e9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  019ef:    	add    rsp,0x20
  019f3:    	test   rax,rax
  019f6:    	je     0x34cd9
:00103 
:00105 br =>:00106
  019fc:    	jmp    0x34d41
:00106 %7 = nil
  01a01: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00107 ret %7
  01a09:    	mov    rax,QWORD PTR [rbp-0x60]
  01a0d:    	leave  
  01a0e:    	ret    
==> start whole compile: intersect FuncId(71) self_class:Plane start:[00000] bytecode:0x5600b92b7200
<== finished compile. elapsed:134.2µs
offset:Pos(116200) code: 6566 bytes  data: 362 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x2
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x40],rax
  00040:    	mov    QWORD PTR [rbp-0x48],rax
  00044:    	mov    QWORD PTR [rbp-0x50],rax
  00048:    	mov    QWORD PTR [rbp-0x58],rax
  0004c:    	mov    QWORD PTR [rbp-0x60],rax
  00050:    	mov    QWORD PTR [rbp-0x68],rax
  00054:    	mov    QWORD PTR [rbp-0x70],rax
  00058:    	mov    QWORD PTR [rbp-0x78],rax
  0005c:    	mov    QWORD PTR [rbp-0x80],rax
  00060: ff 	mov    QWORD PTR [rbp-0x88],rax
  00067: ff 	mov    QWORD PTR [rbp-0x90],rax
  0006e:    	mov    rdi,QWORD PTR [rbp-0x28]
  00072: 00 	test   rdi,0x7
  00079:    	jne    0x331f7
  0007f:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00083:    	jne    0x331f7
:00000 init reg_num:14 arg_num:2 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  00089:    	mov    rdi,QWORD PTR [rbp-0x28]
  0008d:    	mov    rax,QWORD PTR [rdi+0x10]
  00091:    	mov    QWORD PTR [rbp-0x60],rax
:00002 %8 = @n: Plane[IvarId(1)]
  00095:    	mov    rdi,QWORD PTR [rbp-0x28]
  00099:    	mov    rax,QWORD PTR [rdi+0x18]
  0009d:    	mov    QWORD PTR [rbp-0x68],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  000a1:    	mov    rdi,QWORD PTR [rbp-0x60]
  000a5: 00 	test   rdi,0x7
  000ac:    	jne    0x33206
  000b2:    	cmp    DWORD PTR [rdi+0x4],0x28
  000b6:    	jne    0x33206
  000bc: 26 	cmp    DWORD PTR [rip+0xfffffffffffe64b8],0x26        # 0xfffe657b
  000c3:    	jne    0x33206
  000c9:    	mov    rax,QWORD PTR [rbx]
  000cc:    	lea    rdi,[rsp-0x18]
  000d1:    	mov    QWORD PTR [rdi],rax
  000d4:    	mov    QWORD PTR [rbx],rdi
  000d7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000e0:    	mov    QWORD PTR [rsp-0x38],rcx
  000e5:    	mov    rax,QWORD PTR [rbp-0x60]
  000e9:    	mov    QWORD PTR [rsp-0x38],rax
  000ee: 00 	mov    rdi,0x1
  000f5:    	mov    rax,QWORD PTR [rbp-0x68]
  000f9:    	mov    QWORD PTR [rsp-0x40],rax
  000fe: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00107: 05 	movabs rax,0x1000500000041
  00111:    	mov    QWORD PTR [rsp-0x28],rax
  00116: 00 	movabs r13,0x5600b92d48b0
  00120:    	call   0xfffe72ce
  00125:    	lea    rdi,[rbp-0x8]
  00129:    	mov    QWORD PTR [rbx],rdi
  0012c: 00 	movabs r13,0x5600b92b7250
  00136:    	test   rax,rax
  00139:    	je     0xfffe3a53
  0013f:    	mov    QWORD PTR [rbp-0x40],rax
:00004 
:00006 %3 = neg %3                          [Float]
  00143:    	mov    rdi,QWORD PTR [rbp-0x40]
  00147: 00 	test   rdi,0x1
  0014e:    	jne    0x33215
  00154: 00 	test   rdi,0x2
  0015b:    	je     0x197
  00161:    	xorps  xmm2,xmm2
  00164: 00 	movabs rax,0x8000000000000002
  0016e:    	cmp    rdi,rax
  00171:    	je     0x1a9
  00177:    	mov    rax,rdi
  0017a:    	sar    rax,0x3f
  0017e:    	add    rax,0x2
  00182:    	and    rdi,0xfffffffffffffffc
  00186:    	or     rdi,rax
  00189:    	rol    rdi,0x3d
  0018d:    	movq   xmm2,rdi
  00192:    	jmp    0x1a9
  00197:    	call   0xfffe3a8c
  0019c:    	test   rax,rax
  0019f:    	je     0x33215
  001a5:    	movq   xmm2,xmm0
  001a9: 00 	xorps  xmm2,XMMWORD PTR [rip+0x17f8]        # 0x19a8
:00007 %7 = %1.call dir()                   [Ray]
  001b0:    	mov    rdi,QWORD PTR [rbp-0x30]
  001b4: 00 	test   rdi,0x7
  001bb:    	jne    0x33224
  001c1:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001c5:    	jne    0x33224
  001cb: 26 	cmp    DWORD PTR [rip+0xfffffffffffe63a9],0x26        # 0xfffe657b
  001d2:    	jne    0x33224
  001d8:    	mov    esi,DWORD PTR [rip+0x17d6]        # 0x19b4
  001de:    	cmp    esi,0xffffffff
  001e1:    	je     0x33240
  001e7:    	cmp    WORD PTR [rdi+0x2],0x3
  001ec:    	jne    0x205
  001f2:    	cmp    esi,0x6
  001f5:    	jge    0x205
  001fb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00200:    	jmp    0x223
  00205:    	sub    rsp,0x10
  00209:    	movq   QWORD PTR [rsp],xmm2
  0020e: 00 	movabs rax,0x5600b755dfe0
  00218:    	call   rax
  0021a:    	movq   xmm2,QWORD PTR [rsp]
  0021f:    	add    rsp,0x10
  00223:    	mov    QWORD PTR [rbp-0x60],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  00227:    	mov    rdi,QWORD PTR [rbp-0x28]
  0022b:    	mov    rax,QWORD PTR [rdi+0x18]
  0022f:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  00233:    	mov    rdi,QWORD PTR [rbp-0x60]
  00237: 00 	test   rdi,0x7
  0023e:    	jne    0x3327b
  00244:    	cmp    DWORD PTR [rdi+0x4],0x28
  00248:    	jne    0x3327b
  0024e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6326],0x26        # 0xfffe657b
  00255:    	jne    0x3327b
  0025b:    	sub    rsp,0x10
  0025f:    	movq   QWORD PTR [rsp],xmm2
  00264:    	mov    rax,QWORD PTR [rbx]
  00267:    	lea    rdi,[rsp-0x18]
  0026c:    	mov    QWORD PTR [rdi],rax
  0026f:    	mov    QWORD PTR [rbx],rdi
  00272: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0027b:    	mov    QWORD PTR [rsp-0x38],rcx
  00280:    	mov    rax,QWORD PTR [rbp-0x60]
  00284:    	mov    QWORD PTR [rsp-0x38],rax
  00289: 00 	mov    rdi,0x1
  00290:    	mov    rax,QWORD PTR [rbp-0x68]
  00294:    	mov    QWORD PTR [rsp-0x40],rax
  00299: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002a2: 05 	movabs rax,0x1000500000041
  002ac:    	mov    QWORD PTR [rsp-0x28],rax
  002b1: 00 	movabs r13,0x5600b92d48b0
  002bb:    	call   0xfffe72ce
  002c0:    	lea    rdi,[rbp-0x8]
  002c4:    	mov    QWORD PTR [rbx],rdi
  002c7:    	movq   xmm2,QWORD PTR [rsp]
  002cc:    	add    rsp,0x10
  002d0: 00 	movabs r13,0x5600b92b72d0
  002da:    	test   rax,rax
  002dd:    	je     0xfffe3a53
  002e3:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %5 = %4
  002e7:    	mov    rax,QWORD PTR [rbp-0x48]
  002eb:    	mov    QWORD PTR [rbp-0x50],rax
:00015 %7 = literal[0.0]
  002ef: 00 	movq   xmm3,QWORD PTR [rip+0x16c1]        # 0x19b8
  002f7: 00 	movabs rax,0x8000000000000002
  00301:    	mov    QWORD PTR [rbp-0x60],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  00305:    	mov    rdi,QWORD PTR [rbp-0x48]
  00309: 00 	test   rdi,0x1
  00310:    	jne    0x33297
  00316: 00 	test   rdi,0x2
  0031d:    	je     0x359
  00323:    	xorps  xmm4,xmm4
  00326: 00 	movabs rax,0x8000000000000002
  00330:    	cmp    rdi,rax
  00333:    	je     0x36b
  00339:    	mov    rax,rdi
  0033c:    	sar    rax,0x3f
  00340:    	add    rax,0x2
  00344:    	and    rdi,0xfffffffffffffffc
  00348:    	or     rdi,rax
  0034b:    	rol    rdi,0x3d
  0034f:    	movq   xmm4,rdi
  00354:    	jmp    0x36b
  00359:    	call   0xfffe3a8c
  0035e:    	test   rax,rax
  00361:    	je     0x33297
  00367:    	movq   xmm4,xmm0
  0036b:    	ucomisd xmm4,xmm3
  0036f:    	jae    0x332b3
:00018 %5 = %4
:00019 %5 = neg %5                          [Float]
  00375:    	movq   xmm5,xmm4
  00379: 00 	xorps  xmm5,XMMWORD PTR [rip+0x1648]        # 0x19c8
:00020 br =>:00021
  00380:    	jmp    0x332d9
:00021 %7 = literal[1e-17]
  00385: 00 	movq   xmm3,QWORD PTR [rip+0x164b]        # 0x19d8
  0038d: aa 	movabs rax,0xe33877aa3236a4ba
  00397:    	mov    QWORD PTR [rbp-0x60],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  0039b:    	mov    rdi,QWORD PTR [rbp-0x50]
  0039f: 00 	test   rdi,0x1
  003a6:    	jne    0x3330c
  003ac: 00 	test   rdi,0x2
  003b3:    	je     0x3ef
  003b9:    	xorps  xmm5,xmm5
  003bc: 00 	movabs rax,0x8000000000000002
  003c6:    	cmp    rdi,rax
  003c9:    	je     0x401
  003cf:    	mov    rax,rdi
  003d2:    	sar    rax,0x3f
  003d6:    	add    rax,0x2
  003da:    	and    rdi,0xfffffffffffffffc
  003de:    	or     rdi,rax
  003e1:    	rol    rdi,0x3d
  003e5:    	movq   xmm5,rdi
  003ea:    	jmp    0x401
  003ef:    	call   0xfffe3a8c
  003f4:    	test   rax,rax
  003f7:    	je     0x3330c
  003fd:    	movq   xmm5,xmm0
  00401:    	ucomisd xmm5,xmm3
  00405:    	jae    0x419
:00024 %7 = nil
  0040b: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00025 ret %7
  00413:    	mov    rax,QWORD PTR [rbp-0x60]
  00417:    	leave  
  00418:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  00419:    	mov    rdi,QWORD PTR [rbp-0x30]
  0041d: 00 	test   rdi,0x7
  00424:    	jne    0x33328
  0042a:    	cmp    DWORD PTR [rdi+0x4],0x2e
  0042e:    	jne    0x33328
  00434: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6140],0x26        # 0xfffe657b
  0043b:    	jne    0x33328
  00441:    	mov    esi,DWORD PTR [rip+0x159d]        # 0x19e4
  00447:    	cmp    esi,0xffffffff
  0044a:    	je     0x33344
  00450:    	cmp    WORD PTR [rdi+0x2],0x3
  00455:    	jne    0x46e
  0045b:    	cmp    esi,0x6
  0045e:    	jge    0x46e
  00464:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00469:    	jmp    0x4b0
  0046e:    	sub    rsp,0x20
  00472:    	movq   QWORD PTR [rsp],xmm2
  00477:    	movq   QWORD PTR [rsp+0x8],xmm3
  0047d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00483:    	movq   QWORD PTR [rsp+0x18],xmm5
  00489: 00 	movabs rax,0x5600b755dfe0
  00493:    	call   rax
  00495:    	movq   xmm2,QWORD PTR [rsp]
  0049a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004a0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004a6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  004ac:    	add    rsp,0x20
  004b0:    	mov    QWORD PTR [rbp-0x68],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  004b4:    	mov    rdi,QWORD PTR [rbp-0x28]
  004b8:    	mov    rax,QWORD PTR [rdi+0x18]
  004bc:    	mov    QWORD PTR [rbp-0x70],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  004c0:    	mov    rdi,QWORD PTR [rbp-0x68]
  004c4: 00 	test   rdi,0x7
  004cb:    	jne    0x333a3
  004d1:    	cmp    DWORD PTR [rdi+0x4],0x28
  004d5:    	jne    0x333a3
  004db: 26 	cmp    DWORD PTR [rip+0xfffffffffffe6099],0x26        # 0xfffe657b
  004e2:    	jne    0x333a3
  004e8:    	sub    rsp,0x20
  004ec:    	movq   QWORD PTR [rsp],xmm2
  004f1:    	movq   QWORD PTR [rsp+0x8],xmm4
  004f7:    	movq   QWORD PTR [rsp+0x10],xmm5
  004fd:    	mov    rax,QWORD PTR [rbx]
  00500:    	lea    rdi,[rsp-0x18]
  00505:    	mov    QWORD PTR [rdi],rax
  00508:    	mov    QWORD PTR [rbx],rdi
  0050b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00514:    	mov    QWORD PTR [rsp-0x38],rcx
  00519:    	mov    rax,QWORD PTR [rbp-0x68]
  0051d:    	mov    QWORD PTR [rsp-0x38],rax
  00522: 00 	mov    rdi,0x1
  00529:    	mov    rax,QWORD PTR [rbp-0x70]
  0052d:    	mov    QWORD PTR [rsp-0x40],rax
  00532: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0053b: 05 	movabs rax,0x1000500000041
  00545:    	mov    QWORD PTR [rsp-0x28],rax
  0054a: 00 	movabs r13,0x5600b92d48b0
  00554:    	call   0xfffe72ce
  00559:    	lea    rdi,[rbp-0x8]
  0055d:    	mov    QWORD PTR [rbx],rdi
  00560:    	movq   xmm2,QWORD PTR [rsp]
  00565:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0056b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00571:    	add    rsp,0x20
  00575: 00 	movabs r13,0x5600b92b7410
  0057f:    	test   rax,rax
  00582:    	je     0xfffe3a53
  00588:    	mov    QWORD PTR [rbp-0x60],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  0058c:    	mov    rdi,QWORD PTR [rbp-0x60]
  00590: 00 	test   rdi,0x1
  00597:    	jne    0x333bf
  0059d: 00 	test   rdi,0x2
  005a4:    	je     0x5e0
  005aa:    	xorps  xmm3,xmm3
  005ad: 00 	movabs rax,0x8000000000000002
  005b7:    	cmp    rdi,rax
  005ba:    	je     0x5f2
  005c0:    	mov    rax,rdi
  005c3:    	sar    rax,0x3f
  005c7:    	add    rax,0x2
  005cb:    	and    rdi,0xfffffffffffffffc
  005cf:    	or     rdi,rax
  005d2:    	rol    rdi,0x3d
  005d6:    	movq   xmm3,rdi
  005db:    	jmp    0x5f2
  005e0:    	call   0xfffe3a8c
  005e5:    	test   rax,rax
  005e8:    	je     0x333bf
  005ee:    	movq   xmm3,xmm0
  005f2:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  005f6: 00 	xorps  xmm3,XMMWORD PTR [rip+0x13eb]        # 0x19e8
:00036 %6 = %7 / %4                         [Float][Float]
  005fd:    	movq   xmm6,xmm3
  00601:    	movq   rax,xmm4
  00606:    	test   rax,rax
  00609:    	je     0xfffe3a78
  0060f:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  00613: 00 	movq   xmm3,QWORD PTR [rip+0x13dd]        # 0x19f8
  0061b: 00 	movabs rax,0x8000000000000002
  00625:    	mov    QWORD PTR [rbp-0x60],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  00629:    	ucomisd xmm6,xmm3
  0062d:    	jbe    0x34338
:00040 %7 = %2.call t()                     [<INVALID>]
  00633: 01 	sub    DWORD PTR [rip+0x13c6],0x1        # 0x1a00
  0063a:    	je     0x33404
  00640:    	sub    rsp,0x20
  00644:    	movq   QWORD PTR [rsp],xmm2
  00649:    	movq   QWORD PTR [rsp+0x8],xmm4
  0064f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00655:    	movq   QWORD PTR [rsp+0x18],xmm6
  0065b:    	mov    rdi,QWORD PTR [rbp-0x38]
  0065f: 00 	movabs rax,0x5600b75a2280
  00669:    	call   rax
  0066b:    	mov    r15d,eax
  0066e: 00 	cmp    r15d,DWORD PTR [rip+0x1393]        # 0x1a08
  00675:    	jne    0x33426
  0067b:    	mov    eax,DWORD PTR [rip+0xfffffffffffe5efa]        # 0xfffe657b
  00681:    	cmp    DWORD PTR [rip+0x137d],eax        # 0x1a04
  00687:    	jne    0x33426
  0068d:    	mov    rax,QWORD PTR [rbx]
  00690:    	lea    rdi,[rsp-0x18]
  00695:    	mov    QWORD PTR [rdi],rax
  00698:    	mov    QWORD PTR [rbx],rdi
  0069b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  006a4:    	mov    QWORD PTR [rsp-0x38],rcx
  006a9:    	mov    rax,QWORD PTR [rbp-0x38]
  006ad:    	mov    QWORD PTR [rsp-0x38],rax
  006b2: 00 	mov    rdi,0x0
  006b9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006c2: 00 	movabs rax,0x0
  006cc:    	mov    QWORD PTR [rsp-0x28],rax
  006d1: 00 	movabs r13,0x0
  006db:    	call   0xfffe3a18
  006e0:    	lea    rdi,[rbp-0x8]
  006e4:    	mov    QWORD PTR [rbx],rdi
  006e7:    	movq   xmm2,QWORD PTR [rsp]
  006ec:    	movq   xmm4,QWORD PTR [rsp+0x8]
  006f2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006f8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006fe:    	add    rsp,0x20
  00702:    	test   rax,rax
  00705:    	je     0x33492
  0070b:    	mov    QWORD PTR [rbp-0x60],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  0070f:    	movq   xmm0,xmm6
  00713:    	call   0xfffe3b7f
  00718:    	mov    QWORD PTR [rbp-0x58],rax
  0071c:    	mov    rdi,QWORD PTR [rbp-0x58]
  00720:    	mov    rsi,QWORD PTR [rbp-0x60]
  00724: 00 	test   rdi,0x1
  0072b:    	je     0x334a1
  00731: 00 	test   rsi,0x1
  00738:    	je     0x334a1
  0073e:    	cmp    rdi,rsi
  00741:    	jge    0x3436b
:00045 %7 = literal[true]
  00747: 00 	mov    rax,0x1c
  0074e:    	mov    QWORD PTR [rbp-0x60],rax
:00046 _ = %2.call hit=(%7; 1)              [<INVALID>]
  00752: 01 	sub    DWORD PTR [rip+0x12b3],0x1        # 0x1a0c
  00759:    	je     0x33512
  0075f:    	sub    rsp,0x20
  00763:    	movq   QWORD PTR [rsp],xmm2
  00768:    	movq   QWORD PTR [rsp+0x8],xmm4
  0076e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00774:    	movq   QWORD PTR [rsp+0x18],xmm6
  0077a:    	mov    rdi,QWORD PTR [rbp-0x38]
  0077e: 00 	movabs rax,0x5600b75a2280
  00788:    	call   rax
  0078a:    	mov    r15d,eax
  0078d: 00 	cmp    r15d,DWORD PTR [rip+0x1280]        # 0x1a14
  00794:    	jne    0x33534
  0079a:    	mov    eax,DWORD PTR [rip+0xfffffffffffe5ddb]        # 0xfffe657b
  007a0:    	cmp    DWORD PTR [rip+0x126a],eax        # 0x1a10
  007a6:    	jne    0x33534
  007ac:    	mov    rax,QWORD PTR [rbx]
  007af:    	lea    rdi,[rsp-0x18]
  007b4:    	mov    QWORD PTR [rdi],rax
  007b7:    	mov    QWORD PTR [rbx],rdi
  007ba: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007c3:    	mov    QWORD PTR [rsp-0x38],rcx
  007c8:    	mov    rax,QWORD PTR [rbp-0x38]
  007cc:    	mov    QWORD PTR [rsp-0x38],rax
  007d1: 00 	mov    rdi,0x1
  007d8:    	mov    rax,QWORD PTR [rbp-0x60]
  007dc:    	mov    QWORD PTR [rsp-0x40],rax
  007e1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  007ea: 00 	movabs rax,0x0
  007f4:    	mov    QWORD PTR [rsp-0x28],rax
  007f9: 00 	movabs r13,0x0
  00803:    	call   0xfffe3a18
  00808:    	lea    rdi,[rbp-0x8]
  0080c:    	mov    QWORD PTR [rbx],rdi
  0080f:    	movq   xmm2,QWORD PTR [rsp]
  00814:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0081a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00820:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00826:    	add    rsp,0x20
  0082a:    	test   rax,rax
  0082d:    	je     0x335a0
:00047 
:00049 _ = %2.call t=(%6; 1)                [<INVALID>]
  00833: 01 	sub    DWORD PTR [rip+0x11de],0x1        # 0x1a18
  0083a:    	je     0x335cb
  00840:    	sub    rsp,0x20
  00844:    	movq   QWORD PTR [rsp],xmm2
  00849:    	movq   QWORD PTR [rsp+0x8],xmm4
  0084f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00855:    	movq   QWORD PTR [rsp+0x18],xmm6
  0085b:    	mov    rdi,QWORD PTR [rbp-0x38]
  0085f: 00 	movabs rax,0x5600b75a2280
  00869:    	call   rax
  0086b:    	mov    r15d,eax
  0086e: 00 	cmp    r15d,DWORD PTR [rip+0x11ab]        # 0x1a20
  00875:    	jne    0x335ed
  0087b:    	mov    eax,DWORD PTR [rip+0xfffffffffffe5cfa]        # 0xfffe657b
  00881:    	cmp    DWORD PTR [rip+0x1195],eax        # 0x1a1c
  00887:    	jne    0x335ed
  0088d:    	mov    rax,QWORD PTR [rbx]
  00890:    	lea    rdi,[rsp-0x18]
  00895:    	mov    QWORD PTR [rdi],rax
  00898:    	mov    QWORD PTR [rbx],rdi
  0089b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008a4:    	mov    QWORD PTR [rsp-0x38],rcx
  008a9:    	mov    rax,QWORD PTR [rbp-0x38]
  008ad:    	mov    QWORD PTR [rsp-0x38],rax
  008b2: 00 	mov    rdi,0x1
  008b9:    	mov    rax,QWORD PTR [rbp-0x58]
  008bd:    	mov    QWORD PTR [rsp-0x40],rax
  008c2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  008cb: 00 	movabs rax,0x0
  008d5:    	mov    QWORD PTR [rsp-0x28],rax
  008da: 00 	movabs r13,0x0
  008e4:    	call   0xfffe3a18
  008e9:    	lea    rdi,[rbp-0x8]
  008ed:    	mov    QWORD PTR [rbx],rdi
  008f0:    	movq   xmm2,QWORD PTR [rsp]
  008f5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008fb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00901:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00907:    	add    rsp,0x20
  0090b:    	test   rax,rax
  0090e:    	je     0x33659
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  00914:    	mov    rdi,QWORD PTR [rbp-0x28]
  00918:    	sub    rsp,0x20
  0091c:    	movq   QWORD PTR [rsp],xmm2
  00921:    	movq   QWORD PTR [rsp+0x8],xmm4
  00927:    	movq   QWORD PTR [rsp+0x10],xmm5
  0092d:    	movq   QWORD PTR [rsp+0x18],xmm6
  00933: 00 	mov    rsi,0x8c
  0093a:    	mov    rdx,r12
  0093d: 00 	movabs rax,0x5600b75c5460
  00947:    	call   rax
  00949:    	movq   xmm2,QWORD PTR [rsp]
  0094e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00954:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0095a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00960:    	add    rsp,0x20
  00964:    	mov    QWORD PTR [rbp-0x60],rax
:00053 _ = %2.call n=(%7; 1)                [<INVALID>]
  00968: 01 	sub    DWORD PTR [rip+0x10b5],0x1        # 0x1a24
  0096f:    	je     0x33684
  00975:    	sub    rsp,0x20
  00979:    	movq   QWORD PTR [rsp],xmm2
  0097e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00984:    	movq   QWORD PTR [rsp+0x10],xmm5
  0098a:    	movq   QWORD PTR [rsp+0x18],xmm6
  00990:    	mov    rdi,QWORD PTR [rbp-0x38]
  00994: 00 	movabs rax,0x5600b75a2280
  0099e:    	call   rax
  009a0:    	mov    r15d,eax
  009a3: 00 	cmp    r15d,DWORD PTR [rip+0x1082]        # 0x1a2c
  009aa:    	jne    0x336a6
  009b0:    	mov    eax,DWORD PTR [rip+0xfffffffffffe5bc5]        # 0xfffe657b
  009b6:    	cmp    DWORD PTR [rip+0x106c],eax        # 0x1a28
  009bc:    	jne    0x336a6
  009c2:    	mov    rax,QWORD PTR [rbx]
  009c5:    	lea    rdi,[rsp-0x18]
  009ca:    	mov    QWORD PTR [rdi],rax
  009cd:    	mov    QWORD PTR [rbx],rdi
  009d0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009d9:    	mov    QWORD PTR [rsp-0x38],rcx
  009de:    	mov    rax,QWORD PTR [rbp-0x38]
  009e2:    	mov    QWORD PTR [rsp-0x38],rax
  009e7: 00 	mov    rdi,0x1
  009ee:    	mov    rax,QWORD PTR [rbp-0x60]
  009f2:    	mov    QWORD PTR [rsp-0x40],rax
  009f7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a00: 00 	movabs rax,0x0
  00a0a:    	mov    QWORD PTR [rsp-0x28],rax
  00a0f: 00 	movabs r13,0x0
  00a19:    	call   0xfffe3a18
  00a1e:    	lea    rdi,[rbp-0x8]
  00a22:    	mov    QWORD PTR [rbx],rdi
  00a25:    	movq   xmm2,QWORD PTR [rsp]
  00a2a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a30:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a36:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a3c:    	add    rsp,0x20
  00a40:    	test   rax,rax
  00a43:    	je     0x33712
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00a49: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe5b38]        # 0xfffe6588
  00a50: 00 	cmp    rax,QWORD PTR [rip+0xff1]        # 0x1a48
  00a57:    	jne    0x33721
  00a5d: 00 	mov    rax,QWORD PTR [rip+0xfd4]        # 0x1a38
  00a64:    	mov    QWORD PTR [rbp-0x68],rax
:00057 %10 = %1.call org()                  [<INVALID>]
  00a68: 01 	sub    DWORD PTR [rip+0xfe1],0x1        # 0x1a50
  00a6f:    	je     0x337b9
  00a75:    	sub    rsp,0x20
  00a79:    	movq   QWORD PTR [rsp],xmm2
  00a7e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a84:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a8a:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a90:    	mov    rdi,QWORD PTR [rbp-0x30]
  00a94: 00 	movabs rax,0x5600b75a2280
  00a9e:    	call   rax
  00aa0:    	mov    r15d,eax
  00aa3: 00 	cmp    r15d,DWORD PTR [rip+0xfae]        # 0x1a58
  00aaa:    	jne    0x337db
  00ab0:    	mov    eax,DWORD PTR [rip+0xfffffffffffe5ac5]        # 0xfffe657b
  00ab6:    	cmp    DWORD PTR [rip+0xf98],eax        # 0x1a54
  00abc:    	jne    0x337db
  00ac2:    	mov    rax,QWORD PTR [rbx]
  00ac5:    	lea    rdi,[rsp-0x18]
  00aca:    	mov    QWORD PTR [rdi],rax
  00acd:    	mov    QWORD PTR [rbx],rdi
  00ad0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ad9:    	mov    QWORD PTR [rsp-0x38],rcx
  00ade:    	mov    rax,QWORD PTR [rbp-0x30]
  00ae2:    	mov    QWORD PTR [rsp-0x38],rax
  00ae7: 00 	mov    rdi,0x0
  00aee: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00af7: 00 	movabs rax,0x0
  00b01:    	mov    QWORD PTR [rsp-0x28],rax
  00b06: 00 	movabs r13,0x0
  00b10:    	call   0xfffe3a18
  00b15:    	lea    rdi,[rbp-0x8]
  00b19:    	mov    QWORD PTR [rbx],rdi
  00b1c:    	movq   xmm2,QWORD PTR [rsp]
  00b21:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b27:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b2d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b33:    	add    rsp,0x20
  00b37:    	test   rax,rax
  00b3a:    	je     0x33847
  00b40:    	mov    QWORD PTR [rbp-0x78],rax
:00058 
:00060 %9 = %10.call x()                    [<INVALID>]
  00b44: 01 	sub    DWORD PTR [rip+0xf11],0x1        # 0x1a5c
  00b4b:    	je     0x33872
  00b51:    	sub    rsp,0x20
  00b55:    	movq   QWORD PTR [rsp],xmm2
  00b5a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b60:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b66:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b6c:    	mov    rdi,QWORD PTR [rbp-0x78]
  00b70: 00 	movabs rax,0x5600b75a2280
  00b7a:    	call   rax
  00b7c:    	mov    r15d,eax
  00b7f: 00 	cmp    r15d,DWORD PTR [rip+0xede]        # 0x1a64
  00b86:    	jne    0x33894
  00b8c:    	mov    eax,DWORD PTR [rip+0xfffffffffffe59e9]        # 0xfffe657b
  00b92:    	cmp    DWORD PTR [rip+0xec8],eax        # 0x1a60
  00b98:    	jne    0x33894
  00b9e:    	mov    rax,QWORD PTR [rbx]
  00ba1:    	lea    rdi,[rsp-0x18]
  00ba6:    	mov    QWORD PTR [rdi],rax
  00ba9:    	mov    QWORD PTR [rbx],rdi
  00bac: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00bb5:    	mov    QWORD PTR [rsp-0x38],rcx
  00bba:    	mov    rax,QWORD PTR [rbp-0x78]
  00bbe:    	mov    QWORD PTR [rsp-0x38],rax
  00bc3: 00 	mov    rdi,0x0
  00bca: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00bd3: 00 	movabs rax,0x0
  00bdd:    	mov    QWORD PTR [rsp-0x28],rax
  00be2: 00 	movabs r13,0x0
  00bec:    	call   0xfffe3a18
  00bf1:    	lea    rdi,[rbp-0x8]
  00bf5:    	mov    QWORD PTR [rbx],rdi
  00bf8:    	movq   xmm2,QWORD PTR [rsp]
  00bfd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c03:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c09:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c0f:    	add    rsp,0x20
  00c13:    	test   rax,rax
  00c16:    	je     0x33900
  00c1c:    	mov    QWORD PTR [rbp-0x70],rax
:00061 
:00063 %11 = %1.call dir()                  [<INVALID>]
  00c20: 01 	sub    DWORD PTR [rip+0xe41],0x1        # 0x1a68
  00c27:    	je     0x3392b
  00c2d:    	sub    rsp,0x20
  00c31:    	movq   QWORD PTR [rsp],xmm2
  00c36:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c3c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c42:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c48:    	mov    rdi,QWORD PTR [rbp-0x30]
  00c4c: 00 	movabs rax,0x5600b75a2280
  00c56:    	call   rax
  00c58:    	mov    r15d,eax
  00c5b: 00 	cmp    r15d,DWORD PTR [rip+0xe0e]        # 0x1a70
  00c62:    	jne    0x3394d
  00c68:    	mov    eax,DWORD PTR [rip+0xfffffffffffe590d]        # 0xfffe657b
  00c6e:    	cmp    DWORD PTR [rip+0xdf8],eax        # 0x1a6c
  00c74:    	jne    0x3394d
  00c7a:    	mov    rax,QWORD PTR [rbx]
  00c7d:    	lea    rdi,[rsp-0x18]
  00c82:    	mov    QWORD PTR [rdi],rax
  00c85:    	mov    QWORD PTR [rbx],rdi
  00c88: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c91:    	mov    QWORD PTR [rsp-0x38],rcx
  00c96:    	mov    rax,QWORD PTR [rbp-0x30]
  00c9a:    	mov    QWORD PTR [rsp-0x38],rax
  00c9f: 00 	mov    rdi,0x0
  00ca6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00caf: 00 	movabs rax,0x0
  00cb9:    	mov    QWORD PTR [rsp-0x28],rax
  00cbe: 00 	movabs r13,0x0
  00cc8:    	call   0xfffe3a18
  00ccd:    	lea    rdi,[rbp-0x8]
  00cd1:    	mov    QWORD PTR [rbx],rdi
  00cd4:    	movq   xmm2,QWORD PTR [rsp]
  00cd9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00cdf:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ce5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ceb:    	add    rsp,0x20
  00cef:    	test   rax,rax
  00cf2:    	je     0x339b9
  00cf8:    	mov    QWORD PTR [rbp-0x80],rax
:00064 
:00066 %10 = %11.call x()                   [<INVALID>]
  00cfc: 01 	sub    DWORD PTR [rip+0xd71],0x1        # 0x1a74
  00d03:    	je     0x339e4
  00d09:    	sub    rsp,0x20
  00d0d:    	movq   QWORD PTR [rsp],xmm2
  00d12:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d18:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d1e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d24:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d28: 00 	movabs rax,0x5600b75a2280
  00d32:    	call   rax
  00d34:    	mov    r15d,eax
  00d37: 00 	cmp    r15d,DWORD PTR [rip+0xd3e]        # 0x1a7c
  00d3e:    	jne    0x33a06
  00d44:    	mov    eax,DWORD PTR [rip+0xfffffffffffe5831]        # 0xfffe657b
  00d4a:    	cmp    DWORD PTR [rip+0xd28],eax        # 0x1a78
  00d50:    	jne    0x33a06
  00d56:    	mov    rax,QWORD PTR [rbx]
  00d59:    	lea    rdi,[rsp-0x18]
  00d5e:    	mov    QWORD PTR [rdi],rax
  00d61:    	mov    QWORD PTR [rbx],rdi
  00d64: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d6d:    	mov    QWORD PTR [rsp-0x38],rcx
  00d72:    	mov    rax,QWORD PTR [rbp-0x80]
  00d76:    	mov    QWORD PTR [rsp-0x38],rax
  00d7b: 00 	mov    rdi,0x0
  00d82: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d8b: 00 	movabs rax,0x0
  00d95:    	mov    QWORD PTR [rsp-0x28],rax
  00d9a: 00 	movabs r13,0x0
  00da4:    	call   0xfffe3a18
  00da9:    	lea    rdi,[rbp-0x8]
  00dad:    	mov    QWORD PTR [rbx],rdi
  00db0:    	movq   xmm2,QWORD PTR [rsp]
  00db5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00dbb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00dc1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00dc7:    	add    rsp,0x20
  00dcb:    	test   rax,rax
  00dce:    	je     0x33a72
  00dd4:    	mov    QWORD PTR [rbp-0x78],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00dd8: 01 	sub    DWORD PTR [rip+0xca1],0x1        # 0x1a80
  00ddf:    	je     0x33a9d
  00de5:    	mov    rdi,QWORD PTR [rbp-0x58]
  00de9:    	mov    rsi,QWORD PTR [rbp-0x78]
  00ded:    	sub    rsp,0x20
  00df1:    	movq   QWORD PTR [rsp],xmm2
  00df6:    	movq   QWORD PTR [rsp+0x8],xmm4
  00dfc:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e02:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e08:    	mov    rdx,rdi
  00e0b:    	mov    rcx,rsi
  00e0e:    	mov    rdi,rbx
  00e11:    	mov    rsi,r12
  00e14: 00 	movabs rax,0x5600b7598f60
  00e1e:    	call   rax
  00e20:    	movq   xmm2,QWORD PTR [rsp]
  00e25:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e2b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e31:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e37:    	add    rsp,0x20
  00e3b: 00 	movabs r13,0x5600b92b7660
  00e45:    	test   rax,rax
  00e48:    	je     0xfffe3a53
  00e4e:    	mov    QWORD PTR [rbp-0x78],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00e52: 01 	sub    DWORD PTR [rip+0xc2b],0x1        # 0x1a84
  00e59:    	je     0x33adb
  00e5f:    	mov    rdi,QWORD PTR [rbp-0x70]
  00e63:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e67:    	sub    rsp,0x20
  00e6b:    	movq   QWORD PTR [rsp],xmm2
  00e70:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e76:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e7c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e82:    	mov    rdx,rdi
  00e85:    	mov    rcx,rsi
  00e88:    	mov    rdi,rbx
  00e8b:    	mov    rsi,r12
  00e8e: 00 	movabs rax,0x5600b75970e0
  00e98:    	call   rax
  00e9a:    	movq   xmm2,QWORD PTR [rsp]
  00e9f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ea5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00eab:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00eb1:    	add    rsp,0x20
  00eb5: 00 	movabs r13,0x5600b92b7670
  00ebf:    	test   rax,rax
  00ec2:    	je     0xfffe3a53
  00ec8:    	mov    QWORD PTR [rbp-0x70],rax
:00071 %11 = %1.call org()                  [<INVALID>]
  00ecc: 01 	sub    DWORD PTR [rip+0xbb5],0x1        # 0x1a88
  00ed3:    	je     0x33b19
  00ed9:    	sub    rsp,0x20
  00edd:    	movq   QWORD PTR [rsp],xmm2
  00ee2:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ee8:    	movq   QWORD PTR [rsp+0x10],xmm5
  00eee:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ef4:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ef8: 00 	movabs rax,0x5600b75a2280
  00f02:    	call   rax
  00f04:    	mov    r15d,eax
  00f07: 00 	cmp    r15d,DWORD PTR [rip+0xb82]        # 0x1a90
  00f0e:    	jne    0x33b3b
  00f14:    	mov    eax,DWORD PTR [rip+0xfffffffffffe5661]        # 0xfffe657b
  00f1a:    	cmp    DWORD PTR [rip+0xb6c],eax        # 0x1a8c
  00f20:    	jne    0x33b3b
  00f26:    	mov    rax,QWORD PTR [rbx]
  00f29:    	lea    rdi,[rsp-0x18]
  00f2e:    	mov    QWORD PTR [rdi],rax
  00f31:    	mov    QWORD PTR [rbx],rdi
  00f34: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f3d:    	mov    QWORD PTR [rsp-0x38],rcx
  00f42:    	mov    rax,QWORD PTR [rbp-0x30]
  00f46:    	mov    QWORD PTR [rsp-0x38],rax
  00f4b: 00 	mov    rdi,0x0
  00f52: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f5b: 00 	movabs rax,0x0
  00f65:    	mov    QWORD PTR [rsp-0x28],rax
  00f6a: 00 	movabs r13,0x0
  00f74:    	call   0xfffe3a18
  00f79:    	lea    rdi,[rbp-0x8]
  00f7d:    	mov    QWORD PTR [rbx],rdi
  00f80:    	movq   xmm2,QWORD PTR [rsp]
  00f85:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f8b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f91:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f97:    	add    rsp,0x20
  00f9b:    	test   rax,rax
  00f9e:    	je     0x33ba7
  00fa4:    	mov    QWORD PTR [rbp-0x80],rax
:00072 
:00074 %10 = %11.call y()                   [<INVALID>]
  00fa8: 01 	sub    DWORD PTR [rip+0xae5],0x1        # 0x1a94
  00faf:    	je     0x33bd2
  00fb5:    	sub    rsp,0x20
  00fb9:    	movq   QWORD PTR [rsp],xmm2
  00fbe:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fc4:    	movq   QWORD PTR [rsp+0x10],xmm5
  00fca:    	movq   QWORD PTR [rsp+0x18],xmm6
  00fd0:    	mov    rdi,QWORD PTR [rbp-0x80]
  00fd4: 00 	movabs rax,0x5600b75a2280
  00fde:    	call   rax
  00fe0:    	mov    r15d,eax
  00fe3: 00 	cmp    r15d,DWORD PTR [rip+0xab2]        # 0x1a9c
  00fea:    	jne    0x33bf4
  00ff0:    	mov    eax,DWORD PTR [rip+0xfffffffffffe5585]        # 0xfffe657b
  00ff6:    	cmp    DWORD PTR [rip+0xa9c],eax        # 0x1a98
  00ffc:    	jne    0x33bf4
  01002:    	mov    rax,QWORD PTR [rbx]
  01005:    	lea    rdi,[rsp-0x18]
  0100a:    	mov    QWORD PTR [rdi],rax
  0100d:    	mov    QWORD PTR [rbx],rdi
  01010: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01019:    	mov    QWORD PTR [rsp-0x38],rcx
  0101e:    	mov    rax,QWORD PTR [rbp-0x80]
  01022:    	mov    QWORD PTR [rsp-0x38],rax
  01027: 00 	mov    rdi,0x0
  0102e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01037: 00 	movabs rax,0x0
  01041:    	mov    QWORD PTR [rsp-0x28],rax
  01046: 00 	movabs r13,0x0
  01050:    	call   0xfffe3a18
  01055:    	lea    rdi,[rbp-0x8]
  01059:    	mov    QWORD PTR [rbx],rdi
  0105c:    	movq   xmm2,QWORD PTR [rsp]
  01061:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01067:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0106d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01073:    	add    rsp,0x20
  01077:    	test   rax,rax
  0107a:    	je     0x33c60
  01080:    	mov    QWORD PTR [rbp-0x78],rax
:00075 
:00077 %12 = %1.call dir()                  [<INVALID>]
  01084: 01 	sub    DWORD PTR [rip+0xa15],0x1        # 0x1aa0
  0108b:    	je     0x33c8b
  01091:    	sub    rsp,0x20
  01095:    	movq   QWORD PTR [rsp],xmm2
  0109a:    	movq   QWORD PTR [rsp+0x8],xmm4
  010a0:    	movq   QWORD PTR [rsp+0x10],xmm5
  010a6:    	movq   QWORD PTR [rsp+0x18],xmm6
  010ac:    	mov    rdi,QWORD PTR [rbp-0x30]
  010b0: 00 	movabs rax,0x5600b75a2280
  010ba:    	call   rax
  010bc:    	mov    r15d,eax
  010bf: 00 	cmp    r15d,DWORD PTR [rip+0x9e2]        # 0x1aa8
  010c6:    	jne    0x33cad
  010cc:    	mov    eax,DWORD PTR [rip+0xfffffffffffe54a9]        # 0xfffe657b
  010d2:    	cmp    DWORD PTR [rip+0x9cc],eax        # 0x1aa4
  010d8:    	jne    0x33cad
  010de:    	mov    rax,QWORD PTR [rbx]
  010e1:    	lea    rdi,[rsp-0x18]
  010e6:    	mov    QWORD PTR [rdi],rax
  010e9:    	mov    QWORD PTR [rbx],rdi
  010ec: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010f5:    	mov    QWORD PTR [rsp-0x38],rcx
  010fa:    	mov    rax,QWORD PTR [rbp-0x30]
  010fe:    	mov    QWORD PTR [rsp-0x38],rax
  01103: 00 	mov    rdi,0x0
  0110a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01113: 00 	movabs rax,0x0
  0111d:    	mov    QWORD PTR [rsp-0x28],rax
  01122: 00 	movabs r13,0x0
  0112c:    	call   0xfffe3a18
  01131:    	lea    rdi,[rbp-0x8]
  01135:    	mov    QWORD PTR [rbx],rdi
  01138:    	movq   xmm2,QWORD PTR [rsp]
  0113d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01143:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01149:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0114f:    	add    rsp,0x20
  01153:    	test   rax,rax
  01156:    	je     0x33d19
  0115c: ff 	mov    QWORD PTR [rbp-0x88],rax
:00078 
:00080 %11 = %12.call y()                   [<INVALID>]
  01163: 01 	sub    DWORD PTR [rip+0x942],0x1        # 0x1aac
  0116a:    	je     0x33d44
  01170:    	sub    rsp,0x20
  01174:    	movq   QWORD PTR [rsp],xmm2
  01179:    	movq   QWORD PTR [rsp+0x8],xmm4
  0117f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01185:    	movq   QWORD PTR [rsp+0x18],xmm6
  0118b: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01192: 00 	movabs rax,0x5600b75a2280
  0119c:    	call   rax
  0119e:    	mov    r15d,eax
  011a1: 00 	cmp    r15d,DWORD PTR [rip+0x90c]        # 0x1ab4
  011a8:    	jne    0x33d66
  011ae:    	mov    eax,DWORD PTR [rip+0xfffffffffffe53c7]        # 0xfffe657b
  011b4:    	cmp    DWORD PTR [rip+0x8f6],eax        # 0x1ab0
  011ba:    	jne    0x33d66
  011c0:    	mov    rax,QWORD PTR [rbx]
  011c3:    	lea    rdi,[rsp-0x18]
  011c8:    	mov    QWORD PTR [rdi],rax
  011cb:    	mov    QWORD PTR [rbx],rdi
  011ce: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011d7:    	mov    QWORD PTR [rsp-0x38],rcx
  011dc: ff 	mov    rax,QWORD PTR [rbp-0x88]
  011e3:    	mov    QWORD PTR [rsp-0x38],rax
  011e8: 00 	mov    rdi,0x0
  011ef: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011f8: 00 	movabs rax,0x0
  01202:    	mov    QWORD PTR [rsp-0x28],rax
  01207: 00 	movabs r13,0x0
  01211:    	call   0xfffe3a18
  01216:    	lea    rdi,[rbp-0x8]
  0121a:    	mov    QWORD PTR [rbx],rdi
  0121d:    	movq   xmm2,QWORD PTR [rsp]
  01222:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01228:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0122e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01234:    	add    rsp,0x20
  01238:    	test   rax,rax
  0123b:    	je     0x33dd5
  01241:    	mov    QWORD PTR [rbp-0x80],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  01245: 01 	sub    DWORD PTR [rip+0x86c],0x1        # 0x1ab8
  0124c:    	je     0x33e00
  01252:    	mov    rdi,QWORD PTR [rbp-0x58]
  01256:    	mov    rsi,QWORD PTR [rbp-0x80]
  0125a:    	sub    rsp,0x20
  0125e:    	movq   QWORD PTR [rsp],xmm2
  01263:    	movq   QWORD PTR [rsp+0x8],xmm4
  01269:    	movq   QWORD PTR [rsp+0x10],xmm5
  0126f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01275:    	mov    rdx,rdi
  01278:    	mov    rcx,rsi
  0127b:    	mov    rdi,rbx
  0127e:    	mov    rsi,r12
  01281: 00 	movabs rax,0x5600b7598f60
  0128b:    	call   rax
  0128d:    	movq   xmm2,QWORD PTR [rsp]
  01292:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01298:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0129e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012a4:    	add    rsp,0x20
  012a8: 00 	movabs r13,0x5600b92b7740
  012b2:    	test   rax,rax
  012b5:    	je     0xfffe3a53
  012bb:    	mov    QWORD PTR [rbp-0x80],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  012bf: 01 	sub    DWORD PTR [rip+0x7f6],0x1        # 0x1abc
  012c6:    	je     0x33e3e
  012cc:    	mov    rdi,QWORD PTR [rbp-0x78]
  012d0:    	mov    rsi,QWORD PTR [rbp-0x80]
  012d4:    	sub    rsp,0x20
  012d8:    	movq   QWORD PTR [rsp],xmm2
  012dd:    	movq   QWORD PTR [rsp+0x8],xmm4
  012e3:    	movq   QWORD PTR [rsp+0x10],xmm5
  012e9:    	movq   QWORD PTR [rsp+0x18],xmm6
  012ef:    	mov    rdx,rdi
  012f2:    	mov    rcx,rsi
  012f5:    	mov    rdi,rbx
  012f8:    	mov    rsi,r12
  012fb: 00 	movabs rax,0x5600b75970e0
  01305:    	call   rax
  01307:    	movq   xmm2,QWORD PTR [rsp]
  0130c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01312:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01318:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0131e:    	add    rsp,0x20
  01322: 00 	movabs r13,0x5600b92b7750
  0132c:    	test   rax,rax
  0132f:    	je     0xfffe3a53
  01335:    	mov    QWORD PTR [rbp-0x78],rax
:00085 %12 = %1.call org()                  [<INVALID>]
  01339: 01 	sub    DWORD PTR [rip+0x780],0x1        # 0x1ac0
  01340:    	je     0x33e7c
  01346:    	sub    rsp,0x20
  0134a:    	movq   QWORD PTR [rsp],xmm2
  0134f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01355:    	movq   QWORD PTR [rsp+0x10],xmm5
  0135b:    	movq   QWORD PTR [rsp+0x18],xmm6
  01361:    	mov    rdi,QWORD PTR [rbp-0x30]
  01365: 00 	movabs rax,0x5600b75a2280
  0136f:    	call   rax
  01371:    	mov    r15d,eax
  01374: 00 	cmp    r15d,DWORD PTR [rip+0x74d]        # 0x1ac8
  0137b:    	jne    0x33e9e
  01381:    	mov    eax,DWORD PTR [rip+0xfffffffffffe51f4]        # 0xfffe657b
  01387:    	cmp    DWORD PTR [rip+0x737],eax        # 0x1ac4
  0138d:    	jne    0x33e9e
  01393:    	mov    rax,QWORD PTR [rbx]
  01396:    	lea    rdi,[rsp-0x18]
  0139b:    	mov    QWORD PTR [rdi],rax
  0139e:    	mov    QWORD PTR [rbx],rdi
  013a1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  013aa:    	mov    QWORD PTR [rsp-0x38],rcx
  013af:    	mov    rax,QWORD PTR [rbp-0x30]
  013b3:    	mov    QWORD PTR [rsp-0x38],rax
  013b8: 00 	mov    rdi,0x0
  013bf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  013c8: 00 	movabs rax,0x0
  013d2:    	mov    QWORD PTR [rsp-0x28],rax
  013d7: 00 	movabs r13,0x0
  013e1:    	call   0xfffe3a18
  013e6:    	lea    rdi,[rbp-0x8]
  013ea:    	mov    QWORD PTR [rbx],rdi
  013ed:    	movq   xmm2,QWORD PTR [rsp]
  013f2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013f8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  013fe:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01404:    	add    rsp,0x20
  01408:    	test   rax,rax
  0140b:    	je     0x33f0a
  01411: ff 	mov    QWORD PTR [rbp-0x88],rax
:00086 
:00088 %11 = %12.call z()                   [<INVALID>]
  01418: 01 	sub    DWORD PTR [rip+0x6ad],0x1        # 0x1acc
  0141f:    	je     0x33f35
  01425:    	sub    rsp,0x20
  01429:    	movq   QWORD PTR [rsp],xmm2
  0142e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01434:    	movq   QWORD PTR [rsp+0x10],xmm5
  0143a:    	movq   QWORD PTR [rsp+0x18],xmm6
  01440: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01447: 00 	movabs rax,0x5600b75a2280
  01451:    	call   rax
  01453:    	mov    r15d,eax
  01456: 00 	cmp    r15d,DWORD PTR [rip+0x677]        # 0x1ad4
  0145d:    	jne    0x33f57
  01463:    	mov    eax,DWORD PTR [rip+0xfffffffffffe5112]        # 0xfffe657b
  01469:    	cmp    DWORD PTR [rip+0x661],eax        # 0x1ad0
  0146f:    	jne    0x33f57
  01475:    	mov    rax,QWORD PTR [rbx]
  01478:    	lea    rdi,[rsp-0x18]
  0147d:    	mov    QWORD PTR [rdi],rax
  01480:    	mov    QWORD PTR [rbx],rdi
  01483: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0148c:    	mov    QWORD PTR [rsp-0x38],rcx
  01491: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01498:    	mov    QWORD PTR [rsp-0x38],rax
  0149d: 00 	mov    rdi,0x0
  014a4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014ad: 00 	movabs rax,0x0
  014b7:    	mov    QWORD PTR [rsp-0x28],rax
  014bc: 00 	movabs r13,0x0
  014c6:    	call   0xfffe3a18
  014cb:    	lea    rdi,[rbp-0x8]
  014cf:    	mov    QWORD PTR [rbx],rdi
  014d2:    	movq   xmm2,QWORD PTR [rsp]
  014d7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014dd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  014e3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  014e9:    	add    rsp,0x20
  014ed:    	test   rax,rax
  014f0:    	je     0x33fc6
  014f6:    	mov    QWORD PTR [rbp-0x80],rax
:00089 
:00091 %13 = %1.call dir()                  [<INVALID>]
  014fa: 01 	sub    DWORD PTR [rip+0x5d7],0x1        # 0x1ad8
  01501:    	je     0x33ff1
  01507:    	sub    rsp,0x20
  0150b:    	movq   QWORD PTR [rsp],xmm2
  01510:    	movq   QWORD PTR [rsp+0x8],xmm4
  01516:    	movq   QWORD PTR [rsp+0x10],xmm5
  0151c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01522:    	mov    rdi,QWORD PTR [rbp-0x30]
  01526: 00 	movabs rax,0x5600b75a2280
  01530:    	call   rax
  01532:    	mov    r15d,eax
  01535: 00 	cmp    r15d,DWORD PTR [rip+0x5a4]        # 0x1ae0
  0153c:    	jne    0x34013
  01542:    	mov    eax,DWORD PTR [rip+0xfffffffffffe5033]        # 0xfffe657b
  01548:    	cmp    DWORD PTR [rip+0x58e],eax        # 0x1adc
  0154e:    	jne    0x34013
  01554:    	mov    rax,QWORD PTR [rbx]
  01557:    	lea    rdi,[rsp-0x18]
  0155c:    	mov    QWORD PTR [rdi],rax
  0155f:    	mov    QWORD PTR [rbx],rdi
  01562: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0156b:    	mov    QWORD PTR [rsp-0x38],rcx
  01570:    	mov    rax,QWORD PTR [rbp-0x30]
  01574:    	mov    QWORD PTR [rsp-0x38],rax
  01579: 00 	mov    rdi,0x0
  01580: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01589: 00 	movabs rax,0x0
  01593:    	mov    QWORD PTR [rsp-0x28],rax
  01598: 00 	movabs r13,0x0
  015a2:    	call   0xfffe3a18
  015a7:    	lea    rdi,[rbp-0x8]
  015ab:    	mov    QWORD PTR [rbx],rdi
  015ae:    	movq   xmm2,QWORD PTR [rsp]
  015b3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015b9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  015bf:    	movq   xmm6,QWORD PTR [rsp+0x18]
  015c5:    	add    rsp,0x20
  015c9:    	test   rax,rax
  015cc:    	je     0x3407f
  015d2: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 
:00094 %12 = %13.call z()                   [<INVALID>]
  015d9: 01 	sub    DWORD PTR [rip+0x504],0x1        # 0x1ae4
  015e0:    	je     0x340aa
  015e6:    	sub    rsp,0x20
  015ea:    	movq   QWORD PTR [rsp],xmm2
  015ef:    	movq   QWORD PTR [rsp+0x8],xmm4
  015f5:    	movq   QWORD PTR [rsp+0x10],xmm5
  015fb:    	movq   QWORD PTR [rsp+0x18],xmm6
  01601: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01608: 00 	movabs rax,0x5600b75a2280
  01612:    	call   rax
  01614:    	mov    r15d,eax
  01617: 00 	cmp    r15d,DWORD PTR [rip+0x4ce]        # 0x1aec
  0161e:    	jne    0x340cc
  01624:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4f51]        # 0xfffe657b
  0162a:    	cmp    DWORD PTR [rip+0x4b8],eax        # 0x1ae8
  01630:    	jne    0x340cc
  01636:    	mov    rax,QWORD PTR [rbx]
  01639:    	lea    rdi,[rsp-0x18]
  0163e:    	mov    QWORD PTR [rdi],rax
  01641:    	mov    QWORD PTR [rbx],rdi
  01644: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0164d:    	mov    QWORD PTR [rsp-0x38],rcx
  01652: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01659:    	mov    QWORD PTR [rsp-0x38],rax
  0165e: 00 	mov    rdi,0x0
  01665: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0166e: 00 	movabs rax,0x0
  01678:    	mov    QWORD PTR [rsp-0x28],rax
  0167d: 00 	movabs r13,0x0
  01687:    	call   0xfffe3a18
  0168c:    	lea    rdi,[rbp-0x8]
  01690:    	mov    QWORD PTR [rbx],rdi
  01693:    	movq   xmm2,QWORD PTR [rsp]
  01698:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0169e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  016a4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  016aa:    	add    rsp,0x20
  016ae:    	test   rax,rax
  016b1:    	je     0x3413b
  016b7: ff 	mov    QWORD PTR [rbp-0x88],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  016be: 01 	sub    DWORD PTR [rip+0x42b],0x1        # 0x1af0
  016c5:    	je     0x34166
  016cb:    	mov    rdi,QWORD PTR [rbp-0x58]
  016cf: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  016d6:    	sub    rsp,0x20
  016da:    	movq   QWORD PTR [rsp],xmm2
  016df:    	movq   QWORD PTR [rsp+0x8],xmm4
  016e5:    	movq   QWORD PTR [rsp+0x10],xmm5
  016eb:    	movq   QWORD PTR [rsp+0x18],xmm6
  016f1:    	mov    rdx,rdi
  016f4:    	mov    rcx,rsi
  016f7:    	mov    rdi,rbx
  016fa:    	mov    rsi,r12
  016fd: 00 	movabs rax,0x5600b7598f60
  01707:    	call   rax
  01709:    	movq   xmm2,QWORD PTR [rsp]
  0170e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01714:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0171a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01720:    	add    rsp,0x20
  01724: 00 	movabs r13,0x5600b92b7820
  0172e:    	test   rax,rax
  01731:    	je     0xfffe3a53
  01737: ff 	mov    QWORD PTR [rbp-0x88],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  0173e: 01 	sub    DWORD PTR [rip+0x3af],0x1        # 0x1af4
  01745:    	je     0x341a4
  0174b:    	mov    rdi,QWORD PTR [rbp-0x80]
  0174f: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  01756:    	sub    rsp,0x20
  0175a:    	movq   QWORD PTR [rsp],xmm2
  0175f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01765:    	movq   QWORD PTR [rsp+0x10],xmm5
  0176b:    	movq   QWORD PTR [rsp+0x18],xmm6
  01771:    	mov    rdx,rdi
  01774:    	mov    rcx,rsi
  01777:    	mov    rdi,rbx
  0177a:    	mov    rsi,r12
  0177d: 00 	movabs rax,0x5600b75970e0
  01787:    	call   rax
  01789:    	movq   xmm2,QWORD PTR [rsp]
  0178e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01794:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0179a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  017a0:    	add    rsp,0x20
  017a4: 00 	movabs r13,0x5600b92b7830
  017ae:    	test   rax,rax
  017b1:    	je     0xfffe3a53
  017b7:    	mov    QWORD PTR [rbp-0x80],rax
:00099 %7 = %8.call new(%9; 3)              [<INVALID>]
  017bb: 01 	sub    DWORD PTR [rip+0x336],0x1        # 0x1af8
  017c2:    	je     0x341e2
  017c8:    	sub    rsp,0x20
  017cc:    	movq   QWORD PTR [rsp],xmm2
  017d1:    	movq   QWORD PTR [rsp+0x8],xmm4
  017d7:    	movq   QWORD PTR [rsp+0x10],xmm5
  017dd:    	movq   QWORD PTR [rsp+0x18],xmm6
  017e3:    	mov    rdi,QWORD PTR [rbp-0x68]
  017e7: 00 	movabs rax,0x5600b75a2280
  017f1:    	call   rax
  017f3:    	mov    r15d,eax
  017f6: 00 	cmp    r15d,DWORD PTR [rip+0x303]        # 0x1b00
  017fd:    	jne    0x34204
  01803:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4d72]        # 0xfffe657b
  01809:    	cmp    DWORD PTR [rip+0x2ed],eax        # 0x1afc
  0180f:    	jne    0x34204
  01815:    	mov    rax,QWORD PTR [rbx]
  01818:    	lea    rdi,[rsp-0x18]
  0181d:    	mov    QWORD PTR [rdi],rax
  01820:    	mov    QWORD PTR [rbx],rdi
  01823: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0182c:    	mov    QWORD PTR [rsp-0x38],rcx
  01831:    	mov    rax,QWORD PTR [rbp-0x68]
  01835:    	mov    QWORD PTR [rsp-0x38],rax
  0183a: 00 	mov    rdi,0x3
  01841:    	mov    rax,QWORD PTR [rbp-0x70]
  01845:    	mov    QWORD PTR [rsp-0x40],rax
  0184a:    	mov    rax,QWORD PTR [rbp-0x78]
  0184e:    	mov    QWORD PTR [rsp-0x48],rax
  01853:    	mov    rax,QWORD PTR [rbp-0x80]
  01857:    	mov    QWORD PTR [rsp-0x50],rax
  0185c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01865: 00 	movabs rax,0x0
  0186f:    	mov    QWORD PTR [rsp-0x28],rax
  01874: 00 	movabs r13,0x0
  0187e:    	call   0xfffe3a18
  01883:    	lea    rdi,[rbp-0x8]
  01887:    	mov    QWORD PTR [rbx],rdi
  0188a:    	movq   xmm2,QWORD PTR [rsp]
  0188f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01895:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0189b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  018a1:    	add    rsp,0x20
  018a5:    	test   rax,rax
  018a8:    	je     0x34270
  018ae:    	mov    QWORD PTR [rbp-0x60],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [<INVALID>]
  018b2: 01 	sub    DWORD PTR [rip+0x24b],0x1        # 0x1b04
  018b9:    	je     0x3429b
  018bf:    	sub    rsp,0x20
  018c3:    	movq   QWORD PTR [rsp],xmm2
  018c8:    	movq   QWORD PTR [rsp+0x8],xmm4
  018ce:    	movq   QWORD PTR [rsp+0x10],xmm5
  018d4:    	movq   QWORD PTR [rsp+0x18],xmm6
  018da:    	mov    rdi,QWORD PTR [rbp-0x38]
  018de: 00 	movabs rax,0x5600b75a2280
  018e8:    	call   rax
  018ea:    	mov    r15d,eax
  018ed: 00 	cmp    r15d,DWORD PTR [rip+0x218]        # 0x1b0c
  018f4:    	jne    0x342bd
  018fa:    	mov    eax,DWORD PTR [rip+0xfffffffffffe4c7b]        # 0xfffe657b
  01900:    	cmp    DWORD PTR [rip+0x202],eax        # 0x1b08
  01906:    	jne    0x342bd
  0190c:    	mov    rax,QWORD PTR [rbx]
  0190f:    	lea    rdi,[rsp-0x18]
  01914:    	mov    QWORD PTR [rdi],rax
  01917:    	mov    QWORD PTR [rbx],rdi
  0191a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01923:    	mov    QWORD PTR [rsp-0x38],rcx
  01928:    	mov    rax,QWORD PTR [rbp-0x38]
  0192c:    	mov    QWORD PTR [rsp-0x38],rax
  01931: 00 	mov    rdi,0x1
  01938:    	mov    rax,QWORD PTR [rbp-0x60]
  0193c:    	mov    QWORD PTR [rsp-0x40],rax
  01941: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0194a: 00 	movabs rax,0x0
  01954:    	mov    QWORD PTR [rsp-0x28],rax
  01959: 00 	movabs r13,0x0
  01963:    	call   0xfffe3a18
  01968:    	lea    rdi,[rbp-0x8]
  0196c:    	mov    QWORD PTR [rbx],rdi
  0196f:    	movq   xmm2,QWORD PTR [rsp]
  01974:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0197a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01980:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01986:    	add    rsp,0x20
  0198a:    	test   rax,rax
  0198d:    	je     0x34329
:00103 
:00105 br =>:00106
  01993:    	jmp    0x34391
:00106 %7 = nil
  01998: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00107 ret %7
  019a0:    	mov    rax,QWORD PTR [rbp-0x60]
  019a4:    	leave  
  019a5:    	ret    
==> start whole compile: intersect FuncId(71) self_class:Plane start:[00000] bytecode:0x5600b92b7200
<== finished compile. elapsed:214.6µs
offset:Pos(123128) code: 6566 bytes  data: 362 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x2
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x40],rax
  00040:    	mov    QWORD PTR [rbp-0x48],rax
  00044:    	mov    QWORD PTR [rbp-0x50],rax
  00048:    	mov    QWORD PTR [rbp-0x58],rax
  0004c:    	mov    QWORD PTR [rbp-0x60],rax
  00050:    	mov    QWORD PTR [rbp-0x68],rax
  00054:    	mov    QWORD PTR [rbp-0x70],rax
  00058:    	mov    QWORD PTR [rbp-0x78],rax
  0005c:    	mov    QWORD PTR [rbp-0x80],rax
  00060: ff 	mov    QWORD PTR [rbp-0x88],rax
  00067: ff 	mov    QWORD PTR [rbp-0x90],rax
  0006e:    	mov    rdi,QWORD PTR [rbp-0x28]
  00072: 00 	test   rdi,0x7
  00079:    	jne    0x328a7
  0007f:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00083:    	jne    0x328a7
:00000 init reg_num:14 arg_num:2 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  00089:    	mov    rdi,QWORD PTR [rbp-0x28]
  0008d:    	mov    rax,QWORD PTR [rdi+0x10]
  00091:    	mov    QWORD PTR [rbp-0x60],rax
:00002 %8 = @n: Plane[IvarId(1)]
  00095:    	mov    rdi,QWORD PTR [rbp-0x28]
  00099:    	mov    rax,QWORD PTR [rdi+0x18]
  0009d:    	mov    QWORD PTR [rbp-0x68],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  000a1:    	mov    rdi,QWORD PTR [rbp-0x60]
  000a5: 00 	test   rdi,0x7
  000ac:    	jne    0x328b6
  000b2:    	cmp    DWORD PTR [rdi+0x4],0x28
  000b6:    	jne    0x328b6
  000bc: 26 	cmp    DWORD PTR [rip+0xfffffffffffe49a8],0x26        # 0xfffe4a6b
  000c3:    	jne    0x328b6
  000c9:    	mov    rax,QWORD PTR [rbx]
  000cc:    	lea    rdi,[rsp-0x18]
  000d1:    	mov    QWORD PTR [rdi],rax
  000d4:    	mov    QWORD PTR [rbx],rdi
  000d7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000e0:    	mov    QWORD PTR [rsp-0x38],rcx
  000e5:    	mov    rax,QWORD PTR [rbp-0x60]
  000e9:    	mov    QWORD PTR [rsp-0x38],rax
  000ee: 00 	mov    rdi,0x1
  000f5:    	mov    rax,QWORD PTR [rbp-0x68]
  000f9:    	mov    QWORD PTR [rsp-0x40],rax
  000fe: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00107: 05 	movabs rax,0x1000500000041
  00111:    	mov    QWORD PTR [rsp-0x28],rax
  00116: 00 	movabs r13,0x5600b92d48b0
  00120:    	call   0xfffe57be
  00125:    	lea    rdi,[rbp-0x8]
  00129:    	mov    QWORD PTR [rbx],rdi
  0012c: 00 	movabs r13,0x5600b92b7250
  00136:    	test   rax,rax
  00139:    	je     0xfffe1f43
  0013f:    	mov    QWORD PTR [rbp-0x40],rax
:00004 
:00006 %3 = neg %3                          [Float]
  00143:    	mov    rdi,QWORD PTR [rbp-0x40]
  00147: 00 	test   rdi,0x1
  0014e:    	jne    0x328c5
  00154: 00 	test   rdi,0x2
  0015b:    	je     0x197
  00161:    	xorps  xmm2,xmm2
  00164: 00 	movabs rax,0x8000000000000002
  0016e:    	cmp    rdi,rax
  00171:    	je     0x1a9
  00177:    	mov    rax,rdi
  0017a:    	sar    rax,0x3f
  0017e:    	add    rax,0x2
  00182:    	and    rdi,0xfffffffffffffffc
  00186:    	or     rdi,rax
  00189:    	rol    rdi,0x3d
  0018d:    	movq   xmm2,rdi
  00192:    	jmp    0x1a9
  00197:    	call   0xfffe1f7c
  0019c:    	test   rax,rax
  0019f:    	je     0x328c5
  001a5:    	movq   xmm2,xmm0
  001a9: 00 	xorps  xmm2,XMMWORD PTR [rip+0x17f8]        # 0x19a8
:00007 %7 = %1.call dir()                   [Ray]
  001b0:    	mov    rdi,QWORD PTR [rbp-0x30]
  001b4: 00 	test   rdi,0x7
  001bb:    	jne    0x328d4
  001c1:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001c5:    	jne    0x328d4
  001cb: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4899],0x26        # 0xfffe4a6b
  001d2:    	jne    0x328d4
  001d8:    	mov    esi,DWORD PTR [rip+0x17d6]        # 0x19b4
  001de:    	cmp    esi,0xffffffff
  001e1:    	je     0x328f0
  001e7:    	cmp    WORD PTR [rdi+0x2],0x3
  001ec:    	jne    0x205
  001f2:    	cmp    esi,0x6
  001f5:    	jge    0x205
  001fb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00200:    	jmp    0x223
  00205:    	sub    rsp,0x10
  00209:    	movq   QWORD PTR [rsp],xmm2
  0020e: 00 	movabs rax,0x5600b755dfe0
  00218:    	call   rax
  0021a:    	movq   xmm2,QWORD PTR [rsp]
  0021f:    	add    rsp,0x10
  00223:    	mov    QWORD PTR [rbp-0x60],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  00227:    	mov    rdi,QWORD PTR [rbp-0x28]
  0022b:    	mov    rax,QWORD PTR [rdi+0x18]
  0022f:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  00233:    	mov    rdi,QWORD PTR [rbp-0x60]
  00237: 00 	test   rdi,0x7
  0023e:    	jne    0x3292b
  00244:    	cmp    DWORD PTR [rdi+0x4],0x28
  00248:    	jne    0x3292b
  0024e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4816],0x26        # 0xfffe4a6b
  00255:    	jne    0x3292b
  0025b:    	sub    rsp,0x10
  0025f:    	movq   QWORD PTR [rsp],xmm2
  00264:    	mov    rax,QWORD PTR [rbx]
  00267:    	lea    rdi,[rsp-0x18]
  0026c:    	mov    QWORD PTR [rdi],rax
  0026f:    	mov    QWORD PTR [rbx],rdi
  00272: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0027b:    	mov    QWORD PTR [rsp-0x38],rcx
  00280:    	mov    rax,QWORD PTR [rbp-0x60]
  00284:    	mov    QWORD PTR [rsp-0x38],rax
  00289: 00 	mov    rdi,0x1
  00290:    	mov    rax,QWORD PTR [rbp-0x68]
  00294:    	mov    QWORD PTR [rsp-0x40],rax
  00299: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002a2: 05 	movabs rax,0x1000500000041
  002ac:    	mov    QWORD PTR [rsp-0x28],rax
  002b1: 00 	movabs r13,0x5600b92d48b0
  002bb:    	call   0xfffe57be
  002c0:    	lea    rdi,[rbp-0x8]
  002c4:    	mov    QWORD PTR [rbx],rdi
  002c7:    	movq   xmm2,QWORD PTR [rsp]
  002cc:    	add    rsp,0x10
  002d0: 00 	movabs r13,0x5600b92b72d0
  002da:    	test   rax,rax
  002dd:    	je     0xfffe1f43
  002e3:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %5 = %4
  002e7:    	mov    rax,QWORD PTR [rbp-0x48]
  002eb:    	mov    QWORD PTR [rbp-0x50],rax
:00015 %7 = literal[0.0]
  002ef: 00 	movq   xmm3,QWORD PTR [rip+0x16c1]        # 0x19b8
  002f7: 00 	movabs rax,0x8000000000000002
  00301:    	mov    QWORD PTR [rbp-0x60],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  00305:    	mov    rdi,QWORD PTR [rbp-0x48]
  00309: 00 	test   rdi,0x1
  00310:    	jne    0x32947
  00316: 00 	test   rdi,0x2
  0031d:    	je     0x359
  00323:    	xorps  xmm4,xmm4
  00326: 00 	movabs rax,0x8000000000000002
  00330:    	cmp    rdi,rax
  00333:    	je     0x36b
  00339:    	mov    rax,rdi
  0033c:    	sar    rax,0x3f
  00340:    	add    rax,0x2
  00344:    	and    rdi,0xfffffffffffffffc
  00348:    	or     rdi,rax
  0034b:    	rol    rdi,0x3d
  0034f:    	movq   xmm4,rdi
  00354:    	jmp    0x36b
  00359:    	call   0xfffe1f7c
  0035e:    	test   rax,rax
  00361:    	je     0x32947
  00367:    	movq   xmm4,xmm0
  0036b:    	ucomisd xmm4,xmm3
  0036f:    	jae    0x32963
:00018 %5 = %4
:00019 %5 = neg %5                          [Float]
  00375:    	movq   xmm5,xmm4
  00379: 00 	xorps  xmm5,XMMWORD PTR [rip+0x1648]        # 0x19c8
:00020 br =>:00021
  00380:    	jmp    0x32989
:00021 %7 = literal[1e-17]
  00385: 00 	movq   xmm3,QWORD PTR [rip+0x164b]        # 0x19d8
  0038d: aa 	movabs rax,0xe33877aa3236a4ba
  00397:    	mov    QWORD PTR [rbp-0x60],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  0039b:    	mov    rdi,QWORD PTR [rbp-0x50]
  0039f: 00 	test   rdi,0x1
  003a6:    	jne    0x329bc
  003ac: 00 	test   rdi,0x2
  003b3:    	je     0x3ef
  003b9:    	xorps  xmm5,xmm5
  003bc: 00 	movabs rax,0x8000000000000002
  003c6:    	cmp    rdi,rax
  003c9:    	je     0x401
  003cf:    	mov    rax,rdi
  003d2:    	sar    rax,0x3f
  003d6:    	add    rax,0x2
  003da:    	and    rdi,0xfffffffffffffffc
  003de:    	or     rdi,rax
  003e1:    	rol    rdi,0x3d
  003e5:    	movq   xmm5,rdi
  003ea:    	jmp    0x401
  003ef:    	call   0xfffe1f7c
  003f4:    	test   rax,rax
  003f7:    	je     0x329bc
  003fd:    	movq   xmm5,xmm0
  00401:    	ucomisd xmm5,xmm3
  00405:    	jae    0x419
:00024 %7 = nil
  0040b: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00025 ret %7
  00413:    	mov    rax,QWORD PTR [rbp-0x60]
  00417:    	leave  
  00418:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  00419:    	mov    rdi,QWORD PTR [rbp-0x30]
  0041d: 00 	test   rdi,0x7
  00424:    	jne    0x329d8
  0042a:    	cmp    DWORD PTR [rdi+0x4],0x2e
  0042e:    	jne    0x329d8
  00434: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4630],0x26        # 0xfffe4a6b
  0043b:    	jne    0x329d8
  00441:    	mov    esi,DWORD PTR [rip+0x159d]        # 0x19e4
  00447:    	cmp    esi,0xffffffff
  0044a:    	je     0x329f4
  00450:    	cmp    WORD PTR [rdi+0x2],0x3
  00455:    	jne    0x46e
  0045b:    	cmp    esi,0x6
  0045e:    	jge    0x46e
  00464:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00469:    	jmp    0x4b0
  0046e:    	sub    rsp,0x20
  00472:    	movq   QWORD PTR [rsp],xmm2
  00477:    	movq   QWORD PTR [rsp+0x8],xmm3
  0047d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00483:    	movq   QWORD PTR [rsp+0x18],xmm5
  00489: 00 	movabs rax,0x5600b755dfe0
  00493:    	call   rax
  00495:    	movq   xmm2,QWORD PTR [rsp]
  0049a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004a0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004a6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  004ac:    	add    rsp,0x20
  004b0:    	mov    QWORD PTR [rbp-0x68],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  004b4:    	mov    rdi,QWORD PTR [rbp-0x28]
  004b8:    	mov    rax,QWORD PTR [rdi+0x18]
  004bc:    	mov    QWORD PTR [rbp-0x70],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  004c0:    	mov    rdi,QWORD PTR [rbp-0x68]
  004c4: 00 	test   rdi,0x7
  004cb:    	jne    0x32a53
  004d1:    	cmp    DWORD PTR [rdi+0x4],0x28
  004d5:    	jne    0x32a53
  004db: 26 	cmp    DWORD PTR [rip+0xfffffffffffe4589],0x26        # 0xfffe4a6b
  004e2:    	jne    0x32a53
  004e8:    	sub    rsp,0x20
  004ec:    	movq   QWORD PTR [rsp],xmm2
  004f1:    	movq   QWORD PTR [rsp+0x8],xmm4
  004f7:    	movq   QWORD PTR [rsp+0x10],xmm5
  004fd:    	mov    rax,QWORD PTR [rbx]
  00500:    	lea    rdi,[rsp-0x18]
  00505:    	mov    QWORD PTR [rdi],rax
  00508:    	mov    QWORD PTR [rbx],rdi
  0050b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00514:    	mov    QWORD PTR [rsp-0x38],rcx
  00519:    	mov    rax,QWORD PTR [rbp-0x68]
  0051d:    	mov    QWORD PTR [rsp-0x38],rax
  00522: 00 	mov    rdi,0x1
  00529:    	mov    rax,QWORD PTR [rbp-0x70]
  0052d:    	mov    QWORD PTR [rsp-0x40],rax
  00532: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0053b: 05 	movabs rax,0x1000500000041
  00545:    	mov    QWORD PTR [rsp-0x28],rax
  0054a: 00 	movabs r13,0x5600b92d48b0
  00554:    	call   0xfffe57be
  00559:    	lea    rdi,[rbp-0x8]
  0055d:    	mov    QWORD PTR [rbx],rdi
  00560:    	movq   xmm2,QWORD PTR [rsp]
  00565:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0056b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00571:    	add    rsp,0x20
  00575: 00 	movabs r13,0x5600b92b7410
  0057f:    	test   rax,rax
  00582:    	je     0xfffe1f43
  00588:    	mov    QWORD PTR [rbp-0x60],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  0058c:    	mov    rdi,QWORD PTR [rbp-0x60]
  00590: 00 	test   rdi,0x1
  00597:    	jne    0x32a6f
  0059d: 00 	test   rdi,0x2
  005a4:    	je     0x5e0
  005aa:    	xorps  xmm3,xmm3
  005ad: 00 	movabs rax,0x8000000000000002
  005b7:    	cmp    rdi,rax
  005ba:    	je     0x5f2
  005c0:    	mov    rax,rdi
  005c3:    	sar    rax,0x3f
  005c7:    	add    rax,0x2
  005cb:    	and    rdi,0xfffffffffffffffc
  005cf:    	or     rdi,rax
  005d2:    	rol    rdi,0x3d
  005d6:    	movq   xmm3,rdi
  005db:    	jmp    0x5f2
  005e0:    	call   0xfffe1f7c
  005e5:    	test   rax,rax
  005e8:    	je     0x32a6f
  005ee:    	movq   xmm3,xmm0
  005f2:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  005f6: 00 	xorps  xmm3,XMMWORD PTR [rip+0x13eb]        # 0x19e8
:00036 %6 = %7 / %4                         [Float][Float]
  005fd:    	movq   xmm6,xmm3
  00601:    	movq   rax,xmm4
  00606:    	test   rax,rax
  00609:    	je     0xfffe1f68
  0060f:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  00613: 00 	movq   xmm3,QWORD PTR [rip+0x13dd]        # 0x19f8
  0061b: 00 	movabs rax,0x8000000000000002
  00625:    	mov    QWORD PTR [rbp-0x60],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  00629:    	ucomisd xmm6,xmm3
  0062d:    	jbe    0x339e8
:00040 %7 = %2.call t()                     [<INVALID>]
  00633: 01 	sub    DWORD PTR [rip+0x13c6],0x1        # 0x1a00
  0063a:    	je     0x32ab4
  00640:    	sub    rsp,0x20
  00644:    	movq   QWORD PTR [rsp],xmm2
  00649:    	movq   QWORD PTR [rsp+0x8],xmm4
  0064f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00655:    	movq   QWORD PTR [rsp+0x18],xmm6
  0065b:    	mov    rdi,QWORD PTR [rbp-0x38]
  0065f: 00 	movabs rax,0x5600b75a2280
  00669:    	call   rax
  0066b:    	mov    r15d,eax
  0066e: 00 	cmp    r15d,DWORD PTR [rip+0x1393]        # 0x1a08
  00675:    	jne    0x32ad6
  0067b:    	mov    eax,DWORD PTR [rip+0xfffffffffffe43ea]        # 0xfffe4a6b
  00681:    	cmp    DWORD PTR [rip+0x137d],eax        # 0x1a04
  00687:    	jne    0x32ad6
  0068d:    	mov    rax,QWORD PTR [rbx]
  00690:    	lea    rdi,[rsp-0x18]
  00695:    	mov    QWORD PTR [rdi],rax
  00698:    	mov    QWORD PTR [rbx],rdi
  0069b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  006a4:    	mov    QWORD PTR [rsp-0x38],rcx
  006a9:    	mov    rax,QWORD PTR [rbp-0x38]
  006ad:    	mov    QWORD PTR [rsp-0x38],rax
  006b2: 00 	mov    rdi,0x0
  006b9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006c2: 00 	movabs rax,0x0
  006cc:    	mov    QWORD PTR [rsp-0x28],rax
  006d1: 00 	movabs r13,0x0
  006db:    	call   0xfffe1f08
  006e0:    	lea    rdi,[rbp-0x8]
  006e4:    	mov    QWORD PTR [rbx],rdi
  006e7:    	movq   xmm2,QWORD PTR [rsp]
  006ec:    	movq   xmm4,QWORD PTR [rsp+0x8]
  006f2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006f8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006fe:    	add    rsp,0x20
  00702:    	test   rax,rax
  00705:    	je     0x32b42
  0070b:    	mov    QWORD PTR [rbp-0x60],rax
:00041 
:00043 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00044 condnotbr _%7 =>:00106
  0070f:    	movq   xmm0,xmm6
  00713:    	call   0xfffe206f
  00718:    	mov    QWORD PTR [rbp-0x58],rax
  0071c:    	mov    rdi,QWORD PTR [rbp-0x58]
  00720:    	mov    rsi,QWORD PTR [rbp-0x60]
  00724: 00 	test   rdi,0x1
  0072b:    	je     0x32b51
  00731: 00 	test   rsi,0x1
  00738:    	je     0x32b51
  0073e:    	cmp    rdi,rsi
  00741:    	jge    0x33a1b
:00045 %7 = literal[true]
  00747: 00 	mov    rax,0x1c
  0074e:    	mov    QWORD PTR [rbp-0x60],rax
:00046 _ = %2.call hit=(%7; 1)              [<INVALID>]
  00752: 01 	sub    DWORD PTR [rip+0x12b3],0x1        # 0x1a0c
  00759:    	je     0x32bc2
  0075f:    	sub    rsp,0x20
  00763:    	movq   QWORD PTR [rsp],xmm2
  00768:    	movq   QWORD PTR [rsp+0x8],xmm4
  0076e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00774:    	movq   QWORD PTR [rsp+0x18],xmm6
  0077a:    	mov    rdi,QWORD PTR [rbp-0x38]
  0077e: 00 	movabs rax,0x5600b75a2280
  00788:    	call   rax
  0078a:    	mov    r15d,eax
  0078d: 00 	cmp    r15d,DWORD PTR [rip+0x1280]        # 0x1a14
  00794:    	jne    0x32be4
  0079a:    	mov    eax,DWORD PTR [rip+0xfffffffffffe42cb]        # 0xfffe4a6b
  007a0:    	cmp    DWORD PTR [rip+0x126a],eax        # 0x1a10
  007a6:    	jne    0x32be4
  007ac:    	mov    rax,QWORD PTR [rbx]
  007af:    	lea    rdi,[rsp-0x18]
  007b4:    	mov    QWORD PTR [rdi],rax
  007b7:    	mov    QWORD PTR [rbx],rdi
  007ba: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007c3:    	mov    QWORD PTR [rsp-0x38],rcx
  007c8:    	mov    rax,QWORD PTR [rbp-0x38]
  007cc:    	mov    QWORD PTR [rsp-0x38],rax
  007d1: 00 	mov    rdi,0x1
  007d8:    	mov    rax,QWORD PTR [rbp-0x60]
  007dc:    	mov    QWORD PTR [rsp-0x40],rax
  007e1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  007ea: 00 	movabs rax,0x0
  007f4:    	mov    QWORD PTR [rsp-0x28],rax
  007f9: 00 	movabs r13,0x0
  00803:    	call   0xfffe1f08
  00808:    	lea    rdi,[rbp-0x8]
  0080c:    	mov    QWORD PTR [rbx],rdi
  0080f:    	movq   xmm2,QWORD PTR [rsp]
  00814:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0081a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00820:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00826:    	add    rsp,0x20
  0082a:    	test   rax,rax
  0082d:    	je     0x32c50
:00047 
:00049 _ = %2.call t=(%6; 1)                [<INVALID>]
  00833: 01 	sub    DWORD PTR [rip+0x11de],0x1        # 0x1a18
  0083a:    	je     0x32c7b
  00840:    	sub    rsp,0x20
  00844:    	movq   QWORD PTR [rsp],xmm2
  00849:    	movq   QWORD PTR [rsp+0x8],xmm4
  0084f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00855:    	movq   QWORD PTR [rsp+0x18],xmm6
  0085b:    	mov    rdi,QWORD PTR [rbp-0x38]
  0085f: 00 	movabs rax,0x5600b75a2280
  00869:    	call   rax
  0086b:    	mov    r15d,eax
  0086e: 00 	cmp    r15d,DWORD PTR [rip+0x11ab]        # 0x1a20
  00875:    	jne    0x32c9d
  0087b:    	mov    eax,DWORD PTR [rip+0xfffffffffffe41ea]        # 0xfffe4a6b
  00881:    	cmp    DWORD PTR [rip+0x1195],eax        # 0x1a1c
  00887:    	jne    0x32c9d
  0088d:    	mov    rax,QWORD PTR [rbx]
  00890:    	lea    rdi,[rsp-0x18]
  00895:    	mov    QWORD PTR [rdi],rax
  00898:    	mov    QWORD PTR [rbx],rdi
  0089b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008a4:    	mov    QWORD PTR [rsp-0x38],rcx
  008a9:    	mov    rax,QWORD PTR [rbp-0x38]
  008ad:    	mov    QWORD PTR [rsp-0x38],rax
  008b2: 00 	mov    rdi,0x1
  008b9:    	mov    rax,QWORD PTR [rbp-0x58]
  008bd:    	mov    QWORD PTR [rsp-0x40],rax
  008c2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  008cb: 00 	movabs rax,0x0
  008d5:    	mov    QWORD PTR [rsp-0x28],rax
  008da: 00 	movabs r13,0x0
  008e4:    	call   0xfffe1f08
  008e9:    	lea    rdi,[rbp-0x8]
  008ed:    	mov    QWORD PTR [rbx],rdi
  008f0:    	movq   xmm2,QWORD PTR [rsp]
  008f5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008fb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00901:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00907:    	add    rsp,0x20
  0090b:    	test   rax,rax
  0090e:    	je     0x32d09
:00050 
:00052 %7 = @n: <INVALID>[IvarId(0)]
  00914:    	mov    rdi,QWORD PTR [rbp-0x28]
  00918:    	sub    rsp,0x20
  0091c:    	movq   QWORD PTR [rsp],xmm2
  00921:    	movq   QWORD PTR [rsp+0x8],xmm4
  00927:    	movq   QWORD PTR [rsp+0x10],xmm5
  0092d:    	movq   QWORD PTR [rsp+0x18],xmm6
  00933: 00 	mov    rsi,0x8c
  0093a:    	mov    rdx,r12
  0093d: 00 	movabs rax,0x5600b75c5460
  00947:    	call   rax
  00949:    	movq   xmm2,QWORD PTR [rsp]
  0094e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00954:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0095a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00960:    	add    rsp,0x20
  00964:    	mov    QWORD PTR [rbp-0x60],rax
:00053 _ = %2.call n=(%7; 1)                [<INVALID>]
  00968: 01 	sub    DWORD PTR [rip+0x10b5],0x1        # 0x1a24
  0096f:    	je     0x32d34
  00975:    	sub    rsp,0x20
  00979:    	movq   QWORD PTR [rsp],xmm2
  0097e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00984:    	movq   QWORD PTR [rsp+0x10],xmm5
  0098a:    	movq   QWORD PTR [rsp+0x18],xmm6
  00990:    	mov    rdi,QWORD PTR [rbp-0x38]
  00994: 00 	movabs rax,0x5600b75a2280
  0099e:    	call   rax
  009a0:    	mov    r15d,eax
  009a3: 00 	cmp    r15d,DWORD PTR [rip+0x1082]        # 0x1a2c
  009aa:    	jne    0x32d56
  009b0:    	mov    eax,DWORD PTR [rip+0xfffffffffffe40b5]        # 0xfffe4a6b
  009b6:    	cmp    DWORD PTR [rip+0x106c],eax        # 0x1a28
  009bc:    	jne    0x32d56
  009c2:    	mov    rax,QWORD PTR [rbx]
  009c5:    	lea    rdi,[rsp-0x18]
  009ca:    	mov    QWORD PTR [rdi],rax
  009cd:    	mov    QWORD PTR [rbx],rdi
  009d0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009d9:    	mov    QWORD PTR [rsp-0x38],rcx
  009de:    	mov    rax,QWORD PTR [rbp-0x38]
  009e2:    	mov    QWORD PTR [rsp-0x38],rax
  009e7: 00 	mov    rdi,0x1
  009ee:    	mov    rax,QWORD PTR [rbp-0x60]
  009f2:    	mov    QWORD PTR [rsp-0x40],rax
  009f7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a00: 00 	movabs rax,0x0
  00a0a:    	mov    QWORD PTR [rsp-0x28],rax
  00a0f: 00 	movabs r13,0x0
  00a19:    	call   0xfffe1f08
  00a1e:    	lea    rdi,[rbp-0x8]
  00a22:    	mov    QWORD PTR [rbx],rdi
  00a25:    	movq   xmm2,QWORD PTR [rsp]
  00a2a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a30:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a36:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a3c:    	add    rsp,0x20
  00a40:    	test   rax,rax
  00a43:    	je     0x32dc2
:00054 
:00056 %8 = const[Vec]                      [<INVALID>]
  00a49: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe4028]        # 0xfffe4a78
  00a50: 00 	cmp    rax,QWORD PTR [rip+0xff1]        # 0x1a48
  00a57:    	jne    0x32dd1
  00a5d: 00 	mov    rax,QWORD PTR [rip+0xfd4]        # 0x1a38
  00a64:    	mov    QWORD PTR [rbp-0x68],rax
:00057 %10 = %1.call org()                  [<INVALID>]
  00a68: 01 	sub    DWORD PTR [rip+0xfe1],0x1        # 0x1a50
  00a6f:    	je     0x32e69
  00a75:    	sub    rsp,0x20
  00a79:    	movq   QWORD PTR [rsp],xmm2
  00a7e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a84:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a8a:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a90:    	mov    rdi,QWORD PTR [rbp-0x30]
  00a94: 00 	movabs rax,0x5600b75a2280
  00a9e:    	call   rax
  00aa0:    	mov    r15d,eax
  00aa3: 00 	cmp    r15d,DWORD PTR [rip+0xfae]        # 0x1a58
  00aaa:    	jne    0x32e8b
  00ab0:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3fb5]        # 0xfffe4a6b
  00ab6:    	cmp    DWORD PTR [rip+0xf98],eax        # 0x1a54
  00abc:    	jne    0x32e8b
  00ac2:    	mov    rax,QWORD PTR [rbx]
  00ac5:    	lea    rdi,[rsp-0x18]
  00aca:    	mov    QWORD PTR [rdi],rax
  00acd:    	mov    QWORD PTR [rbx],rdi
  00ad0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ad9:    	mov    QWORD PTR [rsp-0x38],rcx
  00ade:    	mov    rax,QWORD PTR [rbp-0x30]
  00ae2:    	mov    QWORD PTR [rsp-0x38],rax
  00ae7: 00 	mov    rdi,0x0
  00aee: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00af7: 00 	movabs rax,0x0
  00b01:    	mov    QWORD PTR [rsp-0x28],rax
  00b06: 00 	movabs r13,0x0
  00b10:    	call   0xfffe1f08
  00b15:    	lea    rdi,[rbp-0x8]
  00b19:    	mov    QWORD PTR [rbx],rdi
  00b1c:    	movq   xmm2,QWORD PTR [rsp]
  00b21:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b27:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b2d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b33:    	add    rsp,0x20
  00b37:    	test   rax,rax
  00b3a:    	je     0x32ef7
  00b40:    	mov    QWORD PTR [rbp-0x78],rax
:00058 
:00060 %9 = %10.call x()                    [<INVALID>]
  00b44: 01 	sub    DWORD PTR [rip+0xf11],0x1        # 0x1a5c
  00b4b:    	je     0x32f22
  00b51:    	sub    rsp,0x20
  00b55:    	movq   QWORD PTR [rsp],xmm2
  00b5a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b60:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b66:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b6c:    	mov    rdi,QWORD PTR [rbp-0x78]
  00b70: 00 	movabs rax,0x5600b75a2280
  00b7a:    	call   rax
  00b7c:    	mov    r15d,eax
  00b7f: 00 	cmp    r15d,DWORD PTR [rip+0xede]        # 0x1a64
  00b86:    	jne    0x32f44
  00b8c:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3ed9]        # 0xfffe4a6b
  00b92:    	cmp    DWORD PTR [rip+0xec8],eax        # 0x1a60
  00b98:    	jne    0x32f44
  00b9e:    	mov    rax,QWORD PTR [rbx]
  00ba1:    	lea    rdi,[rsp-0x18]
  00ba6:    	mov    QWORD PTR [rdi],rax
  00ba9:    	mov    QWORD PTR [rbx],rdi
  00bac: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00bb5:    	mov    QWORD PTR [rsp-0x38],rcx
  00bba:    	mov    rax,QWORD PTR [rbp-0x78]
  00bbe:    	mov    QWORD PTR [rsp-0x38],rax
  00bc3: 00 	mov    rdi,0x0
  00bca: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00bd3: 00 	movabs rax,0x0
  00bdd:    	mov    QWORD PTR [rsp-0x28],rax
  00be2: 00 	movabs r13,0x0
  00bec:    	call   0xfffe1f08
  00bf1:    	lea    rdi,[rbp-0x8]
  00bf5:    	mov    QWORD PTR [rbx],rdi
  00bf8:    	movq   xmm2,QWORD PTR [rsp]
  00bfd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c03:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c09:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c0f:    	add    rsp,0x20
  00c13:    	test   rax,rax
  00c16:    	je     0x32fb0
  00c1c:    	mov    QWORD PTR [rbp-0x70],rax
:00061 
:00063 %11 = %1.call dir()                  [<INVALID>]
  00c20: 01 	sub    DWORD PTR [rip+0xe41],0x1        # 0x1a68
  00c27:    	je     0x32fdb
  00c2d:    	sub    rsp,0x20
  00c31:    	movq   QWORD PTR [rsp],xmm2
  00c36:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c3c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c42:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c48:    	mov    rdi,QWORD PTR [rbp-0x30]
  00c4c: 00 	movabs rax,0x5600b75a2280
  00c56:    	call   rax
  00c58:    	mov    r15d,eax
  00c5b: 00 	cmp    r15d,DWORD PTR [rip+0xe0e]        # 0x1a70
  00c62:    	jne    0x32ffd
  00c68:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3dfd]        # 0xfffe4a6b
  00c6e:    	cmp    DWORD PTR [rip+0xdf8],eax        # 0x1a6c
  00c74:    	jne    0x32ffd
  00c7a:    	mov    rax,QWORD PTR [rbx]
  00c7d:    	lea    rdi,[rsp-0x18]
  00c82:    	mov    QWORD PTR [rdi],rax
  00c85:    	mov    QWORD PTR [rbx],rdi
  00c88: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c91:    	mov    QWORD PTR [rsp-0x38],rcx
  00c96:    	mov    rax,QWORD PTR [rbp-0x30]
  00c9a:    	mov    QWORD PTR [rsp-0x38],rax
  00c9f: 00 	mov    rdi,0x0
  00ca6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00caf: 00 	movabs rax,0x0
  00cb9:    	mov    QWORD PTR [rsp-0x28],rax
  00cbe: 00 	movabs r13,0x0
  00cc8:    	call   0xfffe1f08
  00ccd:    	lea    rdi,[rbp-0x8]
  00cd1:    	mov    QWORD PTR [rbx],rdi
  00cd4:    	movq   xmm2,QWORD PTR [rsp]
  00cd9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00cdf:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ce5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ceb:    	add    rsp,0x20
  00cef:    	test   rax,rax
  00cf2:    	je     0x33069
  00cf8:    	mov    QWORD PTR [rbp-0x80],rax
:00064 
:00066 %10 = %11.call x()                   [<INVALID>]
  00cfc: 01 	sub    DWORD PTR [rip+0xd71],0x1        # 0x1a74
  00d03:    	je     0x33094
  00d09:    	sub    rsp,0x20
  00d0d:    	movq   QWORD PTR [rsp],xmm2
  00d12:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d18:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d1e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d24:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d28: 00 	movabs rax,0x5600b75a2280
  00d32:    	call   rax
  00d34:    	mov    r15d,eax
  00d37: 00 	cmp    r15d,DWORD PTR [rip+0xd3e]        # 0x1a7c
  00d3e:    	jne    0x330b6
  00d44:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3d21]        # 0xfffe4a6b
  00d4a:    	cmp    DWORD PTR [rip+0xd28],eax        # 0x1a78
  00d50:    	jne    0x330b6
  00d56:    	mov    rax,QWORD PTR [rbx]
  00d59:    	lea    rdi,[rsp-0x18]
  00d5e:    	mov    QWORD PTR [rdi],rax
  00d61:    	mov    QWORD PTR [rbx],rdi
  00d64: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d6d:    	mov    QWORD PTR [rsp-0x38],rcx
  00d72:    	mov    rax,QWORD PTR [rbp-0x80]
  00d76:    	mov    QWORD PTR [rsp-0x38],rax
  00d7b: 00 	mov    rdi,0x0
  00d82: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d8b: 00 	movabs rax,0x0
  00d95:    	mov    QWORD PTR [rsp-0x28],rax
  00d9a: 00 	movabs r13,0x0
  00da4:    	call   0xfffe1f08
  00da9:    	lea    rdi,[rbp-0x8]
  00dad:    	mov    QWORD PTR [rbx],rdi
  00db0:    	movq   xmm2,QWORD PTR [rsp]
  00db5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00dbb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00dc1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00dc7:    	add    rsp,0x20
  00dcb:    	test   rax,rax
  00dce:    	je     0x33122
  00dd4:    	mov    QWORD PTR [rbp-0x78],rax
:00067 
:00069 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  00dd8: 01 	sub    DWORD PTR [rip+0xca1],0x1        # 0x1a80
  00ddf:    	je     0x3314d
  00de5:    	mov    rdi,QWORD PTR [rbp-0x58]
  00de9:    	mov    rsi,QWORD PTR [rbp-0x78]
  00ded:    	sub    rsp,0x20
  00df1:    	movq   QWORD PTR [rsp],xmm2
  00df6:    	movq   QWORD PTR [rsp+0x8],xmm4
  00dfc:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e02:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e08:    	mov    rdx,rdi
  00e0b:    	mov    rcx,rsi
  00e0e:    	mov    rdi,rbx
  00e11:    	mov    rsi,r12
  00e14: 00 	movabs rax,0x5600b7598f60
  00e1e:    	call   rax
  00e20:    	movq   xmm2,QWORD PTR [rsp]
  00e25:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e2b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e31:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e37:    	add    rsp,0x20
  00e3b: 00 	movabs r13,0x5600b92b7660
  00e45:    	test   rax,rax
  00e48:    	je     0xfffe1f43
  00e4e:    	mov    QWORD PTR [rbp-0x78],rax
:00070 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  00e52: 01 	sub    DWORD PTR [rip+0xc2b],0x1        # 0x1a84
  00e59:    	je     0x3318b
  00e5f:    	mov    rdi,QWORD PTR [rbp-0x70]
  00e63:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e67:    	sub    rsp,0x20
  00e6b:    	movq   QWORD PTR [rsp],xmm2
  00e70:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e76:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e7c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e82:    	mov    rdx,rdi
  00e85:    	mov    rcx,rsi
  00e88:    	mov    rdi,rbx
  00e8b:    	mov    rsi,r12
  00e8e: 00 	movabs rax,0x5600b75970e0
  00e98:    	call   rax
  00e9a:    	movq   xmm2,QWORD PTR [rsp]
  00e9f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ea5:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00eab:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00eb1:    	add    rsp,0x20
  00eb5: 00 	movabs r13,0x5600b92b7670
  00ebf:    	test   rax,rax
  00ec2:    	je     0xfffe1f43
  00ec8:    	mov    QWORD PTR [rbp-0x70],rax
:00071 %11 = %1.call org()                  [<INVALID>]
  00ecc: 01 	sub    DWORD PTR [rip+0xbb5],0x1        # 0x1a88
  00ed3:    	je     0x331c9
  00ed9:    	sub    rsp,0x20
  00edd:    	movq   QWORD PTR [rsp],xmm2
  00ee2:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ee8:    	movq   QWORD PTR [rsp+0x10],xmm5
  00eee:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ef4:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ef8: 00 	movabs rax,0x5600b75a2280
  00f02:    	call   rax
  00f04:    	mov    r15d,eax
  00f07: 00 	cmp    r15d,DWORD PTR [rip+0xb82]        # 0x1a90
  00f0e:    	jne    0x331eb
  00f14:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3b51]        # 0xfffe4a6b
  00f1a:    	cmp    DWORD PTR [rip+0xb6c],eax        # 0x1a8c
  00f20:    	jne    0x331eb
  00f26:    	mov    rax,QWORD PTR [rbx]
  00f29:    	lea    rdi,[rsp-0x18]
  00f2e:    	mov    QWORD PTR [rdi],rax
  00f31:    	mov    QWORD PTR [rbx],rdi
  00f34: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f3d:    	mov    QWORD PTR [rsp-0x38],rcx
  00f42:    	mov    rax,QWORD PTR [rbp-0x30]
  00f46:    	mov    QWORD PTR [rsp-0x38],rax
  00f4b: 00 	mov    rdi,0x0
  00f52: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f5b: 00 	movabs rax,0x0
  00f65:    	mov    QWORD PTR [rsp-0x28],rax
  00f6a: 00 	movabs r13,0x0
  00f74:    	call   0xfffe1f08
  00f79:    	lea    rdi,[rbp-0x8]
  00f7d:    	mov    QWORD PTR [rbx],rdi
  00f80:    	movq   xmm2,QWORD PTR [rsp]
  00f85:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f8b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f91:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f97:    	add    rsp,0x20
  00f9b:    	test   rax,rax
  00f9e:    	je     0x33257
  00fa4:    	mov    QWORD PTR [rbp-0x80],rax
:00072 
:00074 %10 = %11.call y()                   [<INVALID>]
  00fa8: 01 	sub    DWORD PTR [rip+0xae5],0x1        # 0x1a94
  00faf:    	je     0x33282
  00fb5:    	sub    rsp,0x20
  00fb9:    	movq   QWORD PTR [rsp],xmm2
  00fbe:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fc4:    	movq   QWORD PTR [rsp+0x10],xmm5
  00fca:    	movq   QWORD PTR [rsp+0x18],xmm6
  00fd0:    	mov    rdi,QWORD PTR [rbp-0x80]
  00fd4: 00 	movabs rax,0x5600b75a2280
  00fde:    	call   rax
  00fe0:    	mov    r15d,eax
  00fe3: 00 	cmp    r15d,DWORD PTR [rip+0xab2]        # 0x1a9c
  00fea:    	jne    0x332a4
  00ff0:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3a75]        # 0xfffe4a6b
  00ff6:    	cmp    DWORD PTR [rip+0xa9c],eax        # 0x1a98
  00ffc:    	jne    0x332a4
  01002:    	mov    rax,QWORD PTR [rbx]
  01005:    	lea    rdi,[rsp-0x18]
  0100a:    	mov    QWORD PTR [rdi],rax
  0100d:    	mov    QWORD PTR [rbx],rdi
  01010: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01019:    	mov    QWORD PTR [rsp-0x38],rcx
  0101e:    	mov    rax,QWORD PTR [rbp-0x80]
  01022:    	mov    QWORD PTR [rsp-0x38],rax
  01027: 00 	mov    rdi,0x0
  0102e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01037: 00 	movabs rax,0x0
  01041:    	mov    QWORD PTR [rsp-0x28],rax
  01046: 00 	movabs r13,0x0
  01050:    	call   0xfffe1f08
  01055:    	lea    rdi,[rbp-0x8]
  01059:    	mov    QWORD PTR [rbx],rdi
  0105c:    	movq   xmm2,QWORD PTR [rsp]
  01061:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01067:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0106d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01073:    	add    rsp,0x20
  01077:    	test   rax,rax
  0107a:    	je     0x33310
  01080:    	mov    QWORD PTR [rbp-0x78],rax
:00075 
:00077 %12 = %1.call dir()                  [<INVALID>]
  01084: 01 	sub    DWORD PTR [rip+0xa15],0x1        # 0x1aa0
  0108b:    	je     0x3333b
  01091:    	sub    rsp,0x20
  01095:    	movq   QWORD PTR [rsp],xmm2
  0109a:    	movq   QWORD PTR [rsp+0x8],xmm4
  010a0:    	movq   QWORD PTR [rsp+0x10],xmm5
  010a6:    	movq   QWORD PTR [rsp+0x18],xmm6
  010ac:    	mov    rdi,QWORD PTR [rbp-0x30]
  010b0: 00 	movabs rax,0x5600b75a2280
  010ba:    	call   rax
  010bc:    	mov    r15d,eax
  010bf: 00 	cmp    r15d,DWORD PTR [rip+0x9e2]        # 0x1aa8
  010c6:    	jne    0x3335d
  010cc:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3999]        # 0xfffe4a6b
  010d2:    	cmp    DWORD PTR [rip+0x9cc],eax        # 0x1aa4
  010d8:    	jne    0x3335d
  010de:    	mov    rax,QWORD PTR [rbx]
  010e1:    	lea    rdi,[rsp-0x18]
  010e6:    	mov    QWORD PTR [rdi],rax
  010e9:    	mov    QWORD PTR [rbx],rdi
  010ec: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010f5:    	mov    QWORD PTR [rsp-0x38],rcx
  010fa:    	mov    rax,QWORD PTR [rbp-0x30]
  010fe:    	mov    QWORD PTR [rsp-0x38],rax
  01103: 00 	mov    rdi,0x0
  0110a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01113: 00 	movabs rax,0x0
  0111d:    	mov    QWORD PTR [rsp-0x28],rax
  01122: 00 	movabs r13,0x0
  0112c:    	call   0xfffe1f08
  01131:    	lea    rdi,[rbp-0x8]
  01135:    	mov    QWORD PTR [rbx],rdi
  01138:    	movq   xmm2,QWORD PTR [rsp]
  0113d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01143:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01149:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0114f:    	add    rsp,0x20
  01153:    	test   rax,rax
  01156:    	je     0x333c9
  0115c: ff 	mov    QWORD PTR [rbp-0x88],rax
:00078 
:00080 %11 = %12.call y()                   [<INVALID>]
  01163: 01 	sub    DWORD PTR [rip+0x942],0x1        # 0x1aac
  0116a:    	je     0x333f4
  01170:    	sub    rsp,0x20
  01174:    	movq   QWORD PTR [rsp],xmm2
  01179:    	movq   QWORD PTR [rsp+0x8],xmm4
  0117f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01185:    	movq   QWORD PTR [rsp+0x18],xmm6
  0118b: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01192: 00 	movabs rax,0x5600b75a2280
  0119c:    	call   rax
  0119e:    	mov    r15d,eax
  011a1: 00 	cmp    r15d,DWORD PTR [rip+0x90c]        # 0x1ab4
  011a8:    	jne    0x33416
  011ae:    	mov    eax,DWORD PTR [rip+0xfffffffffffe38b7]        # 0xfffe4a6b
  011b4:    	cmp    DWORD PTR [rip+0x8f6],eax        # 0x1ab0
  011ba:    	jne    0x33416
  011c0:    	mov    rax,QWORD PTR [rbx]
  011c3:    	lea    rdi,[rsp-0x18]
  011c8:    	mov    QWORD PTR [rdi],rax
  011cb:    	mov    QWORD PTR [rbx],rdi
  011ce: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011d7:    	mov    QWORD PTR [rsp-0x38],rcx
  011dc: ff 	mov    rax,QWORD PTR [rbp-0x88]
  011e3:    	mov    QWORD PTR [rsp-0x38],rax
  011e8: 00 	mov    rdi,0x0
  011ef: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011f8: 00 	movabs rax,0x0
  01202:    	mov    QWORD PTR [rsp-0x28],rax
  01207: 00 	movabs r13,0x0
  01211:    	call   0xfffe1f08
  01216:    	lea    rdi,[rbp-0x8]
  0121a:    	mov    QWORD PTR [rbx],rdi
  0121d:    	movq   xmm2,QWORD PTR [rsp]
  01222:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01228:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0122e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01234:    	add    rsp,0x20
  01238:    	test   rax,rax
  0123b:    	je     0x33485
  01241:    	mov    QWORD PTR [rbp-0x80],rax
:00081 
:00083 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  01245: 01 	sub    DWORD PTR [rip+0x86c],0x1        # 0x1ab8
  0124c:    	je     0x334b0
  01252:    	mov    rdi,QWORD PTR [rbp-0x58]
  01256:    	mov    rsi,QWORD PTR [rbp-0x80]
  0125a:    	sub    rsp,0x20
  0125e:    	movq   QWORD PTR [rsp],xmm2
  01263:    	movq   QWORD PTR [rsp+0x8],xmm4
  01269:    	movq   QWORD PTR [rsp+0x10],xmm5
  0126f:    	movq   QWORD PTR [rsp+0x18],xmm6
  01275:    	mov    rdx,rdi
  01278:    	mov    rcx,rsi
  0127b:    	mov    rdi,rbx
  0127e:    	mov    rsi,r12
  01281: 00 	movabs rax,0x5600b7598f60
  0128b:    	call   rax
  0128d:    	movq   xmm2,QWORD PTR [rsp]
  01292:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01298:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0129e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012a4:    	add    rsp,0x20
  012a8: 00 	movabs r13,0x5600b92b7740
  012b2:    	test   rax,rax
  012b5:    	je     0xfffe1f43
  012bb:    	mov    QWORD PTR [rbp-0x80],rax
:00084 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  012bf: 01 	sub    DWORD PTR [rip+0x7f6],0x1        # 0x1abc
  012c6:    	je     0x334ee
  012cc:    	mov    rdi,QWORD PTR [rbp-0x78]
  012d0:    	mov    rsi,QWORD PTR [rbp-0x80]
  012d4:    	sub    rsp,0x20
  012d8:    	movq   QWORD PTR [rsp],xmm2
  012dd:    	movq   QWORD PTR [rsp+0x8],xmm4
  012e3:    	movq   QWORD PTR [rsp+0x10],xmm5
  012e9:    	movq   QWORD PTR [rsp+0x18],xmm6
  012ef:    	mov    rdx,rdi
  012f2:    	mov    rcx,rsi
  012f5:    	mov    rdi,rbx
  012f8:    	mov    rsi,r12
  012fb: 00 	movabs rax,0x5600b75970e0
  01305:    	call   rax
  01307:    	movq   xmm2,QWORD PTR [rsp]
  0130c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01312:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01318:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0131e:    	add    rsp,0x20
  01322: 00 	movabs r13,0x5600b92b7750
  0132c:    	test   rax,rax
  0132f:    	je     0xfffe1f43
  01335:    	mov    QWORD PTR [rbp-0x78],rax
:00085 %12 = %1.call org()                  [<INVALID>]
  01339: 01 	sub    DWORD PTR [rip+0x780],0x1        # 0x1ac0
  01340:    	je     0x3352c
  01346:    	sub    rsp,0x20
  0134a:    	movq   QWORD PTR [rsp],xmm2
  0134f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01355:    	movq   QWORD PTR [rsp+0x10],xmm5
  0135b:    	movq   QWORD PTR [rsp+0x18],xmm6
  01361:    	mov    rdi,QWORD PTR [rbp-0x30]
  01365: 00 	movabs rax,0x5600b75a2280
  0136f:    	call   rax
  01371:    	mov    r15d,eax
  01374: 00 	cmp    r15d,DWORD PTR [rip+0x74d]        # 0x1ac8
  0137b:    	jne    0x3354e
  01381:    	mov    eax,DWORD PTR [rip+0xfffffffffffe36e4]        # 0xfffe4a6b
  01387:    	cmp    DWORD PTR [rip+0x737],eax        # 0x1ac4
  0138d:    	jne    0x3354e
  01393:    	mov    rax,QWORD PTR [rbx]
  01396:    	lea    rdi,[rsp-0x18]
  0139b:    	mov    QWORD PTR [rdi],rax
  0139e:    	mov    QWORD PTR [rbx],rdi
  013a1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  013aa:    	mov    QWORD PTR [rsp-0x38],rcx
  013af:    	mov    rax,QWORD PTR [rbp-0x30]
  013b3:    	mov    QWORD PTR [rsp-0x38],rax
  013b8: 00 	mov    rdi,0x0
  013bf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  013c8: 00 	movabs rax,0x0
  013d2:    	mov    QWORD PTR [rsp-0x28],rax
  013d7: 00 	movabs r13,0x0
  013e1:    	call   0xfffe1f08
  013e6:    	lea    rdi,[rbp-0x8]
  013ea:    	mov    QWORD PTR [rbx],rdi
  013ed:    	movq   xmm2,QWORD PTR [rsp]
  013f2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013f8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  013fe:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01404:    	add    rsp,0x20
  01408:    	test   rax,rax
  0140b:    	je     0x335ba
  01411: ff 	mov    QWORD PTR [rbp-0x88],rax
:00086 
:00088 %11 = %12.call z()                   [<INVALID>]
  01418: 01 	sub    DWORD PTR [rip+0x6ad],0x1        # 0x1acc
  0141f:    	je     0x335e5
  01425:    	sub    rsp,0x20
  01429:    	movq   QWORD PTR [rsp],xmm2
  0142e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01434:    	movq   QWORD PTR [rsp+0x10],xmm5
  0143a:    	movq   QWORD PTR [rsp+0x18],xmm6
  01440: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01447: 00 	movabs rax,0x5600b75a2280
  01451:    	call   rax
  01453:    	mov    r15d,eax
  01456: 00 	cmp    r15d,DWORD PTR [rip+0x677]        # 0x1ad4
  0145d:    	jne    0x33607
  01463:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3602]        # 0xfffe4a6b
  01469:    	cmp    DWORD PTR [rip+0x661],eax        # 0x1ad0
  0146f:    	jne    0x33607
  01475:    	mov    rax,QWORD PTR [rbx]
  01478:    	lea    rdi,[rsp-0x18]
  0147d:    	mov    QWORD PTR [rdi],rax
  01480:    	mov    QWORD PTR [rbx],rdi
  01483: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0148c:    	mov    QWORD PTR [rsp-0x38],rcx
  01491: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01498:    	mov    QWORD PTR [rsp-0x38],rax
  0149d: 00 	mov    rdi,0x0
  014a4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014ad: 00 	movabs rax,0x0
  014b7:    	mov    QWORD PTR [rsp-0x28],rax
  014bc: 00 	movabs r13,0x0
  014c6:    	call   0xfffe1f08
  014cb:    	lea    rdi,[rbp-0x8]
  014cf:    	mov    QWORD PTR [rbx],rdi
  014d2:    	movq   xmm2,QWORD PTR [rsp]
  014d7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014dd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  014e3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  014e9:    	add    rsp,0x20
  014ed:    	test   rax,rax
  014f0:    	je     0x33676
  014f6:    	mov    QWORD PTR [rbp-0x80],rax
:00089 
:00091 %13 = %1.call dir()                  [<INVALID>]
  014fa: 01 	sub    DWORD PTR [rip+0x5d7],0x1        # 0x1ad8
  01501:    	je     0x336a1
  01507:    	sub    rsp,0x20
  0150b:    	movq   QWORD PTR [rsp],xmm2
  01510:    	movq   QWORD PTR [rsp+0x8],xmm4
  01516:    	movq   QWORD PTR [rsp+0x10],xmm5
  0151c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01522:    	mov    rdi,QWORD PTR [rbp-0x30]
  01526: 00 	movabs rax,0x5600b75a2280
  01530:    	call   rax
  01532:    	mov    r15d,eax
  01535: 00 	cmp    r15d,DWORD PTR [rip+0x5a4]        # 0x1ae0
  0153c:    	jne    0x336c3
  01542:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3523]        # 0xfffe4a6b
  01548:    	cmp    DWORD PTR [rip+0x58e],eax        # 0x1adc
  0154e:    	jne    0x336c3
  01554:    	mov    rax,QWORD PTR [rbx]
  01557:    	lea    rdi,[rsp-0x18]
  0155c:    	mov    QWORD PTR [rdi],rax
  0155f:    	mov    QWORD PTR [rbx],rdi
  01562: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0156b:    	mov    QWORD PTR [rsp-0x38],rcx
  01570:    	mov    rax,QWORD PTR [rbp-0x30]
  01574:    	mov    QWORD PTR [rsp-0x38],rax
  01579: 00 	mov    rdi,0x0
  01580: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01589: 00 	movabs rax,0x0
  01593:    	mov    QWORD PTR [rsp-0x28],rax
  01598: 00 	movabs r13,0x0
  015a2:    	call   0xfffe1f08
  015a7:    	lea    rdi,[rbp-0x8]
  015ab:    	mov    QWORD PTR [rbx],rdi
  015ae:    	movq   xmm2,QWORD PTR [rsp]
  015b3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015b9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  015bf:    	movq   xmm6,QWORD PTR [rsp+0x18]
  015c5:    	add    rsp,0x20
  015c9:    	test   rax,rax
  015cc:    	je     0x3372f
  015d2: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 
:00094 %12 = %13.call z()                   [<INVALID>]
  015d9: 01 	sub    DWORD PTR [rip+0x504],0x1        # 0x1ae4
  015e0:    	je     0x3375a
  015e6:    	sub    rsp,0x20
  015ea:    	movq   QWORD PTR [rsp],xmm2
  015ef:    	movq   QWORD PTR [rsp+0x8],xmm4
  015f5:    	movq   QWORD PTR [rsp+0x10],xmm5
  015fb:    	movq   QWORD PTR [rsp+0x18],xmm6
  01601: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01608: 00 	movabs rax,0x5600b75a2280
  01612:    	call   rax
  01614:    	mov    r15d,eax
  01617: 00 	cmp    r15d,DWORD PTR [rip+0x4ce]        # 0x1aec
  0161e:    	jne    0x3377c
  01624:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3441]        # 0xfffe4a6b
  0162a:    	cmp    DWORD PTR [rip+0x4b8],eax        # 0x1ae8
  01630:    	jne    0x3377c
  01636:    	mov    rax,QWORD PTR [rbx]
  01639:    	lea    rdi,[rsp-0x18]
  0163e:    	mov    QWORD PTR [rdi],rax
  01641:    	mov    QWORD PTR [rbx],rdi
  01644: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0164d:    	mov    QWORD PTR [rsp-0x38],rcx
  01652: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01659:    	mov    QWORD PTR [rsp-0x38],rax
  0165e: 00 	mov    rdi,0x0
  01665: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0166e: 00 	movabs rax,0x0
  01678:    	mov    QWORD PTR [rsp-0x28],rax
  0167d: 00 	movabs r13,0x0
  01687:    	call   0xfffe1f08
  0168c:    	lea    rdi,[rbp-0x8]
  01690:    	mov    QWORD PTR [rbx],rdi
  01693:    	movq   xmm2,QWORD PTR [rsp]
  01698:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0169e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  016a4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  016aa:    	add    rsp,0x20
  016ae:    	test   rax,rax
  016b1:    	je     0x337eb
  016b7: ff 	mov    QWORD PTR [rbp-0x88],rax
:00095 
:00097 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  016be: 01 	sub    DWORD PTR [rip+0x42b],0x1        # 0x1af0
  016c5:    	je     0x33816
  016cb:    	mov    rdi,QWORD PTR [rbp-0x58]
  016cf: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  016d6:    	sub    rsp,0x20
  016da:    	movq   QWORD PTR [rsp],xmm2
  016df:    	movq   QWORD PTR [rsp+0x8],xmm4
  016e5:    	movq   QWORD PTR [rsp+0x10],xmm5
  016eb:    	movq   QWORD PTR [rsp+0x18],xmm6
  016f1:    	mov    rdx,rdi
  016f4:    	mov    rcx,rsi
  016f7:    	mov    rdi,rbx
  016fa:    	mov    rsi,r12
  016fd: 00 	movabs rax,0x5600b7598f60
  01707:    	call   rax
  01709:    	movq   xmm2,QWORD PTR [rsp]
  0170e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01714:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0171a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01720:    	add    rsp,0x20
  01724: 00 	movabs r13,0x5600b92b7820
  0172e:    	test   rax,rax
  01731:    	je     0xfffe1f43
  01737: ff 	mov    QWORD PTR [rbp-0x88],rax
:00098 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  0173e: 01 	sub    DWORD PTR [rip+0x3af],0x1        # 0x1af4
  01745:    	je     0x33854
  0174b:    	mov    rdi,QWORD PTR [rbp-0x80]
  0174f: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  01756:    	sub    rsp,0x20
  0175a:    	movq   QWORD PTR [rsp],xmm2
  0175f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01765:    	movq   QWORD PTR [rsp+0x10],xmm5
  0176b:    	movq   QWORD PTR [rsp+0x18],xmm6
  01771:    	mov    rdx,rdi
  01774:    	mov    rcx,rsi
  01777:    	mov    rdi,rbx
  0177a:    	mov    rsi,r12
  0177d: 00 	movabs rax,0x5600b75970e0
  01787:    	call   rax
  01789:    	movq   xmm2,QWORD PTR [rsp]
  0178e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01794:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0179a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  017a0:    	add    rsp,0x20
  017a4: 00 	movabs r13,0x5600b92b7830
  017ae:    	test   rax,rax
  017b1:    	je     0xfffe1f43
  017b7:    	mov    QWORD PTR [rbp-0x80],rax
:00099 %7 = %8.call new(%9; 3)              [<INVALID>]
  017bb: 01 	sub    DWORD PTR [rip+0x336],0x1        # 0x1af8
  017c2:    	je     0x33892
  017c8:    	sub    rsp,0x20
  017cc:    	movq   QWORD PTR [rsp],xmm2
  017d1:    	movq   QWORD PTR [rsp+0x8],xmm4
  017d7:    	movq   QWORD PTR [rsp+0x10],xmm5
  017dd:    	movq   QWORD PTR [rsp+0x18],xmm6
  017e3:    	mov    rdi,QWORD PTR [rbp-0x68]
  017e7: 00 	movabs rax,0x5600b75a2280
  017f1:    	call   rax
  017f3:    	mov    r15d,eax
  017f6: 00 	cmp    r15d,DWORD PTR [rip+0x303]        # 0x1b00
  017fd:    	jne    0x338b4
  01803:    	mov    eax,DWORD PTR [rip+0xfffffffffffe3262]        # 0xfffe4a6b
  01809:    	cmp    DWORD PTR [rip+0x2ed],eax        # 0x1afc
  0180f:    	jne    0x338b4
  01815:    	mov    rax,QWORD PTR [rbx]
  01818:    	lea    rdi,[rsp-0x18]
  0181d:    	mov    QWORD PTR [rdi],rax
  01820:    	mov    QWORD PTR [rbx],rdi
  01823: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0182c:    	mov    QWORD PTR [rsp-0x38],rcx
  01831:    	mov    rax,QWORD PTR [rbp-0x68]
  01835:    	mov    QWORD PTR [rsp-0x38],rax
  0183a: 00 	mov    rdi,0x3
  01841:    	mov    rax,QWORD PTR [rbp-0x70]
  01845:    	mov    QWORD PTR [rsp-0x40],rax
  0184a:    	mov    rax,QWORD PTR [rbp-0x78]
  0184e:    	mov    QWORD PTR [rsp-0x48],rax
  01853:    	mov    rax,QWORD PTR [rbp-0x80]
  01857:    	mov    QWORD PTR [rsp-0x50],rax
  0185c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01865: 00 	movabs rax,0x0
  0186f:    	mov    QWORD PTR [rsp-0x28],rax
  01874: 00 	movabs r13,0x0
  0187e:    	call   0xfffe1f08
  01883:    	lea    rdi,[rbp-0x8]
  01887:    	mov    QWORD PTR [rbx],rdi
  0188a:    	movq   xmm2,QWORD PTR [rsp]
  0188f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01895:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0189b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  018a1:    	add    rsp,0x20
  018a5:    	test   rax,rax
  018a8:    	je     0x33920
  018ae:    	mov    QWORD PTR [rbp-0x60],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [<INVALID>]
  018b2: 01 	sub    DWORD PTR [rip+0x24b],0x1        # 0x1b04
  018b9:    	je     0x3394b
  018bf:    	sub    rsp,0x20
  018c3:    	movq   QWORD PTR [rsp],xmm2
  018c8:    	movq   QWORD PTR [rsp+0x8],xmm4
  018ce:    	movq   QWORD PTR [rsp+0x10],xmm5
  018d4:    	movq   QWORD PTR [rsp+0x18],xmm6
  018da:    	mov    rdi,QWORD PTR [rbp-0x38]
  018de: 00 	movabs rax,0x5600b75a2280
  018e8:    	call   rax
  018ea:    	mov    r15d,eax
  018ed: 00 	cmp    r15d,DWORD PTR [rip+0x218]        # 0x1b0c
  018f4:    	jne    0x3396d
  018fa:    	mov    eax,DWORD PTR [rip+0xfffffffffffe316b]        # 0xfffe4a6b
  01900:    	cmp    DWORD PTR [rip+0x202],eax        # 0x1b08
  01906:    	jne    0x3396d
  0190c:    	mov    rax,QWORD PTR [rbx]
  0190f:    	lea    rdi,[rsp-0x18]
  01914:    	mov    QWORD PTR [rdi],rax
  01917:    	mov    QWORD PTR [rbx],rdi
  0191a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01923:    	mov    QWORD PTR [rsp-0x38],rcx
  01928:    	mov    rax,QWORD PTR [rbp-0x38]
  0192c:    	mov    QWORD PTR [rsp-0x38],rax
  01931: 00 	mov    rdi,0x1
  01938:    	mov    rax,QWORD PTR [rbp-0x60]
  0193c:    	mov    QWORD PTR [rsp-0x40],rax
  01941: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0194a: 00 	movabs rax,0x0
  01954:    	mov    QWORD PTR [rsp-0x28],rax
  01959: 00 	movabs r13,0x0
  01963:    	call   0xfffe1f08
  01968:    	lea    rdi,[rbp-0x8]
  0196c:    	mov    QWORD PTR [rbx],rdi
  0196f:    	movq   xmm2,QWORD PTR [rsp]
  01974:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0197a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01980:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01986:    	add    rsp,0x20
  0198a:    	test   rax,rax
  0198d:    	je     0x339d9
:00103 
:00105 br =>:00106
  01993:    	jmp    0x33a41
:00106 %7 = nil
  01998: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00107 ret %7
  019a0:    	mov    rax,QWORD PTR [rbp-0x60]
  019a4:    	leave  
  019a5:    	ret    
==> start whole compile: intersect FuncId(71) self_class:Plane start:[00000] bytecode:0x5600b92b7200
<== finished compile. elapsed:121µs
offset:Pos(130056) code: 5677 bytes  data: 267 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xa0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x2
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x40],rax
  00040:    	mov    QWORD PTR [rbp-0x48],rax
  00044:    	mov    QWORD PTR [rbp-0x50],rax
  00048:    	mov    QWORD PTR [rbp-0x58],rax
  0004c:    	mov    QWORD PTR [rbp-0x60],rax
  00050:    	mov    QWORD PTR [rbp-0x68],rax
  00054:    	mov    QWORD PTR [rbp-0x70],rax
  00058:    	mov    QWORD PTR [rbp-0x78],rax
  0005c:    	mov    QWORD PTR [rbp-0x80],rax
  00060: ff 	mov    QWORD PTR [rbp-0x88],rax
  00067: ff 	mov    QWORD PTR [rbp-0x90],rax
  0006e:    	mov    rdi,QWORD PTR [rbp-0x28]
  00072: 00 	test   rdi,0x7
  00079:    	jne    0x31f57
  0007f:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00083:    	jne    0x31f57
:00000 init reg_num:14 arg_num:2 stack_offset:10
:00001 %7 = @p: Plane[IvarId(0)]
  00089:    	mov    rdi,QWORD PTR [rbp-0x28]
  0008d:    	mov    rax,QWORD PTR [rdi+0x10]
  00091:    	mov    QWORD PTR [rbp-0x60],rax
:00002 %8 = @n: Plane[IvarId(1)]
  00095:    	mov    rdi,QWORD PTR [rbp-0x28]
  00099:    	mov    rax,QWORD PTR [rdi+0x18]
  0009d:    	mov    QWORD PTR [rbp-0x68],rax
:00003 %3 = %7.call vdot(%8; 1)             [Vec]
  000a1:    	mov    rdi,QWORD PTR [rbp-0x60]
  000a5: 00 	test   rdi,0x7
  000ac:    	jne    0x31f66
  000b2:    	cmp    DWORD PTR [rdi+0x4],0x28
  000b6:    	jne    0x31f66
  000bc: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2e98],0x26        # 0xfffe2f5b
  000c3:    	jne    0x31f66
  000c9:    	mov    rax,QWORD PTR [rbx]
  000cc:    	lea    rdi,[rsp-0x18]
  000d1:    	mov    QWORD PTR [rdi],rax
  000d4:    	mov    QWORD PTR [rbx],rdi
  000d7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000e0:    	mov    QWORD PTR [rsp-0x38],rcx
  000e5:    	mov    rax,QWORD PTR [rbp-0x60]
  000e9:    	mov    QWORD PTR [rsp-0x38],rax
  000ee: 00 	mov    rdi,0x1
  000f5:    	mov    rax,QWORD PTR [rbp-0x68]
  000f9:    	mov    QWORD PTR [rsp-0x40],rax
  000fe: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00107: 05 	movabs rax,0x1000500000041
  00111:    	mov    QWORD PTR [rsp-0x28],rax
  00116: 00 	movabs r13,0x5600b92d48b0
  00120:    	call   0xfffe3cae
  00125:    	lea    rdi,[rbp-0x8]
  00129:    	mov    QWORD PTR [rbx],rdi
  0012c: 00 	movabs r13,0x5600b92b7250
  00136:    	test   rax,rax
  00139:    	je     0xfffe0433
  0013f:    	mov    QWORD PTR [rbp-0x40],rax
:00004 
:00006 %3 = neg %3                          [Float]
  00143:    	mov    rdi,QWORD PTR [rbp-0x40]
  00147: 00 	test   rdi,0x1
  0014e:    	jne    0x31f75
  00154: 00 	test   rdi,0x2
  0015b:    	je     0x197
  00161:    	xorps  xmm2,xmm2
  00164: 00 	movabs rax,0x8000000000000002
  0016e:    	cmp    rdi,rax
  00171:    	je     0x1a9
  00177:    	mov    rax,rdi
  0017a:    	sar    rax,0x3f
  0017e:    	add    rax,0x2
  00182:    	and    rdi,0xfffffffffffffffc
  00186:    	or     rdi,rax
  00189:    	rol    rdi,0x3d
  0018d:    	movq   xmm2,rdi
  00192:    	jmp    0x1a9
  00197:    	call   0xfffe046c
  0019c:    	test   rax,rax
  0019f:    	je     0x31f75
  001a5:    	movq   xmm2,xmm0
  001a9: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1488]        # 0x1638
:00007 %7 = %1.call dir()                   [Ray]
  001b0:    	mov    rdi,QWORD PTR [rbp-0x30]
  001b4: 00 	test   rdi,0x7
  001bb:    	jne    0x31f84
  001c1:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001c5:    	jne    0x31f84
  001cb: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2d89],0x26        # 0xfffe2f5b
  001d2:    	jne    0x31f84
  001d8:    	mov    esi,DWORD PTR [rip+0x1466]        # 0x1644
  001de:    	cmp    esi,0xffffffff
  001e1:    	je     0x31fa0
  001e7:    	cmp    WORD PTR [rdi+0x2],0x3
  001ec:    	jne    0x205
  001f2:    	cmp    esi,0x6
  001f5:    	jge    0x205
  001fb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00200:    	jmp    0x223
  00205:    	sub    rsp,0x10
  00209:    	movq   QWORD PTR [rsp],xmm2
  0020e: 00 	movabs rax,0x5600b755dfe0
  00218:    	call   rax
  0021a:    	movq   xmm2,QWORD PTR [rsp]
  0021f:    	add    rsp,0x10
  00223:    	mov    QWORD PTR [rbp-0x60],rax
:00008 
:00010 %8 = @n: Plane[IvarId(1)]
  00227:    	mov    rdi,QWORD PTR [rbp-0x28]
  0022b:    	mov    rax,QWORD PTR [rdi+0x18]
  0022f:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
  00233:    	mov    rdi,QWORD PTR [rbp-0x60]
  00237: 00 	test   rdi,0x7
  0023e:    	jne    0x31fdb
  00244:    	cmp    DWORD PTR [rdi+0x4],0x28
  00248:    	jne    0x31fdb
  0024e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2d06],0x26        # 0xfffe2f5b
  00255:    	jne    0x31fdb
  0025b:    	sub    rsp,0x10
  0025f:    	movq   QWORD PTR [rsp],xmm2
  00264:    	mov    rax,QWORD PTR [rbx]
  00267:    	lea    rdi,[rsp-0x18]
  0026c:    	mov    QWORD PTR [rdi],rax
  0026f:    	mov    QWORD PTR [rbx],rdi
  00272: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0027b:    	mov    QWORD PTR [rsp-0x38],rcx
  00280:    	mov    rax,QWORD PTR [rbp-0x60]
  00284:    	mov    QWORD PTR [rsp-0x38],rax
  00289: 00 	mov    rdi,0x1
  00290:    	mov    rax,QWORD PTR [rbp-0x68]
  00294:    	mov    QWORD PTR [rsp-0x40],rax
  00299: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002a2: 05 	movabs rax,0x1000500000041
  002ac:    	mov    QWORD PTR [rsp-0x28],rax
  002b1: 00 	movabs r13,0x5600b92d48b0
  002bb:    	call   0xfffe3cae
  002c0:    	lea    rdi,[rbp-0x8]
  002c4:    	mov    QWORD PTR [rbx],rdi
  002c7:    	movq   xmm2,QWORD PTR [rsp]
  002cc:    	add    rsp,0x10
  002d0: 00 	movabs r13,0x5600b92b72d0
  002da:    	test   rax,rax
  002dd:    	je     0xfffe0433
  002e3:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %5 = %4
  002e7:    	mov    rax,QWORD PTR [rbp-0x48]
  002eb:    	mov    QWORD PTR [rbp-0x50],rax
:00015 %7 = literal[0.0]
  002ef: 00 	movq   xmm3,QWORD PTR [rip+0x1351]        # 0x1648
  002f7: 00 	movabs rax,0x8000000000000002
  00301:    	mov    QWORD PTR [rbp-0x60],rax
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  00305:    	mov    rdi,QWORD PTR [rbp-0x48]
  00309: 00 	test   rdi,0x1
  00310:    	jne    0x31ff7
  00316: 00 	test   rdi,0x2
  0031d:    	je     0x359
  00323:    	xorps  xmm4,xmm4
  00326: 00 	movabs rax,0x8000000000000002
  00330:    	cmp    rdi,rax
  00333:    	je     0x36b
  00339:    	mov    rax,rdi
  0033c:    	sar    rax,0x3f
  00340:    	add    rax,0x2
  00344:    	and    rdi,0xfffffffffffffffc
  00348:    	or     rdi,rax
  0034b:    	rol    rdi,0x3d
  0034f:    	movq   xmm4,rdi
  00354:    	jmp    0x36b
  00359:    	call   0xfffe046c
  0035e:    	test   rax,rax
  00361:    	je     0x31ff7
  00367:    	movq   xmm4,xmm0
  0036b:    	ucomisd xmm4,xmm3
  0036f:    	jae    0x32013
:00018 %5 = %4
:00019 %5 = neg %5                          [Float]
  00375:    	movq   xmm5,xmm4
  00379: 00 	xorps  xmm5,XMMWORD PTR [rip+0x12d8]        # 0x1658
:00020 br =>:00021
  00380:    	jmp    0x32039
:00021 %7 = literal[1e-17]
  00385: 00 	movq   xmm3,QWORD PTR [rip+0x12db]        # 0x1668
  0038d: aa 	movabs rax,0xe33877aa3236a4ba
  00397:    	mov    QWORD PTR [rbp-0x60],rax
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  0039b:    	mov    rdi,QWORD PTR [rbp-0x50]
  0039f: 00 	test   rdi,0x1
  003a6:    	jne    0x3206c
  003ac: 00 	test   rdi,0x2
  003b3:    	je     0x3ef
  003b9:    	xorps  xmm5,xmm5
  003bc: 00 	movabs rax,0x8000000000000002
  003c6:    	cmp    rdi,rax
  003c9:    	je     0x401
  003cf:    	mov    rax,rdi
  003d2:    	sar    rax,0x3f
  003d6:    	add    rax,0x2
  003da:    	and    rdi,0xfffffffffffffffc
  003de:    	or     rdi,rax
  003e1:    	rol    rdi,0x3d
  003e5:    	movq   xmm5,rdi
  003ea:    	jmp    0x401
  003ef:    	call   0xfffe046c
  003f4:    	test   rax,rax
  003f7:    	je     0x3206c
  003fd:    	movq   xmm5,xmm0
  00401:    	ucomisd xmm5,xmm3
  00405:    	jae    0x419
:00024 %7 = nil
  0040b: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00025 ret %7
  00413:    	mov    rax,QWORD PTR [rbp-0x60]
  00417:    	leave  
  00418:    	ret    
:00027 %8 = %1.call org()                   [Ray]
  00419:    	mov    rdi,QWORD PTR [rbp-0x30]
  0041d: 00 	test   rdi,0x7
  00424:    	jne    0x32088
  0042a:    	cmp    DWORD PTR [rdi+0x4],0x2e
  0042e:    	jne    0x32088
  00434: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2b20],0x26        # 0xfffe2f5b
  0043b:    	jne    0x32088
  00441:    	mov    esi,DWORD PTR [rip+0x122d]        # 0x1674
  00447:    	cmp    esi,0xffffffff
  0044a:    	je     0x320a4
  00450:    	cmp    WORD PTR [rdi+0x2],0x3
  00455:    	jne    0x46e
  0045b:    	cmp    esi,0x6
  0045e:    	jge    0x46e
  00464:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00469:    	jmp    0x4b0
  0046e:    	sub    rsp,0x20
  00472:    	movq   QWORD PTR [rsp],xmm2
  00477:    	movq   QWORD PTR [rsp+0x8],xmm3
  0047d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00483:    	movq   QWORD PTR [rsp+0x18],xmm5
  00489: 00 	movabs rax,0x5600b755dfe0
  00493:    	call   rax
  00495:    	movq   xmm2,QWORD PTR [rsp]
  0049a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004a0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004a6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  004ac:    	add    rsp,0x20
  004b0:    	mov    QWORD PTR [rbp-0x68],rax
:00028 
:00030 %9 = @n: Plane[IvarId(1)]
  004b4:    	mov    rdi,QWORD PTR [rbp-0x28]
  004b8:    	mov    rax,QWORD PTR [rdi+0x18]
  004bc:    	mov    QWORD PTR [rbp-0x70],rax
:00031 %7 = %8.call vdot(%9; 1)             [Vec]
  004c0:    	mov    rdi,QWORD PTR [rbp-0x68]
  004c4: 00 	test   rdi,0x7
  004cb:    	jne    0x32103
  004d1:    	cmp    DWORD PTR [rdi+0x4],0x28
  004d5:    	jne    0x32103
  004db: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2a79],0x26        # 0xfffe2f5b
  004e2:    	jne    0x32103
  004e8:    	sub    rsp,0x20
  004ec:    	movq   QWORD PTR [rsp],xmm2
  004f1:    	movq   QWORD PTR [rsp+0x8],xmm4
  004f7:    	movq   QWORD PTR [rsp+0x10],xmm5
  004fd:    	mov    rax,QWORD PTR [rbx]
  00500:    	lea    rdi,[rsp-0x18]
  00505:    	mov    QWORD PTR [rdi],rax
  00508:    	mov    QWORD PTR [rbx],rdi
  0050b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00514:    	mov    QWORD PTR [rsp-0x38],rcx
  00519:    	mov    rax,QWORD PTR [rbp-0x68]
  0051d:    	mov    QWORD PTR [rsp-0x38],rax
  00522: 00 	mov    rdi,0x1
  00529:    	mov    rax,QWORD PTR [rbp-0x70]
  0052d:    	mov    QWORD PTR [rsp-0x40],rax
  00532: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0053b: 05 	movabs rax,0x1000500000041
  00545:    	mov    QWORD PTR [rsp-0x28],rax
  0054a: 00 	movabs r13,0x5600b92d48b0
  00554:    	call   0xfffe3cae
  00559:    	lea    rdi,[rbp-0x8]
  0055d:    	mov    QWORD PTR [rbx],rdi
  00560:    	movq   xmm2,QWORD PTR [rsp]
  00565:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0056b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00571:    	add    rsp,0x20
  00575: 00 	movabs r13,0x5600b92b7410
  0057f:    	test   rax,rax
  00582:    	je     0xfffe0433
  00588:    	mov    QWORD PTR [rbp-0x60],rax
:00032 
:00034 %7 = %7 + %3                         [Float][Float]
  0058c:    	mov    rdi,QWORD PTR [rbp-0x60]
  00590: 00 	test   rdi,0x1
  00597:    	jne    0x3211f
  0059d: 00 	test   rdi,0x2
  005a4:    	je     0x5e0
  005aa:    	xorps  xmm3,xmm3
  005ad: 00 	movabs rax,0x8000000000000002
  005b7:    	cmp    rdi,rax
  005ba:    	je     0x5f2
  005c0:    	mov    rax,rdi
  005c3:    	sar    rax,0x3f
  005c7:    	add    rax,0x2
  005cb:    	and    rdi,0xfffffffffffffffc
  005cf:    	or     rdi,rax
  005d2:    	rol    rdi,0x3d
  005d6:    	movq   xmm3,rdi
  005db:    	jmp    0x5f2
  005e0:    	call   0xfffe046c
  005e5:    	test   rax,rax
  005e8:    	je     0x3211f
  005ee:    	movq   xmm3,xmm0
  005f2:    	addsd  xmm3,xmm2
:00035 %7 = neg %7                          [Float]
  005f6: 00 	xorps  xmm3,XMMWORD PTR [rip+0x107b]        # 0x1678
:00036 %6 = %7 / %4                         [Float][Float]
  005fd:    	movq   xmm6,xmm3
  00601:    	movq   rax,xmm4
  00606:    	test   rax,rax
  00609:    	je     0xfffe0458
  0060f:    	divsd  xmm6,xmm4
:00037 %7 = literal[0.0]
  00613: 00 	movq   xmm3,QWORD PTR [rip+0x106d]        # 0x1688
  0061b: 00 	movabs rax,0x8000000000000002
  00625:    	mov    QWORD PTR [rbp-0x60],rax
:00038 _%7 = %6 > %7                        [Float][Float]
:00039 condnotbr _%7 =>:00106
  00629:    	ucomisd xmm6,xmm3
  0062d:    	jbe    0x32d6f
:00040 %7 = %2.call t()                     [Isect]
  00633:    	mov    rdi,QWORD PTR [rbp-0x38]
  00637: 00 	test   rdi,0x7
  0063e:    	jne    0x3213b
  00644:    	cmp    DWORD PTR [rdi+0x4],0x30
  00648:    	jne    0x3213b
  0064e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2906],0x26        # 0xfffe2f5b
  00655:    	jne    0x3213b
  0065b:    	mov    esi,DWORD PTR [rip+0x1033]        # 0x1694
  00661:    	cmp    esi,0xffffffff
  00664:    	je     0x32164
  0066a:    	cmp    WORD PTR [rdi+0x2],0x3
  0066f:    	jne    0x688
  00675:    	cmp    esi,0x6
  00678:    	jge    0x688
  0067e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00683:    	jmp    0x6ca
  00688:    	sub    rsp,0x20
  0068c:    	movq   QWORD PTR [rsp],xmm2
  00691:    	movq   QWORD PTR [rsp+0x8],xmm4
  00697:    	movq   QWORD PTR [rsp+0x10],xmm5
  0069d:    	movq   QWORD PTR [rsp+0x18],xmm6
  006a3: 00 	movabs rax,0x5600b755dfe0
  006ad:    	call   rax
  006af:    	movq   xmm2,QWORD PTR [rsp]
  006b4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  006ba:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006c0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006c6:    	add    rsp,0x20
  006ca:    	mov    QWORD PTR [rbp-0x60],rax
:00041 
:00043 _%7 = %6 < %7                        [Float][Float]
:00044 condnotbr _%7 =>:00106
  006ce:    	mov    rdi,QWORD PTR [rbp-0x60]
  006d2: 00 	test   rdi,0x1
  006d9:    	jne    0x321c3
  006df: 00 	test   rdi,0x2
  006e6:    	je     0x722
  006ec:    	xorps  xmm3,xmm3
  006ef: 00 	movabs rax,0x8000000000000002
  006f9:    	cmp    rdi,rax
  006fc:    	je     0x734
  00702:    	mov    rax,rdi
  00705:    	sar    rax,0x3f
  00709:    	add    rax,0x2
  0070d:    	and    rdi,0xfffffffffffffffc
  00711:    	or     rdi,rax
  00714:    	rol    rdi,0x3d
  00718:    	movq   xmm3,rdi
  0071d:    	jmp    0x734
  00722:    	call   0xfffe046c
  00727:    	test   rax,rax
  0072a:    	je     0x321c3
  00730:    	movq   xmm3,xmm0
  00734:    	ucomisd xmm6,xmm3
  00738:    	jae    0x32da2
:00045 %7 = literal[true]
  0073e: 00 	mov    rax,0x1c
  00745:    	mov    QWORD PTR [rbp-0x60],rax
:00046 _ = %2.call hit=(%7; 1)              [Isect]
  00749:    	mov    rdi,QWORD PTR [rbp-0x38]
  0074d: 00 	test   rdi,0x7
  00754:    	jne    0x321ec
  0075a:    	cmp    DWORD PTR [rdi+0x4],0x30
  0075e:    	jne    0x321ec
  00764: 26 	cmp    DWORD PTR [rip+0xfffffffffffe27f0],0x26        # 0xfffe2f5b
  0076b:    	jne    0x321ec
  00771:    	mov    esi,DWORD PTR [rip+0xf25]        # 0x169c
  00777:    	cmp    esi,0xffffffff
  0077a:    	je     0x32215
  00780:    	cmp    WORD PTR [rdi+0x2],0x3
  00785:    	jne    0x7a2
  0078b:    	cmp    esi,0x6
  0078e:    	jge    0x7a2
  00794:    	mov    rax,QWORD PTR [rbp-0x60]
  00798:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0079d:    	jmp    0x7fb
  007a2:    	sub    rsp,0x20
  007a6:    	movq   QWORD PTR [rsp],xmm2
  007ab:    	movq   QWORD PTR [rsp+0x8],xmm4
  007b1:    	movq   QWORD PTR [rsp+0x10],xmm5
  007b7:    	movq   QWORD PTR [rsp+0x18],xmm6
  007bd:    	mov    rdx,QWORD PTR [rbp-0x60]
  007c1: 00 	movabs rax,0x5600b755e260
  007cb:    	call   rax
  007cd:    	movq   xmm2,QWORD PTR [rsp]
  007d2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007d8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007de:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007e4:    	add    rsp,0x20
  007e8: 00 	movabs r13,0x5600b92b7500
  007f2:    	test   rax,rax
  007f5:    	je     0xfffe0433
:00047 
:00049 _ = %2.call t=(%6; 1)                [Isect]
  007fb:    	movq   xmm0,xmm6
  007ff:    	call   0xfffe055f
  00804:    	mov    QWORD PTR [rbp-0x58],rax
  00808:    	mov    rdi,QWORD PTR [rbp-0x38]
  0080c: 00 	test   rdi,0x7
  00813:    	jne    0x3227b
  00819:    	cmp    DWORD PTR [rdi+0x4],0x30
  0081d:    	jne    0x3227b
  00823: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2731],0x26        # 0xfffe2f5b
  0082a:    	jne    0x3227b
  00830:    	mov    esi,DWORD PTR [rip+0xe6e]        # 0x16a4
  00836:    	cmp    esi,0xffffffff
  00839:    	je     0x32297
  0083f:    	cmp    WORD PTR [rdi+0x2],0x3
  00844:    	jne    0x861
  0084a:    	cmp    esi,0x6
  0084d:    	jge    0x861
  00853:    	mov    rax,QWORD PTR [rbp-0x58]
  00857:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0085c:    	jmp    0x8ba
  00861:    	sub    rsp,0x20
  00865:    	movq   QWORD PTR [rsp],xmm2
  0086a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00870:    	movq   QWORD PTR [rsp+0x10],xmm5
  00876:    	movq   QWORD PTR [rsp+0x18],xmm6
  0087c:    	mov    rdx,QWORD PTR [rbp-0x58]
  00880: 00 	movabs rax,0x5600b755e260
  0088a:    	call   rax
  0088c:    	movq   xmm2,QWORD PTR [rsp]
  00891:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00897:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0089d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008a3:    	add    rsp,0x20
  008a7: 00 	movabs r13,0x5600b92b7530
  008b1:    	test   rax,rax
  008b4:    	je     0xfffe0433
:00050 
:00052 %7 = @n: Plane[IvarId(1)]
  008ba:    	mov    rdi,QWORD PTR [rbp-0x28]
  008be:    	mov    rax,QWORD PTR [rdi+0x18]
  008c2:    	mov    QWORD PTR [rbp-0x60],rax
:00053 _ = %2.call n=(%7; 1)                [Isect]
  008c6:    	mov    rdi,QWORD PTR [rbp-0x38]
  008ca: 00 	test   rdi,0x7
  008d1:    	jne    0x322fd
  008d7:    	cmp    DWORD PTR [rdi+0x4],0x30
  008db:    	jne    0x322fd
  008e1: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2673],0x26        # 0xfffe2f5b
  008e8:    	jne    0x322fd
  008ee:    	mov    esi,DWORD PTR [rip+0xdb8]        # 0x16ac
  008f4:    	cmp    esi,0xffffffff
  008f7:    	je     0x32319
  008fd:    	cmp    WORD PTR [rdi+0x2],0x3
  00902:    	jne    0x91f
  00908:    	cmp    esi,0x6
  0090b:    	jge    0x91f
  00911:    	mov    rax,QWORD PTR [rbp-0x60]
  00915:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0091a:    	jmp    0x978
  0091f:    	sub    rsp,0x20
  00923:    	movq   QWORD PTR [rsp],xmm2
  00928:    	movq   QWORD PTR [rsp+0x8],xmm4
  0092e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00934:    	movq   QWORD PTR [rsp+0x18],xmm6
  0093a:    	mov    rdx,QWORD PTR [rbp-0x60]
  0093e: 00 	movabs rax,0x5600b755e260
  00948:    	call   rax
  0094a:    	movq   xmm2,QWORD PTR [rsp]
  0094f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00955:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0095b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00961:    	add    rsp,0x20
  00965: 00 	movabs r13,0x5600b92b7570
  0096f:    	test   rax,rax
  00972:    	je     0xfffe0433
:00054 
:00056 %8 = const[Vec]                      [Vec]
  00978: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe25e9]        # 0xfffe2f68
  0097f: 00 	cmp    rax,QWORD PTR [rip+0xd42]        # 0x16c8
  00986:    	jne    0x3237f
  0098c: 00 	mov    rax,QWORD PTR [rip+0xd25]        # 0x16b8
  00993:    	mov    QWORD PTR [rbp-0x68],rax
:00057 %10 = %1.call org()                  [Ray]
  00997:    	mov    rdi,QWORD PTR [rbp-0x30]
  0099b: 00 	test   rdi,0x7
  009a2:    	jne    0x323fb
  009a8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  009ac:    	jne    0x323fb
  009b2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe25a2],0x26        # 0xfffe2f5b
  009b9:    	jne    0x323fb
  009bf:    	mov    esi,DWORD PTR [rip+0xd0f]        # 0x16d4
  009c5:    	cmp    esi,0xffffffff
  009c8:    	je     0x32417
  009ce:    	cmp    WORD PTR [rdi+0x2],0x3
  009d3:    	jne    0x9ec
  009d9:    	cmp    esi,0x6
  009dc:    	jge    0x9ec
  009e2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009e7:    	jmp    0xa2e
  009ec:    	sub    rsp,0x20
  009f0:    	movq   QWORD PTR [rsp],xmm2
  009f5:    	movq   QWORD PTR [rsp+0x8],xmm4
  009fb:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a01:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a07: 00 	movabs rax,0x5600b755dfe0
  00a11:    	call   rax
  00a13:    	movq   xmm2,QWORD PTR [rsp]
  00a18:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a1e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a24:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a2a:    	add    rsp,0x20
  00a2e:    	mov    QWORD PTR [rbp-0x78],rax
:00058 
:00060 %9 = %10.call x()                    [Vec]
  00a32:    	mov    rdi,QWORD PTR [rbp-0x78]
  00a36: 00 	test   rdi,0x7
  00a3d:    	jne    0x32476
  00a43:    	cmp    DWORD PTR [rdi+0x4],0x28
  00a47:    	jne    0x32476
  00a4d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2507],0x26        # 0xfffe2f5b
  00a54:    	jne    0x32476
  00a5a:    	mov    esi,DWORD PTR [rip+0xc7c]        # 0x16dc
  00a60:    	cmp    esi,0xffffffff
  00a63:    	je     0x32492
  00a69:    	cmp    WORD PTR [rdi+0x2],0x3
  00a6e:    	jne    0xa87
  00a74:    	cmp    esi,0x6
  00a77:    	jge    0xa87
  00a7d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a82:    	jmp    0xac9
  00a87:    	sub    rsp,0x20
  00a8b:    	movq   QWORD PTR [rsp],xmm2
  00a90:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a96:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a9c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00aa2: 00 	movabs rax,0x5600b755dfe0
  00aac:    	call   rax
  00aae:    	movq   xmm2,QWORD PTR [rsp]
  00ab3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ab9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00abf:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ac5:    	add    rsp,0x20
  00ac9:    	mov    QWORD PTR [rbp-0x70],rax
:00061 
:00063 %11 = %1.call dir()                  [Ray]
  00acd:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ad1: 00 	test   rdi,0x7
  00ad8:    	jne    0x324f1
  00ade:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00ae2:    	jne    0x324f1
  00ae8: 26 	cmp    DWORD PTR [rip+0xfffffffffffe246c],0x26        # 0xfffe2f5b
  00aef:    	jne    0x324f1
  00af5:    	mov    esi,DWORD PTR [rip+0xbe9]        # 0x16e4
  00afb:    	cmp    esi,0xffffffff
  00afe:    	je     0x3250d
  00b04:    	cmp    WORD PTR [rdi+0x2],0x3
  00b09:    	jne    0xb22
  00b0f:    	cmp    esi,0x6
  00b12:    	jge    0xb22
  00b18:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b1d:    	jmp    0xb64
  00b22:    	sub    rsp,0x20
  00b26:    	movq   QWORD PTR [rsp],xmm2
  00b2b:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b31:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b37:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b3d: 00 	movabs rax,0x5600b755dfe0
  00b47:    	call   rax
  00b49:    	movq   xmm2,QWORD PTR [rsp]
  00b4e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b54:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b5a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b60:    	add    rsp,0x20
  00b64:    	mov    QWORD PTR [rbp-0x80],rax
:00064 
:00066 %10 = %11.call x()                   [Vec]
  00b68:    	mov    rdi,QWORD PTR [rbp-0x80]
  00b6c: 00 	test   rdi,0x7
  00b73:    	jne    0x3256c
  00b79:    	cmp    DWORD PTR [rdi+0x4],0x28
  00b7d:    	jne    0x3256c
  00b83: 26 	cmp    DWORD PTR [rip+0xfffffffffffe23d1],0x26        # 0xfffe2f5b
  00b8a:    	jne    0x3256c
  00b90:    	mov    esi,DWORD PTR [rip+0xb56]        # 0x16ec
  00b96:    	cmp    esi,0xffffffff
  00b99:    	je     0x32588
  00b9f:    	cmp    WORD PTR [rdi+0x2],0x3
  00ba4:    	jne    0xbbd
  00baa:    	cmp    esi,0x6
  00bad:    	jge    0xbbd
  00bb3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00bb8:    	jmp    0xbff
  00bbd:    	sub    rsp,0x20
  00bc1:    	movq   QWORD PTR [rsp],xmm2
  00bc6:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bcc:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bd2:    	movq   QWORD PTR [rsp+0x18],xmm6
  00bd8: 00 	movabs rax,0x5600b755dfe0
  00be2:    	call   rax
  00be4:    	movq   xmm2,QWORD PTR [rsp]
  00be9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bef:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00bf5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00bfb:    	add    rsp,0x20
  00bff:    	mov    QWORD PTR [rbp-0x78],rax
:00067 
:00069 %10 = %6 * %10                       [Float][Float]
  00c03:    	mov    rdi,QWORD PTR [rbp-0x78]
  00c07: 00 	test   rdi,0x1
  00c0e:    	jne    0x325e7
  00c14: 00 	test   rdi,0x2
  00c1b:    	je     0xc57
  00c21:    	xorps  xmm3,xmm3
  00c24: 00 	movabs rax,0x8000000000000002
  00c2e:    	cmp    rdi,rax
  00c31:    	je     0xc69
  00c37:    	mov    rax,rdi
  00c3a:    	sar    rax,0x3f
  00c3e:    	add    rax,0x2
  00c42:    	and    rdi,0xfffffffffffffffc
  00c46:    	or     rdi,rax
  00c49:    	rol    rdi,0x3d
  00c4d:    	movq   xmm3,rdi
  00c52:    	jmp    0xc69
  00c57:    	call   0xfffe046c
  00c5c:    	test   rax,rax
  00c5f:    	je     0x325e7
  00c65:    	movq   xmm3,xmm0
  00c69:    	mulsd  xmm3,xmm6
:00070 %9 = %9 + %10                        [Float][Float]
  00c6d:    	mov    rdi,QWORD PTR [rbp-0x70]
  00c71: 00 	test   rdi,0x1
  00c78:    	jne    0x32603
  00c7e: 00 	test   rdi,0x2
  00c85:    	je     0xcc1
  00c8b:    	xorps  xmm7,xmm7
  00c8e: 00 	movabs rax,0x8000000000000002
  00c98:    	cmp    rdi,rax
  00c9b:    	je     0xcd3
  00ca1:    	mov    rax,rdi
  00ca4:    	sar    rax,0x3f
  00ca8:    	add    rax,0x2
  00cac:    	and    rdi,0xfffffffffffffffc
  00cb0:    	or     rdi,rax
  00cb3:    	rol    rdi,0x3d
  00cb7:    	movq   xmm7,rdi
  00cbc:    	jmp    0xcd3
  00cc1:    	call   0xfffe046c
  00cc6:    	test   rax,rax
  00cc9:    	je     0x32603
  00ccf:    	movq   xmm7,xmm0
  00cd3:    	addsd  xmm7,xmm3
:00071 %11 = %1.call org()                  [Ray]
  00cd7:    	mov    rdi,QWORD PTR [rbp-0x30]
  00cdb: 00 	test   rdi,0x7
  00ce2:    	jne    0x3262c
  00ce8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00cec:    	jne    0x3262c
  00cf2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2262],0x26        # 0xfffe2f5b
  00cf9:    	jne    0x3262c
  00cff:    	mov    esi,DWORD PTR [rip+0x9ef]        # 0x16f4
  00d05:    	cmp    esi,0xffffffff
  00d08:    	je     0x32662
  00d0e:    	cmp    WORD PTR [rdi+0x2],0x3
  00d13:    	jne    0xd2c
  00d19:    	cmp    esi,0x6
  00d1c:    	jge    0xd2c
  00d22:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d27:    	jmp    0xd86
  00d2c:    	sub    rsp,0x30
  00d30:    	movq   QWORD PTR [rsp],xmm2
  00d35:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d3b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d41:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d47:    	movq   QWORD PTR [rsp+0x20],xmm6
  00d4d:    	movq   QWORD PTR [rsp+0x28],xmm7
  00d53: 00 	movabs rax,0x5600b755dfe0
  00d5d:    	call   rax
  00d5f:    	movq   xmm2,QWORD PTR [rsp]
  00d64:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d6a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d70:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d76:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d7c:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d82:    	add    rsp,0x30
  00d86:    	mov    QWORD PTR [rbp-0x80],rax
:00072 
:00074 %10 = %11.call y()                   [Vec]
  00d8a:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d8e: 00 	test   rdi,0x7
  00d95:    	jne    0x326d9
  00d9b:    	cmp    DWORD PTR [rdi+0x4],0x28
  00d9f:    	jne    0x326d9
  00da5: 26 	cmp    DWORD PTR [rip+0xfffffffffffe21af],0x26        # 0xfffe2f5b
  00dac:    	jne    0x326d9
  00db2:    	mov    esi,DWORD PTR [rip+0x944]        # 0x16fc
  00db8:    	cmp    esi,0xffffffff
  00dbb:    	je     0x32702
  00dc1:    	cmp    WORD PTR [rdi+0x2],0x3
  00dc6:    	jne    0xddf
  00dcc:    	cmp    esi,0x6
  00dcf:    	jge    0xddf
  00dd5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dda:    	jmp    0xe2d
  00ddf:    	sub    rsp,0x30
  00de3:    	movq   QWORD PTR [rsp],xmm2
  00de8:    	movq   QWORD PTR [rsp+0x8],xmm4
  00dee:    	movq   QWORD PTR [rsp+0x10],xmm5
  00df4:    	movq   QWORD PTR [rsp+0x18],xmm6
  00dfa:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e00: 00 	movabs rax,0x5600b755dfe0
  00e0a:    	call   rax
  00e0c:    	movq   xmm2,QWORD PTR [rsp]
  00e11:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e17:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e1d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e23:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e29:    	add    rsp,0x30
  00e2d:    	mov    QWORD PTR [rbp-0x78],rax
:00075 
:00077 %12 = %1.call dir()                  [Ray]
  00e31:    	mov    rdi,QWORD PTR [rbp-0x30]
  00e35: 00 	test   rdi,0x7
  00e3c:    	jne    0x3276d
  00e42:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00e46:    	jne    0x3276d
  00e4c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe2108],0x26        # 0xfffe2f5b
  00e53:    	jne    0x3276d
  00e59:    	mov    esi,DWORD PTR [rip+0x8a5]        # 0x1704
  00e5f:    	cmp    esi,0xffffffff
  00e62:    	je     0x32796
  00e68:    	cmp    WORD PTR [rdi+0x2],0x3
  00e6d:    	jne    0xe86
  00e73:    	cmp    esi,0x6
  00e76:    	jge    0xe86
  00e7c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e81:    	jmp    0xed4
  00e86:    	sub    rsp,0x30
  00e8a:    	movq   QWORD PTR [rsp],xmm2
  00e8f:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e95:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e9b:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ea1:    	movq   QWORD PTR [rsp+0x20],xmm7
  00ea7: 00 	movabs rax,0x5600b755dfe0
  00eb1:    	call   rax
  00eb3:    	movq   xmm2,QWORD PTR [rsp]
  00eb8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ebe:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ec4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00eca:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00ed0:    	add    rsp,0x30
  00ed4: ff 	mov    QWORD PTR [rbp-0x88],rax
:00078 
:00080 %11 = %12.call y()                   [Vec]
  00edb: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00ee2: 00 	test   rdi,0x7
  00ee9:    	jne    0x32801
  00eef:    	cmp    DWORD PTR [rdi+0x4],0x28
  00ef3:    	jne    0x32801
  00ef9: 26 	cmp    DWORD PTR [rip+0xfffffffffffe205b],0x26        # 0xfffe2f5b
  00f00:    	jne    0x32801
  00f06:    	mov    esi,DWORD PTR [rip+0x800]        # 0x170c
  00f0c:    	cmp    esi,0xffffffff
  00f0f:    	je     0x3282a
  00f15:    	cmp    WORD PTR [rdi+0x2],0x3
  00f1a:    	jne    0xf33
  00f20:    	cmp    esi,0x6
  00f23:    	jge    0xf33
  00f29:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f2e:    	jmp    0xf81
  00f33:    	sub    rsp,0x30
  00f37:    	movq   QWORD PTR [rsp],xmm2
  00f3c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f42:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f48:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f4e:    	movq   QWORD PTR [rsp+0x20],xmm7
  00f54: 00 	movabs rax,0x5600b755dfe0
  00f5e:    	call   rax
  00f60:    	movq   xmm2,QWORD PTR [rsp]
  00f65:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f6b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f71:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f77:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00f7d:    	add    rsp,0x30
  00f81:    	mov    QWORD PTR [rbp-0x80],rax
:00081 
:00083 %11 = %6 * %11                       [Float][Float]
  00f85:    	mov    rdi,QWORD PTR [rbp-0x80]
  00f89: 00 	test   rdi,0x1
  00f90:    	jne    0x32895
  00f96: 00 	test   rdi,0x2
  00f9d:    	je     0xfd9
  00fa3:    	xorps  xmm3,xmm3
  00fa6: 00 	movabs rax,0x8000000000000002
  00fb0:    	cmp    rdi,rax
  00fb3:    	je     0xfeb
  00fb9:    	mov    rax,rdi
  00fbc:    	sar    rax,0x3f
  00fc0:    	add    rax,0x2
  00fc4:    	and    rdi,0xfffffffffffffffc
  00fc8:    	or     rdi,rax
  00fcb:    	rol    rdi,0x3d
  00fcf:    	movq   xmm3,rdi
  00fd4:    	jmp    0xfeb
  00fd9:    	call   0xfffe046c
  00fde:    	test   rax,rax
  00fe1:    	je     0x32895
  00fe7:    	movq   xmm3,xmm0
  00feb:    	mulsd  xmm3,xmm6
:00084 %10 = %10 + %11                      [Float][Float]
  00fef:    	mov    rdi,QWORD PTR [rbp-0x78]
  00ff3: 00 	test   rdi,0x1
  00ffa:    	jne    0x328be
  01000: 00 	test   rdi,0x2
  01007:    	je     0x1044
  0100d:    	xorps  xmm8,xmm8
  01011: 00 	movabs rax,0x8000000000000002
  0101b:    	cmp    rdi,rax
  0101e:    	je     0x1057
  01024:    	mov    rax,rdi
  01027:    	sar    rax,0x3f
  0102b:    	add    rax,0x2
  0102f:    	and    rdi,0xfffffffffffffffc
  01033:    	or     rdi,rax
  01036:    	rol    rdi,0x3d
  0103a:    	movq   xmm8,rdi
  0103f:    	jmp    0x1057
  01044:    	call   0xfffe046c
  01049:    	test   rax,rax
  0104c:    	je     0x328be
  01052:    	movq   xmm8,xmm0
  01057:    	addsd  xmm8,xmm3
:00085 %12 = %1.call org()                  [Ray]
  0105c:    	mov    rdi,QWORD PTR [rbp-0x30]
  01060: 00 	test   rdi,0x7
  01067:    	jne    0x328f4
  0106d:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01071:    	jne    0x328f4
  01077: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1edd],0x26        # 0xfffe2f5b
  0107e:    	jne    0x328f4
  01084:    	mov    esi,DWORD PTR [rip+0x68a]        # 0x1714
  0108a:    	cmp    esi,0xffffffff
  0108d:    	je     0x32938
  01093:    	cmp    WORD PTR [rdi+0x2],0x3
  01098:    	jne    0x10b1
  0109e:    	cmp    esi,0x6
  010a1:    	jge    0x10b1
  010a7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  010ac:    	jmp    0x1119
  010b1:    	sub    rsp,0x40
  010b5:    	movq   QWORD PTR [rsp],xmm2
  010ba:    	movq   QWORD PTR [rsp+0x8],xmm3
  010c0:    	movq   QWORD PTR [rsp+0x10],xmm4
  010c6:    	movq   QWORD PTR [rsp+0x18],xmm5
  010cc:    	movq   QWORD PTR [rsp+0x20],xmm6
  010d2:    	movq   QWORD PTR [rsp+0x28],xmm7
  010d8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  010df: 00 	movabs rax,0x5600b755dfe0
  010e9:    	call   rax
  010eb:    	movq   xmm2,QWORD PTR [rsp]
  010f0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010f6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010fc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01102:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01108:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0110e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01115:    	add    rsp,0x40
  01119: ff 	mov    QWORD PTR [rbp-0x88],rax
:00086 
:00088 %11 = %12.call z()                   [Vec]
  01120: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01127: 00 	test   rdi,0x7
  0112e:    	jne    0x329bd
  01134:    	cmp    DWORD PTR [rdi+0x4],0x28
  01138:    	jne    0x329bd
  0113e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1e16],0x26        # 0xfffe2f5b
  01145:    	jne    0x329bd
  0114b:    	mov    esi,DWORD PTR [rip+0x5cb]        # 0x171c
  01151:    	cmp    esi,0xffffffff
  01154:    	je     0x329f4
  0115a:    	cmp    WORD PTR [rdi+0x2],0x3
  0115f:    	jne    0x1178
  01165:    	cmp    esi,0x6
  01168:    	jge    0x1178
  0116e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01173:    	jmp    0x11d4
  01178:    	sub    rsp,0x30
  0117c:    	movq   QWORD PTR [rsp],xmm2
  01181:    	movq   QWORD PTR [rsp+0x8],xmm4
  01187:    	movq   QWORD PTR [rsp+0x10],xmm5
  0118d:    	movq   QWORD PTR [rsp+0x18],xmm6
  01193:    	movq   QWORD PTR [rsp+0x20],xmm7
  01199: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  011a0: 00 	movabs rax,0x5600b755dfe0
  011aa:    	call   rax
  011ac:    	movq   xmm2,QWORD PTR [rsp]
  011b1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011b7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011bd:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011c3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011c9: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  011d0:    	add    rsp,0x30
  011d4:    	mov    QWORD PTR [rbp-0x80],rax
:00089 
:00091 %13 = %1.call dir()                  [Ray]
  011d8:    	mov    rdi,QWORD PTR [rbp-0x30]
  011dc: 00 	test   rdi,0x7
  011e3:    	jne    0x32a6d
  011e9:    	cmp    DWORD PTR [rdi+0x4],0x2e
  011ed:    	jne    0x32a6d
  011f3: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1d61],0x26        # 0xfffe2f5b
  011fa:    	jne    0x32a6d
  01200:    	mov    esi,DWORD PTR [rip+0x51e]        # 0x1724
  01206:    	cmp    esi,0xffffffff
  01209:    	je     0x32aa4
  0120f:    	cmp    WORD PTR [rdi+0x2],0x3
  01214:    	jne    0x122d
  0121a:    	cmp    esi,0x6
  0121d:    	jge    0x122d
  01223:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01228:    	jmp    0x1289
  0122d:    	sub    rsp,0x30
  01231:    	movq   QWORD PTR [rsp],xmm2
  01236:    	movq   QWORD PTR [rsp+0x8],xmm4
  0123c:    	movq   QWORD PTR [rsp+0x10],xmm5
  01242:    	movq   QWORD PTR [rsp+0x18],xmm6
  01248:    	movq   QWORD PTR [rsp+0x20],xmm7
  0124e: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01255: 00 	movabs rax,0x5600b755dfe0
  0125f:    	call   rax
  01261:    	movq   xmm2,QWORD PTR [rsp]
  01266:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0126c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01272:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01278:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0127e: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01285:    	add    rsp,0x30
  01289: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 
:00094 %12 = %13.call z()                   [Vec]
  01290: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01297: 00 	test   rdi,0x7
  0129e:    	jne    0x32b1d
  012a4:    	cmp    DWORD PTR [rdi+0x4],0x28
  012a8:    	jne    0x32b1d
  012ae: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1ca6],0x26        # 0xfffe2f5b
  012b5:    	jne    0x32b1d
  012bb:    	mov    esi,DWORD PTR [rip+0x46b]        # 0x172c
  012c1:    	cmp    esi,0xffffffff
  012c4:    	je     0x32b54
  012ca:    	cmp    WORD PTR [rdi+0x2],0x3
  012cf:    	jne    0x12e8
  012d5:    	cmp    esi,0x6
  012d8:    	jge    0x12e8
  012de:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  012e3:    	jmp    0x1344
  012e8:    	sub    rsp,0x30
  012ec:    	movq   QWORD PTR [rsp],xmm2
  012f1:    	movq   QWORD PTR [rsp+0x8],xmm4
  012f7:    	movq   QWORD PTR [rsp+0x10],xmm5
  012fd:    	movq   QWORD PTR [rsp+0x18],xmm6
  01303:    	movq   QWORD PTR [rsp+0x20],xmm7
  01309: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01310: 00 	movabs rax,0x5600b755dfe0
  0131a:    	call   rax
  0131c:    	movq   xmm2,QWORD PTR [rsp]
  01321:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01327:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0132d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01333:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01339: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01340:    	add    rsp,0x30
  01344: ff 	mov    QWORD PTR [rbp-0x88],rax
:00095 
:00097 %12 = %6 * %12                       [Float][Float]
  0134b: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01352: 00 	test   rdi,0x1
  01359:    	jne    0x32bcd
  0135f: 00 	test   rdi,0x2
  01366:    	je     0x13a2
  0136c:    	xorps  xmm3,xmm3
  0136f: 00 	movabs rax,0x8000000000000002
  01379:    	cmp    rdi,rax
  0137c:    	je     0x13b4
  01382:    	mov    rax,rdi
  01385:    	sar    rax,0x3f
  01389:    	add    rax,0x2
  0138d:    	and    rdi,0xfffffffffffffffc
  01391:    	or     rdi,rax
  01394:    	rol    rdi,0x3d
  01398:    	movq   xmm3,rdi
  0139d:    	jmp    0x13b4
  013a2:    	call   0xfffe046c
  013a7:    	test   rax,rax
  013aa:    	je     0x32bcd
  013b0:    	movq   xmm3,xmm0
  013b4:    	mulsd  xmm3,xmm6
:00098 %11 = %11 + %12                      [Float][Float]
  013b8:    	mov    rdi,QWORD PTR [rbp-0x80]
  013bc: 00 	test   rdi,0x1
  013c3:    	jne    0x32c04
  013c9: 00 	test   rdi,0x2
  013d0:    	je     0x140d
  013d6:    	xorps  xmm9,xmm9
  013da: 00 	movabs rax,0x8000000000000002
  013e4:    	cmp    rdi,rax
  013e7:    	je     0x1420
  013ed:    	mov    rax,rdi
  013f0:    	sar    rax,0x3f
  013f4:    	add    rax,0x2
  013f8:    	and    rdi,0xfffffffffffffffc
  013fc:    	or     rdi,rax
  013ff:    	rol    rdi,0x3d
  01403:    	movq   xmm9,rdi
  01408:    	jmp    0x1420
  0140d:    	call   0xfffe046c
  01412:    	test   rax,rax
  01415:    	je     0x32c04
  0141b:    	movq   xmm9,xmm0
  01420:    	addsd  xmm9,xmm3
:00099 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
  01425:    	movq   xmm0,xmm7
  01429:    	call   0xfffe055f
  0142e:    	mov    QWORD PTR [rbp-0x70],rax
  01432:    	movq   xmm0,xmm8
  01437:    	call   0xfffe055f
  0143c:    	mov    QWORD PTR [rbp-0x78],rax
  01440:    	movq   xmm0,xmm9
  01445:    	call   0xfffe055f
  0144a:    	mov    QWORD PTR [rbp-0x80],rax
  0144e:    	mov    rdi,QWORD PTR [rbp-0x68]
  01452: 00 	test   rdi,0x7
  01459:    	jne    0x32c4b
  0145f:    	cmp    DWORD PTR [rdi+0x4],0x29
  01463:    	jne    0x32c4b
  01469: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1aeb],0x26        # 0xfffe2f5b
  01470:    	jne    0x32c4b
  01476: 00 	mov    r9,0x0
  0147d:    	sub    rsp,0x40
  01481:    	movq   QWORD PTR [rsp],xmm2
  01486:    	movq   QWORD PTR [rsp+0x8],xmm3
  0148c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01492:    	movq   QWORD PTR [rsp+0x18],xmm5
  01498:    	movq   QWORD PTR [rsp+0x20],xmm6
  0149e:    	movq   QWORD PTR [rsp+0x28],xmm7
  014a4: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014ab: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014b2:    	mov    rdx,rdi
  014b5:    	mov    rax,QWORD PTR [rbx]
  014b8:    	lea    rdi,[rsp-0x18]
  014bd:    	mov    QWORD PTR [rdi],rax
  014c0:    	mov    QWORD PTR [rbx],rdi
  014c3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014cc:    	mov    QWORD PTR [rsp-0x38],rcx
  014d1:    	lea    rcx,[rbp-0x70]
  014d5: 00 	mov    r8,0x3
  014dc:    	call   0x32c77
  014e1:    	lea    rdi,[rbp-0x8]
  014e5:    	mov    QWORD PTR [rbx],rdi
  014e8:    	movq   xmm2,QWORD PTR [rsp]
  014ed:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014f3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014f9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014ff:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01505:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0150b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01512: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01519:    	add    rsp,0x40
  0151d: 00 	movabs r13,0x5600b92b7850
  01527:    	test   rax,rax
  0152a:    	je     0xfffe0433
  01530:    	mov    QWORD PTR [rbp-0x60],rax
:00100 
:00102 _ = %2.call pl=(%7; 1)               [Isect]
  01534:    	mov    rdi,QWORD PTR [rbp-0x38]
  01538: 00 	test   rdi,0x7
  0153f:    	jne    0x32ca9
  01545:    	cmp    DWORD PTR [rdi+0x4],0x30
  01549:    	jne    0x32ca9
  0154f: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1a05],0x26        # 0xfffe2f5b
  01556:    	jne    0x32ca9
  0155c:    	mov    esi,DWORD PTR [rip+0x1d2]        # 0x1734
  01562:    	cmp    esi,0xffffffff
  01565:    	je     0x32cd5
  0156b:    	cmp    WORD PTR [rdi+0x2],0x3
  01570:    	jne    0x158d
  01576:    	cmp    esi,0x6
  01579:    	jge    0x158d
  0157f:    	mov    rax,QWORD PTR [rbp-0x60]
  01583:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01588:    	jmp    0x161a
  0158d:    	sub    rsp,0x40
  01591:    	movq   QWORD PTR [rsp],xmm2
  01596:    	movq   QWORD PTR [rsp+0x8],xmm3
  0159c:    	movq   QWORD PTR [rsp+0x10],xmm4
  015a2:    	movq   QWORD PTR [rsp+0x18],xmm5
  015a8:    	movq   QWORD PTR [rsp+0x20],xmm6
  015ae:    	movq   QWORD PTR [rsp+0x28],xmm7
  015b4: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015bb: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015c2:    	mov    rdx,QWORD PTR [rbp-0x60]
  015c6: 00 	movabs rax,0x5600b755e260
  015d0:    	call   rax
  015d2:    	movq   xmm2,QWORD PTR [rsp]
  015d7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015dd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015e3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015e9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  015ef:    	movq   xmm7,QWORD PTR [rsp+0x28]
  015f5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  015fc: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01603:    	add    rsp,0x40
  01607: 00 	movabs r13,0x5600b92b7880
  01611:    	test   rax,rax
  01614:    	je     0xfffe0433
:00103 
:00105 br =>:00106
  0161a:    	jmp    0x32dd5
:00106 %7 = nil
  0161f: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00107 ret %7
  01627:    	mov    rax,QWORD PTR [rbp-0x60]
  0162b:    	leave  
  0162c:    	ret    
==> start whole compile: <unnamed> FuncId(82) self_class:Scene start:[00000] bytecode:0x5600b92f0960
<== finished compile. elapsed:201.5µs
offset:Pos(136000) code: 8919 bytes  data: 353 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xd0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x1
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x38],rax
  00040:    	mov    QWORD PTR [rbp-0x40],rax
  00044:    	mov    QWORD PTR [rbp-0x48],rax
  00048:    	mov    QWORD PTR [rbp-0x50],rax
  0004c:    	mov    QWORD PTR [rbp-0x58],rax
  00050:    	mov    QWORD PTR [rbp-0x60],rax
  00054:    	mov    QWORD PTR [rbp-0x68],rax
  00058:    	mov    QWORD PTR [rbp-0x70],rax
  0005c:    	mov    QWORD PTR [rbp-0x78],rax
  00060:    	mov    QWORD PTR [rbp-0x80],rax
  00064: ff 	mov    QWORD PTR [rbp-0x88],rax
  0006b: ff 	mov    QWORD PTR [rbp-0x90],rax
  00072: ff 	mov    QWORD PTR [rbp-0x98],rax
  00079: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00080: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00087: ff 	mov    QWORD PTR [rbp-0xb0],rax
  0008e: ff 	mov    QWORD PTR [rbp-0xb8],rax
  00095: ff 	mov    QWORD PTR [rbp-0xc0],rax
  0009c:    	mov    rdi,QWORD PTR [rbp-0x28]
  000a0: 00 	test   rdi,0x7
  000a7:    	jne    0x316d3
  000ad:    	cmp    DWORD PTR [rdi+0x4],0x32
  000b1:    	jne    0x316d3
:00000 init reg_num:20 arg_num:1 stack_offset:13
:00001 %14 = dynvar(4, %4)
  000b7:    	mov    rax,QWORD PTR [rbp-0x10]
  000bb:    	mov    rax,QWORD PTR [rax]
  000be:    	mov    rax,QWORD PTR [rax]
  000c1:    	mov    rax,QWORD PTR [rax]
  000c4:    	mov    rax,QWORD PTR [rax-0x38]
  000c8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00002 %14 = %14 + 1: i16                   [Integer][Integer]
  000cf: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000d6: 00 	test   rdi,0x1
  000dd:    	je     0x316e2
  000e3:    	add    rdi,0x2
  000e7:    	jo     0x316e2
  000ed: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00003 dynvar(4, %4) = %14
  000f4:    	mov    rax,QWORD PTR [rbp-0x10]
  000f8:    	mov    rax,QWORD PTR [rax]
  000fb:    	mov    rax,QWORD PTR [rax]
  000fe:    	mov    rax,QWORD PTR [rax]
  00101: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00108:    	mov    QWORD PTR [rax-0x38],rdi
:00004 %14 = dynvar(4, %1)
  0010c:    	mov    rax,QWORD PTR [rbp-0x10]
  00110:    	mov    rax,QWORD PTR [rax]
  00113:    	mov    rax,QWORD PTR [rax]
  00116:    	mov    rax,QWORD PTR [rax]
  00119:    	mov    rax,QWORD PTR [rax-0x20]
  0011d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00005 %2 = %14.call to_f()                 [Integer]
  00124: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0012b: 00 	test   rdi,0x1
  00132:    	je     0x316f1
  00138: 26 	cmp    DWORD PTR [rip+0xfffffffffffe16e4],0x26        # 0xfffe1823
  0013f:    	jne    0x316f1
  00145:    	sar    rdi,1
  00148:    	cvtsi2sd xmm2,rdi
:00006 
:00008 %14 = dynvar(4, %2)
  0014d:    	mov    rax,QWORD PTR [rbp-0x10]
  00151:    	mov    rax,QWORD PTR [rax]
  00154:    	mov    rax,QWORD PTR [rax]
  00157:    	mov    rax,QWORD PTR [rax]
  0015a:    	mov    rax,QWORD PTR [rax-0x28]
  0015e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00009 %3 = %14.call to_f()                 [Integer]
  00165: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0016c: 00 	test   rdi,0x1
  00173:    	je     0x31700
  00179: 26 	cmp    DWORD PTR [rip+0xfffffffffffe16a3],0x26        # 0xfffe1823
  00180:    	jne    0x31700
  00186:    	sar    rdi,1
  00189:    	cvtsi2sd xmm3,rdi
:00010 
:00012 %14 = dynvar(2, %1)
  0018e:    	mov    rax,QWORD PTR [rbp-0x10]
  00192:    	mov    rax,QWORD PTR [rax]
  00195:    	mov    rax,QWORD PTR [rax-0x20]
  00199: ff 	mov    QWORD PTR [rbp-0x98],rax
:00013 %4 = %14.call to_f()                 [Integer]
  001a0: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001a7: 00 	test   rdi,0x1
  001ae:    	je     0x3171c
  001b4: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1668],0x26        # 0xfffe1823
  001bb:    	jne    0x3171c
  001c1:    	sar    rdi,1
  001c4:    	cvtsi2sd xmm4,rdi
:00014 
:00016 %14 = dynvar(3, %1)
  001c9:    	mov    rax,QWORD PTR [rbp-0x10]
  001cd:    	mov    rax,QWORD PTR [rax]
  001d0:    	mov    rax,QWORD PTR [rax]
  001d3:    	mov    rax,QWORD PTR [rax-0x20]
  001d7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00017 %5 = %14.call to_f()                 [Integer]
  001de: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001e5: 00 	test   rdi,0x1
  001ec:    	je     0x31745
  001f2: 26 	cmp    DWORD PTR [rip+0xfffffffffffe162a],0x26        # 0xfffe1823
  001f9:    	jne    0x31745
  001ff:    	sar    rdi,1
  00202:    	cvtsi2sd xmm5,rdi
:00018 
:00020 %6 = %1.call to_f()                  [Integer]
  00207:    	mov    rdi,QWORD PTR [rbp-0x30]
  0020b: 00 	test   rdi,0x1
  00212:    	je     0x3177b
  00218: 26 	cmp    DWORD PTR [rip+0xfffffffffffe1604],0x26        # 0xfffe1823
  0021f:    	jne    0x3177b
  00225:    	sar    rdi,1
  00228:    	cvtsi2sd xmm6,rdi
:00021 
:00023 %14 = dynvar(1, %1)
  0022d:    	mov    rax,QWORD PTR [rbp-0x10]
  00231:    	mov    rax,QWORD PTR [rax-0x20]
  00235: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %7 = %14.call to_f()                 [Integer]
  0023c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00243: 00 	test   rdi,0x1
  0024a:    	je     0x317be
  00250: 26 	cmp    DWORD PTR [rip+0xfffffffffffe15cc],0x26        # 0xfffe1823
  00257:    	jne    0x317be
  0025d:    	sar    rdi,1
  00260:    	cvtsi2sd xmm7,rdi
:00025 
:00027 %14 = dynvar(4, %5)
  00265:    	mov    rax,QWORD PTR [rbp-0x10]
  00269:    	mov    rax,QWORD PTR [rax]
  0026c:    	mov    rax,QWORD PTR [rax]
  0026f:    	mov    rax,QWORD PTR [rax]
  00272:    	mov    rax,QWORD PTR [rax-0x40]
  00276: ff 	mov    QWORD PTR [rbp-0x98],rax
:00028 %14 = %6 / %14                       [Float][Float]
  0027d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00284: 00 	test   rdi,0x1
  0028b:    	jne    0x3180e
  00291: 00 	test   rdi,0x2
  00298:    	je     0x2d5
  0029e:    	xorps  xmm8,xmm8
  002a2: 00 	movabs rax,0x8000000000000002
  002ac:    	cmp    rdi,rax
  002af:    	je     0x2e8
  002b5:    	mov    rax,rdi
  002b8:    	sar    rax,0x3f
  002bc:    	add    rax,0x2
  002c0:    	and    rdi,0xfffffffffffffffc
  002c4:    	or     rdi,rax
  002c7:    	rol    rdi,0x3d
  002cb:    	movq   xmm8,rdi
  002d0:    	jmp    0x2e8
  002d5:    	call   0xfffded34
  002da:    	test   rax,rax
  002dd:    	je     0x3180e
  002e3:    	movq   xmm8,xmm0
  002e8:    	movq   rax,xmm8
  002ed:    	test   rax,rax
  002f0:    	je     0xfffded20
  002f6:    	movq   xmm0,xmm6
  002fa:    	divsd  xmm0,xmm8
  002ff:    	movq   xmm8,xmm0
:00029 %14 = %4 + %14                       [Float][Float]
  00304:    	addsd  xmm8,xmm4
:00030 %15 = literal[2.0]
  00309: 1f 	movq   xmm9,QWORD PTR [rip+0x1fce]        # 0x22e0
  00312: 00 	mov    rax,0x2
  00319: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00031 %15 = %2 / %15                       [Float][Float]
  00320:    	movq   rax,xmm9
  00325:    	test   rax,rax
  00328:    	je     0xfffded20
  0032e:    	movq   xmm0,xmm2
  00332:    	divsd  xmm0,xmm9
  00337:    	movq   xmm9,xmm0
:00032 %14 = %14 - %15                      [Float][Float]
  0033c:    	subsd  xmm8,xmm9
:00033 %15 = literal[2.0]
  00341: 1f 	movq   xmm9,QWORD PTR [rip+0x1fa6]        # 0x22f0
  0034a: 00 	mov    rax,0x2
  00351: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00034 %15 = %2 / %15                       [Float][Float]
  00358:    	movq   rax,xmm9
  0035d:    	test   rax,rax
  00360:    	je     0xfffded20
  00366:    	movq   xmm0,xmm2
  0036a:    	divsd  xmm0,xmm9
  0036f:    	movq   xmm9,xmm0
:00035 %8 = %14 / %15                       [Float][Float]
  00374:    	movq   xmm10,xmm8
  00379:    	movq   rax,xmm9
  0037e:    	test   rax,rax
  00381:    	je     0xfffded20
  00387:    	divsd  xmm10,xmm9
:00036 %14 = dynvar(4, %5)
  0038c:    	mov    rax,QWORD PTR [rbp-0x10]
  00390:    	mov    rax,QWORD PTR [rax]
  00393:    	mov    rax,QWORD PTR [rax]
  00396:    	mov    rax,QWORD PTR [rax]
  00399:    	mov    rax,QWORD PTR [rax-0x40]
  0039d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00037 %14 = %7 / %14                       [Float][Float]
  003a4: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003ab: 00 	test   rdi,0x1
  003b2:    	jne    0x3186b
  003b8: 00 	test   rdi,0x2
  003bf:    	je     0x3fc
  003c5:    	xorps  xmm8,xmm8
  003c9: 00 	movabs rax,0x8000000000000002
  003d3:    	cmp    rdi,rax
  003d6:    	je     0x40f
  003dc:    	mov    rax,rdi
  003df:    	sar    rax,0x3f
  003e3:    	add    rax,0x2
  003e7:    	and    rdi,0xfffffffffffffffc
  003eb:    	or     rdi,rax
  003ee:    	rol    rdi,0x3d
  003f2:    	movq   xmm8,rdi
  003f7:    	jmp    0x40f
  003fc:    	call   0xfffded34
  00401:    	test   rax,rax
  00404:    	je     0x3186b
  0040a:    	movq   xmm8,xmm0
  0040f:    	movq   rax,xmm8
  00414:    	test   rax,rax
  00417:    	je     0xfffded20
  0041d:    	movq   xmm0,xmm7
  00421:    	divsd  xmm0,xmm8
  00426:    	movq   xmm8,xmm0
:00038 %14 = %5 + %14                       [Float][Float]
  0042b:    	addsd  xmm8,xmm5
:00039 %15 = literal[2.0]
  00430: 1e 	movq   xmm9,QWORD PTR [rip+0x1ec7]        # 0x2300
  00439: 00 	mov    rax,0x2
  00440: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00040 %15 = %3 / %15                       [Float][Float]
  00447:    	movq   rax,xmm9
  0044c:    	test   rax,rax
  0044f:    	je     0xfffded20
  00455:    	movq   xmm0,xmm3
  00459:    	divsd  xmm0,xmm9
  0045e:    	movq   xmm9,xmm0
:00041 %14 = %14 - %15                      [Float][Float]
  00463:    	subsd  xmm8,xmm9
:00042 %14 = neg %14                        [Float]
  00468: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1ea0]        # 0x2310
:00043 %15 = literal[2.0]
  00470: 1e 	movq   xmm9,QWORD PTR [rip+0x1ea7]        # 0x2320
  00479: 00 	mov    rax,0x2
  00480: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00044 %15 = %3 / %15                       [Float][Float]
  00487:    	movq   rax,xmm9
  0048c:    	test   rax,rax
  0048f:    	je     0xfffded20
  00495:    	movq   xmm0,xmm3
  00499:    	divsd  xmm0,xmm9
  0049e:    	movq   xmm9,xmm0
:00045 %9 = %14 / %15                       [Float][Float]
  004a3:    	movq   xmm11,xmm8
  004a8:    	movq   rax,xmm9
  004ad:    	test   rax,rax
  004b0:    	je     0xfffded20
  004b6:    	divsd  xmm11,xmm9
:00046 %15 = const[Vec]                     [Vec]
  004bb: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe136e]        # 0xfffe1830
  004c2: 00 	cmp    rax,QWORD PTR [rip+0x1e77]        # 0x2340
  004c9:    	jne    0x318e7
  004cf: 00 	mov    rax,QWORD PTR [rip+0x1e5a]        # 0x2330
  004d6: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00047 %16 = %8
:00048 %17 = %9
:00049 %18 = literal[-1.0]
  004dd: 1e 	movq   xmm9,QWORD PTR [rip+0x1e6a]        # 0x2350
  004e6: 00 	movabs rax,0xff80000000000006
  004f0: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00050 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
  004f7:    	movq   xmm0,xmm10
  004fc:    	call   0xfffdee27
  00501: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00508:    	movq   xmm0,xmm11
  0050d:    	call   0xfffdee27
  00512: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00519: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00520: 00 	test   rdi,0x7
  00527:    	jne    0x319a5
  0052d:    	cmp    DWORD PTR [rdi+0x4],0x29
  00531:    	jne    0x319a5
  00537: 26 	cmp    DWORD PTR [rip+0xfffffffffffe12e5],0x26        # 0xfffe1823
  0053e:    	jne    0x319a5
  00544: 00 	mov    r9,0x0
  0054b:    	sub    rsp,0x50
  0054f:    	movq   QWORD PTR [rsp],xmm2
  00554:    	movq   QWORD PTR [rsp+0x8],xmm3
  0055a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00560:    	movq   QWORD PTR [rsp+0x18],xmm5
  00566:    	movq   QWORD PTR [rsp+0x20],xmm6
  0056c:    	movq   QWORD PTR [rsp+0x28],xmm7
  00572: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00579: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00580: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00587:    	mov    rdx,rdi
  0058a:    	mov    rax,QWORD PTR [rbx]
  0058d:    	lea    rdi,[rsp-0x18]
  00592:    	mov    QWORD PTR [rdi],rax
  00595:    	mov    QWORD PTR [rbx],rdi
  00598: 00 	mov    QWORD PTR [rsp-0x20],0x0
  005a1:    	mov    QWORD PTR [rsp-0x38],rcx
  005a6: ff 	lea    rcx,[rbp-0xa8]
  005ad: 00 	mov    r8,0x3
  005b4:    	call   0x31a1e
  005b9:    	lea    rdi,[rbp-0x8]
  005bd:    	mov    QWORD PTR [rbx],rdi
  005c0:    	movq   xmm2,QWORD PTR [rsp]
  005c5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005cb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005d1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005d7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  005dd:    	movq   xmm7,QWORD PTR [rsp+0x28]
  005e3: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  005ea: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  005f1: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  005f8:    	add    rsp,0x50
  005fc: 00 	movabs r13,0x5600b92f0ca0
  00606:    	test   rax,rax
  00609:    	je     0xfffdecfb
  0060f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00051 
:00053 %10 = %14.call vnormalize()          [Vec]
  00616: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0061d: 00 	test   rdi,0x7
  00624:    	jne    0x31a50
  0062a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0062e:    	jne    0x31a50
  00634: 26 	cmp    DWORD PTR [rip+0xfffffffffffe11e8],0x26        # 0xfffe1823
  0063b:    	jne    0x31a50
  00641:    	sub    rsp,0x50
  00645:    	movq   QWORD PTR [rsp],xmm2
  0064a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00650:    	movq   QWORD PTR [rsp+0x10],xmm4
  00656:    	movq   QWORD PTR [rsp+0x18],xmm5
  0065c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00662:    	movq   QWORD PTR [rsp+0x28],xmm7
  00668: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0066f: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00676: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  0067d:    	mov    rax,QWORD PTR [rbx]
  00680:    	lea    rdi,[rsp-0x18]
  00685:    	mov    QWORD PTR [rdi],rax
  00688:    	mov    QWORD PTR [rbx],rdi
  0068b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00694:    	mov    QWORD PTR [rsp-0x38],rcx
  00699: ff 	mov    rax,QWORD PTR [rbp-0x98]
  006a0:    	mov    QWORD PTR [rsp-0x38],rax
  006a5: 00 	mov    rdi,0x0
  006ac: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006b5: 07 	movabs rax,0x700000043
  006bf:    	mov    QWORD PTR [rsp-0x28],rax
  006c4: 00 	movabs r13,0x5600b92c5690
  006ce:    	call   0xfffe214a
  006d3:    	lea    rdi,[rbp-0x8]
  006d7:    	mov    QWORD PTR [rbx],rdi
  006da:    	movq   xmm2,QWORD PTR [rsp]
  006df:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006e5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006eb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006f1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  006f7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  006fd: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00704: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0070b: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00712:    	add    rsp,0x50
  00716: 00 	movabs r13,0x5600b92f0cd0
  00720:    	test   rax,rax
  00723:    	je     0xfffdecfb
  00729:    	mov    QWORD PTR [rbp-0x78],rax
:00054 
:00056 %14 = const[Ray]                     [Ray]
  0072d: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe10fc]        # 0xfffe1830
  00734: 00 	cmp    rax,QWORD PTR [rip+0x1c35]        # 0x2370
  0073b:    	jne    0x31ac9
  00741: 00 	mov    rax,QWORD PTR [rip+0x1c18]        # 0x2360
  00748: ff 	mov    QWORD PTR [rbp-0x98],rax
:00057 %16 = const[Vec]                     [Vec]
  0074f: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe10da]        # 0xfffe1830
  00756: 00 	cmp    rax,QWORD PTR [rip+0x1c33]        # 0x2390
  0075d:    	jne    0x31b87
  00763: 00 	mov    rax,QWORD PTR [rip+0x1c16]        # 0x2380
  0076a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00058 %17 = literal[0.0]
  00771: 1c 	movq   xmm8,QWORD PTR [rip+0x1c26]        # 0x23a0
  0077a: 00 	movabs rax,0x8000000000000002
  00784: ff 	mov    QWORD PTR [rbp-0xb0],rax
:00059 %18 = literal[0.0]
  0078b: 1c 	movq   xmm9,QWORD PTR [rip+0x1c1c]        # 0x23b0
  00794: 00 	movabs rax,0x8000000000000002
  0079e: ff 	mov    QWORD PTR [rbp-0xb8],rax
:00060 %19 = literal[0.0]
  007a5: 1c 	movq   xmm12,QWORD PTR [rip+0x1c12]        # 0x23c0
  007ae: 00 	movabs rax,0x8000000000000002
  007b8: ff 	mov    QWORD PTR [rbp-0xc0],rax
:00061 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
  007bf: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  007c6: 00 	test   rdi,0x7
  007cd:    	jne    0x31c45
  007d3:    	cmp    DWORD PTR [rdi+0x4],0x29
  007d7:    	jne    0x31c45
  007dd: 26 	cmp    DWORD PTR [rip+0xfffffffffffe103f],0x26        # 0xfffe1823
  007e4:    	jne    0x31c45
  007ea: 00 	mov    r9,0x0
  007f1:    	sub    rsp,0x60
  007f5:    	movq   QWORD PTR [rsp],xmm2
  007fa:    	movq   QWORD PTR [rsp+0x8],xmm3
  00800:    	movq   QWORD PTR [rsp+0x10],xmm4
  00806:    	movq   QWORD PTR [rsp+0x18],xmm5
  0080c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00812:    	movq   QWORD PTR [rsp+0x28],xmm7
  00818: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0081f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00826: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0082d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00834: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0083b:    	mov    rdx,rdi
  0083e:    	mov    rax,QWORD PTR [rbx]
  00841:    	lea    rdi,[rsp-0x18]
  00846:    	mov    QWORD PTR [rdi],rax
  00849:    	mov    QWORD PTR [rbx],rdi
  0084c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00855:    	mov    QWORD PTR [rsp-0x38],rcx
  0085a: ff 	lea    rcx,[rbp-0xb0]
  00861: 00 	mov    r8,0x3
  00868:    	call   0x31cbe
  0086d:    	lea    rdi,[rbp-0x8]
  00871:    	mov    QWORD PTR [rbx],rdi
  00874:    	movq   xmm2,QWORD PTR [rsp]
  00879:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0087f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00885:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0088b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00891:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00897: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0089e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008a5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008ac: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008b3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008ba:    	add    rsp,0x60
  008be: 00 	movabs r13,0x5600b92f0d50
  008c8:    	test   rax,rax
  008cb:    	je     0xfffdecfb
  008d1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00062 
:00064 %16 = %10
  008d8:    	mov    rax,QWORD PTR [rbp-0x78]
  008dc: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00065 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
  008e3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  008ea: 00 	test   rdi,0x7
  008f1:    	jne    0x31cf0
  008f7:    	cmp    DWORD PTR [rdi+0x4],0x2f
  008fb:    	jne    0x31cf0
  00901: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0f1b],0x26        # 0xfffe1823
  00908:    	jne    0x31cf0
  0090e: 00 	mov    r9,0x0
  00915:    	sub    rsp,0x60
  00919:    	movq   QWORD PTR [rsp],xmm2
  0091e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00924:    	movq   QWORD PTR [rsp+0x10],xmm4
  0092a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00930:    	movq   QWORD PTR [rsp+0x20],xmm6
  00936:    	movq   QWORD PTR [rsp+0x28],xmm7
  0093c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00943: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0094a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00951: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00958: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0095f:    	mov    rdx,rdi
  00962:    	mov    rax,QWORD PTR [rbx]
  00965:    	lea    rdi,[rsp-0x18]
  0096a:    	mov    QWORD PTR [rdi],rax
  0096d:    	mov    QWORD PTR [rbx],rdi
  00970: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00979:    	mov    QWORD PTR [rsp-0x38],rcx
  0097e: ff 	lea    rcx,[rbp-0xa0]
  00985: 00 	mov    r8,0x2
  0098c:    	call   0x31d69
  00991:    	lea    rdi,[rbp-0x8]
  00995:    	mov    QWORD PTR [rbx],rdi
  00998:    	movq   xmm2,QWORD PTR [rsp]
  0099d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009a3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009a9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009af:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009b5:    	movq   xmm7,QWORD PTR [rsp+0x28]
  009bb: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  009c2: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  009c9: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  009d0: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  009d7: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  009de:    	add    rsp,0x60
  009e2: 00 	movabs r13,0x5600b92f0d90
  009ec:    	test   rax,rax
  009ef:    	je     0xfffdecfb
  009f5:    	mov    QWORD PTR [rbp-0x80],rax
:00066 
:00068 %14 = const[Isect]                   [Isect]
  009f9: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe0e30]        # 0xfffe1830
  00a00: 00 	cmp    rax,QWORD PTR [rip+0x19d9]        # 0x23e0
  00a07:    	jne    0x31d9b
  00a0d: 00 	mov    rax,QWORD PTR [rip+0x19bc]        # 0x23d0
  00a14: ff 	mov    QWORD PTR [rbp-0x98],rax
:00069 %12 = %14.call new()                 [#<Class:Isect>]
  00a1b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a22: 00 	test   rdi,0x7
  00a29:    	jne    0x31e75
  00a2f:    	cmp    DWORD PTR [rdi+0x4],0x31
  00a33:    	jne    0x31e75
  00a39: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0de3],0x26        # 0xfffe1823
  00a40:    	jne    0x31e75
  00a46: 00 	mov    r9,0x0
  00a4d:    	sub    rsp,0x60
  00a51:    	movq   QWORD PTR [rsp],xmm2
  00a56:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a5c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a62:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a68:    	movq   QWORD PTR [rsp+0x20],xmm6
  00a6e:    	movq   QWORD PTR [rsp+0x28],xmm7
  00a74: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00a7b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00a82: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00a89: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00a90: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00a97:    	mov    rdx,rdi
  00a9a:    	mov    rax,QWORD PTR [rbx]
  00a9d:    	lea    rdi,[rsp-0x18]
  00aa2:    	mov    QWORD PTR [rdi],rax
  00aa5:    	mov    QWORD PTR [rbx],rdi
  00aa8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ab1:    	mov    QWORD PTR [rsp-0x38],rcx
  00ab6: ff 	lea    rcx,[rbp-0xa0]
  00abd: 00 	mov    r8,0x0
  00ac4:    	call   0x31eee
  00ac9:    	lea    rdi,[rbp-0x8]
  00acd:    	mov    QWORD PTR [rbx],rdi
  00ad0:    	movq   xmm2,QWORD PTR [rsp]
  00ad5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00adb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ae1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ae7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00aed:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00af3: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00afa: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b01: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b08: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b0f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b16:    	add    rsp,0x60
  00b1a: 00 	movabs r13,0x5600b92f0dd0
  00b24:    	test   rax,rax
  00b27:    	je     0xfffdecfb
  00b2d: ff 	mov    QWORD PTR [rbp-0x88],rax
:00070 
:00072 %14 = @spheres: Scene[IvarId(0)]
  00b34:    	mov    rdi,QWORD PTR [rbp-0x28]
  00b38:    	mov    rax,QWORD PTR [rdi+0x10]
  00b3c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00073 %15 = 0: i32
  00b43: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00074 %14 = %14.[%15]                      [Array][Integer]
  00b4e:    	sub    rsp,0x60
  00b52:    	movq   QWORD PTR [rsp],xmm2
  00b57:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b5d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b63:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b69:    	movq   QWORD PTR [rsp+0x20],xmm6
  00b6f:    	movq   QWORD PTR [rsp+0x28],xmm7
  00b75: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00b7c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00b83: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00b8a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00b91: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00b98: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00b9f: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00ba6:    	mov    rdi,rbx
  00ba9:    	mov    rsi,r12
  00bac: 00 	movabs r8,0x5600b92f0e08
  00bb6: 00 	movabs rax,0x5600b75c5240
  00bc0:    	call   rax
  00bc2:    	movq   xmm2,QWORD PTR [rsp]
  00bc7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bcd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00bd3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00bd9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00bdf:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00be5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00bec: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00bf3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00bfa: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c01: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c08:    	add    rsp,0x60
  00c0c: 00 	movabs r13,0x5600b92f0e10
  00c16:    	test   rax,rax
  00c19:    	je     0xfffdecfb
  00c1f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00075 %15 = %11
  00c26:    	mov    rax,QWORD PTR [rbp-0x80]
  00c2a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00076 %16 = %12
  00c31: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00c38: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00077 _ = %14.call intersect(%15; 2)       [Sphere]
  00c3f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00c46: 00 	test   rdi,0x7
  00c4d:    	jne    0x31f20
  00c53:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00c57:    	jne    0x31f20
  00c5d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0bbf],0x26        # 0xfffe1823
  00c64:    	jne    0x31f20
  00c6a:    	sub    rsp,0x60
  00c6e:    	movq   QWORD PTR [rsp],xmm2
  00c73:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c79:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c7f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c85:    	movq   QWORD PTR [rsp+0x20],xmm6
  00c8b:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c91: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00c98: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00c9f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ca6: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00cad: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00cb4:    	mov    rax,QWORD PTR [rbx]
  00cb7:    	lea    rdi,[rsp-0x18]
  00cbc:    	mov    QWORD PTR [rdi],rax
  00cbf:    	mov    QWORD PTR [rbx],rdi
  00cc2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ccb:    	mov    QWORD PTR [rsp-0x38],rcx
  00cd0: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00cd7:    	mov    QWORD PTR [rsp-0x38],rax
  00cdc: 00 	mov    rdi,0x2
  00ce3: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00cea:    	mov    QWORD PTR [rsp-0x40],rax
  00cef: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00cf6:    	mov    QWORD PTR [rsp-0x48],rax
  00cfb: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d04: 10 	movabs rax,0x1000000045
  00d0e:    	mov    QWORD PTR [rsp-0x28],rax
  00d13: 00 	movabs r13,0x5600b92b5360
  00d1d:    	call   0xfffe2452
  00d22:    	lea    rdi,[rbp-0x8]
  00d26:    	mov    QWORD PTR [rbx],rdi
  00d29:    	movq   xmm2,QWORD PTR [rsp]
  00d2e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d34:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d3a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d40:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d46:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d4c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00d53: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00d5a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00d61: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00d68: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00d6f:    	add    rsp,0x60
  00d73: 00 	movabs r13,0x5600b92f0e50
  00d7d:    	test   rax,rax
  00d80:    	je     0xfffdecfb
:00078 
:00080 %14 = @spheres: Scene[IvarId(0)]
  00d86:    	mov    rdi,QWORD PTR [rbp-0x28]
  00d8a:    	mov    rax,QWORD PTR [rdi+0x10]
  00d8e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00081 %15 = 1: i32
  00d95: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00082 %14 = %14.[%15]                      [Array][Integer]
  00da0:    	sub    rsp,0x60
  00da4:    	movq   QWORD PTR [rsp],xmm2
  00da9:    	movq   QWORD PTR [rsp+0x8],xmm3
  00daf:    	movq   QWORD PTR [rsp+0x10],xmm4
  00db5:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dbb:    	movq   QWORD PTR [rsp+0x20],xmm6
  00dc1:    	movq   QWORD PTR [rsp+0x28],xmm7
  00dc7: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00dce: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00dd5: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ddc: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00de3: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00dea: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00df1: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00df8:    	mov    rdi,rbx
  00dfb:    	mov    rsi,r12
  00dfe: 00 	movabs r8,0x5600b92f0e88
  00e08: 00 	movabs rax,0x5600b75c5240
  00e12:    	call   rax
  00e14:    	movq   xmm2,QWORD PTR [rsp]
  00e19:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e1f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e25:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e2b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e31:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e37: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00e3e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00e45: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00e4c: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00e53: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00e5a:    	add    rsp,0x60
  00e5e: 00 	movabs r13,0x5600b92f0e90
  00e68:    	test   rax,rax
  00e6b:    	je     0xfffdecfb
  00e71: ff 	mov    QWORD PTR [rbp-0x98],rax
:00083 %15 = %11
  00e78:    	mov    rax,QWORD PTR [rbp-0x80]
  00e7c: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00084 %16 = %12
  00e83: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00e8a: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00085 _ = %14.call intersect(%15; 2)       [Sphere]
  00e91: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e98: 00 	test   rdi,0x7
  00e9f:    	jne    0x31f99
  00ea5:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00ea9:    	jne    0x31f99
  00eaf: 26 	cmp    DWORD PTR [rip+0xfffffffffffe096d],0x26        # 0xfffe1823
  00eb6:    	jne    0x31f99
  00ebc:    	sub    rsp,0x60
  00ec0:    	movq   QWORD PTR [rsp],xmm2
  00ec5:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ecb:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ed1:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ed7:    	movq   QWORD PTR [rsp+0x20],xmm6
  00edd:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ee3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00eea: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00ef1: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ef8: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00eff: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f06:    	mov    rax,QWORD PTR [rbx]
  00f09:    	lea    rdi,[rsp-0x18]
  00f0e:    	mov    QWORD PTR [rdi],rax
  00f11:    	mov    QWORD PTR [rbx],rdi
  00f14: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f1d:    	mov    QWORD PTR [rsp-0x38],rcx
  00f22: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00f29:    	mov    QWORD PTR [rsp-0x38],rax
  00f2e: 00 	mov    rdi,0x2
  00f35: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00f3c:    	mov    QWORD PTR [rsp-0x40],rax
  00f41: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00f48:    	mov    QWORD PTR [rsp-0x48],rax
  00f4d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f56: 10 	movabs rax,0x1000000045
  00f60:    	mov    QWORD PTR [rsp-0x28],rax
  00f65: 00 	movabs r13,0x5600b92b5360
  00f6f:    	call   0xfffe2452
  00f74:    	lea    rdi,[rbp-0x8]
  00f78:    	mov    QWORD PTR [rbx],rdi
  00f7b:    	movq   xmm2,QWORD PTR [rsp]
  00f80:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f86:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f8c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f92:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f98:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f9e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00fa5: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00fac: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00fb3: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00fba: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00fc1:    	add    rsp,0x60
  00fc5: 00 	movabs r13,0x5600b92f0ed0
  00fcf:    	test   rax,rax
  00fd2:    	je     0xfffdecfb
:00086 
:00088 %14 = @spheres: Scene[IvarId(0)]
  00fd8:    	mov    rdi,QWORD PTR [rbp-0x28]
  00fdc:    	mov    rax,QWORD PTR [rdi+0x10]
  00fe0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %15 = 2: i32
  00fe7: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00090 %14 = %14.[%15]                      [Array][Integer]
  00ff2:    	sub    rsp,0x60
  00ff6:    	movq   QWORD PTR [rsp],xmm2
  00ffb:    	movq   QWORD PTR [rsp+0x8],xmm3
  01001:    	movq   QWORD PTR [rsp+0x10],xmm4
  01007:    	movq   QWORD PTR [rsp+0x18],xmm5
  0100d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01013:    	movq   QWORD PTR [rsp+0x28],xmm7
  01019: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01020: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01027: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0102e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01035: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0103c: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01043: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0104a:    	mov    rdi,rbx
  0104d:    	mov    rsi,r12
  01050: 00 	movabs r8,0x5600b92f0f08
  0105a: 00 	movabs rax,0x5600b75c5240
  01064:    	call   rax
  01066:    	movq   xmm2,QWORD PTR [rsp]
  0106b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01071:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01077:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0107d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01083:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01089: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01090: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01097: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0109e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  010a5: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  010ac:    	add    rsp,0x60
  010b0: 00 	movabs r13,0x5600b92f0f10
  010ba:    	test   rax,rax
  010bd:    	je     0xfffdecfb
  010c3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00091 %15 = %11
  010ca:    	mov    rax,QWORD PTR [rbp-0x80]
  010ce: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00092 %16 = %12
  010d5: ff 	mov    rax,QWORD PTR [rbp-0x88]
  010dc: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00093 _ = %14.call intersect(%15; 2)       [Sphere]
  010e3: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  010ea: 00 	test   rdi,0x7
  010f1:    	jne    0x32012
  010f7:    	cmp    DWORD PTR [rdi+0x4],0x2a
  010fb:    	jne    0x32012
  01101: 26 	cmp    DWORD PTR [rip+0xfffffffffffe071b],0x26        # 0xfffe1823
  01108:    	jne    0x32012
  0110e:    	sub    rsp,0x60
  01112:    	movq   QWORD PTR [rsp],xmm2
  01117:    	movq   QWORD PTR [rsp+0x8],xmm3
  0111d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01123:    	movq   QWORD PTR [rsp+0x18],xmm5
  01129:    	movq   QWORD PTR [rsp+0x20],xmm6
  0112f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01135: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0113c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01143: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0114a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01151: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01158:    	mov    rax,QWORD PTR [rbx]
  0115b:    	lea    rdi,[rsp-0x18]
  01160:    	mov    QWORD PTR [rdi],rax
  01163:    	mov    QWORD PTR [rbx],rdi
  01166: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0116f:    	mov    QWORD PTR [rsp-0x38],rcx
  01174: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0117b:    	mov    QWORD PTR [rsp-0x38],rax
  01180: 00 	mov    rdi,0x2
  01187: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0118e:    	mov    QWORD PTR [rsp-0x40],rax
  01193: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  0119a:    	mov    QWORD PTR [rsp-0x48],rax
  0119f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011a8: 10 	movabs rax,0x1000000045
  011b2:    	mov    QWORD PTR [rsp-0x28],rax
  011b7: 00 	movabs r13,0x5600b92b5360
  011c1:    	call   0xfffe2452
  011c6:    	lea    rdi,[rbp-0x8]
  011ca:    	mov    QWORD PTR [rbx],rdi
  011cd:    	movq   xmm2,QWORD PTR [rsp]
  011d2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  011d8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  011de:    	movq   xmm5,QWORD PTR [rsp+0x18]
  011e4:    	movq   xmm6,QWORD PTR [rsp+0x20]
  011ea:    	movq   xmm7,QWORD PTR [rsp+0x28]
  011f0: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  011f7: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  011fe: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01205: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0120c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01213:    	add    rsp,0x60
  01217: 00 	movabs r13,0x5600b92f0f50
  01221:    	test   rax,rax
  01224:    	je     0xfffdecfb
:00094 
:00096 %14 = @plane: Scene[IvarId(1)]
  0122a:    	mov    rdi,QWORD PTR [rbp-0x28]
  0122e:    	mov    rax,QWORD PTR [rdi+0x18]
  01232: ff 	mov    QWORD PTR [rbp-0x98],rax
:00097 %15 = %11
  01239:    	mov    rax,QWORD PTR [rbp-0x80]
  0123d: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00098 %16 = %12
  01244: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0124b: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00099 _ = %14.call intersect(%15; 2)       [Plane]
  01252: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01259: 00 	test   rdi,0x7
  01260:    	jne    0x3208b
  01266:    	cmp    DWORD PTR [rdi+0x4],0x2c
  0126a:    	jne    0x3208b
  01270: 26 	cmp    DWORD PTR [rip+0xfffffffffffe05ac],0x26        # 0xfffe1823
  01277:    	jne    0x3208b
  0127d:    	sub    rsp,0x60
  01281:    	movq   QWORD PTR [rsp],xmm2
  01286:    	movq   QWORD PTR [rsp+0x8],xmm3
  0128c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01292:    	movq   QWORD PTR [rsp+0x18],xmm5
  01298:    	movq   QWORD PTR [rsp+0x20],xmm6
  0129e:    	movq   QWORD PTR [rsp+0x28],xmm7
  012a4: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  012ab: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  012b2: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  012b9: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  012c0: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  012c7:    	mov    rax,QWORD PTR [rbx]
  012ca:    	lea    rdi,[rsp-0x18]
  012cf:    	mov    QWORD PTR [rdi],rax
  012d2:    	mov    QWORD PTR [rbx],rdi
  012d5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012de:    	mov    QWORD PTR [rsp-0x38],rcx
  012e3: ff 	mov    rax,QWORD PTR [rbp-0x98]
  012ea:    	mov    QWORD PTR [rsp-0x38],rax
  012ef: 00 	mov    rdi,0x2
  012f6: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  012fd:    	mov    QWORD PTR [rsp-0x40],rax
  01302: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01309:    	mov    QWORD PTR [rsp-0x48],rax
  0130e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01317: 0e 	movabs rax,0xe00000047
  01321:    	mov    QWORD PTR [rsp-0x28],rax
  01326: 00 	movabs r13,0x5600b92b7200
  01330:    	call   0xfffe2a48
  01335:    	lea    rdi,[rbp-0x8]
  01339:    	mov    QWORD PTR [rbx],rdi
  0133c:    	movq   xmm2,QWORD PTR [rsp]
  01341:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01347:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0134d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01353:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01359:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0135f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01366: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0136d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01374: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0137b: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01382:    	add    rsp,0x60
  01386: 00 	movabs r13,0x5600b92f0fb0
  01390:    	test   rax,rax
  01393:    	je     0xfffdecfb
:00100 
:00102 %14 = %12.call hit()                 [Isect]
  01399: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  013a0: 00 	test   rdi,0x7
  013a7:    	jne    0x32104
  013ad:    	cmp    DWORD PTR [rdi+0x4],0x30
  013b1:    	jne    0x32104
  013b7: 26 	cmp    DWORD PTR [rip+0xfffffffffffe0465],0x26        # 0xfffe1823
  013be:    	jne    0x32104
  013c4:    	mov    esi,DWORD PTR [rip+0x1022]        # 0x23ec
  013ca:    	cmp    esi,0xffffffff
  013cd:    	je     0x3217d
  013d3:    	cmp    WORD PTR [rdi+0x2],0x3
  013d8:    	jne    0x13f1
  013de:    	cmp    esi,0x6
  013e1:    	jge    0x13f1
  013e7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  013ec:    	jmp    0x1491
  013f1:    	sub    rsp,0x60
  013f5:    	movq   QWORD PTR [rsp],xmm2
  013fa:    	movq   QWORD PTR [rsp+0x8],xmm3
  01400:    	movq   QWORD PTR [rsp+0x10],xmm4
  01406:    	movq   QWORD PTR [rsp+0x18],xmm5
  0140c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01412:    	movq   QWORD PTR [rsp+0x28],xmm7
  01418: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0141f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01426: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0142d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01434: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0143b: 00 	movabs rax,0x5600b755dfe0
  01445:    	call   rax
  01447:    	movq   xmm2,QWORD PTR [rsp]
  0144c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01452:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01458:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0145e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01464:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0146a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01471: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01478: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0147f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01486: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0148d:    	add    rsp,0x60
  01491: ff 	mov    QWORD PTR [rbp-0x98],rax
:00103 
:00105 condnotbr %14 =>:00148
  01498: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0149f:    	or     rax,0x10
  014a3:    	cmp    rax,0x14
  014a7:    	je     0x22c3
:00106 %14 = %12
  014ad: ff 	mov    rax,QWORD PTR [rbp-0x88]
  014b4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00107 %13 = %0.call ambient_occlusion(%14; 1) [Scene]
  014bb:    	mov    rdi,QWORD PTR [rbp-0x28]
  014bf: 26 	cmp    DWORD PTR [rip+0xfffffffffffe035d],0x26        # 0xfffe1823
  014c6:    	jne    0x3223a
  014cc:    	sub    rsp,0x60
  014d0:    	movq   QWORD PTR [rsp],xmm2
  014d5:    	movq   QWORD PTR [rsp+0x8],xmm3
  014db:    	movq   QWORD PTR [rsp+0x10],xmm4
  014e1:    	movq   QWORD PTR [rsp+0x18],xmm5
  014e7:    	movq   QWORD PTR [rsp+0x20],xmm6
  014ed:    	movq   QWORD PTR [rsp+0x28],xmm7
  014f3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014fa: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01501: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01508: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0150f: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01516:    	mov    rax,QWORD PTR [rbx]
  01519:    	lea    rdi,[rsp-0x18]
  0151e:    	mov    QWORD PTR [rdi],rax
  01521:    	mov    QWORD PTR [rbx],rdi
  01524: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0152d:    	mov    QWORD PTR [rsp-0x38],rcx
  01532:    	mov    rax,QWORD PTR [rbp-0x28]
  01536:    	mov    QWORD PTR [rsp-0x38],rax
  0153b: 00 	mov    rdi,0x1
  01542: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01549:    	mov    QWORD PTR [rsp-0x40],rax
  0154e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01557: 0e 	movabs rax,0xe0000004b
  01561:    	mov    QWORD PTR [rsp-0x28],rax
  01566: 00 	movabs r13,0x5600b92b7910
  01570:    	call   0xfffeb49d
  01575:    	lea    rdi,[rbp-0x8]
  01579:    	mov    QWORD PTR [rbx],rdi
  0157c:    	movq   xmm2,QWORD PTR [rsp]
  01581:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01587:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0158d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01593:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01599:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0159f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  015a6: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  015ad: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  015b4: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  015bb: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  015c2:    	add    rsp,0x60
  015c6: 00 	movabs r13,0x5600b92f1030
  015d0:    	test   rax,rax
  015d3:    	je     0xfffdecfb
  015d9: ff 	mov    QWORD PTR [rbp-0x90],rax
:00108 
:00110 %14 = dynvar(2, %2)
  015e0:    	mov    rax,QWORD PTR [rbp-0x10]
  015e4:    	mov    rax,QWORD PTR [rax]
  015e7:    	mov    rax,QWORD PTR [rax-0x28]
  015eb: ff 	mov    QWORD PTR [rbp-0x98],rax
:00111 %16 = dynvar(2, %2)
  015f2:    	mov    rax,QWORD PTR [rbp-0x10]
  015f6:    	mov    rax,QWORD PTR [rax]
  015f9:    	mov    rax,QWORD PTR [rax-0x28]
  015fd: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00112 %15 = %16.call x()                   [Vec]
  01604: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  0160b: 00 	test   rdi,0x7
  01612:    	jne    0x322b3
  01618:    	cmp    DWORD PTR [rdi+0x4],0x28
  0161c:    	jne    0x322b3
  01622: 26 	cmp    DWORD PTR [rip+0xfffffffffffe01fa],0x26        # 0xfffe1823
  01629:    	jne    0x322b3
  0162f:    	mov    esi,DWORD PTR [rip+0xdbf]        # 0x23f4
  01635:    	cmp    esi,0xffffffff
  01638:    	je     0x3232c
  0163e:    	cmp    WORD PTR [rdi+0x2],0x3
  01643:    	jne    0x165c
  01649:    	cmp    esi,0x6
  0164c:    	jge    0x165c
  01652:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01657:    	jmp    0x16fc
  0165c:    	sub    rsp,0x60
  01660:    	movq   QWORD PTR [rsp],xmm2
  01665:    	movq   QWORD PTR [rsp+0x8],xmm3
  0166b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01671:    	movq   QWORD PTR [rsp+0x18],xmm5
  01677:    	movq   QWORD PTR [rsp+0x20],xmm6
  0167d:    	movq   QWORD PTR [rsp+0x28],xmm7
  01683: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0168a: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01691: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01698: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0169f: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  016a6: 00 	movabs rax,0x5600b755dfe0
  016b0:    	call   rax
  016b2:    	movq   xmm2,QWORD PTR [rsp]
  016b7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  016bd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  016c3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  016c9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  016cf:    	movq   xmm7,QWORD PTR [rsp+0x28]
  016d5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  016dc: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  016e3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  016ea: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  016f1: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  016f8:    	add    rsp,0x60
  016fc: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00113 
:00115 %16 = %13.call x()                   [Vec]
  01703: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0170a: 00 	test   rdi,0x7
  01711:    	jne    0x323e9
  01717:    	cmp    DWORD PTR [rdi+0x4],0x28
  0171b:    	jne    0x323e9
  01721: 26 	cmp    DWORD PTR [rip+0xfffffffffffe00fb],0x26        # 0xfffe1823
  01728:    	jne    0x323e9
  0172e:    	mov    esi,DWORD PTR [rip+0xcc8]        # 0x23fc
  01734:    	cmp    esi,0xffffffff
  01737:    	je     0x32462
  0173d:    	cmp    WORD PTR [rdi+0x2],0x3
  01742:    	jne    0x175b
  01748:    	cmp    esi,0x6
  0174b:    	jge    0x175b
  01751:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01756:    	jmp    0x17fb
  0175b:    	sub    rsp,0x60
  0175f:    	movq   QWORD PTR [rsp],xmm2
  01764:    	movq   QWORD PTR [rsp+0x8],xmm3
  0176a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01770:    	movq   QWORD PTR [rsp+0x18],xmm5
  01776:    	movq   QWORD PTR [rsp+0x20],xmm6
  0177c:    	movq   QWORD PTR [rsp+0x28],xmm7
  01782: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01789: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01790: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01797: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0179e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  017a5: 00 	movabs rax,0x5600b755dfe0
  017af:    	call   rax
  017b1:    	movq   xmm2,QWORD PTR [rsp]
  017b6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  017bc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  017c2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  017c8:    	movq   xmm6,QWORD PTR [rsp+0x20]
  017ce:    	movq   xmm7,QWORD PTR [rsp+0x28]
  017d4: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  017db: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  017e2: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  017e9: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  017f0: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  017f7:    	add    rsp,0x60
  017fb: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00116 
:00118 %15 = %15 + %16                      [Float][Float]
  01802: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01809: 00 	test   rdi,0x1
  01810:    	jne    0x3251f
  01816: 00 	test   rdi,0x2
  0181d:    	je     0x185a
  01823:    	xorps  xmm13,xmm13
  01827: 00 	movabs rax,0x8000000000000002
  01831:    	cmp    rdi,rax
  01834:    	je     0x186d
  0183a:    	mov    rax,rdi
  0183d:    	sar    rax,0x3f
  01841:    	add    rax,0x2
  01845:    	and    rdi,0xfffffffffffffffc
  01849:    	or     rdi,rax
  0184c:    	rol    rdi,0x3d
  01850:    	movq   xmm13,rdi
  01855:    	jmp    0x186d
  0185a:    	call   0xfffded34
  0185f:    	test   rax,rax
  01862:    	je     0x3251f
  01868:    	movq   xmm13,xmm0
  0186d: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01874: 00 	test   rdi,0x1
  0187b:    	jne    0x32598
  01881: 00 	test   rdi,0x2
  01888:    	je     0x18c5
  0188e:    	xorps  xmm14,xmm14
  01892: 00 	movabs rax,0x8000000000000002
  0189c:    	cmp    rdi,rax
  0189f:    	je     0x18d8
  018a5:    	mov    rax,rdi
  018a8:    	sar    rax,0x3f
  018ac:    	add    rax,0x2
  018b0:    	and    rdi,0xfffffffffffffffc
  018b4:    	or     rdi,rax
  018b7:    	rol    rdi,0x3d
  018bb:    	movq   xmm14,rdi
  018c0:    	jmp    0x18d8
  018c5:    	call   0xfffded34
  018ca:    	test   rax,rax
  018cd:    	je     0x32598
  018d3:    	movq   xmm14,xmm0
  018d8:    	addsd  xmm13,xmm14
:00119 _ = %14.call x=(%15; 1)              [Vec]
  018dd:    	movq   xmm0,xmm13
  018e2:    	call   0xfffdee27
  018e7: ff 	mov    QWORD PTR [rbp-0xa0],rax
  018ee: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  018f5: 00 	test   rdi,0x7
  018fc:    	jne    0x32611
  01902:    	cmp    DWORD PTR [rdi+0x4],0x28
  01906:    	jne    0x32611
  0190c: 26 	cmp    DWORD PTR [rip+0xfffffffffffdff10],0x26        # 0xfffe1823
  01913:    	jne    0x32611
  01919:    	mov    esi,DWORD PTR [rip+0xae5]        # 0x2404
  0191f:    	cmp    esi,0xffffffff
  01922:    	je     0x3268a
  01928:    	cmp    WORD PTR [rdi+0x2],0x3
  0192d:    	jne    0x194d
  01933:    	cmp    esi,0x6
  01936:    	jge    0x194d
  0193c: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01943:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01948:    	jmp    0x1a23
  0194d:    	sub    rsp,0x70
  01951:    	movq   QWORD PTR [rsp],xmm2
  01956:    	movq   QWORD PTR [rsp+0x8],xmm3
  0195c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01962:    	movq   QWORD PTR [rsp+0x18],xmm5
  01968:    	movq   QWORD PTR [rsp+0x20],xmm6
  0196e:    	movq   QWORD PTR [rsp+0x28],xmm7
  01974: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0197b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01982: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01989: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01990: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01997: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  0199e: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  019a5: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  019ac: 00 	movabs rax,0x5600b755e260
  019b6:    	call   rax
  019b8:    	movq   xmm2,QWORD PTR [rsp]
  019bd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  019c3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  019c9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  019cf:    	movq   xmm6,QWORD PTR [rsp+0x20]
  019d5:    	movq   xmm7,QWORD PTR [rsp+0x28]
  019db: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  019e2: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  019e9: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  019f0: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  019f7: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  019fe: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  01a05: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  01a0c:    	add    rsp,0x70
  01a10: 00 	movabs r13,0x5600b92f10f0
  01a1a:    	test   rax,rax
  01a1d:    	je     0xfffdecfb
:00120 
:00122 %14 = dynvar(2, %2)
  01a23:    	mov    rax,QWORD PTR [rbp-0x10]
  01a27:    	mov    rax,QWORD PTR [rax]
  01a2a:    	mov    rax,QWORD PTR [rax-0x28]
  01a2e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00123 %16 = dynvar(2, %2)
  01a35:    	mov    rax,QWORD PTR [rbp-0x10]
  01a39:    	mov    rax,QWORD PTR [rax]
  01a3c:    	mov    rax,QWORD PTR [rax-0x28]
  01a40: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00124 %15 = %16.call y()                   [Vec]
  01a47: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01a4e: 00 	test   rdi,0x7
  01a55:    	jne    0x3276d
  01a5b:    	cmp    DWORD PTR [rdi+0x4],0x28
  01a5f:    	jne    0x3276d
  01a65: 26 	cmp    DWORD PTR [rip+0xfffffffffffdfdb7],0x26        # 0xfffe1823
  01a6c:    	jne    0x3276d
  01a72:    	mov    esi,DWORD PTR [rip+0x994]        # 0x240c
  01a78:    	cmp    esi,0xffffffff
  01a7b:    	je     0x327e6
  01a81:    	cmp    WORD PTR [rdi+0x2],0x3
  01a86:    	jne    0x1a9f
  01a8c:    	cmp    esi,0x6
  01a8f:    	jge    0x1a9f
  01a95:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01a9a:    	jmp    0x1b3f
  01a9f:    	sub    rsp,0x60
  01aa3:    	movq   QWORD PTR [rsp],xmm2
  01aa8:    	movq   QWORD PTR [rsp+0x8],xmm3
  01aae:    	movq   QWORD PTR [rsp+0x10],xmm4
  01ab4:    	movq   QWORD PTR [rsp+0x18],xmm5
  01aba:    	movq   QWORD PTR [rsp+0x20],xmm6
  01ac0:    	movq   QWORD PTR [rsp+0x28],xmm7
  01ac6: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01acd: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01ad4: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01adb: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01ae2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01ae9: 00 	movabs rax,0x5600b755dfe0
  01af3:    	call   rax
  01af5:    	movq   xmm2,QWORD PTR [rsp]
  01afa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01b00:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01b06:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01b0c:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01b12:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01b18: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01b1f: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01b26: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01b2d: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01b34: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01b3b:    	add    rsp,0x60
  01b3f: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00125 
:00127 %16 = %13.call y()                   [Vec]
  01b46: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01b4d: 00 	test   rdi,0x7
  01b54:    	jne    0x328a3
  01b5a:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b5e:    	jne    0x328a3
  01b64: 26 	cmp    DWORD PTR [rip+0xfffffffffffdfcb8],0x26        # 0xfffe1823
  01b6b:    	jne    0x328a3
  01b71:    	mov    esi,DWORD PTR [rip+0x89d]        # 0x2414
  01b77:    	cmp    esi,0xffffffff
  01b7a:    	je     0x3291c
  01b80:    	cmp    WORD PTR [rdi+0x2],0x3
  01b85:    	jne    0x1b9e
  01b8b:    	cmp    esi,0x6
  01b8e:    	jge    0x1b9e
  01b94:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01b99:    	jmp    0x1c3e
  01b9e:    	sub    rsp,0x60
  01ba2:    	movq   QWORD PTR [rsp],xmm2
  01ba7:    	movq   QWORD PTR [rsp+0x8],xmm3
  01bad:    	movq   QWORD PTR [rsp+0x10],xmm4
  01bb3:    	movq   QWORD PTR [rsp+0x18],xmm5
  01bb9:    	movq   QWORD PTR [rsp+0x20],xmm6
  01bbf:    	movq   QWORD PTR [rsp+0x28],xmm7
  01bc5: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01bcc: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01bd3: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01bda: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01be1: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01be8: 00 	movabs rax,0x5600b755dfe0
  01bf2:    	call   rax
  01bf4:    	movq   xmm2,QWORD PTR [rsp]
  01bf9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01bff:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01c05:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01c0b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01c11:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01c17: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01c1e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01c25: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01c2c: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01c33: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01c3a:    	add    rsp,0x60
  01c3e: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00128 
:00130 %15 = %15 + %16                      [Float][Float]
  01c45: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01c4c: 00 	test   rdi,0x1
  01c53:    	jne    0x329d9
  01c59: 00 	test   rdi,0x2
  01c60:    	je     0x1c9d
  01c66:    	xorps  xmm13,xmm13
  01c6a: 00 	movabs rax,0x8000000000000002
  01c74:    	cmp    rdi,rax
  01c77:    	je     0x1cb0
  01c7d:    	mov    rax,rdi
  01c80:    	sar    rax,0x3f
  01c84:    	add    rax,0x2
  01c88:    	and    rdi,0xfffffffffffffffc
  01c8c:    	or     rdi,rax
  01c8f:    	rol    rdi,0x3d
  01c93:    	movq   xmm13,rdi
  01c98:    	jmp    0x1cb0
  01c9d:    	call   0xfffded34
  01ca2:    	test   rax,rax
  01ca5:    	je     0x329d9
  01cab:    	movq   xmm13,xmm0
  01cb0: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01cb7: 00 	test   rdi,0x1
  01cbe:    	jne    0x32a52
  01cc4: 00 	test   rdi,0x2
  01ccb:    	je     0x1d08
  01cd1:    	xorps  xmm14,xmm14
  01cd5: 00 	movabs rax,0x8000000000000002
  01cdf:    	cmp    rdi,rax
  01ce2:    	je     0x1d1b
  01ce8:    	mov    rax,rdi
  01ceb:    	sar    rax,0x3f
  01cef:    	add    rax,0x2
  01cf3:    	and    rdi,0xfffffffffffffffc
  01cf7:    	or     rdi,rax
  01cfa:    	rol    rdi,0x3d
  01cfe:    	movq   xmm14,rdi
  01d03:    	jmp    0x1d1b
  01d08:    	call   0xfffded34
  01d0d:    	test   rax,rax
  01d10:    	je     0x32a52
  01d16:    	movq   xmm14,xmm0
  01d1b:    	addsd  xmm13,xmm14
:00131 _ = %14.call y=(%15; 1)              [Vec]
  01d20:    	movq   xmm0,xmm13
  01d25:    	call   0xfffdee27
  01d2a: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01d31: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01d38: 00 	test   rdi,0x7
  01d3f:    	jne    0x32acb
  01d45:    	cmp    DWORD PTR [rdi+0x4],0x28
  01d49:    	jne    0x32acb
  01d4f: 26 	cmp    DWORD PTR [rip+0xfffffffffffdfacd],0x26        # 0xfffe1823
  01d56:    	jne    0x32acb
  01d5c:    	mov    esi,DWORD PTR [rip+0x6ba]        # 0x241c
  01d62:    	cmp    esi,0xffffffff
  01d65:    	je     0x32b44
  01d6b:    	cmp    WORD PTR [rdi+0x2],0x3
  01d70:    	jne    0x1d90
  01d76:    	cmp    esi,0x6
  01d79:    	jge    0x1d90
  01d7f: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01d86:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01d8b:    	jmp    0x1e66
  01d90:    	sub    rsp,0x70
  01d94:    	movq   QWORD PTR [rsp],xmm2
  01d99:    	movq   QWORD PTR [rsp+0x8],xmm3
  01d9f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01da5:    	movq   QWORD PTR [rsp+0x18],xmm5
  01dab:    	movq   QWORD PTR [rsp+0x20],xmm6
  01db1:    	movq   QWORD PTR [rsp+0x28],xmm7
  01db7: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01dbe: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01dc5: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01dcc: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01dd3: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01dda: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  01de1: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  01de8: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01def: 00 	movabs rax,0x5600b755e260
  01df9:    	call   rax
  01dfb:    	movq   xmm2,QWORD PTR [rsp]
  01e00:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01e06:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e0c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e12:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e18:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e1e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e25: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01e2c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01e33: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01e3a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01e41: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  01e48: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  01e4f:    	add    rsp,0x70
  01e53: 00 	movabs r13,0x5600b92f11b0
  01e5d:    	test   rax,rax
  01e60:    	je     0xfffdecfb
:00132 
:00134 %14 = dynvar(2, %2)
  01e66:    	mov    rax,QWORD PTR [rbp-0x10]
  01e6a:    	mov    rax,QWORD PTR [rax]
  01e6d:    	mov    rax,QWORD PTR [rax-0x28]
  01e71: ff 	mov    QWORD PTR [rbp-0x98],rax
:00135 %16 = dynvar(2, %2)
  01e78:    	mov    rax,QWORD PTR [rbp-0x10]
  01e7c:    	mov    rax,QWORD PTR [rax]
  01e7f:    	mov    rax,QWORD PTR [rax-0x28]
  01e83: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00136 %15 = %16.call z()                   [Vec]
  01e8a: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01e91: 00 	test   rdi,0x7
  01e98:    	jne    0x32c27
  01e9e:    	cmp    DWORD PTR [rdi+0x4],0x28
  01ea2:    	jne    0x32c27
  01ea8: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf974],0x26        # 0xfffe1823
  01eaf:    	jne    0x32c27
  01eb5:    	mov    esi,DWORD PTR [rip+0x569]        # 0x2424
  01ebb:    	cmp    esi,0xffffffff
  01ebe:    	je     0x32ca0
  01ec4:    	cmp    WORD PTR [rdi+0x2],0x3
  01ec9:    	jne    0x1ee2
  01ecf:    	cmp    esi,0x6
  01ed2:    	jge    0x1ee2
  01ed8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01edd:    	jmp    0x1f82
  01ee2:    	sub    rsp,0x60
  01ee6:    	movq   QWORD PTR [rsp],xmm2
  01eeb:    	movq   QWORD PTR [rsp+0x8],xmm3
  01ef1:    	movq   QWORD PTR [rsp+0x10],xmm4
  01ef7:    	movq   QWORD PTR [rsp+0x18],xmm5
  01efd:    	movq   QWORD PTR [rsp+0x20],xmm6
  01f03:    	movq   QWORD PTR [rsp+0x28],xmm7
  01f09: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01f10: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01f17: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01f1e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01f25: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01f2c: 00 	movabs rax,0x5600b755dfe0
  01f36:    	call   rax
  01f38:    	movq   xmm2,QWORD PTR [rsp]
  01f3d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01f43:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01f49:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01f4f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01f55:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01f5b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01f62: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01f69: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01f70: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01f77: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01f7e:    	add    rsp,0x60
  01f82: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00137 
:00139 %16 = %13.call z()                   [Vec]
  01f89: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01f90: 00 	test   rdi,0x7
  01f97:    	jne    0x32d5d
  01f9d:    	cmp    DWORD PTR [rdi+0x4],0x28
  01fa1:    	jne    0x32d5d
  01fa7: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf875],0x26        # 0xfffe1823
  01fae:    	jne    0x32d5d
  01fb4:    	mov    esi,DWORD PTR [rip+0x472]        # 0x242c
  01fba:    	cmp    esi,0xffffffff
  01fbd:    	je     0x32dd6
  01fc3:    	cmp    WORD PTR [rdi+0x2],0x3
  01fc8:    	jne    0x1fe1
  01fce:    	cmp    esi,0x6
  01fd1:    	jge    0x1fe1
  01fd7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01fdc:    	jmp    0x2081
  01fe1:    	sub    rsp,0x60
  01fe5:    	movq   QWORD PTR [rsp],xmm2
  01fea:    	movq   QWORD PTR [rsp+0x8],xmm3
  01ff0:    	movq   QWORD PTR [rsp+0x10],xmm4
  01ff6:    	movq   QWORD PTR [rsp+0x18],xmm5
  01ffc:    	movq   QWORD PTR [rsp+0x20],xmm6
  02002:    	movq   QWORD PTR [rsp+0x28],xmm7
  02008: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0200f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02016: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0201d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02024: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0202b: 00 	movabs rax,0x5600b755dfe0
  02035:    	call   rax
  02037:    	movq   xmm2,QWORD PTR [rsp]
  0203c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02042:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02048:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0204e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02054:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0205a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02061: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02068: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0206f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02076: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0207d:    	add    rsp,0x60
  02081: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00140 
:00142 %15 = %15 + %16                      [Float][Float]
  02088: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0208f: 00 	test   rdi,0x1
  02096:    	jne    0x32e93
  0209c: 00 	test   rdi,0x2
  020a3:    	je     0x20e0
  020a9:    	xorps  xmm13,xmm13
  020ad: 00 	movabs rax,0x8000000000000002
  020b7:    	cmp    rdi,rax
  020ba:    	je     0x20f3
  020c0:    	mov    rax,rdi
  020c3:    	sar    rax,0x3f
  020c7:    	add    rax,0x2
  020cb:    	and    rdi,0xfffffffffffffffc
  020cf:    	or     rdi,rax
  020d2:    	rol    rdi,0x3d
  020d6:    	movq   xmm13,rdi
  020db:    	jmp    0x20f3
  020e0:    	call   0xfffded34
  020e5:    	test   rax,rax
  020e8:    	je     0x32e93
  020ee:    	movq   xmm13,xmm0
  020f3: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  020fa: 00 	test   rdi,0x1
  02101:    	jne    0x32f0c
  02107: 00 	test   rdi,0x2
  0210e:    	je     0x214b
  02114:    	xorps  xmm14,xmm14
  02118: 00 	movabs rax,0x8000000000000002
  02122:    	cmp    rdi,rax
  02125:    	je     0x215e
  0212b:    	mov    rax,rdi
  0212e:    	sar    rax,0x3f
  02132:    	add    rax,0x2
  02136:    	and    rdi,0xfffffffffffffffc
  0213a:    	or     rdi,rax
  0213d:    	rol    rdi,0x3d
  02141:    	movq   xmm14,rdi
  02146:    	jmp    0x215e
  0214b:    	call   0xfffded34
  02150:    	test   rax,rax
  02153:    	je     0x32f0c
  02159:    	movq   xmm14,xmm0
  0215e:    	addsd  xmm13,xmm14
:00143 _ = %14.call z=(%15; 1)              [Vec]
  02163:    	movq   xmm0,xmm13
  02168:    	call   0xfffdee27
  0216d: ff 	mov    QWORD PTR [rbp-0xa0],rax
  02174: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0217b: 00 	test   rdi,0x7
  02182:    	jne    0x32f85
  02188:    	cmp    DWORD PTR [rdi+0x4],0x28
  0218c:    	jne    0x32f85
  02192: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf68a],0x26        # 0xfffe1823
  02199:    	jne    0x32f85
  0219f:    	mov    esi,DWORD PTR [rip+0x28f]        # 0x2434
  021a5:    	cmp    esi,0xffffffff
  021a8:    	je     0x32ffe
  021ae:    	cmp    WORD PTR [rdi+0x2],0x3
  021b3:    	jne    0x21d3
  021b9:    	cmp    esi,0x6
  021bc:    	jge    0x21d3
  021c2: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  021c9:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  021ce:    	jmp    0x22a9
  021d3:    	sub    rsp,0x70
  021d7:    	movq   QWORD PTR [rsp],xmm2
  021dc:    	movq   QWORD PTR [rsp+0x8],xmm3
  021e2:    	movq   QWORD PTR [rsp+0x10],xmm4
  021e8:    	movq   QWORD PTR [rsp+0x18],xmm5
  021ee:    	movq   QWORD PTR [rsp+0x20],xmm6
  021f4:    	movq   QWORD PTR [rsp+0x28],xmm7
  021fa: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02201: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02208: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0220f: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02216: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0221d: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  02224: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  0222b: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  02232: 00 	movabs rax,0x5600b755e260
  0223c:    	call   rax
  0223e:    	movq   xmm2,QWORD PTR [rsp]
  02243:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02249:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0224f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02255:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0225b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02261: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02268: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0226f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02276: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0227d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02284: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  0228b: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  02292:    	add    rsp,0x70
  02296: 00 	movabs r13,0x5600b92f1270
  022a0:    	test   rax,rax
  022a3:    	je     0xfffdecfb
:00144 
:00146 %14 = %15
:00147 ret %14
  022a9:    	movq   xmm0,xmm13
  022ae:    	call   0xfffdee27
  022b3: ff 	mov    QWORD PTR [rbp-0x98],rax
  022ba: ff 	mov    rax,QWORD PTR [rbp-0x98]
  022c1:    	leave  
  022c2:    	ret    
:00148 %14 = nil
  022c3: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00149 ret %14
  022ce: ff 	mov    rax,QWORD PTR [rbp-0x98]
  022d5:    	leave  
  022d6:    	ret    
==> start whole compile: intersect FuncId(69) self_class:Sphere start:[00000] bytecode:0x5600b92b5360
<== finished compile. elapsed:139.1µs
offset:Pos(145272) code: 6454 bytes  data: 258 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007: 00 	sub    rsp,0xb0
  0000e:    	mov    eax,edx
  00010:    	sub    eax,0x2
  00013:    	jge    0x35
  00019:    	neg    rdx
  0001c:    	lea    rdx,[rbp+rdx*8-0x30]
  00021: 00 	mov    QWORD PTR [rdx],0x4
  00028:    	sub    rdx,0x8
  0002c:    	add    eax,0x1
  0002f:    	jne    0x21
  00035: 00 	mov    rax,0x4
  0003c:    	mov    QWORD PTR [rbp-0x40],rax
  00040:    	mov    QWORD PTR [rbp-0x48],rax
  00044:    	mov    QWORD PTR [rbp-0x50],rax
  00048:    	mov    QWORD PTR [rbp-0x58],rax
  0004c:    	mov    QWORD PTR [rbp-0x60],rax
  00050:    	mov    QWORD PTR [rbp-0x68],rax
  00054:    	mov    QWORD PTR [rbp-0x70],rax
  00058:    	mov    QWORD PTR [rbp-0x78],rax
  0005c:    	mov    QWORD PTR [rbp-0x80],rax
  00060: ff 	mov    QWORD PTR [rbp-0x88],rax
  00067: ff 	mov    QWORD PTR [rbp-0x90],rax
  0006e: ff 	mov    QWORD PTR [rbp-0x98],rax
  00075: ff 	mov    QWORD PTR [rbp-0xa0],rax
  0007c:    	mov    rdi,QWORD PTR [rbp-0x28]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x30ca9
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2a
  00091:    	jne    0x30ca9
:00000 init reg_num:16 arg_num:2 stack_offset:11
:00001 %9 = %1.call org()                   [Ray]
  00097:    	mov    rdi,QWORD PTR [rbp-0x30]
  0009b: 00 	test   rdi,0x7
  000a2:    	jne    0x30cb8
  000a8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  000ac:    	jne    0x30cb8
  000b2: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf332],0x26        # 0xfffdf3eb
  000b9:    	jne    0x30cb8
  000bf:    	mov    esi,DWORD PTR [rip+0x1875]        # 0x193a
  000c5:    	cmp    esi,0xffffffff
  000c8:    	je     0x30cc7
  000ce:    	cmp    WORD PTR [rdi+0x2],0x3
  000d3:    	jne    0xec
  000d9:    	cmp    esi,0x6
  000dc:    	jge    0xec
  000e2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000e7:    	jmp    0xf8
  000ec: 00 	movabs rax,0x5600b755dfe0
  000f6:    	call   rax
  000f8:    	mov    QWORD PTR [rbp-0x70],rax
:00002 
:00004 %10 = @center: Sphere[IvarId(0)]
  000fc:    	mov    rdi,QWORD PTR [rbp-0x28]
  00100:    	mov    rax,QWORD PTR [rdi+0x10]
  00104:    	mov    QWORD PTR [rbp-0x78],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
  00108:    	mov    rdi,QWORD PTR [rbp-0x70]
  0010c: 00 	test   rdi,0x7
  00113:    	jne    0x30cf0
  00119:    	cmp    DWORD PTR [rdi+0x4],0x28
  0011d:    	jne    0x30cf0
  00123: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf2c1],0x26        # 0xfffdf3eb
  0012a:    	jne    0x30cf0
  00130:    	mov    rax,QWORD PTR [rbx]
  00133:    	lea    rdi,[rsp-0x18]
  00138:    	mov    QWORD PTR [rdi],rax
  0013b:    	mov    QWORD PTR [rbx],rdi
  0013e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00147:    	mov    QWORD PTR [rsp-0x38],rcx
  0014c:    	mov    rax,QWORD PTR [rbp-0x70]
  00150:    	mov    QWORD PTR [rsp-0x38],rax
  00155: 00 	mov    rdi,0x1
  0015c:    	mov    rax,QWORD PTR [rbp-0x78]
  00160:    	mov    QWORD PTR [rsp-0x40],rax
  00165: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0016e: 08 	movabs rax,0x80000003f
  00178:    	mov    QWORD PTR [rsp-0x28],rax
  0017d: 00 	movabs r13,0x5600b92a1ef0
  00187:    	call   0xfffe00ac
  0018c:    	lea    rdi,[rbp-0x8]
  00190:    	mov    QWORD PTR [rbx],rdi
  00193: 00 	movabs r13,0x5600b92b53d0
  0019d:    	test   rax,rax
  001a0:    	je     0xfffdc8c3
  001a6:    	mov    QWORD PTR [rbp-0x40],rax
:00006 
:00008 %9 = %1.call dir()                   [Ray]
  001aa:    	mov    rdi,QWORD PTR [rbp-0x30]
  001ae: 00 	test   rdi,0x7
  001b5:    	jne    0x30cff
  001bb:    	cmp    DWORD PTR [rdi+0x4],0x2e
  001bf:    	jne    0x30cff
  001c5: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf21f],0x26        # 0xfffdf3eb
  001cc:    	jne    0x30cff
  001d2:    	mov    esi,DWORD PTR [rip+0x176a]        # 0x1942
  001d8:    	cmp    esi,0xffffffff
  001db:    	je     0x30d0e
  001e1:    	cmp    WORD PTR [rdi+0x2],0x3
  001e6:    	jne    0x1ff
  001ec:    	cmp    esi,0x6
  001ef:    	jge    0x1ff
  001f5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001fa:    	jmp    0x20b
  001ff: 00 	movabs rax,0x5600b755dfe0
  00209:    	call   rax
  0020b:    	mov    QWORD PTR [rbp-0x70],rax
:00009 
:00011 %4 = %3.call vdot(%9; 1)             [Vec]
  0020f:    	mov    rdi,QWORD PTR [rbp-0x40]
  00213: 00 	test   rdi,0x7
  0021a:    	jne    0x30d37
  00220:    	cmp    DWORD PTR [rdi+0x4],0x28
  00224:    	jne    0x30d37
  0022a: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf1ba],0x26        # 0xfffdf3eb
  00231:    	jne    0x30d37
  00237:    	mov    rax,QWORD PTR [rbx]
  0023a:    	lea    rdi,[rsp-0x18]
  0023f:    	mov    QWORD PTR [rdi],rax
  00242:    	mov    QWORD PTR [rbx],rdi
  00245: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0024e:    	mov    QWORD PTR [rsp-0x38],rcx
  00253:    	mov    rax,QWORD PTR [rbp-0x40]
  00257:    	mov    QWORD PTR [rsp-0x38],rax
  0025c: 00 	mov    rdi,0x1
  00263:    	mov    rax,QWORD PTR [rbp-0x70]
  00267:    	mov    QWORD PTR [rsp-0x40],rax
  0026c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00275: 05 	movabs rax,0x500000041
  0027f:    	mov    QWORD PTR [rsp-0x28],rax
  00284: 00 	movabs r13,0x5600b92d48b0
  0028e:    	call   0xfffe013e
  00293:    	lea    rdi,[rbp-0x8]
  00297:    	mov    QWORD PTR [rbx],rdi
  0029a: 00 	movabs r13,0x5600b92b5430
  002a4:    	test   rax,rax
  002a7:    	je     0xfffdc8c3
  002ad:    	mov    QWORD PTR [rbp-0x48],rax
:00012 
:00014 %10 = %3
  002b1:    	mov    rax,QWORD PTR [rbp-0x40]
  002b5:    	mov    QWORD PTR [rbp-0x78],rax
:00015 %9 = %3.call vdot(%10; 1)            [Vec]
  002b9:    	mov    rdi,QWORD PTR [rbp-0x40]
  002bd: 00 	test   rdi,0x7
  002c4:    	jne    0x30d46
  002ca:    	cmp    DWORD PTR [rdi+0x4],0x28
  002ce:    	jne    0x30d46
  002d4: 26 	cmp    DWORD PTR [rip+0xfffffffffffdf110],0x26        # 0xfffdf3eb
  002db:    	jne    0x30d46
  002e1:    	mov    rax,QWORD PTR [rbx]
  002e4:    	lea    rdi,[rsp-0x18]
  002e9:    	mov    QWORD PTR [rdi],rax
  002ec:    	mov    QWORD PTR [rbx],rdi
  002ef: 00 	mov    QWORD PTR [rsp-0x20],0x0
  002f8:    	mov    QWORD PTR [rsp-0x38],rcx
  002fd:    	mov    rax,QWORD PTR [rbp-0x40]
  00301:    	mov    QWORD PTR [rsp-0x38],rax
  00306: 00 	mov    rdi,0x1
  0030d:    	mov    rax,QWORD PTR [rbp-0x78]
  00311:    	mov    QWORD PTR [rsp-0x40],rax
  00316: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0031f: 05 	movabs rax,0x500000041
  00329:    	mov    QWORD PTR [rsp-0x28],rax
  0032e: 00 	movabs r13,0x5600b92d48b0
  00338:    	call   0xfffe013e
  0033d:    	lea    rdi,[rbp-0x8]
  00341:    	mov    QWORD PTR [rbx],rdi
  00344: 00 	movabs r13,0x5600b92b5470
  0034e:    	test   rax,rax
  00351:    	je     0xfffdc8c3
  00357:    	mov    QWORD PTR [rbp-0x70],rax
:00016 
:00018 %10 = @radius: Sphere[IvarId(1)]
  0035b:    	mov    rdi,QWORD PTR [rbp-0x28]
  0035f:    	mov    rax,QWORD PTR [rdi+0x18]
  00363:    	mov    QWORD PTR [rbp-0x78],rax
:00019 %11 = @radius: Sphere[IvarId(1)]
  00367:    	mov    rdi,QWORD PTR [rbp-0x28]
  0036b:    	mov    rax,QWORD PTR [rdi+0x18]
  0036f:    	mov    QWORD PTR [rbp-0x80],rax
:00020 %10 = %10 * %11                      [Float][Float]
  00373:    	mov    rdi,QWORD PTR [rbp-0x78]
  00377: 00 	test   rdi,0x1
  0037e:    	jne    0x30d55
  00384: 00 	test   rdi,0x2
  0038b:    	je     0x3c7
  00391:    	xorps  xmm2,xmm2
  00394: 00 	movabs rax,0x8000000000000002
  0039e:    	cmp    rdi,rax
  003a1:    	je     0x3d9
  003a7:    	mov    rax,rdi
  003aa:    	sar    rax,0x3f
  003ae:    	add    rax,0x2
  003b2:    	and    rdi,0xfffffffffffffffc
  003b6:    	or     rdi,rax
  003b9:    	rol    rdi,0x3d
  003bd:    	movq   xmm2,rdi
  003c2:    	jmp    0x3d9
  003c7:    	call   0xfffdc8fc
  003cc:    	test   rax,rax
  003cf:    	je     0x30d55
  003d5:    	movq   xmm2,xmm0
  003d9:    	mov    rdi,QWORD PTR [rbp-0x80]
  003dd: 00 	test   rdi,0x1
  003e4:    	jne    0x30d64
  003ea: 00 	test   rdi,0x2
  003f1:    	je     0x42d
  003f7:    	xorps  xmm3,xmm3
  003fa: 00 	movabs rax,0x8000000000000002
  00404:    	cmp    rdi,rax
  00407:    	je     0x43f
  0040d:    	mov    rax,rdi
  00410:    	sar    rax,0x3f
  00414:    	add    rax,0x2
  00418:    	and    rdi,0xfffffffffffffffc
  0041c:    	or     rdi,rax
  0041f:    	rol    rdi,0x3d
  00423:    	movq   xmm3,rdi
  00428:    	jmp    0x43f
  0042d:    	call   0xfffdc8fc
  00432:    	test   rax,rax
  00435:    	je     0x30d64
  0043b:    	movq   xmm3,xmm0
  0043f:    	mulsd  xmm2,xmm3
:00021 %5 = %9 - %10                        [Float][Float]
  00443:    	mov    rdi,QWORD PTR [rbp-0x70]
  00447: 00 	test   rdi,0x1
  0044e:    	jne    0x30d73
  00454: 00 	test   rdi,0x2
  0045b:    	je     0x497
  00461:    	xorps  xmm4,xmm4
  00464: 00 	movabs rax,0x8000000000000002
  0046e:    	cmp    rdi,rax
  00471:    	je     0x4a9
  00477:    	mov    rax,rdi
  0047a:    	sar    rax,0x3f
  0047e:    	add    rax,0x2
  00482:    	and    rdi,0xfffffffffffffffc
  00486:    	or     rdi,rax
  00489:    	rol    rdi,0x3d
  0048d:    	movq   xmm4,rdi
  00492:    	jmp    0x4a9
  00497:    	call   0xfffdc8fc
  0049c:    	test   rax,rax
  0049f:    	je     0x30d73
  004a5:    	movq   xmm4,xmm0
  004a9:    	movq   xmm5,xmm4
  004ad:    	subsd  xmm5,xmm2
:00022 %9 = %4 * %4                         [Float][Float]
  004b1:    	mov    rdi,QWORD PTR [rbp-0x48]
  004b5: 00 	test   rdi,0x1
  004bc:    	jne    0x30d8f
  004c2: 00 	test   rdi,0x2
  004c9:    	je     0x505
  004cf:    	xorps  xmm6,xmm6
  004d2: 00 	movabs rax,0x8000000000000002
  004dc:    	cmp    rdi,rax
  004df:    	je     0x517
  004e5:    	mov    rax,rdi
  004e8:    	sar    rax,0x3f
  004ec:    	add    rax,0x2
  004f0:    	and    rdi,0xfffffffffffffffc
  004f4:    	or     rdi,rax
  004f7:    	rol    rdi,0x3d
  004fb:    	movq   xmm6,rdi
  00500:    	jmp    0x517
  00505:    	call   0xfffdc8fc
  0050a:    	test   rax,rax
  0050d:    	je     0x30d8f
  00513:    	movq   xmm6,xmm0
  00517:    	movq   xmm4,xmm6
  0051b:    	mulsd  xmm4,xmm6
:00023 %6 = %9 - %5                         [Float][Float]
  0051f:    	movq   xmm7,xmm4
  00523:    	subsd  xmm7,xmm5
:00024 %9 = literal[0.0]
  00527: 00 	movq   xmm4,QWORD PTR [rip+0x1419]        # 0x1948
  0052f: 00 	movabs rax,0x8000000000000002
  00539:    	mov    QWORD PTR [rbp-0x70],rax
:00025 _%9 = %6 > %9                        [Float][Float]
:00026 condnotbr _%9 =>:00114
  0053d:    	ucomisd xmm7,xmm4
  00541:    	jbe    0x31f15
:00027 %9 = %4
:00028 %9 = neg %9                          [Float]
  00547:    	movq   xmm4,xmm6
  0054b: 00 	xorps  xmm4,XMMWORD PTR [rip+0x1406]        # 0x1958
:00029 %11 = const[Math]                    [Math]
  00552: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdee9f]        # 0xfffdf3f8
  00559: 00 	cmp    rax,QWORD PTR [rip+0x1418]        # 0x1978
  00560:    	jne    0x30db8
  00566: 00 	mov    rax,QWORD PTR [rip+0x13fb]        # 0x1968
  0056d:    	mov    QWORD PTR [rbp-0x80],rax
:00030 %12 = %6
:00031 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
  00571:    	mov    rdi,QWORD PTR [rbp-0x80]
  00575: 00 	test   rdi,0x7
  0057c:    	jne    0x30e40
  00582:    	cmp    DWORD PTR [rdi+0x4],0x21
  00586:    	jne    0x30e40
  0058c: 26 	cmp    DWORD PTR [rip+0xfffffffffffdee58],0x26        # 0xfffdf3eb
  00593:    	jne    0x30e40
  00599:    	sqrtsd xmm2,xmm7
:00032 
:00034 %7 = %9 - %10                        [Float][Float]
  0059d:    	movq   xmm3,xmm4
  005a1:    	subsd  xmm3,xmm2
:00035 %9 = literal[0.0]
  005a5: 00 	movq   xmm4,QWORD PTR [rip+0x13db]        # 0x1988
  005ad: 00 	movabs rax,0x8000000000000002
  005b7:    	mov    QWORD PTR [rbp-0x70],rax
:00036 _%9 = %7 > %9                        [Float][Float]
:00037 condnotbr _%9 =>:00113
  005bb:    	ucomisd xmm3,xmm4
  005bf:    	jbe    0x31e09
:00038 %9 = %2.call t()                     [Isect]
  005c5:    	mov    rdi,QWORD PTR [rbp-0x38]
  005c9: 00 	test   rdi,0x7
  005d0:    	jne    0x30e7d
  005d6:    	cmp    DWORD PTR [rdi+0x4],0x30
  005da:    	jne    0x30e7d
  005e0: 26 	cmp    DWORD PTR [rip+0xfffffffffffdee04],0x26        # 0xfffdf3eb
  005e7:    	jne    0x30e7d
  005ed:    	mov    esi,DWORD PTR [rip+0x13a1]        # 0x1994
  005f3:    	cmp    esi,0xffffffff
  005f6:    	je     0x30ec7
  005fc:    	cmp    WORD PTR [rdi+0x2],0x3
  00601:    	jne    0x61a
  00607:    	cmp    esi,0x6
  0060a:    	jge    0x61a
  00610:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00615:    	jmp    0x668
  0061a:    	sub    rsp,0x30
  0061e:    	movq   QWORD PTR [rsp],xmm2
  00623:    	movq   QWORD PTR [rsp+0x8],xmm3
  00629:    	movq   QWORD PTR [rsp+0x10],xmm5
  0062f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00635:    	movq   QWORD PTR [rsp+0x20],xmm7
  0063b: 00 	movabs rax,0x5600b755dfe0
  00645:    	call   rax
  00647:    	movq   xmm2,QWORD PTR [rsp]
  0064c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00652:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00658:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0065e:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00664:    	add    rsp,0x30
  00668:    	mov    QWORD PTR [rbp-0x70],rax
:00039 
:00041 _%9 = %7 < %9                        [Float][Float]
:00042 condnotbr _%9 =>:00113
  0066c:    	mov    rdi,QWORD PTR [rbp-0x70]
  00670: 00 	test   rdi,0x1
  00677:    	jne    0x30f32
  0067d: 00 	test   rdi,0x2
  00684:    	je     0x6c0
  0068a:    	xorps  xmm4,xmm4
  0068d: 00 	movabs rax,0x8000000000000002
  00697:    	cmp    rdi,rax
  0069a:    	je     0x6d2
  006a0:    	mov    rax,rdi
  006a3:    	sar    rax,0x3f
  006a7:    	add    rax,0x2
  006ab:    	and    rdi,0xfffffffffffffffc
  006af:    	or     rdi,rax
  006b2:    	rol    rdi,0x3d
  006b6:    	movq   xmm4,rdi
  006bb:    	jmp    0x6d2
  006c0:    	call   0xfffdc8fc
  006c5:    	test   rax,rax
  006c8:    	je     0x30f32
  006ce:    	movq   xmm4,xmm0
  006d2:    	ucomisd xmm3,xmm4
  006d6:    	jae    0x31e66
:00043 _ = %2.call t=(%7; 1)                [Isect]
  006dc:    	movq   xmm0,xmm3
  006e0:    	call   0xfffdc9ef
  006e5:    	mov    QWORD PTR [rbp-0x60],rax
  006e9:    	mov    rdi,QWORD PTR [rbp-0x38]
  006ed: 00 	test   rdi,0x7
  006f4:    	jne    0x30f7c
  006fa:    	cmp    DWORD PTR [rdi+0x4],0x30
  006fe:    	jne    0x30f7c
  00704: 26 	cmp    DWORD PTR [rip+0xfffffffffffdece0],0x26        # 0xfffdf3eb
  0070b:    	jne    0x30f7c
  00711:    	mov    esi,DWORD PTR [rip+0x1285]        # 0x199c
  00717:    	cmp    esi,0xffffffff
  0071a:    	je     0x30fb9
  00720:    	cmp    WORD PTR [rdi+0x2],0x3
  00725:    	jne    0x742
  0072b:    	cmp    esi,0x6
  0072e:    	jge    0x742
  00734:    	mov    rax,QWORD PTR [rbp-0x60]
  00738:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0073d:    	jmp    0x7b3
  00742:    	sub    rsp,0x30
  00746:    	movq   QWORD PTR [rsp],xmm2
  0074b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00751:    	movq   QWORD PTR [rsp+0x10],xmm4
  00757:    	movq   QWORD PTR [rsp+0x18],xmm5
  0075d:    	movq   QWORD PTR [rsp+0x20],xmm6
  00763:    	movq   QWORD PTR [rsp+0x28],xmm7
  00769:    	mov    rdx,QWORD PTR [rbp-0x60]
  0076d: 00 	movabs rax,0x5600b755e260
  00777:    	call   rax
  00779:    	movq   xmm2,QWORD PTR [rsp]
  0077e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00784:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0078a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00790:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00796:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0079c:    	add    rsp,0x30
  007a0: 00 	movabs r13,0x5600b92b5630
  007aa:    	test   rax,rax
  007ad:    	je     0xfffdc8c3
:00044 
:00046 %9 = literal[true]
  007b3: 00 	mov    rax,0x1c
  007ba:    	mov    QWORD PTR [rbp-0x70],rax
:00047 _ = %2.call hit=(%9; 1)              [Isect]
  007be:    	mov    rdi,QWORD PTR [rbp-0x38]
  007c2: 00 	test   rdi,0x7
  007c9:    	jne    0x31037
  007cf:    	cmp    DWORD PTR [rdi+0x4],0x30
  007d3:    	jne    0x31037
  007d9: 26 	cmp    DWORD PTR [rip+0xfffffffffffdec0b],0x26        # 0xfffdf3eb
  007e0:    	jne    0x31037
  007e6:    	mov    esi,DWORD PTR [rip+0x11b8]        # 0x19a4
  007ec:    	cmp    esi,0xffffffff
  007ef:    	je     0x31074
  007f5:    	cmp    WORD PTR [rdi+0x2],0x3
  007fa:    	jne    0x817
  00800:    	cmp    esi,0x6
  00803:    	jge    0x817
  00809:    	mov    rax,QWORD PTR [rbp-0x70]
  0080d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00812:    	jmp    0x87c
  00817:    	sub    rsp,0x30
  0081b:    	movq   QWORD PTR [rsp],xmm2
  00820:    	movq   QWORD PTR [rsp+0x8],xmm3
  00826:    	movq   QWORD PTR [rsp+0x10],xmm5
  0082c:    	movq   QWORD PTR [rsp+0x18],xmm6
  00832:    	movq   QWORD PTR [rsp+0x20],xmm7
  00838:    	mov    rdx,QWORD PTR [rbp-0x70]
  0083c: 00 	movabs rax,0x5600b755e260
  00846:    	call   rax
  00848:    	movq   xmm2,QWORD PTR [rsp]
  0084d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00853:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00859:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0085f:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00865:    	add    rsp,0x30
  00869: 00 	movabs r13,0x5600b92b5670
  00873:    	test   rax,rax
  00876:    	je     0xfffdc8c3
:00048 
:00050 %10 = const[Vec]                     [Vec]
  0087c: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdeb75]        # 0xfffdf3f8
  00883: 00 	cmp    rax,QWORD PTR [rip+0x112e]        # 0x19b8
  0088a:    	jne    0x310e6
  00890: 00 	mov    rax,QWORD PTR [rip+0x1111]        # 0x19a8
  00897:    	mov    QWORD PTR [rbp-0x78],rax
:00051 %12 = %1.call org()                  [Ray]
  0089b:    	mov    rdi,QWORD PTR [rbp-0x30]
  0089f: 00 	test   rdi,0x7
  008a6:    	jne    0x31162
  008ac:    	cmp    DWORD PTR [rdi+0x4],0x2e
  008b0:    	jne    0x31162
  008b6: 26 	cmp    DWORD PTR [rip+0xfffffffffffdeb2e],0x26        # 0xfffdf3eb
  008bd:    	jne    0x31162
  008c3:    	mov    esi,DWORD PTR [rip+0x10fb]        # 0x19c4
  008c9:    	cmp    esi,0xffffffff
  008cc:    	je     0x3118b
  008d2:    	cmp    WORD PTR [rdi+0x2],0x3
  008d7:    	jne    0x8f0
  008dd:    	cmp    esi,0x6
  008e0:    	jge    0x8f0
  008e6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008eb:    	jmp    0x932
  008f0:    	sub    rsp,0x20
  008f4:    	movq   QWORD PTR [rsp],xmm3
  008f9:    	movq   QWORD PTR [rsp+0x8],xmm5
  008ff:    	movq   QWORD PTR [rsp+0x10],xmm6
  00905:    	movq   QWORD PTR [rsp+0x18],xmm7
  0090b: 00 	movabs rax,0x5600b755dfe0
  00915:    	call   rax
  00917:    	movq   xmm3,QWORD PTR [rsp]
  0091c:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00922:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00928:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0092e:    	add    rsp,0x20
  00932: ff 	mov    QWORD PTR [rbp-0x88],rax
:00052 
:00054 %11 = %12.call x()                   [Vec]
  00939: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00940: 00 	test   rdi,0x7
  00947:    	jne    0x311ea
  0094d:    	cmp    DWORD PTR [rdi+0x4],0x28
  00951:    	jne    0x311ea
  00957: 26 	cmp    DWORD PTR [rip+0xfffffffffffdea8d],0x26        # 0xfffdf3eb
  0095e:    	jne    0x311ea
  00964:    	mov    esi,DWORD PTR [rip+0x1062]        # 0x19cc
  0096a:    	cmp    esi,0xffffffff
  0096d:    	je     0x31213
  00973:    	cmp    WORD PTR [rdi+0x2],0x3
  00978:    	jne    0x991
  0097e:    	cmp    esi,0x6
  00981:    	jge    0x991
  00987:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0098c:    	jmp    0x9d3
  00991:    	sub    rsp,0x20
  00995:    	movq   QWORD PTR [rsp],xmm3
  0099a:    	movq   QWORD PTR [rsp+0x8],xmm5
  009a0:    	movq   QWORD PTR [rsp+0x10],xmm6
  009a6:    	movq   QWORD PTR [rsp+0x18],xmm7
  009ac: 00 	movabs rax,0x5600b755dfe0
  009b6:    	call   rax
  009b8:    	movq   xmm3,QWORD PTR [rsp]
  009bd:    	movq   xmm5,QWORD PTR [rsp+0x8]
  009c3:    	movq   xmm6,QWORD PTR [rsp+0x10]
  009c9:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009cf:    	add    rsp,0x20
  009d3:    	mov    QWORD PTR [rbp-0x80],rax
:00055 
:00057 %13 = %1.call dir()                  [Ray]
  009d7:    	mov    rdi,QWORD PTR [rbp-0x30]
  009db: 00 	test   rdi,0x7
  009e2:    	jne    0x31272
  009e8:    	cmp    DWORD PTR [rdi+0x4],0x2e
  009ec:    	jne    0x31272
  009f2: 26 	cmp    DWORD PTR [rip+0xfffffffffffde9f2],0x26        # 0xfffdf3eb
  009f9:    	jne    0x31272
  009ff:    	mov    esi,DWORD PTR [rip+0xfcf]        # 0x19d4
  00a05:    	cmp    esi,0xffffffff
  00a08:    	je     0x3129b
  00a0e:    	cmp    WORD PTR [rdi+0x2],0x3
  00a13:    	jne    0xa2c
  00a19:    	cmp    esi,0x6
  00a1c:    	jge    0xa2c
  00a22:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a27:    	jmp    0xa6e
  00a2c:    	sub    rsp,0x20
  00a30:    	movq   QWORD PTR [rsp],xmm3
  00a35:    	movq   QWORD PTR [rsp+0x8],xmm5
  00a3b:    	movq   QWORD PTR [rsp+0x10],xmm6
  00a41:    	movq   QWORD PTR [rsp+0x18],xmm7
  00a47: 00 	movabs rax,0x5600b755dfe0
  00a51:    	call   rax
  00a53:    	movq   xmm3,QWORD PTR [rsp]
  00a58:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00a5e:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00a64:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00a6a:    	add    rsp,0x20
  00a6e: ff 	mov    QWORD PTR [rbp-0x90],rax
:00058 
:00060 %12 = %13.call x()                   [Vec]
  00a75: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00a7c: 00 	test   rdi,0x7
  00a83:    	jne    0x312fa
  00a89:    	cmp    DWORD PTR [rdi+0x4],0x28
  00a8d:    	jne    0x312fa
  00a93: 26 	cmp    DWORD PTR [rip+0xfffffffffffde951],0x26        # 0xfffdf3eb
  00a9a:    	jne    0x312fa
  00aa0:    	mov    esi,DWORD PTR [rip+0xf36]        # 0x19dc
  00aa6:    	cmp    esi,0xffffffff
  00aa9:    	je     0x31323
  00aaf:    	cmp    WORD PTR [rdi+0x2],0x3
  00ab4:    	jne    0xacd
  00aba:    	cmp    esi,0x6
  00abd:    	jge    0xacd
  00ac3:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ac8:    	jmp    0xb0f
  00acd:    	sub    rsp,0x20
  00ad1:    	movq   QWORD PTR [rsp],xmm3
  00ad6:    	movq   QWORD PTR [rsp+0x8],xmm5
  00adc:    	movq   QWORD PTR [rsp+0x10],xmm6
  00ae2:    	movq   QWORD PTR [rsp+0x18],xmm7
  00ae8: 00 	movabs rax,0x5600b755dfe0
  00af2:    	call   rax
  00af4:    	movq   xmm3,QWORD PTR [rsp]
  00af9:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00aff:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00b05:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00b0b:    	add    rsp,0x20
  00b0f: ff 	mov    QWORD PTR [rbp-0x88],rax
:00061 
:00063 %12 = %12 * %7                       [Float][Float]
  00b16: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00b1d: 00 	test   rdi,0x1
  00b24:    	jne    0x31382
  00b2a: 00 	test   rdi,0x2
  00b31:    	je     0xb6d
  00b37:    	xorps  xmm2,xmm2
  00b3a: 00 	movabs rax,0x8000000000000002
  00b44:    	cmp    rdi,rax
  00b47:    	je     0xb7f
  00b4d:    	mov    rax,rdi
  00b50:    	sar    rax,0x3f
  00b54:    	add    rax,0x2
  00b58:    	and    rdi,0xfffffffffffffffc
  00b5c:    	or     rdi,rax
  00b5f:    	rol    rdi,0x3d
  00b63:    	movq   xmm2,rdi
  00b68:    	jmp    0xb7f
  00b6d:    	call   0xfffdc8fc
  00b72:    	test   rax,rax
  00b75:    	je     0x31382
  00b7b:    	movq   xmm2,xmm0
  00b7f:    	mulsd  xmm2,xmm3
:00064 %11 = %11 + %12                      [Float][Float]
  00b83:    	mov    rdi,QWORD PTR [rbp-0x80]
  00b87: 00 	test   rdi,0x1
  00b8e:    	jne    0x313ab
  00b94: 00 	test   rdi,0x2
  00b9b:    	je     0xbd7
  00ba1:    	xorps  xmm4,xmm4
  00ba4: 00 	movabs rax,0x8000000000000002
  00bae:    	cmp    rdi,rax
  00bb1:    	je     0xbe9
  00bb7:    	mov    rax,rdi
  00bba:    	sar    rax,0x3f
  00bbe:    	add    rax,0x2
  00bc2:    	and    rdi,0xfffffffffffffffc
  00bc6:    	or     rdi,rax
  00bc9:    	rol    rdi,0x3d
  00bcd:    	movq   xmm4,rdi
  00bd2:    	jmp    0xbe9
  00bd7:    	call   0xfffdc8fc
  00bdc:    	test   rax,rax
  00bdf:    	je     0x313ab
  00be5:    	movq   xmm4,xmm0
  00be9:    	addsd  xmm4,xmm2
:00065 %13 = %1.call org()                  [Ray]
  00bed:    	mov    rdi,QWORD PTR [rbp-0x30]
  00bf1: 00 	test   rdi,0x7
  00bf8:    	jne    0x313e4
  00bfe:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00c02:    	jne    0x313e4
  00c08: 26 	cmp    DWORD PTR [rip+0xfffffffffffde7dc],0x26        # 0xfffdf3eb
  00c0f:    	jne    0x313e4
  00c15:    	mov    esi,DWORD PTR [rip+0xdc9]        # 0x19e4
  00c1b:    	cmp    esi,0xffffffff
  00c1e:    	je     0x3142a
  00c24:    	cmp    WORD PTR [rdi+0x2],0x3
  00c29:    	jne    0xc42
  00c2f:    	cmp    esi,0x6
  00c32:    	jge    0xc42
  00c38:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c3d:    	jmp    0xc9c
  00c42:    	sub    rsp,0x30
  00c46:    	movq   QWORD PTR [rsp],xmm2
  00c4b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c51:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c57:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c5d:    	movq   QWORD PTR [rsp+0x20],xmm6
  00c63:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c69: 00 	movabs rax,0x5600b755dfe0
  00c73:    	call   rax
  00c75:    	movq   xmm2,QWORD PTR [rsp]
  00c7a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c80:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c86:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c8c:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c92:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c98:    	add    rsp,0x30
  00c9c: ff 	mov    QWORD PTR [rbp-0x90],rax
:00066 
:00068 %12 = %13.call y()                   [Vec]
  00ca3: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00caa: 00 	test   rdi,0x7
  00cb1:    	jne    0x314a1
  00cb7:    	cmp    DWORD PTR [rdi+0x4],0x28
  00cbb:    	jne    0x314a1
  00cc1: 26 	cmp    DWORD PTR [rip+0xfffffffffffde723],0x26        # 0xfffdf3eb
  00cc8:    	jne    0x314a1
  00cce:    	mov    esi,DWORD PTR [rip+0xd18]        # 0x19ec
  00cd4:    	cmp    esi,0xffffffff
  00cd7:    	je     0x314d7
  00cdd:    	cmp    WORD PTR [rdi+0x2],0x3
  00ce2:    	jne    0xcfb
  00ce8:    	cmp    esi,0x6
  00ceb:    	jge    0xcfb
  00cf1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00cf6:    	jmp    0xd49
  00cfb:    	sub    rsp,0x30
  00cff:    	movq   QWORD PTR [rsp],xmm3
  00d04:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d0a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d10:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d16:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d1c: 00 	movabs rax,0x5600b755dfe0
  00d26:    	call   rax
  00d28:    	movq   xmm3,QWORD PTR [rsp]
  00d2d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d33:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d39:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d3f:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d45:    	add    rsp,0x30
  00d49: ff 	mov    QWORD PTR [rbp-0x88],rax
:00069 
:00071 %14 = %1.call dir()                  [Ray]
  00d50:    	mov    rdi,QWORD PTR [rbp-0x30]
  00d54: 00 	test   rdi,0x7
  00d5b:    	jne    0x31542
  00d61:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00d65:    	jne    0x31542
  00d6b: 26 	cmp    DWORD PTR [rip+0xfffffffffffde679],0x26        # 0xfffdf3eb
  00d72:    	jne    0x31542
  00d78:    	mov    esi,DWORD PTR [rip+0xc76]        # 0x19f4
  00d7e:    	cmp    esi,0xffffffff
  00d81:    	je     0x31578
  00d87:    	cmp    WORD PTR [rdi+0x2],0x3
  00d8c:    	jne    0xda5
  00d92:    	cmp    esi,0x6
  00d95:    	jge    0xda5
  00d9b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00da0:    	jmp    0xdf3
  00da5:    	sub    rsp,0x30
  00da9:    	movq   QWORD PTR [rsp],xmm3
  00dae:    	movq   QWORD PTR [rsp+0x8],xmm4
  00db4:    	movq   QWORD PTR [rsp+0x10],xmm5
  00dba:    	movq   QWORD PTR [rsp+0x18],xmm6
  00dc0:    	movq   QWORD PTR [rsp+0x20],xmm7
  00dc6: 00 	movabs rax,0x5600b755dfe0
  00dd0:    	call   rax
  00dd2:    	movq   xmm3,QWORD PTR [rsp]
  00dd7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ddd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00de3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00de9:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00def:    	add    rsp,0x30
  00df3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 
:00074 %13 = %14.call y()                   [Vec]
  00dfa: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e01: 00 	test   rdi,0x7
  00e08:    	jne    0x315e3
  00e0e:    	cmp    DWORD PTR [rdi+0x4],0x28
  00e12:    	jne    0x315e3
  00e18: 26 	cmp    DWORD PTR [rip+0xfffffffffffde5cc],0x26        # 0xfffdf3eb
  00e1f:    	jne    0x315e3
  00e25:    	mov    esi,DWORD PTR [rip+0xbd1]        # 0x19fc
  00e2b:    	cmp    esi,0xffffffff
  00e2e:    	je     0x31619
  00e34:    	cmp    WORD PTR [rdi+0x2],0x3
  00e39:    	jne    0xe52
  00e3f:    	cmp    esi,0x6
  00e42:    	jge    0xe52
  00e48:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e4d:    	jmp    0xea0
  00e52:    	sub    rsp,0x30
  00e56:    	movq   QWORD PTR [rsp],xmm3
  00e5b:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e61:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e67:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e6d:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e73: 00 	movabs rax,0x5600b755dfe0
  00e7d:    	call   rax
  00e7f:    	movq   xmm3,QWORD PTR [rsp]
  00e84:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e8a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e90:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e96:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e9c:    	add    rsp,0x30
  00ea0: ff 	mov    QWORD PTR [rbp-0x90],rax
:00075 
:00077 %13 = %13 * %7                       [Float][Float]
  00ea7: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00eae: 00 	test   rdi,0x1
  00eb5:    	jne    0x31684
  00ebb: 00 	test   rdi,0x2
  00ec2:    	je     0xefe
  00ec8:    	xorps  xmm2,xmm2
  00ecb: 00 	movabs rax,0x8000000000000002
  00ed5:    	cmp    rdi,rax
  00ed8:    	je     0xf10
  00ede:    	mov    rax,rdi
  00ee1:    	sar    rax,0x3f
  00ee5:    	add    rax,0x2
  00ee9:    	and    rdi,0xfffffffffffffffc
  00eed:    	or     rdi,rax
  00ef0:    	rol    rdi,0x3d
  00ef4:    	movq   xmm2,rdi
  00ef9:    	jmp    0xf10
  00efe:    	call   0xfffdc8fc
  00f03:    	test   rax,rax
  00f06:    	je     0x31684
  00f0c:    	movq   xmm2,xmm0
  00f10:    	mulsd  xmm2,xmm3
:00078 %12 = %12 + %13                      [Float][Float]
  00f14: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00f1b: 00 	test   rdi,0x1
  00f22:    	jne    0x316ba
  00f28: 00 	test   rdi,0x2
  00f2f:    	je     0xf6c
  00f35:    	xorps  xmm8,xmm8
  00f39: 00 	movabs rax,0x8000000000000002
  00f43:    	cmp    rdi,rax
  00f46:    	je     0xf7f
  00f4c:    	mov    rax,rdi
  00f4f:    	sar    rax,0x3f
  00f53:    	add    rax,0x2
  00f57:    	and    rdi,0xfffffffffffffffc
  00f5b:    	or     rdi,rax
  00f5e:    	rol    rdi,0x3d
  00f62:    	movq   xmm8,rdi
  00f67:    	jmp    0xf7f
  00f6c:    	call   0xfffdc8fc
  00f71:    	test   rax,rax
  00f74:    	je     0x316ba
  00f7a:    	movq   xmm8,xmm0
  00f7f:    	addsd  xmm8,xmm2
:00079 %14 = %1.call org()                  [Ray]
  00f84:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f88: 00 	test   rdi,0x7
  00f8f:    	jne    0x31700
  00f95:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00f99:    	jne    0x31700
  00f9f: 26 	cmp    DWORD PTR [rip+0xfffffffffffde445],0x26        # 0xfffdf3eb
  00fa6:    	jne    0x31700
  00fac:    	mov    esi,DWORD PTR [rip+0xa52]        # 0x1a04
  00fb2:    	cmp    esi,0xffffffff
  00fb5:    	je     0x31757
  00fbb:    	cmp    WORD PTR [rdi+0x2],0x3
  00fc0:    	jne    0xfd9
  00fc6:    	cmp    esi,0x6
  00fc9:    	jge    0xfd9
  00fcf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00fd4:    	jmp    0x1041
  00fd9:    	sub    rsp,0x40
  00fdd:    	movq   QWORD PTR [rsp],xmm2
  00fe2:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fe8:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fee:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ff4:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ffa:    	movq   QWORD PTR [rsp+0x28],xmm7
  01000: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01007: 00 	movabs rax,0x5600b755dfe0
  01011:    	call   rax
  01013:    	movq   xmm2,QWORD PTR [rsp]
  01018:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0101e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01024:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0102a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01030:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01036: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0103d:    	add    rsp,0x40
  01041: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 
:00082 %13 = %14.call z()                   [Vec]
  01048: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0104f: 00 	test   rdi,0x7
  01056:    	jne    0x317dc
  0105c:    	cmp    DWORD PTR [rdi+0x4],0x28
  01060:    	jne    0x317dc
  01066: 26 	cmp    DWORD PTR [rip+0xfffffffffffde37e],0x26        # 0xfffdf3eb
  0106d:    	jne    0x317dc
  01073:    	mov    esi,DWORD PTR [rip+0x993]        # 0x1a0c
  01079:    	cmp    esi,0xffffffff
  0107c:    	je     0x31823
  01082:    	cmp    WORD PTR [rdi+0x2],0x3
  01087:    	jne    0x10a0
  0108d:    	cmp    esi,0x6
  01090:    	jge    0x10a0
  01096:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0109b:    	jmp    0x10fc
  010a0:    	sub    rsp,0x30
  010a4:    	movq   QWORD PTR [rsp],xmm3
  010a9:    	movq   QWORD PTR [rsp+0x8],xmm4
  010af:    	movq   QWORD PTR [rsp+0x10],xmm5
  010b5:    	movq   QWORD PTR [rsp+0x18],xmm6
  010bb:    	movq   QWORD PTR [rsp+0x20],xmm7
  010c1: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  010c8: 00 	movabs rax,0x5600b755dfe0
  010d2:    	call   rax
  010d4:    	movq   xmm3,QWORD PTR [rsp]
  010d9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010df:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010e5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010eb:    	movq   xmm7,QWORD PTR [rsp+0x20]
  010f1: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  010f8:    	add    rsp,0x30
  010fc: ff 	mov    QWORD PTR [rbp-0x90],rax
:00083 
:00085 %15 = %1.call dir()                  [Ray]
  01103:    	mov    rdi,QWORD PTR [rbp-0x30]
  01107: 00 	test   rdi,0x7
  0110e:    	jne    0x3189c
  01114:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01118:    	jne    0x3189c
  0111e: 26 	cmp    DWORD PTR [rip+0xfffffffffffde2c6],0x26        # 0xfffdf3eb
  01125:    	jne    0x3189c
  0112b:    	mov    esi,DWORD PTR [rip+0x8e3]        # 0x1a14
  01131:    	cmp    esi,0xffffffff
  01134:    	je     0x318e3
  0113a:    	cmp    WORD PTR [rdi+0x2],0x3
  0113f:    	jne    0x1158
  01145:    	cmp    esi,0x6
  01148:    	jge    0x1158
  0114e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01153:    	jmp    0x11b4
  01158:    	sub    rsp,0x30
  0115c:    	movq   QWORD PTR [rsp],xmm3
  01161:    	movq   QWORD PTR [rsp+0x8],xmm4
  01167:    	movq   QWORD PTR [rsp+0x10],xmm5
  0116d:    	movq   QWORD PTR [rsp+0x18],xmm6
  01173:    	movq   QWORD PTR [rsp+0x20],xmm7
  01179: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01180: 00 	movabs rax,0x5600b755dfe0
  0118a:    	call   rax
  0118c:    	movq   xmm3,QWORD PTR [rsp]
  01191:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01197:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0119d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011a3:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011a9: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  011b0:    	add    rsp,0x30
  011b4: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00086 
:00088 %14 = %15.call z()                   [Vec]
  011bb: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  011c2: 00 	test   rdi,0x7
  011c9:    	jne    0x3195c
  011cf:    	cmp    DWORD PTR [rdi+0x4],0x28
  011d3:    	jne    0x3195c
  011d9: 26 	cmp    DWORD PTR [rip+0xfffffffffffde20b],0x26        # 0xfffdf3eb
  011e0:    	jne    0x3195c
  011e6:    	mov    esi,DWORD PTR [rip+0x830]        # 0x1a1c
  011ec:    	cmp    esi,0xffffffff
  011ef:    	je     0x319a3
  011f5:    	cmp    WORD PTR [rdi+0x2],0x3
  011fa:    	jne    0x1213
  01200:    	cmp    esi,0x6
  01203:    	jge    0x1213
  01209:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0120e:    	jmp    0x126f
  01213:    	sub    rsp,0x30
  01217:    	movq   QWORD PTR [rsp],xmm3
  0121c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01222:    	movq   QWORD PTR [rsp+0x10],xmm5
  01228:    	movq   QWORD PTR [rsp+0x18],xmm6
  0122e:    	movq   QWORD PTR [rsp+0x20],xmm7
  01234: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0123b: 00 	movabs rax,0x5600b755dfe0
  01245:    	call   rax
  01247:    	movq   xmm3,QWORD PTR [rsp]
  0124c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01252:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01258:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0125e:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01264: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0126b:    	add    rsp,0x30
  0126f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 
:00091 %14 = %14 * %7                       [Float][Float]
  01276: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0127d: 00 	test   rdi,0x1
  01284:    	jne    0x31a1c
  0128a: 00 	test   rdi,0x2
  01291:    	je     0x12cd
  01297:    	xorps  xmm2,xmm2
  0129a: 00 	movabs rax,0x8000000000000002
  012a4:    	cmp    rdi,rax
  012a7:    	je     0x12df
  012ad:    	mov    rax,rdi
  012b0:    	sar    rax,0x3f
  012b4:    	add    rax,0x2
  012b8:    	and    rdi,0xfffffffffffffffc
  012bc:    	or     rdi,rax
  012bf:    	rol    rdi,0x3d
  012c3:    	movq   xmm2,rdi
  012c8:    	jmp    0x12df
  012cd:    	call   0xfffdc8fc
  012d2:    	test   rax,rax
  012d5:    	je     0x31a1c
  012db:    	movq   xmm2,xmm0
  012df:    	mulsd  xmm2,xmm3
:00092 %13 = %13 + %14                      [Float][Float]
  012e3: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  012ea: 00 	test   rdi,0x1
  012f1:    	jne    0x31a63
  012f7: 00 	test   rdi,0x2
  012fe:    	je     0x133b
  01304:    	xorps  xmm9,xmm9
  01308: 00 	movabs rax,0x8000000000000002
  01312:    	cmp    rdi,rax
  01315:    	je     0x134e
  0131b:    	mov    rax,rdi
  0131e:    	sar    rax,0x3f
  01322:    	add    rax,0x2
  01326:    	and    rdi,0xfffffffffffffffc
  0132a:    	or     rdi,rax
  0132d:    	rol    rdi,0x3d
  01331:    	movq   xmm9,rdi
  01336:    	jmp    0x134e
  0133b:    	call   0xfffdc8fc
  01340:    	test   rax,rax
  01343:    	je     0x31a63
  01349:    	movq   xmm9,xmm0
  0134e:    	addsd  xmm9,xmm2
:00093 %9 = %10.call new(%11; 3)            [#<Class:Vec>]
  01353:    	movq   xmm0,xmm4
  01357:    	call   0xfffdc9ef
  0135c:    	mov    QWORD PTR [rbp-0x80],rax
  01360:    	movq   xmm0,xmm8
  01365:    	call   0xfffdc9ef
  0136a: ff 	mov    QWORD PTR [rbp-0x88],rax
  01371:    	movq   xmm0,xmm9
  01376:    	call   0xfffdc9ef
  0137b: ff 	mov    QWORD PTR [rbp-0x90],rax
  01382:    	mov    rdi,QWORD PTR [rbp-0x78]
  01386: 00 	test   rdi,0x7
  0138d:    	jne    0x31aba
  01393:    	cmp    DWORD PTR [rdi+0x4],0x29
  01397:    	jne    0x31aba
  0139d: 26 	cmp    DWORD PTR [rip+0xfffffffffffde047],0x26        # 0xfffdf3eb
  013a4:    	jne    0x31aba
  013aa: 00 	mov    r9,0x0
  013b1:    	sub    rsp,0x40
  013b5:    	movq   QWORD PTR [rsp],xmm2
  013ba:    	movq   QWORD PTR [rsp+0x8],xmm3
  013c0:    	movq   QWORD PTR [rsp+0x10],xmm4
  013c6:    	movq   QWORD PTR [rsp+0x18],xmm5
  013cc:    	movq   QWORD PTR [rsp+0x20],xmm6
  013d2:    	movq   QWORD PTR [rsp+0x28],xmm7
  013d8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  013df: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  013e6:    	mov    rdx,rdi
  013e9:    	mov    rax,QWORD PTR [rbx]
  013ec:    	lea    rdi,[rsp-0x18]
  013f1:    	mov    QWORD PTR [rdi],rax
  013f4:    	mov    QWORD PTR [rbx],rdi
  013f7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01400:    	mov    QWORD PTR [rsp-0x38],rcx
  01405:    	lea    rcx,[rbp-0x80]
  01409: 00 	mov    r8,0x3
  01410:    	call   0x31af3
  01415:    	lea    rdi,[rbp-0x8]
  01419:    	mov    QWORD PTR [rbx],rdi
  0141c:    	movq   xmm2,QWORD PTR [rsp]
  01421:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01427:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0142d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01433:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01439:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0143f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01446: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0144d:    	add    rsp,0x40
  01451: 00 	movabs r13,0x5600b92b5950
  0145b:    	test   rax,rax
  0145e:    	je     0xfffdc8c3
  01464:    	mov    QWORD PTR [rbp-0x70],rax
:00094 
:00096 _ = %2.call pl=(%9; 1)               [Isect]
  01468:    	mov    rdi,QWORD PTR [rbp-0x38]
  0146c: 00 	test   rdi,0x7
  01473:    	jne    0x31b25
  01479:    	cmp    DWORD PTR [rdi+0x4],0x30
  0147d:    	jne    0x31b25
  01483: 26 	cmp    DWORD PTR [rip+0xfffffffffffddf61],0x26        # 0xfffdf3eb
  0148a:    	jne    0x31b25
  01490:    	mov    esi,DWORD PTR [rip+0x58e]        # 0x1a24
  01496:    	cmp    esi,0xffffffff
  01499:    	je     0x31b5e
  0149f:    	cmp    WORD PTR [rdi+0x2],0x3
  014a4:    	jne    0x14c1
  014aa:    	cmp    esi,0x6
  014ad:    	jge    0x14c1
  014b3:    	mov    rax,QWORD PTR [rbp-0x70]
  014b7:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  014bc:    	jmp    0x154e
  014c1:    	sub    rsp,0x40
  014c5:    	movq   QWORD PTR [rsp],xmm2
  014ca:    	movq   QWORD PTR [rsp+0x8],xmm3
  014d0:    	movq   QWORD PTR [rsp+0x10],xmm4
  014d6:    	movq   QWORD PTR [rsp+0x18],xmm5
  014dc:    	movq   QWORD PTR [rsp+0x20],xmm6
  014e2:    	movq   QWORD PTR [rsp+0x28],xmm7
  014e8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014ef: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014f6:    	mov    rdx,QWORD PTR [rbp-0x70]
  014fa: 00 	movabs rax,0x5600b755e260
  01504:    	call   rax
  01506:    	movq   xmm2,QWORD PTR [rsp]
  0150b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01511:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01517:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0151d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01523:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01529: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01530: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01537:    	add    rsp,0x40
  0153b: 00 	movabs r13,0x5600b92b5980
  01545:    	test   rax,rax
  01548:    	je     0xfffdc8c3
:00097 
:00099 %9 = %2.call pl()                    [Isect]
  0154e:    	mov    rdi,QWORD PTR [rbp-0x38]
  01552: 00 	test   rdi,0x7
  01559:    	jne    0x31bf8
  0155f:    	cmp    DWORD PTR [rdi+0x4],0x30
  01563:    	jne    0x31bf8
  01569: 26 	cmp    DWORD PTR [rip+0xfffffffffffdde7b],0x26        # 0xfffdf3eb
  01570:    	jne    0x31bf8
  01576:    	mov    esi,DWORD PTR [rip+0x4b0]        # 0x1a2c
  0157c:    	cmp    esi,0xffffffff
  0157f:    	je     0x31c31
  01585:    	cmp    WORD PTR [rdi+0x2],0x3
  0158a:    	jne    0x15a3
  01590:    	cmp    esi,0x6
  01593:    	jge    0x15a3
  01599:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0159e:    	jmp    0x1619
  015a3:    	sub    rsp,0x40
  015a7:    	movq   QWORD PTR [rsp],xmm2
  015ac:    	movq   QWORD PTR [rsp+0x8],xmm3
  015b2:    	movq   QWORD PTR [rsp+0x10],xmm4
  015b8:    	movq   QWORD PTR [rsp+0x18],xmm5
  015be:    	movq   QWORD PTR [rsp+0x20],xmm6
  015c4:    	movq   QWORD PTR [rsp+0x28],xmm7
  015ca: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015d1: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015d8: 00 	movabs rax,0x5600b755dfe0
  015e2:    	call   rax
  015e4:    	movq   xmm2,QWORD PTR [rsp]
  015e9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015ef:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015f5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015fb:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01601:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01607: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0160e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01615:    	add    rsp,0x40
  01619:    	mov    QWORD PTR [rbp-0x70],rax
:00100 
:00102 %10 = @center: Sphere[IvarId(0)]
  0161d:    	mov    rdi,QWORD PTR [rbp-0x28]
  01621:    	mov    rax,QWORD PTR [rdi+0x10]
  01625:    	mov    QWORD PTR [rbp-0x78],rax
:00103 %8 = %9.call vsub(%10; 1)            [Vec]
  01629:    	mov    rdi,QWORD PTR [rbp-0x70]
  0162d: 00 	test   rdi,0x7
  01634:    	jne    0x31cc4
  0163a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0163e:    	jne    0x31cc4
  01644: 26 	cmp    DWORD PTR [rip+0xfffffffffffddda0],0x26        # 0xfffdf3eb
  0164b:    	jne    0x31cc4
  01651:    	sub    rsp,0x40
  01655:    	movq   QWORD PTR [rsp],xmm2
  0165a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01660:    	movq   QWORD PTR [rsp+0x10],xmm4
  01666:    	movq   QWORD PTR [rsp+0x18],xmm5
  0166c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01672:    	movq   QWORD PTR [rsp+0x28],xmm7
  01678: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0167f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01686:    	mov    rax,QWORD PTR [rbx]
  01689:    	lea    rdi,[rsp-0x18]
  0168e:    	mov    QWORD PTR [rdi],rax
  01691:    	mov    QWORD PTR [rbx],rdi
  01694: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0169d:    	mov    QWORD PTR [rsp-0x38],rcx
  016a2:    	mov    rax,QWORD PTR [rbp-0x70]
  016a6:    	mov    QWORD PTR [rsp-0x38],rax
  016ab: 00 	mov    rdi,0x1
  016b2:    	mov    rax,QWORD PTR [rbp-0x78]
  016b6:    	mov    QWORD PTR [rsp-0x40],rax
  016bb: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016c4: 08 	movabs rax,0x100080000003f
  016ce:    	mov    QWORD PTR [rsp-0x28],rax
  016d3: 00 	movabs r13,0x5600b92a1ef0
  016dd:    	call   0xfffe00ac
  016e2:    	lea    rdi,[rbp-0x8]
  016e6:    	mov    QWORD PTR [rbx],rdi
  016e9:    	movq   xmm2,QWORD PTR [rsp]
  016ee:    	movq   xmm3,QWORD PTR [rsp+0x8]
  016f4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  016fa:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01700:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01706:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0170c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01713: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0171a:    	add    rsp,0x40
  0171e: 00 	movabs r13,0x5600b92b59f0
  01728:    	test   rax,rax
  0172b:    	je     0xfffdc8c3
  01731:    	mov    QWORD PTR [rbp-0x68],rax
:00104 
:00106 %9 = %8.call vnormalize()            [Vec]
  01735:    	mov    rdi,QWORD PTR [rbp-0x68]
  01739: 00 	test   rdi,0x7
  01740:    	jne    0x31cfd
  01746:    	cmp    DWORD PTR [rdi+0x4],0x28
  0174a:    	jne    0x31cfd
  01750: 26 	cmp    DWORD PTR [rip+0xfffffffffffddc94],0x26        # 0xfffdf3eb
  01757:    	jne    0x31cfd
  0175d:    	sub    rsp,0x40
  01761:    	movq   QWORD PTR [rsp],xmm2
  01766:    	movq   QWORD PTR [rsp+0x8],xmm3
  0176c:    	movq   QWORD PTR [rsp+0x10],xmm4
  01772:    	movq   QWORD PTR [rsp+0x18],xmm5
  01778:    	movq   QWORD PTR [rsp+0x20],xmm6
  0177e:    	movq   QWORD PTR [rsp+0x28],xmm7
  01784: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0178b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01792:    	mov    rax,QWORD PTR [rbx]
  01795:    	lea    rdi,[rsp-0x18]
  0179a:    	mov    QWORD PTR [rdi],rax
  0179d:    	mov    QWORD PTR [rbx],rdi
  017a0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017a9:    	mov    QWORD PTR [rsp-0x38],rcx
  017ae:    	mov    rax,QWORD PTR [rbp-0x68]
  017b2:    	mov    QWORD PTR [rsp-0x38],rax
  017b7: 00 	mov    rdi,0x0
  017be: 00 	mov    QWORD PTR [rsp-0x30],0x0
  017c7: 07 	movabs rax,0x1000700000043
  017d1:    	mov    QWORD PTR [rsp-0x28],rax
  017d6: 00 	movabs r13,0x5600b92c5690
  017e0:    	call   0xfffdfd12
  017e5:    	lea    rdi,[rbp-0x8]
  017e9:    	mov    QWORD PTR [rbx],rdi
  017ec:    	movq   xmm2,QWORD PTR [rsp]
  017f1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  017f7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  017fd:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01803:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01809:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0180f: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01816: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0181d:    	add    rsp,0x40
  01821: 00 	movabs r13,0x5600b92b5a20
  0182b:    	test   rax,rax
  0182e:    	je     0xfffdc8c3
  01834:    	mov    QWORD PTR [rbp-0x70],rax
:00107 
:00109 _ = %2.call n=(%9; 1)                [Isect]
  01838:    	mov    rdi,QWORD PTR [rbp-0x38]
  0183c: 00 	test   rdi,0x7
  01843:    	jne    0x31d36
  01849:    	cmp    DWORD PTR [rdi+0x4],0x30
  0184d:    	jne    0x31d36
  01853: 26 	cmp    DWORD PTR [rip+0xfffffffffffddb91],0x26        # 0xfffdf3eb
  0185a:    	jne    0x31d36
  01860:    	mov    esi,DWORD PTR [rip+0x1ce]        # 0x1a34
  01866:    	cmp    esi,0xffffffff
  01869:    	je     0x31d6f
  0186f:    	cmp    WORD PTR [rdi+0x2],0x3
  01874:    	jne    0x1891
  0187a:    	cmp    esi,0x6
  0187d:    	jge    0x1891
  01883:    	mov    rax,QWORD PTR [rbp-0x70]
  01887:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0188c:    	jmp    0x191e
  01891:    	sub    rsp,0x40
  01895:    	movq   QWORD PTR [rsp],xmm2
  0189a:    	movq   QWORD PTR [rsp+0x8],xmm3
  018a0:    	movq   QWORD PTR [rsp+0x10],xmm4
  018a6:    	movq   QWORD PTR [rsp+0x18],xmm5
  018ac:    	movq   QWORD PTR [rsp+0x20],xmm6
  018b2:    	movq   QWORD PTR [rsp+0x28],xmm7
  018b8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  018bf: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  018c6:    	mov    rdx,QWORD PTR [rbp-0x70]
  018ca: 00 	movabs rax,0x5600b755e260
  018d4:    	call   rax
  018d6:    	movq   xmm2,QWORD PTR [rsp]
  018db:    	movq   xmm3,QWORD PTR [rsp+0x8]
  018e1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  018e7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  018ed:    	movq   xmm6,QWORD PTR [rsp+0x20]
  018f3:    	movq   xmm7,QWORD PTR [rsp+0x28]
  018f9: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01900: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01907:    	add    rsp,0x40
  0190b: 00 	movabs r13,0x5600b92b5a50
  01915:    	test   rax,rax
  01918:    	je     0xfffdc8c3
:00110 
:00112 br =>:00113
  0191e:    	jmp    0x31ec3
:00113 br =>:00114
  01923:    	jmp    0x31f55
:00114 %9 = nil
  01928: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00115 ret %9
  01930:    	mov    rax,QWORD PTR [rbp-0x70]
  01934:    	leave  
  01935:    	ret    
==> start whole compile: otherBasis FuncId(59) self_class:Scene start:[00000] bytecode:0x5600b92cdf40
<== finished compile. elapsed:136.2µs
offset:Pos(151984) code: 7591 bytes  data: 381 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	mov    eax,edx
  0000d:    	sub    eax,0x2
  00010:    	jge    0x32
  00016:    	neg    rdx
  00019:    	lea    rdx,[rbp+rdx*8-0x30]
  0001e: 00 	mov    QWORD PTR [rdx],0x4
  00025:    	sub    rdx,0x8
  00029:    	add    eax,0x1
  0002c:    	jne    0x1e
  00032: 00 	mov    rax,0x4
  00039:    	mov    QWORD PTR [rbp-0x40],rax
  0003d:    	mov    QWORD PTR [rbp-0x48],rax
  00041:    	mov    QWORD PTR [rbp-0x50],rax
  00045:    	mov    QWORD PTR [rbp-0x58],rax
  00049:    	mov    QWORD PTR [rbp-0x60],rax
  0004d:    	mov    QWORD PTR [rbp-0x68],rax
  00051:    	mov    rdi,QWORD PTR [rbp-0x28]
  00055: 00 	test   rdi,0x7
  0005c:    	jne    0x30550
  00062:    	cmp    DWORD PTR [rdi+0x4],0x32
  00066:    	jne    0x30550
:00000 init reg_num:9 arg_num:2 stack_offset:7
:00001 %3 = 2: i32
  0006c: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00002 %5 = const[Vec]                      [Vec]
  00074: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdd945]        # 0xfffdd9c0
  0007b: 00 	cmp    rax,QWORD PTR [rip+0x1d3e]        # 0x1dc0
  00082:    	jne    0x3055f
  00088: 00 	mov    rax,QWORD PTR [rip+0x1d21]        # 0x1db0
  0008f:    	mov    QWORD PTR [rbp-0x50],rax
:00003 %6 = %2.call x()                     [Vec]
  00093:    	mov    rdi,QWORD PTR [rbp-0x38]
  00097: 00 	test   rdi,0x7
  0009e:    	jne    0x305a5
  000a4:    	cmp    DWORD PTR [rdi+0x4],0x28
  000a8:    	jne    0x305a5
  000ae: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd8fe],0x26        # 0xfffdd9b3
  000b5:    	jne    0x305a5
  000bb:    	mov    esi,DWORD PTR [rip+0x1d0b]        # 0x1dcc
  000c1:    	cmp    esi,0xffffffff
  000c4:    	je     0x305b4
  000ca:    	cmp    WORD PTR [rdi+0x2],0x3
  000cf:    	jne    0xe8
  000d5:    	cmp    esi,0x6
  000d8:    	jge    0xe8
  000de:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000e3:    	jmp    0xf4
  000e8: 00 	movabs rax,0x5600b755dfe0
  000f2:    	call   rax
  000f4:    	mov    QWORD PTR [rbp-0x58],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  000f8:    	mov    rdi,QWORD PTR [rbp-0x38]
  000fc: 00 	test   rdi,0x7
  00103:    	jne    0x305dd
  00109:    	cmp    DWORD PTR [rdi+0x4],0x28
  0010d:    	jne    0x305dd
  00113: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd899],0x26        # 0xfffdd9b3
  0011a:    	jne    0x305dd
  00120:    	mov    esi,DWORD PTR [rip+0x1cae]        # 0x1dd4
  00126:    	cmp    esi,0xffffffff
  00129:    	je     0x305ec
  0012f:    	cmp    WORD PTR [rdi+0x2],0x3
  00134:    	jne    0x14d
  0013a:    	cmp    esi,0x6
  0013d:    	jge    0x14d
  00143:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00148:    	jmp    0x159
  0014d: 00 	movabs rax,0x5600b755dfe0
  00157:    	call   rax
  00159:    	mov    QWORD PTR [rbp-0x60],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  0015d:    	mov    rdi,QWORD PTR [rbp-0x38]
  00161: 00 	test   rdi,0x7
  00168:    	jne    0x30615
  0016e:    	cmp    DWORD PTR [rdi+0x4],0x28
  00172:    	jne    0x30615
  00178: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd834],0x26        # 0xfffdd9b3
  0017f:    	jne    0x30615
  00185:    	mov    esi,DWORD PTR [rip+0x1c51]        # 0x1ddc
  0018b:    	cmp    esi,0xffffffff
  0018e:    	je     0x30624
  00194:    	cmp    WORD PTR [rdi+0x2],0x3
  00199:    	jne    0x1b2
  0019f:    	cmp    esi,0x6
  001a2:    	jge    0x1b2
  001a8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ad:    	jmp    0x1be
  001b2: 00 	movabs rax,0x5600b755dfe0
  001bc:    	call   rax
  001be:    	mov    QWORD PTR [rbp-0x68],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001c2:    	mov    rdi,QWORD PTR [rbp-0x50]
  001c6: 00 	test   rdi,0x7
  001cd:    	jne    0x3064d
  001d3:    	cmp    DWORD PTR [rdi+0x4],0x29
  001d7:    	jne    0x3064d
  001dd: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd7cf],0x26        # 0xfffdd9b3
  001e4:    	jne    0x3064d
  001ea: 00 	mov    r9,0x0
  001f1:    	mov    rdx,rdi
  001f4:    	mov    rax,QWORD PTR [rbx]
  001f7:    	lea    rdi,[rsp-0x18]
  001fc:    	mov    QWORD PTR [rdi],rax
  001ff:    	mov    QWORD PTR [rbx],rdi
  00202: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0020b:    	mov    QWORD PTR [rsp-0x38],rcx
  00210:    	lea    rcx,[rbp-0x58]
  00214: 00 	mov    r8,0x3
  0021b:    	call   0x3065c
  00220:    	lea    rdi,[rbp-0x8]
  00224:    	mov    QWORD PTR [rbx],rdi
  00227: 00 	movabs r13,0x5600b92ce020
  00231:    	test   rax,rax
  00234:    	je     0xfffdae8b
  0023a:    	mov    QWORD PTR [rbp-0x48],rax
:00013 
:00015 %1:.[%3:] = %4
  0023e:    	mov    rdx,QWORD PTR [rbp-0x30]
  00242:    	mov    rcx,QWORD PTR [rbp-0x40]
  00246:    	mov    r8,QWORD PTR [rbp-0x48]
  0024a:    	mov    rdi,rbx
  0024d:    	mov    rsi,r12
  00250: 00 	movabs rax,0x5600b75c5370
  0025a:    	call   rax
  0025c: 00 	movabs r13,0x5600b92ce040
  00266:    	test   rax,rax
  00269:    	je     0xfffdae8b
:00016 %3 = 1: i32
  0026f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00017 %5 = const[Vec]                      [Vec]
  00277: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdd742]        # 0xfffdd9c0
  0027e: 00 	cmp    rax,QWORD PTR [rip+0x1b6b]        # 0x1df0
  00285:    	jne    0x3068e
  0028b: 00 	mov    rax,QWORD PTR [rip+0x1b4e]        # 0x1de0
  00292:    	mov    QWORD PTR [rbp-0x50],rax
:00018 %6 = literal[0.0]
  00296: 00 	movq   xmm2,QWORD PTR [rip+0x1b62]        # 0x1e00
  0029e: 00 	movabs rax,0x8000000000000002
  002a8:    	mov    QWORD PTR [rbp-0x58],rax
:00019 %7 = literal[0.0]
  002ac: 00 	movq   xmm3,QWORD PTR [rip+0x1b5c]        # 0x1e10
  002b4: 00 	movabs rax,0x8000000000000002
  002be:    	mov    QWORD PTR [rbp-0x60],rax
:00020 %8 = literal[0.0]
  002c2: 00 	movq   xmm4,QWORD PTR [rip+0x1b56]        # 0x1e20
  002ca: 00 	movabs rax,0x8000000000000002
  002d4:    	mov    QWORD PTR [rbp-0x68],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002d8:    	mov    rdi,QWORD PTR [rbp-0x50]
  002dc: 00 	test   rdi,0x7
  002e3:    	jne    0x306d4
  002e9:    	cmp    DWORD PTR [rdi+0x4],0x29
  002ed:    	jne    0x306d4
  002f3: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd6b9],0x26        # 0xfffdd9b3
  002fa:    	jne    0x306d4
  00300: 00 	mov    r9,0x0
  00307:    	sub    rsp,0x20
  0030b:    	movq   QWORD PTR [rsp],xmm2
  00310:    	movq   QWORD PTR [rsp+0x8],xmm3
  00316:    	movq   QWORD PTR [rsp+0x10],xmm4
  0031c:    	mov    rdx,rdi
  0031f:    	mov    rax,QWORD PTR [rbx]
  00322:    	lea    rdi,[rsp-0x18]
  00327:    	mov    QWORD PTR [rdi],rax
  0032a:    	mov    QWORD PTR [rbx],rdi
  0032d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00336:    	mov    QWORD PTR [rsp-0x38],rcx
  0033b:    	lea    rcx,[rbp-0x58]
  0033f: 00 	mov    r8,0x3
  00346:    	call   0x306e3
  0034b:    	lea    rdi,[rbp-0x8]
  0034f:    	mov    QWORD PTR [rbx],rdi
  00352:    	movq   xmm2,QWORD PTR [rsp]
  00357:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0035d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00363:    	add    rsp,0x20
  00367: 00 	movabs r13,0x5600b92ce0b0
  00371:    	test   rax,rax
  00374:    	je     0xfffdae8b
  0037a:    	mov    QWORD PTR [rbp-0x48],rax
:00022 
:00024 %1:.[%3:] = %4
  0037e:    	sub    rsp,0x20
  00382:    	movq   QWORD PTR [rsp],xmm2
  00387:    	movq   QWORD PTR [rsp+0x8],xmm3
  0038d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00393:    	mov    rdx,QWORD PTR [rbp-0x30]
  00397:    	mov    rcx,QWORD PTR [rbp-0x40]
  0039b:    	mov    r8,QWORD PTR [rbp-0x48]
  0039f:    	mov    rdi,rbx
  003a2:    	mov    rsi,r12
  003a5: 00 	movabs rax,0x5600b75c5370
  003af:    	call   rax
  003b1:    	movq   xmm2,QWORD PTR [rsp]
  003b6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003bc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003c2:    	add    rsp,0x20
  003c6: 00 	movabs r13,0x5600b92ce0d0
  003d0:    	test   rax,rax
  003d3:    	je     0xfffdae8b
:00025 %3 = %2.call x()                     [Vec]
  003d9:    	mov    rdi,QWORD PTR [rbp-0x38]
  003dd: 00 	test   rdi,0x7
  003e4:    	jne    0x30715
  003ea:    	cmp    DWORD PTR [rdi+0x4],0x28
  003ee:    	jne    0x30715
  003f4: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd5b8],0x26        # 0xfffdd9b3
  003fb:    	jne    0x30715
  00401:    	mov    esi,DWORD PTR [rip+0x1a25]        # 0x1e2c
  00407:    	cmp    esi,0xffffffff
  0040a:    	je     0x30724
  00410:    	cmp    WORD PTR [rdi+0x2],0x3
  00415:    	jne    0x42e
  0041b:    	cmp    esi,0x6
  0041e:    	jge    0x42e
  00424:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00429:    	jmp    0x464
  0042e:    	sub    rsp,0x20
  00432:    	movq   QWORD PTR [rsp],xmm2
  00437:    	movq   QWORD PTR [rsp+0x8],xmm3
  0043d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00443: 00 	movabs rax,0x5600b755dfe0
  0044d:    	call   rax
  0044f:    	movq   xmm2,QWORD PTR [rsp]
  00454:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0045a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00460:    	add    rsp,0x20
  00464:    	mov    QWORD PTR [rbp-0x40],rax
:00026 
:00028 %4 = literal[0.6]
  00468: 00 	movq   xmm5,QWORD PTR [rip+0x19c0]        # 0x1e30
  00470: 99 	movabs rax,0xff1999999999999a
  0047a:    	mov    QWORD PTR [rbp-0x48],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  0047e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00482: 00 	test   rdi,0x1
  00489:    	jne    0x30777
  0048f: 00 	test   rdi,0x2
  00496:    	je     0x4d2
  0049c:    	xorps  xmm6,xmm6
  0049f: 00 	movabs rax,0x8000000000000002
  004a9:    	cmp    rdi,rax
  004ac:    	je     0x4e4
  004b2:    	mov    rax,rdi
  004b5:    	sar    rax,0x3f
  004b9:    	add    rax,0x2
  004bd:    	and    rdi,0xfffffffffffffffc
  004c1:    	or     rdi,rax
  004c4:    	rol    rdi,0x3d
  004c8:    	movq   xmm6,rdi
  004cd:    	jmp    0x4e4
  004d2:    	call   0xfffdaec4
  004d7:    	test   rax,rax
  004da:    	je     0x30777
  004e0:    	movq   xmm6,xmm0
  004e4:    	ucomisd xmm6,xmm5
  004e8:    	jae    0x30878
:00031 %3 = %2.call x()                     [Vec]
  004ee:    	mov    rdi,QWORD PTR [rbp-0x38]
  004f2: 00 	test   rdi,0x7
  004f9:    	jne    0x30786
  004ff:    	cmp    DWORD PTR [rdi+0x4],0x28
  00503:    	jne    0x30786
  00509: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd4a3],0x26        # 0xfffdd9b3
  00510:    	jne    0x30786
  00516:    	mov    esi,DWORD PTR [rip+0x1920]        # 0x1e3c
  0051c:    	cmp    esi,0xffffffff
  0051f:    	je     0x30795
  00525:    	cmp    WORD PTR [rdi+0x2],0x3
  0052a:    	jne    0x543
  00530:    	cmp    esi,0x6
  00533:    	jge    0x543
  00539:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0053e:    	jmp    0x585
  00543:    	sub    rsp,0x20
  00547:    	movq   QWORD PTR [rsp],xmm2
  0054c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00552:    	movq   QWORD PTR [rsp+0x10],xmm4
  00558:    	movq   QWORD PTR [rsp+0x18],xmm5
  0055e: 00 	movabs rax,0x5600b755dfe0
  00568:    	call   rax
  0056a:    	movq   xmm2,QWORD PTR [rsp]
  0056f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00575:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0057b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00581:    	add    rsp,0x20
  00585:    	mov    QWORD PTR [rbp-0x40],rax
:00032 
:00034 %4 = literal[-0.6]
  00589: 00 	movq   xmm5,QWORD PTR [rip+0x18af]        # 0x1e40
  00591: 99 	movabs rax,0xff1999999999999e
  0059b:    	mov    QWORD PTR [rbp-0x48],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  0059f:    	mov    rdi,QWORD PTR [rbp-0x40]
  005a3: 00 	test   rdi,0x1
  005aa:    	jne    0x307f4
  005b0: 00 	test   rdi,0x2
  005b7:    	je     0x5f3
  005bd:    	xorps  xmm6,xmm6
  005c0: 00 	movabs rax,0x8000000000000002
  005ca:    	cmp    rdi,rax
  005cd:    	je     0x605
  005d3:    	mov    rax,rdi
  005d6:    	sar    rax,0x3f
  005da:    	add    rax,0x2
  005de:    	and    rdi,0xfffffffffffffffc
  005e2:    	or     rdi,rax
  005e5:    	rol    rdi,0x3d
  005e9:    	movq   xmm6,rdi
  005ee:    	jmp    0x605
  005f3:    	call   0xfffdaec4
  005f8:    	test   rax,rax
  005fb:    	je     0x307f4
  00601:    	movq   xmm6,xmm0
  00605:    	ucomisd xmm6,xmm5
  00609:    	jbe    0x30891
:00037 %3 = 1: i32
  0060f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  00617:    	sub    rsp,0x20
  0061b:    	movq   QWORD PTR [rsp],xmm2
  00620:    	movq   QWORD PTR [rsp+0x8],xmm3
  00626:    	movq   QWORD PTR [rsp+0x10],xmm4
  0062c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00632:    	mov    rdx,QWORD PTR [rbp-0x30]
  00636:    	mov    rcx,QWORD PTR [rbp-0x40]
  0063a:    	mov    rdi,rbx
  0063d:    	mov    rsi,r12
  00640: 00 	movabs r8,0x5600b92ce1a8
  0064a: 00 	movabs rax,0x5600b75c5240
  00654:    	call   rax
  00656:    	movq   xmm2,QWORD PTR [rsp]
  0065b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00661:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00667:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0066d:    	add    rsp,0x20
  00671: 00 	movabs r13,0x5600b92ce1b0
  0067b:    	test   rax,rax
  0067e:    	je     0xfffdae8b
  00684:    	mov    QWORD PTR [rbp-0x40],rax
:00039 %4 = literal[1.0]
  00688: 00 	movq   xmm5,QWORD PTR [rip+0x17c0]        # 0x1e50
  00690: 00 	movabs rax,0xff80000000000002
  0069a:    	mov    QWORD PTR [rbp-0x48],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  0069e:    	mov    rdi,QWORD PTR [rbp-0x40]
  006a2: 00 	test   rdi,0x7
  006a9:    	jne    0x30803
  006af:    	cmp    DWORD PTR [rdi+0x4],0x28
  006b3:    	jne    0x30803
  006b9: 26 	cmp    DWORD PTR [rip+0xfffffffffffdd2f3],0x26        # 0xfffdd9b3
  006c0:    	jne    0x30803
  006c6:    	mov    esi,DWORD PTR [rip+0x1790]        # 0x1e5c
  006cc:    	cmp    esi,0xffffffff
  006cf:    	je     0x30812
  006d5:    	cmp    WORD PTR [rdi+0x2],0x3
  006da:    	jne    0x6f7
  006e0:    	cmp    esi,0x6
  006e3:    	jge    0x6f7
  006e9:    	mov    rax,QWORD PTR [rbp-0x48]
  006ed:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006f2:    	jmp    0x750
  006f7:    	sub    rsp,0x20
  006fb:    	movq   QWORD PTR [rsp],xmm2
  00700:    	movq   QWORD PTR [rsp+0x8],xmm3
  00706:    	movq   QWORD PTR [rsp+0x10],xmm4
  0070c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00712:    	mov    rdx,QWORD PTR [rbp-0x48]
  00716: 00 	movabs rax,0x5600b755e260
  00720:    	call   rax
  00722:    	movq   xmm2,QWORD PTR [rsp]
  00727:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0072d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00733:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00739:    	add    rsp,0x20
  0073d: 00 	movabs r13,0x5600b92ce1e0
  00747:    	test   rax,rax
  0074a:    	je     0xfffdae8b
:00041 
:00043 br =>:00088
  00750:    	jmp    0x30f52
:00044 %3 = %2.call y()                     [<INVALID>]
  00755: 01 	sub    DWORD PTR [rip+0x1704],0x1        # 0x1e60
  0075c:    	je     0x308b9
  00762:    	sub    rsp,0x20
  00766:    	movq   QWORD PTR [rsp],xmm2
  0076b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00771:    	movq   QWORD PTR [rsp+0x10],xmm4
  00777:    	movq   QWORD PTR [rsp+0x18],xmm5
  0077d:    	mov    rdi,QWORD PTR [rbp-0x38]
  00781: 00 	movabs rax,0x5600b75a2280
  0078b:    	call   rax
  0078d:    	mov    r15d,eax
  00790: 00 	cmp    r15d,DWORD PTR [rip+0x16d1]        # 0x1e68
  00797:    	jne    0x308db
  0079d:    	mov    eax,DWORD PTR [rip+0xfffffffffffdd210]        # 0xfffdd9b3
  007a3:    	cmp    DWORD PTR [rip+0x16bb],eax        # 0x1e64
  007a9:    	jne    0x308db
  007af:    	mov    rax,QWORD PTR [rbx]
  007b2:    	lea    rdi,[rsp-0x18]
  007b7:    	mov    QWORD PTR [rdi],rax
  007ba:    	mov    QWORD PTR [rbx],rdi
  007bd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007c6:    	mov    QWORD PTR [rsp-0x38],rcx
  007cb:    	mov    rax,QWORD PTR [rbp-0x38]
  007cf:    	mov    QWORD PTR [rsp-0x38],rax
  007d4: 00 	mov    rdi,0x0
  007db: 00 	mov    QWORD PTR [rsp-0x30],0x0
  007e4: 00 	movabs rax,0x0
  007ee:    	mov    QWORD PTR [rsp-0x28],rax
  007f3: 00 	movabs r13,0x0
  007fd:    	call   0xfffdae50
  00802:    	lea    rdi,[rbp-0x8]
  00806:    	mov    QWORD PTR [rbx],rdi
  00809:    	movq   xmm2,QWORD PTR [rsp]
  0080e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00814:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0081a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00820:    	add    rsp,0x20
  00824:    	test   rax,rax
  00827:    	je     0x30947
  0082d:    	mov    QWORD PTR [rbp-0x40],rax
:00045 
:00047 %4 = literal[0.6]
  00831: 00 	movq   xmm5,QWORD PTR [rip+0x1637]        # 0x1e70
  00839: 99 	movabs rax,0xff1999999999999a
  00843:    	mov    QWORD PTR [rbp-0x48],rax
:00048 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00049 condnotbr _%3 =>:00063
  00847:    	mov    rdi,QWORD PTR [rbp-0x40]
  0084b:    	mov    rsi,QWORD PTR [rbp-0x48]
  0084f: 00 	test   rdi,0x1
  00856:    	je     0x30956
  0085c: 00 	test   rsi,0x1
  00863:    	je     0x30956
  00869:    	cmp    rdi,rsi
  0086c:    	jge    0x30b58
:00050 %3 = %2.call y()                     [<INVALID>]
  00872: 01 	sub    DWORD PTR [rip+0x15ff],0x1        # 0x1e78
  00879:    	je     0x309ba
  0087f:    	sub    rsp,0x20
  00883:    	movq   QWORD PTR [rsp],xmm2
  00888:    	movq   QWORD PTR [rsp+0x8],xmm3
  0088e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00894:    	movq   QWORD PTR [rsp+0x18],xmm5
  0089a:    	mov    rdi,QWORD PTR [rbp-0x38]
  0089e: 00 	movabs rax,0x5600b75a2280
  008a8:    	call   rax
  008aa:    	mov    r15d,eax
  008ad: 00 	cmp    r15d,DWORD PTR [rip+0x15cc]        # 0x1e80
  008b4:    	jne    0x309dc
  008ba:    	mov    eax,DWORD PTR [rip+0xfffffffffffdd0f3]        # 0xfffdd9b3
  008c0:    	cmp    DWORD PTR [rip+0x15b6],eax        # 0x1e7c
  008c6:    	jne    0x309dc
  008cc:    	mov    rax,QWORD PTR [rbx]
  008cf:    	lea    rdi,[rsp-0x18]
  008d4:    	mov    QWORD PTR [rdi],rax
  008d7:    	mov    QWORD PTR [rbx],rdi
  008da: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008e3:    	mov    QWORD PTR [rsp-0x38],rcx
  008e8:    	mov    rax,QWORD PTR [rbp-0x38]
  008ec:    	mov    QWORD PTR [rsp-0x38],rax
  008f1: 00 	mov    rdi,0x0
  008f8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00901: 00 	movabs rax,0x0
  0090b:    	mov    QWORD PTR [rsp-0x28],rax
  00910: 00 	movabs r13,0x0
  0091a:    	call   0xfffdae50
  0091f:    	lea    rdi,[rbp-0x8]
  00923:    	mov    QWORD PTR [rbx],rdi
  00926:    	movq   xmm2,QWORD PTR [rsp]
  0092b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00931:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00937:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0093d:    	add    rsp,0x20
  00941:    	test   rax,rax
  00944:    	je     0x30a48
  0094a:    	mov    QWORD PTR [rbp-0x40],rax
:00051 
:00053 %4 = literal[-0.6]
  0094e: 00 	movq   xmm5,QWORD PTR [rip+0x153a]        # 0x1e90
  00956: 99 	movabs rax,0xff1999999999999e
  00960:    	mov    QWORD PTR [rbp-0x48],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  00964:    	mov    rdi,QWORD PTR [rbp-0x40]
  00968:    	mov    rsi,QWORD PTR [rbp-0x48]
  0096c: 00 	test   rdi,0x1
  00973:    	je     0x30a57
  00979: 00 	test   rsi,0x1
  00980:    	je     0x30a57
  00986:    	cmp    rdi,rsi
  00989:    	jle    0x30b71
:00056 %3 = 1: i32
  0098f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00057 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00997:    	sub    rsp,0x20
  0099b:    	movq   QWORD PTR [rsp],xmm2
  009a0:    	movq   QWORD PTR [rsp+0x8],xmm3
  009a6:    	movq   QWORD PTR [rsp+0x10],xmm4
  009ac:    	movq   QWORD PTR [rsp+0x18],xmm5
  009b2:    	mov    rdx,QWORD PTR [rbp-0x30]
  009b6:    	mov    rcx,QWORD PTR [rbp-0x40]
  009ba:    	mov    rdi,rbx
  009bd:    	mov    rsi,r12
  009c0: 00 	movabs r8,0x5600b92ce2d8
  009ca: 00 	movabs rax,0x5600b75c5240
  009d4:    	call   rax
  009d6:    	movq   xmm2,QWORD PTR [rsp]
  009db:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009e7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009ed:    	add    rsp,0x20
  009f1: 00 	movabs r13,0x5600b92ce2e0
  009fb:    	test   rax,rax
  009fe:    	je     0xfffdae8b
  00a04:    	mov    QWORD PTR [rbp-0x40],rax
:00058 %4 = literal[1.0]
  00a08: 00 	movq   xmm5,QWORD PTR [rip+0x1490]        # 0x1ea0
  00a10: 00 	movabs rax,0xff80000000000002
  00a1a:    	mov    QWORD PTR [rbp-0x48],rax
:00059 _ = %3.call y=(%4; 1)                [<INVALID>]
  00a1e: 01 	sub    DWORD PTR [rip+0x1483],0x1        # 0x1ea8
  00a25:    	je     0x30abb
  00a2b:    	sub    rsp,0x20
  00a2f:    	movq   QWORD PTR [rsp],xmm2
  00a34:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a3a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a40:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a46:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a4a: 00 	movabs rax,0x5600b75a2280
  00a54:    	call   rax
  00a56:    	mov    r15d,eax
  00a59: 00 	cmp    r15d,DWORD PTR [rip+0x1450]        # 0x1eb0
  00a60:    	jne    0x30add
  00a66:    	mov    eax,DWORD PTR [rip+0xfffffffffffdcf47]        # 0xfffdd9b3
  00a6c:    	cmp    DWORD PTR [rip+0x143a],eax        # 0x1eac
  00a72:    	jne    0x30add
  00a78:    	mov    rax,QWORD PTR [rbx]
  00a7b:    	lea    rdi,[rsp-0x18]
  00a80:    	mov    QWORD PTR [rdi],rax
  00a83:    	mov    QWORD PTR [rbx],rdi
  00a86: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a8f:    	mov    QWORD PTR [rsp-0x38],rcx
  00a94:    	mov    rax,QWORD PTR [rbp-0x40]
  00a98:    	mov    QWORD PTR [rsp-0x38],rax
  00a9d: 00 	mov    rdi,0x1
  00aa4:    	mov    rax,QWORD PTR [rbp-0x48]
  00aa8:    	mov    QWORD PTR [rsp-0x40],rax
  00aad: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ab6: 00 	movabs rax,0x0
  00ac0:    	mov    QWORD PTR [rsp-0x28],rax
  00ac5: 00 	movabs r13,0x0
  00acf:    	call   0xfffdae50
  00ad4:    	lea    rdi,[rbp-0x8]
  00ad8:    	mov    QWORD PTR [rbx],rdi
  00adb:    	movq   xmm2,QWORD PTR [rsp]
  00ae0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ae6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00aec:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00af2:    	add    rsp,0x20
  00af6:    	test   rax,rax
  00af9:    	je     0x30b49
:00060 
:00062 br =>:00088
  00aff:    	jmp    0x30f6b
:00063 %3 = %2.call z()                     [<INVALID>]
  00b04: 01 	sub    DWORD PTR [rip+0x13a9],0x1        # 0x1eb4
  00b0b:    	je     0x30b99
  00b11:    	sub    rsp,0x20
  00b15:    	movq   QWORD PTR [rsp],xmm2
  00b1a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b20:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b26:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b2c:    	mov    rdi,QWORD PTR [rbp-0x38]
  00b30: 00 	movabs rax,0x5600b75a2280
  00b3a:    	call   rax
  00b3c:    	mov    r15d,eax
  00b3f: 00 	cmp    r15d,DWORD PTR [rip+0x1376]        # 0x1ebc
  00b46:    	jne    0x30bbb
  00b4c:    	mov    eax,DWORD PTR [rip+0xfffffffffffdce61]        # 0xfffdd9b3
  00b52:    	cmp    DWORD PTR [rip+0x1360],eax        # 0x1eb8
  00b58:    	jne    0x30bbb
  00b5e:    	mov    rax,QWORD PTR [rbx]
  00b61:    	lea    rdi,[rsp-0x18]
  00b66:    	mov    QWORD PTR [rdi],rax
  00b69:    	mov    QWORD PTR [rbx],rdi
  00b6c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b75:    	mov    QWORD PTR [rsp-0x38],rcx
  00b7a:    	mov    rax,QWORD PTR [rbp-0x38]
  00b7e:    	mov    QWORD PTR [rsp-0x38],rax
  00b83: 00 	mov    rdi,0x0
  00b8a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b93: 00 	movabs rax,0x0
  00b9d:    	mov    QWORD PTR [rsp-0x28],rax
  00ba2: 00 	movabs r13,0x0
  00bac:    	call   0xfffdae50
  00bb1:    	lea    rdi,[rbp-0x8]
  00bb5:    	mov    QWORD PTR [rbx],rdi
  00bb8:    	movq   xmm2,QWORD PTR [rsp]
  00bbd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bc3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00bc9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00bcf:    	add    rsp,0x20
  00bd3:    	test   rax,rax
  00bd6:    	je     0x30c27
  00bdc:    	mov    QWORD PTR [rbp-0x40],rax
:00064 
:00066 %4 = literal[0.6]
  00be0: 00 	movq   xmm5,QWORD PTR [rip+0x12d8]        # 0x1ec0
  00be8: 99 	movabs rax,0xff1999999999999a
  00bf2:    	mov    QWORD PTR [rbp-0x48],rax
:00067 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00068 condnotbr _%3 =>:00082
  00bf6:    	mov    rdi,QWORD PTR [rbp-0x40]
  00bfa:    	mov    rsi,QWORD PTR [rbp-0x48]
  00bfe: 00 	test   rdi,0x1
  00c05:    	je     0x30c36
  00c0b: 00 	test   rsi,0x1
  00c12:    	je     0x30c36
  00c18:    	cmp    rdi,rsi
  00c1b:    	jge    0x30e38
:00069 %3 = %2.call z()                     [<INVALID>]
  00c21: 01 	sub    DWORD PTR [rip+0x12a0],0x1        # 0x1ec8
  00c28:    	je     0x30c9a
  00c2e:    	sub    rsp,0x20
  00c32:    	movq   QWORD PTR [rsp],xmm2
  00c37:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c3d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c43:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c49:    	mov    rdi,QWORD PTR [rbp-0x38]
  00c4d: 00 	movabs rax,0x5600b75a2280
  00c57:    	call   rax
  00c59:    	mov    r15d,eax
  00c5c: 00 	cmp    r15d,DWORD PTR [rip+0x126d]        # 0x1ed0
  00c63:    	jne    0x30cbc
  00c69:    	mov    eax,DWORD PTR [rip+0xfffffffffffdcd44]        # 0xfffdd9b3
  00c6f:    	cmp    DWORD PTR [rip+0x1257],eax        # 0x1ecc
  00c75:    	jne    0x30cbc
  00c7b:    	mov    rax,QWORD PTR [rbx]
  00c7e:    	lea    rdi,[rsp-0x18]
  00c83:    	mov    QWORD PTR [rdi],rax
  00c86:    	mov    QWORD PTR [rbx],rdi
  00c89: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c92:    	mov    QWORD PTR [rsp-0x38],rcx
  00c97:    	mov    rax,QWORD PTR [rbp-0x38]
  00c9b:    	mov    QWORD PTR [rsp-0x38],rax
  00ca0: 00 	mov    rdi,0x0
  00ca7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00cb0: 00 	movabs rax,0x0
  00cba:    	mov    QWORD PTR [rsp-0x28],rax
  00cbf: 00 	movabs r13,0x0
  00cc9:    	call   0xfffdae50
  00cce:    	lea    rdi,[rbp-0x8]
  00cd2:    	mov    QWORD PTR [rbx],rdi
  00cd5:    	movq   xmm2,QWORD PTR [rsp]
  00cda:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ce0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ce6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cec:    	add    rsp,0x20
  00cf0:    	test   rax,rax
  00cf3:    	je     0x30d28
  00cf9:    	mov    QWORD PTR [rbp-0x40],rax
:00070 
:00072 %4 = literal[-0.6]
  00cfd: 00 	movq   xmm5,QWORD PTR [rip+0x11db]        # 0x1ee0
  00d05: 99 	movabs rax,0xff1999999999999e
  00d0f:    	mov    QWORD PTR [rbp-0x48],rax
:00073 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00074 condnotbr _%3 =>:00082
  00d13:    	mov    rdi,QWORD PTR [rbp-0x40]
  00d17:    	mov    rsi,QWORD PTR [rbp-0x48]
  00d1b: 00 	test   rdi,0x1
  00d22:    	je     0x30d37
  00d28: 00 	test   rsi,0x1
  00d2f:    	je     0x30d37
  00d35:    	cmp    rdi,rsi
  00d38:    	jle    0x30e51
:00075 %3 = 1: i32
  00d3e: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00076 %3 = %1.[%3]                         [Array][Integer]
  00d46:    	sub    rsp,0x20
  00d4a:    	movq   QWORD PTR [rsp],xmm2
  00d4f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d55:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d5b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d61:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d65:    	mov    rcx,QWORD PTR [rbp-0x40]
  00d69:    	mov    rdi,rbx
  00d6c:    	mov    rsi,r12
  00d6f: 00 	movabs r8,0x5600b92ce408
  00d79: 00 	movabs rax,0x5600b75c5240
  00d83:    	call   rax
  00d85:    	movq   xmm2,QWORD PTR [rsp]
  00d8a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d90:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d96:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d9c:    	add    rsp,0x20
  00da0: 00 	movabs r13,0x5600b92ce410
  00daa:    	test   rax,rax
  00dad:    	je     0xfffdae8b
  00db3:    	mov    QWORD PTR [rbp-0x40],rax
:00077 %4 = literal[1.0]
  00db7: 00 	movq   xmm5,QWORD PTR [rip+0x1131]        # 0x1ef0
  00dbf: 00 	movabs rax,0xff80000000000002
  00dc9:    	mov    QWORD PTR [rbp-0x48],rax
:00078 _ = %3.call z=(%4; 1)                [<INVALID>]
  00dcd: 01 	sub    DWORD PTR [rip+0x1124],0x1        # 0x1ef8
  00dd4:    	je     0x30d9b
  00dda:    	sub    rsp,0x20
  00dde:    	movq   QWORD PTR [rsp],xmm2
  00de3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00de9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00def:    	movq   QWORD PTR [rsp+0x18],xmm5
  00df5:    	mov    rdi,QWORD PTR [rbp-0x40]
  00df9: 00 	movabs rax,0x5600b75a2280
  00e03:    	call   rax
  00e05:    	mov    r15d,eax
  00e08: 00 	cmp    r15d,DWORD PTR [rip+0x10f1]        # 0x1f00
  00e0f:    	jne    0x30dbd
  00e15:    	mov    eax,DWORD PTR [rip+0xfffffffffffdcb98]        # 0xfffdd9b3
  00e1b:    	cmp    DWORD PTR [rip+0x10db],eax        # 0x1efc
  00e21:    	jne    0x30dbd
  00e27:    	mov    rax,QWORD PTR [rbx]
  00e2a:    	lea    rdi,[rsp-0x18]
  00e2f:    	mov    QWORD PTR [rdi],rax
  00e32:    	mov    QWORD PTR [rbx],rdi
  00e35: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e3e:    	mov    QWORD PTR [rsp-0x38],rcx
  00e43:    	mov    rax,QWORD PTR [rbp-0x40]
  00e47:    	mov    QWORD PTR [rsp-0x38],rax
  00e4c: 00 	mov    rdi,0x1
  00e53:    	mov    rax,QWORD PTR [rbp-0x48]
  00e57:    	mov    QWORD PTR [rsp-0x40],rax
  00e5c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00e65: 00 	movabs rax,0x0
  00e6f:    	mov    QWORD PTR [rsp-0x28],rax
  00e74: 00 	movabs r13,0x0
  00e7e:    	call   0xfffdae50
  00e83:    	lea    rdi,[rbp-0x8]
  00e87:    	mov    QWORD PTR [rbx],rdi
  00e8a:    	movq   xmm2,QWORD PTR [rsp]
  00e8f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e95:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e9b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ea1:    	add    rsp,0x20
  00ea5:    	test   rax,rax
  00ea8:    	je     0x30e29
:00079 
:00081 br =>:00088
  00eae:    	jmp    0x30f84
:00082 %3 = 1: i32
  00eb3: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00ebb:    	sub    rsp,0x20
  00ebf:    	movq   QWORD PTR [rsp],xmm2
  00ec4:    	movq   QWORD PTR [rsp+0x8],xmm3
  00eca:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ed0:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ed6:    	mov    rdx,QWORD PTR [rbp-0x30]
  00eda:    	mov    rcx,QWORD PTR [rbp-0x40]
  00ede:    	mov    rdi,rbx
  00ee1:    	mov    rsi,r12
  00ee4: 00 	movabs r8,0x5600b92ce478
  00eee: 00 	movabs rax,0x5600b75c5240
  00ef8:    	call   rax
  00efa:    	movq   xmm2,QWORD PTR [rsp]
  00eff:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f05:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f0b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f11:    	add    rsp,0x20
  00f15: 00 	movabs r13,0x5600b92ce480
  00f1f:    	test   rax,rax
  00f22:    	je     0xfffdae8b
  00f28:    	mov    QWORD PTR [rbp-0x40],rax
:00084 %4 = literal[1.0]
  00f2c: 00 	movq   xmm5,QWORD PTR [rip+0xfdc]        # 0x1f10
  00f34: 00 	movabs rax,0xff80000000000002
  00f3e:    	mov    QWORD PTR [rbp-0x48],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f42: 01 	sub    DWORD PTR [rip+0xfcf],0x1        # 0x1f18
  00f49:    	je     0x30e79
  00f4f:    	sub    rsp,0x20
  00f53:    	movq   QWORD PTR [rsp],xmm2
  00f58:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f5e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f64:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f6a:    	mov    rdi,QWORD PTR [rbp-0x40]
  00f6e: 00 	movabs rax,0x5600b75a2280
  00f78:    	call   rax
  00f7a:    	mov    r15d,eax
  00f7d: 00 	cmp    r15d,DWORD PTR [rip+0xf9c]        # 0x1f20
  00f84:    	jne    0x30e9b
  00f8a:    	mov    eax,DWORD PTR [rip+0xfffffffffffdca23]        # 0xfffdd9b3
  00f90:    	cmp    DWORD PTR [rip+0xf86],eax        # 0x1f1c
  00f96:    	jne    0x30e9b
  00f9c:    	mov    rax,QWORD PTR [rbx]
  00f9f:    	lea    rdi,[rsp-0x18]
  00fa4:    	mov    QWORD PTR [rdi],rax
  00fa7:    	mov    QWORD PTR [rbx],rdi
  00faa: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fb3:    	mov    QWORD PTR [rsp-0x38],rcx
  00fb8:    	mov    rax,QWORD PTR [rbp-0x40]
  00fbc:    	mov    QWORD PTR [rsp-0x38],rax
  00fc1: 00 	mov    rdi,0x1
  00fc8:    	mov    rax,QWORD PTR [rbp-0x48]
  00fcc:    	mov    QWORD PTR [rsp-0x40],rax
  00fd1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fda: 00 	movabs rax,0x0
  00fe4:    	mov    QWORD PTR [rsp-0x28],rax
  00fe9: 00 	movabs r13,0x0
  00ff3:    	call   0xfffdae50
  00ff8:    	lea    rdi,[rbp-0x8]
  00ffc:    	mov    QWORD PTR [rbx],rdi
  00fff:    	movq   xmm2,QWORD PTR [rsp]
  01004:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0100a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01010:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01016:    	add    rsp,0x20
  0101a:    	test   rax,rax
  0101d:    	je     0x30f07
:00086 
:00088 %3 = 0: i32
  01023: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  0102b: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01033:    	sub    rsp,0x20
  01037:    	movq   QWORD PTR [rsp],xmm2
  0103c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01042:    	movq   QWORD PTR [rsp+0x10],xmm4
  01048:    	movq   QWORD PTR [rsp+0x18],xmm5
  0104e:    	mov    rdx,QWORD PTR [rbp-0x30]
  01052:    	mov    rcx,QWORD PTR [rbp-0x50]
  01056:    	mov    rdi,rbx
  01059:    	mov    rsi,r12
  0105c: 00 	movabs r8,0x5600b92ce4e8
  01066: 00 	movabs rax,0x5600b75c5240
  01070:    	call   rax
  01072:    	movq   xmm2,QWORD PTR [rsp]
  01077:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0107d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01083:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01089:    	add    rsp,0x20
  0108d: 00 	movabs r13,0x5600b92ce4f0
  01097:    	test   rax,rax
  0109a:    	je     0xfffdae8b
  010a0:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  010a4: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  010ac:    	sub    rsp,0x20
  010b0:    	movq   QWORD PTR [rsp],xmm3
  010b5:    	movq   QWORD PTR [rsp+0x8],xmm4
  010bb:    	movq   QWORD PTR [rsp+0x10],xmm5
  010c1:    	mov    rdx,QWORD PTR [rbp-0x30]
  010c5:    	mov    rcx,QWORD PTR [rbp-0x58]
  010c9:    	mov    rdi,rbx
  010cc:    	mov    rsi,r12
  010cf: 00 	movabs r8,0x5600b92ce508
  010d9: 00 	movabs rax,0x5600b75c5240
  010e3:    	call   rax
  010e5:    	movq   xmm3,QWORD PTR [rsp]
  010ea:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010f0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010f6:    	add    rsp,0x20
  010fa: 00 	movabs r13,0x5600b92ce510
  01104:    	test   rax,rax
  01107:    	je     0xfffdae8b
  0110d:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  01111:    	mov    rdi,QWORD PTR [rbp-0x50]
  01115: 00 	test   rdi,0x7
  0111c:    	jne    0x30f16
  01122:    	cmp    DWORD PTR [rdi+0x4],0x28
  01126:    	jne    0x30f16
  0112c: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc880],0x26        # 0xfffdd9b3
  01133:    	jne    0x30f16
  01139:    	sub    rsp,0x10
  0113d:    	movq   QWORD PTR [rsp],xmm3
  01142:    	movq   QWORD PTR [rsp+0x8],xmm4
  01148:    	mov    rax,QWORD PTR [rbx]
  0114b:    	lea    rdi,[rsp-0x18]
  01150:    	mov    QWORD PTR [rdi],rax
  01153:    	mov    QWORD PTR [rbx],rdi
  01156: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0115f:    	mov    QWORD PTR [rsp-0x38],rcx
  01164:    	mov    rax,QWORD PTR [rbp-0x50]
  01168:    	mov    QWORD PTR [rsp-0x38],rax
  0116d: 00 	mov    rdi,0x1
  01174:    	mov    rax,QWORD PTR [rbp-0x58]
  01178:    	mov    QWORD PTR [rsp-0x40],rax
  0117d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01186: 09 	movabs rax,0x900000040
  01190:    	mov    QWORD PTR [rsp-0x28],rax
  01195: 00 	movabs r13,0x5600b92b2b70
  0119f:    	call   0xfffe7717
  011a4:    	lea    rdi,[rbp-0x8]
  011a8:    	mov    QWORD PTR [rbx],rdi
  011ab:    	movq   xmm3,QWORD PTR [rsp]
  011b0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011b6:    	add    rsp,0x10
  011ba: 00 	movabs r13,0x5600b92ce530
  011c4:    	test   rax,rax
  011c7:    	je     0xfffdae8b
  011cd:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  011d1:    	sub    rsp,0x10
  011d5:    	movq   QWORD PTR [rsp],xmm3
  011da:    	movq   QWORD PTR [rsp+0x8],xmm4
  011e0:    	mov    rdx,QWORD PTR [rbp-0x30]
  011e4:    	mov    rcx,QWORD PTR [rbp-0x40]
  011e8:    	mov    r8,QWORD PTR [rbp-0x48]
  011ec:    	mov    rdi,rbx
  011ef:    	mov    rsi,r12
  011f2: 00 	movabs rax,0x5600b75c5370
  011fc:    	call   rax
  011fe:    	movq   xmm3,QWORD PTR [rsp]
  01203:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01209:    	add    rsp,0x10
  0120d: 00 	movabs r13,0x5600b92ce550
  01217:    	test   rax,rax
  0121a:    	je     0xfffdae8b
:00097 %3 = 0: i32
  01220: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  01228: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  01230:    	sub    rsp,0x10
  01234:    	movq   QWORD PTR [rsp],xmm3
  01239:    	movq   QWORD PTR [rsp+0x8],xmm4
  0123f:    	mov    rdx,QWORD PTR [rbp-0x30]
  01243:    	mov    rcx,QWORD PTR [rbp-0x50]
  01247:    	mov    rdi,rbx
  0124a:    	mov    rsi,r12
  0124d: 00 	movabs r8,0x5600b92ce578
  01257: 00 	movabs rax,0x5600b75c5240
  01261:    	call   rax
  01263:    	movq   xmm3,QWORD PTR [rsp]
  01268:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0126e:    	add    rsp,0x10
  01272: 00 	movabs r13,0x5600b92ce580
  0127c:    	test   rax,rax
  0127f:    	je     0xfffdae8b
  01285:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01289:    	mov    rdi,QWORD PTR [rbp-0x50]
  0128d: 00 	test   rdi,0x7
  01294:    	jne    0x30f25
  0129a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0129e:    	jne    0x30f25
  012a4: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc708],0x26        # 0xfffdd9b3
  012ab:    	jne    0x30f25
  012b1:    	sub    rsp,0x10
  012b5:    	movq   QWORD PTR [rsp],xmm3
  012ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  012c0:    	mov    rax,QWORD PTR [rbx]
  012c3:    	lea    rdi,[rsp-0x18]
  012c8:    	mov    QWORD PTR [rdi],rax
  012cb:    	mov    QWORD PTR [rbx],rdi
  012ce: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012d7:    	mov    QWORD PTR [rsp-0x38],rcx
  012dc:    	mov    rax,QWORD PTR [rbp-0x50]
  012e0:    	mov    QWORD PTR [rsp-0x38],rax
  012e5: 00 	mov    rdi,0x0
  012ec: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012f5: 07 	movabs rax,0x1000700000043
  012ff:    	mov    QWORD PTR [rsp-0x28],rax
  01304: 00 	movabs r13,0x5600b92c5690
  0130e:    	call   0xfffde2da
  01313:    	lea    rdi,[rbp-0x8]
  01317:    	mov    QWORD PTR [rbx],rdi
  0131a:    	movq   xmm3,QWORD PTR [rsp]
  0131f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01325:    	add    rsp,0x10
  01329: 00 	movabs r13,0x5600b92ce5a0
  01333:    	test   rax,rax
  01336:    	je     0xfffdae8b
  0133c:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  01340:    	sub    rsp,0x10
  01344:    	movq   QWORD PTR [rsp],xmm3
  01349:    	movq   QWORD PTR [rsp+0x8],xmm4
  0134f:    	mov    rdx,QWORD PTR [rbp-0x30]
  01353:    	mov    rcx,QWORD PTR [rbp-0x40]
  01357:    	mov    r8,QWORD PTR [rbp-0x48]
  0135b:    	mov    rdi,rbx
  0135e:    	mov    rsi,r12
  01361: 00 	movabs rax,0x5600b75c5370
  0136b:    	call   rax
  0136d:    	movq   xmm3,QWORD PTR [rsp]
  01372:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01378:    	add    rsp,0x10
  0137c: 00 	movabs r13,0x5600b92ce5c0
  01386:    	test   rax,rax
  01389:    	je     0xfffdae8b
:00104 %3 = 1: i32
  0138f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01397: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  0139f:    	sub    rsp,0x10
  013a3:    	movq   QWORD PTR [rsp],xmm3
  013a8:    	movq   QWORD PTR [rsp+0x8],xmm4
  013ae:    	mov    rdx,QWORD PTR [rbp-0x30]
  013b2:    	mov    rcx,QWORD PTR [rbp-0x50]
  013b6:    	mov    rdi,rbx
  013b9:    	mov    rsi,r12
  013bc: 00 	movabs r8,0x5600b92ce5e8
  013c6: 00 	movabs rax,0x5600b75c5240
  013d0:    	call   rax
  013d2:    	movq   xmm3,QWORD PTR [rsp]
  013d7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013dd:    	add    rsp,0x10
  013e1: 00 	movabs r13,0x5600b92ce5f0
  013eb:    	test   rax,rax
  013ee:    	je     0xfffdae8b
  013f4:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  013f8: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01400:    	sub    rsp,0x10
  01404:    	movq   QWORD PTR [rsp],xmm3
  01409:    	movq   QWORD PTR [rsp+0x8],xmm4
  0140f:    	mov    rdx,QWORD PTR [rbp-0x30]
  01413:    	mov    rcx,QWORD PTR [rbp-0x58]
  01417:    	mov    rdi,rbx
  0141a:    	mov    rsi,r12
  0141d: 00 	movabs r8,0x5600b92ce608
  01427: 00 	movabs rax,0x5600b75c5240
  01431:    	call   rax
  01433:    	movq   xmm3,QWORD PTR [rsp]
  01438:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0143e:    	add    rsp,0x10
  01442: 00 	movabs r13,0x5600b92ce610
  0144c:    	test   rax,rax
  0144f:    	je     0xfffdae8b
  01455:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01459:    	mov    rdi,QWORD PTR [rbp-0x50]
  0145d: 00 	test   rdi,0x7
  01464:    	jne    0x30f34
  0146a:    	cmp    DWORD PTR [rdi+0x4],0x28
  0146e:    	jne    0x30f34
  01474: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc538],0x26        # 0xfffdd9b3
  0147b:    	jne    0x30f34
  01481:    	sub    rsp,0x10
  01485:    	movq   QWORD PTR [rsp],xmm3
  0148a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01490:    	mov    rax,QWORD PTR [rbx]
  01493:    	lea    rdi,[rsp-0x18]
  01498:    	mov    QWORD PTR [rdi],rax
  0149b:    	mov    QWORD PTR [rbx],rdi
  0149e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014a7:    	mov    QWORD PTR [rsp-0x38],rcx
  014ac:    	mov    rax,QWORD PTR [rbp-0x50]
  014b0:    	mov    QWORD PTR [rsp-0x38],rax
  014b5: 00 	mov    rdi,0x1
  014bc:    	mov    rax,QWORD PTR [rbp-0x58]
  014c0:    	mov    QWORD PTR [rsp-0x40],rax
  014c5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014ce: 09 	movabs rax,0x900000040
  014d8:    	mov    QWORD PTR [rsp-0x28],rax
  014dd: 00 	movabs r13,0x5600b92b2b70
  014e7:    	call   0xfffe7717
  014ec:    	lea    rdi,[rbp-0x8]
  014f0:    	mov    QWORD PTR [rbx],rdi
  014f3:    	movq   xmm3,QWORD PTR [rsp]
  014f8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014fe:    	add    rsp,0x10
  01502: 00 	movabs r13,0x5600b92ce630
  0150c:    	test   rax,rax
  0150f:    	je     0xfffdae8b
  01515:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01519:    	sub    rsp,0x10
  0151d:    	movq   QWORD PTR [rsp],xmm3
  01522:    	movq   QWORD PTR [rsp+0x8],xmm4
  01528:    	mov    rdx,QWORD PTR [rbp-0x30]
  0152c:    	mov    rcx,QWORD PTR [rbp-0x40]
  01530:    	mov    r8,QWORD PTR [rbp-0x48]
  01534:    	mov    rdi,rbx
  01537:    	mov    rsi,r12
  0153a: 00 	movabs rax,0x5600b75c5370
  01544:    	call   rax
  01546:    	movq   xmm3,QWORD PTR [rsp]
  0154b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01551:    	add    rsp,0x10
  01555: 00 	movabs r13,0x5600b92ce650
  0155f:    	test   rax,rax
  01562:    	je     0xfffdae8b
:00113 %3 = 1: i32
  01568: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01570: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01578:    	sub    rsp,0x10
  0157c:    	movq   QWORD PTR [rsp],xmm3
  01581:    	movq   QWORD PTR [rsp+0x8],xmm4
  01587:    	mov    rdx,QWORD PTR [rbp-0x30]
  0158b:    	mov    rcx,QWORD PTR [rbp-0x50]
  0158f:    	mov    rdi,rbx
  01592:    	mov    rsi,r12
  01595: 00 	movabs r8,0x5600b92ce678
  0159f: 00 	movabs rax,0x5600b75c5240
  015a9:    	call   rax
  015ab:    	movq   xmm3,QWORD PTR [rsp]
  015b0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015b6:    	add    rsp,0x10
  015ba: 00 	movabs r13,0x5600b92ce680
  015c4:    	test   rax,rax
  015c7:    	je     0xfffdae8b
  015cd:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  015d1:    	mov    rdi,QWORD PTR [rbp-0x50]
  015d5: 00 	test   rdi,0x7
  015dc:    	jne    0x30f43
  015e2:    	cmp    DWORD PTR [rdi+0x4],0x28
  015e6:    	jne    0x30f43
  015ec: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc3c0],0x26        # 0xfffdd9b3
  015f3:    	jne    0x30f43
  015f9:    	sub    rsp,0x10
  015fd:    	movq   QWORD PTR [rsp],xmm3
  01602:    	movq   QWORD PTR [rsp+0x8],xmm4
  01608:    	mov    rax,QWORD PTR [rbx]
  0160b:    	lea    rdi,[rsp-0x18]
  01610:    	mov    QWORD PTR [rdi],rax
  01613:    	mov    QWORD PTR [rbx],rdi
  01616: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0161f:    	mov    QWORD PTR [rsp-0x38],rcx
  01624:    	mov    rax,QWORD PTR [rbp-0x50]
  01628:    	mov    QWORD PTR [rsp-0x38],rax
  0162d: 00 	mov    rdi,0x0
  01634: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0163d: 07 	movabs rax,0x1000700000043
  01647:    	mov    QWORD PTR [rsp-0x28],rax
  0164c: 00 	movabs r13,0x5600b92c5690
  01656:    	call   0xfffde2da
  0165b:    	lea    rdi,[rbp-0x8]
  0165f:    	mov    QWORD PTR [rbx],rdi
  01662:    	movq   xmm3,QWORD PTR [rsp]
  01667:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0166d:    	add    rsp,0x10
  01671: 00 	movabs r13,0x5600b92ce6a0
  0167b:    	test   rax,rax
  0167e:    	je     0xfffdae8b
  01684:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01688:    	sub    rsp,0x10
  0168c:    	movq   QWORD PTR [rsp],xmm3
  01691:    	movq   QWORD PTR [rsp+0x8],xmm4
  01697:    	mov    rdx,QWORD PTR [rbp-0x30]
  0169b:    	mov    rcx,QWORD PTR [rbp-0x40]
  0169f:    	mov    r8,QWORD PTR [rbp-0x48]
  016a3:    	mov    rdi,rbx
  016a6:    	mov    rsi,r12
  016a9: 00 	movabs rax,0x5600b75c5370
  016b3:    	call   rax
  016b5:    	movq   xmm3,QWORD PTR [rsp]
  016ba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016c0:    	add    rsp,0x10
  016c4: 00 	movabs r13,0x5600b92ce6c0
  016ce:    	test   rax,rax
  016d1:    	je     0xfffdae8b
:00120 %3 = %4
  016d7:    	mov    rax,QWORD PTR [rbp-0x48]
  016db:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  016df:    	mov    rax,QWORD PTR [rbp-0x40]
  016e3:    	leave  
  016e4:    	ret    
:00088 %3 = 0: i32
  016e5: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  016ed: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  016f5:    	sub    rsp,0x20
  016f9:    	movq   QWORD PTR [rsp],xmm2
  016fe:    	movq   QWORD PTR [rsp+0x8],xmm3
  01704:    	movq   QWORD PTR [rsp+0x10],xmm4
  0170a:    	movq   QWORD PTR [rsp+0x18],xmm5
  01710:    	mov    rdx,QWORD PTR [rbp-0x30]
  01714:    	mov    rcx,QWORD PTR [rbp-0x50]
  01718:    	mov    rdi,rbx
  0171b:    	mov    rsi,r12
  0171e: 00 	movabs r8,0x5600b92ce4e8
  01728: 00 	movabs rax,0x5600b75c5240
  01732:    	call   rax
  01734:    	movq   xmm2,QWORD PTR [rsp]
  01739:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0173f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01745:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0174b:    	add    rsp,0x20
  0174f: 00 	movabs r13,0x5600b92ce4f0
  01759:    	test   rax,rax
  0175c:    	je     0xfffdae8b
  01762:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  01766: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  0176e:    	sub    rsp,0x20
  01772:    	movq   QWORD PTR [rsp],xmm3
  01777:    	movq   QWORD PTR [rsp+0x8],xmm4
  0177d:    	movq   QWORD PTR [rsp+0x10],xmm5
  01783:    	mov    rdx,QWORD PTR [rbp-0x30]
  01787:    	mov    rcx,QWORD PTR [rbp-0x58]
  0178b:    	mov    rdi,rbx
  0178e:    	mov    rsi,r12
  01791: 00 	movabs r8,0x5600b92ce508
  0179b: 00 	movabs rax,0x5600b75c5240
  017a5:    	call   rax
  017a7:    	movq   xmm3,QWORD PTR [rsp]
  017ac:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017b2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017b8:    	add    rsp,0x20
  017bc: 00 	movabs r13,0x5600b92ce510
  017c6:    	test   rax,rax
  017c9:    	je     0xfffdae8b
  017cf:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  017d3:    	mov    rdi,QWORD PTR [rbp-0x50]
  017d7: 00 	test   rdi,0x7
  017de:    	jne    0x30f9d
  017e4:    	cmp    DWORD PTR [rdi+0x4],0x28
  017e8:    	jne    0x30f9d
  017ee: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc1be],0x26        # 0xfffdd9b3
  017f5:    	jne    0x30f9d
  017fb:    	sub    rsp,0x10
  017ff:    	movq   QWORD PTR [rsp],xmm3
  01804:    	movq   QWORD PTR [rsp+0x8],xmm4
  0180a:    	mov    rax,QWORD PTR [rbx]
  0180d:    	lea    rdi,[rsp-0x18]
  01812:    	mov    QWORD PTR [rdi],rax
  01815:    	mov    QWORD PTR [rbx],rdi
  01818: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01821:    	mov    QWORD PTR [rsp-0x38],rcx
  01826:    	mov    rax,QWORD PTR [rbp-0x50]
  0182a:    	mov    QWORD PTR [rsp-0x38],rax
  0182f: 00 	mov    rdi,0x1
  01836:    	mov    rax,QWORD PTR [rbp-0x58]
  0183a:    	mov    QWORD PTR [rsp-0x40],rax
  0183f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01848: 09 	movabs rax,0x900000040
  01852:    	mov    QWORD PTR [rsp-0x28],rax
  01857: 00 	movabs r13,0x5600b92b2b70
  01861:    	call   0xfffe7717
  01866:    	lea    rdi,[rbp-0x8]
  0186a:    	mov    QWORD PTR [rbx],rdi
  0186d:    	movq   xmm3,QWORD PTR [rsp]
  01872:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01878:    	add    rsp,0x10
  0187c: 00 	movabs r13,0x5600b92ce530
  01886:    	test   rax,rax
  01889:    	je     0xfffdae8b
  0188f:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  01893:    	sub    rsp,0x10
  01897:    	movq   QWORD PTR [rsp],xmm3
  0189c:    	movq   QWORD PTR [rsp+0x8],xmm4
  018a2:    	mov    rdx,QWORD PTR [rbp-0x30]
  018a6:    	mov    rcx,QWORD PTR [rbp-0x40]
  018aa:    	mov    r8,QWORD PTR [rbp-0x48]
  018ae:    	mov    rdi,rbx
  018b1:    	mov    rsi,r12
  018b4: 00 	movabs rax,0x5600b75c5370
  018be:    	call   rax
  018c0:    	movq   xmm3,QWORD PTR [rsp]
  018c5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018cb:    	add    rsp,0x10
  018cf: 00 	movabs r13,0x5600b92ce550
  018d9:    	test   rax,rax
  018dc:    	je     0xfffdae8b
:00097 %3 = 0: i32
  018e2: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  018ea: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  018f2:    	sub    rsp,0x10
  018f6:    	movq   QWORD PTR [rsp],xmm3
  018fb:    	movq   QWORD PTR [rsp+0x8],xmm4
  01901:    	mov    rdx,QWORD PTR [rbp-0x30]
  01905:    	mov    rcx,QWORD PTR [rbp-0x50]
  01909:    	mov    rdi,rbx
  0190c:    	mov    rsi,r12
  0190f: 00 	movabs r8,0x5600b92ce578
  01919: 00 	movabs rax,0x5600b75c5240
  01923:    	call   rax
  01925:    	movq   xmm3,QWORD PTR [rsp]
  0192a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01930:    	add    rsp,0x10
  01934: 00 	movabs r13,0x5600b92ce580
  0193e:    	test   rax,rax
  01941:    	je     0xfffdae8b
  01947:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  0194b:    	mov    rdi,QWORD PTR [rbp-0x50]
  0194f: 00 	test   rdi,0x7
  01956:    	jne    0x30fac
  0195c:    	cmp    DWORD PTR [rdi+0x4],0x28
  01960:    	jne    0x30fac
  01966: 26 	cmp    DWORD PTR [rip+0xfffffffffffdc046],0x26        # 0xfffdd9b3
  0196d:    	jne    0x30fac
  01973:    	sub    rsp,0x10
  01977:    	movq   QWORD PTR [rsp],xmm3
  0197c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01982:    	mov    rax,QWORD PTR [rbx]
  01985:    	lea    rdi,[rsp-0x18]
  0198a:    	mov    QWORD PTR [rdi],rax
  0198d:    	mov    QWORD PTR [rbx],rdi
  01990: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01999:    	mov    QWORD PTR [rsp-0x38],rcx
  0199e:    	mov    rax,QWORD PTR [rbp-0x50]
  019a2:    	mov    QWORD PTR [rsp-0x38],rax
  019a7: 00 	mov    rdi,0x0
  019ae: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019b7: 07 	movabs rax,0x1000700000043
  019c1:    	mov    QWORD PTR [rsp-0x28],rax
  019c6: 00 	movabs r13,0x5600b92c5690
  019d0:    	call   0xfffde2da
  019d5:    	lea    rdi,[rbp-0x8]
  019d9:    	mov    QWORD PTR [rbx],rdi
  019dc:    	movq   xmm3,QWORD PTR [rsp]
  019e1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019e7:    	add    rsp,0x10
  019eb: 00 	movabs r13,0x5600b92ce5a0
  019f5:    	test   rax,rax
  019f8:    	je     0xfffdae8b
  019fe:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  01a02:    	sub    rsp,0x10
  01a06:    	movq   QWORD PTR [rsp],xmm3
  01a0b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a11:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a15:    	mov    rcx,QWORD PTR [rbp-0x40]
  01a19:    	mov    r8,QWORD PTR [rbp-0x48]
  01a1d:    	mov    rdi,rbx
  01a20:    	mov    rsi,r12
  01a23: 00 	movabs rax,0x5600b75c5370
  01a2d:    	call   rax
  01a2f:    	movq   xmm3,QWORD PTR [rsp]
  01a34:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a3a:    	add    rsp,0x10
  01a3e: 00 	movabs r13,0x5600b92ce5c0
  01a48:    	test   rax,rax
  01a4b:    	je     0xfffdae8b
:00104 %3 = 1: i32
  01a51: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01a59: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01a61:    	sub    rsp,0x10
  01a65:    	movq   QWORD PTR [rsp],xmm3
  01a6a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a70:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a74:    	mov    rcx,QWORD PTR [rbp-0x50]
  01a78:    	mov    rdi,rbx
  01a7b:    	mov    rsi,r12
  01a7e: 00 	movabs r8,0x5600b92ce5e8
  01a88: 00 	movabs rax,0x5600b75c5240
  01a92:    	call   rax
  01a94:    	movq   xmm3,QWORD PTR [rsp]
  01a99:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a9f:    	add    rsp,0x10
  01aa3: 00 	movabs r13,0x5600b92ce5f0
  01aad:    	test   rax,rax
  01ab0:    	je     0xfffdae8b
  01ab6:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  01aba: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01ac2:    	sub    rsp,0x10
  01ac6:    	movq   QWORD PTR [rsp],xmm3
  01acb:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ad1:    	mov    rdx,QWORD PTR [rbp-0x30]
  01ad5:    	mov    rcx,QWORD PTR [rbp-0x58]
  01ad9:    	mov    rdi,rbx
  01adc:    	mov    rsi,r12
  01adf: 00 	movabs r8,0x5600b92ce608
  01ae9: 00 	movabs rax,0x5600b75c5240
  01af3:    	call   rax
  01af5:    	movq   xmm3,QWORD PTR [rsp]
  01afa:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b00:    	add    rsp,0x10
  01b04: 00 	movabs r13,0x5600b92ce610
  01b0e:    	test   rax,rax
  01b11:    	je     0xfffdae8b
  01b17:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01b1b:    	mov    rdi,QWORD PTR [rbp-0x50]
  01b1f: 00 	test   rdi,0x7
  01b26:    	jne    0x30fbb
  01b2c:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b30:    	jne    0x30fbb
  01b36: 26 	cmp    DWORD PTR [rip+0xfffffffffffdbe76],0x26        # 0xfffdd9b3
  01b3d:    	jne    0x30fbb
  01b43:    	sub    rsp,0x10
  01b47:    	movq   QWORD PTR [rsp],xmm3
  01b4c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b52:    	mov    rax,QWORD PTR [rbx]
  01b55:    	lea    rdi,[rsp-0x18]
  01b5a:    	mov    QWORD PTR [rdi],rax
  01b5d:    	mov    QWORD PTR [rbx],rdi
  01b60: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b69:    	mov    QWORD PTR [rsp-0x38],rcx
  01b6e:    	mov    rax,QWORD PTR [rbp-0x50]
  01b72:    	mov    QWORD PTR [rsp-0x38],rax
  01b77: 00 	mov    rdi,0x1
  01b7e:    	mov    rax,QWORD PTR [rbp-0x58]
  01b82:    	mov    QWORD PTR [rsp-0x40],rax
  01b87: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b90: 09 	movabs rax,0x900000040
  01b9a:    	mov    QWORD PTR [rsp-0x28],rax
  01b9f: 00 	movabs r13,0x5600b92b2b70
  01ba9:    	call   0xfffe7717
  01bae:    	lea    rdi,[rbp-0x8]
  01bb2:    	mov    QWORD PTR [rbx],rdi
  01bb5:    	movq   xmm3,QWORD PTR [rsp]
  01bba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bc0:    	add    rsp,0x10
  01bc4: 00 	movabs r13,0x5600b92ce630
  01bce:    	test   rax,rax
  01bd1:    	je     0xfffdae8b
  01bd7:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01bdb:    	sub    rsp,0x10
  01bdf:    	movq   QWORD PTR [rsp],xmm3
  01be4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bea:    	mov    rdx,QWORD PTR [rbp-0x30]
  01bee:    	mov    rcx,QWORD PTR [rbp-0x40]
  01bf2:    	mov    r8,QWORD PTR [rbp-0x48]
  01bf6:    	mov    rdi,rbx
  01bf9:    	mov    rsi,r12
  01bfc: 00 	movabs rax,0x5600b75c5370
  01c06:    	call   rax
  01c08:    	movq   xmm3,QWORD PTR [rsp]
  01c0d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c13:    	add    rsp,0x10
  01c17: 00 	movabs r13,0x5600b92ce650
  01c21:    	test   rax,rax
  01c24:    	je     0xfffdae8b
:00113 %3 = 1: i32
  01c2a: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01c32: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01c3a:    	sub    rsp,0x10
  01c3e:    	movq   QWORD PTR [rsp],xmm3
  01c43:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c49:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c4d:    	mov    rcx,QWORD PTR [rbp-0x50]
  01c51:    	mov    rdi,rbx
  01c54:    	mov    rsi,r12
  01c57: 00 	movabs r8,0x5600b92ce678
  01c61: 00 	movabs rax,0x5600b75c5240
  01c6b:    	call   rax
  01c6d:    	movq   xmm3,QWORD PTR [rsp]
  01c72:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c78:    	add    rsp,0x10
  01c7c: 00 	movabs r13,0x5600b92ce680
  01c86:    	test   rax,rax
  01c89:    	je     0xfffdae8b
  01c8f:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01c93:    	mov    rdi,QWORD PTR [rbp-0x50]
  01c97: 00 	test   rdi,0x7
  01c9e:    	jne    0x30fca
  01ca4:    	cmp    DWORD PTR [rdi+0x4],0x28
  01ca8:    	jne    0x30fca
  01cae: 26 	cmp    DWORD PTR [rip+0xfffffffffffdbcfe],0x26        # 0xfffdd9b3
  01cb5:    	jne    0x30fca
  01cbb:    	sub    rsp,0x10
  01cbf:    	movq   QWORD PTR [rsp],xmm3
  01cc4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cca:    	mov    rax,QWORD PTR [rbx]
  01ccd:    	lea    rdi,[rsp-0x18]
  01cd2:    	mov    QWORD PTR [rdi],rax
  01cd5:    	mov    QWORD PTR [rbx],rdi
  01cd8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01ce1:    	mov    QWORD PTR [rsp-0x38],rcx
  01ce6:    	mov    rax,QWORD PTR [rbp-0x50]
  01cea:    	mov    QWORD PTR [rsp-0x38],rax
  01cef: 00 	mov    rdi,0x0
  01cf6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01cff: 07 	movabs rax,0x1000700000043
  01d09:    	mov    QWORD PTR [rsp-0x28],rax
  01d0e: 00 	movabs r13,0x5600b92c5690
  01d18:    	call   0xfffde2da
  01d1d:    	lea    rdi,[rbp-0x8]
  01d21:    	mov    QWORD PTR [rbx],rdi
  01d24:    	movq   xmm3,QWORD PTR [rsp]
  01d29:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d2f:    	add    rsp,0x10
  01d33: 00 	movabs r13,0x5600b92ce6a0
  01d3d:    	test   rax,rax
  01d40:    	je     0xfffdae8b
  01d46:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01d4a:    	sub    rsp,0x10
  01d4e:    	movq   QWORD PTR [rsp],xmm3
  01d53:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d59:    	mov    rdx,QWORD PTR [rbp-0x30]
  01d5d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01d61:    	mov    r8,QWORD PTR [rbp-0x48]
  01d65:    	mov    rdi,rbx
  01d68:    	mov    rsi,r12
  01d6b: 00 	movabs rax,0x5600b75c5370
  01d75:    	call   rax
  01d77:    	movq   xmm3,QWORD PTR [rsp]
  01d7c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d82:    	add    rsp,0x10
  01d86: 00 	movabs r13,0x5600b92ce6c0
  01d90:    	test   rax,rax
  01d93:    	je     0xfffdae8b
:00120 %3 = %4
  01d99:    	mov    rax,QWORD PTR [rbp-0x48]
  01d9d:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  01da1:    	mov    rax,QWORD PTR [rbp-0x40]
  01da5:    	leave  
  01da6:    	ret    
==> start whole compile: otherBasis FuncId(59) self_class:Scene start:[00000] bytecode:0x5600b92cdf40
<== finished compile. elapsed:125.7µs
offset:Pos(159956) code: 7556 bytes  data: 348 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	mov    eax,edx
  0000d:    	sub    eax,0x2
  00010:    	jge    0x32
  00016:    	neg    rdx
  00019:    	lea    rdx,[rbp+rdx*8-0x30]
  0001e: 00 	mov    QWORD PTR [rdx],0x4
  00025:    	sub    rdx,0x8
  00029:    	add    eax,0x1
  0002c:    	jne    0x1e
  00032: 00 	mov    rax,0x4
  00039:    	mov    QWORD PTR [rbp-0x40],rax
  0003d:    	mov    QWORD PTR [rbp-0x48],rax
  00041:    	mov    QWORD PTR [rbp-0x50],rax
  00045:    	mov    QWORD PTR [rbp-0x58],rax
  00049:    	mov    QWORD PTR [rbp-0x60],rax
  0004d:    	mov    QWORD PTR [rbp-0x68],rax
  00051:    	mov    rdi,QWORD PTR [rbp-0x28]
  00055: 00 	test   rdi,0x7
  0005c:    	jne    0x2f0b5
  00062:    	cmp    DWORD PTR [rdi+0x4],0x32
  00066:    	jne    0x2f0b5
:00000 init reg_num:9 arg_num:2 stack_offset:7
:00001 %3 = 2: i32
  0006c: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00002 %5 = const[Vec]                      [Vec]
  00074: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdba21]        # 0xfffdba9c
  0007b: 00 	cmp    rax,QWORD PTR [rip+0x1d1a]        # 0x1d9c
  00082:    	jne    0x2f0c4
  00088: 00 	mov    rax,QWORD PTR [rip+0x1cfd]        # 0x1d8c
  0008f:    	mov    QWORD PTR [rbp-0x50],rax
:00003 %6 = %2.call x()                     [Vec]
  00093:    	mov    rdi,QWORD PTR [rbp-0x38]
  00097: 00 	test   rdi,0x7
  0009e:    	jne    0x2f10a
  000a4:    	cmp    DWORD PTR [rdi+0x4],0x28
  000a8:    	jne    0x2f10a
  000ae: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb9da],0x26        # 0xfffdba8f
  000b5:    	jne    0x2f10a
  000bb:    	mov    esi,DWORD PTR [rip+0x1ce7]        # 0x1da8
  000c1:    	cmp    esi,0xffffffff
  000c4:    	je     0x2f119
  000ca:    	cmp    WORD PTR [rdi+0x2],0x3
  000cf:    	jne    0xe8
  000d5:    	cmp    esi,0x6
  000d8:    	jge    0xe8
  000de:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000e3:    	jmp    0xf4
  000e8: 00 	movabs rax,0x5600b755dfe0
  000f2:    	call   rax
  000f4:    	mov    QWORD PTR [rbp-0x58],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  000f8:    	mov    rdi,QWORD PTR [rbp-0x38]
  000fc: 00 	test   rdi,0x7
  00103:    	jne    0x2f142
  00109:    	cmp    DWORD PTR [rdi+0x4],0x28
  0010d:    	jne    0x2f142
  00113: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb975],0x26        # 0xfffdba8f
  0011a:    	jne    0x2f142
  00120:    	mov    esi,DWORD PTR [rip+0x1c8a]        # 0x1db0
  00126:    	cmp    esi,0xffffffff
  00129:    	je     0x2f151
  0012f:    	cmp    WORD PTR [rdi+0x2],0x3
  00134:    	jne    0x14d
  0013a:    	cmp    esi,0x6
  0013d:    	jge    0x14d
  00143:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00148:    	jmp    0x159
  0014d: 00 	movabs rax,0x5600b755dfe0
  00157:    	call   rax
  00159:    	mov    QWORD PTR [rbp-0x60],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  0015d:    	mov    rdi,QWORD PTR [rbp-0x38]
  00161: 00 	test   rdi,0x7
  00168:    	jne    0x2f17a
  0016e:    	cmp    DWORD PTR [rdi+0x4],0x28
  00172:    	jne    0x2f17a
  00178: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb910],0x26        # 0xfffdba8f
  0017f:    	jne    0x2f17a
  00185:    	mov    esi,DWORD PTR [rip+0x1c2d]        # 0x1db8
  0018b:    	cmp    esi,0xffffffff
  0018e:    	je     0x2f189
  00194:    	cmp    WORD PTR [rdi+0x2],0x3
  00199:    	jne    0x1b2
  0019f:    	cmp    esi,0x6
  001a2:    	jge    0x1b2
  001a8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ad:    	jmp    0x1be
  001b2: 00 	movabs rax,0x5600b755dfe0
  001bc:    	call   rax
  001be:    	mov    QWORD PTR [rbp-0x68],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001c2:    	mov    rdi,QWORD PTR [rbp-0x50]
  001c6: 00 	test   rdi,0x7
  001cd:    	jne    0x2f1b2
  001d3:    	cmp    DWORD PTR [rdi+0x4],0x29
  001d7:    	jne    0x2f1b2
  001dd: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb8ab],0x26        # 0xfffdba8f
  001e4:    	jne    0x2f1b2
  001ea: 00 	mov    r9,0x0
  001f1:    	mov    rdx,rdi
  001f4:    	mov    rax,QWORD PTR [rbx]
  001f7:    	lea    rdi,[rsp-0x18]
  001fc:    	mov    QWORD PTR [rdi],rax
  001ff:    	mov    QWORD PTR [rbx],rdi
  00202: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0020b:    	mov    QWORD PTR [rsp-0x38],rcx
  00210:    	lea    rcx,[rbp-0x58]
  00214: 00 	mov    r8,0x3
  0021b:    	call   0x2f1c1
  00220:    	lea    rdi,[rbp-0x8]
  00224:    	mov    QWORD PTR [rbx],rdi
  00227: 00 	movabs r13,0x5600b92ce020
  00231:    	test   rax,rax
  00234:    	je     0xfffd8f67
  0023a:    	mov    QWORD PTR [rbp-0x48],rax
:00013 
:00015 %1:.[%3:] = %4
  0023e:    	mov    rdx,QWORD PTR [rbp-0x30]
  00242:    	mov    rcx,QWORD PTR [rbp-0x40]
  00246:    	mov    r8,QWORD PTR [rbp-0x48]
  0024a:    	mov    rdi,rbx
  0024d:    	mov    rsi,r12
  00250: 00 	movabs rax,0x5600b75c5370
  0025a:    	call   rax
  0025c: 00 	movabs r13,0x5600b92ce040
  00266:    	test   rax,rax
  00269:    	je     0xfffd8f67
:00016 %3 = 1: i32
  0026f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00017 %5 = const[Vec]                      [Vec]
  00277: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffdb81e]        # 0xfffdba9c
  0027e: 00 	cmp    rax,QWORD PTR [rip+0x1b47]        # 0x1dcc
  00285:    	jne    0x2f1f3
  0028b: 00 	mov    rax,QWORD PTR [rip+0x1b2a]        # 0x1dbc
  00292:    	mov    QWORD PTR [rbp-0x50],rax
:00018 %6 = literal[0.0]
  00296: 00 	movq   xmm2,QWORD PTR [rip+0x1b3e]        # 0x1ddc
  0029e: 00 	movabs rax,0x8000000000000002
  002a8:    	mov    QWORD PTR [rbp-0x58],rax
:00019 %7 = literal[0.0]
  002ac: 00 	movq   xmm3,QWORD PTR [rip+0x1b38]        # 0x1dec
  002b4: 00 	movabs rax,0x8000000000000002
  002be:    	mov    QWORD PTR [rbp-0x60],rax
:00020 %8 = literal[0.0]
  002c2: 00 	movq   xmm4,QWORD PTR [rip+0x1b32]        # 0x1dfc
  002ca: 00 	movabs rax,0x8000000000000002
  002d4:    	mov    QWORD PTR [rbp-0x68],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002d8:    	mov    rdi,QWORD PTR [rbp-0x50]
  002dc: 00 	test   rdi,0x7
  002e3:    	jne    0x2f239
  002e9:    	cmp    DWORD PTR [rdi+0x4],0x29
  002ed:    	jne    0x2f239
  002f3: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb795],0x26        # 0xfffdba8f
  002fa:    	jne    0x2f239
  00300: 00 	mov    r9,0x0
  00307:    	sub    rsp,0x20
  0030b:    	movq   QWORD PTR [rsp],xmm2
  00310:    	movq   QWORD PTR [rsp+0x8],xmm3
  00316:    	movq   QWORD PTR [rsp+0x10],xmm4
  0031c:    	mov    rdx,rdi
  0031f:    	mov    rax,QWORD PTR [rbx]
  00322:    	lea    rdi,[rsp-0x18]
  00327:    	mov    QWORD PTR [rdi],rax
  0032a:    	mov    QWORD PTR [rbx],rdi
  0032d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00336:    	mov    QWORD PTR [rsp-0x38],rcx
  0033b:    	lea    rcx,[rbp-0x58]
  0033f: 00 	mov    r8,0x3
  00346:    	call   0x2f248
  0034b:    	lea    rdi,[rbp-0x8]
  0034f:    	mov    QWORD PTR [rbx],rdi
  00352:    	movq   xmm2,QWORD PTR [rsp]
  00357:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0035d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00363:    	add    rsp,0x20
  00367: 00 	movabs r13,0x5600b92ce0b0
  00371:    	test   rax,rax
  00374:    	je     0xfffd8f67
  0037a:    	mov    QWORD PTR [rbp-0x48],rax
:00022 
:00024 %1:.[%3:] = %4
  0037e:    	sub    rsp,0x20
  00382:    	movq   QWORD PTR [rsp],xmm2
  00387:    	movq   QWORD PTR [rsp+0x8],xmm3
  0038d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00393:    	mov    rdx,QWORD PTR [rbp-0x30]
  00397:    	mov    rcx,QWORD PTR [rbp-0x40]
  0039b:    	mov    r8,QWORD PTR [rbp-0x48]
  0039f:    	mov    rdi,rbx
  003a2:    	mov    rsi,r12
  003a5: 00 	movabs rax,0x5600b75c5370
  003af:    	call   rax
  003b1:    	movq   xmm2,QWORD PTR [rsp]
  003b6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003bc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003c2:    	add    rsp,0x20
  003c6: 00 	movabs r13,0x5600b92ce0d0
  003d0:    	test   rax,rax
  003d3:    	je     0xfffd8f67
:00025 %3 = %2.call x()                     [Vec]
  003d9:    	mov    rdi,QWORD PTR [rbp-0x38]
  003dd: 00 	test   rdi,0x7
  003e4:    	jne    0x2f27a
  003ea:    	cmp    DWORD PTR [rdi+0x4],0x28
  003ee:    	jne    0x2f27a
  003f4: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb694],0x26        # 0xfffdba8f
  003fb:    	jne    0x2f27a
  00401:    	mov    esi,DWORD PTR [rip+0x1a01]        # 0x1e08
  00407:    	cmp    esi,0xffffffff
  0040a:    	je     0x2f289
  00410:    	cmp    WORD PTR [rdi+0x2],0x3
  00415:    	jne    0x42e
  0041b:    	cmp    esi,0x6
  0041e:    	jge    0x42e
  00424:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00429:    	jmp    0x464
  0042e:    	sub    rsp,0x20
  00432:    	movq   QWORD PTR [rsp],xmm2
  00437:    	movq   QWORD PTR [rsp+0x8],xmm3
  0043d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00443: 00 	movabs rax,0x5600b755dfe0
  0044d:    	call   rax
  0044f:    	movq   xmm2,QWORD PTR [rsp]
  00454:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0045a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00460:    	add    rsp,0x20
  00464:    	mov    QWORD PTR [rbp-0x40],rax
:00026 
:00028 %4 = literal[0.6]
  00468: 00 	movq   xmm5,QWORD PTR [rip+0x199c]        # 0x1e0c
  00470: 99 	movabs rax,0xff1999999999999a
  0047a:    	mov    QWORD PTR [rbp-0x48],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  0047e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00482: 00 	test   rdi,0x1
  00489:    	jne    0x2f2dc
  0048f: 00 	test   rdi,0x2
  00496:    	je     0x4d2
  0049c:    	xorps  xmm6,xmm6
  0049f: 00 	movabs rax,0x8000000000000002
  004a9:    	cmp    rdi,rax
  004ac:    	je     0x4e4
  004b2:    	mov    rax,rdi
  004b5:    	sar    rax,0x3f
  004b9:    	add    rax,0x2
  004bd:    	and    rdi,0xfffffffffffffffc
  004c1:    	or     rdi,rax
  004c4:    	rol    rdi,0x3d
  004c8:    	movq   xmm6,rdi
  004cd:    	jmp    0x4e4
  004d2:    	call   0xfffd8fa0
  004d7:    	test   rax,rax
  004da:    	je     0x2f2dc
  004e0:    	movq   xmm6,xmm0
  004e4:    	ucomisd xmm6,xmm5
  004e8:    	jae    0x2f3dd
:00031 %3 = %2.call x()                     [Vec]
  004ee:    	mov    rdi,QWORD PTR [rbp-0x38]
  004f2: 00 	test   rdi,0x7
  004f9:    	jne    0x2f2eb
  004ff:    	cmp    DWORD PTR [rdi+0x4],0x28
  00503:    	jne    0x2f2eb
  00509: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb57f],0x26        # 0xfffdba8f
  00510:    	jne    0x2f2eb
  00516:    	mov    esi,DWORD PTR [rip+0x18fc]        # 0x1e18
  0051c:    	cmp    esi,0xffffffff
  0051f:    	je     0x2f2fa
  00525:    	cmp    WORD PTR [rdi+0x2],0x3
  0052a:    	jne    0x543
  00530:    	cmp    esi,0x6
  00533:    	jge    0x543
  00539:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0053e:    	jmp    0x585
  00543:    	sub    rsp,0x20
  00547:    	movq   QWORD PTR [rsp],xmm2
  0054c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00552:    	movq   QWORD PTR [rsp+0x10],xmm4
  00558:    	movq   QWORD PTR [rsp+0x18],xmm5
  0055e: 00 	movabs rax,0x5600b755dfe0
  00568:    	call   rax
  0056a:    	movq   xmm2,QWORD PTR [rsp]
  0056f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00575:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0057b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00581:    	add    rsp,0x20
  00585:    	mov    QWORD PTR [rbp-0x40],rax
:00032 
:00034 %4 = literal[-0.6]
  00589: 00 	movq   xmm5,QWORD PTR [rip+0x188b]        # 0x1e1c
  00591: 99 	movabs rax,0xff1999999999999e
  0059b:    	mov    QWORD PTR [rbp-0x48],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  0059f:    	mov    rdi,QWORD PTR [rbp-0x40]
  005a3: 00 	test   rdi,0x1
  005aa:    	jne    0x2f359
  005b0: 00 	test   rdi,0x2
  005b7:    	je     0x5f3
  005bd:    	xorps  xmm6,xmm6
  005c0: 00 	movabs rax,0x8000000000000002
  005ca:    	cmp    rdi,rax
  005cd:    	je     0x605
  005d3:    	mov    rax,rdi
  005d6:    	sar    rax,0x3f
  005da:    	add    rax,0x2
  005de:    	and    rdi,0xfffffffffffffffc
  005e2:    	or     rdi,rax
  005e5:    	rol    rdi,0x3d
  005e9:    	movq   xmm6,rdi
  005ee:    	jmp    0x605
  005f3:    	call   0xfffd8fa0
  005f8:    	test   rax,rax
  005fb:    	je     0x2f359
  00601:    	movq   xmm6,xmm0
  00605:    	ucomisd xmm6,xmm5
  00609:    	jbe    0x2f3f6
:00037 %3 = 1: i32
  0060f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  00617:    	sub    rsp,0x20
  0061b:    	movq   QWORD PTR [rsp],xmm2
  00620:    	movq   QWORD PTR [rsp+0x8],xmm3
  00626:    	movq   QWORD PTR [rsp+0x10],xmm4
  0062c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00632:    	mov    rdx,QWORD PTR [rbp-0x30]
  00636:    	mov    rcx,QWORD PTR [rbp-0x40]
  0063a:    	mov    rdi,rbx
  0063d:    	mov    rsi,r12
  00640: 00 	movabs r8,0x5600b92ce1a8
  0064a: 00 	movabs rax,0x5600b75c5240
  00654:    	call   rax
  00656:    	movq   xmm2,QWORD PTR [rsp]
  0065b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00661:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00667:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0066d:    	add    rsp,0x20
  00671: 00 	movabs r13,0x5600b92ce1b0
  0067b:    	test   rax,rax
  0067e:    	je     0xfffd8f67
  00684:    	mov    QWORD PTR [rbp-0x40],rax
:00039 %4 = literal[1.0]
  00688: 00 	movq   xmm5,QWORD PTR [rip+0x179c]        # 0x1e2c
  00690: 00 	movabs rax,0xff80000000000002
  0069a:    	mov    QWORD PTR [rbp-0x48],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  0069e:    	mov    rdi,QWORD PTR [rbp-0x40]
  006a2: 00 	test   rdi,0x7
  006a9:    	jne    0x2f368
  006af:    	cmp    DWORD PTR [rdi+0x4],0x28
  006b3:    	jne    0x2f368
  006b9: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb3cf],0x26        # 0xfffdba8f
  006c0:    	jne    0x2f368
  006c6:    	mov    esi,DWORD PTR [rip+0x176c]        # 0x1e38
  006cc:    	cmp    esi,0xffffffff
  006cf:    	je     0x2f377
  006d5:    	cmp    WORD PTR [rdi+0x2],0x3
  006da:    	jne    0x6f7
  006e0:    	cmp    esi,0x6
  006e3:    	jge    0x6f7
  006e9:    	mov    rax,QWORD PTR [rbp-0x48]
  006ed:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006f2:    	jmp    0x750
  006f7:    	sub    rsp,0x20
  006fb:    	movq   QWORD PTR [rsp],xmm2
  00700:    	movq   QWORD PTR [rsp+0x8],xmm3
  00706:    	movq   QWORD PTR [rsp+0x10],xmm4
  0070c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00712:    	mov    rdx,QWORD PTR [rbp-0x48]
  00716: 00 	movabs rax,0x5600b755e260
  00720:    	call   rax
  00722:    	movq   xmm2,QWORD PTR [rsp]
  00727:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0072d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00733:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00739:    	add    rsp,0x20
  0073d: 00 	movabs r13,0x5600b92ce1e0
  00747:    	test   rax,rax
  0074a:    	je     0xfffd8f67
:00041 
:00043 br =>:00088
  00750:    	jmp    0x2f8f4
:00044 %3 = %2.call y()                     [Vec]
  00755:    	mov    rdi,QWORD PTR [rbp-0x38]
  00759: 00 	test   rdi,0x7
  00760:    	jne    0x2f40f
  00766:    	cmp    DWORD PTR [rdi+0x4],0x28
  0076a:    	jne    0x2f40f
  00770: 26 	cmp    DWORD PTR [rip+0xfffffffffffdb318],0x26        # 0xfffdba8f
  00777:    	jne    0x2f40f
  0077d:    	mov    esi,DWORD PTR [rip+0x16bd]        # 0x1e40
  00783:    	cmp    esi,0xffffffff
  00786:    	je     0x2f41e
  0078c:    	cmp    WORD PTR [rdi+0x2],0x3
  00791:    	jne    0x7aa
  00797:    	cmp    esi,0x6
  0079a:    	jge    0x7aa
  007a0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007a5:    	jmp    0x7ec
  007aa:    	sub    rsp,0x20
  007ae:    	movq   QWORD PTR [rsp],xmm2
  007b3:    	movq   QWORD PTR [rsp+0x8],xmm3
  007b9:    	movq   QWORD PTR [rsp+0x10],xmm4
  007bf:    	movq   QWORD PTR [rsp+0x18],xmm5
  007c5: 00 	movabs rax,0x5600b755dfe0
  007cf:    	call   rax
  007d1:    	movq   xmm2,QWORD PTR [rsp]
  007d6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007dc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007e2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  007e8:    	add    rsp,0x20
  007ec:    	mov    QWORD PTR [rbp-0x40],rax
:00045 
:00047 %4 = literal[0.6]
  007f0: 00 	movq   xmm5,QWORD PTR [rip+0x1654]        # 0x1e4c
  007f8: 99 	movabs rax,0xff1999999999999a
  00802:    	mov    QWORD PTR [rbp-0x48],rax
:00048 _%3 = %3 < %4                        [Float][Float]
:00049 condnotbr _%3 =>:00063
  00806:    	mov    rdi,QWORD PTR [rbp-0x40]
  0080a: 00 	test   rdi,0x1
  00811:    	jne    0x2f47d
  00817: 00 	test   rdi,0x2
  0081e:    	je     0x85a
  00824:    	xorps  xmm6,xmm6
  00827: 00 	movabs rax,0x8000000000000002
  00831:    	cmp    rdi,rax
  00834:    	je     0x86c
  0083a:    	mov    rax,rdi
  0083d:    	sar    rax,0x3f
  00841:    	add    rax,0x2
  00845:    	and    rdi,0xfffffffffffffffc
  00849:    	or     rdi,rax
  0084c:    	rol    rdi,0x3d
  00850:    	movq   xmm6,rdi
  00855:    	jmp    0x86c
  0085a:    	call   0xfffd8fa0
  0085f:    	test   rax,rax
  00862:    	je     0x2f47d
  00868:    	movq   xmm6,xmm0
  0086c:    	ucomisd xmm6,xmm5
  00870:    	jae    0x2f639
:00050 %3 = %2.call y()                     [<INVALID>]
  00876: 01 	sub    DWORD PTR [rip+0x15d7],0x1        # 0x1e54
  0087d:    	je     0x2f49b
  00883:    	sub    rsp,0x20
  00887:    	movq   QWORD PTR [rsp],xmm2
  0088c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00892:    	movq   QWORD PTR [rsp+0x10],xmm4
  00898:    	movq   QWORD PTR [rsp+0x18],xmm5
  0089e:    	mov    rdi,QWORD PTR [rbp-0x38]
  008a2: 00 	movabs rax,0x5600b75a2280
  008ac:    	call   rax
  008ae:    	mov    r15d,eax
  008b1: 00 	cmp    r15d,DWORD PTR [rip+0x15a4]        # 0x1e5c
  008b8:    	jne    0x2f4bd
  008be:    	mov    eax,DWORD PTR [rip+0xfffffffffffdb1cb]        # 0xfffdba8f
  008c4:    	cmp    DWORD PTR [rip+0x158e],eax        # 0x1e58
  008ca:    	jne    0x2f4bd
  008d0:    	mov    rax,QWORD PTR [rbx]
  008d3:    	lea    rdi,[rsp-0x18]
  008d8:    	mov    QWORD PTR [rdi],rax
  008db:    	mov    QWORD PTR [rbx],rdi
  008de: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008e7:    	mov    QWORD PTR [rsp-0x38],rcx
  008ec:    	mov    rax,QWORD PTR [rbp-0x38]
  008f0:    	mov    QWORD PTR [rsp-0x38],rax
  008f5: 00 	mov    rdi,0x0
  008fc: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00905: 00 	movabs rax,0x0
  0090f:    	mov    QWORD PTR [rsp-0x28],rax
  00914: 00 	movabs r13,0x0
  0091e:    	call   0xfffd8f2c
  00923:    	lea    rdi,[rbp-0x8]
  00927:    	mov    QWORD PTR [rbx],rdi
  0092a:    	movq   xmm2,QWORD PTR [rsp]
  0092f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00935:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0093b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00941:    	add    rsp,0x20
  00945:    	test   rax,rax
  00948:    	je     0x2f529
  0094e:    	mov    QWORD PTR [rbp-0x40],rax
:00051 
:00053 %4 = literal[-0.6]
  00952: 00 	movq   xmm5,QWORD PTR [rip+0x1512]        # 0x1e6c
  0095a: 99 	movabs rax,0xff1999999999999e
  00964:    	mov    QWORD PTR [rbp-0x48],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  00968:    	mov    rdi,QWORD PTR [rbp-0x40]
  0096c:    	mov    rsi,QWORD PTR [rbp-0x48]
  00970: 00 	test   rdi,0x1
  00977:    	je     0x2f538
  0097d: 00 	test   rsi,0x1
  00984:    	je     0x2f538
  0098a:    	cmp    rdi,rsi
  0098d:    	jle    0x2f652
:00056 %3 = 1: i32
  00993: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00057 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  0099b:    	sub    rsp,0x20
  0099f:    	movq   QWORD PTR [rsp],xmm2
  009a4:    	movq   QWORD PTR [rsp+0x8],xmm3
  009aa:    	movq   QWORD PTR [rsp+0x10],xmm4
  009b0:    	movq   QWORD PTR [rsp+0x18],xmm5
  009b6:    	mov    rdx,QWORD PTR [rbp-0x30]
  009ba:    	mov    rcx,QWORD PTR [rbp-0x40]
  009be:    	mov    rdi,rbx
  009c1:    	mov    rsi,r12
  009c4: 00 	movabs r8,0x5600b92ce2d8
  009ce: 00 	movabs rax,0x5600b75c5240
  009d8:    	call   rax
  009da:    	movq   xmm2,QWORD PTR [rsp]
  009df:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009eb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009f1:    	add    rsp,0x20
  009f5: 00 	movabs r13,0x5600b92ce2e0
  009ff:    	test   rax,rax
  00a02:    	je     0xfffd8f67
  00a08:    	mov    QWORD PTR [rbp-0x40],rax
:00058 %4 = literal[1.0]
  00a0c: 00 	movq   xmm5,QWORD PTR [rip+0x1468]        # 0x1e7c
  00a14: 00 	movabs rax,0xff80000000000002
  00a1e:    	mov    QWORD PTR [rbp-0x48],rax
:00059 _ = %3.call y=(%4; 1)                [<INVALID>]
  00a22: 01 	sub    DWORD PTR [rip+0x145b],0x1        # 0x1e84
  00a29:    	je     0x2f59c
  00a2f:    	sub    rsp,0x20
  00a33:    	movq   QWORD PTR [rsp],xmm2
  00a38:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a3e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a44:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a4a:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a4e: 00 	movabs rax,0x5600b75a2280
  00a58:    	call   rax
  00a5a:    	mov    r15d,eax
  00a5d: 00 	cmp    r15d,DWORD PTR [rip+0x1428]        # 0x1e8c
  00a64:    	jne    0x2f5be
  00a6a:    	mov    eax,DWORD PTR [rip+0xfffffffffffdb01f]        # 0xfffdba8f
  00a70:    	cmp    DWORD PTR [rip+0x1412],eax        # 0x1e88
  00a76:    	jne    0x2f5be
  00a7c:    	mov    rax,QWORD PTR [rbx]
  00a7f:    	lea    rdi,[rsp-0x18]
  00a84:    	mov    QWORD PTR [rdi],rax
  00a87:    	mov    QWORD PTR [rbx],rdi
  00a8a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a93:    	mov    QWORD PTR [rsp-0x38],rcx
  00a98:    	mov    rax,QWORD PTR [rbp-0x40]
  00a9c:    	mov    QWORD PTR [rsp-0x38],rax
  00aa1: 00 	mov    rdi,0x1
  00aa8:    	mov    rax,QWORD PTR [rbp-0x48]
  00aac:    	mov    QWORD PTR [rsp-0x40],rax
  00ab1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00aba: 00 	movabs rax,0x0
  00ac4:    	mov    QWORD PTR [rsp-0x28],rax
  00ac9: 00 	movabs r13,0x0
  00ad3:    	call   0xfffd8f2c
  00ad8:    	lea    rdi,[rbp-0x8]
  00adc:    	mov    QWORD PTR [rbx],rdi
  00adf:    	movq   xmm2,QWORD PTR [rsp]
  00ae4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00aea:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00af0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00af6:    	add    rsp,0x20
  00afa:    	test   rax,rax
  00afd:    	je     0x2f62a
:00060 
:00062 br =>:00088
  00b03:    	jmp    0x2f90d
:00063 %3 = %2.call z()                     [Vec]
  00b08:    	mov    rdi,QWORD PTR [rbp-0x38]
  00b0c: 00 	test   rdi,0x7
  00b13:    	jne    0x2f66b
  00b19:    	cmp    DWORD PTR [rdi+0x4],0x28
  00b1d:    	jne    0x2f66b
  00b23: 26 	cmp    DWORD PTR [rip+0xfffffffffffdaf65],0x26        # 0xfffdba8f
  00b2a:    	jne    0x2f66b
  00b30:    	mov    esi,DWORD PTR [rip+0x135e]        # 0x1e94
  00b36:    	cmp    esi,0xffffffff
  00b39:    	je     0x2f67a
  00b3f:    	cmp    WORD PTR [rdi+0x2],0x3
  00b44:    	jne    0xb5d
  00b4a:    	cmp    esi,0x6
  00b4d:    	jge    0xb5d
  00b53:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b58:    	jmp    0xb9f
  00b5d:    	sub    rsp,0x20
  00b61:    	movq   QWORD PTR [rsp],xmm2
  00b66:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b6c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b72:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b78: 00 	movabs rax,0x5600b755dfe0
  00b82:    	call   rax
  00b84:    	movq   xmm2,QWORD PTR [rsp]
  00b89:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b8f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b95:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b9b:    	add    rsp,0x20
  00b9f:    	mov    QWORD PTR [rbp-0x40],rax
:00064 
:00066 %4 = literal[0.6]
  00ba3: 00 	movq   xmm5,QWORD PTR [rip+0x12f1]        # 0x1e9c
  00bab: 99 	movabs rax,0xff1999999999999a
  00bb5:    	mov    QWORD PTR [rbp-0x48],rax
:00067 _%3 = %3 < %4                        [Float][Float]
:00068 condnotbr _%3 =>:00082
  00bb9:    	mov    rdi,QWORD PTR [rbp-0x40]
  00bbd: 00 	test   rdi,0x1
  00bc4:    	jne    0x2f6d9
  00bca: 00 	test   rdi,0x2
  00bd1:    	je     0xc0d
  00bd7:    	xorps  xmm6,xmm6
  00bda: 00 	movabs rax,0x8000000000000002
  00be4:    	cmp    rdi,rax
  00be7:    	je     0xc1f
  00bed:    	mov    rax,rdi
  00bf0:    	sar    rax,0x3f
  00bf4:    	add    rax,0x2
  00bf8:    	and    rdi,0xfffffffffffffffc
  00bfc:    	or     rdi,rax
  00bff:    	rol    rdi,0x3d
  00c03:    	movq   xmm6,rdi
  00c08:    	jmp    0xc1f
  00c0d:    	call   0xfffd8fa0
  00c12:    	test   rax,rax
  00c15:    	je     0x2f6d9
  00c1b:    	movq   xmm6,xmm0
  00c1f:    	ucomisd xmm6,xmm5
  00c23:    	jae    0x2f7da
:00069 %3 = %2.call z()                     [Vec]
  00c29:    	mov    rdi,QWORD PTR [rbp-0x38]
  00c2d: 00 	test   rdi,0x7
  00c34:    	jne    0x2f6e8
  00c3a:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c3e:    	jne    0x2f6e8
  00c44: 26 	cmp    DWORD PTR [rip+0xfffffffffffdae44],0x26        # 0xfffdba8f
  00c4b:    	jne    0x2f6e8
  00c51:    	mov    esi,DWORD PTR [rip+0x1251]        # 0x1ea8
  00c57:    	cmp    esi,0xffffffff
  00c5a:    	je     0x2f6f7
  00c60:    	cmp    WORD PTR [rdi+0x2],0x3
  00c65:    	jne    0xc7e
  00c6b:    	cmp    esi,0x6
  00c6e:    	jge    0xc7e
  00c74:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c79:    	jmp    0xcc0
  00c7e:    	sub    rsp,0x20
  00c82:    	movq   QWORD PTR [rsp],xmm2
  00c87:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c8d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c93:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c99: 00 	movabs rax,0x5600b755dfe0
  00ca3:    	call   rax
  00ca5:    	movq   xmm2,QWORD PTR [rsp]
  00caa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cb0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cb6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cbc:    	add    rsp,0x20
  00cc0:    	mov    QWORD PTR [rbp-0x40],rax
:00070 
:00072 %4 = literal[-0.6]
  00cc4: 00 	movq   xmm5,QWORD PTR [rip+0x11e0]        # 0x1eac
  00ccc: 99 	movabs rax,0xff1999999999999e
  00cd6:    	mov    QWORD PTR [rbp-0x48],rax
:00073 _%3 = %3 > %4                        [Float][Float]
:00074 condnotbr _%3 =>:00082
  00cda:    	mov    rdi,QWORD PTR [rbp-0x40]
  00cde: 00 	test   rdi,0x1
  00ce5:    	jne    0x2f756
  00ceb: 00 	test   rdi,0x2
  00cf2:    	je     0xd2e
  00cf8:    	xorps  xmm6,xmm6
  00cfb: 00 	movabs rax,0x8000000000000002
  00d05:    	cmp    rdi,rax
  00d08:    	je     0xd40
  00d0e:    	mov    rax,rdi
  00d11:    	sar    rax,0x3f
  00d15:    	add    rax,0x2
  00d19:    	and    rdi,0xfffffffffffffffc
  00d1d:    	or     rdi,rax
  00d20:    	rol    rdi,0x3d
  00d24:    	movq   xmm6,rdi
  00d29:    	jmp    0xd40
  00d2e:    	call   0xfffd8fa0
  00d33:    	test   rax,rax
  00d36:    	je     0x2f756
  00d3c:    	movq   xmm6,xmm0
  00d40:    	ucomisd xmm6,xmm5
  00d44:    	jbe    0x2f7f3
:00075 %3 = 1: i32
  00d4a: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00076 %3 = %1.[%3]                         [Array][Integer]
  00d52:    	sub    rsp,0x20
  00d56:    	movq   QWORD PTR [rsp],xmm2
  00d5b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d61:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d67:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d6d:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d71:    	mov    rcx,QWORD PTR [rbp-0x40]
  00d75:    	mov    rdi,rbx
  00d78:    	mov    rsi,r12
  00d7b: 00 	movabs r8,0x5600b92ce408
  00d85: 00 	movabs rax,0x5600b75c5240
  00d8f:    	call   rax
  00d91:    	movq   xmm2,QWORD PTR [rsp]
  00d96:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d9c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00da2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00da8:    	add    rsp,0x20
  00dac: 00 	movabs r13,0x5600b92ce410
  00db6:    	test   rax,rax
  00db9:    	je     0xfffd8f67
  00dbf:    	mov    QWORD PTR [rbp-0x40],rax
:00077 %4 = literal[1.0]
  00dc3: 00 	movq   xmm5,QWORD PTR [rip+0x10f1]        # 0x1ebc
  00dcb: 00 	movabs rax,0xff80000000000002
  00dd5:    	mov    QWORD PTR [rbp-0x48],rax
:00078 _ = %3.call z=(%4; 1)                [Vec]
  00dd9:    	mov    rdi,QWORD PTR [rbp-0x40]
  00ddd: 00 	test   rdi,0x7
  00de4:    	jne    0x2f765
  00dea:    	cmp    DWORD PTR [rdi+0x4],0x28
  00dee:    	jne    0x2f765
  00df4: 26 	cmp    DWORD PTR [rip+0xfffffffffffdac94],0x26        # 0xfffdba8f
  00dfb:    	jne    0x2f765
  00e01:    	mov    esi,DWORD PTR [rip+0x10c1]        # 0x1ec8
  00e07:    	cmp    esi,0xffffffff
  00e0a:    	je     0x2f774
  00e10:    	cmp    WORD PTR [rdi+0x2],0x3
  00e15:    	jne    0xe32
  00e1b:    	cmp    esi,0x6
  00e1e:    	jge    0xe32
  00e24:    	mov    rax,QWORD PTR [rbp-0x48]
  00e28:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00e2d:    	jmp    0xe8b
  00e32:    	sub    rsp,0x20
  00e36:    	movq   QWORD PTR [rsp],xmm2
  00e3b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e41:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e47:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e4d:    	mov    rdx,QWORD PTR [rbp-0x48]
  00e51: 00 	movabs rax,0x5600b755e260
  00e5b:    	call   rax
  00e5d:    	movq   xmm2,QWORD PTR [rsp]
  00e62:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e68:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e6e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e74:    	add    rsp,0x20
  00e78: 00 	movabs r13,0x5600b92ce440
  00e82:    	test   rax,rax
  00e85:    	je     0xfffd8f67
:00079 
:00081 br =>:00088
  00e8b:    	jmp    0x2f926
:00082 %3 = 1: i32
  00e90: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00e98:    	sub    rsp,0x20
  00e9c:    	movq   QWORD PTR [rsp],xmm2
  00ea1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ea7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ead:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eb3:    	mov    rdx,QWORD PTR [rbp-0x30]
  00eb7:    	mov    rcx,QWORD PTR [rbp-0x40]
  00ebb:    	mov    rdi,rbx
  00ebe:    	mov    rsi,r12
  00ec1: 00 	movabs r8,0x5600b92ce478
  00ecb: 00 	movabs rax,0x5600b75c5240
  00ed5:    	call   rax
  00ed7:    	movq   xmm2,QWORD PTR [rsp]
  00edc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ee2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ee8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00eee:    	add    rsp,0x20
  00ef2: 00 	movabs r13,0x5600b92ce480
  00efc:    	test   rax,rax
  00eff:    	je     0xfffd8f67
  00f05:    	mov    QWORD PTR [rbp-0x40],rax
:00084 %4 = literal[1.0]
  00f09: 00 	movq   xmm5,QWORD PTR [rip+0xfbb]        # 0x1ecc
  00f11: 00 	movabs rax,0xff80000000000002
  00f1b:    	mov    QWORD PTR [rbp-0x48],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f1f: 01 	sub    DWORD PTR [rip+0xfae],0x1        # 0x1ed4
  00f26:    	je     0x2f81b
  00f2c:    	sub    rsp,0x20
  00f30:    	movq   QWORD PTR [rsp],xmm2
  00f35:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f3b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f41:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f47:    	mov    rdi,QWORD PTR [rbp-0x40]
  00f4b: 00 	movabs rax,0x5600b75a2280
  00f55:    	call   rax
  00f57:    	mov    r15d,eax
  00f5a: 00 	cmp    r15d,DWORD PTR [rip+0xf7b]        # 0x1edc
  00f61:    	jne    0x2f83d
  00f67:    	mov    eax,DWORD PTR [rip+0xfffffffffffdab22]        # 0xfffdba8f
  00f6d:    	cmp    DWORD PTR [rip+0xf65],eax        # 0x1ed8
  00f73:    	jne    0x2f83d
  00f79:    	mov    rax,QWORD PTR [rbx]
  00f7c:    	lea    rdi,[rsp-0x18]
  00f81:    	mov    QWORD PTR [rdi],rax
  00f84:    	mov    QWORD PTR [rbx],rdi
  00f87: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f90:    	mov    QWORD PTR [rsp-0x38],rcx
  00f95:    	mov    rax,QWORD PTR [rbp-0x40]
  00f99:    	mov    QWORD PTR [rsp-0x38],rax
  00f9e: 00 	mov    rdi,0x1
  00fa5:    	mov    rax,QWORD PTR [rbp-0x48]
  00fa9:    	mov    QWORD PTR [rsp-0x40],rax
  00fae: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fb7: 00 	movabs rax,0x0
  00fc1:    	mov    QWORD PTR [rsp-0x28],rax
  00fc6: 00 	movabs r13,0x0
  00fd0:    	call   0xfffd8f2c
  00fd5:    	lea    rdi,[rbp-0x8]
  00fd9:    	mov    QWORD PTR [rbx],rdi
  00fdc:    	movq   xmm2,QWORD PTR [rsp]
  00fe1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fe7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fed:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ff3:    	add    rsp,0x20
  00ff7:    	test   rax,rax
  00ffa:    	je     0x2f8a9
:00086 
:00088 %3 = 0: i32
  01000: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  01008: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01010:    	sub    rsp,0x20
  01014:    	movq   QWORD PTR [rsp],xmm2
  01019:    	movq   QWORD PTR [rsp+0x8],xmm3
  0101f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01025:    	movq   QWORD PTR [rsp+0x18],xmm5
  0102b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0102f:    	mov    rcx,QWORD PTR [rbp-0x50]
  01033:    	mov    rdi,rbx
  01036:    	mov    rsi,r12
  01039: 00 	movabs r8,0x5600b92ce4e8
  01043: 00 	movabs rax,0x5600b75c5240
  0104d:    	call   rax
  0104f:    	movq   xmm2,QWORD PTR [rsp]
  01054:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0105a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01060:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01066:    	add    rsp,0x20
  0106a: 00 	movabs r13,0x5600b92ce4f0
  01074:    	test   rax,rax
  01077:    	je     0xfffd8f67
  0107d:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  01081: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  01089:    	sub    rsp,0x20
  0108d:    	movq   QWORD PTR [rsp],xmm3
  01092:    	movq   QWORD PTR [rsp+0x8],xmm4
  01098:    	movq   QWORD PTR [rsp+0x10],xmm5
  0109e:    	mov    rdx,QWORD PTR [rbp-0x30]
  010a2:    	mov    rcx,QWORD PTR [rbp-0x58]
  010a6:    	mov    rdi,rbx
  010a9:    	mov    rsi,r12
  010ac: 00 	movabs r8,0x5600b92ce508
  010b6: 00 	movabs rax,0x5600b75c5240
  010c0:    	call   rax
  010c2:    	movq   xmm3,QWORD PTR [rsp]
  010c7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010cd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010d3:    	add    rsp,0x20
  010d7: 00 	movabs r13,0x5600b92ce510
  010e1:    	test   rax,rax
  010e4:    	je     0xfffd8f67
  010ea:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  010ee:    	mov    rdi,QWORD PTR [rbp-0x50]
  010f2: 00 	test   rdi,0x7
  010f9:    	jne    0x2f8b8
  010ff:    	cmp    DWORD PTR [rdi+0x4],0x28
  01103:    	jne    0x2f8b8
  01109: 26 	cmp    DWORD PTR [rip+0xfffffffffffda97f],0x26        # 0xfffdba8f
  01110:    	jne    0x2f8b8
  01116:    	sub    rsp,0x10
  0111a:    	movq   QWORD PTR [rsp],xmm3
  0111f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01125:    	mov    rax,QWORD PTR [rbx]
  01128:    	lea    rdi,[rsp-0x18]
  0112d:    	mov    QWORD PTR [rdi],rax
  01130:    	mov    QWORD PTR [rbx],rdi
  01133: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0113c:    	mov    QWORD PTR [rsp-0x38],rcx
  01141:    	mov    rax,QWORD PTR [rbp-0x50]
  01145:    	mov    QWORD PTR [rsp-0x38],rax
  0114a: 00 	mov    rdi,0x1
  01151:    	mov    rax,QWORD PTR [rbp-0x58]
  01155:    	mov    QWORD PTR [rsp-0x40],rax
  0115a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01163: 09 	movabs rax,0x900000040
  0116d:    	mov    QWORD PTR [rsp-0x28],rax
  01172: 00 	movabs r13,0x5600b92b2b70
  0117c:    	call   0xfffe57f3
  01181:    	lea    rdi,[rbp-0x8]
  01185:    	mov    QWORD PTR [rbx],rdi
  01188:    	movq   xmm3,QWORD PTR [rsp]
  0118d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01193:    	add    rsp,0x10
  01197: 00 	movabs r13,0x5600b92ce530
  011a1:    	test   rax,rax
  011a4:    	je     0xfffd8f67
  011aa:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  011ae:    	sub    rsp,0x10
  011b2:    	movq   QWORD PTR [rsp],xmm3
  011b7:    	movq   QWORD PTR [rsp+0x8],xmm4
  011bd:    	mov    rdx,QWORD PTR [rbp-0x30]
  011c1:    	mov    rcx,QWORD PTR [rbp-0x40]
  011c5:    	mov    r8,QWORD PTR [rbp-0x48]
  011c9:    	mov    rdi,rbx
  011cc:    	mov    rsi,r12
  011cf: 00 	movabs rax,0x5600b75c5370
  011d9:    	call   rax
  011db:    	movq   xmm3,QWORD PTR [rsp]
  011e0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011e6:    	add    rsp,0x10
  011ea: 00 	movabs r13,0x5600b92ce550
  011f4:    	test   rax,rax
  011f7:    	je     0xfffd8f67
:00097 %3 = 0: i32
  011fd: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  01205: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  0120d:    	sub    rsp,0x10
  01211:    	movq   QWORD PTR [rsp],xmm3
  01216:    	movq   QWORD PTR [rsp+0x8],xmm4
  0121c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01220:    	mov    rcx,QWORD PTR [rbp-0x50]
  01224:    	mov    rdi,rbx
  01227:    	mov    rsi,r12
  0122a: 00 	movabs r8,0x5600b92ce578
  01234: 00 	movabs rax,0x5600b75c5240
  0123e:    	call   rax
  01240:    	movq   xmm3,QWORD PTR [rsp]
  01245:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0124b:    	add    rsp,0x10
  0124f: 00 	movabs r13,0x5600b92ce580
  01259:    	test   rax,rax
  0125c:    	je     0xfffd8f67
  01262:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01266:    	mov    rdi,QWORD PTR [rbp-0x50]
  0126a: 00 	test   rdi,0x7
  01271:    	jne    0x2f8c7
  01277:    	cmp    DWORD PTR [rdi+0x4],0x28
  0127b:    	jne    0x2f8c7
  01281: 26 	cmp    DWORD PTR [rip+0xfffffffffffda807],0x26        # 0xfffdba8f
  01288:    	jne    0x2f8c7
  0128e:    	sub    rsp,0x10
  01292:    	movq   QWORD PTR [rsp],xmm3
  01297:    	movq   QWORD PTR [rsp+0x8],xmm4
  0129d:    	mov    rax,QWORD PTR [rbx]
  012a0:    	lea    rdi,[rsp-0x18]
  012a5:    	mov    QWORD PTR [rdi],rax
  012a8:    	mov    QWORD PTR [rbx],rdi
  012ab: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012b4:    	mov    QWORD PTR [rsp-0x38],rcx
  012b9:    	mov    rax,QWORD PTR [rbp-0x50]
  012bd:    	mov    QWORD PTR [rsp-0x38],rax
  012c2: 00 	mov    rdi,0x0
  012c9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012d2: 07 	movabs rax,0x1000700000043
  012dc:    	mov    QWORD PTR [rsp-0x28],rax
  012e1: 00 	movabs r13,0x5600b92c5690
  012eb:    	call   0xfffdc3b6
  012f0:    	lea    rdi,[rbp-0x8]
  012f4:    	mov    QWORD PTR [rbx],rdi
  012f7:    	movq   xmm3,QWORD PTR [rsp]
  012fc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01302:    	add    rsp,0x10
  01306: 00 	movabs r13,0x5600b92ce5a0
  01310:    	test   rax,rax
  01313:    	je     0xfffd8f67
  01319:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  0131d:    	sub    rsp,0x10
  01321:    	movq   QWORD PTR [rsp],xmm3
  01326:    	movq   QWORD PTR [rsp+0x8],xmm4
  0132c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01330:    	mov    rcx,QWORD PTR [rbp-0x40]
  01334:    	mov    r8,QWORD PTR [rbp-0x48]
  01338:    	mov    rdi,rbx
  0133b:    	mov    rsi,r12
  0133e: 00 	movabs rax,0x5600b75c5370
  01348:    	call   rax
  0134a:    	movq   xmm3,QWORD PTR [rsp]
  0134f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01355:    	add    rsp,0x10
  01359: 00 	movabs r13,0x5600b92ce5c0
  01363:    	test   rax,rax
  01366:    	je     0xfffd8f67
:00104 %3 = 1: i32
  0136c: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01374: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  0137c:    	sub    rsp,0x10
  01380:    	movq   QWORD PTR [rsp],xmm3
  01385:    	movq   QWORD PTR [rsp+0x8],xmm4
  0138b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0138f:    	mov    rcx,QWORD PTR [rbp-0x50]
  01393:    	mov    rdi,rbx
  01396:    	mov    rsi,r12
  01399: 00 	movabs r8,0x5600b92ce5e8
  013a3: 00 	movabs rax,0x5600b75c5240
  013ad:    	call   rax
  013af:    	movq   xmm3,QWORD PTR [rsp]
  013b4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013ba:    	add    rsp,0x10
  013be: 00 	movabs r13,0x5600b92ce5f0
  013c8:    	test   rax,rax
  013cb:    	je     0xfffd8f67
  013d1:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  013d5: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  013dd:    	sub    rsp,0x10
  013e1:    	movq   QWORD PTR [rsp],xmm3
  013e6:    	movq   QWORD PTR [rsp+0x8],xmm4
  013ec:    	mov    rdx,QWORD PTR [rbp-0x30]
  013f0:    	mov    rcx,QWORD PTR [rbp-0x58]
  013f4:    	mov    rdi,rbx
  013f7:    	mov    rsi,r12
  013fa: 00 	movabs r8,0x5600b92ce608
  01404: 00 	movabs rax,0x5600b75c5240
  0140e:    	call   rax
  01410:    	movq   xmm3,QWORD PTR [rsp]
  01415:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0141b:    	add    rsp,0x10
  0141f: 00 	movabs r13,0x5600b92ce610
  01429:    	test   rax,rax
  0142c:    	je     0xfffd8f67
  01432:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01436:    	mov    rdi,QWORD PTR [rbp-0x50]
  0143a: 00 	test   rdi,0x7
  01441:    	jne    0x2f8d6
  01447:    	cmp    DWORD PTR [rdi+0x4],0x28
  0144b:    	jne    0x2f8d6
  01451: 26 	cmp    DWORD PTR [rip+0xfffffffffffda637],0x26        # 0xfffdba8f
  01458:    	jne    0x2f8d6
  0145e:    	sub    rsp,0x10
  01462:    	movq   QWORD PTR [rsp],xmm3
  01467:    	movq   QWORD PTR [rsp+0x8],xmm4
  0146d:    	mov    rax,QWORD PTR [rbx]
  01470:    	lea    rdi,[rsp-0x18]
  01475:    	mov    QWORD PTR [rdi],rax
  01478:    	mov    QWORD PTR [rbx],rdi
  0147b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01484:    	mov    QWORD PTR [rsp-0x38],rcx
  01489:    	mov    rax,QWORD PTR [rbp-0x50]
  0148d:    	mov    QWORD PTR [rsp-0x38],rax
  01492: 00 	mov    rdi,0x1
  01499:    	mov    rax,QWORD PTR [rbp-0x58]
  0149d:    	mov    QWORD PTR [rsp-0x40],rax
  014a2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014ab: 09 	movabs rax,0x900000040
  014b5:    	mov    QWORD PTR [rsp-0x28],rax
  014ba: 00 	movabs r13,0x5600b92b2b70
  014c4:    	call   0xfffe57f3
  014c9:    	lea    rdi,[rbp-0x8]
  014cd:    	mov    QWORD PTR [rbx],rdi
  014d0:    	movq   xmm3,QWORD PTR [rsp]
  014d5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014db:    	add    rsp,0x10
  014df: 00 	movabs r13,0x5600b92ce630
  014e9:    	test   rax,rax
  014ec:    	je     0xfffd8f67
  014f2:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  014f6:    	sub    rsp,0x10
  014fa:    	movq   QWORD PTR [rsp],xmm3
  014ff:    	movq   QWORD PTR [rsp+0x8],xmm4
  01505:    	mov    rdx,QWORD PTR [rbp-0x30]
  01509:    	mov    rcx,QWORD PTR [rbp-0x40]
  0150d:    	mov    r8,QWORD PTR [rbp-0x48]
  01511:    	mov    rdi,rbx
  01514:    	mov    rsi,r12
  01517: 00 	movabs rax,0x5600b75c5370
  01521:    	call   rax
  01523:    	movq   xmm3,QWORD PTR [rsp]
  01528:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0152e:    	add    rsp,0x10
  01532: 00 	movabs r13,0x5600b92ce650
  0153c:    	test   rax,rax
  0153f:    	je     0xfffd8f67
:00113 %3 = 1: i32
  01545: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  0154d: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01555:    	sub    rsp,0x10
  01559:    	movq   QWORD PTR [rsp],xmm3
  0155e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01564:    	mov    rdx,QWORD PTR [rbp-0x30]
  01568:    	mov    rcx,QWORD PTR [rbp-0x50]
  0156c:    	mov    rdi,rbx
  0156f:    	mov    rsi,r12
  01572: 00 	movabs r8,0x5600b92ce678
  0157c: 00 	movabs rax,0x5600b75c5240
  01586:    	call   rax
  01588:    	movq   xmm3,QWORD PTR [rsp]
  0158d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01593:    	add    rsp,0x10
  01597: 00 	movabs r13,0x5600b92ce680
  015a1:    	test   rax,rax
  015a4:    	je     0xfffd8f67
  015aa:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  015ae:    	mov    rdi,QWORD PTR [rbp-0x50]
  015b2: 00 	test   rdi,0x7
  015b9:    	jne    0x2f8e5
  015bf:    	cmp    DWORD PTR [rdi+0x4],0x28
  015c3:    	jne    0x2f8e5
  015c9: 26 	cmp    DWORD PTR [rip+0xfffffffffffda4bf],0x26        # 0xfffdba8f
  015d0:    	jne    0x2f8e5
  015d6:    	sub    rsp,0x10
  015da:    	movq   QWORD PTR [rsp],xmm3
  015df:    	movq   QWORD PTR [rsp+0x8],xmm4
  015e5:    	mov    rax,QWORD PTR [rbx]
  015e8:    	lea    rdi,[rsp-0x18]
  015ed:    	mov    QWORD PTR [rdi],rax
  015f0:    	mov    QWORD PTR [rbx],rdi
  015f3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015fc:    	mov    QWORD PTR [rsp-0x38],rcx
  01601:    	mov    rax,QWORD PTR [rbp-0x50]
  01605:    	mov    QWORD PTR [rsp-0x38],rax
  0160a: 00 	mov    rdi,0x0
  01611: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0161a: 07 	movabs rax,0x1000700000043
  01624:    	mov    QWORD PTR [rsp-0x28],rax
  01629: 00 	movabs r13,0x5600b92c5690
  01633:    	call   0xfffdc3b6
  01638:    	lea    rdi,[rbp-0x8]
  0163c:    	mov    QWORD PTR [rbx],rdi
  0163f:    	movq   xmm3,QWORD PTR [rsp]
  01644:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0164a:    	add    rsp,0x10
  0164e: 00 	movabs r13,0x5600b92ce6a0
  01658:    	test   rax,rax
  0165b:    	je     0xfffd8f67
  01661:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01665:    	sub    rsp,0x10
  01669:    	movq   QWORD PTR [rsp],xmm3
  0166e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01674:    	mov    rdx,QWORD PTR [rbp-0x30]
  01678:    	mov    rcx,QWORD PTR [rbp-0x40]
  0167c:    	mov    r8,QWORD PTR [rbp-0x48]
  01680:    	mov    rdi,rbx
  01683:    	mov    rsi,r12
  01686: 00 	movabs rax,0x5600b75c5370
  01690:    	call   rax
  01692:    	movq   xmm3,QWORD PTR [rsp]
  01697:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0169d:    	add    rsp,0x10
  016a1: 00 	movabs r13,0x5600b92ce6c0
  016ab:    	test   rax,rax
  016ae:    	je     0xfffd8f67
:00120 %3 = %4
  016b4:    	mov    rax,QWORD PTR [rbp-0x48]
  016b8:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  016bc:    	mov    rax,QWORD PTR [rbp-0x40]
  016c0:    	leave  
  016c1:    	ret    
:00088 %3 = 0: i32
  016c2: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  016ca: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  016d2:    	sub    rsp,0x20
  016d6:    	movq   QWORD PTR [rsp],xmm2
  016db:    	movq   QWORD PTR [rsp+0x8],xmm3
  016e1:    	movq   QWORD PTR [rsp+0x10],xmm4
  016e7:    	movq   QWORD PTR [rsp+0x18],xmm5
  016ed:    	mov    rdx,QWORD PTR [rbp-0x30]
  016f1:    	mov    rcx,QWORD PTR [rbp-0x50]
  016f5:    	mov    rdi,rbx
  016f8:    	mov    rsi,r12
  016fb: 00 	movabs r8,0x5600b92ce4e8
  01705: 00 	movabs rax,0x5600b75c5240
  0170f:    	call   rax
  01711:    	movq   xmm2,QWORD PTR [rsp]
  01716:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0171c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01722:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01728:    	add    rsp,0x20
  0172c: 00 	movabs r13,0x5600b92ce4f0
  01736:    	test   rax,rax
  01739:    	je     0xfffd8f67
  0173f:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  01743: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  0174b:    	sub    rsp,0x20
  0174f:    	movq   QWORD PTR [rsp],xmm3
  01754:    	movq   QWORD PTR [rsp+0x8],xmm4
  0175a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01760:    	mov    rdx,QWORD PTR [rbp-0x30]
  01764:    	mov    rcx,QWORD PTR [rbp-0x58]
  01768:    	mov    rdi,rbx
  0176b:    	mov    rsi,r12
  0176e: 00 	movabs r8,0x5600b92ce508
  01778: 00 	movabs rax,0x5600b75c5240
  01782:    	call   rax
  01784:    	movq   xmm3,QWORD PTR [rsp]
  01789:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0178f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01795:    	add    rsp,0x20
  01799: 00 	movabs r13,0x5600b92ce510
  017a3:    	test   rax,rax
  017a6:    	je     0xfffd8f67
  017ac:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  017b0:    	mov    rdi,QWORD PTR [rbp-0x50]
  017b4: 00 	test   rdi,0x7
  017bb:    	jne    0x2f93f
  017c1:    	cmp    DWORD PTR [rdi+0x4],0x28
  017c5:    	jne    0x2f93f
  017cb: 26 	cmp    DWORD PTR [rip+0xfffffffffffda2bd],0x26        # 0xfffdba8f
  017d2:    	jne    0x2f93f
  017d8:    	sub    rsp,0x10
  017dc:    	movq   QWORD PTR [rsp],xmm3
  017e1:    	movq   QWORD PTR [rsp+0x8],xmm4
  017e7:    	mov    rax,QWORD PTR [rbx]
  017ea:    	lea    rdi,[rsp-0x18]
  017ef:    	mov    QWORD PTR [rdi],rax
  017f2:    	mov    QWORD PTR [rbx],rdi
  017f5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017fe:    	mov    QWORD PTR [rsp-0x38],rcx
  01803:    	mov    rax,QWORD PTR [rbp-0x50]
  01807:    	mov    QWORD PTR [rsp-0x38],rax
  0180c: 00 	mov    rdi,0x1
  01813:    	mov    rax,QWORD PTR [rbp-0x58]
  01817:    	mov    QWORD PTR [rsp-0x40],rax
  0181c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01825: 09 	movabs rax,0x900000040
  0182f:    	mov    QWORD PTR [rsp-0x28],rax
  01834: 00 	movabs r13,0x5600b92b2b70
  0183e:    	call   0xfffe57f3
  01843:    	lea    rdi,[rbp-0x8]
  01847:    	mov    QWORD PTR [rbx],rdi
  0184a:    	movq   xmm3,QWORD PTR [rsp]
  0184f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01855:    	add    rsp,0x10
  01859: 00 	movabs r13,0x5600b92ce530
  01863:    	test   rax,rax
  01866:    	je     0xfffd8f67
  0186c:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  01870:    	sub    rsp,0x10
  01874:    	movq   QWORD PTR [rsp],xmm3
  01879:    	movq   QWORD PTR [rsp+0x8],xmm4
  0187f:    	mov    rdx,QWORD PTR [rbp-0x30]
  01883:    	mov    rcx,QWORD PTR [rbp-0x40]
  01887:    	mov    r8,QWORD PTR [rbp-0x48]
  0188b:    	mov    rdi,rbx
  0188e:    	mov    rsi,r12
  01891: 00 	movabs rax,0x5600b75c5370
  0189b:    	call   rax
  0189d:    	movq   xmm3,QWORD PTR [rsp]
  018a2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018a8:    	add    rsp,0x10
  018ac: 00 	movabs r13,0x5600b92ce550
  018b6:    	test   rax,rax
  018b9:    	je     0xfffd8f67
:00097 %3 = 0: i32
  018bf: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  018c7: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  018cf:    	sub    rsp,0x10
  018d3:    	movq   QWORD PTR [rsp],xmm3
  018d8:    	movq   QWORD PTR [rsp+0x8],xmm4
  018de:    	mov    rdx,QWORD PTR [rbp-0x30]
  018e2:    	mov    rcx,QWORD PTR [rbp-0x50]
  018e6:    	mov    rdi,rbx
  018e9:    	mov    rsi,r12
  018ec: 00 	movabs r8,0x5600b92ce578
  018f6: 00 	movabs rax,0x5600b75c5240
  01900:    	call   rax
  01902:    	movq   xmm3,QWORD PTR [rsp]
  01907:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0190d:    	add    rsp,0x10
  01911: 00 	movabs r13,0x5600b92ce580
  0191b:    	test   rax,rax
  0191e:    	je     0xfffd8f67
  01924:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01928:    	mov    rdi,QWORD PTR [rbp-0x50]
  0192c: 00 	test   rdi,0x7
  01933:    	jne    0x2f94e
  01939:    	cmp    DWORD PTR [rdi+0x4],0x28
  0193d:    	jne    0x2f94e
  01943: 26 	cmp    DWORD PTR [rip+0xfffffffffffda145],0x26        # 0xfffdba8f
  0194a:    	jne    0x2f94e
  01950:    	sub    rsp,0x10
  01954:    	movq   QWORD PTR [rsp],xmm3
  01959:    	movq   QWORD PTR [rsp+0x8],xmm4
  0195f:    	mov    rax,QWORD PTR [rbx]
  01962:    	lea    rdi,[rsp-0x18]
  01967:    	mov    QWORD PTR [rdi],rax
  0196a:    	mov    QWORD PTR [rbx],rdi
  0196d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01976:    	mov    QWORD PTR [rsp-0x38],rcx
  0197b:    	mov    rax,QWORD PTR [rbp-0x50]
  0197f:    	mov    QWORD PTR [rsp-0x38],rax
  01984: 00 	mov    rdi,0x0
  0198b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01994: 07 	movabs rax,0x1000700000043
  0199e:    	mov    QWORD PTR [rsp-0x28],rax
  019a3: 00 	movabs r13,0x5600b92c5690
  019ad:    	call   0xfffdc3b6
  019b2:    	lea    rdi,[rbp-0x8]
  019b6:    	mov    QWORD PTR [rbx],rdi
  019b9:    	movq   xmm3,QWORD PTR [rsp]
  019be:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019c4:    	add    rsp,0x10
  019c8: 00 	movabs r13,0x5600b92ce5a0
  019d2:    	test   rax,rax
  019d5:    	je     0xfffd8f67
  019db:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  019df:    	sub    rsp,0x10
  019e3:    	movq   QWORD PTR [rsp],xmm3
  019e8:    	movq   QWORD PTR [rsp+0x8],xmm4
  019ee:    	mov    rdx,QWORD PTR [rbp-0x30]
  019f2:    	mov    rcx,QWORD PTR [rbp-0x40]
  019f6:    	mov    r8,QWORD PTR [rbp-0x48]
  019fa:    	mov    rdi,rbx
  019fd:    	mov    rsi,r12
  01a00: 00 	movabs rax,0x5600b75c5370
  01a0a:    	call   rax
  01a0c:    	movq   xmm3,QWORD PTR [rsp]
  01a11:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a17:    	add    rsp,0x10
  01a1b: 00 	movabs r13,0x5600b92ce5c0
  01a25:    	test   rax,rax
  01a28:    	je     0xfffd8f67
:00104 %3 = 1: i32
  01a2e: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01a36: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01a3e:    	sub    rsp,0x10
  01a42:    	movq   QWORD PTR [rsp],xmm3
  01a47:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a4d:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a51:    	mov    rcx,QWORD PTR [rbp-0x50]
  01a55:    	mov    rdi,rbx
  01a58:    	mov    rsi,r12
  01a5b: 00 	movabs r8,0x5600b92ce5e8
  01a65: 00 	movabs rax,0x5600b75c5240
  01a6f:    	call   rax
  01a71:    	movq   xmm3,QWORD PTR [rsp]
  01a76:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a7c:    	add    rsp,0x10
  01a80: 00 	movabs r13,0x5600b92ce5f0
  01a8a:    	test   rax,rax
  01a8d:    	je     0xfffd8f67
  01a93:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  01a97: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01a9f:    	sub    rsp,0x10
  01aa3:    	movq   QWORD PTR [rsp],xmm3
  01aa8:    	movq   QWORD PTR [rsp+0x8],xmm4
  01aae:    	mov    rdx,QWORD PTR [rbp-0x30]
  01ab2:    	mov    rcx,QWORD PTR [rbp-0x58]
  01ab6:    	mov    rdi,rbx
  01ab9:    	mov    rsi,r12
  01abc: 00 	movabs r8,0x5600b92ce608
  01ac6: 00 	movabs rax,0x5600b75c5240
  01ad0:    	call   rax
  01ad2:    	movq   xmm3,QWORD PTR [rsp]
  01ad7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01add:    	add    rsp,0x10
  01ae1: 00 	movabs r13,0x5600b92ce610
  01aeb:    	test   rax,rax
  01aee:    	je     0xfffd8f67
  01af4:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01af8:    	mov    rdi,QWORD PTR [rbp-0x50]
  01afc: 00 	test   rdi,0x7
  01b03:    	jne    0x2f95d
  01b09:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b0d:    	jne    0x2f95d
  01b13: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9f75],0x26        # 0xfffdba8f
  01b1a:    	jne    0x2f95d
  01b20:    	sub    rsp,0x10
  01b24:    	movq   QWORD PTR [rsp],xmm3
  01b29:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b2f:    	mov    rax,QWORD PTR [rbx]
  01b32:    	lea    rdi,[rsp-0x18]
  01b37:    	mov    QWORD PTR [rdi],rax
  01b3a:    	mov    QWORD PTR [rbx],rdi
  01b3d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b46:    	mov    QWORD PTR [rsp-0x38],rcx
  01b4b:    	mov    rax,QWORD PTR [rbp-0x50]
  01b4f:    	mov    QWORD PTR [rsp-0x38],rax
  01b54: 00 	mov    rdi,0x1
  01b5b:    	mov    rax,QWORD PTR [rbp-0x58]
  01b5f:    	mov    QWORD PTR [rsp-0x40],rax
  01b64: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b6d: 09 	movabs rax,0x900000040
  01b77:    	mov    QWORD PTR [rsp-0x28],rax
  01b7c: 00 	movabs r13,0x5600b92b2b70
  01b86:    	call   0xfffe57f3
  01b8b:    	lea    rdi,[rbp-0x8]
  01b8f:    	mov    QWORD PTR [rbx],rdi
  01b92:    	movq   xmm3,QWORD PTR [rsp]
  01b97:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b9d:    	add    rsp,0x10
  01ba1: 00 	movabs r13,0x5600b92ce630
  01bab:    	test   rax,rax
  01bae:    	je     0xfffd8f67
  01bb4:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01bb8:    	sub    rsp,0x10
  01bbc:    	movq   QWORD PTR [rsp],xmm3
  01bc1:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bc7:    	mov    rdx,QWORD PTR [rbp-0x30]
  01bcb:    	mov    rcx,QWORD PTR [rbp-0x40]
  01bcf:    	mov    r8,QWORD PTR [rbp-0x48]
  01bd3:    	mov    rdi,rbx
  01bd6:    	mov    rsi,r12
  01bd9: 00 	movabs rax,0x5600b75c5370
  01be3:    	call   rax
  01be5:    	movq   xmm3,QWORD PTR [rsp]
  01bea:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bf0:    	add    rsp,0x10
  01bf4: 00 	movabs r13,0x5600b92ce650
  01bfe:    	test   rax,rax
  01c01:    	je     0xfffd8f67
:00113 %3 = 1: i32
  01c07: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01c0f: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01c17:    	sub    rsp,0x10
  01c1b:    	movq   QWORD PTR [rsp],xmm3
  01c20:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c26:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c2a:    	mov    rcx,QWORD PTR [rbp-0x50]
  01c2e:    	mov    rdi,rbx
  01c31:    	mov    rsi,r12
  01c34: 00 	movabs r8,0x5600b92ce678
  01c3e: 00 	movabs rax,0x5600b75c5240
  01c48:    	call   rax
  01c4a:    	movq   xmm3,QWORD PTR [rsp]
  01c4f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c55:    	add    rsp,0x10
  01c59: 00 	movabs r13,0x5600b92ce680
  01c63:    	test   rax,rax
  01c66:    	je     0xfffd8f67
  01c6c:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01c70:    	mov    rdi,QWORD PTR [rbp-0x50]
  01c74: 00 	test   rdi,0x7
  01c7b:    	jne    0x2f96c
  01c81:    	cmp    DWORD PTR [rdi+0x4],0x28
  01c85:    	jne    0x2f96c
  01c8b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9dfd],0x26        # 0xfffdba8f
  01c92:    	jne    0x2f96c
  01c98:    	sub    rsp,0x10
  01c9c:    	movq   QWORD PTR [rsp],xmm3
  01ca1:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ca7:    	mov    rax,QWORD PTR [rbx]
  01caa:    	lea    rdi,[rsp-0x18]
  01caf:    	mov    QWORD PTR [rdi],rax
  01cb2:    	mov    QWORD PTR [rbx],rdi
  01cb5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01cbe:    	mov    QWORD PTR [rsp-0x38],rcx
  01cc3:    	mov    rax,QWORD PTR [rbp-0x50]
  01cc7:    	mov    QWORD PTR [rsp-0x38],rax
  01ccc: 00 	mov    rdi,0x0
  01cd3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01cdc: 07 	movabs rax,0x1000700000043
  01ce6:    	mov    QWORD PTR [rsp-0x28],rax
  01ceb: 00 	movabs r13,0x5600b92c5690
  01cf5:    	call   0xfffdc3b6
  01cfa:    	lea    rdi,[rbp-0x8]
  01cfe:    	mov    QWORD PTR [rbx],rdi
  01d01:    	movq   xmm3,QWORD PTR [rsp]
  01d06:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d0c:    	add    rsp,0x10
  01d10: 00 	movabs r13,0x5600b92ce6a0
  01d1a:    	test   rax,rax
  01d1d:    	je     0xfffd8f67
  01d23:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01d27:    	sub    rsp,0x10
  01d2b:    	movq   QWORD PTR [rsp],xmm3
  01d30:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d36:    	mov    rdx,QWORD PTR [rbp-0x30]
  01d3a:    	mov    rcx,QWORD PTR [rbp-0x40]
  01d3e:    	mov    r8,QWORD PTR [rbp-0x48]
  01d42:    	mov    rdi,rbx
  01d45:    	mov    rsi,r12
  01d48: 00 	movabs rax,0x5600b75c5370
  01d52:    	call   rax
  01d54:    	movq   xmm3,QWORD PTR [rsp]
  01d59:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d5f:    	add    rsp,0x10
  01d63: 00 	movabs r13,0x5600b92ce6c0
  01d6d:    	test   rax,rax
  01d70:    	je     0xfffd8f67
:00120 %3 = %4
  01d76:    	mov    rax,QWORD PTR [rbp-0x48]
  01d7a:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  01d7e:    	mov    rax,QWORD PTR [rbp-0x40]
  01d82:    	leave  
  01d83:    	ret    
==> start whole compile: otherBasis FuncId(59) self_class:Scene start:[00000] bytecode:0x5600b92cdf40
<== finished compile. elapsed:136.3µs
offset:Pos(167860) code: 7556 bytes  data: 348 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	mov    eax,edx
  0000d:    	sub    eax,0x2
  00010:    	jge    0x32
  00016:    	neg    rdx
  00019:    	lea    rdx,[rbp+rdx*8-0x30]
  0001e: 00 	mov    QWORD PTR [rdx],0x4
  00025:    	sub    rdx,0x8
  00029:    	add    eax,0x1
  0002c:    	jne    0x1e
  00032: 00 	mov    rax,0x4
  00039:    	mov    QWORD PTR [rbp-0x40],rax
  0003d:    	mov    QWORD PTR [rbp-0x48],rax
  00041:    	mov    QWORD PTR [rbp-0x50],rax
  00045:    	mov    QWORD PTR [rbp-0x58],rax
  00049:    	mov    QWORD PTR [rbp-0x60],rax
  0004d:    	mov    QWORD PTR [rbp-0x68],rax
  00051:    	mov    rdi,QWORD PTR [rbp-0x28]
  00055: 00 	test   rdi,0x7
  0005c:    	jne    0x2da9b
  00062:    	cmp    DWORD PTR [rdi+0x4],0x32
  00066:    	jne    0x2da9b
:00000 init reg_num:9 arg_num:2 stack_offset:7
:00001 %3 = 2: i32
  0006c: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00002 %5 = const[Vec]                      [Vec]
  00074: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd9b41]        # 0xfffd9bbc
  0007b: 00 	cmp    rax,QWORD PTR [rip+0x1d1a]        # 0x1d9c
  00082:    	jne    0x2daaa
  00088: 00 	mov    rax,QWORD PTR [rip+0x1cfd]        # 0x1d8c
  0008f:    	mov    QWORD PTR [rbp-0x50],rax
:00003 %6 = %2.call x()                     [Vec]
  00093:    	mov    rdi,QWORD PTR [rbp-0x38]
  00097: 00 	test   rdi,0x7
  0009e:    	jne    0x2daf0
  000a4:    	cmp    DWORD PTR [rdi+0x4],0x28
  000a8:    	jne    0x2daf0
  000ae: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9afa],0x26        # 0xfffd9baf
  000b5:    	jne    0x2daf0
  000bb:    	mov    esi,DWORD PTR [rip+0x1ce7]        # 0x1da8
  000c1:    	cmp    esi,0xffffffff
  000c4:    	je     0x2daff
  000ca:    	cmp    WORD PTR [rdi+0x2],0x3
  000cf:    	jne    0xe8
  000d5:    	cmp    esi,0x6
  000d8:    	jge    0xe8
  000de:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000e3:    	jmp    0xf4
  000e8: 00 	movabs rax,0x5600b755dfe0
  000f2:    	call   rax
  000f4:    	mov    QWORD PTR [rbp-0x58],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  000f8:    	mov    rdi,QWORD PTR [rbp-0x38]
  000fc: 00 	test   rdi,0x7
  00103:    	jne    0x2db28
  00109:    	cmp    DWORD PTR [rdi+0x4],0x28
  0010d:    	jne    0x2db28
  00113: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9a95],0x26        # 0xfffd9baf
  0011a:    	jne    0x2db28
  00120:    	mov    esi,DWORD PTR [rip+0x1c8a]        # 0x1db0
  00126:    	cmp    esi,0xffffffff
  00129:    	je     0x2db37
  0012f:    	cmp    WORD PTR [rdi+0x2],0x3
  00134:    	jne    0x14d
  0013a:    	cmp    esi,0x6
  0013d:    	jge    0x14d
  00143:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00148:    	jmp    0x159
  0014d: 00 	movabs rax,0x5600b755dfe0
  00157:    	call   rax
  00159:    	mov    QWORD PTR [rbp-0x60],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  0015d:    	mov    rdi,QWORD PTR [rbp-0x38]
  00161: 00 	test   rdi,0x7
  00168:    	jne    0x2db60
  0016e:    	cmp    DWORD PTR [rdi+0x4],0x28
  00172:    	jne    0x2db60
  00178: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9a30],0x26        # 0xfffd9baf
  0017f:    	jne    0x2db60
  00185:    	mov    esi,DWORD PTR [rip+0x1c2d]        # 0x1db8
  0018b:    	cmp    esi,0xffffffff
  0018e:    	je     0x2db6f
  00194:    	cmp    WORD PTR [rdi+0x2],0x3
  00199:    	jne    0x1b2
  0019f:    	cmp    esi,0x6
  001a2:    	jge    0x1b2
  001a8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ad:    	jmp    0x1be
  001b2: 00 	movabs rax,0x5600b755dfe0
  001bc:    	call   rax
  001be:    	mov    QWORD PTR [rbp-0x68],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001c2:    	mov    rdi,QWORD PTR [rbp-0x50]
  001c6: 00 	test   rdi,0x7
  001cd:    	jne    0x2db98
  001d3:    	cmp    DWORD PTR [rdi+0x4],0x29
  001d7:    	jne    0x2db98
  001dd: 26 	cmp    DWORD PTR [rip+0xfffffffffffd99cb],0x26        # 0xfffd9baf
  001e4:    	jne    0x2db98
  001ea: 00 	mov    r9,0x0
  001f1:    	mov    rdx,rdi
  001f4:    	mov    rax,QWORD PTR [rbx]
  001f7:    	lea    rdi,[rsp-0x18]
  001fc:    	mov    QWORD PTR [rdi],rax
  001ff:    	mov    QWORD PTR [rbx],rdi
  00202: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0020b:    	mov    QWORD PTR [rsp-0x38],rcx
  00210:    	lea    rcx,[rbp-0x58]
  00214: 00 	mov    r8,0x3
  0021b:    	call   0x2dba7
  00220:    	lea    rdi,[rbp-0x8]
  00224:    	mov    QWORD PTR [rbx],rdi
  00227: 00 	movabs r13,0x5600b92ce020
  00231:    	test   rax,rax
  00234:    	je     0xfffd7087
  0023a:    	mov    QWORD PTR [rbp-0x48],rax
:00013 
:00015 %1:.[%3:] = %4
  0023e:    	mov    rdx,QWORD PTR [rbp-0x30]
  00242:    	mov    rcx,QWORD PTR [rbp-0x40]
  00246:    	mov    r8,QWORD PTR [rbp-0x48]
  0024a:    	mov    rdi,rbx
  0024d:    	mov    rsi,r12
  00250: 00 	movabs rax,0x5600b75c5370
  0025a:    	call   rax
  0025c: 00 	movabs r13,0x5600b92ce040
  00266:    	test   rax,rax
  00269:    	je     0xfffd7087
:00016 %3 = 1: i32
  0026f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00017 %5 = const[Vec]                      [Vec]
  00277: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd993e]        # 0xfffd9bbc
  0027e: 00 	cmp    rax,QWORD PTR [rip+0x1b47]        # 0x1dcc
  00285:    	jne    0x2dbd9
  0028b: 00 	mov    rax,QWORD PTR [rip+0x1b2a]        # 0x1dbc
  00292:    	mov    QWORD PTR [rbp-0x50],rax
:00018 %6 = literal[0.0]
  00296: 00 	movq   xmm2,QWORD PTR [rip+0x1b3e]        # 0x1ddc
  0029e: 00 	movabs rax,0x8000000000000002
  002a8:    	mov    QWORD PTR [rbp-0x58],rax
:00019 %7 = literal[0.0]
  002ac: 00 	movq   xmm3,QWORD PTR [rip+0x1b38]        # 0x1dec
  002b4: 00 	movabs rax,0x8000000000000002
  002be:    	mov    QWORD PTR [rbp-0x60],rax
:00020 %8 = literal[0.0]
  002c2: 00 	movq   xmm4,QWORD PTR [rip+0x1b32]        # 0x1dfc
  002ca: 00 	movabs rax,0x8000000000000002
  002d4:    	mov    QWORD PTR [rbp-0x68],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002d8:    	mov    rdi,QWORD PTR [rbp-0x50]
  002dc: 00 	test   rdi,0x7
  002e3:    	jne    0x2dc1f
  002e9:    	cmp    DWORD PTR [rdi+0x4],0x29
  002ed:    	jne    0x2dc1f
  002f3: 26 	cmp    DWORD PTR [rip+0xfffffffffffd98b5],0x26        # 0xfffd9baf
  002fa:    	jne    0x2dc1f
  00300: 00 	mov    r9,0x0
  00307:    	sub    rsp,0x20
  0030b:    	movq   QWORD PTR [rsp],xmm2
  00310:    	movq   QWORD PTR [rsp+0x8],xmm3
  00316:    	movq   QWORD PTR [rsp+0x10],xmm4
  0031c:    	mov    rdx,rdi
  0031f:    	mov    rax,QWORD PTR [rbx]
  00322:    	lea    rdi,[rsp-0x18]
  00327:    	mov    QWORD PTR [rdi],rax
  0032a:    	mov    QWORD PTR [rbx],rdi
  0032d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00336:    	mov    QWORD PTR [rsp-0x38],rcx
  0033b:    	lea    rcx,[rbp-0x58]
  0033f: 00 	mov    r8,0x3
  00346:    	call   0x2dc2e
  0034b:    	lea    rdi,[rbp-0x8]
  0034f:    	mov    QWORD PTR [rbx],rdi
  00352:    	movq   xmm2,QWORD PTR [rsp]
  00357:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0035d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00363:    	add    rsp,0x20
  00367: 00 	movabs r13,0x5600b92ce0b0
  00371:    	test   rax,rax
  00374:    	je     0xfffd7087
  0037a:    	mov    QWORD PTR [rbp-0x48],rax
:00022 
:00024 %1:.[%3:] = %4
  0037e:    	sub    rsp,0x20
  00382:    	movq   QWORD PTR [rsp],xmm2
  00387:    	movq   QWORD PTR [rsp+0x8],xmm3
  0038d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00393:    	mov    rdx,QWORD PTR [rbp-0x30]
  00397:    	mov    rcx,QWORD PTR [rbp-0x40]
  0039b:    	mov    r8,QWORD PTR [rbp-0x48]
  0039f:    	mov    rdi,rbx
  003a2:    	mov    rsi,r12
  003a5: 00 	movabs rax,0x5600b75c5370
  003af:    	call   rax
  003b1:    	movq   xmm2,QWORD PTR [rsp]
  003b6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003bc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003c2:    	add    rsp,0x20
  003c6: 00 	movabs r13,0x5600b92ce0d0
  003d0:    	test   rax,rax
  003d3:    	je     0xfffd7087
:00025 %3 = %2.call x()                     [Vec]
  003d9:    	mov    rdi,QWORD PTR [rbp-0x38]
  003dd: 00 	test   rdi,0x7
  003e4:    	jne    0x2dc60
  003ea:    	cmp    DWORD PTR [rdi+0x4],0x28
  003ee:    	jne    0x2dc60
  003f4: 26 	cmp    DWORD PTR [rip+0xfffffffffffd97b4],0x26        # 0xfffd9baf
  003fb:    	jne    0x2dc60
  00401:    	mov    esi,DWORD PTR [rip+0x1a01]        # 0x1e08
  00407:    	cmp    esi,0xffffffff
  0040a:    	je     0x2dc6f
  00410:    	cmp    WORD PTR [rdi+0x2],0x3
  00415:    	jne    0x42e
  0041b:    	cmp    esi,0x6
  0041e:    	jge    0x42e
  00424:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00429:    	jmp    0x464
  0042e:    	sub    rsp,0x20
  00432:    	movq   QWORD PTR [rsp],xmm2
  00437:    	movq   QWORD PTR [rsp+0x8],xmm3
  0043d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00443: 00 	movabs rax,0x5600b755dfe0
  0044d:    	call   rax
  0044f:    	movq   xmm2,QWORD PTR [rsp]
  00454:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0045a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00460:    	add    rsp,0x20
  00464:    	mov    QWORD PTR [rbp-0x40],rax
:00026 
:00028 %4 = literal[0.6]
  00468: 00 	movq   xmm5,QWORD PTR [rip+0x199c]        # 0x1e0c
  00470: 99 	movabs rax,0xff1999999999999a
  0047a:    	mov    QWORD PTR [rbp-0x48],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  0047e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00482: 00 	test   rdi,0x1
  00489:    	jne    0x2dcc2
  0048f: 00 	test   rdi,0x2
  00496:    	je     0x4d2
  0049c:    	xorps  xmm6,xmm6
  0049f: 00 	movabs rax,0x8000000000000002
  004a9:    	cmp    rdi,rax
  004ac:    	je     0x4e4
  004b2:    	mov    rax,rdi
  004b5:    	sar    rax,0x3f
  004b9:    	add    rax,0x2
  004bd:    	and    rdi,0xfffffffffffffffc
  004c1:    	or     rdi,rax
  004c4:    	rol    rdi,0x3d
  004c8:    	movq   xmm6,rdi
  004cd:    	jmp    0x4e4
  004d2:    	call   0xfffd70c0
  004d7:    	test   rax,rax
  004da:    	je     0x2dcc2
  004e0:    	movq   xmm6,xmm0
  004e4:    	ucomisd xmm6,xmm5
  004e8:    	jae    0x2ddc3
:00031 %3 = %2.call x()                     [Vec]
  004ee:    	mov    rdi,QWORD PTR [rbp-0x38]
  004f2: 00 	test   rdi,0x7
  004f9:    	jne    0x2dcd1
  004ff:    	cmp    DWORD PTR [rdi+0x4],0x28
  00503:    	jne    0x2dcd1
  00509: 26 	cmp    DWORD PTR [rip+0xfffffffffffd969f],0x26        # 0xfffd9baf
  00510:    	jne    0x2dcd1
  00516:    	mov    esi,DWORD PTR [rip+0x18fc]        # 0x1e18
  0051c:    	cmp    esi,0xffffffff
  0051f:    	je     0x2dce0
  00525:    	cmp    WORD PTR [rdi+0x2],0x3
  0052a:    	jne    0x543
  00530:    	cmp    esi,0x6
  00533:    	jge    0x543
  00539:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0053e:    	jmp    0x585
  00543:    	sub    rsp,0x20
  00547:    	movq   QWORD PTR [rsp],xmm2
  0054c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00552:    	movq   QWORD PTR [rsp+0x10],xmm4
  00558:    	movq   QWORD PTR [rsp+0x18],xmm5
  0055e: 00 	movabs rax,0x5600b755dfe0
  00568:    	call   rax
  0056a:    	movq   xmm2,QWORD PTR [rsp]
  0056f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00575:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0057b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00581:    	add    rsp,0x20
  00585:    	mov    QWORD PTR [rbp-0x40],rax
:00032 
:00034 %4 = literal[-0.6]
  00589: 00 	movq   xmm5,QWORD PTR [rip+0x188b]        # 0x1e1c
  00591: 99 	movabs rax,0xff1999999999999e
  0059b:    	mov    QWORD PTR [rbp-0x48],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  0059f:    	mov    rdi,QWORD PTR [rbp-0x40]
  005a3: 00 	test   rdi,0x1
  005aa:    	jne    0x2dd3f
  005b0: 00 	test   rdi,0x2
  005b7:    	je     0x5f3
  005bd:    	xorps  xmm6,xmm6
  005c0: 00 	movabs rax,0x8000000000000002
  005ca:    	cmp    rdi,rax
  005cd:    	je     0x605
  005d3:    	mov    rax,rdi
  005d6:    	sar    rax,0x3f
  005da:    	add    rax,0x2
  005de:    	and    rdi,0xfffffffffffffffc
  005e2:    	or     rdi,rax
  005e5:    	rol    rdi,0x3d
  005e9:    	movq   xmm6,rdi
  005ee:    	jmp    0x605
  005f3:    	call   0xfffd70c0
  005f8:    	test   rax,rax
  005fb:    	je     0x2dd3f
  00601:    	movq   xmm6,xmm0
  00605:    	ucomisd xmm6,xmm5
  00609:    	jbe    0x2dddc
:00037 %3 = 1: i32
  0060f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  00617:    	sub    rsp,0x20
  0061b:    	movq   QWORD PTR [rsp],xmm2
  00620:    	movq   QWORD PTR [rsp+0x8],xmm3
  00626:    	movq   QWORD PTR [rsp+0x10],xmm4
  0062c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00632:    	mov    rdx,QWORD PTR [rbp-0x30]
  00636:    	mov    rcx,QWORD PTR [rbp-0x40]
  0063a:    	mov    rdi,rbx
  0063d:    	mov    rsi,r12
  00640: 00 	movabs r8,0x5600b92ce1a8
  0064a: 00 	movabs rax,0x5600b75c5240
  00654:    	call   rax
  00656:    	movq   xmm2,QWORD PTR [rsp]
  0065b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00661:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00667:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0066d:    	add    rsp,0x20
  00671: 00 	movabs r13,0x5600b92ce1b0
  0067b:    	test   rax,rax
  0067e:    	je     0xfffd7087
  00684:    	mov    QWORD PTR [rbp-0x40],rax
:00039 %4 = literal[1.0]
  00688: 00 	movq   xmm5,QWORD PTR [rip+0x179c]        # 0x1e2c
  00690: 00 	movabs rax,0xff80000000000002
  0069a:    	mov    QWORD PTR [rbp-0x48],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  0069e:    	mov    rdi,QWORD PTR [rbp-0x40]
  006a2: 00 	test   rdi,0x7
  006a9:    	jne    0x2dd4e
  006af:    	cmp    DWORD PTR [rdi+0x4],0x28
  006b3:    	jne    0x2dd4e
  006b9: 26 	cmp    DWORD PTR [rip+0xfffffffffffd94ef],0x26        # 0xfffd9baf
  006c0:    	jne    0x2dd4e
  006c6:    	mov    esi,DWORD PTR [rip+0x176c]        # 0x1e38
  006cc:    	cmp    esi,0xffffffff
  006cf:    	je     0x2dd5d
  006d5:    	cmp    WORD PTR [rdi+0x2],0x3
  006da:    	jne    0x6f7
  006e0:    	cmp    esi,0x6
  006e3:    	jge    0x6f7
  006e9:    	mov    rax,QWORD PTR [rbp-0x48]
  006ed:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006f2:    	jmp    0x750
  006f7:    	sub    rsp,0x20
  006fb:    	movq   QWORD PTR [rsp],xmm2
  00700:    	movq   QWORD PTR [rsp+0x8],xmm3
  00706:    	movq   QWORD PTR [rsp+0x10],xmm4
  0070c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00712:    	mov    rdx,QWORD PTR [rbp-0x48]
  00716: 00 	movabs rax,0x5600b755e260
  00720:    	call   rax
  00722:    	movq   xmm2,QWORD PTR [rsp]
  00727:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0072d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00733:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00739:    	add    rsp,0x20
  0073d: 00 	movabs r13,0x5600b92ce1e0
  00747:    	test   rax,rax
  0074a:    	je     0xfffd7087
:00041 
:00043 br =>:00088
  00750:    	jmp    0x2e2da
:00044 %3 = %2.call y()                     [Vec]
  00755:    	mov    rdi,QWORD PTR [rbp-0x38]
  00759: 00 	test   rdi,0x7
  00760:    	jne    0x2ddf5
  00766:    	cmp    DWORD PTR [rdi+0x4],0x28
  0076a:    	jne    0x2ddf5
  00770: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9438],0x26        # 0xfffd9baf
  00777:    	jne    0x2ddf5
  0077d:    	mov    esi,DWORD PTR [rip+0x16bd]        # 0x1e40
  00783:    	cmp    esi,0xffffffff
  00786:    	je     0x2de04
  0078c:    	cmp    WORD PTR [rdi+0x2],0x3
  00791:    	jne    0x7aa
  00797:    	cmp    esi,0x6
  0079a:    	jge    0x7aa
  007a0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007a5:    	jmp    0x7ec
  007aa:    	sub    rsp,0x20
  007ae:    	movq   QWORD PTR [rsp],xmm2
  007b3:    	movq   QWORD PTR [rsp+0x8],xmm3
  007b9:    	movq   QWORD PTR [rsp+0x10],xmm4
  007bf:    	movq   QWORD PTR [rsp+0x18],xmm5
  007c5: 00 	movabs rax,0x5600b755dfe0
  007cf:    	call   rax
  007d1:    	movq   xmm2,QWORD PTR [rsp]
  007d6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007dc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007e2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  007e8:    	add    rsp,0x20
  007ec:    	mov    QWORD PTR [rbp-0x40],rax
:00045 
:00047 %4 = literal[0.6]
  007f0: 00 	movq   xmm5,QWORD PTR [rip+0x1654]        # 0x1e4c
  007f8: 99 	movabs rax,0xff1999999999999a
  00802:    	mov    QWORD PTR [rbp-0x48],rax
:00048 _%3 = %3 < %4                        [Float][Float]
:00049 condnotbr _%3 =>:00063
  00806:    	mov    rdi,QWORD PTR [rbp-0x40]
  0080a: 00 	test   rdi,0x1
  00811:    	jne    0x2de63
  00817: 00 	test   rdi,0x2
  0081e:    	je     0x85a
  00824:    	xorps  xmm6,xmm6
  00827: 00 	movabs rax,0x8000000000000002
  00831:    	cmp    rdi,rax
  00834:    	je     0x86c
  0083a:    	mov    rax,rdi
  0083d:    	sar    rax,0x3f
  00841:    	add    rax,0x2
  00845:    	and    rdi,0xfffffffffffffffc
  00849:    	or     rdi,rax
  0084c:    	rol    rdi,0x3d
  00850:    	movq   xmm6,rdi
  00855:    	jmp    0x86c
  0085a:    	call   0xfffd70c0
  0085f:    	test   rax,rax
  00862:    	je     0x2de63
  00868:    	movq   xmm6,xmm0
  0086c:    	ucomisd xmm6,xmm5
  00870:    	jae    0x2e01f
:00050 %3 = %2.call y()                     [<INVALID>]
  00876: 01 	sub    DWORD PTR [rip+0x15d7],0x1        # 0x1e54
  0087d:    	je     0x2de81
  00883:    	sub    rsp,0x20
  00887:    	movq   QWORD PTR [rsp],xmm2
  0088c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00892:    	movq   QWORD PTR [rsp+0x10],xmm4
  00898:    	movq   QWORD PTR [rsp+0x18],xmm5
  0089e:    	mov    rdi,QWORD PTR [rbp-0x38]
  008a2: 00 	movabs rax,0x5600b75a2280
  008ac:    	call   rax
  008ae:    	mov    r15d,eax
  008b1: 00 	cmp    r15d,DWORD PTR [rip+0x15a4]        # 0x1e5c
  008b8:    	jne    0x2dea3
  008be:    	mov    eax,DWORD PTR [rip+0xfffffffffffd92eb]        # 0xfffd9baf
  008c4:    	cmp    DWORD PTR [rip+0x158e],eax        # 0x1e58
  008ca:    	jne    0x2dea3
  008d0:    	mov    rax,QWORD PTR [rbx]
  008d3:    	lea    rdi,[rsp-0x18]
  008d8:    	mov    QWORD PTR [rdi],rax
  008db:    	mov    QWORD PTR [rbx],rdi
  008de: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008e7:    	mov    QWORD PTR [rsp-0x38],rcx
  008ec:    	mov    rax,QWORD PTR [rbp-0x38]
  008f0:    	mov    QWORD PTR [rsp-0x38],rax
  008f5: 00 	mov    rdi,0x0
  008fc: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00905: 00 	movabs rax,0x0
  0090f:    	mov    QWORD PTR [rsp-0x28],rax
  00914: 00 	movabs r13,0x0
  0091e:    	call   0xfffd704c
  00923:    	lea    rdi,[rbp-0x8]
  00927:    	mov    QWORD PTR [rbx],rdi
  0092a:    	movq   xmm2,QWORD PTR [rsp]
  0092f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00935:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0093b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00941:    	add    rsp,0x20
  00945:    	test   rax,rax
  00948:    	je     0x2df0f
  0094e:    	mov    QWORD PTR [rbp-0x40],rax
:00051 
:00053 %4 = literal[-0.6]
  00952: 00 	movq   xmm5,QWORD PTR [rip+0x1512]        # 0x1e6c
  0095a: 99 	movabs rax,0xff1999999999999e
  00964:    	mov    QWORD PTR [rbp-0x48],rax
:00054 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00055 condnotbr _%3 =>:00063
  00968:    	mov    rdi,QWORD PTR [rbp-0x40]
  0096c:    	mov    rsi,QWORD PTR [rbp-0x48]
  00970: 00 	test   rdi,0x1
  00977:    	je     0x2df1e
  0097d: 00 	test   rsi,0x1
  00984:    	je     0x2df1e
  0098a:    	cmp    rdi,rsi
  0098d:    	jle    0x2e038
:00056 %3 = 1: i32
  00993: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00057 %3 = %1.[%3]                         [Array][Integer]
  0099b:    	sub    rsp,0x20
  0099f:    	movq   QWORD PTR [rsp],xmm2
  009a4:    	movq   QWORD PTR [rsp+0x8],xmm3
  009aa:    	movq   QWORD PTR [rsp+0x10],xmm4
  009b0:    	movq   QWORD PTR [rsp+0x18],xmm5
  009b6:    	mov    rdx,QWORD PTR [rbp-0x30]
  009ba:    	mov    rcx,QWORD PTR [rbp-0x40]
  009be:    	mov    rdi,rbx
  009c1:    	mov    rsi,r12
  009c4: 00 	movabs r8,0x5600b92ce2d8
  009ce: 00 	movabs rax,0x5600b75c5240
  009d8:    	call   rax
  009da:    	movq   xmm2,QWORD PTR [rsp]
  009df:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009eb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009f1:    	add    rsp,0x20
  009f5: 00 	movabs r13,0x5600b92ce2e0
  009ff:    	test   rax,rax
  00a02:    	je     0xfffd7087
  00a08:    	mov    QWORD PTR [rbp-0x40],rax
:00058 %4 = literal[1.0]
  00a0c: 00 	movq   xmm5,QWORD PTR [rip+0x1468]        # 0x1e7c
  00a14: 00 	movabs rax,0xff80000000000002
  00a1e:    	mov    QWORD PTR [rbp-0x48],rax
:00059 _ = %3.call y=(%4; 1)                [<INVALID>]
  00a22: 01 	sub    DWORD PTR [rip+0x145b],0x1        # 0x1e84
  00a29:    	je     0x2df82
  00a2f:    	sub    rsp,0x20
  00a33:    	movq   QWORD PTR [rsp],xmm2
  00a38:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a3e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a44:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a4a:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a4e: 00 	movabs rax,0x5600b75a2280
  00a58:    	call   rax
  00a5a:    	mov    r15d,eax
  00a5d: 00 	cmp    r15d,DWORD PTR [rip+0x1428]        # 0x1e8c
  00a64:    	jne    0x2dfa4
  00a6a:    	mov    eax,DWORD PTR [rip+0xfffffffffffd913f]        # 0xfffd9baf
  00a70:    	cmp    DWORD PTR [rip+0x1412],eax        # 0x1e88
  00a76:    	jne    0x2dfa4
  00a7c:    	mov    rax,QWORD PTR [rbx]
  00a7f:    	lea    rdi,[rsp-0x18]
  00a84:    	mov    QWORD PTR [rdi],rax
  00a87:    	mov    QWORD PTR [rbx],rdi
  00a8a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a93:    	mov    QWORD PTR [rsp-0x38],rcx
  00a98:    	mov    rax,QWORD PTR [rbp-0x40]
  00a9c:    	mov    QWORD PTR [rsp-0x38],rax
  00aa1: 00 	mov    rdi,0x1
  00aa8:    	mov    rax,QWORD PTR [rbp-0x48]
  00aac:    	mov    QWORD PTR [rsp-0x40],rax
  00ab1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00aba: 00 	movabs rax,0x0
  00ac4:    	mov    QWORD PTR [rsp-0x28],rax
  00ac9: 00 	movabs r13,0x0
  00ad3:    	call   0xfffd704c
  00ad8:    	lea    rdi,[rbp-0x8]
  00adc:    	mov    QWORD PTR [rbx],rdi
  00adf:    	movq   xmm2,QWORD PTR [rsp]
  00ae4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00aea:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00af0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00af6:    	add    rsp,0x20
  00afa:    	test   rax,rax
  00afd:    	je     0x2e010
:00060 
:00062 br =>:00088
  00b03:    	jmp    0x2e2f3
:00063 %3 = %2.call z()                     [Vec]
  00b08:    	mov    rdi,QWORD PTR [rbp-0x38]
  00b0c: 00 	test   rdi,0x7
  00b13:    	jne    0x2e051
  00b19:    	cmp    DWORD PTR [rdi+0x4],0x28
  00b1d:    	jne    0x2e051
  00b23: 26 	cmp    DWORD PTR [rip+0xfffffffffffd9085],0x26        # 0xfffd9baf
  00b2a:    	jne    0x2e051
  00b30:    	mov    esi,DWORD PTR [rip+0x135e]        # 0x1e94
  00b36:    	cmp    esi,0xffffffff
  00b39:    	je     0x2e060
  00b3f:    	cmp    WORD PTR [rdi+0x2],0x3
  00b44:    	jne    0xb5d
  00b4a:    	cmp    esi,0x6
  00b4d:    	jge    0xb5d
  00b53:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b58:    	jmp    0xb9f
  00b5d:    	sub    rsp,0x20
  00b61:    	movq   QWORD PTR [rsp],xmm2
  00b66:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b6c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b72:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b78: 00 	movabs rax,0x5600b755dfe0
  00b82:    	call   rax
  00b84:    	movq   xmm2,QWORD PTR [rsp]
  00b89:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b8f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b95:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b9b:    	add    rsp,0x20
  00b9f:    	mov    QWORD PTR [rbp-0x40],rax
:00064 
:00066 %4 = literal[0.6]
  00ba3: 00 	movq   xmm5,QWORD PTR [rip+0x12f1]        # 0x1e9c
  00bab: 99 	movabs rax,0xff1999999999999a
  00bb5:    	mov    QWORD PTR [rbp-0x48],rax
:00067 _%3 = %3 < %4                        [Float][Float]
:00068 condnotbr _%3 =>:00082
  00bb9:    	mov    rdi,QWORD PTR [rbp-0x40]
  00bbd: 00 	test   rdi,0x1
  00bc4:    	jne    0x2e0bf
  00bca: 00 	test   rdi,0x2
  00bd1:    	je     0xc0d
  00bd7:    	xorps  xmm6,xmm6
  00bda: 00 	movabs rax,0x8000000000000002
  00be4:    	cmp    rdi,rax
  00be7:    	je     0xc1f
  00bed:    	mov    rax,rdi
  00bf0:    	sar    rax,0x3f
  00bf4:    	add    rax,0x2
  00bf8:    	and    rdi,0xfffffffffffffffc
  00bfc:    	or     rdi,rax
  00bff:    	rol    rdi,0x3d
  00c03:    	movq   xmm6,rdi
  00c08:    	jmp    0xc1f
  00c0d:    	call   0xfffd70c0
  00c12:    	test   rax,rax
  00c15:    	je     0x2e0bf
  00c1b:    	movq   xmm6,xmm0
  00c1f:    	ucomisd xmm6,xmm5
  00c23:    	jae    0x2e1c0
:00069 %3 = %2.call z()                     [Vec]
  00c29:    	mov    rdi,QWORD PTR [rbp-0x38]
  00c2d: 00 	test   rdi,0x7
  00c34:    	jne    0x2e0ce
  00c3a:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c3e:    	jne    0x2e0ce
  00c44: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8f64],0x26        # 0xfffd9baf
  00c4b:    	jne    0x2e0ce
  00c51:    	mov    esi,DWORD PTR [rip+0x1251]        # 0x1ea8
  00c57:    	cmp    esi,0xffffffff
  00c5a:    	je     0x2e0dd
  00c60:    	cmp    WORD PTR [rdi+0x2],0x3
  00c65:    	jne    0xc7e
  00c6b:    	cmp    esi,0x6
  00c6e:    	jge    0xc7e
  00c74:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c79:    	jmp    0xcc0
  00c7e:    	sub    rsp,0x20
  00c82:    	movq   QWORD PTR [rsp],xmm2
  00c87:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c8d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c93:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c99: 00 	movabs rax,0x5600b755dfe0
  00ca3:    	call   rax
  00ca5:    	movq   xmm2,QWORD PTR [rsp]
  00caa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cb0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cb6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cbc:    	add    rsp,0x20
  00cc0:    	mov    QWORD PTR [rbp-0x40],rax
:00070 
:00072 %4 = literal[-0.6]
  00cc4: 00 	movq   xmm5,QWORD PTR [rip+0x11e0]        # 0x1eac
  00ccc: 99 	movabs rax,0xff1999999999999e
  00cd6:    	mov    QWORD PTR [rbp-0x48],rax
:00073 _%3 = %3 > %4                        [Float][Float]
:00074 condnotbr _%3 =>:00082
  00cda:    	mov    rdi,QWORD PTR [rbp-0x40]
  00cde: 00 	test   rdi,0x1
  00ce5:    	jne    0x2e13c
  00ceb: 00 	test   rdi,0x2
  00cf2:    	je     0xd2e
  00cf8:    	xorps  xmm6,xmm6
  00cfb: 00 	movabs rax,0x8000000000000002
  00d05:    	cmp    rdi,rax
  00d08:    	je     0xd40
  00d0e:    	mov    rax,rdi
  00d11:    	sar    rax,0x3f
  00d15:    	add    rax,0x2
  00d19:    	and    rdi,0xfffffffffffffffc
  00d1d:    	or     rdi,rax
  00d20:    	rol    rdi,0x3d
  00d24:    	movq   xmm6,rdi
  00d29:    	jmp    0xd40
  00d2e:    	call   0xfffd70c0
  00d33:    	test   rax,rax
  00d36:    	je     0x2e13c
  00d3c:    	movq   xmm6,xmm0
  00d40:    	ucomisd xmm6,xmm5
  00d44:    	jbe    0x2e1d9
:00075 %3 = 1: i32
  00d4a: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00076 %3 = %1.[%3]                         [Array][Integer]
  00d52:    	sub    rsp,0x20
  00d56:    	movq   QWORD PTR [rsp],xmm2
  00d5b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d61:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d67:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d6d:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d71:    	mov    rcx,QWORD PTR [rbp-0x40]
  00d75:    	mov    rdi,rbx
  00d78:    	mov    rsi,r12
  00d7b: 00 	movabs r8,0x5600b92ce408
  00d85: 00 	movabs rax,0x5600b75c5240
  00d8f:    	call   rax
  00d91:    	movq   xmm2,QWORD PTR [rsp]
  00d96:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d9c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00da2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00da8:    	add    rsp,0x20
  00dac: 00 	movabs r13,0x5600b92ce410
  00db6:    	test   rax,rax
  00db9:    	je     0xfffd7087
  00dbf:    	mov    QWORD PTR [rbp-0x40],rax
:00077 %4 = literal[1.0]
  00dc3: 00 	movq   xmm5,QWORD PTR [rip+0x10f1]        # 0x1ebc
  00dcb: 00 	movabs rax,0xff80000000000002
  00dd5:    	mov    QWORD PTR [rbp-0x48],rax
:00078 _ = %3.call z=(%4; 1)                [Vec]
  00dd9:    	mov    rdi,QWORD PTR [rbp-0x40]
  00ddd: 00 	test   rdi,0x7
  00de4:    	jne    0x2e14b
  00dea:    	cmp    DWORD PTR [rdi+0x4],0x28
  00dee:    	jne    0x2e14b
  00df4: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8db4],0x26        # 0xfffd9baf
  00dfb:    	jne    0x2e14b
  00e01:    	mov    esi,DWORD PTR [rip+0x10c1]        # 0x1ec8
  00e07:    	cmp    esi,0xffffffff
  00e0a:    	je     0x2e15a
  00e10:    	cmp    WORD PTR [rdi+0x2],0x3
  00e15:    	jne    0xe32
  00e1b:    	cmp    esi,0x6
  00e1e:    	jge    0xe32
  00e24:    	mov    rax,QWORD PTR [rbp-0x48]
  00e28:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00e2d:    	jmp    0xe8b
  00e32:    	sub    rsp,0x20
  00e36:    	movq   QWORD PTR [rsp],xmm2
  00e3b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e41:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e47:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e4d:    	mov    rdx,QWORD PTR [rbp-0x48]
  00e51: 00 	movabs rax,0x5600b755e260
  00e5b:    	call   rax
  00e5d:    	movq   xmm2,QWORD PTR [rsp]
  00e62:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e68:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e6e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e74:    	add    rsp,0x20
  00e78: 00 	movabs r13,0x5600b92ce440
  00e82:    	test   rax,rax
  00e85:    	je     0xfffd7087
:00079 
:00081 br =>:00088
  00e8b:    	jmp    0x2e30c
:00082 %3 = 1: i32
  00e90: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00e98:    	sub    rsp,0x20
  00e9c:    	movq   QWORD PTR [rsp],xmm2
  00ea1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ea7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ead:    	movq   QWORD PTR [rsp+0x18],xmm5
  00eb3:    	mov    rdx,QWORD PTR [rbp-0x30]
  00eb7:    	mov    rcx,QWORD PTR [rbp-0x40]
  00ebb:    	mov    rdi,rbx
  00ebe:    	mov    rsi,r12
  00ec1: 00 	movabs r8,0x5600b92ce478
  00ecb: 00 	movabs rax,0x5600b75c5240
  00ed5:    	call   rax
  00ed7:    	movq   xmm2,QWORD PTR [rsp]
  00edc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ee2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ee8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00eee:    	add    rsp,0x20
  00ef2: 00 	movabs r13,0x5600b92ce480
  00efc:    	test   rax,rax
  00eff:    	je     0xfffd7087
  00f05:    	mov    QWORD PTR [rbp-0x40],rax
:00084 %4 = literal[1.0]
  00f09: 00 	movq   xmm5,QWORD PTR [rip+0xfbb]        # 0x1ecc
  00f11: 00 	movabs rax,0xff80000000000002
  00f1b:    	mov    QWORD PTR [rbp-0x48],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00f1f: 01 	sub    DWORD PTR [rip+0xfae],0x1        # 0x1ed4
  00f26:    	je     0x2e201
  00f2c:    	sub    rsp,0x20
  00f30:    	movq   QWORD PTR [rsp],xmm2
  00f35:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f3b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f41:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f47:    	mov    rdi,QWORD PTR [rbp-0x40]
  00f4b: 00 	movabs rax,0x5600b75a2280
  00f55:    	call   rax
  00f57:    	mov    r15d,eax
  00f5a: 00 	cmp    r15d,DWORD PTR [rip+0xf7b]        # 0x1edc
  00f61:    	jne    0x2e223
  00f67:    	mov    eax,DWORD PTR [rip+0xfffffffffffd8c42]        # 0xfffd9baf
  00f6d:    	cmp    DWORD PTR [rip+0xf65],eax        # 0x1ed8
  00f73:    	jne    0x2e223
  00f79:    	mov    rax,QWORD PTR [rbx]
  00f7c:    	lea    rdi,[rsp-0x18]
  00f81:    	mov    QWORD PTR [rdi],rax
  00f84:    	mov    QWORD PTR [rbx],rdi
  00f87: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f90:    	mov    QWORD PTR [rsp-0x38],rcx
  00f95:    	mov    rax,QWORD PTR [rbp-0x40]
  00f99:    	mov    QWORD PTR [rsp-0x38],rax
  00f9e: 00 	mov    rdi,0x1
  00fa5:    	mov    rax,QWORD PTR [rbp-0x48]
  00fa9:    	mov    QWORD PTR [rsp-0x40],rax
  00fae: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fb7: 00 	movabs rax,0x0
  00fc1:    	mov    QWORD PTR [rsp-0x28],rax
  00fc6: 00 	movabs r13,0x0
  00fd0:    	call   0xfffd704c
  00fd5:    	lea    rdi,[rbp-0x8]
  00fd9:    	mov    QWORD PTR [rbx],rdi
  00fdc:    	movq   xmm2,QWORD PTR [rsp]
  00fe1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fe7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fed:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ff3:    	add    rsp,0x20
  00ff7:    	test   rax,rax
  00ffa:    	je     0x2e28f
:00086 
:00088 %3 = 0: i32
  01000: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  01008: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  01010:    	sub    rsp,0x20
  01014:    	movq   QWORD PTR [rsp],xmm2
  01019:    	movq   QWORD PTR [rsp+0x8],xmm3
  0101f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01025:    	movq   QWORD PTR [rsp+0x18],xmm5
  0102b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0102f:    	mov    rcx,QWORD PTR [rbp-0x50]
  01033:    	mov    rdi,rbx
  01036:    	mov    rsi,r12
  01039: 00 	movabs r8,0x5600b92ce4e8
  01043: 00 	movabs rax,0x5600b75c5240
  0104d:    	call   rax
  0104f:    	movq   xmm2,QWORD PTR [rsp]
  01054:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0105a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01060:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01066:    	add    rsp,0x20
  0106a: 00 	movabs r13,0x5600b92ce4f0
  01074:    	test   rax,rax
  01077:    	je     0xfffd7087
  0107d:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  01081: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  01089:    	sub    rsp,0x20
  0108d:    	movq   QWORD PTR [rsp],xmm3
  01092:    	movq   QWORD PTR [rsp+0x8],xmm4
  01098:    	movq   QWORD PTR [rsp+0x10],xmm5
  0109e:    	mov    rdx,QWORD PTR [rbp-0x30]
  010a2:    	mov    rcx,QWORD PTR [rbp-0x58]
  010a6:    	mov    rdi,rbx
  010a9:    	mov    rsi,r12
  010ac: 00 	movabs r8,0x5600b92ce508
  010b6: 00 	movabs rax,0x5600b75c5240
  010c0:    	call   rax
  010c2:    	movq   xmm3,QWORD PTR [rsp]
  010c7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010cd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010d3:    	add    rsp,0x20
  010d7: 00 	movabs r13,0x5600b92ce510
  010e1:    	test   rax,rax
  010e4:    	je     0xfffd7087
  010ea:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  010ee:    	mov    rdi,QWORD PTR [rbp-0x50]
  010f2: 00 	test   rdi,0x7
  010f9:    	jne    0x2e29e
  010ff:    	cmp    DWORD PTR [rdi+0x4],0x28
  01103:    	jne    0x2e29e
  01109: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8a9f],0x26        # 0xfffd9baf
  01110:    	jne    0x2e29e
  01116:    	sub    rsp,0x10
  0111a:    	movq   QWORD PTR [rsp],xmm3
  0111f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01125:    	mov    rax,QWORD PTR [rbx]
  01128:    	lea    rdi,[rsp-0x18]
  0112d:    	mov    QWORD PTR [rdi],rax
  01130:    	mov    QWORD PTR [rbx],rdi
  01133: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0113c:    	mov    QWORD PTR [rsp-0x38],rcx
  01141:    	mov    rax,QWORD PTR [rbp-0x50]
  01145:    	mov    QWORD PTR [rsp-0x38],rax
  0114a: 00 	mov    rdi,0x1
  01151:    	mov    rax,QWORD PTR [rbp-0x58]
  01155:    	mov    QWORD PTR [rsp-0x40],rax
  0115a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01163: 09 	movabs rax,0x900000040
  0116d:    	mov    QWORD PTR [rsp-0x28],rax
  01172: 00 	movabs r13,0x5600b92b2b70
  0117c:    	call   0xfffe3913
  01181:    	lea    rdi,[rbp-0x8]
  01185:    	mov    QWORD PTR [rbx],rdi
  01188:    	movq   xmm3,QWORD PTR [rsp]
  0118d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01193:    	add    rsp,0x10
  01197: 00 	movabs r13,0x5600b92ce530
  011a1:    	test   rax,rax
  011a4:    	je     0xfffd7087
  011aa:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  011ae:    	sub    rsp,0x10
  011b2:    	movq   QWORD PTR [rsp],xmm3
  011b7:    	movq   QWORD PTR [rsp+0x8],xmm4
  011bd:    	mov    rdx,QWORD PTR [rbp-0x30]
  011c1:    	mov    rcx,QWORD PTR [rbp-0x40]
  011c5:    	mov    r8,QWORD PTR [rbp-0x48]
  011c9:    	mov    rdi,rbx
  011cc:    	mov    rsi,r12
  011cf: 00 	movabs rax,0x5600b75c5370
  011d9:    	call   rax
  011db:    	movq   xmm3,QWORD PTR [rsp]
  011e0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011e6:    	add    rsp,0x10
  011ea: 00 	movabs r13,0x5600b92ce550
  011f4:    	test   rax,rax
  011f7:    	je     0xfffd7087
:00097 %3 = 0: i32
  011fd: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  01205: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  0120d:    	sub    rsp,0x10
  01211:    	movq   QWORD PTR [rsp],xmm3
  01216:    	movq   QWORD PTR [rsp+0x8],xmm4
  0121c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01220:    	mov    rcx,QWORD PTR [rbp-0x50]
  01224:    	mov    rdi,rbx
  01227:    	mov    rsi,r12
  0122a: 00 	movabs r8,0x5600b92ce578
  01234: 00 	movabs rax,0x5600b75c5240
  0123e:    	call   rax
  01240:    	movq   xmm3,QWORD PTR [rsp]
  01245:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0124b:    	add    rsp,0x10
  0124f: 00 	movabs r13,0x5600b92ce580
  01259:    	test   rax,rax
  0125c:    	je     0xfffd7087
  01262:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01266:    	mov    rdi,QWORD PTR [rbp-0x50]
  0126a: 00 	test   rdi,0x7
  01271:    	jne    0x2e2ad
  01277:    	cmp    DWORD PTR [rdi+0x4],0x28
  0127b:    	jne    0x2e2ad
  01281: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8927],0x26        # 0xfffd9baf
  01288:    	jne    0x2e2ad
  0128e:    	sub    rsp,0x10
  01292:    	movq   QWORD PTR [rsp],xmm3
  01297:    	movq   QWORD PTR [rsp+0x8],xmm4
  0129d:    	mov    rax,QWORD PTR [rbx]
  012a0:    	lea    rdi,[rsp-0x18]
  012a5:    	mov    QWORD PTR [rdi],rax
  012a8:    	mov    QWORD PTR [rbx],rdi
  012ab: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012b4:    	mov    QWORD PTR [rsp-0x38],rcx
  012b9:    	mov    rax,QWORD PTR [rbp-0x50]
  012bd:    	mov    QWORD PTR [rsp-0x38],rax
  012c2: 00 	mov    rdi,0x0
  012c9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012d2: 07 	movabs rax,0x1000700000043
  012dc:    	mov    QWORD PTR [rsp-0x28],rax
  012e1: 00 	movabs r13,0x5600b92c5690
  012eb:    	call   0xfffda4d6
  012f0:    	lea    rdi,[rbp-0x8]
  012f4:    	mov    QWORD PTR [rbx],rdi
  012f7:    	movq   xmm3,QWORD PTR [rsp]
  012fc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01302:    	add    rsp,0x10
  01306: 00 	movabs r13,0x5600b92ce5a0
  01310:    	test   rax,rax
  01313:    	je     0xfffd7087
  01319:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  0131d:    	sub    rsp,0x10
  01321:    	movq   QWORD PTR [rsp],xmm3
  01326:    	movq   QWORD PTR [rsp+0x8],xmm4
  0132c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01330:    	mov    rcx,QWORD PTR [rbp-0x40]
  01334:    	mov    r8,QWORD PTR [rbp-0x48]
  01338:    	mov    rdi,rbx
  0133b:    	mov    rsi,r12
  0133e: 00 	movabs rax,0x5600b75c5370
  01348:    	call   rax
  0134a:    	movq   xmm3,QWORD PTR [rsp]
  0134f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01355:    	add    rsp,0x10
  01359: 00 	movabs r13,0x5600b92ce5c0
  01363:    	test   rax,rax
  01366:    	je     0xfffd7087
:00104 %3 = 1: i32
  0136c: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01374: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  0137c:    	sub    rsp,0x10
  01380:    	movq   QWORD PTR [rsp],xmm3
  01385:    	movq   QWORD PTR [rsp+0x8],xmm4
  0138b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0138f:    	mov    rcx,QWORD PTR [rbp-0x50]
  01393:    	mov    rdi,rbx
  01396:    	mov    rsi,r12
  01399: 00 	movabs r8,0x5600b92ce5e8
  013a3: 00 	movabs rax,0x5600b75c5240
  013ad:    	call   rax
  013af:    	movq   xmm3,QWORD PTR [rsp]
  013b4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013ba:    	add    rsp,0x10
  013be: 00 	movabs r13,0x5600b92ce5f0
  013c8:    	test   rax,rax
  013cb:    	je     0xfffd7087
  013d1:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  013d5: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  013dd:    	sub    rsp,0x10
  013e1:    	movq   QWORD PTR [rsp],xmm3
  013e6:    	movq   QWORD PTR [rsp+0x8],xmm4
  013ec:    	mov    rdx,QWORD PTR [rbp-0x30]
  013f0:    	mov    rcx,QWORD PTR [rbp-0x58]
  013f4:    	mov    rdi,rbx
  013f7:    	mov    rsi,r12
  013fa: 00 	movabs r8,0x5600b92ce608
  01404: 00 	movabs rax,0x5600b75c5240
  0140e:    	call   rax
  01410:    	movq   xmm3,QWORD PTR [rsp]
  01415:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0141b:    	add    rsp,0x10
  0141f: 00 	movabs r13,0x5600b92ce610
  01429:    	test   rax,rax
  0142c:    	je     0xfffd7087
  01432:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01436:    	mov    rdi,QWORD PTR [rbp-0x50]
  0143a: 00 	test   rdi,0x7
  01441:    	jne    0x2e2bc
  01447:    	cmp    DWORD PTR [rdi+0x4],0x28
  0144b:    	jne    0x2e2bc
  01451: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8757],0x26        # 0xfffd9baf
  01458:    	jne    0x2e2bc
  0145e:    	sub    rsp,0x10
  01462:    	movq   QWORD PTR [rsp],xmm3
  01467:    	movq   QWORD PTR [rsp+0x8],xmm4
  0146d:    	mov    rax,QWORD PTR [rbx]
  01470:    	lea    rdi,[rsp-0x18]
  01475:    	mov    QWORD PTR [rdi],rax
  01478:    	mov    QWORD PTR [rbx],rdi
  0147b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01484:    	mov    QWORD PTR [rsp-0x38],rcx
  01489:    	mov    rax,QWORD PTR [rbp-0x50]
  0148d:    	mov    QWORD PTR [rsp-0x38],rax
  01492: 00 	mov    rdi,0x1
  01499:    	mov    rax,QWORD PTR [rbp-0x58]
  0149d:    	mov    QWORD PTR [rsp-0x40],rax
  014a2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014ab: 09 	movabs rax,0x900000040
  014b5:    	mov    QWORD PTR [rsp-0x28],rax
  014ba: 00 	movabs r13,0x5600b92b2b70
  014c4:    	call   0xfffe3913
  014c9:    	lea    rdi,[rbp-0x8]
  014cd:    	mov    QWORD PTR [rbx],rdi
  014d0:    	movq   xmm3,QWORD PTR [rsp]
  014d5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014db:    	add    rsp,0x10
  014df: 00 	movabs r13,0x5600b92ce630
  014e9:    	test   rax,rax
  014ec:    	je     0xfffd7087
  014f2:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  014f6:    	sub    rsp,0x10
  014fa:    	movq   QWORD PTR [rsp],xmm3
  014ff:    	movq   QWORD PTR [rsp+0x8],xmm4
  01505:    	mov    rdx,QWORD PTR [rbp-0x30]
  01509:    	mov    rcx,QWORD PTR [rbp-0x40]
  0150d:    	mov    r8,QWORD PTR [rbp-0x48]
  01511:    	mov    rdi,rbx
  01514:    	mov    rsi,r12
  01517: 00 	movabs rax,0x5600b75c5370
  01521:    	call   rax
  01523:    	movq   xmm3,QWORD PTR [rsp]
  01528:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0152e:    	add    rsp,0x10
  01532: 00 	movabs r13,0x5600b92ce650
  0153c:    	test   rax,rax
  0153f:    	je     0xfffd7087
:00113 %3 = 1: i32
  01545: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  0154d: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01555:    	sub    rsp,0x10
  01559:    	movq   QWORD PTR [rsp],xmm3
  0155e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01564:    	mov    rdx,QWORD PTR [rbp-0x30]
  01568:    	mov    rcx,QWORD PTR [rbp-0x50]
  0156c:    	mov    rdi,rbx
  0156f:    	mov    rsi,r12
  01572: 00 	movabs r8,0x5600b92ce678
  0157c: 00 	movabs rax,0x5600b75c5240
  01586:    	call   rax
  01588:    	movq   xmm3,QWORD PTR [rsp]
  0158d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01593:    	add    rsp,0x10
  01597: 00 	movabs r13,0x5600b92ce680
  015a1:    	test   rax,rax
  015a4:    	je     0xfffd7087
  015aa:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  015ae:    	mov    rdi,QWORD PTR [rbp-0x50]
  015b2: 00 	test   rdi,0x7
  015b9:    	jne    0x2e2cb
  015bf:    	cmp    DWORD PTR [rdi+0x4],0x28
  015c3:    	jne    0x2e2cb
  015c9: 26 	cmp    DWORD PTR [rip+0xfffffffffffd85df],0x26        # 0xfffd9baf
  015d0:    	jne    0x2e2cb
  015d6:    	sub    rsp,0x10
  015da:    	movq   QWORD PTR [rsp],xmm3
  015df:    	movq   QWORD PTR [rsp+0x8],xmm4
  015e5:    	mov    rax,QWORD PTR [rbx]
  015e8:    	lea    rdi,[rsp-0x18]
  015ed:    	mov    QWORD PTR [rdi],rax
  015f0:    	mov    QWORD PTR [rbx],rdi
  015f3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015fc:    	mov    QWORD PTR [rsp-0x38],rcx
  01601:    	mov    rax,QWORD PTR [rbp-0x50]
  01605:    	mov    QWORD PTR [rsp-0x38],rax
  0160a: 00 	mov    rdi,0x0
  01611: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0161a: 07 	movabs rax,0x1000700000043
  01624:    	mov    QWORD PTR [rsp-0x28],rax
  01629: 00 	movabs r13,0x5600b92c5690
  01633:    	call   0xfffda4d6
  01638:    	lea    rdi,[rbp-0x8]
  0163c:    	mov    QWORD PTR [rbx],rdi
  0163f:    	movq   xmm3,QWORD PTR [rsp]
  01644:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0164a:    	add    rsp,0x10
  0164e: 00 	movabs r13,0x5600b92ce6a0
  01658:    	test   rax,rax
  0165b:    	je     0xfffd7087
  01661:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01665:    	sub    rsp,0x10
  01669:    	movq   QWORD PTR [rsp],xmm3
  0166e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01674:    	mov    rdx,QWORD PTR [rbp-0x30]
  01678:    	mov    rcx,QWORD PTR [rbp-0x40]
  0167c:    	mov    r8,QWORD PTR [rbp-0x48]
  01680:    	mov    rdi,rbx
  01683:    	mov    rsi,r12
  01686: 00 	movabs rax,0x5600b75c5370
  01690:    	call   rax
  01692:    	movq   xmm3,QWORD PTR [rsp]
  01697:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0169d:    	add    rsp,0x10
  016a1: 00 	movabs r13,0x5600b92ce6c0
  016ab:    	test   rax,rax
  016ae:    	je     0xfffd7087
:00120 %3 = %4
  016b4:    	mov    rax,QWORD PTR [rbp-0x48]
  016b8:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  016bc:    	mov    rax,QWORD PTR [rbp-0x40]
  016c0:    	leave  
  016c1:    	ret    
:00088 %3 = 0: i32
  016c2: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  016ca: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  016d2:    	sub    rsp,0x20
  016d6:    	movq   QWORD PTR [rsp],xmm2
  016db:    	movq   QWORD PTR [rsp+0x8],xmm3
  016e1:    	movq   QWORD PTR [rsp+0x10],xmm4
  016e7:    	movq   QWORD PTR [rsp+0x18],xmm5
  016ed:    	mov    rdx,QWORD PTR [rbp-0x30]
  016f1:    	mov    rcx,QWORD PTR [rbp-0x50]
  016f5:    	mov    rdi,rbx
  016f8:    	mov    rsi,r12
  016fb: 00 	movabs r8,0x5600b92ce4e8
  01705: 00 	movabs rax,0x5600b75c5240
  0170f:    	call   rax
  01711:    	movq   xmm2,QWORD PTR [rsp]
  01716:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0171c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01722:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01728:    	add    rsp,0x20
  0172c: 00 	movabs r13,0x5600b92ce4f0
  01736:    	test   rax,rax
  01739:    	je     0xfffd7087
  0173f:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  01743: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  0174b:    	sub    rsp,0x20
  0174f:    	movq   QWORD PTR [rsp],xmm3
  01754:    	movq   QWORD PTR [rsp+0x8],xmm4
  0175a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01760:    	mov    rdx,QWORD PTR [rbp-0x30]
  01764:    	mov    rcx,QWORD PTR [rbp-0x58]
  01768:    	mov    rdi,rbx
  0176b:    	mov    rsi,r12
  0176e: 00 	movabs r8,0x5600b92ce508
  01778: 00 	movabs rax,0x5600b75c5240
  01782:    	call   rax
  01784:    	movq   xmm3,QWORD PTR [rsp]
  01789:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0178f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01795:    	add    rsp,0x20
  01799: 00 	movabs r13,0x5600b92ce510
  017a3:    	test   rax,rax
  017a6:    	je     0xfffd7087
  017ac:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  017b0:    	mov    rdi,QWORD PTR [rbp-0x50]
  017b4: 00 	test   rdi,0x7
  017bb:    	jne    0x2e325
  017c1:    	cmp    DWORD PTR [rdi+0x4],0x28
  017c5:    	jne    0x2e325
  017cb: 26 	cmp    DWORD PTR [rip+0xfffffffffffd83dd],0x26        # 0xfffd9baf
  017d2:    	jne    0x2e325
  017d8:    	sub    rsp,0x10
  017dc:    	movq   QWORD PTR [rsp],xmm3
  017e1:    	movq   QWORD PTR [rsp+0x8],xmm4
  017e7:    	mov    rax,QWORD PTR [rbx]
  017ea:    	lea    rdi,[rsp-0x18]
  017ef:    	mov    QWORD PTR [rdi],rax
  017f2:    	mov    QWORD PTR [rbx],rdi
  017f5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017fe:    	mov    QWORD PTR [rsp-0x38],rcx
  01803:    	mov    rax,QWORD PTR [rbp-0x50]
  01807:    	mov    QWORD PTR [rsp-0x38],rax
  0180c: 00 	mov    rdi,0x1
  01813:    	mov    rax,QWORD PTR [rbp-0x58]
  01817:    	mov    QWORD PTR [rsp-0x40],rax
  0181c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01825: 09 	movabs rax,0x900000040
  0182f:    	mov    QWORD PTR [rsp-0x28],rax
  01834: 00 	movabs r13,0x5600b92b2b70
  0183e:    	call   0xfffe3913
  01843:    	lea    rdi,[rbp-0x8]
  01847:    	mov    QWORD PTR [rbx],rdi
  0184a:    	movq   xmm3,QWORD PTR [rsp]
  0184f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01855:    	add    rsp,0x10
  01859: 00 	movabs r13,0x5600b92ce530
  01863:    	test   rax,rax
  01866:    	je     0xfffd7087
  0186c:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  01870:    	sub    rsp,0x10
  01874:    	movq   QWORD PTR [rsp],xmm3
  01879:    	movq   QWORD PTR [rsp+0x8],xmm4
  0187f:    	mov    rdx,QWORD PTR [rbp-0x30]
  01883:    	mov    rcx,QWORD PTR [rbp-0x40]
  01887:    	mov    r8,QWORD PTR [rbp-0x48]
  0188b:    	mov    rdi,rbx
  0188e:    	mov    rsi,r12
  01891: 00 	movabs rax,0x5600b75c5370
  0189b:    	call   rax
  0189d:    	movq   xmm3,QWORD PTR [rsp]
  018a2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018a8:    	add    rsp,0x10
  018ac: 00 	movabs r13,0x5600b92ce550
  018b6:    	test   rax,rax
  018b9:    	je     0xfffd7087
:00097 %3 = 0: i32
  018bf: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  018c7: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  018cf:    	sub    rsp,0x10
  018d3:    	movq   QWORD PTR [rsp],xmm3
  018d8:    	movq   QWORD PTR [rsp+0x8],xmm4
  018de:    	mov    rdx,QWORD PTR [rbp-0x30]
  018e2:    	mov    rcx,QWORD PTR [rbp-0x50]
  018e6:    	mov    rdi,rbx
  018e9:    	mov    rsi,r12
  018ec: 00 	movabs r8,0x5600b92ce578
  018f6: 00 	movabs rax,0x5600b75c5240
  01900:    	call   rax
  01902:    	movq   xmm3,QWORD PTR [rsp]
  01907:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0190d:    	add    rsp,0x10
  01911: 00 	movabs r13,0x5600b92ce580
  0191b:    	test   rax,rax
  0191e:    	je     0xfffd7087
  01924:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  01928:    	mov    rdi,QWORD PTR [rbp-0x50]
  0192c: 00 	test   rdi,0x7
  01933:    	jne    0x2e334
  01939:    	cmp    DWORD PTR [rdi+0x4],0x28
  0193d:    	jne    0x2e334
  01943: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8265],0x26        # 0xfffd9baf
  0194a:    	jne    0x2e334
  01950:    	sub    rsp,0x10
  01954:    	movq   QWORD PTR [rsp],xmm3
  01959:    	movq   QWORD PTR [rsp+0x8],xmm4
  0195f:    	mov    rax,QWORD PTR [rbx]
  01962:    	lea    rdi,[rsp-0x18]
  01967:    	mov    QWORD PTR [rdi],rax
  0196a:    	mov    QWORD PTR [rbx],rdi
  0196d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01976:    	mov    QWORD PTR [rsp-0x38],rcx
  0197b:    	mov    rax,QWORD PTR [rbp-0x50]
  0197f:    	mov    QWORD PTR [rsp-0x38],rax
  01984: 00 	mov    rdi,0x0
  0198b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01994: 07 	movabs rax,0x1000700000043
  0199e:    	mov    QWORD PTR [rsp-0x28],rax
  019a3: 00 	movabs r13,0x5600b92c5690
  019ad:    	call   0xfffda4d6
  019b2:    	lea    rdi,[rbp-0x8]
  019b6:    	mov    QWORD PTR [rbx],rdi
  019b9:    	movq   xmm3,QWORD PTR [rsp]
  019be:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019c4:    	add    rsp,0x10
  019c8: 00 	movabs r13,0x5600b92ce5a0
  019d2:    	test   rax,rax
  019d5:    	je     0xfffd7087
  019db:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  019df:    	sub    rsp,0x10
  019e3:    	movq   QWORD PTR [rsp],xmm3
  019e8:    	movq   QWORD PTR [rsp+0x8],xmm4
  019ee:    	mov    rdx,QWORD PTR [rbp-0x30]
  019f2:    	mov    rcx,QWORD PTR [rbp-0x40]
  019f6:    	mov    r8,QWORD PTR [rbp-0x48]
  019fa:    	mov    rdi,rbx
  019fd:    	mov    rsi,r12
  01a00: 00 	movabs rax,0x5600b75c5370
  01a0a:    	call   rax
  01a0c:    	movq   xmm3,QWORD PTR [rsp]
  01a11:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a17:    	add    rsp,0x10
  01a1b: 00 	movabs r13,0x5600b92ce5c0
  01a25:    	test   rax,rax
  01a28:    	je     0xfffd7087
:00104 %3 = 1: i32
  01a2e: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01a36: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01a3e:    	sub    rsp,0x10
  01a42:    	movq   QWORD PTR [rsp],xmm3
  01a47:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a4d:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a51:    	mov    rcx,QWORD PTR [rbp-0x50]
  01a55:    	mov    rdi,rbx
  01a58:    	mov    rsi,r12
  01a5b: 00 	movabs r8,0x5600b92ce5e8
  01a65: 00 	movabs rax,0x5600b75c5240
  01a6f:    	call   rax
  01a71:    	movq   xmm3,QWORD PTR [rsp]
  01a76:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a7c:    	add    rsp,0x10
  01a80: 00 	movabs r13,0x5600b92ce5f0
  01a8a:    	test   rax,rax
  01a8d:    	je     0xfffd7087
  01a93:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  01a97: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01a9f:    	sub    rsp,0x10
  01aa3:    	movq   QWORD PTR [rsp],xmm3
  01aa8:    	movq   QWORD PTR [rsp+0x8],xmm4
  01aae:    	mov    rdx,QWORD PTR [rbp-0x30]
  01ab2:    	mov    rcx,QWORD PTR [rbp-0x58]
  01ab6:    	mov    rdi,rbx
  01ab9:    	mov    rsi,r12
  01abc: 00 	movabs r8,0x5600b92ce608
  01ac6: 00 	movabs rax,0x5600b75c5240
  01ad0:    	call   rax
  01ad2:    	movq   xmm3,QWORD PTR [rsp]
  01ad7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01add:    	add    rsp,0x10
  01ae1: 00 	movabs r13,0x5600b92ce610
  01aeb:    	test   rax,rax
  01aee:    	je     0xfffd7087
  01af4:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01af8:    	mov    rdi,QWORD PTR [rbp-0x50]
  01afc: 00 	test   rdi,0x7
  01b03:    	jne    0x2e343
  01b09:    	cmp    DWORD PTR [rdi+0x4],0x28
  01b0d:    	jne    0x2e343
  01b13: 26 	cmp    DWORD PTR [rip+0xfffffffffffd8095],0x26        # 0xfffd9baf
  01b1a:    	jne    0x2e343
  01b20:    	sub    rsp,0x10
  01b24:    	movq   QWORD PTR [rsp],xmm3
  01b29:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b2f:    	mov    rax,QWORD PTR [rbx]
  01b32:    	lea    rdi,[rsp-0x18]
  01b37:    	mov    QWORD PTR [rdi],rax
  01b3a:    	mov    QWORD PTR [rbx],rdi
  01b3d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b46:    	mov    QWORD PTR [rsp-0x38],rcx
  01b4b:    	mov    rax,QWORD PTR [rbp-0x50]
  01b4f:    	mov    QWORD PTR [rsp-0x38],rax
  01b54: 00 	mov    rdi,0x1
  01b5b:    	mov    rax,QWORD PTR [rbp-0x58]
  01b5f:    	mov    QWORD PTR [rsp-0x40],rax
  01b64: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b6d: 09 	movabs rax,0x900000040
  01b77:    	mov    QWORD PTR [rsp-0x28],rax
  01b7c: 00 	movabs r13,0x5600b92b2b70
  01b86:    	call   0xfffe3913
  01b8b:    	lea    rdi,[rbp-0x8]
  01b8f:    	mov    QWORD PTR [rbx],rdi
  01b92:    	movq   xmm3,QWORD PTR [rsp]
  01b97:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b9d:    	add    rsp,0x10
  01ba1: 00 	movabs r13,0x5600b92ce630
  01bab:    	test   rax,rax
  01bae:    	je     0xfffd7087
  01bb4:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01bb8:    	sub    rsp,0x10
  01bbc:    	movq   QWORD PTR [rsp],xmm3
  01bc1:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bc7:    	mov    rdx,QWORD PTR [rbp-0x30]
  01bcb:    	mov    rcx,QWORD PTR [rbp-0x40]
  01bcf:    	mov    r8,QWORD PTR [rbp-0x48]
  01bd3:    	mov    rdi,rbx
  01bd6:    	mov    rsi,r12
  01bd9: 00 	movabs rax,0x5600b75c5370
  01be3:    	call   rax
  01be5:    	movq   xmm3,QWORD PTR [rsp]
  01bea:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bf0:    	add    rsp,0x10
  01bf4: 00 	movabs r13,0x5600b92ce650
  01bfe:    	test   rax,rax
  01c01:    	je     0xfffd7087
:00113 %3 = 1: i32
  01c07: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01c0f: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01c17:    	sub    rsp,0x10
  01c1b:    	movq   QWORD PTR [rsp],xmm3
  01c20:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c26:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c2a:    	mov    rcx,QWORD PTR [rbp-0x50]
  01c2e:    	mov    rdi,rbx
  01c31:    	mov    rsi,r12
  01c34: 00 	movabs r8,0x5600b92ce678
  01c3e: 00 	movabs rax,0x5600b75c5240
  01c48:    	call   rax
  01c4a:    	movq   xmm3,QWORD PTR [rsp]
  01c4f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c55:    	add    rsp,0x10
  01c59: 00 	movabs r13,0x5600b92ce680
  01c63:    	test   rax,rax
  01c66:    	je     0xfffd7087
  01c6c:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01c70:    	mov    rdi,QWORD PTR [rbp-0x50]
  01c74: 00 	test   rdi,0x7
  01c7b:    	jne    0x2e352
  01c81:    	cmp    DWORD PTR [rdi+0x4],0x28
  01c85:    	jne    0x2e352
  01c8b: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7f1d],0x26        # 0xfffd9baf
  01c92:    	jne    0x2e352
  01c98:    	sub    rsp,0x10
  01c9c:    	movq   QWORD PTR [rsp],xmm3
  01ca1:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ca7:    	mov    rax,QWORD PTR [rbx]
  01caa:    	lea    rdi,[rsp-0x18]
  01caf:    	mov    QWORD PTR [rdi],rax
  01cb2:    	mov    QWORD PTR [rbx],rdi
  01cb5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01cbe:    	mov    QWORD PTR [rsp-0x38],rcx
  01cc3:    	mov    rax,QWORD PTR [rbp-0x50]
  01cc7:    	mov    QWORD PTR [rsp-0x38],rax
  01ccc: 00 	mov    rdi,0x0
  01cd3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01cdc: 07 	movabs rax,0x1000700000043
  01ce6:    	mov    QWORD PTR [rsp-0x28],rax
  01ceb: 00 	movabs r13,0x5600b92c5690
  01cf5:    	call   0xfffda4d6
  01cfa:    	lea    rdi,[rbp-0x8]
  01cfe:    	mov    QWORD PTR [rbx],rdi
  01d01:    	movq   xmm3,QWORD PTR [rsp]
  01d06:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d0c:    	add    rsp,0x10
  01d10: 00 	movabs r13,0x5600b92ce6a0
  01d1a:    	test   rax,rax
  01d1d:    	je     0xfffd7087
  01d23:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01d27:    	sub    rsp,0x10
  01d2b:    	movq   QWORD PTR [rsp],xmm3
  01d30:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d36:    	mov    rdx,QWORD PTR [rbp-0x30]
  01d3a:    	mov    rcx,QWORD PTR [rbp-0x40]
  01d3e:    	mov    r8,QWORD PTR [rbp-0x48]
  01d42:    	mov    rdi,rbx
  01d45:    	mov    rsi,r12
  01d48: 00 	movabs rax,0x5600b75c5370
  01d52:    	call   rax
  01d54:    	movq   xmm3,QWORD PTR [rsp]
  01d59:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d5f:    	add    rsp,0x10
  01d63: 00 	movabs r13,0x5600b92ce6c0
  01d6d:    	test   rax,rax
  01d70:    	je     0xfffd7087
:00120 %3 = %4
  01d76:    	mov    rax,QWORD PTR [rbp-0x48]
  01d7a:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  01d7e:    	mov    rax,QWORD PTR [rbp-0x40]
  01d82:    	leave  
  01d83:    	ret    
==> start whole compile: otherBasis FuncId(59) self_class:Scene start:[00000] bytecode:0x5600b92cdf40
<== finished compile. elapsed:134.2µs
offset:Pos(175764) code: 7513 bytes  data: 327 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	mov    rdx,rdi
  00007:    	sub    rsp,0x70
  0000b:    	mov    eax,edx
  0000d:    	sub    eax,0x2
  00010:    	jge    0x32
  00016:    	neg    rdx
  00019:    	lea    rdx,[rbp+rdx*8-0x30]
  0001e: 00 	mov    QWORD PTR [rdx],0x4
  00025:    	sub    rdx,0x8
  00029:    	add    eax,0x1
  0002c:    	jne    0x1e
  00032: 00 	mov    rax,0x4
  00039:    	mov    QWORD PTR [rbp-0x40],rax
  0003d:    	mov    QWORD PTR [rbp-0x48],rax
  00041:    	mov    QWORD PTR [rbp-0x50],rax
  00045:    	mov    QWORD PTR [rbp-0x58],rax
  00049:    	mov    QWORD PTR [rbp-0x60],rax
  0004d:    	mov    QWORD PTR [rbp-0x68],rax
  00051:    	mov    rdi,QWORD PTR [rbp-0x28]
  00055: 00 	test   rdi,0x7
  0005c:    	jne    0x2c481
  00062:    	cmp    DWORD PTR [rdi+0x4],0x32
  00066:    	jne    0x2c481
:00000 init reg_num:9 arg_num:2 stack_offset:7
:00001 %3 = 2: i32
  0006c: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00002 %5 = const[Vec]                      [Vec]
  00074: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd7c61]        # 0xfffd7cdc
  0007b: 00 	cmp    rax,QWORD PTR [rip+0x1cea]        # 0x1d6c
  00082:    	jne    0x2c490
  00088: 00 	mov    rax,QWORD PTR [rip+0x1ccd]        # 0x1d5c
  0008f:    	mov    QWORD PTR [rbp-0x50],rax
:00003 %6 = %2.call x()                     [Vec]
  00093:    	mov    rdi,QWORD PTR [rbp-0x38]
  00097: 00 	test   rdi,0x7
  0009e:    	jne    0x2c4d6
  000a4:    	cmp    DWORD PTR [rdi+0x4],0x28
  000a8:    	jne    0x2c4d6
  000ae: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7c1a],0x26        # 0xfffd7ccf
  000b5:    	jne    0x2c4d6
  000bb:    	mov    esi,DWORD PTR [rip+0x1cb7]        # 0x1d78
  000c1:    	cmp    esi,0xffffffff
  000c4:    	je     0x2c4e5
  000ca:    	cmp    WORD PTR [rdi+0x2],0x3
  000cf:    	jne    0xe8
  000d5:    	cmp    esi,0x6
  000d8:    	jge    0xe8
  000de:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000e3:    	jmp    0xf4
  000e8: 00 	movabs rax,0x5600b755dfe0
  000f2:    	call   rax
  000f4:    	mov    QWORD PTR [rbp-0x58],rax
:00004 
:00006 %7 = %2.call y()                     [Vec]
  000f8:    	mov    rdi,QWORD PTR [rbp-0x38]
  000fc: 00 	test   rdi,0x7
  00103:    	jne    0x2c50e
  00109:    	cmp    DWORD PTR [rdi+0x4],0x28
  0010d:    	jne    0x2c50e
  00113: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7bb5],0x26        # 0xfffd7ccf
  0011a:    	jne    0x2c50e
  00120:    	mov    esi,DWORD PTR [rip+0x1c5a]        # 0x1d80
  00126:    	cmp    esi,0xffffffff
  00129:    	je     0x2c51d
  0012f:    	cmp    WORD PTR [rdi+0x2],0x3
  00134:    	jne    0x14d
  0013a:    	cmp    esi,0x6
  0013d:    	jge    0x14d
  00143:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00148:    	jmp    0x159
  0014d: 00 	movabs rax,0x5600b755dfe0
  00157:    	call   rax
  00159:    	mov    QWORD PTR [rbp-0x60],rax
:00007 
:00009 %8 = %2.call z()                     [Vec]
  0015d:    	mov    rdi,QWORD PTR [rbp-0x38]
  00161: 00 	test   rdi,0x7
  00168:    	jne    0x2c546
  0016e:    	cmp    DWORD PTR [rdi+0x4],0x28
  00172:    	jne    0x2c546
  00178: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7b50],0x26        # 0xfffd7ccf
  0017f:    	jne    0x2c546
  00185:    	mov    esi,DWORD PTR [rip+0x1bfd]        # 0x1d88
  0018b:    	cmp    esi,0xffffffff
  0018e:    	je     0x2c555
  00194:    	cmp    WORD PTR [rdi+0x2],0x3
  00199:    	jne    0x1b2
  0019f:    	cmp    esi,0x6
  001a2:    	jge    0x1b2
  001a8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ad:    	jmp    0x1be
  001b2: 00 	movabs rax,0x5600b755dfe0
  001bc:    	call   rax
  001be:    	mov    QWORD PTR [rbp-0x68],rax
:00010 
:00012 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  001c2:    	mov    rdi,QWORD PTR [rbp-0x50]
  001c6: 00 	test   rdi,0x7
  001cd:    	jne    0x2c57e
  001d3:    	cmp    DWORD PTR [rdi+0x4],0x29
  001d7:    	jne    0x2c57e
  001dd: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7aeb],0x26        # 0xfffd7ccf
  001e4:    	jne    0x2c57e
  001ea: 00 	mov    r9,0x0
  001f1:    	mov    rdx,rdi
  001f4:    	mov    rax,QWORD PTR [rbx]
  001f7:    	lea    rdi,[rsp-0x18]
  001fc:    	mov    QWORD PTR [rdi],rax
  001ff:    	mov    QWORD PTR [rbx],rdi
  00202: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0020b:    	mov    QWORD PTR [rsp-0x38],rcx
  00210:    	lea    rcx,[rbp-0x58]
  00214: 00 	mov    r8,0x3
  0021b:    	call   0x2c58d
  00220:    	lea    rdi,[rbp-0x8]
  00224:    	mov    QWORD PTR [rbx],rdi
  00227: 00 	movabs r13,0x5600b92ce020
  00231:    	test   rax,rax
  00234:    	je     0xfffd51a7
  0023a:    	mov    QWORD PTR [rbp-0x48],rax
:00013 
:00015 %1:.[%3:] = %4
  0023e:    	mov    rdx,QWORD PTR [rbp-0x30]
  00242:    	mov    rcx,QWORD PTR [rbp-0x40]
  00246:    	mov    r8,QWORD PTR [rbp-0x48]
  0024a:    	mov    rdi,rbx
  0024d:    	mov    rsi,r12
  00250: 00 	movabs rax,0x5600b75c5370
  0025a:    	call   rax
  0025c: 00 	movabs r13,0x5600b92ce040
  00266:    	test   rax,rax
  00269:    	je     0xfffd51a7
:00016 %3 = 1: i32
  0026f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00017 %5 = const[Vec]                      [Vec]
  00277: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffd7a5e]        # 0xfffd7cdc
  0027e: 00 	cmp    rax,QWORD PTR [rip+0x1b17]        # 0x1d9c
  00285:    	jne    0x2c5bf
  0028b: 00 	mov    rax,QWORD PTR [rip+0x1afa]        # 0x1d8c
  00292:    	mov    QWORD PTR [rbp-0x50],rax
:00018 %6 = literal[0.0]
  00296: 00 	movq   xmm2,QWORD PTR [rip+0x1b0e]        # 0x1dac
  0029e: 00 	movabs rax,0x8000000000000002
  002a8:    	mov    QWORD PTR [rbp-0x58],rax
:00019 %7 = literal[0.0]
  002ac: 00 	movq   xmm3,QWORD PTR [rip+0x1b08]        # 0x1dbc
  002b4: 00 	movabs rax,0x8000000000000002
  002be:    	mov    QWORD PTR [rbp-0x60],rax
:00020 %8 = literal[0.0]
  002c2: 00 	movq   xmm4,QWORD PTR [rip+0x1b02]        # 0x1dcc
  002ca: 00 	movabs rax,0x8000000000000002
  002d4:    	mov    QWORD PTR [rbp-0x68],rax
:00021 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
  002d8:    	mov    rdi,QWORD PTR [rbp-0x50]
  002dc: 00 	test   rdi,0x7
  002e3:    	jne    0x2c605
  002e9:    	cmp    DWORD PTR [rdi+0x4],0x29
  002ed:    	jne    0x2c605
  002f3: 26 	cmp    DWORD PTR [rip+0xfffffffffffd79d5],0x26        # 0xfffd7ccf
  002fa:    	jne    0x2c605
  00300: 00 	mov    r9,0x0
  00307:    	sub    rsp,0x20
  0030b:    	movq   QWORD PTR [rsp],xmm2
  00310:    	movq   QWORD PTR [rsp+0x8],xmm3
  00316:    	movq   QWORD PTR [rsp+0x10],xmm4
  0031c:    	mov    rdx,rdi
  0031f:    	mov    rax,QWORD PTR [rbx]
  00322:    	lea    rdi,[rsp-0x18]
  00327:    	mov    QWORD PTR [rdi],rax
  0032a:    	mov    QWORD PTR [rbx],rdi
  0032d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00336:    	mov    QWORD PTR [rsp-0x38],rcx
  0033b:    	lea    rcx,[rbp-0x58]
  0033f: 00 	mov    r8,0x3
  00346:    	call   0x2c614
  0034b:    	lea    rdi,[rbp-0x8]
  0034f:    	mov    QWORD PTR [rbx],rdi
  00352:    	movq   xmm2,QWORD PTR [rsp]
  00357:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0035d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00363:    	add    rsp,0x20
  00367: 00 	movabs r13,0x5600b92ce0b0
  00371:    	test   rax,rax
  00374:    	je     0xfffd51a7
  0037a:    	mov    QWORD PTR [rbp-0x48],rax
:00022 
:00024 %1:.[%3:] = %4
  0037e:    	sub    rsp,0x20
  00382:    	movq   QWORD PTR [rsp],xmm2
  00387:    	movq   QWORD PTR [rsp+0x8],xmm3
  0038d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00393:    	mov    rdx,QWORD PTR [rbp-0x30]
  00397:    	mov    rcx,QWORD PTR [rbp-0x40]
  0039b:    	mov    r8,QWORD PTR [rbp-0x48]
  0039f:    	mov    rdi,rbx
  003a2:    	mov    rsi,r12
  003a5: 00 	movabs rax,0x5600b75c5370
  003af:    	call   rax
  003b1:    	movq   xmm2,QWORD PTR [rsp]
  003b6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003bc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003c2:    	add    rsp,0x20
  003c6: 00 	movabs r13,0x5600b92ce0d0
  003d0:    	test   rax,rax
  003d3:    	je     0xfffd51a7
:00025 %3 = %2.call x()                     [Vec]
  003d9:    	mov    rdi,QWORD PTR [rbp-0x38]
  003dd: 00 	test   rdi,0x7
  003e4:    	jne    0x2c646
  003ea:    	cmp    DWORD PTR [rdi+0x4],0x28
  003ee:    	jne    0x2c646
  003f4: 26 	cmp    DWORD PTR [rip+0xfffffffffffd78d4],0x26        # 0xfffd7ccf
  003fb:    	jne    0x2c646
  00401:    	mov    esi,DWORD PTR [rip+0x19d1]        # 0x1dd8
  00407:    	cmp    esi,0xffffffff
  0040a:    	je     0x2c655
  00410:    	cmp    WORD PTR [rdi+0x2],0x3
  00415:    	jne    0x42e
  0041b:    	cmp    esi,0x6
  0041e:    	jge    0x42e
  00424:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00429:    	jmp    0x464
  0042e:    	sub    rsp,0x20
  00432:    	movq   QWORD PTR [rsp],xmm2
  00437:    	movq   QWORD PTR [rsp+0x8],xmm3
  0043d:    	movq   QWORD PTR [rsp+0x10],xmm4
  00443: 00 	movabs rax,0x5600b755dfe0
  0044d:    	call   rax
  0044f:    	movq   xmm2,QWORD PTR [rsp]
  00454:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0045a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00460:    	add    rsp,0x20
  00464:    	mov    QWORD PTR [rbp-0x40],rax
:00026 
:00028 %4 = literal[0.6]
  00468: 00 	movq   xmm5,QWORD PTR [rip+0x196c]        # 0x1ddc
  00470: 99 	movabs rax,0xff1999999999999a
  0047a:    	mov    QWORD PTR [rbp-0x48],rax
:00029 _%3 = %3 < %4                        [Float][Float]
:00030 condnotbr _%3 =>:00044
  0047e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00482: 00 	test   rdi,0x1
  00489:    	jne    0x2c6a8
  0048f: 00 	test   rdi,0x2
  00496:    	je     0x4d2
  0049c:    	xorps  xmm6,xmm6
  0049f: 00 	movabs rax,0x8000000000000002
  004a9:    	cmp    rdi,rax
  004ac:    	je     0x4e4
  004b2:    	mov    rax,rdi
  004b5:    	sar    rax,0x3f
  004b9:    	add    rax,0x2
  004bd:    	and    rdi,0xfffffffffffffffc
  004c1:    	or     rdi,rax
  004c4:    	rol    rdi,0x3d
  004c8:    	movq   xmm6,rdi
  004cd:    	jmp    0x4e4
  004d2:    	call   0xfffd51e0
  004d7:    	test   rax,rax
  004da:    	je     0x2c6a8
  004e0:    	movq   xmm6,xmm0
  004e4:    	ucomisd xmm6,xmm5
  004e8:    	jae    0x2c7a9
:00031 %3 = %2.call x()                     [Vec]
  004ee:    	mov    rdi,QWORD PTR [rbp-0x38]
  004f2: 00 	test   rdi,0x7
  004f9:    	jne    0x2c6b7
  004ff:    	cmp    DWORD PTR [rdi+0x4],0x28
  00503:    	jne    0x2c6b7
  00509: 26 	cmp    DWORD PTR [rip+0xfffffffffffd77bf],0x26        # 0xfffd7ccf
  00510:    	jne    0x2c6b7
  00516:    	mov    esi,DWORD PTR [rip+0x18cc]        # 0x1de8
  0051c:    	cmp    esi,0xffffffff
  0051f:    	je     0x2c6c6
  00525:    	cmp    WORD PTR [rdi+0x2],0x3
  0052a:    	jne    0x543
  00530:    	cmp    esi,0x6
  00533:    	jge    0x543
  00539:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0053e:    	jmp    0x585
  00543:    	sub    rsp,0x20
  00547:    	movq   QWORD PTR [rsp],xmm2
  0054c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00552:    	movq   QWORD PTR [rsp+0x10],xmm4
  00558:    	movq   QWORD PTR [rsp+0x18],xmm5
  0055e: 00 	movabs rax,0x5600b755dfe0
  00568:    	call   rax
  0056a:    	movq   xmm2,QWORD PTR [rsp]
  0056f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00575:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0057b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00581:    	add    rsp,0x20
  00585:    	mov    QWORD PTR [rbp-0x40],rax
:00032 
:00034 %4 = literal[-0.6]
  00589: 00 	movq   xmm5,QWORD PTR [rip+0x185b]        # 0x1dec
  00591: 99 	movabs rax,0xff1999999999999e
  0059b:    	mov    QWORD PTR [rbp-0x48],rax
:00035 _%3 = %3 > %4                        [Float][Float]
:00036 condnotbr _%3 =>:00044
  0059f:    	mov    rdi,QWORD PTR [rbp-0x40]
  005a3: 00 	test   rdi,0x1
  005aa:    	jne    0x2c725
  005b0: 00 	test   rdi,0x2
  005b7:    	je     0x5f3
  005bd:    	xorps  xmm6,xmm6
  005c0: 00 	movabs rax,0x8000000000000002
  005ca:    	cmp    rdi,rax
  005cd:    	je     0x605
  005d3:    	mov    rax,rdi
  005d6:    	sar    rax,0x3f
  005da:    	add    rax,0x2
  005de:    	and    rdi,0xfffffffffffffffc
  005e2:    	or     rdi,rax
  005e5:    	rol    rdi,0x3d
  005e9:    	movq   xmm6,rdi
  005ee:    	jmp    0x605
  005f3:    	call   0xfffd51e0
  005f8:    	test   rax,rax
  005fb:    	je     0x2c725
  00601:    	movq   xmm6,xmm0
  00605:    	ucomisd xmm6,xmm5
  00609:    	jbe    0x2c7c2
:00037 %3 = 1: i32
  0060f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00038 %3 = %1.[%3]                         [Array][Integer]
  00617:    	sub    rsp,0x20
  0061b:    	movq   QWORD PTR [rsp],xmm2
  00620:    	movq   QWORD PTR [rsp+0x8],xmm3
  00626:    	movq   QWORD PTR [rsp+0x10],xmm4
  0062c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00632:    	mov    rdx,QWORD PTR [rbp-0x30]
  00636:    	mov    rcx,QWORD PTR [rbp-0x40]
  0063a:    	mov    rdi,rbx
  0063d:    	mov    rsi,r12
  00640: 00 	movabs r8,0x5600b92ce1a8
  0064a: 00 	movabs rax,0x5600b75c5240
  00654:    	call   rax
  00656:    	movq   xmm2,QWORD PTR [rsp]
  0065b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00661:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00667:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0066d:    	add    rsp,0x20
  00671: 00 	movabs r13,0x5600b92ce1b0
  0067b:    	test   rax,rax
  0067e:    	je     0xfffd51a7
  00684:    	mov    QWORD PTR [rbp-0x40],rax
:00039 %4 = literal[1.0]
  00688: 00 	movq   xmm5,QWORD PTR [rip+0x176c]        # 0x1dfc
  00690: 00 	movabs rax,0xff80000000000002
  0069a:    	mov    QWORD PTR [rbp-0x48],rax
:00040 _ = %3.call x=(%4; 1)                [Vec]
  0069e:    	mov    rdi,QWORD PTR [rbp-0x40]
  006a2: 00 	test   rdi,0x7
  006a9:    	jne    0x2c734
  006af:    	cmp    DWORD PTR [rdi+0x4],0x28
  006b3:    	jne    0x2c734
  006b9: 26 	cmp    DWORD PTR [rip+0xfffffffffffd760f],0x26        # 0xfffd7ccf
  006c0:    	jne    0x2c734
  006c6:    	mov    esi,DWORD PTR [rip+0x173c]        # 0x1e08
  006cc:    	cmp    esi,0xffffffff
  006cf:    	je     0x2c743
  006d5:    	cmp    WORD PTR [rdi+0x2],0x3
  006da:    	jne    0x6f7
  006e0:    	cmp    esi,0x6
  006e3:    	jge    0x6f7
  006e9:    	mov    rax,QWORD PTR [rbp-0x48]
  006ed:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006f2:    	jmp    0x750
  006f7:    	sub    rsp,0x20
  006fb:    	movq   QWORD PTR [rsp],xmm2
  00700:    	movq   QWORD PTR [rsp+0x8],xmm3
  00706:    	movq   QWORD PTR [rsp+0x10],xmm4
  0070c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00712:    	mov    rdx,QWORD PTR [rbp-0x48]
  00716: 00 	movabs rax,0x5600b755e260
  00720:    	call   rax
  00722:    	movq   xmm2,QWORD PTR [rsp]
  00727:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0072d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00733:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00739:    	add    rsp,0x20
  0073d: 00 	movabs r13,0x5600b92ce1e0
  00747:    	test   rax,rax
  0074a:    	je     0xfffd51a7
:00041 
:00043 br =>:00088
  00750:    	jmp    0x2cc05
:00044 %3 = %2.call y()                     [Vec]
  00755:    	mov    rdi,QWORD PTR [rbp-0x38]
  00759: 00 	test   rdi,0x7
  00760:    	jne    0x2c7db
  00766:    	cmp    DWORD PTR [rdi+0x4],0x28
  0076a:    	jne    0x2c7db
  00770: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7558],0x26        # 0xfffd7ccf
  00777:    	jne    0x2c7db
  0077d:    	mov    esi,DWORD PTR [rip+0x168d]        # 0x1e10
  00783:    	cmp    esi,0xffffffff
  00786:    	je     0x2c7ea
  0078c:    	cmp    WORD PTR [rdi+0x2],0x3
  00791:    	jne    0x7aa
  00797:    	cmp    esi,0x6
  0079a:    	jge    0x7aa
  007a0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007a5:    	jmp    0x7ec
  007aa:    	sub    rsp,0x20
  007ae:    	movq   QWORD PTR [rsp],xmm2
  007b3:    	movq   QWORD PTR [rsp+0x8],xmm3
  007b9:    	movq   QWORD PTR [rsp+0x10],xmm4
  007bf:    	movq   QWORD PTR [rsp+0x18],xmm5
  007c5: 00 	movabs rax,0x5600b755dfe0
  007cf:    	call   rax
  007d1:    	movq   xmm2,QWORD PTR [rsp]
  007d6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007dc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  007e2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  007e8:    	add    rsp,0x20
  007ec:    	mov    QWORD PTR [rbp-0x40],rax
:00045 
:00047 %4 = literal[0.6]
  007f0: 00 	movq   xmm5,QWORD PTR [rip+0x1624]        # 0x1e1c
  007f8: 99 	movabs rax,0xff1999999999999a
  00802:    	mov    QWORD PTR [rbp-0x48],rax
:00048 _%3 = %3 < %4                        [Float][Float]
:00049 condnotbr _%3 =>:00063
  00806:    	mov    rdi,QWORD PTR [rbp-0x40]
  0080a: 00 	test   rdi,0x1
  00811:    	jne    0x2c849
  00817: 00 	test   rdi,0x2
  0081e:    	je     0x85a
  00824:    	xorps  xmm6,xmm6
  00827: 00 	movabs rax,0x8000000000000002
  00831:    	cmp    rdi,rax
  00834:    	je     0x86c
  0083a:    	mov    rax,rdi
  0083d:    	sar    rax,0x3f
  00841:    	add    rax,0x2
  00845:    	and    rdi,0xfffffffffffffffc
  00849:    	or     rdi,rax
  0084c:    	rol    rdi,0x3d
  00850:    	movq   xmm6,rdi
  00855:    	jmp    0x86c
  0085a:    	call   0xfffd51e0
  0085f:    	test   rax,rax
  00862:    	je     0x2c849
  00868:    	movq   xmm6,xmm0
  0086c:    	ucomisd xmm6,xmm5
  00870:    	jae    0x2c94a
:00050 %3 = %2.call y()                     [Vec]
  00876:    	mov    rdi,QWORD PTR [rbp-0x38]
  0087a: 00 	test   rdi,0x7
  00881:    	jne    0x2c858
  00887:    	cmp    DWORD PTR [rdi+0x4],0x28
  0088b:    	jne    0x2c858
  00891: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7437],0x26        # 0xfffd7ccf
  00898:    	jne    0x2c858
  0089e:    	mov    esi,DWORD PTR [rip+0x1584]        # 0x1e28
  008a4:    	cmp    esi,0xffffffff
  008a7:    	je     0x2c867
  008ad:    	cmp    WORD PTR [rdi+0x2],0x3
  008b2:    	jne    0x8cb
  008b8:    	cmp    esi,0x6
  008bb:    	jge    0x8cb
  008c1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008c6:    	jmp    0x90d
  008cb:    	sub    rsp,0x20
  008cf:    	movq   QWORD PTR [rsp],xmm2
  008d4:    	movq   QWORD PTR [rsp+0x8],xmm3
  008da:    	movq   QWORD PTR [rsp+0x10],xmm4
  008e0:    	movq   QWORD PTR [rsp+0x18],xmm5
  008e6: 00 	movabs rax,0x5600b755dfe0
  008f0:    	call   rax
  008f2:    	movq   xmm2,QWORD PTR [rsp]
  008f7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008fd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00903:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00909:    	add    rsp,0x20
  0090d:    	mov    QWORD PTR [rbp-0x40],rax
:00051 
:00053 %4 = literal[-0.6]
  00911: 00 	movq   xmm5,QWORD PTR [rip+0x1513]        # 0x1e2c
  00919: 99 	movabs rax,0xff1999999999999e
  00923:    	mov    QWORD PTR [rbp-0x48],rax
:00054 _%3 = %3 > %4                        [Float][Float]
:00055 condnotbr _%3 =>:00063
  00927:    	mov    rdi,QWORD PTR [rbp-0x40]
  0092b: 00 	test   rdi,0x1
  00932:    	jne    0x2c8c6
  00938: 00 	test   rdi,0x2
  0093f:    	je     0x97b
  00945:    	xorps  xmm6,xmm6
  00948: 00 	movabs rax,0x8000000000000002
  00952:    	cmp    rdi,rax
  00955:    	je     0x98d
  0095b:    	mov    rax,rdi
  0095e:    	sar    rax,0x3f
  00962:    	add    rax,0x2
  00966:    	and    rdi,0xfffffffffffffffc
  0096a:    	or     rdi,rax
  0096d:    	rol    rdi,0x3d
  00971:    	movq   xmm6,rdi
  00976:    	jmp    0x98d
  0097b:    	call   0xfffd51e0
  00980:    	test   rax,rax
  00983:    	je     0x2c8c6
  00989:    	movq   xmm6,xmm0
  0098d:    	ucomisd xmm6,xmm5
  00991:    	jbe    0x2c963
:00056 %3 = 1: i32
  00997: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00057 %3 = %1.[%3]                         [Array][Integer]
  0099f:    	sub    rsp,0x20
  009a3:    	movq   QWORD PTR [rsp],xmm2
  009a8:    	movq   QWORD PTR [rsp+0x8],xmm3
  009ae:    	movq   QWORD PTR [rsp+0x10],xmm4
  009b4:    	movq   QWORD PTR [rsp+0x18],xmm5
  009ba:    	mov    rdx,QWORD PTR [rbp-0x30]
  009be:    	mov    rcx,QWORD PTR [rbp-0x40]
  009c2:    	mov    rdi,rbx
  009c5:    	mov    rsi,r12
  009c8: 00 	movabs r8,0x5600b92ce2d8
  009d2: 00 	movabs rax,0x5600b75c5240
  009dc:    	call   rax
  009de:    	movq   xmm2,QWORD PTR [rsp]
  009e3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009ef:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009f5:    	add    rsp,0x20
  009f9: 00 	movabs r13,0x5600b92ce2e0
  00a03:    	test   rax,rax
  00a06:    	je     0xfffd51a7
  00a0c:    	mov    QWORD PTR [rbp-0x40],rax
:00058 %4 = literal[1.0]
  00a10: 00 	movq   xmm5,QWORD PTR [rip+0x1424]        # 0x1e3c
  00a18: 00 	movabs rax,0xff80000000000002
  00a22:    	mov    QWORD PTR [rbp-0x48],rax
:00059 _ = %3.call y=(%4; 1)                [Vec]
  00a26:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a2a: 00 	test   rdi,0x7
  00a31:    	jne    0x2c8d5
  00a37:    	cmp    DWORD PTR [rdi+0x4],0x28
  00a3b:    	jne    0x2c8d5
  00a41: 26 	cmp    DWORD PTR [rip+0xfffffffffffd7287],0x26        # 0xfffd7ccf
  00a48:    	jne    0x2c8d5
  00a4e:    	mov    esi,DWORD PTR [rip+0x13f4]        # 0x1e48
  00a54:    	cmp    esi,0xffffffff
  00a57:    	je     0x2c8e4
  00a5d:    	cmp    WORD PTR [rdi+0x2],0x3
  00a62:    	jne    0xa7f
  00a68:    	cmp    esi,0x6
  00a6b:    	jge    0xa7f
  00a71:    	mov    rax,QWORD PTR [rbp-0x48]
  00a75:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00a7a:    	jmp    0xad8
  00a7f:    	sub    rsp,0x20
  00a83:    	movq   QWORD PTR [rsp],xmm2
  00a88:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a8e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a94:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a9a:    	mov    rdx,QWORD PTR [rbp-0x48]
  00a9e: 00 	movabs rax,0x5600b755e260
  00aa8:    	call   rax
  00aaa:    	movq   xmm2,QWORD PTR [rsp]
  00aaf:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ab5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00abb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ac1:    	add    rsp,0x20
  00ac5: 00 	movabs r13,0x5600b92ce310
  00acf:    	test   rax,rax
  00ad2:    	je     0xfffd51a7
:00060 
:00062 br =>:00088
  00ad8:    	jmp    0x2cc1e
:00063 %3 = %2.call z()                     [Vec]
  00add:    	mov    rdi,QWORD PTR [rbp-0x38]
  00ae1: 00 	test   rdi,0x7
  00ae8:    	jne    0x2c97c
  00aee:    	cmp    DWORD PTR [rdi+0x4],0x28
  00af2:    	jne    0x2c97c
  00af8: 26 	cmp    DWORD PTR [rip+0xfffffffffffd71d0],0x26        # 0xfffd7ccf
  00aff:    	jne    0x2c97c
  00b05:    	mov    esi,DWORD PTR [rip+0x1345]        # 0x1e50
  00b0b:    	cmp    esi,0xffffffff
  00b0e:    	je     0x2c98b
  00b14:    	cmp    WORD PTR [rdi+0x2],0x3
  00b19:    	jne    0xb32
  00b1f:    	cmp    esi,0x6
  00b22:    	jge    0xb32
  00b28:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b2d:    	jmp    0xb74
  00b32:    	sub    rsp,0x20
  00b36:    	movq   QWORD PTR [rsp],xmm2
  00b3b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b41:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b47:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b4d: 00 	movabs rax,0x5600b755dfe0
  00b57:    	call   rax
  00b59:    	movq   xmm2,QWORD PTR [rsp]
  00b5e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b64:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b6a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b70:    	add    rsp,0x20
  00b74:    	mov    QWORD PTR [rbp-0x40],rax
:00064 
:00066 %4 = literal[0.6]
  00b78: 00 	movq   xmm5,QWORD PTR [rip+0x12dc]        # 0x1e5c
  00b80: 99 	movabs rax,0xff1999999999999a
  00b8a:    	mov    QWORD PTR [rbp-0x48],rax
:00067 _%3 = %3 < %4                        [Float][Float]
:00068 condnotbr _%3 =>:00082
  00b8e:    	mov    rdi,QWORD PTR [rbp-0x40]
  00b92: 00 	test   rdi,0x1
  00b99:    	jne    0x2c9ea
  00b9f: 00 	test   rdi,0x2
  00ba6:    	je     0xbe2
  00bac:    	xorps  xmm6,xmm6
  00baf: 00 	movabs rax,0x8000000000000002
  00bb9:    	cmp    rdi,rax
  00bbc:    	je     0xbf4
  00bc2:    	mov    rax,rdi
  00bc5:    	sar    rax,0x3f
  00bc9:    	add    rax,0x2
  00bcd:    	and    rdi,0xfffffffffffffffc
  00bd1:    	or     rdi,rax
  00bd4:    	rol    rdi,0x3d
  00bd8:    	movq   xmm6,rdi
  00bdd:    	jmp    0xbf4
  00be2:    	call   0xfffd51e0
  00be7:    	test   rax,rax
  00bea:    	je     0x2c9ea
  00bf0:    	movq   xmm6,xmm0
  00bf4:    	ucomisd xmm6,xmm5
  00bf8:    	jae    0x2caeb
:00069 %3 = %2.call z()                     [Vec]
  00bfe:    	mov    rdi,QWORD PTR [rbp-0x38]
  00c02: 00 	test   rdi,0x7
  00c09:    	jne    0x2c9f9
  00c0f:    	cmp    DWORD PTR [rdi+0x4],0x28
  00c13:    	jne    0x2c9f9
  00c19: 26 	cmp    DWORD PTR [rip+0xfffffffffffd70af],0x26        # 0xfffd7ccf
  00c20:    	jne    0x2c9f9
  00c26:    	mov    esi,DWORD PTR [rip+0x123c]        # 0x1e68
  00c2c:    	cmp    esi,0xffffffff
  00c2f:    	je     0x2ca08
  00c35:    	cmp    WORD PTR [rdi+0x2],0x3
  00c3a:    	jne    0xc53
  00c40:    	cmp    esi,0x6
  00c43:    	jge    0xc53
  00c49:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c4e:    	jmp    0xc95
  00c53:    	sub    rsp,0x20
  00c57:    	movq   QWORD PTR [rsp],xmm2
  00c5c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c62:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c68:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c6e: 00 	movabs rax,0x5600b755dfe0
  00c78:    	call   rax
  00c7a:    	movq   xmm2,QWORD PTR [rsp]
  00c7f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c85:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c8b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c91:    	add    rsp,0x20
  00c95:    	mov    QWORD PTR [rbp-0x40],rax
:00070 
:00072 %4 = literal[-0.6]
  00c99: 00 	movq   xmm5,QWORD PTR [rip+0x11cb]        # 0x1e6c
  00ca1: 99 	movabs rax,0xff1999999999999e
  00cab:    	mov    QWORD PTR [rbp-0x48],rax
:00073 _%3 = %3 > %4                        [Float][Float]
:00074 condnotbr _%3 =>:00082
  00caf:    	mov    rdi,QWORD PTR [rbp-0x40]
  00cb3: 00 	test   rdi,0x1
  00cba:    	jne    0x2ca67
  00cc0: 00 	test   rdi,0x2
  00cc7:    	je     0xd03
  00ccd:    	xorps  xmm6,xmm6
  00cd0: 00 	movabs rax,0x8000000000000002
  00cda:    	cmp    rdi,rax
  00cdd:    	je     0xd15
  00ce3:    	mov    rax,rdi
  00ce6:    	sar    rax,0x3f
  00cea:    	add    rax,0x2
  00cee:    	and    rdi,0xfffffffffffffffc
  00cf2:    	or     rdi,rax
  00cf5:    	rol    rdi,0x3d
  00cf9:    	movq   xmm6,rdi
  00cfe:    	jmp    0xd15
  00d03:    	call   0xfffd51e0
  00d08:    	test   rax,rax
  00d0b:    	je     0x2ca67
  00d11:    	movq   xmm6,xmm0
  00d15:    	ucomisd xmm6,xmm5
  00d19:    	jbe    0x2cb04
:00075 %3 = 1: i32
  00d1f: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00076 %3 = %1.[%3]                         [Array][Integer]
  00d27:    	sub    rsp,0x20
  00d2b:    	movq   QWORD PTR [rsp],xmm2
  00d30:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d36:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d3c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d42:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d46:    	mov    rcx,QWORD PTR [rbp-0x40]
  00d4a:    	mov    rdi,rbx
  00d4d:    	mov    rsi,r12
  00d50: 00 	movabs r8,0x5600b92ce408
  00d5a: 00 	movabs rax,0x5600b75c5240
  00d64:    	call   rax
  00d66:    	movq   xmm2,QWORD PTR [rsp]
  00d6b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d71:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d77:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d7d:    	add    rsp,0x20
  00d81: 00 	movabs r13,0x5600b92ce410
  00d8b:    	test   rax,rax
  00d8e:    	je     0xfffd51a7
  00d94:    	mov    QWORD PTR [rbp-0x40],rax
:00077 %4 = literal[1.0]
  00d98: 00 	movq   xmm5,QWORD PTR [rip+0x10dc]        # 0x1e7c
  00da0: 00 	movabs rax,0xff80000000000002
  00daa:    	mov    QWORD PTR [rbp-0x48],rax
:00078 _ = %3.call z=(%4; 1)                [Vec]
  00dae:    	mov    rdi,QWORD PTR [rbp-0x40]
  00db2: 00 	test   rdi,0x7
  00db9:    	jne    0x2ca76
  00dbf:    	cmp    DWORD PTR [rdi+0x4],0x28
  00dc3:    	jne    0x2ca76
  00dc9: 26 	cmp    DWORD PTR [rip+0xfffffffffffd6eff],0x26        # 0xfffd7ccf
  00dd0:    	jne    0x2ca76
  00dd6:    	mov    esi,DWORD PTR [rip+0x10ac]        # 0x1e88
  00ddc:    	cmp    esi,0xffffffff
  00ddf:    	je     0x2ca85
  00de5:    	cmp    WORD PTR [rdi+0x2],0x3
  00dea:    	jne    0xe07
  00df0:    	cmp    esi,0x6
  00df3:    	jge    0xe07
  00df9:    	mov    rax,QWORD PTR [rbp-0x48]
  00dfd:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00e02:    	jmp    0xe60
  00e07:    	sub    rsp,0x20
  00e0b:    	movq   QWORD PTR [rsp],xmm2
  00e10:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e16:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e1c:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e22:    	mov    rdx,QWORD PTR [rbp-0x48]
  00e26: 00 	movabs rax,0x5600b755e260
  00e30:    	call   rax
  00e32:    	movq   xmm2,QWORD PTR [rsp]
  00e37:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e3d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e43:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e49:    	add    rsp,0x20
  00e4d: 00 	movabs r13,0x5600b92ce440
  00e57:    	test   rax,rax
  00e5a:    	je     0xfffd51a7
:00079 
:00081 br =>:00088
  00e60:    	jmp    0x2cc37
:00082 %3 = 1: i32
  00e65: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00083 %3 = %1.[%3]                         [<INVALID>][<INVALID>]
  00e6d:    	sub    rsp,0x20
  00e71:    	movq   QWORD PTR [rsp],xmm2
  00e76:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e7c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e82:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e88:    	mov    rdx,QWORD PTR [rbp-0x30]
  00e8c:    	mov    rcx,QWORD PTR [rbp-0x40]
  00e90:    	mov    rdi,rbx
  00e93:    	mov    rsi,r12
  00e96: 00 	movabs r8,0x5600b92ce478
  00ea0: 00 	movabs rax,0x5600b75c5240
  00eaa:    	call   rax
  00eac:    	movq   xmm2,QWORD PTR [rsp]
  00eb1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00eb7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ebd:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ec3:    	add    rsp,0x20
  00ec7: 00 	movabs r13,0x5600b92ce480
  00ed1:    	test   rax,rax
  00ed4:    	je     0xfffd51a7
  00eda:    	mov    QWORD PTR [rbp-0x40],rax
:00084 %4 = literal[1.0]
  00ede: 00 	movq   xmm5,QWORD PTR [rip+0xfa6]        # 0x1e8c
  00ee6: 00 	movabs rax,0xff80000000000002
  00ef0:    	mov    QWORD PTR [rbp-0x48],rax
:00085 _ = %3.call x=(%4; 1)                [<INVALID>]
  00ef4: 01 	sub    DWORD PTR [rip+0xf99],0x1        # 0x1e94
  00efb:    	je     0x2cb2c
  00f01:    	sub    rsp,0x20
  00f05:    	movq   QWORD PTR [rsp],xmm2
  00f0a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f10:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f16:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f1c:    	mov    rdi,QWORD PTR [rbp-0x40]
  00f20: 00 	movabs rax,0x5600b75a2280
  00f2a:    	call   rax
  00f2c:    	mov    r15d,eax
  00f2f: 00 	cmp    r15d,DWORD PTR [rip+0xf66]        # 0x1e9c
  00f36:    	jne    0x2cb4e
  00f3c:    	mov    eax,DWORD PTR [rip+0xfffffffffffd6d8d]        # 0xfffd7ccf
  00f42:    	cmp    DWORD PTR [rip+0xf50],eax        # 0x1e98
  00f48:    	jne    0x2cb4e
  00f4e:    	mov    rax,QWORD PTR [rbx]
  00f51:    	lea    rdi,[rsp-0x18]
  00f56:    	mov    QWORD PTR [rdi],rax
  00f59:    	mov    QWORD PTR [rbx],rdi
  00f5c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f65:    	mov    QWORD PTR [rsp-0x38],rcx
  00f6a:    	mov    rax,QWORD PTR [rbp-0x40]
  00f6e:    	mov    QWORD PTR [rsp-0x38],rax
  00f73: 00 	mov    rdi,0x1
  00f7a:    	mov    rax,QWORD PTR [rbp-0x48]
  00f7e:    	mov    QWORD PTR [rsp-0x40],rax
  00f83: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f8c: 00 	movabs rax,0x0
  00f96:    	mov    QWORD PTR [rsp-0x28],rax
  00f9b: 00 	movabs r13,0x0
  00fa5:    	call   0xfffd516c
  00faa:    	lea    rdi,[rbp-0x8]
  00fae:    	mov    QWORD PTR [rbx],rdi
  00fb1:    	movq   xmm2,QWORD PTR [rsp]
  00fb6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fbc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fc2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00fc8:    	add    rsp,0x20
  00fcc:    	test   rax,rax
  00fcf:    	je     0x2cbba
:00086 
:00088 %3 = 0: i32
  00fd5: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  00fdd: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  00fe5:    	sub    rsp,0x20
  00fe9:    	movq   QWORD PTR [rsp],xmm2
  00fee:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ff4:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ffa:    	movq   QWORD PTR [rsp+0x18],xmm5
  01000:    	mov    rdx,QWORD PTR [rbp-0x30]
  01004:    	mov    rcx,QWORD PTR [rbp-0x50]
  01008:    	mov    rdi,rbx
  0100b:    	mov    rsi,r12
  0100e: 00 	movabs r8,0x5600b92ce4e8
  01018: 00 	movabs rax,0x5600b75c5240
  01022:    	call   rax
  01024:    	movq   xmm2,QWORD PTR [rsp]
  01029:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0102f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01035:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0103b:    	add    rsp,0x20
  0103f: 00 	movabs r13,0x5600b92ce4f0
  01049:    	test   rax,rax
  0104c:    	je     0xfffd51a7
  01052:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  01056: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  0105e:    	sub    rsp,0x20
  01062:    	movq   QWORD PTR [rsp],xmm3
  01067:    	movq   QWORD PTR [rsp+0x8],xmm4
  0106d:    	movq   QWORD PTR [rsp+0x10],xmm5
  01073:    	mov    rdx,QWORD PTR [rbp-0x30]
  01077:    	mov    rcx,QWORD PTR [rbp-0x58]
  0107b:    	mov    rdi,rbx
  0107e:    	mov    rsi,r12
  01081: 00 	movabs r8,0x5600b92ce508
  0108b: 00 	movabs rax,0x5600b75c5240
  01095:    	call   rax
  01097:    	movq   xmm3,QWORD PTR [rsp]
  0109c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010a2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010a8:    	add    rsp,0x20
  010ac: 00 	movabs r13,0x5600b92ce510
  010b6:    	test   rax,rax
  010b9:    	je     0xfffd51a7
  010bf:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  010c3:    	mov    rdi,QWORD PTR [rbp-0x50]
  010c7: 00 	test   rdi,0x7
  010ce:    	jne    0x2cbc9
  010d4:    	cmp    DWORD PTR [rdi+0x4],0x28
  010d8:    	jne    0x2cbc9
  010de: 26 	cmp    DWORD PTR [rip+0xfffffffffffd6bea],0x26        # 0xfffd7ccf
  010e5:    	jne    0x2cbc9
  010eb:    	sub    rsp,0x10
  010ef:    	movq   QWORD PTR [rsp],xmm3
  010f4:    	movq   QWORD PTR [rsp+0x8],xmm4
  010fa:    	mov    rax,QWORD PTR [rbx]
  010fd:    	lea    rdi,[rsp-0x18]
  01102:    	mov    QWORD PTR [rdi],rax
  01105:    	mov    QWORD PTR [rbx],rdi
  01108: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01111:    	mov    QWORD PTR [rsp-0x38],rcx
  01116:    	mov    rax,QWORD PTR [rbp-0x50]
  0111a:    	mov    QWORD PTR [rsp-0x38],rax
  0111f: 00 	mov    rdi,0x1
  01126:    	mov    rax,QWORD PTR [rbp-0x58]
  0112a:    	mov    QWORD PTR [rsp-0x40],rax
  0112f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01138: 09 	movabs rax,0x900000040
  01142:    	mov    QWORD PTR [rsp-0x28],rax
  01147: 00 	movabs r13,0x5600b92b2b70
  01151:    	call   0xfffe1a33
  01156:    	lea    rdi,[rbp-0x8]
  0115a:    	mov    QWORD PTR [rbx],rdi
  0115d:    	movq   xmm3,QWORD PTR [rsp]
  01162:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01168:    	add    rsp,0x10
  0116c: 00 	movabs r13,0x5600b92ce530
  01176:    	test   rax,rax
  01179:    	je     0xfffd51a7
  0117f:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  01183:    	sub    rsp,0x10
  01187:    	movq   QWORD PTR [rsp],xmm3
  0118c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01192:    	mov    rdx,QWORD PTR [rbp-0x30]
  01196:    	mov    rcx,QWORD PTR [rbp-0x40]
  0119a:    	mov    r8,QWORD PTR [rbp-0x48]
  0119e:    	mov    rdi,rbx
  011a1:    	mov    rsi,r12
  011a4: 00 	movabs rax,0x5600b75c5370
  011ae:    	call   rax
  011b0:    	movq   xmm3,QWORD PTR [rsp]
  011b5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011bb:    	add    rsp,0x10
  011bf: 00 	movabs r13,0x5600b92ce550
  011c9:    	test   rax,rax
  011cc:    	je     0xfffd51a7
:00097 %3 = 0: i32
  011d2: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  011da: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  011e2:    	sub    rsp,0x10
  011e6:    	movq   QWORD PTR [rsp],xmm3
  011eb:    	movq   QWORD PTR [rsp+0x8],xmm4
  011f1:    	mov    rdx,QWORD PTR [rbp-0x30]
  011f5:    	mov    rcx,QWORD PTR [rbp-0x50]
  011f9:    	mov    rdi,rbx
  011fc:    	mov    rsi,r12
  011ff: 00 	movabs r8,0x5600b92ce578
  01209: 00 	movabs rax,0x5600b75c5240
  01213:    	call   rax
  01215:    	movq   xmm3,QWORD PTR [rsp]
  0121a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01220:    	add    rsp,0x10
  01224: 00 	movabs r13,0x5600b92ce580
  0122e:    	test   rax,rax
  01231:    	je     0xfffd51a7
  01237:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  0123b:    	mov    rdi,QWORD PTR [rbp-0x50]
  0123f: 00 	test   rdi,0x7
  01246:    	jne    0x2cbd8
  0124c:    	cmp    DWORD PTR [rdi+0x4],0x28
  01250:    	jne    0x2cbd8
  01256: 26 	cmp    DWORD PTR [rip+0xfffffffffffd6a72],0x26        # 0xfffd7ccf
  0125d:    	jne    0x2cbd8
  01263:    	sub    rsp,0x10
  01267:    	movq   QWORD PTR [rsp],xmm3
  0126c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01272:    	mov    rax,QWORD PTR [rbx]
  01275:    	lea    rdi,[rsp-0x18]
  0127a:    	mov    QWORD PTR [rdi],rax
  0127d:    	mov    QWORD PTR [rbx],rdi
  01280: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01289:    	mov    QWORD PTR [rsp-0x38],rcx
  0128e:    	mov    rax,QWORD PTR [rbp-0x50]
  01292:    	mov    QWORD PTR [rsp-0x38],rax
  01297: 00 	mov    rdi,0x0
  0129e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012a7: 07 	movabs rax,0x1000700000043
  012b1:    	mov    QWORD PTR [rsp-0x28],rax
  012b6: 00 	movabs r13,0x5600b92c5690
  012c0:    	call   0xfffd85f6
  012c5:    	lea    rdi,[rbp-0x8]
  012c9:    	mov    QWORD PTR [rbx],rdi
  012cc:    	movq   xmm3,QWORD PTR [rsp]
  012d1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012d7:    	add    rsp,0x10
  012db: 00 	movabs r13,0x5600b92ce5a0
  012e5:    	test   rax,rax
  012e8:    	je     0xfffd51a7
  012ee:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  012f2:    	sub    rsp,0x10
  012f6:    	movq   QWORD PTR [rsp],xmm3
  012fb:    	movq   QWORD PTR [rsp+0x8],xmm4
  01301:    	mov    rdx,QWORD PTR [rbp-0x30]
  01305:    	mov    rcx,QWORD PTR [rbp-0x40]
  01309:    	mov    r8,QWORD PTR [rbp-0x48]
  0130d:    	mov    rdi,rbx
  01310:    	mov    rsi,r12
  01313: 00 	movabs rax,0x5600b75c5370
  0131d:    	call   rax
  0131f:    	movq   xmm3,QWORD PTR [rsp]
  01324:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0132a:    	add    rsp,0x10
  0132e: 00 	movabs r13,0x5600b92ce5c0
  01338:    	test   rax,rax
  0133b:    	je     0xfffd51a7
:00104 %3 = 1: i32
  01341: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01349: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01351:    	sub    rsp,0x10
  01355:    	movq   QWORD PTR [rsp],xmm3
  0135a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01360:    	mov    rdx,QWORD PTR [rbp-0x30]
  01364:    	mov    rcx,QWORD PTR [rbp-0x50]
  01368:    	mov    rdi,rbx
  0136b:    	mov    rsi,r12
  0136e: 00 	movabs r8,0x5600b92ce5e8
  01378: 00 	movabs rax,0x5600b75c5240
  01382:    	call   rax
  01384:    	movq   xmm3,QWORD PTR [rsp]
  01389:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0138f:    	add    rsp,0x10
  01393: 00 	movabs r13,0x5600b92ce5f0
  0139d:    	test   rax,rax
  013a0:    	je     0xfffd51a7
  013a6:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  013aa: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  013b2:    	sub    rsp,0x10
  013b6:    	movq   QWORD PTR [rsp],xmm3
  013bb:    	movq   QWORD PTR [rsp+0x8],xmm4
  013c1:    	mov    rdx,QWORD PTR [rbp-0x30]
  013c5:    	mov    rcx,QWORD PTR [rbp-0x58]
  013c9:    	mov    rdi,rbx
  013cc:    	mov    rsi,r12
  013cf: 00 	movabs r8,0x5600b92ce608
  013d9: 00 	movabs rax,0x5600b75c5240
  013e3:    	call   rax
  013e5:    	movq   xmm3,QWORD PTR [rsp]
  013ea:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013f0:    	add    rsp,0x10
  013f4: 00 	movabs r13,0x5600b92ce610
  013fe:    	test   rax,rax
  01401:    	je     0xfffd51a7
  01407:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  0140b:    	mov    rdi,QWORD PTR [rbp-0x50]
  0140f: 00 	test   rdi,0x7
  01416:    	jne    0x2cbe7
  0141c:    	cmp    DWORD PTR [rdi+0x4],0x28
  01420:    	jne    0x2cbe7
  01426: 26 	cmp    DWORD PTR [rip+0xfffffffffffd68a2],0x26        # 0xfffd7ccf
  0142d:    	jne    0x2cbe7
  01433:    	sub    rsp,0x10
  01437:    	movq   QWORD PTR [rsp],xmm3
  0143c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01442:    	mov    rax,QWORD PTR [rbx]
  01445:    	lea    rdi,[rsp-0x18]
  0144a:    	mov    QWORD PTR [rdi],rax
  0144d:    	mov    QWORD PTR [rbx],rdi
  01450: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01459:    	mov    QWORD PTR [rsp-0x38],rcx
  0145e:    	mov    rax,QWORD PTR [rbp-0x50]
  01462:    	mov    QWORD PTR [rsp-0x38],rax
  01467: 00 	mov    rdi,0x1
  0146e:    	mov    rax,QWORD PTR [rbp-0x58]
  01472:    	mov    QWORD PTR [rsp-0x40],rax
  01477: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01480: 09 	movabs rax,0x900000040
  0148a:    	mov    QWORD PTR [rsp-0x28],rax
  0148f: 00 	movabs r13,0x5600b92b2b70
  01499:    	call   0xfffe1a33
  0149e:    	lea    rdi,[rbp-0x8]
  014a2:    	mov    QWORD PTR [rbx],rdi
  014a5:    	movq   xmm3,QWORD PTR [rsp]
  014aa:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014b0:    	add    rsp,0x10
  014b4: 00 	movabs r13,0x5600b92ce630
  014be:    	test   rax,rax
  014c1:    	je     0xfffd51a7
  014c7:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  014cb:    	sub    rsp,0x10
  014cf:    	movq   QWORD PTR [rsp],xmm3
  014d4:    	movq   QWORD PTR [rsp+0x8],xmm4
  014da:    	mov    rdx,QWORD PTR [rbp-0x30]
  014de:    	mov    rcx,QWORD PTR [rbp-0x40]
  014e2:    	mov    r8,QWORD PTR [rbp-0x48]
  014e6:    	mov    rdi,rbx
  014e9:    	mov    rsi,r12
  014ec: 00 	movabs rax,0x5600b75c5370
  014f6:    	call   rax
  014f8:    	movq   xmm3,QWORD PTR [rsp]
  014fd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01503:    	add    rsp,0x10
  01507: 00 	movabs r13,0x5600b92ce650
  01511:    	test   rax,rax
  01514:    	je     0xfffd51a7
:00113 %3 = 1: i32
  0151a: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01522: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  0152a:    	sub    rsp,0x10
  0152e:    	movq   QWORD PTR [rsp],xmm3
  01533:    	movq   QWORD PTR [rsp+0x8],xmm4
  01539:    	mov    rdx,QWORD PTR [rbp-0x30]
  0153d:    	mov    rcx,QWORD PTR [rbp-0x50]
  01541:    	mov    rdi,rbx
  01544:    	mov    rsi,r12
  01547: 00 	movabs r8,0x5600b92ce678
  01551: 00 	movabs rax,0x5600b75c5240
  0155b:    	call   rax
  0155d:    	movq   xmm3,QWORD PTR [rsp]
  01562:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01568:    	add    rsp,0x10
  0156c: 00 	movabs r13,0x5600b92ce680
  01576:    	test   rax,rax
  01579:    	je     0xfffd51a7
  0157f:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01583:    	mov    rdi,QWORD PTR [rbp-0x50]
  01587: 00 	test   rdi,0x7
  0158e:    	jne    0x2cbf6
  01594:    	cmp    DWORD PTR [rdi+0x4],0x28
  01598:    	jne    0x2cbf6
  0159e: 26 	cmp    DWORD PTR [rip+0xfffffffffffd672a],0x26        # 0xfffd7ccf
  015a5:    	jne    0x2cbf6
  015ab:    	sub    rsp,0x10
  015af:    	movq   QWORD PTR [rsp],xmm3
  015b4:    	movq   QWORD PTR [rsp+0x8],xmm4
  015ba:    	mov    rax,QWORD PTR [rbx]
  015bd:    	lea    rdi,[rsp-0x18]
  015c2:    	mov    QWORD PTR [rdi],rax
  015c5:    	mov    QWORD PTR [rbx],rdi
  015c8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015d1:    	mov    QWORD PTR [rsp-0x38],rcx
  015d6:    	mov    rax,QWORD PTR [rbp-0x50]
  015da:    	mov    QWORD PTR [rsp-0x38],rax
  015df: 00 	mov    rdi,0x0
  015e6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  015ef: 07 	movabs rax,0x1000700000043
  015f9:    	mov    QWORD PTR [rsp-0x28],rax
  015fe: 00 	movabs r13,0x5600b92c5690
  01608:    	call   0xfffd85f6
  0160d:    	lea    rdi,[rbp-0x8]
  01611:    	mov    QWORD PTR [rbx],rdi
  01614:    	movq   xmm3,QWORD PTR [rsp]
  01619:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0161f:    	add    rsp,0x10
  01623: 00 	movabs r13,0x5600b92ce6a0
  0162d:    	test   rax,rax
  01630:    	je     0xfffd51a7
  01636:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  0163a:    	sub    rsp,0x10
  0163e:    	movq   QWORD PTR [rsp],xmm3
  01643:    	movq   QWORD PTR [rsp+0x8],xmm4
  01649:    	mov    rdx,QWORD PTR [rbp-0x30]
  0164d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01651:    	mov    r8,QWORD PTR [rbp-0x48]
  01655:    	mov    rdi,rbx
  01658:    	mov    rsi,r12
  0165b: 00 	movabs rax,0x5600b75c5370
  01665:    	call   rax
  01667:    	movq   xmm3,QWORD PTR [rsp]
  0166c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01672:    	add    rsp,0x10
  01676: 00 	movabs r13,0x5600b92ce6c0
  01680:    	test   rax,rax
  01683:    	je     0xfffd51a7
:00120 %3 = %4
  01689:    	mov    rax,QWORD PTR [rbp-0x48]
  0168d:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  01691:    	mov    rax,QWORD PTR [rbp-0x40]
  01695:    	leave  
  01696:    	ret    
:00088 %3 = 0: i32
  01697: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00089 %5 = 1: i32
  0169f: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00090 %5 = %1.[%5]                         [Array][Integer]
  016a7:    	sub    rsp,0x20
  016ab:    	movq   QWORD PTR [rsp],xmm2
  016b0:    	movq   QWORD PTR [rsp+0x8],xmm3
  016b6:    	movq   QWORD PTR [rsp+0x10],xmm4
  016bc:    	movq   QWORD PTR [rsp+0x18],xmm5
  016c2:    	mov    rdx,QWORD PTR [rbp-0x30]
  016c6:    	mov    rcx,QWORD PTR [rbp-0x50]
  016ca:    	mov    rdi,rbx
  016cd:    	mov    rsi,r12
  016d0: 00 	movabs r8,0x5600b92ce4e8
  016da: 00 	movabs rax,0x5600b75c5240
  016e4:    	call   rax
  016e6:    	movq   xmm2,QWORD PTR [rsp]
  016eb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  016f1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  016f7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  016fd:    	add    rsp,0x20
  01701: 00 	movabs r13,0x5600b92ce4f0
  0170b:    	test   rax,rax
  0170e:    	je     0xfffd51a7
  01714:    	mov    QWORD PTR [rbp-0x50],rax
:00091 %6 = 2: i32
  01718: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00092 %6 = %1.[%6]                         [Array][Integer]
  01720:    	sub    rsp,0x20
  01724:    	movq   QWORD PTR [rsp],xmm3
  01729:    	movq   QWORD PTR [rsp+0x8],xmm4
  0172f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01735:    	mov    rdx,QWORD PTR [rbp-0x30]
  01739:    	mov    rcx,QWORD PTR [rbp-0x58]
  0173d:    	mov    rdi,rbx
  01740:    	mov    rsi,r12
  01743: 00 	movabs r8,0x5600b92ce508
  0174d: 00 	movabs rax,0x5600b75c5240
  01757:    	call   rax
  01759:    	movq   xmm3,QWORD PTR [rsp]
  0175e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01764:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0176a:    	add    rsp,0x20
  0176e: 00 	movabs r13,0x5600b92ce510
  01778:    	test   rax,rax
  0177b:    	je     0xfffd51a7
  01781:    	mov    QWORD PTR [rbp-0x58],rax
:00093 %4 = %5.call vcross(%6; 1)           [Vec]
  01785:    	mov    rdi,QWORD PTR [rbp-0x50]
  01789: 00 	test   rdi,0x7
  01790:    	jne    0x2cc50
  01796:    	cmp    DWORD PTR [rdi+0x4],0x28
  0179a:    	jne    0x2cc50
  017a0: 26 	cmp    DWORD PTR [rip+0xfffffffffffd6528],0x26        # 0xfffd7ccf
  017a7:    	jne    0x2cc50
  017ad:    	sub    rsp,0x10
  017b1:    	movq   QWORD PTR [rsp],xmm3
  017b6:    	movq   QWORD PTR [rsp+0x8],xmm4
  017bc:    	mov    rax,QWORD PTR [rbx]
  017bf:    	lea    rdi,[rsp-0x18]
  017c4:    	mov    QWORD PTR [rdi],rax
  017c7:    	mov    QWORD PTR [rbx],rdi
  017ca: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017d3:    	mov    QWORD PTR [rsp-0x38],rcx
  017d8:    	mov    rax,QWORD PTR [rbp-0x50]
  017dc:    	mov    QWORD PTR [rsp-0x38],rax
  017e1: 00 	mov    rdi,0x1
  017e8:    	mov    rax,QWORD PTR [rbp-0x58]
  017ec:    	mov    QWORD PTR [rsp-0x40],rax
  017f1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  017fa: 09 	movabs rax,0x900000040
  01804:    	mov    QWORD PTR [rsp-0x28],rax
  01809: 00 	movabs r13,0x5600b92b2b70
  01813:    	call   0xfffe1a33
  01818:    	lea    rdi,[rbp-0x8]
  0181c:    	mov    QWORD PTR [rbx],rdi
  0181f:    	movq   xmm3,QWORD PTR [rsp]
  01824:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0182a:    	add    rsp,0x10
  0182e: 00 	movabs r13,0x5600b92ce530
  01838:    	test   rax,rax
  0183b:    	je     0xfffd51a7
  01841:    	mov    QWORD PTR [rbp-0x48],rax
:00094 
:00096 %1:.[%3:] = %4
  01845:    	sub    rsp,0x10
  01849:    	movq   QWORD PTR [rsp],xmm3
  0184e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01854:    	mov    rdx,QWORD PTR [rbp-0x30]
  01858:    	mov    rcx,QWORD PTR [rbp-0x40]
  0185c:    	mov    r8,QWORD PTR [rbp-0x48]
  01860:    	mov    rdi,rbx
  01863:    	mov    rsi,r12
  01866: 00 	movabs rax,0x5600b75c5370
  01870:    	call   rax
  01872:    	movq   xmm3,QWORD PTR [rsp]
  01877:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0187d:    	add    rsp,0x10
  01881: 00 	movabs r13,0x5600b92ce550
  0188b:    	test   rax,rax
  0188e:    	je     0xfffd51a7
:00097 %3 = 0: i32
  01894: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00098 %5 = 0: i32
  0189c: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00099 %5 = %1.[%5]                         [Array][Integer]
  018a4:    	sub    rsp,0x10
  018a8:    	movq   QWORD PTR [rsp],xmm3
  018ad:    	movq   QWORD PTR [rsp+0x8],xmm4
  018b3:    	mov    rdx,QWORD PTR [rbp-0x30]
  018b7:    	mov    rcx,QWORD PTR [rbp-0x50]
  018bb:    	mov    rdi,rbx
  018be:    	mov    rsi,r12
  018c1: 00 	movabs r8,0x5600b92ce578
  018cb: 00 	movabs rax,0x5600b75c5240
  018d5:    	call   rax
  018d7:    	movq   xmm3,QWORD PTR [rsp]
  018dc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018e2:    	add    rsp,0x10
  018e6: 00 	movabs r13,0x5600b92ce580
  018f0:    	test   rax,rax
  018f3:    	je     0xfffd51a7
  018f9:    	mov    QWORD PTR [rbp-0x50],rax
:00100 %4 = %5.call vnormalize()            [Vec]
  018fd:    	mov    rdi,QWORD PTR [rbp-0x50]
  01901: 00 	test   rdi,0x7
  01908:    	jne    0x2cc5f
  0190e:    	cmp    DWORD PTR [rdi+0x4],0x28
  01912:    	jne    0x2cc5f
  01918: 26 	cmp    DWORD PTR [rip+0xfffffffffffd63b0],0x26        # 0xfffd7ccf
  0191f:    	jne    0x2cc5f
  01925:    	sub    rsp,0x10
  01929:    	movq   QWORD PTR [rsp],xmm3
  0192e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01934:    	mov    rax,QWORD PTR [rbx]
  01937:    	lea    rdi,[rsp-0x18]
  0193c:    	mov    QWORD PTR [rdi],rax
  0193f:    	mov    QWORD PTR [rbx],rdi
  01942: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0194b:    	mov    QWORD PTR [rsp-0x38],rcx
  01950:    	mov    rax,QWORD PTR [rbp-0x50]
  01954:    	mov    QWORD PTR [rsp-0x38],rax
  01959: 00 	mov    rdi,0x0
  01960: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01969: 07 	movabs rax,0x1000700000043
  01973:    	mov    QWORD PTR [rsp-0x28],rax
  01978: 00 	movabs r13,0x5600b92c5690
  01982:    	call   0xfffd85f6
  01987:    	lea    rdi,[rbp-0x8]
  0198b:    	mov    QWORD PTR [rbx],rdi
  0198e:    	movq   xmm3,QWORD PTR [rsp]
  01993:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01999:    	add    rsp,0x10
  0199d: 00 	movabs r13,0x5600b92ce5a0
  019a7:    	test   rax,rax
  019aa:    	je     0xfffd51a7
  019b0:    	mov    QWORD PTR [rbp-0x48],rax
:00101 
:00103 %1:.[%3:] = %4
  019b4:    	sub    rsp,0x10
  019b8:    	movq   QWORD PTR [rsp],xmm3
  019bd:    	movq   QWORD PTR [rsp+0x8],xmm4
  019c3:    	mov    rdx,QWORD PTR [rbp-0x30]
  019c7:    	mov    rcx,QWORD PTR [rbp-0x40]
  019cb:    	mov    r8,QWORD PTR [rbp-0x48]
  019cf:    	mov    rdi,rbx
  019d2:    	mov    rsi,r12
  019d5: 00 	movabs rax,0x5600b75c5370
  019df:    	call   rax
  019e1:    	movq   xmm3,QWORD PTR [rsp]
  019e6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019ec:    	add    rsp,0x10
  019f0: 00 	movabs r13,0x5600b92ce5c0
  019fa:    	test   rax,rax
  019fd:    	je     0xfffd51a7
:00104 %3 = 1: i32
  01a03: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00105 %5 = 2: i32
  01a0b: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00106 %5 = %1.[%5]                         [Array][Integer]
  01a13:    	sub    rsp,0x10
  01a17:    	movq   QWORD PTR [rsp],xmm3
  01a1c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a22:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a26:    	mov    rcx,QWORD PTR [rbp-0x50]
  01a2a:    	mov    rdi,rbx
  01a2d:    	mov    rsi,r12
  01a30: 00 	movabs r8,0x5600b92ce5e8
  01a3a: 00 	movabs rax,0x5600b75c5240
  01a44:    	call   rax
  01a46:    	movq   xmm3,QWORD PTR [rsp]
  01a4b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a51:    	add    rsp,0x10
  01a55: 00 	movabs r13,0x5600b92ce5f0
  01a5f:    	test   rax,rax
  01a62:    	je     0xfffd51a7
  01a68:    	mov    QWORD PTR [rbp-0x50],rax
:00107 %6 = 0: i32
  01a6c: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00108 %6 = %1.[%6]                         [Array][Integer]
  01a74:    	sub    rsp,0x10
  01a78:    	movq   QWORD PTR [rsp],xmm3
  01a7d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a83:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a87:    	mov    rcx,QWORD PTR [rbp-0x58]
  01a8b:    	mov    rdi,rbx
  01a8e:    	mov    rsi,r12
  01a91: 00 	movabs r8,0x5600b92ce608
  01a9b: 00 	movabs rax,0x5600b75c5240
  01aa5:    	call   rax
  01aa7:    	movq   xmm3,QWORD PTR [rsp]
  01aac:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ab2:    	add    rsp,0x10
  01ab6: 00 	movabs r13,0x5600b92ce610
  01ac0:    	test   rax,rax
  01ac3:    	je     0xfffd51a7
  01ac9:    	mov    QWORD PTR [rbp-0x58],rax
:00109 %4 = %5.call vcross(%6; 1)           [Vec]
  01acd:    	mov    rdi,QWORD PTR [rbp-0x50]
  01ad1: 00 	test   rdi,0x7
  01ad8:    	jne    0x2cc6e
  01ade:    	cmp    DWORD PTR [rdi+0x4],0x28
  01ae2:    	jne    0x2cc6e
  01ae8: 26 	cmp    DWORD PTR [rip+0xfffffffffffd61e0],0x26        # 0xfffd7ccf
  01aef:    	jne    0x2cc6e
  01af5:    	sub    rsp,0x10
  01af9:    	movq   QWORD PTR [rsp],xmm3
  01afe:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b04:    	mov    rax,QWORD PTR [rbx]
  01b07:    	lea    rdi,[rsp-0x18]
  01b0c:    	mov    QWORD PTR [rdi],rax
  01b0f:    	mov    QWORD PTR [rbx],rdi
  01b12: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b1b:    	mov    QWORD PTR [rsp-0x38],rcx
  01b20:    	mov    rax,QWORD PTR [rbp-0x50]
  01b24:    	mov    QWORD PTR [rsp-0x38],rax
  01b29: 00 	mov    rdi,0x1
  01b30:    	mov    rax,QWORD PTR [rbp-0x58]
  01b34:    	mov    QWORD PTR [rsp-0x40],rax
  01b39: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b42: 09 	movabs rax,0x900000040
  01b4c:    	mov    QWORD PTR [rsp-0x28],rax
  01b51: 00 	movabs r13,0x5600b92b2b70
  01b5b:    	call   0xfffe1a33
  01b60:    	lea    rdi,[rbp-0x8]
  01b64:    	mov    QWORD PTR [rbx],rdi
  01b67:    	movq   xmm3,QWORD PTR [rsp]
  01b6c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b72:    	add    rsp,0x10
  01b76: 00 	movabs r13,0x5600b92ce630
  01b80:    	test   rax,rax
  01b83:    	je     0xfffd51a7
  01b89:    	mov    QWORD PTR [rbp-0x48],rax
:00110 
:00112 %1:.[%3:] = %4
  01b8d:    	sub    rsp,0x10
  01b91:    	movq   QWORD PTR [rsp],xmm3
  01b96:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b9c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01ba0:    	mov    rcx,QWORD PTR [rbp-0x40]
  01ba4:    	mov    r8,QWORD PTR [rbp-0x48]
  01ba8:    	mov    rdi,rbx
  01bab:    	mov    rsi,r12
  01bae: 00 	movabs rax,0x5600b75c5370
  01bb8:    	call   rax
  01bba:    	movq   xmm3,QWORD PTR [rsp]
  01bbf:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bc5:    	add    rsp,0x10
  01bc9: 00 	movabs r13,0x5600b92ce650
  01bd3:    	test   rax,rax
  01bd6:    	je     0xfffd51a7
:00113 %3 = 1: i32
  01bdc: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00114 %5 = 1: i32
  01be4: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00115 %5 = %1.[%5]                         [Array][Integer]
  01bec:    	sub    rsp,0x10
  01bf0:    	movq   QWORD PTR [rsp],xmm3
  01bf5:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bfb:    	mov    rdx,QWORD PTR [rbp-0x30]
  01bff:    	mov    rcx,QWORD PTR [rbp-0x50]
  01c03:    	mov    rdi,rbx
  01c06:    	mov    rsi,r12
  01c09: 00 	movabs r8,0x5600b92ce678
  01c13: 00 	movabs rax,0x5600b75c5240
  01c1d:    	call   rax
  01c1f:    	movq   xmm3,QWORD PTR [rsp]
  01c24:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c2a:    	add    rsp,0x10
  01c2e: 00 	movabs r13,0x5600b92ce680
  01c38:    	test   rax,rax
  01c3b:    	je     0xfffd51a7
  01c41:    	mov    QWORD PTR [rbp-0x50],rax
:00116 %4 = %5.call vnormalize()            [Vec]
  01c45:    	mov    rdi,QWORD PTR [rbp-0x50]
  01c49: 00 	test   rdi,0x7
  01c50:    	jne    0x2cc7d
  01c56:    	cmp    DWORD PTR [rdi+0x4],0x28
  01c5a:    	jne    0x2cc7d
  01c60: 26 	cmp    DWORD PTR [rip+0xfffffffffffd6068],0x26        # 0xfffd7ccf
  01c67:    	jne    0x2cc7d
  01c6d:    	sub    rsp,0x10
  01c71:    	movq   QWORD PTR [rsp],xmm3
  01c76:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c7c:    	mov    rax,QWORD PTR [rbx]
  01c7f:    	lea    rdi,[rsp-0x18]
  01c84:    	mov    QWORD PTR [rdi],rax
  01c87:    	mov    QWORD PTR [rbx],rdi
  01c8a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01c93:    	mov    QWORD PTR [rsp-0x38],rcx
  01c98:    	mov    rax,QWORD PTR [rbp-0x50]
  01c9c:    	mov    QWORD PTR [rsp-0x38],rax
  01ca1: 00 	mov    rdi,0x0
  01ca8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01cb1: 07 	movabs rax,0x1000700000043
  01cbb:    	mov    QWORD PTR [rsp-0x28],rax
  01cc0: 00 	movabs r13,0x5600b92c5690
  01cca:    	call   0xfffd85f6
  01ccf:    	lea    rdi,[rbp-0x8]
  01cd3:    	mov    QWORD PTR [rbx],rdi
  01cd6:    	movq   xmm3,QWORD PTR [rsp]
  01cdb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ce1:    	add    rsp,0x10
  01ce5: 00 	movabs r13,0x5600b92ce6a0
  01cef:    	test   rax,rax
  01cf2:    	je     0xfffd51a7
  01cf8:    	mov    QWORD PTR [rbp-0x48],rax
:00117 
:00119 %1:.[%3:] = %4
  01cfc:    	sub    rsp,0x10
  01d00:    	movq   QWORD PTR [rsp],xmm3
  01d05:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d0b:    	mov    rdx,QWORD PTR [rbp-0x30]
  01d0f:    	mov    rcx,QWORD PTR [rbp-0x40]
  01d13:    	mov    r8,QWORD PTR [rbp-0x48]
  01d17:    	mov    rdi,rbx
  01d1a:    	mov    rsi,r12
  01d1d: 00 	movabs rax,0x5600b75c5370
  01d27:    	call   rax
  01d29:    	movq   xmm3,QWORD PTR [rsp]
  01d2e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d34:    	add    rsp,0x10
  01d38: 00 	movabs r13,0x5600b92ce6c0
  01d42:    	test   rax,rax
  01d45:    	je     0xfffd51a7
:00120 %3 = %4
  01d4b:    	mov    rax,QWORD PTR [rbp-0x48]
  01d4f:    	mov    QWORD PTR [rbp-0x40],rax
:00121 ret %3
  01d53:    	mov    rax,QWORD PTR [rbp-0x40]
  01d57:    	leave  
  01d58:    	ret    
