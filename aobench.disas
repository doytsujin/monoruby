==> start whole compile: initialize FuncId(55) self_class:Vec start:[00000] bytecode:0x55788dec45c0
<== finished compile. elapsed:11.7µs
offset:Pos(12241) code: 126 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x48],0x4
  00010: mov    rdi,QWORD PTR [rbp-0x28]
  00014: test   rdi,0x7
  0001b: jne    0x3d59b
  00021: cmp    DWORD PTR [rdi+0x4],0x25
  00025: jne    0x3d59b
:00000 @x: Vec[IvarId(0)] = %1
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: cmp    WORD PTR [rdi+0x2],0x3
  00034: jne    0x3d5aa
  0003a: mov    rax,QWORD PTR [rbp-0x30]
  0003e: mov    QWORD PTR [rdi+0x10],rax
:00001 @y: Vec[IvarId(1)] = %2
  00042: mov    rdi,QWORD PTR [rbp-0x28]
  00046: cmp    WORD PTR [rdi+0x2],0x3
  0004b: jne    0x3d5c4
  00051: mov    rax,QWORD PTR [rbp-0x38]
  00055: mov    QWORD PTR [rdi+0x18],rax
:00002 @z: Vec[IvarId(2)] = %3
  00059: mov    rdi,QWORD PTR [rbp-0x28]
  0005d: cmp    WORD PTR [rdi+0x2],0x3
  00062: jne    0x3d5de
  00068: mov    rax,QWORD PTR [rbp-0x40]
  0006c: mov    QWORD PTR [rdi+0x20],rax
:00003 %4 = %3
  00070: mov    rax,QWORD PTR [rbp-0x40]
  00074: mov    QWORD PTR [rbp-0x48],rax
:00004 ret %4
  00078: mov    rax,QWORD PTR [rbp-0x48]
  0007c: leave  
  0007d: ret    
==> start whole compile: vdot FuncId(59) self_class:Vec start:[00000] bytecode:0x55788df32010
<== finished compile. elapsed:28.5µs
offset:Pos(14173) code: 1113 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x3ce6c
  0002c: cmp    DWORD PTR [rdi+0x4],0x25
  00030: jne    0x3ce6c
:00000 %2 = @x: Vec[IvarId(0)]
  00036: mov    rdi,QWORD PTR [rbp-0x28]
  0003a: cmp    WORD PTR [rdi+0x2],0x3
  0003f: jne    0x3ce7b
  00045: mov    rax,QWORD PTR [rdi+0x10]
  00049: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = %1.call x()                     [Vec]
:00002 
  0004d: mov    rdi,QWORD PTR [rbp-0x30]
  00051: test   rdi,0x7
  00058: jne    0x3ce91
  0005e: cmp    DWORD PTR [rdi+0x4],0x25
  00062: jne    0x3ce91
  00068: cmp    DWORD PTR [rip+0xfffffffffffff248],0x26        # 0xfffff2b7
  0006f: jne    0x3ce91
  00075: mov    esi,DWORD PTR [rip+0x3e2]        # 0x45d
  0007b: cmp    esi,0xffffffff
  0007e: je     0x3cea0
  00084: cmp    WORD PTR [rdi+0x2],0x3
  00089: jne    0xa2
  0008f: cmp    esi,0x6
  00092: jge    0xa2
  00098: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0009d: jmp    0xae
  000a2: movabs rax,0x55788c73bb50
  000ac: call   rax
  000ae: mov    QWORD PTR [rbp-0x40],rax
:00004 %2 = %2 * %3                         [Float][Float]
  000b2: mov    rdi,QWORD PTR [rbp-0x38]
  000b6: test   rdi,0x1
  000bd: jne    0x3cec9
  000c3: test   rdi,0x2
  000ca: je     0x106
  000d0: xorps  xmm2,xmm2
  000d3: movabs rax,0x8000000000000002
  000dd: cmp    rdi,rax
  000e0: je     0x118
  000e6: mov    rax,rdi
  000e9: sar    rax,0x3f
  000ed: add    rax,0x2
  000f1: and    rdi,0xfffffffffffffffc
  000f5: or     rdi,rax
  000f8: rol    rdi,0x3d
  000fc: movq   xmm2,rdi
  00101: jmp    0x118
  00106: call   0xffffc917
  0010b: test   rax,rax
  0010e: je     0x3cec9
  00114: movq   xmm2,xmm0
  00118: mov    rdi,QWORD PTR [rbp-0x40]
  0011c: test   rdi,0x1
  00123: jne    0x3ced8
  00129: test   rdi,0x2
  00130: je     0x16c
  00136: xorps  xmm3,xmm3
  00139: movabs rax,0x8000000000000002
  00143: cmp    rdi,rax
  00146: je     0x17e
  0014c: mov    rax,rdi
  0014f: sar    rax,0x3f
  00153: add    rax,0x2
  00157: and    rdi,0xfffffffffffffffc
  0015b: or     rdi,rax
  0015e: rol    rdi,0x3d
  00162: movq   xmm3,rdi
  00167: jmp    0x17e
  0016c: call   0xffffc917
  00171: test   rax,rax
  00174: je     0x3ced8
  0017a: movq   xmm3,xmm0
  0017e: mulsd  xmm2,xmm3
:00005 %3 = @y: Vec[IvarId(1)]
  00182: mov    rdi,QWORD PTR [rbp-0x28]
  00186: cmp    WORD PTR [rdi+0x2],0x3
  0018b: jne    0x3cee7
  00191: mov    rax,QWORD PTR [rdi+0x18]
  00195: mov    QWORD PTR [rbp-0x40],rax
:00006 %4 = %1.call y()                     [Vec]
:00007 
  00199: mov    rdi,QWORD PTR [rbp-0x30]
  0019d: test   rdi,0x7
  001a4: jne    0x3cf0f
  001aa: cmp    DWORD PTR [rdi+0x4],0x25
  001ae: jne    0x3cf0f
  001b4: cmp    DWORD PTR [rip+0xfffffffffffff0fc],0x26        # 0xfffff2b7
  001bb: jne    0x3cf0f
  001c1: mov    esi,DWORD PTR [rip+0x29e]        # 0x465
  001c7: cmp    esi,0xffffffff
  001ca: je     0x3cf2b
  001d0: cmp    WORD PTR [rdi+0x2],0x3
  001d5: jne    0x1ee
  001db: cmp    esi,0x6
  001de: jge    0x1ee
  001e4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001e9: jmp    0x20c
  001ee: sub    rsp,0x10
  001f2: movq   QWORD PTR [rsp],xmm2
  001f7: movabs rax,0x55788c73bb50
  00201: call   rax
  00203: movq   xmm2,QWORD PTR [rsp]
  00208: add    rsp,0x10
  0020c: mov    QWORD PTR [rbp-0x48],rax
:00009 %3 = %3 * %4                         [Float][Float]
  00210: mov    rdi,QWORD PTR [rbp-0x40]
  00214: test   rdi,0x1
  0021b: jne    0x3cf66
  00221: test   rdi,0x2
  00228: je     0x264
  0022e: xorps  xmm3,xmm3
  00231: movabs rax,0x8000000000000002
  0023b: cmp    rdi,rax
  0023e: je     0x276
  00244: mov    rax,rdi
  00247: sar    rax,0x3f
  0024b: add    rax,0x2
  0024f: and    rdi,0xfffffffffffffffc
  00253: or     rdi,rax
  00256: rol    rdi,0x3d
  0025a: movq   xmm3,rdi
  0025f: jmp    0x276
  00264: call   0xffffc917
  00269: test   rax,rax
  0026c: je     0x3cf66
  00272: movq   xmm3,xmm0
  00276: mov    rdi,QWORD PTR [rbp-0x48]
  0027a: test   rdi,0x1
  00281: jne    0x3cf82
  00287: test   rdi,0x2
  0028e: je     0x2ca
  00294: xorps  xmm4,xmm4
  00297: movabs rax,0x8000000000000002
  002a1: cmp    rdi,rax
  002a4: je     0x2dc
  002aa: mov    rax,rdi
  002ad: sar    rax,0x3f
  002b1: add    rax,0x2
  002b5: and    rdi,0xfffffffffffffffc
  002b9: or     rdi,rax
  002bc: rol    rdi,0x3d
  002c0: movq   xmm4,rdi
  002c5: jmp    0x2dc
  002ca: call   0xffffc917
  002cf: test   rax,rax
  002d2: je     0x3cf82
  002d8: movq   xmm4,xmm0
  002dc: mulsd  xmm3,xmm4
:00010 %2 = %2 + %3                         [Float][Float]
  002e0: addsd  xmm2,xmm3
:00011 %3 = @z: Vec[IvarId(2)]
  002e4: mov    rdi,QWORD PTR [rbp-0x28]
  002e8: cmp    WORD PTR [rdi+0x2],0x3
  002ed: jne    0x3cf9e
  002f3: mov    rax,QWORD PTR [rdi+0x20]
  002f7: mov    QWORD PTR [rbp-0x40],rax
:00012 %4 = %1.call z()                     [Vec]
:00013 
  002fb: mov    rdi,QWORD PTR [rbp-0x30]
  002ff: test   rdi,0x7
  00306: jne    0x3cfd2
  0030c: cmp    DWORD PTR [rdi+0x4],0x25
  00310: jne    0x3cfd2
  00316: cmp    DWORD PTR [rip+0xffffffffffffef9a],0x26        # 0xfffff2b7
  0031d: jne    0x3cfd2
  00323: mov    esi,DWORD PTR [rip+0x144]        # 0x46d
  00329: cmp    esi,0xffffffff
  0032c: je     0x3cfee
  00332: cmp    WORD PTR [rdi+0x2],0x3
  00337: jne    0x350
  0033d: cmp    esi,0x6
  00340: jge    0x350
  00346: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0034b: jmp    0x36e
  00350: sub    rsp,0x10
  00354: movq   QWORD PTR [rsp],xmm2
  00359: movabs rax,0x55788c73bb50
  00363: call   rax
  00365: movq   xmm2,QWORD PTR [rsp]
  0036a: add    rsp,0x10
  0036e: mov    QWORD PTR [rbp-0x48],rax
:00015 %3 = %3 * %4                         [Float][Float]
  00372: mov    rdi,QWORD PTR [rbp-0x40]
  00376: test   rdi,0x1
  0037d: jne    0x3d029
  00383: test   rdi,0x2
  0038a: je     0x3c6
  00390: xorps  xmm3,xmm3
  00393: movabs rax,0x8000000000000002
  0039d: cmp    rdi,rax
  003a0: je     0x3d8
  003a6: mov    rax,rdi
  003a9: sar    rax,0x3f
  003ad: add    rax,0x2
  003b1: and    rdi,0xfffffffffffffffc
  003b5: or     rdi,rax
  003b8: rol    rdi,0x3d
  003bc: movq   xmm3,rdi
  003c1: jmp    0x3d8
  003c6: call   0xffffc917
  003cb: test   rax,rax
  003ce: je     0x3d029
  003d4: movq   xmm3,xmm0
  003d8: mov    rdi,QWORD PTR [rbp-0x48]
  003dc: test   rdi,0x1
  003e3: jne    0x3d045
  003e9: test   rdi,0x2
  003f0: je     0x42c
  003f6: xorps  xmm4,xmm4
  003f9: movabs rax,0x8000000000000002
  00403: cmp    rdi,rax
  00406: je     0x43e
  0040c: mov    rax,rdi
  0040f: sar    rax,0x3f
  00413: add    rax,0x2
  00417: and    rdi,0xfffffffffffffffc
  0041b: or     rdi,rax
  0041e: rol    rdi,0x3d
  00422: movq   xmm4,rdi
  00427: jmp    0x43e
  0042c: call   0xffffc917
  00431: test   rax,rax
  00434: je     0x3d045
  0043a: movq   xmm4,xmm0
  0043e: mulsd  xmm3,xmm4
:00016 %2 = %2 + %3                         [Float][Float]
  00442: addsd  xmm2,xmm3
:00017 ret %2
  00446: movq   xmm0,xmm2
  0044a: call   0xffffca0a
  0044f: mov    QWORD PTR [rbp-0x38],rax
  00453: mov    rax,QWORD PTR [rbp-0x38]
  00457: leave  
  00458: ret    
==> start whole compile: intersect FuncId(63) self_class:Sphere start:[00000] bytecode:0x55788dee86a0
<== finished compile. elapsed:84.8µs
offset:Pos(15456) code: 3224 bytes  data: 224 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0xb0
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x40],rax
  00016: mov    QWORD PTR [rbp-0x48],rax
  0001a: mov    QWORD PTR [rbp-0x50],rax
  0001e: mov    QWORD PTR [rbp-0x58],rax
  00022: mov    QWORD PTR [rbp-0x60],rax
  00026: mov    QWORD PTR [rbp-0x68],rax
  0002a: mov    QWORD PTR [rbp-0x70],rax
  0002e: mov    QWORD PTR [rbp-0x78],rax
  00032: mov    QWORD PTR [rbp-0x80],rax
  00036: mov    QWORD PTR [rbp-0x88],rax
  0003d: mov    QWORD PTR [rbp-0x90],rax
  00044: mov    QWORD PTR [rbp-0x98],rax
  0004b: mov    QWORD PTR [rbp-0xa0],rax
  00052: mov    rdi,QWORD PTR [rbp-0x28]
  00056: test   rdi,0x7
  0005d: jne    0x3cb5e
  00063: cmp    DWORD PTR [rdi+0x4],0x27
  00067: jne    0x3cb5e
:00000 %9 = %1.call org()                   [Ray]
:00001 
  0006d: mov    rdi,QWORD PTR [rbp-0x30]
  00071: test   rdi,0x7
  00078: jne    0x3cb6d
  0007e: cmp    DWORD PTR [rdi+0x4],0x2b
  00082: jne    0x3cb6d
  00088: cmp    DWORD PTR [rip+0xffffffffffffed25],0x26        # 0xffffedb4
  0008f: jne    0x3cb6d
  00095: mov    esi,DWORD PTR [rip+0xc01]        # 0xc9c
  0009b: cmp    esi,0xffffffff
  0009e: je     0x3cb7c
  000a4: cmp    WORD PTR [rdi+0x2],0x3
  000a9: jne    0xc2
  000af: cmp    esi,0x6
  000b2: jge    0xc2
  000b8: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000bd: jmp    0xce
  000c2: movabs rax,0x55788c73bb50
  000cc: call   rax
  000ce: mov    QWORD PTR [rbp-0x70],rax
:00003 %10 = @center: Sphere[IvarId(0)]
  000d2: mov    rdi,QWORD PTR [rbp-0x28]
  000d6: cmp    WORD PTR [rdi+0x2],0x3
  000db: jne    0x3cba5
  000e1: mov    rax,QWORD PTR [rdi+0x10]
  000e5: mov    QWORD PTR [rbp-0x78],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
:00005 
  000e9: mov    rdi,QWORD PTR [rbp-0x70]
  000ed: test   rdi,0x7
  000f4: jne    0x3cbbb
  000fa: cmp    DWORD PTR [rdi+0x4],0x25
  000fe: jne    0x3cbbb
  00104: cmp    DWORD PTR [rip+0xffffffffffffeca9],0x26        # 0xffffedb4
  0010b: jne    0x3cbbb
  00111: mov    rax,QWORD PTR [rbx]
  00114: lea    rdi,[rsp-0x18]
  00119: mov    QWORD PTR [rdi],rax
  0011c: mov    QWORD PTR [rbx],rdi
  0011f: mov    QWORD PTR [rsp-0x20],0x0
  00128: mov    QWORD PTR [rsp-0x38],rcx
  0012d: mov    rax,QWORD PTR [rbp-0x70]
  00131: mov    QWORD PTR [rsp-0x38],rax
  00136: mov    rdi,0x1
  0013d: mov    rax,QWORD PTR [rbp-0x78]
  00141: mov    QWORD PTR [rsp-0x40],rax
  00146: mov    QWORD PTR [rsp-0x30],0x0
  0014f: movabs rax,0x800000039
  00159: mov    QWORD PTR [rsp-0x28],rax
  0015e: movabs r13,0x55788deeffb0
  00168: call   0xfffffa13
  0016d: lea    rdi,[rbp-0x8]
  00171: mov    QWORD PTR [rbx],rdi
  00174: movabs r13,0x55788dee8700
  0017e: test   rax,rax
  00181: je     0xffffc3db
  00187: mov    QWORD PTR [rbp-0x40],rax
:00007 %9 = %1.call dir()                   [Ray]
:00008 
  0018b: mov    rdi,QWORD PTR [rbp-0x30]
  0018f: test   rdi,0x7
  00196: jne    0x3cbca
  0019c: cmp    DWORD PTR [rdi+0x4],0x2b
  001a0: jne    0x3cbca
  001a6: cmp    DWORD PTR [rip+0xffffffffffffec07],0x26        # 0xffffedb4
  001ad: jne    0x3cbca
  001b3: mov    esi,DWORD PTR [rip+0xaeb]        # 0xca4
  001b9: cmp    esi,0xffffffff
  001bc: je     0x3cbd9
  001c2: cmp    WORD PTR [rdi+0x2],0x3
  001c7: jne    0x1e0
  001cd: cmp    esi,0x6
  001d0: jge    0x1e0
  001d6: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001db: jmp    0x1ec
  001e0: movabs rax,0x55788c73bb50
  001ea: call   rax
  001ec: mov    QWORD PTR [rbp-0x70],rax
:00010 %4 = %3.call vdot(%9; 1)             [Vec]
:00011 
  001f0: mov    rdi,QWORD PTR [rbp-0x40]
  001f4: test   rdi,0x7
  001fb: jne    0x3cc02
  00201: cmp    DWORD PTR [rdi+0x4],0x25
  00205: jne    0x3cc02
  0020b: cmp    DWORD PTR [rip+0xffffffffffffeba2],0x26        # 0xffffedb4
  00212: jne    0x3cc02
  00218: mov    rax,QWORD PTR [rbx]
  0021b: lea    rdi,[rsp-0x18]
  00220: mov    QWORD PTR [rdi],rax
  00223: mov    QWORD PTR [rbx],rdi
  00226: mov    QWORD PTR [rsp-0x20],0x0
  0022f: mov    QWORD PTR [rsp-0x38],rcx
  00234: mov    rax,QWORD PTR [rbp-0x40]
  00238: mov    QWORD PTR [rsp-0x38],rax
  0023d: mov    rdi,0x1
  00244: mov    rax,QWORD PTR [rbp-0x70]
  00248: mov    QWORD PTR [rsp-0x40],rax
  0024d: mov    QWORD PTR [rsp-0x30],0x0
  00256: movabs rax,0x50000003b
  00260: mov    QWORD PTR [rsp-0x28],rax
  00265: movabs r13,0x55788df32010
  0026f: call   0xfffffaa5
  00274: lea    rdi,[rbp-0x8]
  00278: mov    QWORD PTR [rbx],rdi
  0027b: movabs r13,0x55788dee8760
  00285: test   rax,rax
  00288: je     0xffffc3db
  0028e: mov    QWORD PTR [rbp-0x48],rax
:00013 %10 = %3
  00292: mov    rax,QWORD PTR [rbp-0x40]
  00296: mov    QWORD PTR [rbp-0x78],rax
:00014 %9 = %3.call vdot(%10; 1)            [Vec]
:00015 
  0029a: mov    rdi,QWORD PTR [rbp-0x40]
  0029e: test   rdi,0x7
  002a5: jne    0x3cc11
  002ab: cmp    DWORD PTR [rdi+0x4],0x25
  002af: jne    0x3cc11
  002b5: cmp    DWORD PTR [rip+0xffffffffffffeaf8],0x26        # 0xffffedb4
  002bc: jne    0x3cc11
  002c2: mov    rax,QWORD PTR [rbx]
  002c5: lea    rdi,[rsp-0x18]
  002ca: mov    QWORD PTR [rdi],rax
  002cd: mov    QWORD PTR [rbx],rdi
  002d0: mov    QWORD PTR [rsp-0x20],0x0
  002d9: mov    QWORD PTR [rsp-0x38],rcx
  002de: mov    rax,QWORD PTR [rbp-0x40]
  002e2: mov    QWORD PTR [rsp-0x38],rax
  002e7: mov    rdi,0x1
  002ee: mov    rax,QWORD PTR [rbp-0x78]
  002f2: mov    QWORD PTR [rsp-0x40],rax
  002f7: mov    QWORD PTR [rsp-0x30],0x0
  00300: movabs rax,0x50000003b
  0030a: mov    QWORD PTR [rsp-0x28],rax
  0030f: movabs r13,0x55788df32010
  00319: call   0xfffffaa5
  0031e: lea    rdi,[rbp-0x8]
  00322: mov    QWORD PTR [rbx],rdi
  00325: movabs r13,0x55788dee87a0
  0032f: test   rax,rax
  00332: je     0xffffc3db
  00338: mov    QWORD PTR [rbp-0x70],rax
:00017 %10 = @radius: Sphere[IvarId(1)]
  0033c: mov    rdi,QWORD PTR [rbp-0x28]
  00340: cmp    WORD PTR [rdi+0x2],0x3
  00345: jne    0x3cc20
  0034b: mov    rax,QWORD PTR [rdi+0x18]
  0034f: mov    QWORD PTR [rbp-0x78],rax
:00018 %11 = @radius: Sphere[IvarId(1)]
  00353: mov    rdi,QWORD PTR [rbp-0x28]
  00357: cmp    WORD PTR [rdi+0x2],0x3
  0035c: jne    0x3cc36
  00362: mov    rax,QWORD PTR [rdi+0x18]
  00366: mov    QWORD PTR [rbp-0x80],rax
:00019 %10 = %10 * %11                      [Float][Float]
  0036a: mov    rdi,QWORD PTR [rbp-0x78]
  0036e: test   rdi,0x1
  00375: jne    0x3cc4c
  0037b: test   rdi,0x2
  00382: je     0x3be
  00388: xorps  xmm2,xmm2
  0038b: movabs rax,0x8000000000000002
  00395: cmp    rdi,rax
  00398: je     0x3d0
  0039e: mov    rax,rdi
  003a1: sar    rax,0x3f
  003a5: add    rax,0x2
  003a9: and    rdi,0xfffffffffffffffc
  003ad: or     rdi,rax
  003b0: rol    rdi,0x3d
  003b4: movq   xmm2,rdi
  003b9: jmp    0x3d0
  003be: call   0xffffc414
  003c3: test   rax,rax
  003c6: je     0x3cc4c
  003cc: movq   xmm2,xmm0
  003d0: mov    rdi,QWORD PTR [rbp-0x80]
  003d4: test   rdi,0x1
  003db: jne    0x3cc5b
  003e1: test   rdi,0x2
  003e8: je     0x424
  003ee: xorps  xmm3,xmm3
  003f1: movabs rax,0x8000000000000002
  003fb: cmp    rdi,rax
  003fe: je     0x436
  00404: mov    rax,rdi
  00407: sar    rax,0x3f
  0040b: add    rax,0x2
  0040f: and    rdi,0xfffffffffffffffc
  00413: or     rdi,rax
  00416: rol    rdi,0x3d
  0041a: movq   xmm3,rdi
  0041f: jmp    0x436
  00424: call   0xffffc414
  00429: test   rax,rax
  0042c: je     0x3cc5b
  00432: movq   xmm3,xmm0
  00436: mulsd  xmm2,xmm3
:00020 %5 = %9 - %10                        [Float][Float]
  0043a: mov    rdi,QWORD PTR [rbp-0x70]
  0043e: test   rdi,0x1
  00445: jne    0x3cc6a
  0044b: test   rdi,0x2
  00452: je     0x48e
  00458: xorps  xmm4,xmm4
  0045b: movabs rax,0x8000000000000002
  00465: cmp    rdi,rax
  00468: je     0x4a0
  0046e: mov    rax,rdi
  00471: sar    rax,0x3f
  00475: add    rax,0x2
  00479: and    rdi,0xfffffffffffffffc
  0047d: or     rdi,rax
  00480: rol    rdi,0x3d
  00484: movq   xmm4,rdi
  00489: jmp    0x4a0
  0048e: call   0xffffc414
  00493: test   rax,rax
  00496: je     0x3cc6a
  0049c: movq   xmm4,xmm0
  004a0: movq   xmm5,xmm4
  004a4: subsd  xmm5,xmm2
:00021 %9 = %4 * %4                         [Float][Float]
  004a8: mov    rdi,QWORD PTR [rbp-0x48]
  004ac: test   rdi,0x1
  004b3: jne    0x3cc86
  004b9: test   rdi,0x2
  004c0: je     0x4fc
  004c6: xorps  xmm6,xmm6
  004c9: movabs rax,0x8000000000000002
  004d3: cmp    rdi,rax
  004d6: je     0x50e
  004dc: mov    rax,rdi
  004df: sar    rax,0x3f
  004e3: add    rax,0x2
  004e7: and    rdi,0xfffffffffffffffc
  004eb: or     rdi,rax
  004ee: rol    rdi,0x3d
  004f2: movq   xmm6,rdi
  004f7: jmp    0x50e
  004fc: call   0xffffc414
  00501: test   rax,rax
  00504: je     0x3cc86
  0050a: movq   xmm6,xmm0
  0050e: movq   xmm4,xmm6
  00512: mulsd  xmm4,xmm6
:00022 %6 = %9 - %5                         [Float][Float]
  00516: movq   xmm7,xmm4
  0051a: subsd  xmm7,xmm5
:00023 %9 = literal[0.0]
  0051e: movq   xmm4,QWORD PTR [rip+0x78a]        # 0xcb0
:00024 _%9 = %6 > %9                        [Float][Float]
:00025 condnotbr _%9 =>:00113
  00526: ucomisd xmm7,xmm4
  0052a: jbe    0x3d51b
:00026 %9 = %4
:00027 %9 = neg %9                          [<INVALID>]
  00530: mov    rdi,0x4
  00537: sub    DWORD PTR [rip+0x77a],0x1        # 0xcb8
  0053e: jne    0x3ccaf
  00544: mov    rdi,r12
  00547: mov    esi,DWORD PTR [rbp-0x18]
  0054a: mov    rdx,QWORD PTR [rbp-0x28]
  0054e: movabs rax,0x55788c79da60
  00558: call   rax
  0055a: mov    rdi,0x4
  00561: jmp    0x3ccaf
:00028 %11 = const[Math]                    [<INVALID>]
  00566: mov    rax,QWORD PTR [rip+0xffffffffffffe853]        # 0xffffedc0
  0056d: cmp    rax,QWORD PTR [rip+0x75c]        # 0xcd0
  00574: jne    0x3ccf2
  0057a: mov    rax,QWORD PTR [rip+0x73f]        # 0xcc0
  00581: mov    QWORD PTR [rbp-0x80],rax
:00029 %12 = %6
:00030 %10 = %11.call sqrt(%12; 1)          [<INVALID>]
:00031 
  00585: mov    rdi,0x4
  0058c: sub    DWORD PTR [rip+0x745],0x1        # 0xcd8
  00593: jne    0x3cd6e
  00599: mov    rdi,r12
  0059c: mov    esi,DWORD PTR [rbp-0x18]
  0059f: mov    rdx,QWORD PTR [rbp-0x28]
  005a3: movabs rax,0x55788c79da60
  005ad: call   rax
  005af: mov    rdi,0x4
  005b6: jmp    0x3cd6e
:00033 %7 = %9 - %10                        [<INVALID>][<INVALID>]
  005bb: mov    rdi,0x4
  005c2: sub    DWORD PTR [rip+0x713],0x1        # 0xcdc
  005c9: jne    0x3cdb8
  005cf: mov    rdi,r12
  005d2: mov    esi,DWORD PTR [rbp-0x18]
  005d5: mov    rdx,QWORD PTR [rbp-0x28]
  005d9: movabs rax,0x55788c79da60
  005e3: call   rax
  005e5: mov    rdi,0x4
  005ec: jmp    0x3cdb8
:00034 %9 = literal[0.0]
  005f1: movq   xmm3,QWORD PTR [rip+0x6e7]        # 0xce0
:00035 _%9 = %7 > %9                        [<INVALID>][<INVALID>]
:00036 condnotbr _%9 =>:00112
  005f9: movq   xmm0,xmm3
  005fd: call   0xffffc507
  00602: mov    QWORD PTR [rbp-0x70],rax
  00606: mov    rdi,QWORD PTR [rbp-0x60]
  0060a: mov    rsi,QWORD PTR [rbp-0x70]
  0060e: test   rdi,0x1
  00615: je     0x3ce02
  0061b: test   rsi,0x1
  00622: je     0x3ce02
  00628: cmp    rdi,rsi
  0062b: jle    0x3d453
:00037 %9 = %2.call t()                     [<INVALID>]
:00038 
  00631: mov    rdi,0x4
  00638: sub    DWORD PTR [rip+0x6a9],0x1        # 0xce8
  0063f: jne    0x3ce57
  00645: mov    rdi,r12
  00648: mov    esi,DWORD PTR [rbp-0x18]
  0064b: mov    rdx,QWORD PTR [rbp-0x28]
  0064f: movabs rax,0x55788c79da60
  00659: call   rax
  0065b: mov    rdi,0x4
  00662: jmp    0x3ce57
:00040 _%9 = %7 < %9                        [<INVALID>][<INVALID>]
:00041 condnotbr _%9 =>:00112
  00667: mov    rdi,QWORD PTR [rbp-0x60]
  0066b: mov    rsi,QWORD PTR [rbp-0x70]
  0066f: test   rdi,0x1
  00676: je     0x3ce94
  0067c: test   rsi,0x1
  00683: je     0x3ce94
  00689: cmp    rdi,rsi
  0068c: jge    0x3d49a
:00042 _ = %2.call t=(%7; 1)                [<INVALID>]
:00043 
  00692: mov    rdi,0x4
  00699: sub    DWORD PTR [rip+0x64c],0x1        # 0xcec
  006a0: jne    0x3cee9
  006a6: mov    rdi,r12
  006a9: mov    esi,DWORD PTR [rbp-0x18]
  006ac: mov    rdx,QWORD PTR [rbp-0x28]
  006b0: movabs rax,0x55788c79da60
  006ba: call   rax
  006bc: mov    rdi,0x4
  006c3: jmp    0x3cee9
:00045 %9 = literal[true]
  006c8: mov    rax,0x1c
  006cf: mov    QWORD PTR [rbp-0x70],rax
:00046 _ = %2.call hit=(%9; 1)              [<INVALID>]
:00047 
  006d3: mov    rdi,0x4
  006da: sub    DWORD PTR [rip+0x60f],0x1        # 0xcf0
  006e1: jne    0x3cf26
  006e7: mov    rdi,r12
  006ea: mov    esi,DWORD PTR [rbp-0x18]
  006ed: mov    rdx,QWORD PTR [rbp-0x28]
  006f1: movabs rax,0x55788c79da60
  006fb: call   rax
  006fd: mov    rdi,0x4
  00704: jmp    0x3cf26
:00049 %10 = const[Vec]                     [<INVALID>]
  00709: mov    rax,QWORD PTR [rip+0xffffffffffffe6b0]        # 0xffffedc0
  00710: cmp    rax,QWORD PTR [rip+0x5f9]        # 0xd10
  00717: jne    0x3cf63
  0071d: mov    rax,QWORD PTR [rip+0x5dc]        # 0xd00
  00724: mov    QWORD PTR [rbp-0x78],rax
:00050 %12 = %1.call org()                  [<INVALID>]
:00051 
  00728: mov    rdi,0x4
  0072f: sub    DWORD PTR [rip+0x5e2],0x1        # 0xd18
  00736: jne    0x3cfd3
  0073c: mov    rdi,r12
  0073f: mov    esi,DWORD PTR [rbp-0x18]
  00742: mov    rdx,QWORD PTR [rbp-0x28]
  00746: movabs rax,0x55788c79da60
  00750: call   rax
  00752: mov    rdi,0x4
  00759: jmp    0x3cfd3
:00053 %11 = %12.call x()                   [<INVALID>]
:00054 
  0075e: mov    rdi,0x4
  00765: sub    DWORD PTR [rip+0x5b0],0x1        # 0xd1c
  0076c: jne    0x3d003
  00772: mov    rdi,r12
  00775: mov    esi,DWORD PTR [rbp-0x18]
  00778: mov    rdx,QWORD PTR [rbp-0x28]
  0077c: movabs rax,0x55788c79da60
  00786: call   rax
  00788: mov    rdi,0x4
  0078f: jmp    0x3d003
:00056 %13 = %1.call dir()                  [<INVALID>]
:00057 
  00794: mov    rdi,0x4
  0079b: sub    DWORD PTR [rip+0x57e],0x1        # 0xd20
  007a2: jne    0x3d033
  007a8: mov    rdi,r12
  007ab: mov    esi,DWORD PTR [rbp-0x18]
  007ae: mov    rdx,QWORD PTR [rbp-0x28]
  007b2: movabs rax,0x55788c79da60
  007bc: call   rax
  007be: mov    rdi,0x4
  007c5: jmp    0x3d033
:00059 %12 = %13.call x()                   [<INVALID>]
:00060 
  007ca: mov    rdi,0x4
  007d1: sub    DWORD PTR [rip+0x54c],0x1        # 0xd24
  007d8: jne    0x3d063
  007de: mov    rdi,r12
  007e1: mov    esi,DWORD PTR [rbp-0x18]
  007e4: mov    rdx,QWORD PTR [rbp-0x28]
  007e8: movabs rax,0x55788c79da60
  007f2: call   rax
  007f4: mov    rdi,0x4
  007fb: jmp    0x3d063
:00062 %12 = %12 * %7                       [<INVALID>][<INVALID>]
  00800: mov    rdi,0x4
  00807: sub    DWORD PTR [rip+0x51a],0x1        # 0xd28
  0080e: jne    0x3d093
  00814: mov    rdi,r12
  00817: mov    esi,DWORD PTR [rbp-0x18]
  0081a: mov    rdx,QWORD PTR [rbp-0x28]
  0081e: movabs rax,0x55788c79da60
  00828: call   rax
  0082a: mov    rdi,0x4
  00831: jmp    0x3d093
:00063 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00836: mov    rdi,0x4
  0083d: sub    DWORD PTR [rip+0x4e8],0x1        # 0xd2c
  00844: jne    0x3d0c3
  0084a: mov    rdi,r12
  0084d: mov    esi,DWORD PTR [rbp-0x18]
  00850: mov    rdx,QWORD PTR [rbp-0x28]
  00854: movabs rax,0x55788c79da60
  0085e: call   rax
  00860: mov    rdi,0x4
  00867: jmp    0x3d0c3
:00064 %13 = %1.call org()                  [<INVALID>]
:00065 
  0086c: mov    rdi,0x4
  00873: sub    DWORD PTR [rip+0x4b6],0x1        # 0xd30
  0087a: jne    0x3d0f3
  00880: mov    rdi,r12
  00883: mov    esi,DWORD PTR [rbp-0x18]
  00886: mov    rdx,QWORD PTR [rbp-0x28]
  0088a: movabs rax,0x55788c79da60
  00894: call   rax
  00896: mov    rdi,0x4
  0089d: jmp    0x3d0f3
:00067 %12 = %13.call y()                   [<INVALID>]
:00068 
  008a2: mov    rdi,0x4
  008a9: sub    DWORD PTR [rip+0x484],0x1        # 0xd34
  008b0: jne    0x3d123
  008b6: mov    rdi,r12
  008b9: mov    esi,DWORD PTR [rbp-0x18]
  008bc: mov    rdx,QWORD PTR [rbp-0x28]
  008c0: movabs rax,0x55788c79da60
  008ca: call   rax
  008cc: mov    rdi,0x4
  008d3: jmp    0x3d123
:00070 %14 = %1.call dir()                  [<INVALID>]
:00071 
  008d8: mov    rdi,0x4
  008df: sub    DWORD PTR [rip+0x452],0x1        # 0xd38
  008e6: jne    0x3d153
  008ec: mov    rdi,r12
  008ef: mov    esi,DWORD PTR [rbp-0x18]
  008f2: mov    rdx,QWORD PTR [rbp-0x28]
  008f6: movabs rax,0x55788c79da60
  00900: call   rax
  00902: mov    rdi,0x4
  00909: jmp    0x3d153
:00073 %13 = %14.call y()                   [<INVALID>]
:00074 
  0090e: mov    rdi,0x4
  00915: sub    DWORD PTR [rip+0x420],0x1        # 0xd3c
  0091c: jne    0x3d183
  00922: mov    rdi,r12
  00925: mov    esi,DWORD PTR [rbp-0x18]
  00928: mov    rdx,QWORD PTR [rbp-0x28]
  0092c: movabs rax,0x55788c79da60
  00936: call   rax
  00938: mov    rdi,0x4
  0093f: jmp    0x3d183
:00076 %13 = %13 * %7                       [<INVALID>][<INVALID>]
  00944: mov    rdi,0x4
  0094b: sub    DWORD PTR [rip+0x3ee],0x1        # 0xd40
  00952: jne    0x3d1b3
  00958: mov    rdi,r12
  0095b: mov    esi,DWORD PTR [rbp-0x18]
  0095e: mov    rdx,QWORD PTR [rbp-0x28]
  00962: movabs rax,0x55788c79da60
  0096c: call   rax
  0096e: mov    rdi,0x4
  00975: jmp    0x3d1b3
:00077 %12 = %12 + %13                      [<INVALID>][<INVALID>]
  0097a: mov    rdi,0x4
  00981: sub    DWORD PTR [rip+0x3bc],0x1        # 0xd44
  00988: jne    0x3d1e3
  0098e: mov    rdi,r12
  00991: mov    esi,DWORD PTR [rbp-0x18]
  00994: mov    rdx,QWORD PTR [rbp-0x28]
  00998: movabs rax,0x55788c79da60
  009a2: call   rax
  009a4: mov    rdi,0x4
  009ab: jmp    0x3d1e3
:00078 %14 = %1.call org()                  [<INVALID>]
:00079 
  009b0: mov    rdi,0x4
  009b7: sub    DWORD PTR [rip+0x38a],0x1        # 0xd48
  009be: jne    0x3d213
  009c4: mov    rdi,r12
  009c7: mov    esi,DWORD PTR [rbp-0x18]
  009ca: mov    rdx,QWORD PTR [rbp-0x28]
  009ce: movabs rax,0x55788c79da60
  009d8: call   rax
  009da: mov    rdi,0x4
  009e1: jmp    0x3d213
:00081 %13 = %14.call z()                   [<INVALID>]
:00082 
  009e6: mov    rdi,0x4
  009ed: sub    DWORD PTR [rip+0x358],0x1        # 0xd4c
  009f4: jne    0x3d243
  009fa: mov    rdi,r12
  009fd: mov    esi,DWORD PTR [rbp-0x18]
  00a00: mov    rdx,QWORD PTR [rbp-0x28]
  00a04: movabs rax,0x55788c79da60
  00a0e: call   rax
  00a10: mov    rdi,0x4
  00a17: jmp    0x3d243
:00084 %15 = %1.call dir()                  [<INVALID>]
:00085 
  00a1c: mov    rdi,0x4
  00a23: sub    DWORD PTR [rip+0x326],0x1        # 0xd50
  00a2a: jne    0x3d273
  00a30: mov    rdi,r12
  00a33: mov    esi,DWORD PTR [rbp-0x18]
  00a36: mov    rdx,QWORD PTR [rbp-0x28]
  00a3a: movabs rax,0x55788c79da60
  00a44: call   rax
  00a46: mov    rdi,0x4
  00a4d: jmp    0x3d273
:00087 %14 = %15.call z()                   [<INVALID>]
:00088 
  00a52: mov    rdi,0x4
  00a59: sub    DWORD PTR [rip+0x2f4],0x1        # 0xd54
  00a60: jne    0x3d2a3
  00a66: mov    rdi,r12
  00a69: mov    esi,DWORD PTR [rbp-0x18]
  00a6c: mov    rdx,QWORD PTR [rbp-0x28]
  00a70: movabs rax,0x55788c79da60
  00a7a: call   rax
  00a7c: mov    rdi,0x4
  00a83: jmp    0x3d2a3
:00090 %14 = %14 * %7                       [<INVALID>][<INVALID>]
  00a88: mov    rdi,0x4
  00a8f: sub    DWORD PTR [rip+0x2c2],0x1        # 0xd58
  00a96: jne    0x3d2d3
  00a9c: mov    rdi,r12
  00a9f: mov    esi,DWORD PTR [rbp-0x18]
  00aa2: mov    rdx,QWORD PTR [rbp-0x28]
  00aa6: movabs rax,0x55788c79da60
  00ab0: call   rax
  00ab2: mov    rdi,0x4
  00ab9: jmp    0x3d2d3
:00091 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  00abe: mov    rdi,0x4
  00ac5: sub    DWORD PTR [rip+0x290],0x1        # 0xd5c
  00acc: jne    0x3d303
  00ad2: mov    rdi,r12
  00ad5: mov    esi,DWORD PTR [rbp-0x18]
  00ad8: mov    rdx,QWORD PTR [rbp-0x28]
  00adc: movabs rax,0x55788c79da60
  00ae6: call   rax
  00ae8: mov    rdi,0x4
  00aef: jmp    0x3d303
:00092 %9 = %10.call new(%11; 3)            [<INVALID>]
:00093 
  00af4: mov    rdi,0x4
  00afb: sub    DWORD PTR [rip+0x25e],0x1        # 0xd60
  00b02: jne    0x3d333
  00b08: mov    rdi,r12
  00b0b: mov    esi,DWORD PTR [rbp-0x18]
  00b0e: mov    rdx,QWORD PTR [rbp-0x28]
  00b12: movabs rax,0x55788c79da60
  00b1c: call   rax
  00b1e: mov    rdi,0x4
  00b25: jmp    0x3d333
:00095 _ = %2.call pl=(%9; 1)               [<INVALID>]
:00096 
  00b2a: mov    rdi,0x4
  00b31: sub    DWORD PTR [rip+0x22c],0x1        # 0xd64
  00b38: jne    0x3d363
  00b3e: mov    rdi,r12
  00b41: mov    esi,DWORD PTR [rbp-0x18]
  00b44: mov    rdx,QWORD PTR [rbp-0x28]
  00b48: movabs rax,0x55788c79da60
  00b52: call   rax
  00b54: mov    rdi,0x4
  00b5b: jmp    0x3d363
:00098 %9 = %2.call pl()                    [<INVALID>]
:00099 
  00b60: mov    rdi,0x4
  00b67: sub    DWORD PTR [rip+0x1fa],0x1        # 0xd68
  00b6e: jne    0x3d393
  00b74: mov    rdi,r12
  00b77: mov    esi,DWORD PTR [rbp-0x18]
  00b7a: mov    rdx,QWORD PTR [rbp-0x28]
  00b7e: movabs rax,0x55788c79da60
  00b88: call   rax
  00b8a: mov    rdi,0x4
  00b91: jmp    0x3d393
:00101 %10 = @center: <INVALID>[IvarId(0)]
  00b96: mov    rdi,QWORD PTR [rbp-0x28]
  00b9a: sub    rsp,0x20
  00b9e: movq   QWORD PTR [rsp],xmm5
  00ba3: movq   QWORD PTR [rsp+0x8],xmm6
  00ba9: movq   QWORD PTR [rsp+0x10],xmm7
  00baf: mov    rsi,0x7b
  00bb6: mov    rdx,r12
  00bb9: movabs rax,0x55788c798100
  00bc3: call   rax
  00bc5: movq   xmm5,QWORD PTR [rsp]
  00bca: movq   xmm6,QWORD PTR [rsp+0x8]
  00bd0: movq   xmm7,QWORD PTR [rsp+0x10]
  00bd6: add    rsp,0x20
  00bda: mov    QWORD PTR [rbp-0x78],rax
:00102 %8 = %9.call vsub(%10; 1)            [<INVALID>]
:00103 
  00bde: mov    rdi,0x4
  00be5: sub    DWORD PTR [rip+0x180],0x1        # 0xd6c
  00bec: jne    0x3d3c3
  00bf2: mov    rdi,r12
  00bf5: mov    esi,DWORD PTR [rbp-0x18]
  00bf8: mov    rdx,QWORD PTR [rbp-0x28]
  00bfc: movabs rax,0x55788c79da60
  00c06: call   rax
  00c08: mov    rdi,0x4
  00c0f: jmp    0x3d3c3
:00105 %9 = %8.call vnormalize()            [<INVALID>]
:00106 
  00c14: mov    rdi,0x4
  00c1b: sub    DWORD PTR [rip+0x14e],0x1        # 0xd70
  00c22: jne    0x3d3f3
  00c28: mov    rdi,r12
  00c2b: mov    esi,DWORD PTR [rbp-0x18]
  00c2e: mov    rdx,QWORD PTR [rbp-0x28]
  00c32: movabs rax,0x55788c79da60
  00c3c: call   rax
  00c3e: mov    rdi,0x4
  00c45: jmp    0x3d3f3
:00108 _ = %2.call n=(%9; 1)                [<INVALID>]
:00109 
  00c4a: mov    rdi,0x4
  00c51: sub    DWORD PTR [rip+0x11c],0x1        # 0xd74
  00c58: jne    0x3d423
  00c5e: mov    rdi,r12
  00c61: mov    esi,DWORD PTR [rbp-0x18]
  00c64: mov    rdx,QWORD PTR [rbp-0x28]
  00c68: movabs rax,0x55788c79da60
  00c72: call   rax
  00c74: mov    rdi,0x4
  00c7b: jmp    0x3d423
:00111 br =>:00112
  00c80: jmp    0x3d4e1
:00112 br =>:00113
  00c85: jmp    0x3d568
:00113 %9 = nil
  00c8a: mov    QWORD PTR [rbp-0x70],0x4
:00114 ret %9
  00c92: mov    rax,QWORD PTR [rbp-0x70]
  00c96: leave  
  00c97: ret    
==> start whole compile: vsub FuncId(57) self_class:Vec start:[00000] bytecode:0x55788deeffb0
<== finished compile. elapsed:32.5µs
offset:Pos(18904) code: 1364 bytes  data: 52 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x70
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    QWORD PTR [rbp-0x50],rax
  0001f: mov    QWORD PTR [rbp-0x58],rax
  00023: mov    QWORD PTR [rbp-0x60],rax
  00027: mov    rdi,QWORD PTR [rbp-0x28]
  0002b: test   rdi,0x7
  00032: jne    0x3c863
  00038: cmp    DWORD PTR [rdi+0x4],0x25
  0003c: jne    0x3c863
:00000 %3 = const[Vec]                      [Vec]
  00042: mov    rax,QWORD PTR [rip+0xffffffffffffdfff]        # 0xffffe048
  00049: cmp    rax,QWORD PTR [rip+0x518]        # 0x568
  00050: jne    0x3c872
  00056: mov    rax,QWORD PTR [rip+0x4fb]        # 0x558
  0005d: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = @x: Vec[IvarId(0)]
  00061: mov    rdi,QWORD PTR [rbp-0x28]
  00065: cmp    WORD PTR [rdi+0x2],0x3
  0006a: jne    0x3c8b8
  00070: mov    rax,QWORD PTR [rdi+0x10]
  00074: mov    QWORD PTR [rbp-0x48],rax
:00002 %5 = %1.call x()                     [Vec]
:00003 
  00078: mov    rdi,QWORD PTR [rbp-0x30]
  0007c: test   rdi,0x7
  00083: jne    0x3c8ce
  00089: cmp    DWORD PTR [rdi+0x4],0x25
  0008d: jne    0x3c8ce
  00093: cmp    DWORD PTR [rip+0xffffffffffffdfa2],0x26        # 0xffffe03c
  0009a: jne    0x3c8ce
  000a0: mov    esi,DWORD PTR [rip+0x4ce]        # 0x574
  000a6: cmp    esi,0xffffffff
  000a9: je     0x3c8dd
  000af: cmp    WORD PTR [rdi+0x2],0x3
  000b4: jne    0xcd
  000ba: cmp    esi,0x6
  000bd: jge    0xcd
  000c3: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c8: jmp    0xd9
  000cd: movabs rax,0x55788c73bb50
  000d7: call   rax
  000d9: mov    QWORD PTR [rbp-0x50],rax
:00005 %4 = %4 - %5                         [Float][Float]
  000dd: mov    rdi,QWORD PTR [rbp-0x48]
  000e1: test   rdi,0x1
  000e8: jne    0x3c906
  000ee: test   rdi,0x2
  000f5: je     0x131
  000fb: xorps  xmm2,xmm2
  000fe: movabs rax,0x8000000000000002
  00108: cmp    rdi,rax
  0010b: je     0x143
  00111: mov    rax,rdi
  00114: sar    rax,0x3f
  00118: add    rax,0x2
  0011c: and    rdi,0xfffffffffffffffc
  00120: or     rdi,rax
  00123: rol    rdi,0x3d
  00127: movq   xmm2,rdi
  0012c: jmp    0x143
  00131: call   0xffffb69c
  00136: test   rax,rax
  00139: je     0x3c906
  0013f: movq   xmm2,xmm0
  00143: mov    rdi,QWORD PTR [rbp-0x50]
  00147: test   rdi,0x1
  0014e: jne    0x3c915
  00154: test   rdi,0x2
  0015b: je     0x197
  00161: xorps  xmm3,xmm3
  00164: movabs rax,0x8000000000000002
  0016e: cmp    rdi,rax
  00171: je     0x1a9
  00177: mov    rax,rdi
  0017a: sar    rax,0x3f
  0017e: add    rax,0x2
  00182: and    rdi,0xfffffffffffffffc
  00186: or     rdi,rax
  00189: rol    rdi,0x3d
  0018d: movq   xmm3,rdi
  00192: jmp    0x1a9
  00197: call   0xffffb69c
  0019c: test   rax,rax
  0019f: je     0x3c915
  001a5: movq   xmm3,xmm0
  001a9: subsd  xmm2,xmm3
:00006 %5 = @y: Vec[IvarId(1)]
  001ad: mov    rdi,QWORD PTR [rbp-0x28]
  001b1: cmp    WORD PTR [rdi+0x2],0x3
  001b6: jne    0x3c924
  001bc: mov    rax,QWORD PTR [rdi+0x18]
  001c0: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = %1.call y()                     [Vec]
:00008 
  001c4: mov    rdi,QWORD PTR [rbp-0x30]
  001c8: test   rdi,0x7
  001cf: jne    0x3c94c
  001d5: cmp    DWORD PTR [rdi+0x4],0x25
  001d9: jne    0x3c94c
  001df: cmp    DWORD PTR [rip+0xffffffffffffde56],0x26        # 0xffffe03c
  001e6: jne    0x3c94c
  001ec: mov    esi,DWORD PTR [rip+0x38a]        # 0x57c
  001f2: cmp    esi,0xffffffff
  001f5: je     0x3c968
  001fb: cmp    WORD PTR [rdi+0x2],0x3
  00200: jne    0x219
  00206: cmp    esi,0x6
  00209: jge    0x219
  0020f: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00214: jmp    0x237
  00219: sub    rsp,0x10
  0021d: movq   QWORD PTR [rsp],xmm2
  00222: movabs rax,0x55788c73bb50
  0022c: call   rax
  0022e: movq   xmm2,QWORD PTR [rsp]
  00233: add    rsp,0x10
  00237: mov    QWORD PTR [rbp-0x58],rax
:00010 %5 = %5 - %6                         [Float][Float]
  0023b: mov    rdi,QWORD PTR [rbp-0x50]
  0023f: test   rdi,0x1
  00246: jne    0x3c9a3
  0024c: test   rdi,0x2
  00253: je     0x28f
  00259: xorps  xmm3,xmm3
  0025c: movabs rax,0x8000000000000002
  00266: cmp    rdi,rax
  00269: je     0x2a1
  0026f: mov    rax,rdi
  00272: sar    rax,0x3f
  00276: add    rax,0x2
  0027a: and    rdi,0xfffffffffffffffc
  0027e: or     rdi,rax
  00281: rol    rdi,0x3d
  00285: movq   xmm3,rdi
  0028a: jmp    0x2a1
  0028f: call   0xffffb69c
  00294: test   rax,rax
  00297: je     0x3c9a3
  0029d: movq   xmm3,xmm0
  002a1: mov    rdi,QWORD PTR [rbp-0x58]
  002a5: test   rdi,0x1
  002ac: jne    0x3c9bf
  002b2: test   rdi,0x2
  002b9: je     0x2f5
  002bf: xorps  xmm4,xmm4
  002c2: movabs rax,0x8000000000000002
  002cc: cmp    rdi,rax
  002cf: je     0x307
  002d5: mov    rax,rdi
  002d8: sar    rax,0x3f
  002dc: add    rax,0x2
  002e0: and    rdi,0xfffffffffffffffc
  002e4: or     rdi,rax
  002e7: rol    rdi,0x3d
  002eb: movq   xmm4,rdi
  002f0: jmp    0x307
  002f5: call   0xffffb69c
  002fa: test   rax,rax
  002fd: je     0x3c9bf
  00303: movq   xmm4,xmm0
  00307: subsd  xmm3,xmm4
:00011 %6 = @z: Vec[IvarId(2)]
  0030b: mov    rdi,QWORD PTR [rbp-0x28]
  0030f: cmp    WORD PTR [rdi+0x2],0x3
  00314: jne    0x3c9db
  0031a: mov    rax,QWORD PTR [rdi+0x20]
  0031e: mov    QWORD PTR [rbp-0x58],rax
:00012 %7 = %1.call z()                     [Vec]
:00013 
  00322: mov    rdi,QWORD PTR [rbp-0x30]
  00326: test   rdi,0x7
  0032d: jne    0x3ca0f
  00333: cmp    DWORD PTR [rdi+0x4],0x25
  00337: jne    0x3ca0f
  0033d: cmp    DWORD PTR [rip+0xffffffffffffdcf8],0x26        # 0xffffe03c
  00344: jne    0x3ca0f
  0034a: mov    esi,DWORD PTR [rip+0x234]        # 0x584
  00350: cmp    esi,0xffffffff
  00353: je     0x3ca38
  00359: cmp    WORD PTR [rdi+0x2],0x3
  0035e: jne    0x377
  00364: cmp    esi,0x6
  00367: jge    0x377
  0036d: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00372: jmp    0x3a1
  00377: sub    rsp,0x10
  0037b: movq   QWORD PTR [rsp],xmm2
  00380: movq   QWORD PTR [rsp+0x8],xmm3
  00386: movabs rax,0x55788c73bb50
  00390: call   rax
  00392: movq   xmm2,QWORD PTR [rsp]
  00397: movq   xmm3,QWORD PTR [rsp+0x8]
  0039d: add    rsp,0x10
  003a1: mov    QWORD PTR [rbp-0x60],rax
:00015 %6 = %6 - %7                         [Float][Float]
  003a5: mov    rdi,QWORD PTR [rbp-0x58]
  003a9: test   rdi,0x1
  003b0: jne    0x3ca7f
  003b6: test   rdi,0x2
  003bd: je     0x3f9
  003c3: xorps  xmm4,xmm4
  003c6: movabs rax,0x8000000000000002
  003d0: cmp    rdi,rax
  003d3: je     0x40b
  003d9: mov    rax,rdi
  003dc: sar    rax,0x3f
  003e0: add    rax,0x2
  003e4: and    rdi,0xfffffffffffffffc
  003e8: or     rdi,rax
  003eb: rol    rdi,0x3d
  003ef: movq   xmm4,rdi
  003f4: jmp    0x40b
  003f9: call   0xffffb69c
  003fe: test   rax,rax
  00401: je     0x3ca7f
  00407: movq   xmm4,xmm0
  0040b: mov    rdi,QWORD PTR [rbp-0x60]
  0040f: test   rdi,0x1
  00416: jne    0x3caa8
  0041c: test   rdi,0x2
  00423: je     0x45f
  00429: xorps  xmm5,xmm5
  0042c: movabs rax,0x8000000000000002
  00436: cmp    rdi,rax
  00439: je     0x471
  0043f: mov    rax,rdi
  00442: sar    rax,0x3f
  00446: add    rax,0x2
  0044a: and    rdi,0xfffffffffffffffc
  0044e: or     rdi,rax
  00451: rol    rdi,0x3d
  00455: movq   xmm5,rdi
  0045a: jmp    0x471
  0045f: call   0xffffb69c
  00464: test   rax,rax
  00467: je     0x3caa8
  0046d: movq   xmm5,xmm0
  00471: subsd  xmm4,xmm5
:00016 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00017 
  00475: movq   xmm0,xmm2
  00479: call   0xffffb78f
  0047e: mov    QWORD PTR [rbp-0x48],rax
  00482: movq   xmm0,xmm3
  00486: call   0xffffb78f
  0048b: mov    QWORD PTR [rbp-0x50],rax
  0048f: movq   xmm0,xmm4
  00493: call   0xffffb78f
  00498: mov    QWORD PTR [rbp-0x58],rax
  0049c: mov    rdi,QWORD PTR [rbp-0x40]
  004a0: test   rdi,0x7
  004a7: jne    0x3cad1
  004ad: cmp    DWORD PTR [rdi+0x4],0x26
  004b1: jne    0x3cad1
  004b7: cmp    DWORD PTR [rip+0xffffffffffffdb7e],0x26        # 0xffffe03c
  004be: jne    0x3cad1
  004c4: mov    r9,0x0
  004cb: sub    rsp,0x20
  004cf: movq   QWORD PTR [rsp],xmm2
  004d4: movq   QWORD PTR [rsp+0x8],xmm3
  004da: movq   QWORD PTR [rsp+0x10],xmm4
  004e0: movq   QWORD PTR [rsp+0x18],xmm5
  004e6: mov    rdx,rdi
  004e9: mov    rax,QWORD PTR [rbx]
  004ec: lea    rdi,[rsp-0x18]
  004f1: mov    QWORD PTR [rdi],rax
  004f4: mov    QWORD PTR [rbx],rdi
  004f7: mov    QWORD PTR [rsp-0x20],0x0
  00500: mov    QWORD PTR [rsp-0x38],rcx
  00505: lea    rcx,[rbp-0x48]
  00509: mov    r8,0x3
  00510: call   0x3cae0
  00515: lea    rdi,[rbp-0x8]
  00519: mov    QWORD PTR [rbx],rdi
  0051c: movq   xmm2,QWORD PTR [rsp]
  00521: movq   xmm3,QWORD PTR [rsp+0x8]
  00527: movq   xmm4,QWORD PTR [rsp+0x10]
  0052d: movq   xmm5,QWORD PTR [rsp+0x18]
  00533: add    rsp,0x20
  00537: movabs r13,0x55788def00d0
  00541: test   rax,rax
  00544: je     0xffffb663
  0054a: mov    QWORD PTR [rbp-0x38],rax
:00019 ret %2
  0054e: mov    rax,QWORD PTR [rbp-0x38]
  00552: leave  
  00553: ret    
==> start whole compile: <unnamed> FuncId(76) self_class:Scene start:[00000] bytecode:0x55788df2ec10
<== finished compile. elapsed:117.8µs
offset:Pos(20591) code: 6214 bytes  data: 335 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xd0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00064: ff 	mov    QWORD PTR [rbp-0xb8],rax
  0006b: ff 	mov    QWORD PTR [rbp-0xc0],rax
  00072:    	mov    rdi,QWORD PTR [rbp-0x28]
  00076: 00 	test   rdi,0x7
  0007d:    	jne    0x3c47b
  00083:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00087:    	jne    0x3c47b
:00000 %14 = dynvar(4, %4)
  0008d:    	mov    rax,QWORD PTR [rbp-0x10]
  00091:    	mov    rax,QWORD PTR [rax]
  00094:    	mov    rax,QWORD PTR [rax]
  00097:    	mov    rax,QWORD PTR [rax]
  0009a:    	mov    rax,QWORD PTR [rax-0x38]
  0009e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00001 %14 = %14 + 1: i16                   [Integer][Integer]
  000a5: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000ac: 00 	test   rdi,0x1
  000b3:    	je     0x3c48a
  000b9:    	add    rdi,0x2
  000bd:    	jo     0x3c48a
  000c3: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00002 dynvar(4, %4) = %14
  000ca:    	mov    rax,QWORD PTR [rbp-0x10]
  000ce:    	mov    rax,QWORD PTR [rax]
  000d1:    	mov    rax,QWORD PTR [rax]
  000d4:    	mov    rax,QWORD PTR [rax]
  000d7: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000de:    	mov    QWORD PTR [rax-0x38],rdi
:00003 %14 = dynvar(4, %1)
  000e2:    	mov    rax,QWORD PTR [rbp-0x10]
  000e6:    	mov    rax,QWORD PTR [rax]
  000e9:    	mov    rax,QWORD PTR [rax]
  000ec:    	mov    rax,QWORD PTR [rax]
  000ef:    	mov    rax,QWORD PTR [rax-0x20]
  000f3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00004 %2 = %14.call to_f()                 [Integer]
:00005 
  000fa: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00101: 00 	test   rdi,0x1
  00108:    	jne    0x125
  0010e: 00 	test   rdi,0x7
  00115:    	jne    0x3c499
  0011b:    	cmp    DWORD PTR [rdi+0x4],0x6
  0011f:    	jne    0x3c499
  00125: 26 	cmp    DWORD PTR [rip+0xffffffffffffd879],0x26        # 0xffffd9a5
  0012c:    	jne    0x3c499
  00132:    	sar    rdi,1
  00135:    	cvtsi2sd xmm2,rdi
:00007 %14 = dynvar(4, %2)
  0013a:    	mov    rax,QWORD PTR [rbp-0x10]
  0013e:    	mov    rax,QWORD PTR [rax]
  00141:    	mov    rax,QWORD PTR [rax]
  00144:    	mov    rax,QWORD PTR [rax]
  00147:    	mov    rax,QWORD PTR [rax-0x28]
  0014b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00008 %3 = %14.call to_f()                 [Integer]
:00009 
  00152: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00159: 00 	test   rdi,0x1
  00160:    	jne    0x17d
  00166: 00 	test   rdi,0x7
  0016d:    	jne    0x3c4a8
  00173:    	cmp    DWORD PTR [rdi+0x4],0x6
  00177:    	jne    0x3c4a8
  0017d: 26 	cmp    DWORD PTR [rip+0xffffffffffffd821],0x26        # 0xffffd9a5
  00184:    	jne    0x3c4a8
  0018a:    	sar    rdi,1
  0018d:    	cvtsi2sd xmm3,rdi
:00011 %14 = dynvar(2, %1)
  00192:    	mov    rax,QWORD PTR [rbp-0x10]
  00196:    	mov    rax,QWORD PTR [rax]
  00199:    	mov    rax,QWORD PTR [rax-0x20]
  0019d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %4 = %14.call to_f()                 [Integer]
:00013 
  001a4: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001ab: 00 	test   rdi,0x1
  001b2:    	jne    0x1cf
  001b8: 00 	test   rdi,0x7
  001bf:    	jne    0x3c4c4
  001c5:    	cmp    DWORD PTR [rdi+0x4],0x6
  001c9:    	jne    0x3c4c4
  001cf: 26 	cmp    DWORD PTR [rip+0xffffffffffffd7cf],0x26        # 0xffffd9a5
  001d6:    	jne    0x3c4c4
  001dc:    	sar    rdi,1
  001df:    	cvtsi2sd xmm4,rdi
:00015 %14 = dynvar(3, %1)
  001e4:    	mov    rax,QWORD PTR [rbp-0x10]
  001e8:    	mov    rax,QWORD PTR [rax]
  001eb:    	mov    rax,QWORD PTR [rax]
  001ee:    	mov    rax,QWORD PTR [rax-0x20]
  001f2: ff 	mov    QWORD PTR [rbp-0x98],rax
:00016 %5 = %14.call to_f()                 [Integer]
:00017 
  001f9: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00200: 00 	test   rdi,0x1
  00207:    	jne    0x224
  0020d: 00 	test   rdi,0x7
  00214:    	jne    0x3c4ed
  0021a:    	cmp    DWORD PTR [rdi+0x4],0x6
  0021e:    	jne    0x3c4ed
  00224: 26 	cmp    DWORD PTR [rip+0xffffffffffffd77a],0x26        # 0xffffd9a5
  0022b:    	jne    0x3c4ed
  00231:    	sar    rdi,1
  00234:    	cvtsi2sd xmm5,rdi
:00019 %6 = %1.call to_f()                  [Integer]
:00020 
  00239:    	mov    rdi,QWORD PTR [rbp-0x30]
  0023d: 00 	test   rdi,0x1
  00244:    	jne    0x261
  0024a: 00 	test   rdi,0x7
  00251:    	jne    0x3c523
  00257:    	cmp    DWORD PTR [rdi+0x4],0x6
  0025b:    	jne    0x3c523
  00261: 26 	cmp    DWORD PTR [rip+0xffffffffffffd73d],0x26        # 0xffffd9a5
  00268:    	jne    0x3c523
  0026e:    	sar    rdi,1
  00271:    	cvtsi2sd xmm6,rdi
:00022 %14 = dynvar(1, %1)
  00276:    	mov    rax,QWORD PTR [rbp-0x10]
  0027a:    	mov    rax,QWORD PTR [rax-0x20]
  0027e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00023 %7 = %14.call to_f()                 [Integer]
:00024 
  00285: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0028c: 00 	test   rdi,0x1
  00293:    	jne    0x2b0
  00299: 00 	test   rdi,0x7
  002a0:    	jne    0x3c566
  002a6:    	cmp    DWORD PTR [rdi+0x4],0x6
  002aa:    	jne    0x3c566
  002b0: 26 	cmp    DWORD PTR [rip+0xffffffffffffd6ee],0x26        # 0xffffd9a5
  002b7:    	jne    0x3c566
  002bd:    	sar    rdi,1
  002c0:    	cvtsi2sd xmm7,rdi
:00026 %14 = dynvar(4, %5)
  002c5:    	mov    rax,QWORD PTR [rbp-0x10]
  002c9:    	mov    rax,QWORD PTR [rax]
  002cc:    	mov    rax,QWORD PTR [rax]
  002cf:    	mov    rax,QWORD PTR [rax]
  002d2:    	mov    rax,QWORD PTR [rax-0x40]
  002d6: ff 	mov    QWORD PTR [rbp-0x98],rax
:00027 %14 = %6 / %14                       [Float][Float]
  002dd: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  002e4: 00 	test   rdi,0x1
  002eb:    	jne    0x3c5b6
  002f1: 00 	test   rdi,0x2
  002f8:    	je     0x335
  002fe:    	xorps  xmm8,xmm8
  00302: 00 	movabs rax,0x8000000000000002
  0030c:    	cmp    rdi,rax
  0030f:    	je     0x348
  00315:    	mov    rax,rdi
  00318:    	sar    rax,0x3f
  0031c:    	add    rax,0x2
  00320:    	and    rdi,0xfffffffffffffffc
  00324:    	or     rdi,rax
  00327:    	rol    rdi,0x3d
  0032b:    	movq   xmm8,rdi
  00330:    	jmp    0x348
  00335:    	call   0xffffb005
  0033a:    	test   rax,rax
  0033d:    	je     0x3c5b6
  00343:    	movq   xmm8,xmm0
  00348:    	movq   rax,xmm8
  0034d:    	test   rax,rax
  00350:    	je     0xffffaff1
  00356:    	movq   xmm0,xmm6
  0035a:    	divsd  xmm0,xmm8
  0035f:    	movq   xmm8,xmm0
:00028 %14 = %4 + %14                       [Float][Float]
  00364:    	addsd  xmm8,xmm4
:00029 %15 = literal[2.0]
  00369: 14 	movq   xmm9,QWORD PTR [rip+0x14df]        # 0x1851
:00030 %15 = %2 / %15                       [Float][Float]
  00372:    	movq   rax,xmm9
  00377:    	test   rax,rax
  0037a:    	je     0xffffaff1
  00380:    	movq   xmm0,xmm2
  00384:    	divsd  xmm0,xmm9
  00389:    	movq   xmm9,xmm0
:00031 %14 = %14 - %15                      [Float][Float]
  0038e:    	subsd  xmm8,xmm9
:00032 %15 = literal[2.0]
  00393: 14 	movq   xmm9,QWORD PTR [rip+0x14c5]        # 0x1861
:00033 %15 = %2 / %15                       [Float][Float]
  0039c:    	movq   rax,xmm9
  003a1:    	test   rax,rax
  003a4:    	je     0xffffaff1
  003aa:    	movq   xmm0,xmm2
  003ae:    	divsd  xmm0,xmm9
  003b3:    	movq   xmm9,xmm0
:00034 %8 = %14 / %15                       [Float][Float]
  003b8:    	movq   xmm10,xmm8
  003bd:    	movq   rax,xmm9
  003c2:    	test   rax,rax
  003c5:    	je     0xffffaff1
  003cb:    	divsd  xmm10,xmm9
:00035 %14 = dynvar(4, %5)
  003d0:    	mov    rax,QWORD PTR [rbp-0x10]
  003d4:    	mov    rax,QWORD PTR [rax]
  003d7:    	mov    rax,QWORD PTR [rax]
  003da:    	mov    rax,QWORD PTR [rax]
  003dd:    	mov    rax,QWORD PTR [rax-0x40]
  003e1: ff 	mov    QWORD PTR [rbp-0x98],rax
:00036 %14 = %7 / %14                       [Float][Float]
  003e8: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003ef: 00 	test   rdi,0x1
  003f6:    	jne    0x3c613
  003fc: 00 	test   rdi,0x2
  00403:    	je     0x440
  00409:    	xorps  xmm8,xmm8
  0040d: 00 	movabs rax,0x8000000000000002
  00417:    	cmp    rdi,rax
  0041a:    	je     0x453
  00420:    	mov    rax,rdi
  00423:    	sar    rax,0x3f
  00427:    	add    rax,0x2
  0042b:    	and    rdi,0xfffffffffffffffc
  0042f:    	or     rdi,rax
  00432:    	rol    rdi,0x3d
  00436:    	movq   xmm8,rdi
  0043b:    	jmp    0x453
  00440:    	call   0xffffb005
  00445:    	test   rax,rax
  00448:    	je     0x3c613
  0044e:    	movq   xmm8,xmm0
  00453:    	movq   rax,xmm8
  00458:    	test   rax,rax
  0045b:    	je     0xffffaff1
  00461:    	movq   xmm0,xmm7
  00465:    	divsd  xmm0,xmm8
  0046a:    	movq   xmm8,xmm0
:00037 %14 = %5 + %14                       [Float][Float]
  0046f:    	addsd  xmm8,xmm5
:00038 %15 = literal[2.0]
  00474: 13 	movq   xmm9,QWORD PTR [rip+0x13f4]        # 0x1871
:00039 %15 = %3 / %15                       [Float][Float]
  0047d:    	movq   rax,xmm9
  00482:    	test   rax,rax
  00485:    	je     0xffffaff1
  0048b:    	movq   xmm0,xmm3
  0048f:    	divsd  xmm0,xmm9
  00494:    	movq   xmm9,xmm0
:00040 %14 = %14 - %15                      [Float][Float]
  00499:    	subsd  xmm8,xmm9
:00041 %14 = neg %14                        [Float]
  0049e: 00 	xorps  xmm8,XMMWORD PTR [rip+0x13db]        # 0x1881
:00042 %15 = literal[2.0]
  004a6: 13 	movq   xmm9,QWORD PTR [rip+0x13e2]        # 0x1891
:00043 %15 = %3 / %15                       [Float][Float]
  004af:    	movq   rax,xmm9
  004b4:    	test   rax,rax
  004b7:    	je     0xffffaff1
  004bd:    	movq   xmm0,xmm3
  004c1:    	divsd  xmm0,xmm9
  004c6:    	movq   xmm9,xmm0
:00044 %9 = %14 / %15                       [Float][Float]
  004cb:    	movq   xmm11,xmm8
  004d0:    	movq   rax,xmm9
  004d5:    	test   rax,rax
  004d8:    	je     0xffffaff1
  004de:    	divsd  xmm11,xmm9
:00045 %15 = const[Vec]                     [Vec]
  004e3: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd4c7]        # 0xffffd9b1
  004ea: 00 	cmp    rax,QWORD PTR [rip+0x13c0]        # 0x18b1
  004f1:    	jne    0x3c68f
  004f7: 00 	mov    rax,QWORD PTR [rip+0x13a3]        # 0x18a1
  004fe: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00046 %16 = %8
:00047 %17 = %9
:00048 %18 = literal[-1.0]
  00505: 13 	movq   xmm9,QWORD PTR [rip+0x13b3]        # 0x18c1
:00049 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
:00050 
  0050e:    	movq   xmm0,xmm10
  00513:    	call   0xffffb0f8
  00518: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0051f:    	movq   xmm0,xmm11
  00524:    	call   0xffffb0f8
  00529: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00530:    	movq   xmm0,xmm9
  00535:    	call   0xffffb0f8
  0053a: ff 	mov    QWORD PTR [rbp-0xb8],rax
  00541: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00548: 00 	test   rdi,0x7
  0054f:    	jne    0x3c74d
  00555:    	cmp    DWORD PTR [rdi+0x4],0x26
  00559:    	jne    0x3c74d
  0055f: 26 	cmp    DWORD PTR [rip+0xffffffffffffd43f],0x26        # 0xffffd9a5
  00566:    	jne    0x3c74d
  0056c: 00 	mov    r9,0x0
  00573:    	sub    rsp,0x50
  00577:    	movq   QWORD PTR [rsp],xmm2
  0057c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00582:    	movq   QWORD PTR [rsp+0x10],xmm4
  00588:    	movq   QWORD PTR [rsp+0x18],xmm5
  0058e:    	movq   QWORD PTR [rsp+0x20],xmm6
  00594:    	movq   QWORD PTR [rsp+0x28],xmm7
  0059a: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  005a1: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  005a8: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  005af:    	mov    rdx,rdi
  005b2:    	mov    rax,QWORD PTR [rbx]
  005b5:    	lea    rdi,[rsp-0x18]
  005ba:    	mov    QWORD PTR [rdi],rax
  005bd:    	mov    QWORD PTR [rbx],rdi
  005c0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  005c9:    	mov    QWORD PTR [rsp-0x38],rcx
  005ce: ff 	lea    rcx,[rbp-0xa8]
  005d5: 00 	mov    r8,0x3
  005dc:    	call   0x3c7c6
  005e1:    	lea    rdi,[rbp-0x8]
  005e5:    	mov    QWORD PTR [rbx],rdi
  005e8:    	movq   xmm2,QWORD PTR [rsp]
  005ed:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005f3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005f9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005ff:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00605:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0060b: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00612: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00619: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00620:    	add    rsp,0x50
  00624: 78 	movabs r13,0x55788df2ef40
  0062e:    	test   rax,rax
  00631:    	je     0xffffafcc
  00637: ff 	mov    QWORD PTR [rbp-0x98],rax
:00052 %10 = %14.call vnormalize()          [Vec]
:00053 
  0063e: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00645: 00 	test   rdi,0x7
  0064c:    	jne    0x3c7f8
  00652:    	cmp    DWORD PTR [rdi+0x4],0x25
  00656:    	jne    0x3c7f8
  0065c: 26 	cmp    DWORD PTR [rip+0xffffffffffffd342],0x26        # 0xffffd9a5
  00663:    	jne    0x3c7f8
  00669:    	sub    rsp,0x50
  0066d:    	movq   QWORD PTR [rsp],xmm2
  00672:    	movq   QWORD PTR [rsp+0x8],xmm3
  00678:    	movq   QWORD PTR [rsp+0x10],xmm4
  0067e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00684:    	movq   QWORD PTR [rsp+0x20],xmm6
  0068a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00690: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00697: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0069e: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  006a5:    	mov    rax,QWORD PTR [rbx]
  006a8:    	lea    rdi,[rsp-0x18]
  006ad:    	mov    QWORD PTR [rdi],rax
  006b0:    	mov    QWORD PTR [rbx],rdi
  006b3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  006bc:    	mov    QWORD PTR [rsp-0x38],rcx
  006c1: ff 	mov    rax,QWORD PTR [rbp-0x98]
  006c8:    	mov    QWORD PTR [rsp-0x38],rax
  006cd: 00 	mov    rdi,0x0
  006d4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006dd: 07 	movabs rax,0x70000003d
  006e7:    	mov    QWORD PTR [rsp-0x28],rax
  006ec: 78 	movabs r13,0x55788def86a0
  006f6:    	call   0xffffe26a
  006fb:    	lea    rdi,[rbp-0x8]
  006ff:    	mov    QWORD PTR [rbx],rdi
  00702:    	movq   xmm2,QWORD PTR [rsp]
  00707:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0070d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00713:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00719:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0071f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00725: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0072c: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00733: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  0073a:    	add    rsp,0x50
  0073e: 78 	movabs r13,0x55788df2ef70
  00748:    	test   rax,rax
  0074b:    	je     0xffffafcc
  00751:    	mov    QWORD PTR [rbp-0x78],rax
:00055 %14 = const[Ray]                     [Ray]
  00755: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd255]        # 0xffffd9b1
  0075c: 00 	cmp    rax,QWORD PTR [rip+0x117e]        # 0x18e1
  00763:    	jne    0x3c871
  00769: 00 	mov    rax,QWORD PTR [rip+0x1161]        # 0x18d1
  00770: ff 	mov    QWORD PTR [rbp-0x98],rax
:00056 %16 = const[Vec]                     [Vec]
  00777: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffd233]        # 0xffffd9b1
  0077e: 00 	cmp    rax,QWORD PTR [rip+0x117c]        # 0x1901
  00785:    	jne    0x3c92f
  0078b: 00 	mov    rax,QWORD PTR [rip+0x115f]        # 0x18f1
  00792: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00057 %17 = literal[0.0]
  00799: 11 	movq   xmm8,QWORD PTR [rip+0x116f]        # 0x1911
:00058 %18 = literal[0.0]
  007a2: 11 	movq   xmm9,QWORD PTR [rip+0x1176]        # 0x1921
:00059 %19 = literal[0.0]
  007ab: 11 	movq   xmm12,QWORD PTR [rip+0x117d]        # 0x1931
:00060 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
:00061 
  007b4:    	movq   xmm0,xmm8
  007b9:    	call   0xffffb0f8
  007be: ff 	mov    QWORD PTR [rbp-0xb0],rax
  007c5:    	movq   xmm0,xmm9
  007ca:    	call   0xffffb0f8
  007cf: ff 	mov    QWORD PTR [rbp-0xb8],rax
  007d6:    	movq   xmm0,xmm12
  007db:    	call   0xffffb0f8
  007e0: ff 	mov    QWORD PTR [rbp-0xc0],rax
  007e7: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  007ee: 00 	test   rdi,0x7
  007f5:    	jne    0x3c9ed
  007fb:    	cmp    DWORD PTR [rdi+0x4],0x26
  007ff:    	jne    0x3c9ed
  00805: 26 	cmp    DWORD PTR [rip+0xffffffffffffd199],0x26        # 0xffffd9a5
  0080c:    	jne    0x3c9ed
  00812: 00 	mov    r9,0x0
  00819:    	sub    rsp,0x60
  0081d:    	movq   QWORD PTR [rsp],xmm2
  00822:    	movq   QWORD PTR [rsp+0x8],xmm3
  00828:    	movq   QWORD PTR [rsp+0x10],xmm4
  0082e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00834:    	movq   QWORD PTR [rsp+0x20],xmm6
  0083a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00840: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00847: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0084e: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00855: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0085c: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00863:    	mov    rdx,rdi
  00866:    	mov    rax,QWORD PTR [rbx]
  00869:    	lea    rdi,[rsp-0x18]
  0086e:    	mov    QWORD PTR [rdi],rax
  00871:    	mov    QWORD PTR [rbx],rdi
  00874: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0087d:    	mov    QWORD PTR [rsp-0x38],rcx
  00882: ff 	lea    rcx,[rbp-0xb0]
  00889: 00 	mov    r8,0x3
  00890:    	call   0x3ca66
  00895:    	lea    rdi,[rbp-0x8]
  00899:    	mov    QWORD PTR [rbx],rdi
  0089c:    	movq   xmm2,QWORD PTR [rsp]
  008a1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008a7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008ad:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008b3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008b9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008bf: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008c6: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008cd: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008d4: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008db: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008e2:    	add    rsp,0x60
  008e6: 78 	movabs r13,0x55788df2eff0
  008f0:    	test   rax,rax
  008f3:    	je     0xffffafcc
  008f9: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00063 %16 = %10
  00900:    	mov    rax,QWORD PTR [rbp-0x78]
  00904: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00064 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
:00065 
  0090b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00912: 00 	test   rdi,0x7
  00919:    	jne    0x3ca98
  0091f:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00923:    	jne    0x3ca98
  00929: 26 	cmp    DWORD PTR [rip+0xffffffffffffd075],0x26        # 0xffffd9a5
  00930:    	jne    0x3ca98
  00936: 00 	mov    r9,0x0
  0093d:    	sub    rsp,0x60
  00941:    	movq   QWORD PTR [rsp],xmm2
  00946:    	movq   QWORD PTR [rsp+0x8],xmm3
  0094c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00952:    	movq   QWORD PTR [rsp+0x18],xmm5
  00958:    	movq   QWORD PTR [rsp+0x20],xmm6
  0095e:    	movq   QWORD PTR [rsp+0x28],xmm7
  00964: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0096b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00972: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00979: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00980: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00987:    	mov    rdx,rdi
  0098a:    	mov    rax,QWORD PTR [rbx]
  0098d:    	lea    rdi,[rsp-0x18]
  00992:    	mov    QWORD PTR [rdi],rax
  00995:    	mov    QWORD PTR [rbx],rdi
  00998: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009a1:    	mov    QWORD PTR [rsp-0x38],rcx
  009a6: ff 	lea    rcx,[rbp-0xa0]
  009ad: 00 	mov    r8,0x2
  009b4:    	call   0x3cb11
  009b9:    	lea    rdi,[rbp-0x8]
  009bd:    	mov    QWORD PTR [rbx],rdi
  009c0:    	movq   xmm2,QWORD PTR [rsp]
  009c5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009cb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009d1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009d7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009dd:    	movq   xmm7,QWORD PTR [rsp+0x28]
  009e3: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  009ea: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  009f1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  009f8: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  009ff: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a06:    	add    rsp,0x60
  00a0a: 78 	movabs r13,0x55788df2f030
  00a14:    	test   rax,rax
  00a17:    	je     0xffffafcc
  00a1d:    	mov    QWORD PTR [rbp-0x80],rax
:00067 %14 = const[Isect]                   [Isect]
  00a21: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffcf89]        # 0xffffd9b1
  00a28: 00 	cmp    rax,QWORD PTR [rip+0xf22]        # 0x1951
  00a2f:    	jne    0x3cb43
  00a35: 00 	mov    rax,QWORD PTR [rip+0xf05]        # 0x1941
  00a3c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00068 %12 = %14.call new()                 [#<Class:Isect>]
:00069 
  00a43: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a4a: 00 	test   rdi,0x7
  00a51:    	jne    0x3cc1d
  00a57:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00a5b:    	jne    0x3cc1d
  00a61: 26 	cmp    DWORD PTR [rip+0xffffffffffffcf3d],0x26        # 0xffffd9a5
  00a68:    	jne    0x3cc1d
  00a6e: 00 	mov    r9,0x0
  00a75:    	sub    rsp,0x60
  00a79:    	movq   QWORD PTR [rsp],xmm2
  00a7e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a84:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a8a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a90:    	movq   QWORD PTR [rsp+0x20],xmm6
  00a96:    	movq   QWORD PTR [rsp+0x28],xmm7
  00a9c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00aa3: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00aaa: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ab1: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ab8: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00abf:    	mov    rdx,rdi
  00ac2:    	mov    rax,QWORD PTR [rbx]
  00ac5:    	lea    rdi,[rsp-0x18]
  00aca:    	mov    QWORD PTR [rdi],rax
  00acd:    	mov    QWORD PTR [rbx],rdi
  00ad0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ad9:    	mov    QWORD PTR [rsp-0x38],rcx
  00ade: ff 	lea    rcx,[rbp-0xa0]
  00ae5: 00 	mov    r8,0x0
  00aec:    	call   0x3cc96
  00af1:    	lea    rdi,[rbp-0x8]
  00af5:    	mov    QWORD PTR [rbx],rdi
  00af8:    	movq   xmm2,QWORD PTR [rsp]
  00afd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b03:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b09:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b0f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b15:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b1b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b22: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b29: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b30: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b37: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b3e:    	add    rsp,0x60
  00b42: 78 	movabs r13,0x55788df2f070
  00b4c:    	test   rax,rax
  00b4f:    	je     0xffffafcc
  00b55: ff 	mov    QWORD PTR [rbp-0x88],rax
:00071 %14 = @spheres: Scene[IvarId(0)]
  00b5c:    	mov    rdi,QWORD PTR [rbp-0x28]
  00b60:    	cmp    WORD PTR [rdi+0x2],0x3
  00b65:    	jne    0x3ccc8
  00b6b:    	mov    rax,QWORD PTR [rdi+0x10]
  00b6f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 %15 = 0: i32
  00b76: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00073 %14 = %14.[%15]
  00b81:    	sub    rsp,0x60
  00b85:    	movq   QWORD PTR [rsp],xmm2
  00b8a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b90:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b96:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b9c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ba2:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ba8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00baf: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00bb6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00bbd: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00bc4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00bcb: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00bd2: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00bd9:    	mov    rdi,rbx
  00bdc:    	mov    rsi,r12
  00bdf: 78 	movabs rax,0x55788c797be0
  00be9:    	call   rax
  00beb:    	movq   xmm2,QWORD PTR [rsp]
  00bf0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bf6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00bfc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c02:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c08:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c0e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00c15: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00c1c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00c23: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c2a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c31:    	add    rsp,0x60
  00c35: 78 	movabs r13,0x55788df2f0b0
  00c3f:    	test   rax,rax
  00c42:    	je     0xffffafcc
  00c48: ff 	mov    QWORD PTR [rbp-0x98],rax
:00074 %15 = %11
  00c4f:    	mov    rax,QWORD PTR [rbp-0x80]
  00c53: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00075 %16 = %12
  00c5a: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00c61: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00076 _ = %14.call intersect(%15; 2)       [Sphere]
:00077 
  00c68: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00c6f: 00 	test   rdi,0x7
  00c76:    	jne    0x3cd72
  00c7c:    	cmp    DWORD PTR [rdi+0x4],0x27
  00c80:    	jne    0x3cd72
  00c86: 26 	cmp    DWORD PTR [rip+0xffffffffffffcd18],0x26        # 0xffffd9a5
  00c8d:    	jne    0x3cd72
  00c93:    	sub    rsp,0x60
  00c97:    	movq   QWORD PTR [rsp],xmm2
  00c9c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ca2:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ca8:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cae:    	movq   QWORD PTR [rsp+0x20],xmm6
  00cb4:    	movq   QWORD PTR [rsp+0x28],xmm7
  00cba: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00cc1: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00cc8: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ccf: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00cd6: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00cdd:    	mov    rax,QWORD PTR [rbx]
  00ce0:    	lea    rdi,[rsp-0x18]
  00ce5:    	mov    QWORD PTR [rdi],rax
  00ce8:    	mov    QWORD PTR [rbx],rdi
  00ceb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cf4:    	mov    QWORD PTR [rsp-0x38],rcx
  00cf9: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00d00:    	mov    QWORD PTR [rsp-0x38],rax
  00d05: 00 	mov    rdi,0x2
  00d0c: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00d13:    	mov    QWORD PTR [rsp-0x40],rax
  00d18: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00d1f:    	mov    QWORD PTR [rsp-0x48],rax
  00d24: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d2d: 10 	movabs rax,0x100000003f
  00d37:    	mov    QWORD PTR [rsp-0x28],rax
  00d3c: 78 	movabs r13,0x55788dee86a0
  00d46:    	call   0xffffe572
  00d4b:    	lea    rdi,[rbp-0x8]
  00d4f:    	mov    QWORD PTR [rbx],rdi
  00d52:    	movq   xmm2,QWORD PTR [rsp]
  00d57:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d5d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d63:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d69:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d6f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d75: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00d7c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00d83: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00d8a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00d91: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00d98:    	add    rsp,0x60
  00d9c: 78 	movabs r13,0x55788df2f0f0
  00da6:    	test   rax,rax
  00da9:    	je     0xffffafcc
:00079 %14 = @spheres: Scene[IvarId(0)]
  00daf:    	mov    rdi,QWORD PTR [rbp-0x28]
  00db3:    	cmp    WORD PTR [rdi+0x2],0x3
  00db8:    	jne    0x3cdeb
  00dbe:    	mov    rax,QWORD PTR [rdi+0x10]
  00dc2: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 %15 = 1: i32
  00dc9: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00081 %14 = %14.[%15]
  00dd4:    	sub    rsp,0x60
  00dd8:    	movq   QWORD PTR [rsp],xmm2
  00ddd:    	movq   QWORD PTR [rsp+0x8],xmm3
  00de3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00de9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00def:    	movq   QWORD PTR [rsp+0x20],xmm6
  00df5:    	movq   QWORD PTR [rsp+0x28],xmm7
  00dfb: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e02: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e09: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e10: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e17: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e1e: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00e25: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00e2c:    	mov    rdi,rbx
  00e2f:    	mov    rsi,r12
  00e32: 78 	movabs rax,0x55788c797be0
  00e3c:    	call   rax
  00e3e:    	movq   xmm2,QWORD PTR [rsp]
  00e43:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e49:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e4f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e55:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e5b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e61: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00e68: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00e6f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00e76: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00e7d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00e84:    	add    rsp,0x60
  00e88: 78 	movabs r13,0x55788df2f130
  00e92:    	test   rax,rax
  00e95:    	je     0xffffafcc
  00e9b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00082 %15 = %11
  00ea2:    	mov    rax,QWORD PTR [rbp-0x80]
  00ea6: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00083 %16 = %12
  00ead: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00eb4: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00084 _ = %14.call intersect(%15; 2)       [Sphere]
:00085 
  00ebb: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00ec2: 00 	test   rdi,0x7
  00ec9:    	jne    0x3ce95
  00ecf:    	cmp    DWORD PTR [rdi+0x4],0x27
  00ed3:    	jne    0x3ce95
  00ed9: 26 	cmp    DWORD PTR [rip+0xffffffffffffcac5],0x26        # 0xffffd9a5
  00ee0:    	jne    0x3ce95
  00ee6:    	sub    rsp,0x60
  00eea:    	movq   QWORD PTR [rsp],xmm2
  00eef:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ef5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00efb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f01:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f07:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f0d: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f14: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f1b: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f22: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f29: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f30:    	mov    rax,QWORD PTR [rbx]
  00f33:    	lea    rdi,[rsp-0x18]
  00f38:    	mov    QWORD PTR [rdi],rax
  00f3b:    	mov    QWORD PTR [rbx],rdi
  00f3e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f47:    	mov    QWORD PTR [rsp-0x38],rcx
  00f4c: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00f53:    	mov    QWORD PTR [rsp-0x38],rax
  00f58: 00 	mov    rdi,0x2
  00f5f: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00f66:    	mov    QWORD PTR [rsp-0x40],rax
  00f6b: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00f72:    	mov    QWORD PTR [rsp-0x48],rax
  00f77: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f80: 10 	movabs rax,0x100000003f
  00f8a:    	mov    QWORD PTR [rsp-0x28],rax
  00f8f: 78 	movabs r13,0x55788dee86a0
  00f99:    	call   0xffffe572
  00f9e:    	lea    rdi,[rbp-0x8]
  00fa2:    	mov    QWORD PTR [rbx],rdi
  00fa5:    	movq   xmm2,QWORD PTR [rsp]
  00faa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fb0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fb6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00fbc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00fc2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00fc8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00fcf: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00fd6: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00fdd: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00fe4: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00feb:    	add    rsp,0x60
  00fef: 78 	movabs r13,0x55788df2f170
  00ff9:    	test   rax,rax
  00ffc:    	je     0xffffafcc
:00087 %14 = @spheres: Scene[IvarId(0)]
  01002:    	mov    rdi,QWORD PTR [rbp-0x28]
  01006:    	cmp    WORD PTR [rdi+0x2],0x3
  0100b:    	jne    0x3cf0e
  01011:    	mov    rax,QWORD PTR [rdi+0x10]
  01015: ff 	mov    QWORD PTR [rbp-0x98],rax
:00088 %15 = 2: i32
  0101c: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00089 %14 = %14.[%15]
  01027:    	sub    rsp,0x60
  0102b:    	movq   QWORD PTR [rsp],xmm2
  01030:    	movq   QWORD PTR [rsp+0x8],xmm3
  01036:    	movq   QWORD PTR [rsp+0x10],xmm4
  0103c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01042:    	movq   QWORD PTR [rsp+0x20],xmm6
  01048:    	movq   QWORD PTR [rsp+0x28],xmm7
  0104e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01055: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0105c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01063: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0106a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01071: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01078: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0107f:    	mov    rdi,rbx
  01082:    	mov    rsi,r12
  01085: 78 	movabs rax,0x55788c797be0
  0108f:    	call   rax
  01091:    	movq   xmm2,QWORD PTR [rsp]
  01096:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0109c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010a2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010a8:    	movq   xmm6,QWORD PTR [rsp+0x20]
  010ae:    	movq   xmm7,QWORD PTR [rsp+0x28]
  010b4: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  010bb: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  010c2: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  010c9: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  010d0: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  010d7:    	add    rsp,0x60
  010db: 78 	movabs r13,0x55788df2f1b0
  010e5:    	test   rax,rax
  010e8:    	je     0xffffafcc
  010ee: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %15 = %11
  010f5:    	mov    rax,QWORD PTR [rbp-0x80]
  010f9: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00091 %16 = %12
  01100: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01107: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00092 _ = %14.call intersect(%15; 2)       [Sphere]
:00093 
  0110e: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01115: 00 	test   rdi,0x7
  0111c:    	jne    0x3cfb8
  01122:    	cmp    DWORD PTR [rdi+0x4],0x27
  01126:    	jne    0x3cfb8
  0112c: 26 	cmp    DWORD PTR [rip+0xffffffffffffc872],0x26        # 0xffffd9a5
  01133:    	jne    0x3cfb8
  01139:    	sub    rsp,0x60
  0113d:    	movq   QWORD PTR [rsp],xmm2
  01142:    	movq   QWORD PTR [rsp+0x8],xmm3
  01148:    	movq   QWORD PTR [rsp+0x10],xmm4
  0114e:    	movq   QWORD PTR [rsp+0x18],xmm5
  01154:    	movq   QWORD PTR [rsp+0x20],xmm6
  0115a:    	movq   QWORD PTR [rsp+0x28],xmm7
  01160: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01167: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0116e: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01175: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0117c: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01183:    	mov    rax,QWORD PTR [rbx]
  01186:    	lea    rdi,[rsp-0x18]
  0118b:    	mov    QWORD PTR [rdi],rax
  0118e:    	mov    QWORD PTR [rbx],rdi
  01191: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0119a:    	mov    QWORD PTR [rsp-0x38],rcx
  0119f: ff 	mov    rax,QWORD PTR [rbp-0x98]
  011a6:    	mov    QWORD PTR [rsp-0x38],rax
  011ab: 00 	mov    rdi,0x2
  011b2: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  011b9:    	mov    QWORD PTR [rsp-0x40],rax
  011be: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  011c5:    	mov    QWORD PTR [rsp-0x48],rax
  011ca: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011d3: 10 	movabs rax,0x100000003f
  011dd:    	mov    QWORD PTR [rsp-0x28],rax
  011e2: 78 	movabs r13,0x55788dee86a0
  011ec:    	call   0xffffe572
  011f1:    	lea    rdi,[rbp-0x8]
  011f5:    	mov    QWORD PTR [rbx],rdi
  011f8:    	movq   xmm2,QWORD PTR [rsp]
  011fd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01203:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01209:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0120f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01215:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0121b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01222: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01229: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01230: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01237: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0123e:    	add    rsp,0x60
  01242: 78 	movabs r13,0x55788df2f1f0
  0124c:    	test   rax,rax
  0124f:    	je     0xffffafcc
:00095 %14 = @plane: Scene[IvarId(1)]
  01255:    	mov    rdi,QWORD PTR [rbp-0x28]
  01259:    	cmp    WORD PTR [rdi+0x2],0x3
  0125e:    	jne    0x3d031
  01264:    	mov    rax,QWORD PTR [rdi+0x18]
  01268: ff 	mov    QWORD PTR [rbp-0x98],rax
:00096 %15 = %11
  0126f:    	mov    rax,QWORD PTR [rbp-0x80]
  01273: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00097 %16 = %12
  0127a: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01281: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00098 _ = %14.call intersect(%15; 2)       [Plane]
:00099 
  01288: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0128f: 00 	test   rdi,0x7
  01296:    	jne    0x3d0db
  0129c:    	cmp    DWORD PTR [rdi+0x4],0x29
  012a0:    	jne    0x3d0db
  012a6: 26 	cmp    DWORD PTR [rip+0xffffffffffffc6f8],0x26        # 0xffffd9a5
  012ad:    	jne    0x3d0db
  012b3:    	sub    rsp,0x60
  012b7:    	movq   QWORD PTR [rsp],xmm2
  012bc:    	movq   QWORD PTR [rsp+0x8],xmm3
  012c2:    	movq   QWORD PTR [rsp+0x10],xmm4
  012c8:    	movq   QWORD PTR [rsp+0x18],xmm5
  012ce:    	movq   QWORD PTR [rsp+0x20],xmm6
  012d4:    	movq   QWORD PTR [rsp+0x28],xmm7
  012da: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  012e1: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  012e8: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  012ef: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  012f6: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  012fd:    	mov    rax,QWORD PTR [rbx]
  01300:    	lea    rdi,[rsp-0x18]
  01305:    	mov    QWORD PTR [rdi],rax
  01308:    	mov    QWORD PTR [rbx],rdi
  0130b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01314:    	mov    QWORD PTR [rsp-0x38],rcx
  01319: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01320:    	mov    QWORD PTR [rsp-0x38],rax
  01325: 00 	mov    rdi,0x2
  0132c: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01333:    	mov    QWORD PTR [rsp-0x40],rax
  01338: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  0133f:    	mov    QWORD PTR [rsp-0x48],rax
  01344: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0134d: 0e 	movabs rax,0xe00000041
  01357:    	mov    QWORD PTR [rsp-0x28],rax
  0135c: 78 	movabs r13,0x55788deea540
  01366:    	call   0xffffeb5f
  0136b:    	lea    rdi,[rbp-0x8]
  0136f:    	mov    QWORD PTR [rbx],rdi
  01372:    	movq   xmm2,QWORD PTR [rsp]
  01377:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0137d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01383:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01389:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0138f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01395: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0139c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  013a3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  013aa: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  013b1: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  013b8:    	add    rsp,0x60
  013bc: 78 	movabs r13,0x55788df2f250
  013c6:    	test   rax,rax
  013c9:    	je     0xffffafcc
:00101 %14 = %12.call hit()                 [Isect]
:00102 
  013cf: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  013d6: 00 	test   rdi,0x7
  013dd:    	jne    0x3d154
  013e3:    	cmp    DWORD PTR [rdi+0x4],0x2d
  013e7:    	jne    0x3d154
  013ed: 26 	cmp    DWORD PTR [rip+0xffffffffffffc5b1],0x26        # 0xffffd9a5
  013f4:    	jne    0x3d154
  013fa:    	mov    esi,DWORD PTR [rip+0x55d]        # 0x195d
  01400:    	cmp    esi,0xffffffff
  01403:    	je     0x3d1cd
  01409:    	cmp    WORD PTR [rdi+0x2],0x3
  0140e:    	jne    0x1427
  01414:    	cmp    esi,0x6
  01417:    	jge    0x1427
  0141d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01422:    	jmp    0x14c7
  01427:    	sub    rsp,0x60
  0142b:    	movq   QWORD PTR [rsp],xmm2
  01430:    	movq   QWORD PTR [rsp+0x8],xmm3
  01436:    	movq   QWORD PTR [rsp+0x10],xmm4
  0143c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01442:    	movq   QWORD PTR [rsp+0x20],xmm6
  01448:    	movq   QWORD PTR [rsp+0x28],xmm7
  0144e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01455: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0145c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01463: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0146a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01471: 78 	movabs rax,0x55788c73bb50
  0147b:    	call   rax
  0147d:    	movq   xmm2,QWORD PTR [rsp]
  01482:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01488:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0148e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01494:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0149a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  014a0: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  014a7: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  014ae: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  014b5: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  014bc: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  014c3:    	add    rsp,0x60
  014c7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00104 condnotbr %14 =>:00147
  014ce: ff 	mov    rax,QWORD PTR [rbp-0x98]
  014d5:    	or     rax,0x10
  014d9:    	cmp    rax,0x14
  014dd:    	je     0x1832
:00105 %14 = %12
  014e3: ff 	mov    rax,QWORD PTR [rbp-0x88]
  014ea: ff 	mov    QWORD PTR [rbp-0x98],rax
:00106 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
:00107 
  014f1: 00 	mov    rdi,0x4
  014f8: 01 	sub    DWORD PTR [rip+0x462],0x1        # 0x1961
  014ff:    	jne    0x3d28a
  01505:    	mov    rdi,r12
  01508:    	mov    esi,DWORD PTR [rbp-0x18]
  0150b:    	mov    rdx,QWORD PTR [rbp-0x28]
  0150f: 78 	movabs rax,0x55788c79da60
  01519:    	call   rax
  0151b: 00 	mov    rdi,0x4
  01522:    	jmp    0x3d28a
:00109 %14 = dynvar(2, %2)
  01527:    	mov    rax,QWORD PTR [rbp-0x10]
  0152b:    	mov    rax,QWORD PTR [rax]
  0152e:    	mov    rax,QWORD PTR [rax-0x28]
  01532: ff 	mov    QWORD PTR [rbp-0x98],rax
:00110 %16 = dynvar(2, %2)
  01539:    	mov    rax,QWORD PTR [rbp-0x10]
  0153d:    	mov    rax,QWORD PTR [rax]
  01540:    	mov    rax,QWORD PTR [rax-0x28]
  01544: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00111 %15 = %16.call x()                   [<INVALID>]
:00112 
  0154b: 00 	mov    rdi,0x4
  01552: 01 	sub    DWORD PTR [rip+0x40c],0x1        # 0x1965
  01559:    	jne    0x3d303
  0155f:    	mov    rdi,r12
  01562:    	mov    esi,DWORD PTR [rbp-0x18]
  01565:    	mov    rdx,QWORD PTR [rbp-0x28]
  01569: 78 	movabs rax,0x55788c79da60
  01573:    	call   rax
  01575: 00 	mov    rdi,0x4
  0157c:    	jmp    0x3d303
:00114 %16 = %13.call x()                   [<INVALID>]
:00115 
  01581: 00 	mov    rdi,0x4
  01588: 01 	sub    DWORD PTR [rip+0x3da],0x1        # 0x1969
  0158f:    	jne    0x3d37c
  01595:    	mov    rdi,r12
  01598:    	mov    esi,DWORD PTR [rbp-0x18]
  0159b:    	mov    rdx,QWORD PTR [rbp-0x28]
  0159f: 78 	movabs rax,0x55788c79da60
  015a9:    	call   rax
  015ab: 00 	mov    rdi,0x4
  015b2:    	jmp    0x3d37c
:00117 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  015b7: 00 	mov    rdi,0x4
  015be: 01 	sub    DWORD PTR [rip+0x3a8],0x1        # 0x196d
  015c5:    	jne    0x3d3f5
  015cb:    	mov    rdi,r12
  015ce:    	mov    esi,DWORD PTR [rbp-0x18]
  015d1:    	mov    rdx,QWORD PTR [rbp-0x28]
  015d5: 78 	movabs rax,0x55788c79da60
  015df:    	call   rax
  015e1: 00 	mov    rdi,0x4
  015e8:    	jmp    0x3d3f5
:00118 _ = %14.call x=(%15; 1)              [<INVALID>]
:00119 
  015ed: 00 	mov    rdi,0x4
  015f4: 01 	sub    DWORD PTR [rip+0x376],0x1        # 0x1971
  015fb:    	jne    0x3d46e
  01601:    	mov    rdi,r12
  01604:    	mov    esi,DWORD PTR [rbp-0x18]
  01607:    	mov    rdx,QWORD PTR [rbp-0x28]
  0160b: 78 	movabs rax,0x55788c79da60
  01615:    	call   rax
  01617: 00 	mov    rdi,0x4
  0161e:    	jmp    0x3d46e
:00121 %14 = dynvar(2, %2)
  01623:    	mov    rax,QWORD PTR [rbp-0x10]
  01627:    	mov    rax,QWORD PTR [rax]
  0162a:    	mov    rax,QWORD PTR [rax-0x28]
  0162e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00122 %16 = dynvar(2, %2)
  01635:    	mov    rax,QWORD PTR [rbp-0x10]
  01639:    	mov    rax,QWORD PTR [rax]
  0163c:    	mov    rax,QWORD PTR [rax-0x28]
  01640: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00123 %15 = %16.call y()                   [<INVALID>]
:00124 
  01647: 00 	mov    rdi,0x4
  0164e: 01 	sub    DWORD PTR [rip+0x320],0x1        # 0x1975
  01655:    	jne    0x3d4e7
  0165b:    	mov    rdi,r12
  0165e:    	mov    esi,DWORD PTR [rbp-0x18]
  01661:    	mov    rdx,QWORD PTR [rbp-0x28]
  01665: 78 	movabs rax,0x55788c79da60
  0166f:    	call   rax
  01671: 00 	mov    rdi,0x4
  01678:    	jmp    0x3d4e7
:00126 %16 = %13.call y()                   [<INVALID>]
:00127 
  0167d: 00 	mov    rdi,0x4
  01684: 01 	sub    DWORD PTR [rip+0x2ee],0x1        # 0x1979
  0168b:    	jne    0x3d560
  01691:    	mov    rdi,r12
  01694:    	mov    esi,DWORD PTR [rbp-0x18]
  01697:    	mov    rdx,QWORD PTR [rbp-0x28]
  0169b: 78 	movabs rax,0x55788c79da60
  016a5:    	call   rax
  016a7: 00 	mov    rdi,0x4
  016ae:    	jmp    0x3d560
:00129 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  016b3: 00 	mov    rdi,0x4
  016ba: 01 	sub    DWORD PTR [rip+0x2bc],0x1        # 0x197d
  016c1:    	jne    0x3d5d9
  016c7:    	mov    rdi,r12
  016ca:    	mov    esi,DWORD PTR [rbp-0x18]
  016cd:    	mov    rdx,QWORD PTR [rbp-0x28]
  016d1: 78 	movabs rax,0x55788c79da60
  016db:    	call   rax
  016dd: 00 	mov    rdi,0x4
  016e4:    	jmp    0x3d5d9
:00130 _ = %14.call y=(%15; 1)              [<INVALID>]
:00131 
  016e9: 00 	mov    rdi,0x4
  016f0: 01 	sub    DWORD PTR [rip+0x28a],0x1        # 0x1981
  016f7:    	jne    0x3d652
  016fd:    	mov    rdi,r12
  01700:    	mov    esi,DWORD PTR [rbp-0x18]
  01703:    	mov    rdx,QWORD PTR [rbp-0x28]
  01707: 78 	movabs rax,0x55788c79da60
  01711:    	call   rax
  01713: 00 	mov    rdi,0x4
  0171a:    	jmp    0x3d652
:00133 %14 = dynvar(2, %2)
  0171f:    	mov    rax,QWORD PTR [rbp-0x10]
  01723:    	mov    rax,QWORD PTR [rax]
  01726:    	mov    rax,QWORD PTR [rax-0x28]
  0172a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00134 %16 = dynvar(2, %2)
  01731:    	mov    rax,QWORD PTR [rbp-0x10]
  01735:    	mov    rax,QWORD PTR [rax]
  01738:    	mov    rax,QWORD PTR [rax-0x28]
  0173c: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00135 %15 = %16.call z()                   [<INVALID>]
:00136 
  01743: 00 	mov    rdi,0x4
  0174a: 01 	sub    DWORD PTR [rip+0x234],0x1        # 0x1985
  01751:    	jne    0x3d6cb
  01757:    	mov    rdi,r12
  0175a:    	mov    esi,DWORD PTR [rbp-0x18]
  0175d:    	mov    rdx,QWORD PTR [rbp-0x28]
  01761: 78 	movabs rax,0x55788c79da60
  0176b:    	call   rax
  0176d: 00 	mov    rdi,0x4
  01774:    	jmp    0x3d6cb
:00138 %16 = %13.call z()                   [<INVALID>]
:00139 
  01779: 00 	mov    rdi,0x4
  01780: 01 	sub    DWORD PTR [rip+0x202],0x1        # 0x1989
  01787:    	jne    0x3d744
  0178d:    	mov    rdi,r12
  01790:    	mov    esi,DWORD PTR [rbp-0x18]
  01793:    	mov    rdx,QWORD PTR [rbp-0x28]
  01797: 78 	movabs rax,0x55788c79da60
  017a1:    	call   rax
  017a3: 00 	mov    rdi,0x4
  017aa:    	jmp    0x3d744
:00141 %15 = %15 + %16                      [<INVALID>][<INVALID>]
  017af: 00 	mov    rdi,0x4
  017b6: 01 	sub    DWORD PTR [rip+0x1d0],0x1        # 0x198d
  017bd:    	jne    0x3d7bd
  017c3:    	mov    rdi,r12
  017c6:    	mov    esi,DWORD PTR [rbp-0x18]
  017c9:    	mov    rdx,QWORD PTR [rbp-0x28]
  017cd: 78 	movabs rax,0x55788c79da60
  017d7:    	call   rax
  017d9: 00 	mov    rdi,0x4
  017e0:    	jmp    0x3d7bd
:00142 _ = %14.call z=(%15; 1)              [<INVALID>]
:00143 
  017e5: 00 	mov    rdi,0x4
  017ec: 01 	sub    DWORD PTR [rip+0x19e],0x1        # 0x1991
  017f3:    	jne    0x3d836
  017f9:    	mov    rdi,r12
  017fc:    	mov    esi,DWORD PTR [rbp-0x18]
  017ff:    	mov    rdx,QWORD PTR [rbp-0x28]
  01803: 78 	movabs rax,0x55788c79da60
  0180d:    	call   rax
  0180f: 00 	mov    rdi,0x4
  01816:    	jmp    0x3d836
:00145 %14 = %15
  0181b: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01822: ff 	mov    QWORD PTR [rbp-0x98],rax
:00146 ret %14
  01829: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01830:    	leave  
  01831:    	ret    
:00147 %14 = nil
  01832: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00148 ret %14
  0183d: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01844:    	leave  
  01845:    	ret    
==> start whole compile: vnormalize FuncId(61) self_class:Vec start:[00000] bytecode:0x55788def86a0
<== finished compile. elapsed:53.5µs
offset:Pos(27140) code: 1777 bytes  data: 99 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    QWORD PTR [rbp-0x58],rax
  00027: mov    rdi,QWORD PTR [rbp-0x28]
  0002b: test   rdi,0x7
  00032: jne    0x3bf1a
  00038: cmp    DWORD PTR [rdi+0x4],0x25
  0003c: jne    0x3bf1a
:00000 %3 = %0.call vlength()               [Vec]
:00001 
  00042: mov    rdi,QWORD PTR [rbp-0x28]
  00046: cmp    DWORD PTR [rip+0xffffffffffffbfc3],0x26        # 0xffffc010
  0004d: jne    0x3bf29
  00053: mov    rax,QWORD PTR [rbx]
  00056: lea    rdi,[rsp-0x18]
  0005b: mov    QWORD PTR [rdi],rax
  0005e: mov    QWORD PTR [rbx],rdi
  00061: mov    QWORD PTR [rsp-0x20],0x0
  0006a: mov    QWORD PTR [rsp-0x38],rcx
  0006f: mov    rax,QWORD PTR [rbp-0x28]
  00073: mov    QWORD PTR [rsp-0x38],rax
  00078: mov    rdi,0x0
  0007f: mov    QWORD PTR [rsp-0x30],0x0
  00088: movabs rax,0x60000003c
  00092: mov    QWORD PTR [rsp-0x28],rax
  00097: movabs r13,0x55788dee4d30
  000a1: call   0xffffc92d
  000a6: lea    rdi,[rbp-0x8]
  000aa: mov    QWORD PTR [rbx],rdi
  000ad: movabs r13,0x55788def86c0
  000b7: test   rax,rax
  000ba: je     0xffff9637
  000c0: mov    QWORD PTR [rbp-0x40],rax
:00003 %1 = %3
  000c4: mov    rax,QWORD PTR [rbp-0x40]
  000c8: mov    QWORD PTR [rbp-0x30],rax
:00004 %3 = const[Vec]                      [Vec]
  000cc: mov    rax,QWORD PTR [rip+0xffffffffffffbf49]        # 0xffffc01c
  000d3: cmp    rax,QWORD PTR [rip+0x632]        # 0x70c
  000da: jne    0x3bf38
  000e0: mov    rax,QWORD PTR [rip+0x615]        # 0x6fc
  000e7: mov    QWORD PTR [rbp-0x40],rax
:00005 %4 = @x: Vec[IvarId(0)]
  000eb: mov    rdi,QWORD PTR [rbp-0x28]
  000ef: cmp    WORD PTR [rdi+0x2],0x3
  000f4: jne    0x3bf7e
  000fa: mov    rax,QWORD PTR [rdi+0x10]
  000fe: mov    QWORD PTR [rbp-0x48],rax
:00006 %5 = @y: Vec[IvarId(1)]
  00102: mov    rdi,QWORD PTR [rbp-0x28]
  00106: cmp    WORD PTR [rdi+0x2],0x3
  0010b: jne    0x3bf94
  00111: mov    rax,QWORD PTR [rdi+0x18]
  00115: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = @z: Vec[IvarId(2)]
  00119: mov    rdi,QWORD PTR [rbp-0x28]
  0011d: cmp    WORD PTR [rdi+0x2],0x3
  00122: jne    0x3bfaa
  00128: mov    rax,QWORD PTR [rdi+0x20]
  0012c: mov    QWORD PTR [rbp-0x58],rax
:00008 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00009 
  00130: mov    rdi,QWORD PTR [rbp-0x40]
  00134: test   rdi,0x7
  0013b: jne    0x3bfc0
  00141: cmp    DWORD PTR [rdi+0x4],0x26
  00145: jne    0x3bfc0
  0014b: cmp    DWORD PTR [rip+0xffffffffffffbebe],0x26        # 0xffffc010
  00152: jne    0x3bfc0
  00158: mov    r9,0x0
  0015f: mov    rdx,rdi
  00162: mov    rax,QWORD PTR [rbx]
  00165: lea    rdi,[rsp-0x18]
  0016a: mov    QWORD PTR [rdi],rax
  0016d: mov    QWORD PTR [rbx],rdi
  00170: mov    QWORD PTR [rsp-0x20],0x0
  00179: mov    QWORD PTR [rsp-0x38],rcx
  0017e: lea    rcx,[rbp-0x48]
  00182: mov    r8,0x3
  00189: call   0x3bfcf
  0018e: lea    rdi,[rbp-0x8]
  00192: mov    QWORD PTR [rbx],rdi
  00195: movabs r13,0x55788def8740
  0019f: test   rax,rax
  001a2: je     0xffff9637
  001a8: mov    QWORD PTR [rbp-0x38],rax
:00011 %3 = literal[1e-17]
  001ac: movq   xmm2,QWORD PTR [rip+0x568]        # 0x71c
:00012 _%3 = %1 > %3                        [Float][Float]
:00013 condnotbr _%3 =>:00036
  001b4: mov    rdi,QWORD PTR [rbp-0x30]
  001b8: test   rdi,0x1
  001bf: jne    0x3c001
  001c5: test   rdi,0x2
  001cc: je     0x208
  001d2: xorps  xmm3,xmm3
  001d5: movabs rax,0x8000000000000002
  001df: cmp    rdi,rax
  001e2: je     0x21a
  001e8: mov    rax,rdi
  001eb: sar    rax,0x3f
  001ef: add    rax,0x2
  001f3: and    rdi,0xfffffffffffffffc
  001f7: or     rdi,rax
  001fa: rol    rdi,0x3d
  001fe: movq   xmm3,rdi
  00203: jmp    0x21a
  00208: call   0xffff9670
  0020d: test   rax,rax
  00210: je     0x3c001
  00216: movq   xmm3,xmm0
  0021a: ucomisd xmm3,xmm2
  0021e: jbe    0x3c23f
:00014 %3 = %2.call x()                     [Vec]
:00015 
  00224: mov    rdi,QWORD PTR [rbp-0x38]
  00228: test   rdi,0x7
  0022f: jne    0x3c01d
  00235: cmp    DWORD PTR [rdi+0x4],0x25
  00239: jne    0x3c01d
  0023f: cmp    DWORD PTR [rip+0xffffffffffffbdca],0x26        # 0xffffc010
  00246: jne    0x3c01d
  0024c: mov    esi,DWORD PTR [rip+0x4d6]        # 0x728
  00252: cmp    esi,0xffffffff
  00255: je     0x3c02c
  0025b: cmp    WORD PTR [rdi+0x2],0x3
  00260: jne    0x279
  00266: cmp    esi,0x6
  00269: jge    0x279
  0026f: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00274: jmp    0x297
  00279: sub    rsp,0x10
  0027d: movq   QWORD PTR [rsp],xmm3
  00282: movabs rax,0x55788c73bb50
  0028c: call   rax
  0028e: movq   xmm3,QWORD PTR [rsp]
  00293: add    rsp,0x10
  00297: mov    QWORD PTR [rbp-0x40],rax
:00017 %3 = %3 / %1                         [Float][Float]
  0029b: mov    rdi,QWORD PTR [rbp-0x40]
  0029f: test   rdi,0x1
  002a6: jne    0x3c067
  002ac: test   rdi,0x2
  002b3: je     0x2ef
  002b9: xorps  xmm2,xmm2
  002bc: movabs rax,0x8000000000000002
  002c6: cmp    rdi,rax
  002c9: je     0x301
  002cf: mov    rax,rdi
  002d2: sar    rax,0x3f
  002d6: add    rax,0x2
  002da: and    rdi,0xfffffffffffffffc
  002de: or     rdi,rax
  002e1: rol    rdi,0x3d
  002e5: movq   xmm2,rdi
  002ea: jmp    0x301
  002ef: call   0xffff9670
  002f4: test   rax,rax
  002f7: je     0x3c067
  002fd: movq   xmm2,xmm0
  00301: movq   rax,xmm3
  00306: test   rax,rax
  00309: je     0xffff965c
  0030f: divsd  xmm2,xmm3
:00018 _ = %2.call x=(%3; 1)                [Vec]
:00019 
  00313: movq   xmm0,xmm2
  00317: call   0xffff9763
  0031c: mov    QWORD PTR [rbp-0x40],rax
  00320: mov    rdi,QWORD PTR [rbp-0x38]
  00324: test   rdi,0x7
  0032b: jne    0x3c076
  00331: cmp    DWORD PTR [rdi+0x4],0x25
  00335: jne    0x3c076
  0033b: cmp    DWORD PTR [rip+0xffffffffffffbcce],0x26        # 0xffffc010
  00342: jne    0x3c076
  00348: mov    esi,DWORD PTR [rip+0x3e2]        # 0x730
  0034e: cmp    esi,0xffffffff
  00351: je     0x3c085
  00357: cmp    WORD PTR [rdi+0x2],0x3
  0035c: jne    0x379
  00362: cmp    esi,0x6
  00365: jge    0x379
  0036b: mov    rax,QWORD PTR [rbp-0x40]
  0036f: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00374: jmp    0x3ba
  00379: sub    rsp,0x10
  0037d: movq   QWORD PTR [rsp],xmm2
  00382: movq   QWORD PTR [rsp+0x8],xmm3
  00388: mov    rdx,QWORD PTR [rbp-0x40]
  0038c: movabs rax,0x55788c73bdd0
  00396: call   rax
  00398: movq   xmm2,QWORD PTR [rsp]
  0039d: movq   xmm3,QWORD PTR [rsp+0x8]
  003a3: add    rsp,0x10
  003a7: movabs r13,0x55788def87e0
  003b1: test   rax,rax
  003b4: je     0xffff9637
:00021 %3 = %2.call y()                     [Vec]
:00022 
  003ba: mov    rdi,QWORD PTR [rbp-0x38]
  003be: test   rdi,0x7
  003c5: jne    0x3c0d3
  003cb: cmp    DWORD PTR [rdi+0x4],0x25
  003cf: jne    0x3c0d3
  003d5: cmp    DWORD PTR [rip+0xffffffffffffbc34],0x26        # 0xffffc010
  003dc: jne    0x3c0d3
  003e2: mov    esi,DWORD PTR [rip+0x350]        # 0x738
  003e8: cmp    esi,0xffffffff
  003eb: je     0x3c0e2
  003f1: cmp    WORD PTR [rdi+0x2],0x3
  003f6: jne    0x40f
  003fc: cmp    esi,0x6
  003ff: jge    0x40f
  00405: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0040a: jmp    0x42d
  0040f: sub    rsp,0x10
  00413: movq   QWORD PTR [rsp],xmm3
  00418: movabs rax,0x55788c73bb50
  00422: call   rax
  00424: movq   xmm3,QWORD PTR [rsp]
  00429: add    rsp,0x10
  0042d: mov    QWORD PTR [rbp-0x40],rax
:00024 %3 = %3 / %1                         [Float][Float]
  00431: mov    rdi,QWORD PTR [rbp-0x40]
  00435: test   rdi,0x1
  0043c: jne    0x3c11d
  00442: test   rdi,0x2
  00449: je     0x485
  0044f: xorps  xmm2,xmm2
  00452: movabs rax,0x8000000000000002
  0045c: cmp    rdi,rax
  0045f: je     0x497
  00465: mov    rax,rdi
  00468: sar    rax,0x3f
  0046c: add    rax,0x2
  00470: and    rdi,0xfffffffffffffffc
  00474: or     rdi,rax
  00477: rol    rdi,0x3d
  0047b: movq   xmm2,rdi
  00480: jmp    0x497
  00485: call   0xffff9670
  0048a: test   rax,rax
  0048d: je     0x3c11d
  00493: movq   xmm2,xmm0
  00497: movq   rax,xmm3
  0049c: test   rax,rax
  0049f: je     0xffff965c
  004a5: divsd  xmm2,xmm3
:00025 _ = %2.call y=(%3; 1)                [Vec]
:00026 
  004a9: movq   xmm0,xmm2
  004ad: call   0xffff9763
  004b2: mov    QWORD PTR [rbp-0x40],rax
  004b6: mov    rdi,QWORD PTR [rbp-0x38]
  004ba: test   rdi,0x7
  004c1: jne    0x3c12c
  004c7: cmp    DWORD PTR [rdi+0x4],0x25
  004cb: jne    0x3c12c
  004d1: cmp    DWORD PTR [rip+0xffffffffffffbb38],0x26        # 0xffffc010
  004d8: jne    0x3c12c
  004de: mov    esi,DWORD PTR [rip+0x25c]        # 0x740
  004e4: cmp    esi,0xffffffff
  004e7: je     0x3c13b
  004ed: cmp    WORD PTR [rdi+0x2],0x3
  004f2: jne    0x50f
  004f8: cmp    esi,0x6
  004fb: jge    0x50f
  00501: mov    rax,QWORD PTR [rbp-0x40]
  00505: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0050a: jmp    0x550
  0050f: sub    rsp,0x10
  00513: movq   QWORD PTR [rsp],xmm2
  00518: movq   QWORD PTR [rsp+0x8],xmm3
  0051e: mov    rdx,QWORD PTR [rbp-0x40]
  00522: movabs rax,0x55788c73bdd0
  0052c: call   rax
  0052e: movq   xmm2,QWORD PTR [rsp]
  00533: movq   xmm3,QWORD PTR [rsp+0x8]
  00539: add    rsp,0x10
  0053d: movabs r13,0x55788def8850
  00547: test   rax,rax
  0054a: je     0xffff9637
:00028 %3 = %2.call z()                     [Vec]
:00029 
  00550: mov    rdi,QWORD PTR [rbp-0x38]
  00554: test   rdi,0x7
  0055b: jne    0x3c189
  00561: cmp    DWORD PTR [rdi+0x4],0x25
  00565: jne    0x3c189
  0056b: cmp    DWORD PTR [rip+0xffffffffffffba9e],0x26        # 0xffffc010
  00572: jne    0x3c189
  00578: mov    esi,DWORD PTR [rip+0x1ca]        # 0x748
  0057e: cmp    esi,0xffffffff
  00581: je     0x3c198
  00587: cmp    WORD PTR [rdi+0x2],0x3
  0058c: jne    0x5a5
  00592: cmp    esi,0x6
  00595: jge    0x5a5
  0059b: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005a0: jmp    0x5c3
  005a5: sub    rsp,0x10
  005a9: movq   QWORD PTR [rsp],xmm3
  005ae: movabs rax,0x55788c73bb50
  005b8: call   rax
  005ba: movq   xmm3,QWORD PTR [rsp]
  005bf: add    rsp,0x10
  005c3: mov    QWORD PTR [rbp-0x40],rax
:00031 %3 = %3 / %1                         [Float][Float]
  005c7: mov    rdi,QWORD PTR [rbp-0x40]
  005cb: test   rdi,0x1
  005d2: jne    0x3c1d3
  005d8: test   rdi,0x2
  005df: je     0x61b
  005e5: xorps  xmm2,xmm2
  005e8: movabs rax,0x8000000000000002
  005f2: cmp    rdi,rax
  005f5: je     0x62d
  005fb: mov    rax,rdi
  005fe: sar    rax,0x3f
  00602: add    rax,0x2
  00606: and    rdi,0xfffffffffffffffc
  0060a: or     rdi,rax
  0060d: rol    rdi,0x3d
  00611: movq   xmm2,rdi
  00616: jmp    0x62d
  0061b: call   0xffff9670
  00620: test   rax,rax
  00623: je     0x3c1d3
  00629: movq   xmm2,xmm0
  0062d: movq   rax,xmm3
  00632: test   rax,rax
  00635: je     0xffff965c
  0063b: divsd  xmm2,xmm3
:00032 _ = %2.call z=(%3; 1)                [Vec]
:00033 
  0063f: movq   xmm0,xmm2
  00643: call   0xffff9763
  00648: mov    QWORD PTR [rbp-0x40],rax
  0064c: mov    rdi,QWORD PTR [rbp-0x38]
  00650: test   rdi,0x7
  00657: jne    0x3c1e2
  0065d: cmp    DWORD PTR [rdi+0x4],0x25
  00661: jne    0x3c1e2
  00667: cmp    DWORD PTR [rip+0xffffffffffffb9a2],0x26        # 0xffffc010
  0066e: jne    0x3c1e2
  00674: mov    esi,DWORD PTR [rip+0xd6]        # 0x750
  0067a: cmp    esi,0xffffffff
  0067d: je     0x3c1f1
  00683: cmp    WORD PTR [rdi+0x2],0x3
  00688: jne    0x6a5
  0068e: cmp    esi,0x6
  00691: jge    0x6a5
  00697: mov    rax,QWORD PTR [rbp-0x40]
  0069b: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006a0: jmp    0x6e6
  006a5: sub    rsp,0x10
  006a9: movq   QWORD PTR [rsp],xmm2
  006ae: movq   QWORD PTR [rsp+0x8],xmm3
  006b4: mov    rdx,QWORD PTR [rbp-0x40]
  006b8: movabs rax,0x55788c73bdd0
  006c2: call   rax
  006c4: movq   xmm2,QWORD PTR [rsp]
  006c9: movq   xmm3,QWORD PTR [rsp+0x8]
  006cf: add    rsp,0x10
  006d3: movabs r13,0x55788def88c0
  006dd: test   rax,rax
  006e0: je     0xffff9637
:00035 br =>:00036
  006e6: jmp    0x3c265
:00036 ret %2
  006eb: mov    rax,QWORD PTR [rbp-0x38]
  006ef: leave  
  006f0: ret    
==> start whole compile: vlength FuncId(60) self_class:Vec start:[00000] bytecode:0x55788dee4d30
<== finished compile. elapsed:29.3µs
offset:Pos(29016) code: 926 bytes  data: 34 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    rdi,QWORD PTR [rbp-0x28]
  00027: test   rdi,0x7
  0002e: jne    0x3bb2a
  00034: cmp    DWORD PTR [rdi+0x4],0x25
  00038: jne    0x3bb2a
:00000 %2 = const[Math]                     [Math]
  0003e: mov    rax,QWORD PTR [rip+0xffffffffffffb883]        # 0xffffb8c8
  00045: cmp    rax,QWORD PTR [rip+0x36c]        # 0x3b8
  0004c: jne    0x3bb39
  00052: mov    rax,QWORD PTR [rip+0x34f]        # 0x3a8
  00059: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = @x: Vec[IvarId(0)]
  0005d: mov    rdi,QWORD PTR [rbp-0x28]
  00061: cmp    WORD PTR [rdi+0x2],0x3
  00066: jne    0x3bb7f
  0006c: mov    rax,QWORD PTR [rdi+0x10]
  00070: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = @x: Vec[IvarId(0)]
  00074: mov    rdi,QWORD PTR [rbp-0x28]
  00078: cmp    WORD PTR [rdi+0x2],0x3
  0007d: jne    0x3bb95
  00083: mov    rax,QWORD PTR [rdi+0x10]
  00087: mov    QWORD PTR [rbp-0x48],rax
:00003 %3 = %3 * %4                         [Float][Float]
  0008b: mov    rdi,QWORD PTR [rbp-0x40]
  0008f: test   rdi,0x1
  00096: jne    0x3bbab
  0009c: test   rdi,0x2
  000a3: je     0xdf
  000a9: xorps  xmm2,xmm2
  000ac: movabs rax,0x8000000000000002
  000b6: cmp    rdi,rax
  000b9: je     0xf1
  000bf: mov    rax,rdi
  000c2: sar    rax,0x3f
  000c6: add    rax,0x2
  000ca: and    rdi,0xfffffffffffffffc
  000ce: or     rdi,rax
  000d1: rol    rdi,0x3d
  000d5: movq   xmm2,rdi
  000da: jmp    0xf1
  000df: call   0xffff8f1c
  000e4: test   rax,rax
  000e7: je     0x3bbab
  000ed: movq   xmm2,xmm0
  000f1: mov    rdi,QWORD PTR [rbp-0x48]
  000f5: test   rdi,0x1
  000fc: jne    0x3bbba
  00102: test   rdi,0x2
  00109: je     0x145
  0010f: xorps  xmm3,xmm3
  00112: movabs rax,0x8000000000000002
  0011c: cmp    rdi,rax
  0011f: je     0x157
  00125: mov    rax,rdi
  00128: sar    rax,0x3f
  0012c: add    rax,0x2
  00130: and    rdi,0xfffffffffffffffc
  00134: or     rdi,rax
  00137: rol    rdi,0x3d
  0013b: movq   xmm3,rdi
  00140: jmp    0x157
  00145: call   0xffff8f1c
  0014a: test   rax,rax
  0014d: je     0x3bbba
  00153: movq   xmm3,xmm0
  00157: mulsd  xmm2,xmm3
:00004 %4 = @y: Vec[IvarId(1)]
  0015b: mov    rdi,QWORD PTR [rbp-0x28]
  0015f: cmp    WORD PTR [rdi+0x2],0x3
  00164: jne    0x3bbc9
  0016a: mov    rax,QWORD PTR [rdi+0x18]
  0016e: mov    QWORD PTR [rbp-0x48],rax
:00005 %5 = @y: Vec[IvarId(1)]
  00172: mov    rdi,QWORD PTR [rbp-0x28]
  00176: cmp    WORD PTR [rdi+0x2],0x3
  0017b: jne    0x3bbf1
  00181: mov    rax,QWORD PTR [rdi+0x18]
  00185: mov    QWORD PTR [rbp-0x50],rax
:00006 %4 = %4 * %5                         [Float][Float]
  00189: mov    rdi,QWORD PTR [rbp-0x48]
  0018d: test   rdi,0x1
  00194: jne    0x3bc19
  0019a: test   rdi,0x2
  001a1: je     0x1dd
  001a7: xorps  xmm3,xmm3
  001aa: movabs rax,0x8000000000000002
  001b4: cmp    rdi,rax
  001b7: je     0x1ef
  001bd: mov    rax,rdi
  001c0: sar    rax,0x3f
  001c4: add    rax,0x2
  001c8: and    rdi,0xfffffffffffffffc
  001cc: or     rdi,rax
  001cf: rol    rdi,0x3d
  001d3: movq   xmm3,rdi
  001d8: jmp    0x1ef
  001dd: call   0xffff8f1c
  001e2: test   rax,rax
  001e5: je     0x3bc19
  001eb: movq   xmm3,xmm0
  001ef: mov    rdi,QWORD PTR [rbp-0x50]
  001f3: test   rdi,0x1
  001fa: jne    0x3bc35
  00200: test   rdi,0x2
  00207: je     0x243
  0020d: xorps  xmm4,xmm4
  00210: movabs rax,0x8000000000000002
  0021a: cmp    rdi,rax
  0021d: je     0x255
  00223: mov    rax,rdi
  00226: sar    rax,0x3f
  0022a: add    rax,0x2
  0022e: and    rdi,0xfffffffffffffffc
  00232: or     rdi,rax
  00235: rol    rdi,0x3d
  00239: movq   xmm4,rdi
  0023e: jmp    0x255
  00243: call   0xffff8f1c
  00248: test   rax,rax
  0024b: je     0x3bc35
  00251: movq   xmm4,xmm0
  00255: mulsd  xmm3,xmm4
:00007 %3 = %3 + %4                         [Float][Float]
  00259: addsd  xmm2,xmm3
:00008 %4 = @z: Vec[IvarId(2)]
  0025d: mov    rdi,QWORD PTR [rbp-0x28]
  00261: cmp    WORD PTR [rdi+0x2],0x3
  00266: jne    0x3bc51
  0026c: mov    rax,QWORD PTR [rdi+0x20]
  00270: mov    QWORD PTR [rbp-0x48],rax
:00009 %5 = @z: Vec[IvarId(2)]
  00274: mov    rdi,QWORD PTR [rbp-0x28]
  00278: cmp    WORD PTR [rdi+0x2],0x3
  0027d: jne    0x3bc85
  00283: mov    rax,QWORD PTR [rdi+0x20]
  00287: mov    QWORD PTR [rbp-0x50],rax
:00010 %4 = %4 * %5                         [Float][Float]
  0028b: mov    rdi,QWORD PTR [rbp-0x48]
  0028f: test   rdi,0x1
  00296: jne    0x3bcad
  0029c: test   rdi,0x2
  002a3: je     0x2df
  002a9: xorps  xmm3,xmm3
  002ac: movabs rax,0x8000000000000002
  002b6: cmp    rdi,rax
  002b9: je     0x2f1
  002bf: mov    rax,rdi
  002c2: sar    rax,0x3f
  002c6: add    rax,0x2
  002ca: and    rdi,0xfffffffffffffffc
  002ce: or     rdi,rax
  002d1: rol    rdi,0x3d
  002d5: movq   xmm3,rdi
  002da: jmp    0x2f1
  002df: call   0xffff8f1c
  002e4: test   rax,rax
  002e7: je     0x3bcad
  002ed: movq   xmm3,xmm0
  002f1: mov    rdi,QWORD PTR [rbp-0x50]
  002f5: test   rdi,0x1
  002fc: jne    0x3bcc9
  00302: test   rdi,0x2
  00309: je     0x345
  0030f: xorps  xmm4,xmm4
  00312: movabs rax,0x8000000000000002
  0031c: cmp    rdi,rax
  0031f: je     0x357
  00325: mov    rax,rdi
  00328: sar    rax,0x3f
  0032c: add    rax,0x2
  00330: and    rdi,0xfffffffffffffffc
  00334: or     rdi,rax
  00337: rol    rdi,0x3d
  0033b: movq   xmm4,rdi
  00340: jmp    0x357
  00345: call   0xffff8f1c
  0034a: test   rax,rax
  0034d: je     0x3bcc9
  00353: movq   xmm4,xmm0
  00357: mulsd  xmm3,xmm4
:00011 %3 = %3 + %4                         [Float][Float]
  0035b: addsd  xmm2,xmm3
:00012 %1 = %2.call sqrt(%3; 1)             [#<Class:Math>]
:00013 
  0035f: mov    rdi,QWORD PTR [rbp-0x38]
  00363: test   rdi,0x7
  0036a: jne    0x3bce5
  00370: cmp    DWORD PTR [rdi+0x4],0x20
  00374: jne    0x3bce5
  0037a: cmp    DWORD PTR [rip+0xffffffffffffb53b],0x26        # 0xffffb8bc
  00381: jne    0x3bce5
  00387: sqrtsd xmm5,xmm2
:00015 ret %1
  0038b: movq   xmm0,xmm5
  0038f: call   0xffff900f
  00394: mov    QWORD PTR [rbp-0x30],rax
  00398: mov    rax,QWORD PTR [rbp-0x30]
  0039c: leave  
  0039d: ret    
==> start whole compile: initialize FuncId(66) self_class:Ray start:[00000] bytecode:0x55788dec5090
<== finished compile. elapsed:13µs
offset:Pos(29976) code: 103 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x40],0x4
  00010: mov    rdi,QWORD PTR [rbp-0x28]
  00014: test   rdi,0x7
  0001b: jne    0x3b94e
  00021: cmp    DWORD PTR [rdi+0x4],0x2b
  00025: jne    0x3b94e
:00000 @org: Ray[IvarId(0)] = %1
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: cmp    WORD PTR [rdi+0x2],0x3
  00034: jne    0x3b95d
  0003a: mov    rax,QWORD PTR [rbp-0x30]
  0003e: mov    QWORD PTR [rdi+0x10],rax
:00001 @dir: Ray[IvarId(1)] = %2
  00042: mov    rdi,QWORD PTR [rbp-0x28]
  00046: cmp    WORD PTR [rdi+0x2],0x3
  0004b: jne    0x3b977
  00051: mov    rax,QWORD PTR [rbp-0x38]
  00055: mov    QWORD PTR [rdi+0x18],rax
:00002 %3 = %2
  00059: mov    rax,QWORD PTR [rbp-0x38]
  0005d: mov    QWORD PTR [rbp-0x40],rax
:00003 ret %3
  00061: mov    rax,QWORD PTR [rbp-0x40]
  00065: leave  
  00066: ret    
==> start whole compile: initialize FuncId(67) self_class:Isect start:[00000] bytecode:0x55788dee8e40
<== finished compile. elapsed:27.5µs
offset:Pos(30079) code: 712 bytes  data: 177 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    rdi,QWORD PTR [rbp-0x28]
  00027: test   rdi,0x7
  0002e: jne    0x3b92a
  00034: cmp    DWORD PTR [rdi+0x4],0x2d
  00038: jne    0x3b92a
:00000 %1 = literal[10000000.0]
  0003e: movq   xmm2,QWORD PTR [rip+0x28b]        # 0x2d1
:00001 @t: Isect[IvarId(0)] = %1
  00046: movq   xmm0,xmm2
  0004a: call   0xffff8be8
  0004f: mov    QWORD PTR [rbp-0x30],rax
  00053: mov    rdi,QWORD PTR [rbp-0x28]
  00057: cmp    WORD PTR [rdi+0x2],0x3
  0005c: jne    0x3b939
  00062: mov    rax,QWORD PTR [rbp-0x30]
  00066: mov    QWORD PTR [rdi+0x10],rax
:00002 %1 = literal[false]
  0006a: mov    rax,0x14
  00071: mov    QWORD PTR [rbp-0x30],rax
:00003 @hit: Isect[IvarId(1)] = %1
  00075: mov    rdi,QWORD PTR [rbp-0x28]
  00079: cmp    WORD PTR [rdi+0x2],0x3
  0007e: jne    0x3b965
  00084: mov    rax,QWORD PTR [rbp-0x30]
  00088: mov    QWORD PTR [rdi+0x18],rax
:00004 %2 = const[Vec]                      [Vec]
  0008c: mov    rax,QWORD PTR [rip+0xffffffffffffb40e]        # 0xffffb4a1
  00093: cmp    rax,QWORD PTR [rip+0x257]        # 0x2f1
  0009a: jne    0x3b97f
  000a0: mov    rax,QWORD PTR [rip+0x23a]        # 0x2e1
  000a7: mov    QWORD PTR [rbp-0x38],rax
:00005 %3 = literal[0.0]
  000ab: movq   xmm2,QWORD PTR [rip+0x24e]        # 0x301
:00006 %4 = literal[0.0]
  000b3: movq   xmm3,QWORD PTR [rip+0x256]        # 0x311
:00007 %5 = literal[0.0]
  000bb: movq   xmm4,QWORD PTR [rip+0x25e]        # 0x321
:00008 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
:00009 
  000c3: movq   xmm0,xmm2
  000c7: call   0xffff8be8
  000cc: mov    QWORD PTR [rbp-0x40],rax
  000d0: movq   xmm0,xmm3
  000d4: call   0xffff8be8
  000d9: mov    QWORD PTR [rbp-0x48],rax
  000dd: movq   xmm0,xmm4
  000e1: call   0xffff8be8
  000e6: mov    QWORD PTR [rbp-0x50],rax
  000ea: mov    rdi,QWORD PTR [rbp-0x38]
  000ee: test   rdi,0x7
  000f5: jne    0x3b9c5
  000fb: cmp    DWORD PTR [rdi+0x4],0x26
  000ff: jne    0x3b9c5
  00105: cmp    DWORD PTR [rip+0xffffffffffffb389],0x26        # 0xffffb495
  0010c: jne    0x3b9c5
  00112: mov    r9,0x0
  00119: sub    rsp,0x20
  0011d: movq   QWORD PTR [rsp],xmm2
  00122: movq   QWORD PTR [rsp+0x8],xmm3
  00128: movq   QWORD PTR [rsp+0x10],xmm4
  0012e: mov    rdx,rdi
  00131: mov    rax,QWORD PTR [rbx]
  00134: lea    rdi,[rsp-0x18]
  00139: mov    QWORD PTR [rdi],rax
  0013c: mov    QWORD PTR [rbx],rdi
  0013f: mov    QWORD PTR [rsp-0x20],0x0
  00148: mov    QWORD PTR [rsp-0x38],rcx
  0014d: lea    rcx,[rbp-0x40]
  00151: mov    r8,0x3
  00158: call   0x3b9d4
  0015d: lea    rdi,[rbp-0x8]
  00161: mov    QWORD PTR [rbx],rdi
  00164: movq   xmm2,QWORD PTR [rsp]
  00169: movq   xmm3,QWORD PTR [rsp+0x8]
  0016f: movq   xmm4,QWORD PTR [rsp+0x10]
  00175: add    rsp,0x20
  00179: movabs r13,0x55788dee8ee0
  00183: test   rax,rax
  00186: je     0xffff8abc
  0018c: mov    QWORD PTR [rbp-0x30],rax
:00011 @pl: Isect[IvarId(2)] = %1
  00190: mov    rdi,QWORD PTR [rbp-0x28]
  00194: cmp    WORD PTR [rdi+0x2],0x3
  00199: jne    0x3ba06
  0019f: mov    rax,QWORD PTR [rbp-0x30]
  001a3: mov    QWORD PTR [rdi+0x20],rax
:00012 %2 = const[Vec]                      [Vec]
  001a7: mov    rax,QWORD PTR [rip+0xffffffffffffb2f3]        # 0xffffb4a1
  001ae: cmp    rax,QWORD PTR [rip+0x18c]        # 0x341
  001b5: jne    0x3ba4a
  001bb: mov    rax,QWORD PTR [rip+0x16f]        # 0x331
  001c2: mov    QWORD PTR [rbp-0x38],rax
:00013 %3 = literal[0.0]
  001c6: movq   xmm2,QWORD PTR [rip+0x183]        # 0x351
:00014 %4 = literal[0.0]
  001ce: movq   xmm3,QWORD PTR [rip+0x18b]        # 0x361
:00015 %5 = literal[0.0]
  001d6: movq   xmm4,QWORD PTR [rip+0x193]        # 0x371
:00016 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
:00017 
  001de: movq   xmm0,xmm2
  001e2: call   0xffff8be8
  001e7: mov    QWORD PTR [rbp-0x40],rax
  001eb: movq   xmm0,xmm3
  001ef: call   0xffff8be8
  001f4: mov    QWORD PTR [rbp-0x48],rax
  001f8: movq   xmm0,xmm4
  001fc: call   0xffff8be8
  00201: mov    QWORD PTR [rbp-0x50],rax
  00205: mov    rdi,QWORD PTR [rbp-0x38]
  00209: test   rdi,0x7
  00210: jne    0x3baba
  00216: cmp    DWORD PTR [rdi+0x4],0x26
  0021a: jne    0x3baba
  00220: cmp    DWORD PTR [rip+0xffffffffffffb26e],0x26        # 0xffffb495
  00227: jne    0x3baba
  0022d: mov    r9,0x0
  00234: sub    rsp,0x20
  00238: movq   QWORD PTR [rsp],xmm2
  0023d: movq   QWORD PTR [rsp+0x8],xmm3
  00243: movq   QWORD PTR [rsp+0x10],xmm4
  00249: mov    rdx,rdi
  0024c: mov    rax,QWORD PTR [rbx]
  0024f: lea    rdi,[rsp-0x18]
  00254: mov    QWORD PTR [rdi],rax
  00257: mov    QWORD PTR [rbx],rdi
  0025a: mov    QWORD PTR [rsp-0x20],0x0
  00263: mov    QWORD PTR [rsp-0x38],rcx
  00268: lea    rcx,[rbp-0x40]
  0026c: mov    r8,0x3
  00273: call   0x3bac9
  00278: lea    rdi,[rbp-0x8]
  0027c: mov    QWORD PTR [rbx],rdi
  0027f: movq   xmm2,QWORD PTR [rsp]
  00284: movq   xmm3,QWORD PTR [rsp+0x8]
  0028a: movq   xmm4,QWORD PTR [rsp+0x10]
  00290: add    rsp,0x20
  00294: movabs r13,0x55788dee8f60
  0029e: test   rax,rax
  002a1: je     0xffff8abc
  002a7: mov    QWORD PTR [rbp-0x30],rax
:00019 @n: Isect[IvarId(3)] = %1
  002ab: mov    rdi,QWORD PTR [rbp-0x28]
  002af: cmp    WORD PTR [rdi+0x2],0x3
  002b4: jne    0x3bafb
  002ba: mov    rax,QWORD PTR [rbp-0x30]
  002be: mov    QWORD PTR [rdi+0x28],rax
:00020 ret %1
  002c2: mov    rax,QWORD PTR [rbp-0x30]
  002c6: leave  
  002c7: ret    
==> start whole compile: intersect FuncId(65) self_class:Plane start:[00000] bytecode:0x55788deea540
<== finished compile. elapsed:83.5µs
offset:Pos(30968) code: 3100 bytes  data: 212 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0xa0
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x40],rax
  00016: mov    QWORD PTR [rbp-0x48],rax
  0001a: mov    QWORD PTR [rbp-0x50],rax
  0001e: mov    QWORD PTR [rbp-0x58],rax
  00022: mov    QWORD PTR [rbp-0x60],rax
  00026: mov    QWORD PTR [rbp-0x68],rax
  0002a: mov    QWORD PTR [rbp-0x70],rax
  0002e: mov    QWORD PTR [rbp-0x78],rax
  00032: mov    QWORD PTR [rbp-0x80],rax
  00036: mov    QWORD PTR [rbp-0x88],rax
  0003d: mov    QWORD PTR [rbp-0x90],rax
  00044: mov    rdi,QWORD PTR [rbp-0x28]
  00048: test   rdi,0x7
  0004f: jne    0x3b7c6
  00055: cmp    DWORD PTR [rdi+0x4],0x29
  00059: jne    0x3b7c6
:00000 %7 = @p: Plane[IvarId(0)]
  0005f: mov    rdi,QWORD PTR [rbp-0x28]
  00063: cmp    WORD PTR [rdi+0x2],0x3
  00068: jne    0x3b7d5
  0006e: mov    rax,QWORD PTR [rdi+0x10]
  00072: mov    QWORD PTR [rbp-0x60],rax
:00001 %8 = @n: Plane[IvarId(1)]
  00076: mov    rdi,QWORD PTR [rbp-0x28]
  0007a: cmp    WORD PTR [rdi+0x2],0x3
  0007f: jne    0x3b7eb
  00085: mov    rax,QWORD PTR [rdi+0x18]
  00089: mov    QWORD PTR [rbp-0x68],rax
:00002 %3 = %7.call vdot(%8; 1)             [Vec]
:00003 
  0008d: mov    rdi,QWORD PTR [rbp-0x60]
  00091: test   rdi,0x7
  00098: jne    0x3b801
  0009e: cmp    DWORD PTR [rdi+0x4],0x25
  000a2: jne    0x3b801
  000a8: cmp    DWORD PTR [rip+0xffffffffffffb06d],0x26        # 0xffffb11c
  000af: jne    0x3b801
  000b5: mov    rax,QWORD PTR [rbx]
  000b8: lea    rdi,[rsp-0x18]
  000bd: mov    QWORD PTR [rdi],rax
  000c0: mov    QWORD PTR [rbx],rdi
  000c3: mov    QWORD PTR [rsp-0x20],0x0
  000cc: mov    QWORD PTR [rsp-0x38],rcx
  000d1: mov    rax,QWORD PTR [rbp-0x60]
  000d5: mov    QWORD PTR [rsp-0x38],rax
  000da: mov    rdi,0x1
  000e1: mov    rax,QWORD PTR [rbp-0x68]
  000e5: mov    QWORD PTR [rsp-0x40],rax
  000ea: mov    QWORD PTR [rsp-0x30],0x0
  000f3: movabs rax,0x100050000003b
  000fd: mov    QWORD PTR [rsp-0x28],rax
  00102: movabs r13,0x55788df32010
  0010c: call   0xffffbe0d
  00111: lea    rdi,[rbp-0x8]
  00115: mov    QWORD PTR [rbx],rdi
  00118: movabs r13,0x55788deea580
  00122: test   rax,rax
  00125: je     0xffff8743
  0012b: mov    QWORD PTR [rbp-0x40],rax
:00005 %3 = neg %3                          [Float]
  0012f: mov    rdi,QWORD PTR [rbp-0x40]
  00133: test   rdi,0x1
  0013a: jne    0x3b810
  00140: test   rdi,0x2
  00147: je     0x183
  0014d: xorps  xmm2,xmm2
  00150: movabs rax,0x8000000000000002
  0015a: cmp    rdi,rax
  0015d: je     0x195
  00163: mov    rax,rdi
  00166: sar    rax,0x3f
  0016a: add    rax,0x2
  0016e: and    rdi,0xfffffffffffffffc
  00172: or     rdi,rax
  00175: rol    rdi,0x3d
  00179: movq   xmm2,rdi
  0017e: jmp    0x195
  00183: call   0xffff877c
  00188: test   rax,rax
  0018b: je     0x3b810
  00191: movq   xmm2,xmm0
  00195: xorps  xmm2,XMMWORD PTR [rip+0xa8c]        # 0xc28
:00006 %7 = %1.call dir()                   [Ray]
:00007 
  0019c: mov    rdi,QWORD PTR [rbp-0x30]
  001a0: test   rdi,0x7
  001a7: jne    0x3b81f
  001ad: cmp    DWORD PTR [rdi+0x4],0x2b
  001b1: jne    0x3b81f
  001b7: cmp    DWORD PTR [rip+0xffffffffffffaf5e],0x26        # 0xffffb11c
  001be: jne    0x3b81f
  001c4: mov    esi,DWORD PTR [rip+0xa6a]        # 0xc34
  001ca: cmp    esi,0xffffffff
  001cd: je     0x3b83b
  001d3: cmp    WORD PTR [rdi+0x2],0x3
  001d8: jne    0x1f1
  001de: cmp    esi,0x6
  001e1: jge    0x1f1
  001e7: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ec: jmp    0x20f
  001f1: sub    rsp,0x10
  001f5: movq   QWORD PTR [rsp],xmm2
  001fa: movabs rax,0x55788c73bb50
  00204: call   rax
  00206: movq   xmm2,QWORD PTR [rsp]
  0020b: add    rsp,0x10
  0020f: mov    QWORD PTR [rbp-0x60],rax
:00009 %8 = @n: Plane[IvarId(1)]
  00213: mov    rdi,QWORD PTR [rbp-0x28]
  00217: cmp    WORD PTR [rdi+0x2],0x3
  0021c: jne    0x3b876
  00222: mov    rax,QWORD PTR [rdi+0x18]
  00226: mov    QWORD PTR [rbp-0x68],rax
:00010 %4 = %7.call vdot(%8; 1)             [Vec]
:00011 
  0022a: mov    rdi,QWORD PTR [rbp-0x60]
  0022e: test   rdi,0x7
  00235: jne    0x3b89e
  0023b: cmp    DWORD PTR [rdi+0x4],0x25
  0023f: jne    0x3b89e
  00245: cmp    DWORD PTR [rip+0xffffffffffffaed0],0x26        # 0xffffb11c
  0024c: jne    0x3b89e
  00252: sub    rsp,0x10
  00256: movq   QWORD PTR [rsp],xmm2
  0025b: mov    rax,QWORD PTR [rbx]
  0025e: lea    rdi,[rsp-0x18]
  00263: mov    QWORD PTR [rdi],rax
  00266: mov    QWORD PTR [rbx],rdi
  00269: mov    QWORD PTR [rsp-0x20],0x0
  00272: mov    QWORD PTR [rsp-0x38],rcx
  00277: mov    rax,QWORD PTR [rbp-0x60]
  0027b: mov    QWORD PTR [rsp-0x38],rax
  00280: mov    rdi,0x1
  00287: mov    rax,QWORD PTR [rbp-0x68]
  0028b: mov    QWORD PTR [rsp-0x40],rax
  00290: mov    QWORD PTR [rsp-0x30],0x0
  00299: movabs rax,0x100050000003b
  002a3: mov    QWORD PTR [rsp-0x28],rax
  002a8: movabs r13,0x55788df32010
  002b2: call   0xffffbe0d
  002b7: lea    rdi,[rbp-0x8]
  002bb: mov    QWORD PTR [rbx],rdi
  002be: movq   xmm2,QWORD PTR [rsp]
  002c3: add    rsp,0x10
  002c7: movabs r13,0x55788deea600
  002d1: test   rax,rax
  002d4: je     0xffff8743
  002da: mov    QWORD PTR [rbp-0x48],rax
:00013 %5 = %4
  002de: mov    rax,QWORD PTR [rbp-0x48]
  002e2: mov    QWORD PTR [rbp-0x50],rax
:00014 %7 = literal[0.0]
  002e6: movq   xmm3,QWORD PTR [rip+0x94a]        # 0xc38
:00015 _%7 = %4 < %7                        [Float][Float]
:00016 condnotbr _%7 =>:00020
  002ee: mov    rdi,QWORD PTR [rbp-0x48]
  002f2: test   rdi,0x1
  002f9: jne    0x3b8ba
  002ff: test   rdi,0x2
  00306: je     0x342
  0030c: xorps  xmm4,xmm4
  0030f: movabs rax,0x8000000000000002
  00319: cmp    rdi,rax
  0031c: je     0x354
  00322: mov    rax,rdi
  00325: sar    rax,0x3f
  00329: add    rax,0x2
  0032d: and    rdi,0xfffffffffffffffc
  00331: or     rdi,rax
  00334: rol    rdi,0x3d
  00338: movq   xmm4,rdi
  0033d: jmp    0x354
  00342: call   0xffff877c
  00347: test   rax,rax
  0034a: je     0x3b8ba
  00350: movq   xmm4,xmm0
  00354: ucomisd xmm4,xmm3
  00358: jae    0x3b919
:00017 %5 = %4
:00018 %5 = neg %5                          [<INVALID>]
  0035e: mov    rdi,0x4
  00365: sub    DWORD PTR [rip+0x8d4],0x1        # 0xc40
  0036c: jne    0x3b8e3
  00372: mov    rdi,r12
  00375: mov    esi,DWORD PTR [rbp-0x18]
  00378: mov    rdx,QWORD PTR [rbp-0x28]
  0037c: movabs rax,0x55788c79da60
  00386: call   rax
  00388: mov    rdi,0x4
  0038f: jmp    0x3b8e3
:00019 br =>:00020
  00394: jmp    0x3b94c
:00020 %7 = literal[1e-17]
  00399: movq   xmm3,QWORD PTR [rip+0x8a7]        # 0xc48
:00021 _%7 = %5 < %7                        [Float][Float]
:00022 condnotbr _%7 =>:00026
  003a1: mov    rdi,QWORD PTR [rbp-0x50]
  003a5: test   rdi,0x1
  003ac: jne    0x3b990
  003b2: test   rdi,0x2
  003b9: je     0x3f5
  003bf: xorps  xmm5,xmm5
  003c2: movabs rax,0x8000000000000002
  003cc: cmp    rdi,rax
  003cf: je     0x407
  003d5: mov    rax,rdi
  003d8: sar    rax,0x3f
  003dc: add    rax,0x2
  003e0: and    rdi,0xfffffffffffffffc
  003e4: or     rdi,rax
  003e7: rol    rdi,0x3d
  003eb: movq   xmm5,rdi
  003f0: jmp    0x407
  003f5: call   0xffff877c
  003fa: test   rax,rax
  003fd: je     0x3b990
  00403: movq   xmm5,xmm0
  00407: ucomisd xmm5,xmm3
  0040b: jae    0x41f
:00023 %7 = nil
  00411: mov    QWORD PTR [rbp-0x60],0x4
:00024 ret %7
  00419: mov    rax,QWORD PTR [rbp-0x60]
  0041d: leave  
  0041e: ret    
:00026 %8 = %1.call org()                   [Ray]
:00027 
  0041f: mov    rdi,QWORD PTR [rbp-0x30]
  00423: test   rdi,0x7
  0042a: jne    0x3b9b9
  00430: cmp    DWORD PTR [rdi+0x4],0x2b
  00434: jne    0x3b9b9
  0043a: cmp    DWORD PTR [rip+0xffffffffffffacdb],0x26        # 0xffffb11c
  00441: jne    0x3b9b9
  00447: mov    esi,DWORD PTR [rip+0x807]        # 0xc54
  0044d: cmp    esi,0xffffffff
  00450: je     0x3b9e2
  00456: cmp    WORD PTR [rdi+0x2],0x3
  0045b: jne    0x474
  00461: cmp    esi,0x6
  00464: jge    0x474
  0046a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0046f: jmp    0x4b6
  00474: sub    rsp,0x20
  00478: movq   QWORD PTR [rsp],xmm2
  0047d: movq   QWORD PTR [rsp+0x8],xmm3
  00483: movq   QWORD PTR [rsp+0x10],xmm4
  00489: movq   QWORD PTR [rsp+0x18],xmm5
  0048f: movabs rax,0x55788c73bb50
  00499: call   rax
  0049b: movq   xmm2,QWORD PTR [rsp]
  004a0: movq   xmm3,QWORD PTR [rsp+0x8]
  004a6: movq   xmm4,QWORD PTR [rsp+0x10]
  004ac: movq   xmm5,QWORD PTR [rsp+0x18]
  004b2: add    rsp,0x20
  004b6: mov    QWORD PTR [rbp-0x68],rax
:00029 %9 = @n: Plane[IvarId(1)]
  004ba: mov    rdi,QWORD PTR [rbp-0x28]
  004be: cmp    WORD PTR [rdi+0x2],0x3
  004c3: jne    0x3ba41
  004c9: mov    rax,QWORD PTR [rdi+0x18]
  004cd: mov    QWORD PTR [rbp-0x70],rax
:00030 %7 = %8.call vdot(%9; 1)             [Vec]
:00031 
  004d1: mov    rdi,QWORD PTR [rbp-0x68]
  004d5: test   rdi,0x7
  004dc: jne    0x3ba8d
  004e2: cmp    DWORD PTR [rdi+0x4],0x25
  004e6: jne    0x3ba8d
  004ec: cmp    DWORD PTR [rip+0xffffffffffffac29],0x26        # 0xffffb11c
  004f3: jne    0x3ba8d
  004f9: sub    rsp,0x20
  004fd: movq   QWORD PTR [rsp],xmm2
  00502: movq   QWORD PTR [rsp+0x8],xmm4
  00508: movq   QWORD PTR [rsp+0x10],xmm5
  0050e: mov    rax,QWORD PTR [rbx]
  00511: lea    rdi,[rsp-0x18]
  00516: mov    QWORD PTR [rdi],rax
  00519: mov    QWORD PTR [rbx],rdi
  0051c: mov    QWORD PTR [rsp-0x20],0x0
  00525: mov    QWORD PTR [rsp-0x38],rcx
  0052a: mov    rax,QWORD PTR [rbp-0x68]
  0052e: mov    QWORD PTR [rsp-0x38],rax
  00533: mov    rdi,0x1
  0053a: mov    rax,QWORD PTR [rbp-0x70]
  0053e: mov    QWORD PTR [rsp-0x40],rax
  00543: mov    QWORD PTR [rsp-0x30],0x0
  0054c: movabs rax,0x100050000003b
  00556: mov    QWORD PTR [rsp-0x28],rax
  0055b: movabs r13,0x55788df32010
  00565: call   0xffffbe0d
  0056a: lea    rdi,[rbp-0x8]
  0056e: mov    QWORD PTR [rbx],rdi
  00571: movq   xmm2,QWORD PTR [rsp]
  00576: movq   xmm4,QWORD PTR [rsp+0x8]
  0057c: movq   xmm5,QWORD PTR [rsp+0x10]
  00582: add    rsp,0x20
  00586: movabs r13,0x55788deea740
  00590: test   rax,rax
  00593: je     0xffff8743
  00599: mov    QWORD PTR [rbp-0x60],rax
:00033 %7 = %7 + %3                         [Float][Float]
  0059d: mov    rdi,QWORD PTR [rbp-0x60]
  005a1: test   rdi,0x1
  005a8: jne    0x3baa9
  005ae: test   rdi,0x2
  005b5: je     0x5f1
  005bb: xorps  xmm3,xmm3
  005be: movabs rax,0x8000000000000002
  005c8: cmp    rdi,rax
  005cb: je     0x603
  005d1: mov    rax,rdi
  005d4: sar    rax,0x3f
  005d8: add    rax,0x2
  005dc: and    rdi,0xfffffffffffffffc
  005e0: or     rdi,rax
  005e3: rol    rdi,0x3d
  005e7: movq   xmm3,rdi
  005ec: jmp    0x603
  005f1: call   0xffff877c
  005f6: test   rax,rax
  005f9: je     0x3baa9
  005ff: movq   xmm3,xmm0
  00603: addsd  xmm3,xmm2
:00034 %7 = neg %7                          [Float]
  00607: xorps  xmm3,XMMWORD PTR [rip+0x64a]        # 0xc58
:00035 %6 = %7 / %4                         [Float][Float]
  0060e: movq   xmm6,xmm3
  00612: movq   rax,xmm4
  00617: test   rax,rax
  0061a: je     0xffff8768
  00620: divsd  xmm6,xmm4
:00036 %7 = literal[0.0]
  00624: movq   xmm3,QWORD PTR [rip+0x63c]        # 0xc68
:00037 _%7 = %6 > %7                        [Float][Float]
:00038 condnotbr _%7 =>:00105
  0062c: ucomisd xmm6,xmm3
  00630: jbe    0x3be50
:00039 %7 = %2.call t()                     [<INVALID>]
:00040 
  00636: mov    rdi,0x4
  0063d: sub    DWORD PTR [rip+0x62c],0x1        # 0xc70
  00644: jne    0x3bac5
  0064a: mov    rdi,r12
  0064d: mov    esi,DWORD PTR [rbp-0x18]
  00650: mov    rdx,QWORD PTR [rbp-0x28]
  00654: movabs rax,0x55788c79da60
  0065e: call   rax
  00660: mov    rdi,0x4
  00667: jmp    0x3bac5
:00042 _%7 = %6 < %7                        [<INVALID>][<INVALID>]
:00043 condnotbr _%7 =>:00105
  0066c: movq   xmm0,xmm6
  00670: call   0xffff886f
  00675: mov    QWORD PTR [rbp-0x58],rax
  00679: movq   xmm0,xmm3
  0067d: call   0xffff886f
  00682: mov    QWORD PTR [rbp-0x60],rax
  00686: mov    rdi,QWORD PTR [rbp-0x58]
  0068a: mov    rsi,QWORD PTR [rbp-0x60]
  0068e: test   rdi,0x1
  00695: je     0x3bafb
  0069b: test   rsi,0x1
  006a2: je     0x3bafb
  006a8: cmp    rdi,rsi
  006ab: jge    0x3be90
:00044 %7 = literal[true]
  006b1: mov    rax,0x1c
  006b8: mov    QWORD PTR [rbp-0x60],rax
:00045 _ = %2.call hit=(%7; 1)              [<INVALID>]
:00046 
  006bc: mov    rdi,0x4
  006c3: sub    DWORD PTR [rip+0x5aa],0x1        # 0xc74
  006ca: jne    0x3bb50
  006d0: mov    rdi,r12
  006d3: mov    esi,DWORD PTR [rbp-0x18]
  006d6: mov    rdx,QWORD PTR [rbp-0x28]
  006da: movabs rax,0x55788c79da60
  006e4: call   rax
  006e6: mov    rdi,0x4
  006ed: jmp    0x3bb50
:00048 _ = %2.call t=(%6; 1)                [<INVALID>]
:00049 
  006f2: mov    rdi,0x4
  006f9: sub    DWORD PTR [rip+0x578],0x1        # 0xc78
  00700: jne    0x3bb6c
  00706: mov    rdi,r12
  00709: mov    esi,DWORD PTR [rbp-0x18]
  0070c: mov    rdx,QWORD PTR [rbp-0x28]
  00710: movabs rax,0x55788c79da60
  0071a: call   rax
  0071c: mov    rdi,0x4
  00723: jmp    0x3bb6c
:00051 %7 = @n: <INVALID>[IvarId(0)]
  00728: mov    rdi,QWORD PTR [rbp-0x28]
  0072c: sub    rsp,0x20
  00730: movq   QWORD PTR [rsp],xmm2
  00735: movq   QWORD PTR [rsp+0x8],xmm4
  0073b: movq   QWORD PTR [rsp+0x10],xmm5
  00741: movq   QWORD PTR [rsp+0x18],xmm6
  00747: mov    rsi,0x82
  0074e: mov    rdx,r12
  00751: movabs rax,0x55788c798100
  0075b: call   rax
  0075d: movq   xmm2,QWORD PTR [rsp]
  00762: movq   xmm4,QWORD PTR [rsp+0x8]
  00768: movq   xmm5,QWORD PTR [rsp+0x10]
  0076e: movq   xmm6,QWORD PTR [rsp+0x18]
  00774: add    rsp,0x20
  00778: mov    QWORD PTR [rbp-0x60],rax
:00052 _ = %2.call n=(%7; 1)                [<INVALID>]
:00053 
  0077c: mov    rdi,0x4
  00783: sub    DWORD PTR [rip+0x4f2],0x1        # 0xc7c
  0078a: jne    0x3bb88
  00790: mov    rdi,r12
  00793: mov    esi,DWORD PTR [rbp-0x18]
  00796: mov    rdx,QWORD PTR [rbp-0x28]
  0079a: movabs rax,0x55788c79da60
  007a4: call   rax
  007a6: mov    rdi,0x4
  007ad: jmp    0x3bb88
:00055 %8 = const[Vec]                      [<INVALID>]
  007b2: mov    rax,QWORD PTR [rip+0xffffffffffffa96f]        # 0xffffb128
  007b9: cmp    rax,QWORD PTR [rip+0x4d8]        # 0xc98
  007c0: jne    0x3bba4
  007c6: mov    rax,QWORD PTR [rip+0x4bb]        # 0xc88
  007cd: mov    QWORD PTR [rbp-0x68],rax
:00056 %10 = %1.call org()                  [<INVALID>]
:00057 
  007d1: mov    rdi,0x4
  007d8: sub    DWORD PTR [rip+0x4c1],0x1        # 0xca0
  007df: jne    0x3bc20
  007e5: mov    rdi,r12
  007e8: mov    esi,DWORD PTR [rbp-0x18]
  007eb: mov    rdx,QWORD PTR [rbp-0x28]
  007ef: movabs rax,0x55788c79da60
  007f9: call   rax
  007fb: mov    rdi,0x4
  00802: jmp    0x3bc20
:00059 %9 = %10.call x()                    [<INVALID>]
:00060 
  00807: mov    rdi,0x4
  0080e: sub    DWORD PTR [rip+0x48f],0x1        # 0xca4
  00815: jne    0x3bc3c
  0081b: mov    rdi,r12
  0081e: mov    esi,DWORD PTR [rbp-0x18]
  00821: mov    rdx,QWORD PTR [rbp-0x28]
  00825: movabs rax,0x55788c79da60
  0082f: call   rax
  00831: mov    rdi,0x4
  00838: jmp    0x3bc3c
:00062 %11 = %1.call dir()                  [<INVALID>]
:00063 
  0083d: mov    rdi,0x4
  00844: sub    DWORD PTR [rip+0x45d],0x1        # 0xca8
  0084b: jne    0x3bc58
  00851: mov    rdi,r12
  00854: mov    esi,DWORD PTR [rbp-0x18]
  00857: mov    rdx,QWORD PTR [rbp-0x28]
  0085b: movabs rax,0x55788c79da60
  00865: call   rax
  00867: mov    rdi,0x4
  0086e: jmp    0x3bc58
:00065 %10 = %11.call x()                   [<INVALID>]
:00066 
  00873: mov    rdi,0x4
  0087a: sub    DWORD PTR [rip+0x42b],0x1        # 0xcac
  00881: jne    0x3bc74
  00887: mov    rdi,r12
  0088a: mov    esi,DWORD PTR [rbp-0x18]
  0088d: mov    rdx,QWORD PTR [rbp-0x28]
  00891: movabs rax,0x55788c79da60
  0089b: call   rax
  0089d: mov    rdi,0x4
  008a4: jmp    0x3bc74
:00068 %10 = %6 * %10                       [<INVALID>][<INVALID>]
  008a9: mov    rdi,0x4
  008b0: sub    DWORD PTR [rip+0x3f9],0x1        # 0xcb0
  008b7: jne    0x3bc90
  008bd: mov    rdi,r12
  008c0: mov    esi,DWORD PTR [rbp-0x18]
  008c3: mov    rdx,QWORD PTR [rbp-0x28]
  008c7: movabs rax,0x55788c79da60
  008d1: call   rax
  008d3: mov    rdi,0x4
  008da: jmp    0x3bc90
:00069 %9 = %9 + %10                        [<INVALID>][<INVALID>]
  008df: mov    rdi,0x4
  008e6: sub    DWORD PTR [rip+0x3c7],0x1        # 0xcb4
  008ed: jne    0x3bcac
  008f3: mov    rdi,r12
  008f6: mov    esi,DWORD PTR [rbp-0x18]
  008f9: mov    rdx,QWORD PTR [rbp-0x28]
  008fd: movabs rax,0x55788c79da60
  00907: call   rax
  00909: mov    rdi,0x4
  00910: jmp    0x3bcac
:00070 %11 = %1.call org()                  [<INVALID>]
:00071 
  00915: mov    rdi,0x4
  0091c: sub    DWORD PTR [rip+0x395],0x1        # 0xcb8
  00923: jne    0x3bcc8
  00929: mov    rdi,r12
  0092c: mov    esi,DWORD PTR [rbp-0x18]
  0092f: mov    rdx,QWORD PTR [rbp-0x28]
  00933: movabs rax,0x55788c79da60
  0093d: call   rax
  0093f: mov    rdi,0x4
  00946: jmp    0x3bcc8
:00073 %10 = %11.call y()                   [<INVALID>]
:00074 
  0094b: mov    rdi,0x4
  00952: sub    DWORD PTR [rip+0x363],0x1        # 0xcbc
  00959: jne    0x3bce4
  0095f: mov    rdi,r12
  00962: mov    esi,DWORD PTR [rbp-0x18]
  00965: mov    rdx,QWORD PTR [rbp-0x28]
  00969: movabs rax,0x55788c79da60
  00973: call   rax
  00975: mov    rdi,0x4
  0097c: jmp    0x3bce4
:00076 %12 = %1.call dir()                  [<INVALID>]
:00077 
  00981: mov    rdi,0x4
  00988: sub    DWORD PTR [rip+0x331],0x1        # 0xcc0
  0098f: jne    0x3bd00
  00995: mov    rdi,r12
  00998: mov    esi,DWORD PTR [rbp-0x18]
  0099b: mov    rdx,QWORD PTR [rbp-0x28]
  0099f: movabs rax,0x55788c79da60
  009a9: call   rax
  009ab: mov    rdi,0x4
  009b2: jmp    0x3bd00
:00079 %11 = %12.call y()                   [<INVALID>]
:00080 
  009b7: mov    rdi,0x4
  009be: sub    DWORD PTR [rip+0x2ff],0x1        # 0xcc4
  009c5: jne    0x3bd1c
  009cb: mov    rdi,r12
  009ce: mov    esi,DWORD PTR [rbp-0x18]
  009d1: mov    rdx,QWORD PTR [rbp-0x28]
  009d5: movabs rax,0x55788c79da60
  009df: call   rax
  009e1: mov    rdi,0x4
  009e8: jmp    0x3bd1c
:00082 %11 = %6 * %11                       [<INVALID>][<INVALID>]
  009ed: mov    rdi,0x4
  009f4: sub    DWORD PTR [rip+0x2cd],0x1        # 0xcc8
  009fb: jne    0x3bd38
  00a01: mov    rdi,r12
  00a04: mov    esi,DWORD PTR [rbp-0x18]
  00a07: mov    rdx,QWORD PTR [rbp-0x28]
  00a0b: movabs rax,0x55788c79da60
  00a15: call   rax
  00a17: mov    rdi,0x4
  00a1e: jmp    0x3bd38
:00083 %10 = %10 + %11                      [<INVALID>][<INVALID>]
  00a23: mov    rdi,0x4
  00a2a: sub    DWORD PTR [rip+0x29b],0x1        # 0xccc
  00a31: jne    0x3bd54
  00a37: mov    rdi,r12
  00a3a: mov    esi,DWORD PTR [rbp-0x18]
  00a3d: mov    rdx,QWORD PTR [rbp-0x28]
  00a41: movabs rax,0x55788c79da60
  00a4b: call   rax
  00a4d: mov    rdi,0x4
  00a54: jmp    0x3bd54
:00084 %12 = %1.call org()                  [<INVALID>]
:00085 
  00a59: mov    rdi,0x4
  00a60: sub    DWORD PTR [rip+0x269],0x1        # 0xcd0
  00a67: jne    0x3bd70
  00a6d: mov    rdi,r12
  00a70: mov    esi,DWORD PTR [rbp-0x18]
  00a73: mov    rdx,QWORD PTR [rbp-0x28]
  00a77: movabs rax,0x55788c79da60
  00a81: call   rax
  00a83: mov    rdi,0x4
  00a8a: jmp    0x3bd70
:00087 %11 = %12.call z()                   [<INVALID>]
:00088 
  00a8f: mov    rdi,0x4
  00a96: sub    DWORD PTR [rip+0x237],0x1        # 0xcd4
  00a9d: jne    0x3bd8c
  00aa3: mov    rdi,r12
  00aa6: mov    esi,DWORD PTR [rbp-0x18]
  00aa9: mov    rdx,QWORD PTR [rbp-0x28]
  00aad: movabs rax,0x55788c79da60
  00ab7: call   rax
  00ab9: mov    rdi,0x4
  00ac0: jmp    0x3bd8c
:00090 %13 = %1.call dir()                  [<INVALID>]
:00091 
  00ac5: mov    rdi,0x4
  00acc: sub    DWORD PTR [rip+0x205],0x1        # 0xcd8
  00ad3: jne    0x3bda8
  00ad9: mov    rdi,r12
  00adc: mov    esi,DWORD PTR [rbp-0x18]
  00adf: mov    rdx,QWORD PTR [rbp-0x28]
  00ae3: movabs rax,0x55788c79da60
  00aed: call   rax
  00aef: mov    rdi,0x4
  00af6: jmp    0x3bda8
:00093 %12 = %13.call z()                   [<INVALID>]
:00094 
  00afb: mov    rdi,0x4
  00b02: sub    DWORD PTR [rip+0x1d3],0x1        # 0xcdc
  00b09: jne    0x3bdc4
  00b0f: mov    rdi,r12
  00b12: mov    esi,DWORD PTR [rbp-0x18]
  00b15: mov    rdx,QWORD PTR [rbp-0x28]
  00b19: movabs rax,0x55788c79da60
  00b23: call   rax
  00b25: mov    rdi,0x4
  00b2c: jmp    0x3bdc4
:00096 %12 = %6 * %12                       [<INVALID>][<INVALID>]
  00b31: mov    rdi,0x4
  00b38: sub    DWORD PTR [rip+0x1a1],0x1        # 0xce0
  00b3f: jne    0x3bde0
  00b45: mov    rdi,r12
  00b48: mov    esi,DWORD PTR [rbp-0x18]
  00b4b: mov    rdx,QWORD PTR [rbp-0x28]
  00b4f: movabs rax,0x55788c79da60
  00b59: call   rax
  00b5b: mov    rdi,0x4
  00b62: jmp    0x3bde0
:00097 %11 = %11 + %12                      [<INVALID>][<INVALID>]
  00b67: mov    rdi,0x4
  00b6e: sub    DWORD PTR [rip+0x16f],0x1        # 0xce4
  00b75: jne    0x3bdfc
  00b7b: mov    rdi,r12
  00b7e: mov    esi,DWORD PTR [rbp-0x18]
  00b81: mov    rdx,QWORD PTR [rbp-0x28]
  00b85: movabs rax,0x55788c79da60
  00b8f: call   rax
  00b91: mov    rdi,0x4
  00b98: jmp    0x3bdfc
:00098 %7 = %8.call new(%9; 3)              [<INVALID>]
:00099 
  00b9d: mov    rdi,0x4
  00ba4: sub    DWORD PTR [rip+0x13d],0x1        # 0xce8
  00bab: jne    0x3be18
  00bb1: mov    rdi,r12
  00bb4: mov    esi,DWORD PTR [rbp-0x18]
  00bb7: mov    rdx,QWORD PTR [rbp-0x28]
  00bbb: movabs rax,0x55788c79da60
  00bc5: call   rax
  00bc7: mov    rdi,0x4
  00bce: jmp    0x3be18
:00101 _ = %2.call pl=(%7; 1)               [<INVALID>]
:00102 
  00bd3: mov    rdi,0x4
  00bda: sub    DWORD PTR [rip+0x10b],0x1        # 0xcec
  00be1: jne    0x3be34
  00be7: mov    rdi,r12
  00bea: mov    esi,DWORD PTR [rbp-0x18]
  00bed: mov    rdx,QWORD PTR [rbp-0x28]
  00bf1: movabs rax,0x55788c79da60
  00bfb: call   rax
  00bfd: mov    rdi,0x4
  00c04: jmp    0x3be34
:00104 br =>:00105
  00c09: jmp    0x3beb6
:00105 %7 = nil
  00c0e: mov    QWORD PTR [rbp-0x60],0x4
:00106 ret %7
  00c16: mov    rax,QWORD PTR [rbp-0x60]
  00c1a: leave  
  00c1b: ret    
==> start whole compile: clamp FuncId(52) self_class:Scene start:[00000] bytecode:0x55788df333d0
<== finished compile. elapsed:30.5µs
offset:Pos(34280) code: 430 bytes  data: 82 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x38],0x4
  00010: mov    QWORD PTR [rbp-0x40],0x4
  00018: mov    rdi,QWORD PTR [rbp-0x28]
  0001c: test   rdi,0x7
  00023: jne    0x3b1ec
  00029: cmp    DWORD PTR [rdi+0x4],0x2f
  0002d: jne    0x3b1ec
:00000 %3 = literal[255.5]
  00033: movq   xmm2,QWORD PTR [rip+0x17d]        # 0x1b8
:00001 %2 = %1 * %3                         [Float][Float]
  0003b: mov    rdi,QWORD PTR [rbp-0x30]
  0003f: test   rdi,0x1
  00046: jne    0x3b1fb
  0004c: test   rdi,0x2
  00053: je     0x8f
  00059: xorps  xmm3,xmm3
  0005c: movabs rax,0x8000000000000002
  00066: cmp    rdi,rax
  00069: je     0xa1
  0006f: mov    rax,rdi
  00072: sar    rax,0x3f
  00076: add    rax,0x2
  0007a: and    rdi,0xfffffffffffffffc
  0007e: or     rdi,rax
  00081: rol    rdi,0x3d
  00085: movq   xmm3,rdi
  0008a: jmp    0xa1
  0008f: call   0xffff7a8c
  00094: test   rax,rax
  00097: je     0x3b1fb
  0009d: movq   xmm3,xmm0
  000a1: movq   xmm4,xmm3
  000a5: mulsd  xmm4,xmm2
:00002 %3 = literal[255.0]
  000a9: movq   xmm2,QWORD PTR [rip+0x117]        # 0x1c8
:00003 _%3 = %2 > %3                        [Float][Float]
:00004 condnotbr _%3 =>:00007
  000b1: ucomisd xmm4,xmm2
  000b5: jbe    0x3b217
:00005 %2 = literal[255.0]
  000bb: movq   xmm4,QWORD PTR [rip+0x115]        # 0x1d8
:00006 br =>:00007
  000c3: jmp    0x3b24a
:00007 %3 = literal[0.0]
  000c8: movq   xmm2,QWORD PTR [rip+0x118]        # 0x1e8
:00008 _%3 = %2 < %3                        [Float][Float]
:00009 condnotbr _%3 =>:00012
  000d0: ucomisd xmm4,xmm2
  000d4: jae    0x3b27d
:00010 %2 = literal[0.0]
  000da: movq   xmm4,QWORD PTR [rip+0x116]        # 0x1f8
:00011 br =>:00012
  000e2: jmp    0x3b2b0
:00012 %3 = %2.call to_i()                  [Float]
:00013 
  000e7: movq   xmm0,xmm4
  000eb: call   0xffff7b7f
  000f0: mov    QWORD PTR [rbp-0x38],rax
  000f4: mov    rdi,QWORD PTR [rbp-0x38]
  000f8: test   rdi,0x1
  000ff: jne    0x3b2e3
  00105: test   rdi,0x2
  0010c: jne    0x129
  00112: test   rdi,0x7
  00119: jne    0x3b2e3
  0011f: cmp    DWORD PTR [rdi+0x4],0x7
  00123: jne    0x3b2e3
  00129: cmp    DWORD PTR [rip+0xffffffffffffa2fc],0x26        # 0xffffa42c
  00130: jne    0x3b2e3
  00136: mov    r9,0x0
  0013d: sub    rsp,0x10
  00141: movq   QWORD PTR [rsp],xmm3
  00146: movq   QWORD PTR [rsp+0x8],xmm4
  0014c: mov    rdx,rdi
  0014f: mov    rax,QWORD PTR [rbx]
  00152: lea    rdi,[rsp-0x18]
  00157: mov    QWORD PTR [rdi],rax
  0015a: mov    QWORD PTR [rbx],rdi
  0015d: mov    QWORD PTR [rsp-0x20],0x0
  00166: mov    QWORD PTR [rsp-0x38],rcx
  0016b: lea    rcx,[rbp-0x48]
  0016f: mov    r8,0x0
  00176: call   0x3b2f2
  0017b: lea    rdi,[rbp-0x8]
  0017f: mov    QWORD PTR [rbx],rdi
  00182: movq   xmm3,QWORD PTR [rsp]
  00187: movq   xmm4,QWORD PTR [rsp+0x8]
  0018d: add    rsp,0x10
  00191: movabs r13,0x55788df334b0
  0019b: test   rax,rax
  0019e: je     0xffff7a53
  001a4: mov    QWORD PTR [rbp-0x40],rax
:00015 ret %3
  001a8: mov    rax,QWORD PTR [rbp-0x40]
  001ac: leave  
  001ad: ret    
==> start whole compile: <unnamed> FuncId(75) self_class:Scene start:[00000] bytecode:0x55788df220a0
<== finished compile. elapsed:14.4µs
offset:Pos(34792) code: 223 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x3b124
  0002c: cmp    DWORD PTR [rdi+0x4],0x2f
  00030: jne    0x3b124
:00000 %3 = dynvar(3, %3)
  00036: mov    rax,QWORD PTR [rbp-0x10]
  0003a: mov    rax,QWORD PTR [rax]
  0003d: mov    rax,QWORD PTR [rax]
  00040: mov    rax,QWORD PTR [rax-0x30]
  00044: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = literal[76]
  00048: mov    rax,0x99
  0004f: mov    QWORD PTR [rbp-0x48],rax
:00002 %2 = %3.call times(&%4)              [Integer]
:00003 
  00053: mov    rdi,QWORD PTR [rbp-0x40]
  00057: test   rdi,0x1
  0005e: jne    0x7b
  00064: test   rdi,0x7
  0006b: jne    0x3b133
  00071: cmp    DWORD PTR [rdi+0x4],0x6
  00075: jne    0x3b133
  0007b: cmp    DWORD PTR [rip+0xffffffffffffa1aa],0x26        # 0xffffa22c
  00082: jne    0x3b133
  00088: mov    r9,QWORD PTR [rbp-0x48]
  0008c: mov    rdx,rdi
  0008f: mov    rax,QWORD PTR [rbx]
  00092: lea    rdi,[rsp-0x18]
  00097: mov    QWORD PTR [rdi],rax
  0009a: mov    QWORD PTR [rbx],rdi
  0009d: mov    QWORD PTR [rsp-0x20],0x0
  000a6: mov    QWORD PTR [rsp-0x38],rcx
  000ab: lea    rcx,[rbp-0x50]
  000af: mov    r8,0x0
  000b6: call   0x3b142
  000bb: lea    rdi,[rbp-0x8]
  000bf: mov    QWORD PTR [rbx],rdi
  000c2: movabs r13,0x55788df220e0
  000cc: test   rax,rax
  000cf: je     0xffff7853
  000d5: mov    QWORD PTR [rbp-0x38],rax
:00005 ret %2
  000d9: mov    rax,QWORD PTR [rbp-0x38]
  000dd: leave  
  000de: ret    
==> start whole compile: <unnamed> FuncId(74) self_class:Scene start:[00000] bytecode:0x55788dee55e0
<== finished compile. elapsed:93.9µs
offset:Pos(35015) code: 3713 bytes  data: 104 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x80
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x38],rax
  00016: mov    QWORD PTR [rbp-0x40],rax
  0001a: mov    QWORD PTR [rbp-0x48],rax
  0001e: mov    QWORD PTR [rbp-0x50],rax
  00022: mov    QWORD PTR [rbp-0x58],rax
  00026: mov    QWORD PTR [rbp-0x60],rax
  0002a: mov    QWORD PTR [rbp-0x68],rax
  0002e: mov    QWORD PTR [rbp-0x70],rax
  00032: mov    rdi,QWORD PTR [rbp-0x28]
  00036: test   rdi,0x7
  0003d: jne    0x3b095
  00043: cmp    DWORD PTR [rdi+0x4],0x2f
  00047: jne    0x3b095
:00000 %6 = const[Vec]                      [Vec]
  0004d: mov    rax,QWORD PTR [rip+0xffffffffffffa105]        # 0xffffa159
  00054: cmp    rax,QWORD PTR [rip+0xe3e]        # 0xe99
  0005b: jne    0x3b0a4
  00061: mov    rax,QWORD PTR [rip+0xe21]        # 0xe89
  00068: mov    QWORD PTR [rbp-0x58],rax
:00001 %7 = literal[0.0]
  0006c: movq   xmm2,QWORD PTR [rip+0xe35]        # 0xea9
:00002 %8 = literal[0.0]
  00074: movq   xmm3,QWORD PTR [rip+0xe3d]        # 0xeb9
:00003 %9 = literal[0.0]
  0007c: movq   xmm4,QWORD PTR [rip+0xe45]        # 0xec9
:00004 %2 = %6.call new(%7; 3)              [#<Class:Vec>]
:00005 
  00084: movq   xmm0,xmm2
  00088: call   0xffff78a0
  0008d: mov    QWORD PTR [rbp-0x60],rax
  00091: movq   xmm0,xmm3
  00095: call   0xffff78a0
  0009a: mov    QWORD PTR [rbp-0x68],rax
  0009e: movq   xmm0,xmm4
  000a2: call   0xffff78a0
  000a7: mov    QWORD PTR [rbp-0x70],rax
  000ab: mov    rdi,QWORD PTR [rbp-0x58]
  000af: test   rdi,0x7
  000b6: jne    0x3b0ea
  000bc: cmp    DWORD PTR [rdi+0x4],0x26
  000c0: jne    0x3b0ea
  000c6: cmp    DWORD PTR [rip+0xffffffffffffa080],0x26        # 0xffffa14d
  000cd: jne    0x3b0ea
  000d3: mov    r9,0x0
  000da: sub    rsp,0x20
  000de: movq   QWORD PTR [rsp],xmm2
  000e3: movq   QWORD PTR [rsp+0x8],xmm3
  000e9: movq   QWORD PTR [rsp+0x10],xmm4
  000ef: mov    rdx,rdi
  000f2: mov    rax,QWORD PTR [rbx]
  000f5: lea    rdi,[rsp-0x18]
  000fa: mov    QWORD PTR [rdi],rax
  000fd: mov    QWORD PTR [rbx],rdi
  00100: mov    QWORD PTR [rsp-0x20],0x0
  00109: mov    QWORD PTR [rsp-0x38],rcx
  0010e: lea    rcx,[rbp-0x60]
  00112: mov    r8,0x3
  00119: call   0x3b0f9
  0011e: lea    rdi,[rbp-0x8]
  00122: mov    QWORD PTR [rbx],rdi
  00125: movq   xmm2,QWORD PTR [rsp]
  0012a: movq   xmm3,QWORD PTR [rsp+0x8]
  00130: movq   xmm4,QWORD PTR [rsp+0x10]
  00136: add    rsp,0x20
  0013a: movabs r13,0x55788dee5640
  00144: test   rax,rax
  00147: je     0xffff7774
  0014d: mov    QWORD PTR [rbp-0x38],rax
:00007 %6 = dynvar(2, %3)
  00151: mov    rax,QWORD PTR [rbp-0x10]
  00155: mov    rax,QWORD PTR [rax]
  00158: mov    rax,QWORD PTR [rax-0x30]
  0015c: mov    QWORD PTR [rbp-0x58],rax
:00008 %7 = literal[75]
  00160: mov    rax,0x97
  00167: mov    QWORD PTR [rbp-0x60],rax
:00009 _ = %6.call times(&%7)               [Integer]
:00010 
  0016b: mov    rdi,QWORD PTR [rbp-0x58]
  0016f: test   rdi,0x1
  00176: jne    0x193
  0017c: test   rdi,0x7
  00183: jne    0x3b12b
  00189: cmp    DWORD PTR [rdi+0x4],0x6
  0018d: jne    0x3b12b
  00193: cmp    DWORD PTR [rip+0xffffffffffff9fb3],0x26        # 0xffffa14d
  0019a: jne    0x3b12b
  001a0: mov    r9,QWORD PTR [rbp-0x60]
  001a4: sub    rsp,0x10
  001a8: movq   QWORD PTR [rsp],xmm3
  001ad: movq   QWORD PTR [rsp+0x8],xmm4
  001b3: mov    rdx,rdi
  001b6: mov    rax,QWORD PTR [rbx]
  001b9: lea    rdi,[rsp-0x18]
  001be: mov    QWORD PTR [rdi],rax
  001c1: mov    QWORD PTR [rbx],rdi
  001c4: mov    QWORD PTR [rsp-0x20],0x0
  001cd: mov    QWORD PTR [rsp-0x38],rcx
  001d2: lea    rcx,[rbp-0x68]
  001d6: mov    r8,0x0
  001dd: call   0x3b13a
  001e2: lea    rdi,[rbp-0x8]
  001e6: mov    QWORD PTR [rbx],rdi
  001e9: movq   xmm3,QWORD PTR [rsp]
  001ee: movq   xmm4,QWORD PTR [rsp+0x8]
  001f4: add    rsp,0x10
  001f8: movabs r13,0x55788dee5690
  00202: test   rax,rax
  00205: je     0xffff7774
:00012 %6 = %2.call x()                     [Vec]
:00013 
  0020b: mov    rdi,QWORD PTR [rbp-0x38]
  0020f: test   rdi,0x7
  00216: jne    0x3b16c
  0021c: cmp    DWORD PTR [rdi+0x4],0x25
  00220: jne    0x3b16c
  00226: cmp    DWORD PTR [rip+0xffffffffffff9f20],0x26        # 0xffffa14d
  0022d: jne    0x3b16c
  00233: mov    esi,DWORD PTR [rip+0xc9c]        # 0xed5
  00239: cmp    esi,0xffffffff
  0023c: je     0x3b17b
  00242: cmp    WORD PTR [rdi+0x2],0x3
  00247: jne    0x260
  0024d: cmp    esi,0x6
  00250: jge    0x260
  00256: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0025b: jmp    0x28a
  00260: sub    rsp,0x10
  00264: movq   QWORD PTR [rsp],xmm3
  00269: movq   QWORD PTR [rsp+0x8],xmm4
  0026f: movabs rax,0x55788c73bb50
  00279: call   rax
  0027b: movq   xmm3,QWORD PTR [rsp]
  00280: movq   xmm4,QWORD PTR [rsp+0x8]
  00286: add    rsp,0x10
  0028a: mov    QWORD PTR [rbp-0x58],rax
:00015 %7 = dynvar(2, %5)
  0028e: mov    rax,QWORD PTR [rbp-0x10]
  00292: mov    rax,QWORD PTR [rax]
  00295: mov    rax,QWORD PTR [rax-0x40]
  00299: mov    QWORD PTR [rbp-0x60],rax
:00016 %8 = dynvar(2, %5)
  0029d: mov    rax,QWORD PTR [rbp-0x10]
  002a1: mov    rax,QWORD PTR [rax]
  002a4: mov    rax,QWORD PTR [rax-0x40]
  002a8: mov    QWORD PTR [rbp-0x68],rax
:00017 %7 = %7 * %8                         [Float][Float]
  002ac: mov    rdi,QWORD PTR [rbp-0x60]
  002b0: test   rdi,0x1
  002b7: jne    0x3b1c2
  002bd: test   rdi,0x2
  002c4: je     0x300
  002ca: xorps  xmm2,xmm2
  002cd: movabs rax,0x8000000000000002
  002d7: cmp    rdi,rax
  002da: je     0x312
  002e0: mov    rax,rdi
  002e3: sar    rax,0x3f
  002e7: add    rax,0x2
  002eb: and    rdi,0xfffffffffffffffc
  002ef: or     rdi,rax
  002f2: rol    rdi,0x3d
  002f6: movq   xmm2,rdi
  002fb: jmp    0x312
  00300: call   0xffff77ad
  00305: test   rax,rax
  00308: je     0x3b1c2
  0030e: movq   xmm2,xmm0
  00312: mov    rdi,QWORD PTR [rbp-0x68]
  00316: test   rdi,0x1
  0031d: jne    0x3b1d1
  00323: test   rdi,0x2
  0032a: je     0x366
  00330: xorps  xmm3,xmm3
  00333: movabs rax,0x8000000000000002
  0033d: cmp    rdi,rax
  00340: je     0x378
  00346: mov    rax,rdi
  00349: sar    rax,0x3f
  0034d: add    rax,0x2
  00351: and    rdi,0xfffffffffffffffc
  00355: or     rdi,rax
  00358: rol    rdi,0x3d
  0035c: movq   xmm3,rdi
  00361: jmp    0x378
  00366: call   0xffff77ad
  0036b: test   rax,rax
  0036e: je     0x3b1d1
  00374: movq   xmm3,xmm0
  00378: mulsd  xmm2,xmm3
:00018 %3 = %6 / %7                         [Float][Float]
  0037c: mov    rdi,QWORD PTR [rbp-0x58]
  00380: test   rdi,0x1
  00387: jne    0x3b1e0
  0038d: test   rdi,0x2
  00394: je     0x3d0
  0039a: xorps  xmm5,xmm5
  0039d: movabs rax,0x8000000000000002
  003a7: cmp    rdi,rax
  003aa: je     0x3e2
  003b0: mov    rax,rdi
  003b3: sar    rax,0x3f
  003b7: add    rax,0x2
  003bb: and    rdi,0xfffffffffffffffc
  003bf: or     rdi,rax
  003c2: rol    rdi,0x3d
  003c6: movq   xmm5,rdi
  003cb: jmp    0x3e2
  003d0: call   0xffff77ad
  003d5: test   rax,rax
  003d8: je     0x3b1e0
  003de: movq   xmm5,xmm0
  003e2: movq   xmm6,xmm5
  003e6: movq   rax,xmm2
  003eb: test   rax,rax
  003ee: je     0xffff7799
  003f4: divsd  xmm6,xmm2
:00019 %6 = %2.call y()                     [Vec]
:00020 
  003f8: mov    rdi,QWORD PTR [rbp-0x38]
  003fc: test   rdi,0x7
  00403: jne    0x3b1fc
  00409: cmp    DWORD PTR [rdi+0x4],0x25
  0040d: jne    0x3b1fc
  00413: cmp    DWORD PTR [rip+0xffffffffffff9d33],0x26        # 0xffffa14d
  0041a: jne    0x3b1fc
  00420: mov    esi,DWORD PTR [rip+0xab7]        # 0xedd
  00426: cmp    esi,0xffffffff
  00429: je     0x3b225
  0042f: cmp    WORD PTR [rdi+0x2],0x3
  00434: jne    0x44d
  0043a: cmp    esi,0x6
  0043d: jge    0x44d
  00443: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00448: jmp    0x48f
  0044d: sub    rsp,0x20
  00451: movq   QWORD PTR [rsp],xmm2
  00456: movq   QWORD PTR [rsp+0x8],xmm3
  0045c: movq   QWORD PTR [rsp+0x10],xmm4
  00462: movq   QWORD PTR [rsp+0x18],xmm6
  00468: movabs rax,0x55788c73bb50
  00472: call   rax
  00474: movq   xmm2,QWORD PTR [rsp]
  00479: movq   xmm3,QWORD PTR [rsp+0x8]
  0047f: movq   xmm4,QWORD PTR [rsp+0x10]
  00485: movq   xmm6,QWORD PTR [rsp+0x18]
  0048b: add    rsp,0x20
  0048f: mov    QWORD PTR [rbp-0x58],rax
:00022 %7 = dynvar(2, %5)
  00493: mov    rax,QWORD PTR [rbp-0x10]
  00497: mov    rax,QWORD PTR [rax]
  0049a: mov    rax,QWORD PTR [rax-0x40]
  0049e: mov    QWORD PTR [rbp-0x60],rax
:00023 %8 = dynvar(2, %5)
  004a2: mov    rax,QWORD PTR [rbp-0x10]
  004a6: mov    rax,QWORD PTR [rax]
  004a9: mov    rax,QWORD PTR [rax-0x40]
  004ad: mov    QWORD PTR [rbp-0x68],rax
:00024 %7 = %7 * %8                         [Float][Float]
  004b1: mov    rdi,QWORD PTR [rbp-0x60]
  004b5: test   rdi,0x1
  004bc: jne    0x3b284
  004c2: test   rdi,0x2
  004c9: je     0x505
  004cf: xorps  xmm2,xmm2
  004d2: movabs rax,0x8000000000000002
  004dc: cmp    rdi,rax
  004df: je     0x517
  004e5: mov    rax,rdi
  004e8: sar    rax,0x3f
  004ec: add    rax,0x2
  004f0: and    rdi,0xfffffffffffffffc
  004f4: or     rdi,rax
  004f7: rol    rdi,0x3d
  004fb: movq   xmm2,rdi
  00500: jmp    0x517
  00505: call   0xffff77ad
  0050a: test   rax,rax
  0050d: je     0x3b284
  00513: movq   xmm2,xmm0
  00517: mov    rdi,QWORD PTR [rbp-0x68]
  0051b: test   rdi,0x1
  00522: jne    0x3b2a0
  00528: test   rdi,0x2
  0052f: je     0x56b
  00535: xorps  xmm3,xmm3
  00538: movabs rax,0x8000000000000002
  00542: cmp    rdi,rax
  00545: je     0x57d
  0054b: mov    rax,rdi
  0054e: sar    rax,0x3f
  00552: add    rax,0x2
  00556: and    rdi,0xfffffffffffffffc
  0055a: or     rdi,rax
  0055d: rol    rdi,0x3d
  00561: movq   xmm3,rdi
  00566: jmp    0x57d
  0056b: call   0xffff77ad
  00570: test   rax,rax
  00573: je     0x3b2a0
  00579: movq   xmm3,xmm0
  0057d: mulsd  xmm2,xmm3
:00025 %4 = %6 / %7                         [Float][Float]
  00581: mov    rdi,QWORD PTR [rbp-0x58]
  00585: test   rdi,0x1
  0058c: jne    0x3b2bc
  00592: test   rdi,0x2
  00599: je     0x5d5
  0059f: xorps  xmm5,xmm5
  005a2: movabs rax,0x8000000000000002
  005ac: cmp    rdi,rax
  005af: je     0x5e7
  005b5: mov    rax,rdi
  005b8: sar    rax,0x3f
  005bc: add    rax,0x2
  005c0: and    rdi,0xfffffffffffffffc
  005c4: or     rdi,rax
  005c7: rol    rdi,0x3d
  005cb: movq   xmm5,rdi
  005d0: jmp    0x5e7
  005d5: call   0xffff77ad
  005da: test   rax,rax
  005dd: je     0x3b2bc
  005e3: movq   xmm5,xmm0
  005e7: movq   xmm7,xmm5
  005eb: movq   rax,xmm2
  005f0: test   rax,rax
  005f3: je     0xffff7799
  005f9: divsd  xmm7,xmm2
:00026 %6 = %2.call z()                     [Vec]
:00027 
  005fd: mov    rdi,QWORD PTR [rbp-0x38]
  00601: test   rdi,0x7
  00608: jne    0x3b2e5
  0060e: cmp    DWORD PTR [rdi+0x4],0x25
  00612: jne    0x3b2e5
  00618: cmp    DWORD PTR [rip+0xffffffffffff9b2e],0x26        # 0xffffa14d
  0061f: jne    0x3b2e5
  00625: mov    esi,DWORD PTR [rip+0x8ba]        # 0xee5
  0062b: cmp    esi,0xffffffff
  0062e: je     0x3b31b
  00634: cmp    WORD PTR [rdi+0x2],0x3
  00639: jne    0x652
  0063f: cmp    esi,0x6
  00642: jge    0x652
  00648: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0064d: jmp    0x6a0
  00652: sub    rsp,0x30
  00656: movq   QWORD PTR [rsp],xmm2
  0065b: movq   QWORD PTR [rsp+0x8],xmm3
  00661: movq   QWORD PTR [rsp+0x10],xmm4
  00667: movq   QWORD PTR [rsp+0x18],xmm6
  0066d: movq   QWORD PTR [rsp+0x20],xmm7
  00673: movabs rax,0x55788c73bb50
  0067d: call   rax
  0067f: movq   xmm2,QWORD PTR [rsp]
  00684: movq   xmm3,QWORD PTR [rsp+0x8]
  0068a: movq   xmm4,QWORD PTR [rsp+0x10]
  00690: movq   xmm6,QWORD PTR [rsp+0x18]
  00696: movq   xmm7,QWORD PTR [rsp+0x20]
  0069c: add    rsp,0x30
  006a0: mov    QWORD PTR [rbp-0x58],rax
:00029 %7 = dynvar(2, %5)
  006a4: mov    rax,QWORD PTR [rbp-0x10]
  006a8: mov    rax,QWORD PTR [rax]
  006ab: mov    rax,QWORD PTR [rax-0x40]
  006af: mov    QWORD PTR [rbp-0x60],rax
:00030 %8 = dynvar(2, %5)
  006b3: mov    rax,QWORD PTR [rbp-0x10]
  006b7: mov    rax,QWORD PTR [rax]
  006ba: mov    rax,QWORD PTR [rax-0x40]
  006be: mov    QWORD PTR [rbp-0x68],rax
:00031 %7 = %7 * %8                         [Float][Float]
  006c2: mov    rdi,QWORD PTR [rbp-0x60]
  006c6: test   rdi,0x1
  006cd: jne    0x3b386
  006d3: test   rdi,0x2
  006da: je     0x716
  006e0: xorps  xmm2,xmm2
  006e3: movabs rax,0x8000000000000002
  006ed: cmp    rdi,rax
  006f0: je     0x728
  006f6: mov    rax,rdi
  006f9: sar    rax,0x3f
  006fd: add    rax,0x2
  00701: and    rdi,0xfffffffffffffffc
  00705: or     rdi,rax
  00708: rol    rdi,0x3d
  0070c: movq   xmm2,rdi
  00711: jmp    0x728
  00716: call   0xffff77ad
  0071b: test   rax,rax
  0071e: je     0x3b386
  00724: movq   xmm2,xmm0
  00728: mov    rdi,QWORD PTR [rbp-0x68]
  0072c: test   rdi,0x1
  00733: jne    0x3b3af
  00739: test   rdi,0x2
  00740: je     0x77c
  00746: xorps  xmm3,xmm3
  00749: movabs rax,0x8000000000000002
  00753: cmp    rdi,rax
  00756: je     0x78e
  0075c: mov    rax,rdi
  0075f: sar    rax,0x3f
  00763: add    rax,0x2
  00767: and    rdi,0xfffffffffffffffc
  0076b: or     rdi,rax
  0076e: rol    rdi,0x3d
  00772: movq   xmm3,rdi
  00777: jmp    0x78e
  0077c: call   0xffff77ad
  00781: test   rax,rax
  00784: je     0x3b3af
  0078a: movq   xmm3,xmm0
  0078e: mulsd  xmm2,xmm3
:00032 %5 = %6 / %7                         [Float][Float]
  00792: mov    rdi,QWORD PTR [rbp-0x58]
  00796: test   rdi,0x1
  0079d: jne    0x3b3d8
  007a3: test   rdi,0x2
  007aa: je     0x7e6
  007b0: xorps  xmm5,xmm5
  007b3: movabs rax,0x8000000000000002
  007bd: cmp    rdi,rax
  007c0: je     0x7f8
  007c6: mov    rax,rdi
  007c9: sar    rax,0x3f
  007cd: add    rax,0x2
  007d1: and    rdi,0xfffffffffffffffc
  007d5: or     rdi,rax
  007d8: rol    rdi,0x3d
  007dc: movq   xmm5,rdi
  007e1: jmp    0x7f8
  007e6: call   0xffff77ad
  007eb: test   rax,rax
  007ee: je     0x3b3d8
  007f4: movq   xmm5,xmm0
  007f8: movq   xmm8,xmm5
  007fd: movq   rax,xmm2
  00802: test   rax,rax
  00805: je     0xffff7799
  0080b: divsd  xmm8,xmm2
:00033 %8 = %4
:00034 %7 = %0.call clamp(%8; 1)            [Scene]
:00035 
  00810: movq   xmm0,xmm7
  00814: call   0xffff78a0
  00819: mov    QWORD PTR [rbp-0x68],rax
  0081d: mov    rdi,QWORD PTR [rbp-0x28]
  00821: cmp    DWORD PTR [rip+0xffffffffffff9925],0x26        # 0xffffa14d
  00828: jne    0x3b40e
  0082e: sub    rsp,0x30
  00832: movq   QWORD PTR [rsp],xmm4
  00837: movq   QWORD PTR [rsp+0x8],xmm5
  0083d: movq   QWORD PTR [rsp+0x10],xmm6
  00843: movq   QWORD PTR [rsp+0x18],xmm7
  00849: movq   QWORD PTR [rsp+0x20],xmm8
  00850: mov    rax,QWORD PTR [rbx]
  00853: lea    rdi,[rsp-0x18]
  00858: mov    QWORD PTR [rdi],rax
  0085b: mov    QWORD PTR [rbx],rdi
  0085e: mov    QWORD PTR [rsp-0x20],0x0
  00867: mov    QWORD PTR [rsp-0x38],rcx
  0086c: mov    rax,QWORD PTR [rbp-0x28]
  00870: mov    QWORD PTR [rsp-0x38],rax
  00875: mov    rdi,0x1
  0087c: mov    rax,QWORD PTR [rbp-0x68]
  00880: mov    QWORD PTR [rsp-0x40],rax
  00885: mov    QWORD PTR [rsp-0x30],0x0
  0088e: movabs rax,0x400000034
  00898: mov    QWORD PTR [rsp-0x28],rax
  0089d: movabs r13,0x55788df333d0
  008a7: call   0xffffc699
  008ac: lea    rdi,[rbp-0x8]
  008b0: mov    QWORD PTR [rbx],rdi
  008b3: movq   xmm4,QWORD PTR [rsp]
  008b8: movq   xmm5,QWORD PTR [rsp+0x8]
  008be: movq   xmm6,QWORD PTR [rsp+0x10]
  008c4: movq   xmm7,QWORD PTR [rsp+0x18]
  008ca: movq   xmm8,QWORD PTR [rsp+0x20]
  008d1: add    rsp,0x30
  008d5: movabs r13,0x55788dee5820
  008df: test   rax,rax
  008e2: je     0xffff7774
  008e8: mov    QWORD PTR [rbp-0x60],rax
:00037 %6 = %7.call chr()                   [Integer]
:00038 
  008ec: mov    rdi,QWORD PTR [rbp-0x60]
  008f0: test   rdi,0x1
  008f7: jne    0x914
  008fd: test   rdi,0x7
  00904: jne    0x3b445
  0090a: cmp    DWORD PTR [rdi+0x4],0x6
  0090e: jne    0x3b445
  00914: cmp    DWORD PTR [rip+0xffffffffffff9832],0x26        # 0xffffa14d
  0091b: jne    0x3b445
  00921: mov    r9,0x0
  00928: sub    rsp,0x20
  0092c: movq   QWORD PTR [rsp],xmm4
  00931: movq   QWORD PTR [rsp+0x8],xmm6
  00937: movq   QWORD PTR [rsp+0x10],xmm7
  0093d: movq   QWORD PTR [rsp+0x18],xmm8
  00944: mov    rdx,rdi
  00947: mov    rax,QWORD PTR [rbx]
  0094a: lea    rdi,[rsp-0x18]
  0094f: mov    QWORD PTR [rdi],rax
  00952: mov    QWORD PTR [rbx],rdi
  00955: mov    QWORD PTR [rsp-0x20],0x0
  0095e: mov    QWORD PTR [rsp-0x38],rcx
  00963: lea    rcx,[rbp-0x68]
  00967: mov    r8,0x0
  0096e: call   0x3b47c
  00973: lea    rdi,[rbp-0x8]
  00977: mov    QWORD PTR [rbx],rdi
  0097a: movq   xmm4,QWORD PTR [rsp]
  0097f: movq   xmm6,QWORD PTR [rsp+0x8]
  00985: movq   xmm7,QWORD PTR [rsp+0x10]
  0098b: movq   xmm8,QWORD PTR [rsp+0x18]
  00992: add    rsp,0x20
  00996: movabs r13,0x55788dee5850
  009a0: test   rax,rax
  009a3: je     0xffff7774
  009a9: mov    QWORD PTR [rbp-0x58],rax
:00040 _ = %0.call print(%6; 1)             [Scene]
:00041 
  009ad: mov    rdi,QWORD PTR [rbp-0x28]
  009b1: cmp    DWORD PTR [rip+0xffffffffffff9795],0x26        # 0xffffa14d
  009b8: jne    0x3b4ae
  009be: mov    r9,0x0
  009c5: sub    rsp,0x20
  009c9: movq   QWORD PTR [rsp],xmm4
  009ce: movq   QWORD PTR [rsp+0x8],xmm6
  009d4: movq   QWORD PTR [rsp+0x10],xmm7
  009da: movq   QWORD PTR [rsp+0x18],xmm8
  009e1: mov    rdx,rdi
  009e4: mov    rax,QWORD PTR [rbx]
  009e7: lea    rdi,[rsp-0x18]
  009ec: mov    QWORD PTR [rdi],rax
  009ef: mov    QWORD PTR [rbx],rdi
  009f2: mov    QWORD PTR [rsp-0x20],0x0
  009fb: mov    QWORD PTR [rsp-0x38],rcx
  00a00: lea    rcx,[rbp-0x58]
  00a04: mov    r8,0x1
  00a0b: call   0x3b4e5
  00a10: lea    rdi,[rbp-0x8]
  00a14: mov    QWORD PTR [rbx],rdi
  00a17: movq   xmm4,QWORD PTR [rsp]
  00a1c: movq   xmm6,QWORD PTR [rsp+0x8]
  00a22: movq   xmm7,QWORD PTR [rsp+0x10]
  00a28: movq   xmm8,QWORD PTR [rsp+0x18]
  00a2f: add    rsp,0x20
  00a33: movabs r13,0x55788dee5880
  00a3d: test   rax,rax
  00a40: je     0xffff7774
:00043 %8 = %3
:00044 %7 = %0.call clamp(%8; 1)            [Scene]
:00045 
  00a46: movq   xmm0,xmm6
  00a4a: call   0xffff78a0
  00a4f: mov    QWORD PTR [rbp-0x68],rax
  00a53: mov    rdi,QWORD PTR [rbp-0x28]
  00a57: cmp    DWORD PTR [rip+0xffffffffffff96ef],0x26        # 0xffffa14d
  00a5e: jne    0x3b517
  00a64: sub    rsp,0x20
  00a68: movq   QWORD PTR [rsp],xmm4
  00a6d: movq   QWORD PTR [rsp+0x8],xmm6
  00a73: movq   QWORD PTR [rsp+0x10],xmm7
  00a79: movq   QWORD PTR [rsp+0x18],xmm8
  00a80: mov    rax,QWORD PTR [rbx]
  00a83: lea    rdi,[rsp-0x18]
  00a88: mov    QWORD PTR [rdi],rax
  00a8b: mov    QWORD PTR [rbx],rdi
  00a8e: mov    QWORD PTR [rsp-0x20],0x0
  00a97: mov    QWORD PTR [rsp-0x38],rcx
  00a9c: mov    rax,QWORD PTR [rbp-0x28]
  00aa0: mov    QWORD PTR [rsp-0x38],rax
  00aa5: mov    rdi,0x1
  00aac: mov    rax,QWORD PTR [rbp-0x68]
  00ab0: mov    QWORD PTR [rsp-0x40],rax
  00ab5: mov    QWORD PTR [rsp-0x30],0x0
  00abe: movabs rax,0x400000034
  00ac8: mov    QWORD PTR [rsp-0x28],rax
  00acd: movabs r13,0x55788df333d0
  00ad7: call   0xffffc699
  00adc: lea    rdi,[rbp-0x8]
  00ae0: mov    QWORD PTR [rbx],rdi
  00ae3: movq   xmm4,QWORD PTR [rsp]
  00ae8: movq   xmm6,QWORD PTR [rsp+0x8]
  00aee: movq   xmm7,QWORD PTR [rsp+0x10]
  00af4: movq   xmm8,QWORD PTR [rsp+0x18]
  00afb: add    rsp,0x20
  00aff: movabs r13,0x55788dee58c0
  00b09: test   rax,rax
  00b0c: je     0xffff7774
  00b12: mov    QWORD PTR [rbp-0x60],rax
:00047 %6 = %7.call chr()                   [Integer]
:00048 
  00b16: mov    rdi,QWORD PTR [rbp-0x60]
  00b1a: test   rdi,0x1
  00b21: jne    0xb3e
  00b27: test   rdi,0x7
  00b2e: jne    0x3b54e
  00b34: cmp    DWORD PTR [rdi+0x4],0x6
  00b38: jne    0x3b54e
  00b3e: cmp    DWORD PTR [rip+0xffffffffffff9608],0x26        # 0xffffa14d
  00b45: jne    0x3b54e
  00b4b: mov    r9,0x0
  00b52: sub    rsp,0x20
  00b56: movq   QWORD PTR [rsp],xmm4
  00b5b: movq   QWORD PTR [rsp+0x8],xmm6
  00b61: movq   QWORD PTR [rsp+0x10],xmm7
  00b67: movq   QWORD PTR [rsp+0x18],xmm8
  00b6e: mov    rdx,rdi
  00b71: mov    rax,QWORD PTR [rbx]
  00b74: lea    rdi,[rsp-0x18]
  00b79: mov    QWORD PTR [rdi],rax
  00b7c: mov    QWORD PTR [rbx],rdi
  00b7f: mov    QWORD PTR [rsp-0x20],0x0
  00b88: mov    QWORD PTR [rsp-0x38],rcx
  00b8d: lea    rcx,[rbp-0x68]
  00b91: mov    r8,0x0
  00b98: call   0x3b585
  00b9d: lea    rdi,[rbp-0x8]
  00ba1: mov    QWORD PTR [rbx],rdi
  00ba4: movq   xmm4,QWORD PTR [rsp]
  00ba9: movq   xmm6,QWORD PTR [rsp+0x8]
  00baf: movq   xmm7,QWORD PTR [rsp+0x10]
  00bb5: movq   xmm8,QWORD PTR [rsp+0x18]
  00bbc: add    rsp,0x20
  00bc0: movabs r13,0x55788dee58f0
  00bca: test   rax,rax
  00bcd: je     0xffff7774
  00bd3: mov    QWORD PTR [rbp-0x58],rax
:00050 _ = %0.call print(%6; 1)             [Scene]
:00051 
  00bd7: mov    rdi,QWORD PTR [rbp-0x28]
  00bdb: cmp    DWORD PTR [rip+0xffffffffffff956b],0x26        # 0xffffa14d
  00be2: jne    0x3b5b7
  00be8: mov    r9,0x0
  00bef: sub    rsp,0x20
  00bf3: movq   QWORD PTR [rsp],xmm4
  00bf8: movq   QWORD PTR [rsp+0x8],xmm6
  00bfe: movq   QWORD PTR [rsp+0x10],xmm7
  00c04: movq   QWORD PTR [rsp+0x18],xmm8
  00c0b: mov    rdx,rdi
  00c0e: mov    rax,QWORD PTR [rbx]
  00c11: lea    rdi,[rsp-0x18]
  00c16: mov    QWORD PTR [rdi],rax
  00c19: mov    QWORD PTR [rbx],rdi
  00c1c: mov    QWORD PTR [rsp-0x20],0x0
  00c25: mov    QWORD PTR [rsp-0x38],rcx
  00c2a: lea    rcx,[rbp-0x58]
  00c2e: mov    r8,0x1
  00c35: call   0x3b5ee
  00c3a: lea    rdi,[rbp-0x8]
  00c3e: mov    QWORD PTR [rbx],rdi
  00c41: movq   xmm4,QWORD PTR [rsp]
  00c46: movq   xmm6,QWORD PTR [rsp+0x8]
  00c4c: movq   xmm7,QWORD PTR [rsp+0x10]
  00c52: movq   xmm8,QWORD PTR [rsp+0x18]
  00c59: add    rsp,0x20
  00c5d: movabs r13,0x55788dee5920
  00c67: test   rax,rax
  00c6a: je     0xffff7774
:00053 %9 = %5
:00054 %8 = %0.call clamp(%9; 1)            [Scene]
:00055 
  00c70: movq   xmm0,xmm8
  00c75: call   0xffff78a0
  00c7a: mov    QWORD PTR [rbp-0x70],rax
  00c7e: mov    rdi,QWORD PTR [rbp-0x28]
  00c82: cmp    DWORD PTR [rip+0xffffffffffff94c4],0x26        # 0xffffa14d
  00c89: jne    0x3b620
  00c8f: sub    rsp,0x20
  00c93: movq   QWORD PTR [rsp],xmm6
  00c98: movq   QWORD PTR [rsp+0x8],xmm7
  00c9e: movq   QWORD PTR [rsp+0x10],xmm8
  00ca5: mov    rax,QWORD PTR [rbx]
  00ca8: lea    rdi,[rsp-0x18]
  00cad: mov    QWORD PTR [rdi],rax
  00cb0: mov    QWORD PTR [rbx],rdi
  00cb3: mov    QWORD PTR [rsp-0x20],0x0
  00cbc: mov    QWORD PTR [rsp-0x38],rcx
  00cc1: mov    rax,QWORD PTR [rbp-0x28]
  00cc5: mov    QWORD PTR [rsp-0x38],rax
  00cca: mov    rdi,0x1
  00cd1: mov    rax,QWORD PTR [rbp-0x70]
  00cd5: mov    QWORD PTR [rsp-0x40],rax
  00cda: mov    QWORD PTR [rsp-0x30],0x0
  00ce3: movabs rax,0x400000034
  00ced: mov    QWORD PTR [rsp-0x28],rax
  00cf2: movabs r13,0x55788df333d0
  00cfc: call   0xffffc699
  00d01: lea    rdi,[rbp-0x8]
  00d05: mov    QWORD PTR [rbx],rdi
  00d08: movq   xmm6,QWORD PTR [rsp]
  00d0d: movq   xmm7,QWORD PTR [rsp+0x8]
  00d13: movq   xmm8,QWORD PTR [rsp+0x10]
  00d1a: add    rsp,0x20
  00d1e: movabs r13,0x55788dee5960
  00d28: test   rax,rax
  00d2b: je     0xffff7774
  00d31: mov    QWORD PTR [rbp-0x68],rax
:00057 %7 = %8.call chr()                   [Integer]
:00058 
  00d35: mov    rdi,QWORD PTR [rbp-0x68]
  00d39: test   rdi,0x1
  00d40: jne    0xd5d
  00d46: test   rdi,0x7
  00d4d: jne    0x3b657
  00d53: cmp    DWORD PTR [rdi+0x4],0x6
  00d57: jne    0x3b657
  00d5d: cmp    DWORD PTR [rip+0xffffffffffff93e9],0x26        # 0xffffa14d
  00d64: jne    0x3b657
  00d6a: mov    r9,0x0
  00d71: sub    rsp,0x20
  00d75: movq   QWORD PTR [rsp],xmm6
  00d7a: movq   QWORD PTR [rsp+0x8],xmm7
  00d80: movq   QWORD PTR [rsp+0x10],xmm8
  00d87: mov    rdx,rdi
  00d8a: mov    rax,QWORD PTR [rbx]
  00d8d: lea    rdi,[rsp-0x18]
  00d92: mov    QWORD PTR [rdi],rax
  00d95: mov    QWORD PTR [rbx],rdi
  00d98: mov    QWORD PTR [rsp-0x20],0x0
  00da1: mov    QWORD PTR [rsp-0x38],rcx
  00da6: lea    rcx,[rbp-0x70]
  00daa: mov    r8,0x0
  00db1: call   0x3b68e
  00db6: lea    rdi,[rbp-0x8]
  00dba: mov    QWORD PTR [rbx],rdi
  00dbd: movq   xmm6,QWORD PTR [rsp]
  00dc2: movq   xmm7,QWORD PTR [rsp+0x8]
  00dc8: movq   xmm8,QWORD PTR [rsp+0x10]
  00dcf: add    rsp,0x20
  00dd3: movabs r13,0x55788dee5990
  00ddd: test   rax,rax
  00de0: je     0xffff7774
  00de6: mov    QWORD PTR [rbp-0x60],rax
:00060 %6 = %0.call print(%7; 1)            [Scene]
:00061 
  00dea: mov    rdi,QWORD PTR [rbp-0x28]
  00dee: cmp    DWORD PTR [rip+0xffffffffffff9358],0x26        # 0xffffa14d
  00df5: jne    0x3b6c0
  00dfb: mov    r9,0x0
  00e02: sub    rsp,0x20
  00e06: movq   QWORD PTR [rsp],xmm6
  00e0b: movq   QWORD PTR [rsp+0x8],xmm7
  00e11: movq   QWORD PTR [rsp+0x10],xmm8
  00e18: mov    rdx,rdi
  00e1b: mov    rax,QWORD PTR [rbx]
  00e1e: lea    rdi,[rsp-0x18]
  00e23: mov    QWORD PTR [rdi],rax
  00e26: mov    QWORD PTR [rbx],rdi
  00e29: mov    QWORD PTR [rsp-0x20],0x0
  00e32: mov    QWORD PTR [rsp-0x38],rcx
  00e37: lea    rcx,[rbp-0x60]
  00e3b: mov    r8,0x1
  00e42: call   0x3b6f7
  00e47: lea    rdi,[rbp-0x8]
  00e4b: mov    QWORD PTR [rbx],rdi
  00e4e: movq   xmm6,QWORD PTR [rsp]
  00e53: movq   xmm7,QWORD PTR [rsp+0x8]
  00e59: movq   xmm8,QWORD PTR [rsp+0x10]
  00e60: add    rsp,0x20
  00e64: movabs r13,0x55788dee59c0
  00e6e: test   rax,rax
  00e71: je     0xffff7774
  00e77: mov    QWORD PTR [rbp-0x58],rax
:00063 ret %6
  00e7b: mov    rax,QWORD PTR [rbp-0x58]
  00e7f: leave  
  00e80: ret    
==> start whole compile: <unnamed> FuncId(72) self_class:Scene start:[00000] bytecode:0x55788dec2480
<== finished compile. elapsed:21.6µs
offset:Pos(38832) code: 218 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x38],0x4
  00010: mov    QWORD PTR [rbp-0x40],0x4
  00018: mov    rdi,QWORD PTR [rbp-0x28]
  0001c: test   rdi,0x7
  00023: jne    0x3a840
  00029: cmp    DWORD PTR [rdi+0x4],0x2f
  0002d: jne    0x3a840
:00000 %2 = dynvar(1, %1)
  00033: mov    rax,QWORD PTR [rbp-0x10]
  00037: mov    rax,QWORD PTR [rax-0x20]
  0003b: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = literal[74]
  0003f: mov    rax,0x95
  00046: mov    QWORD PTR [rbp-0x40],rax
:00002 _ = %2.call times(&%3)               [Integer]
:00003 
  0004a: mov    rdi,QWORD PTR [rbp-0x38]
  0004e: test   rdi,0x1
  00055: jne    0x72
  0005b: test   rdi,0x7
  00062: jne    0x3a84f
  00068: cmp    DWORD PTR [rdi+0x4],0x6
  0006c: jne    0x3a84f
  00072: cmp    DWORD PTR [rip+0xffffffffffff91eb],0x26        # 0xffff9264
  00079: jne    0x3a84f
  0007f: mov    r9,QWORD PTR [rbp-0x40]
  00083: mov    rdx,rdi
  00086: mov    rax,QWORD PTR [rbx]
  00089: lea    rdi,[rsp-0x18]
  0008e: mov    QWORD PTR [rdi],rax
  00091: mov    QWORD PTR [rbx],rdi
  00094: mov    QWORD PTR [rsp-0x20],0x0
  0009d: mov    QWORD PTR [rsp-0x38],rcx
  000a2: lea    rcx,[rbp-0x48]
  000a6: mov    r8,0x0
  000ad: call   0x3a85e
  000b2: lea    rdi,[rbp-0x8]
  000b6: mov    QWORD PTR [rbx],rdi
  000b9: movabs r13,0x55788dec24c0
  000c3: test   rax,rax
  000c6: je     0xffff688b
:00005 %2 = nil
  000cc: mov    QWORD PTR [rbp-0x38],0x4
:00006 ret %2
  000d4: mov    rax,QWORD PTR [rbp-0x38]
  000d8: leave  
  000d9: ret    
==> start whole compile: intersect FuncId(63) self_class:Sphere start:[00000] bytecode:0x55788dee86a0
<== finished compile. elapsed:119.2µs
offset:Pos(40099) code: 6428 bytes  data: 257 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xb0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x40],rax
  00016:    	mov    QWORD PTR [rbp-0x48],rax
  0001a:    	mov    QWORD PTR [rbp-0x50],rax
  0001e:    	mov    QWORD PTR [rbp-0x58],rax
  00022:    	mov    QWORD PTR [rbp-0x60],rax
  00026:    	mov    QWORD PTR [rbp-0x68],rax
  0002a:    	mov    QWORD PTR [rbp-0x70],rax
  0002e:    	mov    QWORD PTR [rbp-0x78],rax
  00032:    	mov    QWORD PTR [rbp-0x80],rax
  00036: ff 	mov    QWORD PTR [rbp-0x88],rax
  0003d: ff 	mov    QWORD PTR [rbp-0x90],rax
  00044: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004b: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00052:    	mov    rdi,QWORD PTR [rbp-0x28]
  00056: 00 	test   rdi,0x7
  0005d:    	jne    0x3a39d
  00063:    	cmp    DWORD PTR [rdi+0x4],0x27
  00067:    	jne    0x3a39d
:00000 %9 = %1.call org()                   [Ray]
:00001 
  0006d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00071: 00 	test   rdi,0x7
  00078:    	jne    0x3a3ac
  0007e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00082:    	jne    0x3a3ac
  00088: 26 	cmp    DWORD PTR [rip+0xffffffffffff8ce2],0x26        # 0xffff8d71
  0008f:    	jne    0x3a3ac
  00095:    	mov    esi,DWORD PTR [rip+0x1885]        # 0x1920
  0009b:    	cmp    esi,0xffffffff
  0009e:    	je     0x3a3bb
  000a4:    	cmp    WORD PTR [rdi+0x2],0x3
  000a9:    	jne    0xc2
  000af:    	cmp    esi,0x6
  000b2:    	jge    0xc2
  000b8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000bd:    	jmp    0xce
  000c2: 78 	movabs rax,0x55788c73bb50
  000cc:    	call   rax
  000ce:    	mov    QWORD PTR [rbp-0x70],rax
:00003 %10 = @center: Sphere[IvarId(0)]
  000d2:    	mov    rdi,QWORD PTR [rbp-0x28]
  000d6:    	cmp    WORD PTR [rdi+0x2],0x3
  000db:    	jne    0x3a3e4
  000e1:    	mov    rax,QWORD PTR [rdi+0x10]
  000e5:    	mov    QWORD PTR [rbp-0x78],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
:00005 
  000e9:    	mov    rdi,QWORD PTR [rbp-0x70]
  000ed: 00 	test   rdi,0x7
  000f4:    	jne    0x3a3fa
  000fa:    	cmp    DWORD PTR [rdi+0x4],0x25
  000fe:    	jne    0x3a3fa
  00104: 26 	cmp    DWORD PTR [rip+0xffffffffffff8c66],0x26        # 0xffff8d71
  0010b:    	jne    0x3a3fa
  00111:    	mov    rax,QWORD PTR [rbx]
  00114:    	lea    rdi,[rsp-0x18]
  00119:    	mov    QWORD PTR [rdi],rax
  0011c:    	mov    QWORD PTR [rbx],rdi
  0011f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00128:    	mov    QWORD PTR [rsp-0x38],rcx
  0012d:    	mov    rax,QWORD PTR [rbp-0x70]
  00131:    	mov    QWORD PTR [rsp-0x38],rax
  00136: 00 	mov    rdi,0x1
  0013d:    	mov    rax,QWORD PTR [rbp-0x78]
  00141:    	mov    QWORD PTR [rsp-0x40],rax
  00146: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0014f: 08 	movabs rax,0x800000039
  00159:    	mov    QWORD PTR [rsp-0x28],rax
  0015e: 78 	movabs r13,0x55788deeffb0
  00168:    	call   0xffff99d0
  0016d:    	lea    rdi,[rbp-0x8]
  00171:    	mov    QWORD PTR [rbx],rdi
  00174: 78 	movabs r13,0x55788dee8700
  0017e:    	test   rax,rax
  00181:    	je     0xffff6398
  00187:    	mov    QWORD PTR [rbp-0x40],rax
:00007 %9 = %1.call dir()                   [Ray]
:00008 
  0018b:    	mov    rdi,QWORD PTR [rbp-0x30]
  0018f: 00 	test   rdi,0x7
  00196:    	jne    0x3a409
  0019c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  001a0:    	jne    0x3a409
  001a6: 26 	cmp    DWORD PTR [rip+0xffffffffffff8bc4],0x26        # 0xffff8d71
  001ad:    	jne    0x3a409
  001b3:    	mov    esi,DWORD PTR [rip+0x176f]        # 0x1928
  001b9:    	cmp    esi,0xffffffff
  001bc:    	je     0x3a418
  001c2:    	cmp    WORD PTR [rdi+0x2],0x3
  001c7:    	jne    0x1e0
  001cd:    	cmp    esi,0x6
  001d0:    	jge    0x1e0
  001d6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001db:    	jmp    0x1ec
  001e0: 78 	movabs rax,0x55788c73bb50
  001ea:    	call   rax
  001ec:    	mov    QWORD PTR [rbp-0x70],rax
:00010 %4 = %3.call vdot(%9; 1)             [Vec]
:00011 
  001f0:    	mov    rdi,QWORD PTR [rbp-0x40]
  001f4: 00 	test   rdi,0x7
  001fb:    	jne    0x3a441
  00201:    	cmp    DWORD PTR [rdi+0x4],0x25
  00205:    	jne    0x3a441
  0020b: 26 	cmp    DWORD PTR [rip+0xffffffffffff8b5f],0x26        # 0xffff8d71
  00212:    	jne    0x3a441
  00218:    	mov    rax,QWORD PTR [rbx]
  0021b:    	lea    rdi,[rsp-0x18]
  00220:    	mov    QWORD PTR [rdi],rax
  00223:    	mov    QWORD PTR [rbx],rdi
  00226: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0022f:    	mov    QWORD PTR [rsp-0x38],rcx
  00234:    	mov    rax,QWORD PTR [rbp-0x40]
  00238:    	mov    QWORD PTR [rsp-0x38],rax
  0023d: 00 	mov    rdi,0x1
  00244:    	mov    rax,QWORD PTR [rbp-0x70]
  00248:    	mov    QWORD PTR [rsp-0x40],rax
  0024d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00256: 05 	movabs rax,0x50000003b
  00260:    	mov    QWORD PTR [rsp-0x28],rax
  00265: 78 	movabs r13,0x55788df32010
  0026f:    	call   0xffff9a62
  00274:    	lea    rdi,[rbp-0x8]
  00278:    	mov    QWORD PTR [rbx],rdi
  0027b: 78 	movabs r13,0x55788dee8760
  00285:    	test   rax,rax
  00288:    	je     0xffff6398
  0028e:    	mov    QWORD PTR [rbp-0x48],rax
:00013 %10 = %3
  00292:    	mov    rax,QWORD PTR [rbp-0x40]
  00296:    	mov    QWORD PTR [rbp-0x78],rax
:00014 %9 = %3.call vdot(%10; 1)            [Vec]
:00015 
  0029a:    	mov    rdi,QWORD PTR [rbp-0x40]
  0029e: 00 	test   rdi,0x7
  002a5:    	jne    0x3a450
  002ab:    	cmp    DWORD PTR [rdi+0x4],0x25
  002af:    	jne    0x3a450
  002b5: 26 	cmp    DWORD PTR [rip+0xffffffffffff8ab5],0x26        # 0xffff8d71
  002bc:    	jne    0x3a450
  002c2:    	mov    rax,QWORD PTR [rbx]
  002c5:    	lea    rdi,[rsp-0x18]
  002ca:    	mov    QWORD PTR [rdi],rax
  002cd:    	mov    QWORD PTR [rbx],rdi
  002d0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  002d9:    	mov    QWORD PTR [rsp-0x38],rcx
  002de:    	mov    rax,QWORD PTR [rbp-0x40]
  002e2:    	mov    QWORD PTR [rsp-0x38],rax
  002e7: 00 	mov    rdi,0x1
  002ee:    	mov    rax,QWORD PTR [rbp-0x78]
  002f2:    	mov    QWORD PTR [rsp-0x40],rax
  002f7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00300: 05 	movabs rax,0x50000003b
  0030a:    	mov    QWORD PTR [rsp-0x28],rax
  0030f: 78 	movabs r13,0x55788df32010
  00319:    	call   0xffff9a62
  0031e:    	lea    rdi,[rbp-0x8]
  00322:    	mov    QWORD PTR [rbx],rdi
  00325: 78 	movabs r13,0x55788dee87a0
  0032f:    	test   rax,rax
  00332:    	je     0xffff6398
  00338:    	mov    QWORD PTR [rbp-0x70],rax
:00017 %10 = @radius: Sphere[IvarId(1)]
  0033c:    	mov    rdi,QWORD PTR [rbp-0x28]
  00340:    	cmp    WORD PTR [rdi+0x2],0x3
  00345:    	jne    0x3a45f
  0034b:    	mov    rax,QWORD PTR [rdi+0x18]
  0034f:    	mov    QWORD PTR [rbp-0x78],rax
:00018 %11 = @radius: Sphere[IvarId(1)]
  00353:    	mov    rdi,QWORD PTR [rbp-0x28]
  00357:    	cmp    WORD PTR [rdi+0x2],0x3
  0035c:    	jne    0x3a475
  00362:    	mov    rax,QWORD PTR [rdi+0x18]
  00366:    	mov    QWORD PTR [rbp-0x80],rax
:00019 %10 = %10 * %11                      [Float][Float]
  0036a:    	mov    rdi,QWORD PTR [rbp-0x78]
  0036e: 00 	test   rdi,0x1
  00375:    	jne    0x3a48b
  0037b: 00 	test   rdi,0x2
  00382:    	je     0x3be
  00388:    	xorps  xmm2,xmm2
  0038b: 00 	movabs rax,0x8000000000000002
  00395:    	cmp    rdi,rax
  00398:    	je     0x3d0
  0039e:    	mov    rax,rdi
  003a1:    	sar    rax,0x3f
  003a5:    	add    rax,0x2
  003a9:    	and    rdi,0xfffffffffffffffc
  003ad:    	or     rdi,rax
  003b0:    	rol    rdi,0x3d
  003b4:    	movq   xmm2,rdi
  003b9:    	jmp    0x3d0
  003be:    	call   0xffff63d1
  003c3:    	test   rax,rax
  003c6:    	je     0x3a48b
  003cc:    	movq   xmm2,xmm0
  003d0:    	mov    rdi,QWORD PTR [rbp-0x80]
  003d4: 00 	test   rdi,0x1
  003db:    	jne    0x3a49a
  003e1: 00 	test   rdi,0x2
  003e8:    	je     0x424
  003ee:    	xorps  xmm3,xmm3
  003f1: 00 	movabs rax,0x8000000000000002
  003fb:    	cmp    rdi,rax
  003fe:    	je     0x436
  00404:    	mov    rax,rdi
  00407:    	sar    rax,0x3f
  0040b:    	add    rax,0x2
  0040f:    	and    rdi,0xfffffffffffffffc
  00413:    	or     rdi,rax
  00416:    	rol    rdi,0x3d
  0041a:    	movq   xmm3,rdi
  0041f:    	jmp    0x436
  00424:    	call   0xffff63d1
  00429:    	test   rax,rax
  0042c:    	je     0x3a49a
  00432:    	movq   xmm3,xmm0
  00436:    	mulsd  xmm2,xmm3
:00020 %5 = %9 - %10                        [Float][Float]
  0043a:    	mov    rdi,QWORD PTR [rbp-0x70]
  0043e: 00 	test   rdi,0x1
  00445:    	jne    0x3a4a9
  0044b: 00 	test   rdi,0x2
  00452:    	je     0x48e
  00458:    	xorps  xmm4,xmm4
  0045b: 00 	movabs rax,0x8000000000000002
  00465:    	cmp    rdi,rax
  00468:    	je     0x4a0
  0046e:    	mov    rax,rdi
  00471:    	sar    rax,0x3f
  00475:    	add    rax,0x2
  00479:    	and    rdi,0xfffffffffffffffc
  0047d:    	or     rdi,rax
  00480:    	rol    rdi,0x3d
  00484:    	movq   xmm4,rdi
  00489:    	jmp    0x4a0
  0048e:    	call   0xffff63d1
  00493:    	test   rax,rax
  00496:    	je     0x3a4a9
  0049c:    	movq   xmm4,xmm0
  004a0:    	movq   xmm5,xmm4
  004a4:    	subsd  xmm5,xmm2
:00021 %9 = %4 * %4                         [Float][Float]
  004a8:    	mov    rdi,QWORD PTR [rbp-0x48]
  004ac: 00 	test   rdi,0x1
  004b3:    	jne    0x3a4c5
  004b9: 00 	test   rdi,0x2
  004c0:    	je     0x4fc
  004c6:    	xorps  xmm6,xmm6
  004c9: 00 	movabs rax,0x8000000000000002
  004d3:    	cmp    rdi,rax
  004d6:    	je     0x50e
  004dc:    	mov    rax,rdi
  004df:    	sar    rax,0x3f
  004e3:    	add    rax,0x2
  004e7:    	and    rdi,0xfffffffffffffffc
  004eb:    	or     rdi,rax
  004ee:    	rol    rdi,0x3d
  004f2:    	movq   xmm6,rdi
  004f7:    	jmp    0x50e
  004fc:    	call   0xffff63d1
  00501:    	test   rax,rax
  00504:    	je     0x3a4c5
  0050a:    	movq   xmm6,xmm0
  0050e:    	movq   xmm4,xmm6
  00512:    	mulsd  xmm4,xmm6
:00022 %6 = %9 - %5                         [Float][Float]
  00516:    	movq   xmm7,xmm4
  0051a:    	subsd  xmm7,xmm5
:00023 %9 = literal[0.0]
  0051e: 00 	movq   xmm4,QWORD PTR [rip+0x1407]        # 0x192d
:00024 _%9 = %6 > %9                        [Float][Float]
:00025 condnotbr _%9 =>:00113
  00526:    	ucomisd xmm7,xmm4
  0052a:    	jbe    0x3b6d8
:00026 %9 = %4
:00027 %9 = neg %9                          [Float]
  00530:    	movq   xmm4,xmm6
  00534: 00 	xorps  xmm4,XMMWORD PTR [rip+0x1402]        # 0x193d
:00028 %11 = const[Math]                    [Math]
  0053b: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff883b]        # 0xffff8d7d
  00542: 00 	cmp    rax,QWORD PTR [rip+0x1414]        # 0x195d
  00549:    	jne    0x3a4ee
  0054f: 00 	mov    rax,QWORD PTR [rip+0x13f7]        # 0x194d
  00556:    	mov    QWORD PTR [rbp-0x80],rax
:00029 %12 = %6
:00030 %10 = %11.call sqrt(%12; 1)          [#<Class:Math>]
:00031 
  0055a:    	mov    rdi,QWORD PTR [rbp-0x80]
  0055e: 00 	test   rdi,0x7
  00565:    	jne    0x3a576
  0056b:    	cmp    DWORD PTR [rdi+0x4],0x20
  0056f:    	jne    0x3a576
  00575: 26 	cmp    DWORD PTR [rip+0xffffffffffff87f5],0x26        # 0xffff8d71
  0057c:    	jne    0x3a576
  00582:    	sqrtsd xmm2,xmm7
:00033 %7 = %9 - %10                        [Float][Float]
  00586:    	movq   xmm3,xmm4
  0058a:    	subsd  xmm3,xmm2
:00034 %9 = literal[0.0]
  0058e: 00 	movq   xmm4,QWORD PTR [rip+0x13d7]        # 0x196d
:00035 _%9 = %7 > %9                        [Float][Float]
:00036 condnotbr _%9 =>:00112
  00596:    	ucomisd xmm3,xmm4
  0059a:    	jbe    0x3b5bf
:00037 %9 = %2.call t()                     [Isect]
:00038 
  005a0:    	mov    rdi,QWORD PTR [rbp-0x38]
  005a4: 00 	test   rdi,0x7
  005ab:    	jne    0x3a5b3
  005b1:    	cmp    DWORD PTR [rdi+0x4],0x2d
  005b5:    	jne    0x3a5b3
  005bb: 26 	cmp    DWORD PTR [rip+0xffffffffffff87af],0x26        # 0xffff8d71
  005c2:    	jne    0x3a5b3
  005c8:    	mov    esi,DWORD PTR [rip+0x13ab]        # 0x1979
  005ce:    	cmp    esi,0xffffffff
  005d1:    	je     0x3a5fd
  005d7:    	cmp    WORD PTR [rdi+0x2],0x3
  005dc:    	jne    0x5f5
  005e2:    	cmp    esi,0x6
  005e5:    	jge    0x5f5
  005eb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005f0:    	jmp    0x643
  005f5:    	sub    rsp,0x30
  005f9:    	movq   QWORD PTR [rsp],xmm2
  005fe:    	movq   QWORD PTR [rsp+0x8],xmm3
  00604:    	movq   QWORD PTR [rsp+0x10],xmm5
  0060a:    	movq   QWORD PTR [rsp+0x18],xmm6
  00610:    	movq   QWORD PTR [rsp+0x20],xmm7
  00616: 78 	movabs rax,0x55788c73bb50
  00620:    	call   rax
  00622:    	movq   xmm2,QWORD PTR [rsp]
  00627:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0062d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00633:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00639:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0063f:    	add    rsp,0x30
  00643:    	mov    QWORD PTR [rbp-0x70],rax
:00040 _%9 = %7 < %9                        [Float][Float]
:00041 condnotbr _%9 =>:00112
  00647:    	mov    rdi,QWORD PTR [rbp-0x70]
  0064b: 00 	test   rdi,0x1
  00652:    	jne    0x3a668
  00658: 00 	test   rdi,0x2
  0065f:    	je     0x69b
  00665:    	xorps  xmm4,xmm4
  00668: 00 	movabs rax,0x8000000000000002
  00672:    	cmp    rdi,rax
  00675:    	je     0x6ad
  0067b:    	mov    rax,rdi
  0067e:    	sar    rax,0x3f
  00682:    	add    rax,0x2
  00686:    	and    rdi,0xfffffffffffffffc
  0068a:    	or     rdi,rax
  0068d:    	rol    rdi,0x3d
  00691:    	movq   xmm4,rdi
  00696:    	jmp    0x6ad
  0069b:    	call   0xffff63d1
  006a0:    	test   rax,rax
  006a3:    	je     0x3a668
  006a9:    	movq   xmm4,xmm0
  006ad:    	ucomisd xmm3,xmm4
  006b1:    	jae    0x3b629
:00042 _ = %2.call t=(%7; 1)                [Isect]
:00043 
  006b7:    	movq   xmm0,xmm3
  006bb:    	call   0xffff64c4
  006c0:    	mov    QWORD PTR [rbp-0x60],rax
  006c4:    	mov    rdi,QWORD PTR [rbp-0x38]
  006c8: 00 	test   rdi,0x7
  006cf:    	jne    0x3a6b2
  006d5:    	cmp    DWORD PTR [rdi+0x4],0x2d
  006d9:    	jne    0x3a6b2
  006df: 26 	cmp    DWORD PTR [rip+0xffffffffffff868b],0x26        # 0xffff8d71
  006e6:    	jne    0x3a6b2
  006ec:    	mov    esi,DWORD PTR [rip+0x128f]        # 0x1981
  006f2:    	cmp    esi,0xffffffff
  006f5:    	je     0x3a6ef
  006fb:    	cmp    WORD PTR [rdi+0x2],0x3
  00700:    	jne    0x71d
  00706:    	cmp    esi,0x6
  00709:    	jge    0x71d
  0070f:    	mov    rax,QWORD PTR [rbp-0x60]
  00713:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00718:    	jmp    0x78e
  0071d:    	sub    rsp,0x30
  00721:    	movq   QWORD PTR [rsp],xmm2
  00726:    	movq   QWORD PTR [rsp+0x8],xmm3
  0072c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00732:    	movq   QWORD PTR [rsp+0x18],xmm5
  00738:    	movq   QWORD PTR [rsp+0x20],xmm6
  0073e:    	movq   QWORD PTR [rsp+0x28],xmm7
  00744:    	mov    rdx,QWORD PTR [rbp-0x60]
  00748: 78 	movabs rax,0x55788c73bdd0
  00752:    	call   rax
  00754:    	movq   xmm2,QWORD PTR [rsp]
  00759:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0075f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00765:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0076b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00771:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00777:    	add    rsp,0x30
  0077b: 78 	movabs r13,0x55788dee8960
  00785:    	test   rax,rax
  00788:    	je     0xffff6398
:00045 %9 = literal[true]
  0078e: 00 	mov    rax,0x1c
  00795:    	mov    QWORD PTR [rbp-0x70],rax
:00046 _ = %2.call hit=(%9; 1)              [Isect]
:00047 
  00799:    	mov    rdi,QWORD PTR [rbp-0x38]
  0079d: 00 	test   rdi,0x7
  007a4:    	jne    0x3a76d
  007aa:    	cmp    DWORD PTR [rdi+0x4],0x2d
  007ae:    	jne    0x3a76d
  007b4: 26 	cmp    DWORD PTR [rip+0xffffffffffff85b6],0x26        # 0xffff8d71
  007bb:    	jne    0x3a76d
  007c1:    	mov    esi,DWORD PTR [rip+0x11c2]        # 0x1989
  007c7:    	cmp    esi,0xffffffff
  007ca:    	je     0x3a7aa
  007d0:    	cmp    WORD PTR [rdi+0x2],0x3
  007d5:    	jne    0x7f2
  007db:    	cmp    esi,0x6
  007de:    	jge    0x7f2
  007e4:    	mov    rax,QWORD PTR [rbp-0x70]
  007e8:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  007ed:    	jmp    0x857
  007f2:    	sub    rsp,0x30
  007f6:    	movq   QWORD PTR [rsp],xmm2
  007fb:    	movq   QWORD PTR [rsp+0x8],xmm3
  00801:    	movq   QWORD PTR [rsp+0x10],xmm5
  00807:    	movq   QWORD PTR [rsp+0x18],xmm6
  0080d:    	movq   QWORD PTR [rsp+0x20],xmm7
  00813:    	mov    rdx,QWORD PTR [rbp-0x70]
  00817: 78 	movabs rax,0x55788c73bdd0
  00821:    	call   rax
  00823:    	movq   xmm2,QWORD PTR [rsp]
  00828:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0082e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00834:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0083a:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00840:    	add    rsp,0x30
  00844: 78 	movabs r13,0x55788dee89a0
  0084e:    	test   rax,rax
  00851:    	je     0xffff6398
:00049 %10 = const[Vec]                     [Vec]
  00857: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff851f]        # 0xffff8d7d
  0085e: 00 	cmp    rax,QWORD PTR [rip+0x1138]        # 0x199d
  00865:    	jne    0x3a81c
  0086b: 00 	mov    rax,QWORD PTR [rip+0x111b]        # 0x198d
  00872:    	mov    QWORD PTR [rbp-0x78],rax
:00050 %12 = %1.call org()                  [Ray]
:00051 
  00876:    	mov    rdi,QWORD PTR [rbp-0x30]
  0087a: 00 	test   rdi,0x7
  00881:    	jne    0x3a898
  00887:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0088b:    	jne    0x3a898
  00891: 26 	cmp    DWORD PTR [rip+0xffffffffffff84d9],0x26        # 0xffff8d71
  00898:    	jne    0x3a898
  0089e:    	mov    esi,DWORD PTR [rip+0x1105]        # 0x19a9
  008a4:    	cmp    esi,0xffffffff
  008a7:    	je     0x3a8c1
  008ad:    	cmp    WORD PTR [rdi+0x2],0x3
  008b2:    	jne    0x8cb
  008b8:    	cmp    esi,0x6
  008bb:    	jge    0x8cb
  008c1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008c6:    	jmp    0x90d
  008cb:    	sub    rsp,0x20
  008cf:    	movq   QWORD PTR [rsp],xmm3
  008d4:    	movq   QWORD PTR [rsp+0x8],xmm5
  008da:    	movq   QWORD PTR [rsp+0x10],xmm6
  008e0:    	movq   QWORD PTR [rsp+0x18],xmm7
  008e6: 78 	movabs rax,0x55788c73bb50
  008f0:    	call   rax
  008f2:    	movq   xmm3,QWORD PTR [rsp]
  008f7:    	movq   xmm5,QWORD PTR [rsp+0x8]
  008fd:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00903:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00909:    	add    rsp,0x20
  0090d: ff 	mov    QWORD PTR [rbp-0x88],rax
:00053 %11 = %12.call x()                   [Vec]
:00054 
  00914: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0091b: 00 	test   rdi,0x7
  00922:    	jne    0x3a920
  00928:    	cmp    DWORD PTR [rdi+0x4],0x25
  0092c:    	jne    0x3a920
  00932: 26 	cmp    DWORD PTR [rip+0xffffffffffff8438],0x26        # 0xffff8d71
  00939:    	jne    0x3a920
  0093f:    	mov    esi,DWORD PTR [rip+0x106c]        # 0x19b1
  00945:    	cmp    esi,0xffffffff
  00948:    	je     0x3a949
  0094e:    	cmp    WORD PTR [rdi+0x2],0x3
  00953:    	jne    0x96c
  00959:    	cmp    esi,0x6
  0095c:    	jge    0x96c
  00962:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00967:    	jmp    0x9ae
  0096c:    	sub    rsp,0x20
  00970:    	movq   QWORD PTR [rsp],xmm3
  00975:    	movq   QWORD PTR [rsp+0x8],xmm5
  0097b:    	movq   QWORD PTR [rsp+0x10],xmm6
  00981:    	movq   QWORD PTR [rsp+0x18],xmm7
  00987: 78 	movabs rax,0x55788c73bb50
  00991:    	call   rax
  00993:    	movq   xmm3,QWORD PTR [rsp]
  00998:    	movq   xmm5,QWORD PTR [rsp+0x8]
  0099e:    	movq   xmm6,QWORD PTR [rsp+0x10]
  009a4:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009aa:    	add    rsp,0x20
  009ae:    	mov    QWORD PTR [rbp-0x80],rax
:00056 %13 = %1.call dir()                  [Ray]
:00057 
  009b2:    	mov    rdi,QWORD PTR [rbp-0x30]
  009b6: 00 	test   rdi,0x7
  009bd:    	jne    0x3a9a8
  009c3:    	cmp    DWORD PTR [rdi+0x4],0x2b
  009c7:    	jne    0x3a9a8
  009cd: 26 	cmp    DWORD PTR [rip+0xffffffffffff839d],0x26        # 0xffff8d71
  009d4:    	jne    0x3a9a8
  009da:    	mov    esi,DWORD PTR [rip+0xfd9]        # 0x19b9
  009e0:    	cmp    esi,0xffffffff
  009e3:    	je     0x3a9d1
  009e9:    	cmp    WORD PTR [rdi+0x2],0x3
  009ee:    	jne    0xa07
  009f4:    	cmp    esi,0x6
  009f7:    	jge    0xa07
  009fd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a02:    	jmp    0xa49
  00a07:    	sub    rsp,0x20
  00a0b:    	movq   QWORD PTR [rsp],xmm3
  00a10:    	movq   QWORD PTR [rsp+0x8],xmm5
  00a16:    	movq   QWORD PTR [rsp+0x10],xmm6
  00a1c:    	movq   QWORD PTR [rsp+0x18],xmm7
  00a22: 78 	movabs rax,0x55788c73bb50
  00a2c:    	call   rax
  00a2e:    	movq   xmm3,QWORD PTR [rsp]
  00a33:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00a39:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00a3f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00a45:    	add    rsp,0x20
  00a49: ff 	mov    QWORD PTR [rbp-0x90],rax
:00059 %12 = %13.call x()                   [Vec]
:00060 
  00a50: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00a57: 00 	test   rdi,0x7
  00a5e:    	jne    0x3aa30
  00a64:    	cmp    DWORD PTR [rdi+0x4],0x25
  00a68:    	jne    0x3aa30
  00a6e: 26 	cmp    DWORD PTR [rip+0xffffffffffff82fc],0x26        # 0xffff8d71
  00a75:    	jne    0x3aa30
  00a7b:    	mov    esi,DWORD PTR [rip+0xf40]        # 0x19c1
  00a81:    	cmp    esi,0xffffffff
  00a84:    	je     0x3aa59
  00a8a:    	cmp    WORD PTR [rdi+0x2],0x3
  00a8f:    	jne    0xaa8
  00a95:    	cmp    esi,0x6
  00a98:    	jge    0xaa8
  00a9e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aa3:    	jmp    0xaea
  00aa8:    	sub    rsp,0x20
  00aac:    	movq   QWORD PTR [rsp],xmm3
  00ab1:    	movq   QWORD PTR [rsp+0x8],xmm5
  00ab7:    	movq   QWORD PTR [rsp+0x10],xmm6
  00abd:    	movq   QWORD PTR [rsp+0x18],xmm7
  00ac3: 78 	movabs rax,0x55788c73bb50
  00acd:    	call   rax
  00acf:    	movq   xmm3,QWORD PTR [rsp]
  00ad4:    	movq   xmm5,QWORD PTR [rsp+0x8]
  00ada:    	movq   xmm6,QWORD PTR [rsp+0x10]
  00ae0:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00ae6:    	add    rsp,0x20
  00aea: ff 	mov    QWORD PTR [rbp-0x88],rax
:00062 %12 = %12 * %7                       [Float][Float]
  00af1: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00af8: 00 	test   rdi,0x1
  00aff:    	jne    0x3aab8
  00b05: 00 	test   rdi,0x2
  00b0c:    	je     0xb48
  00b12:    	xorps  xmm2,xmm2
  00b15: 00 	movabs rax,0x8000000000000002
  00b1f:    	cmp    rdi,rax
  00b22:    	je     0xb5a
  00b28:    	mov    rax,rdi
  00b2b:    	sar    rax,0x3f
  00b2f:    	add    rax,0x2
  00b33:    	and    rdi,0xfffffffffffffffc
  00b37:    	or     rdi,rax
  00b3a:    	rol    rdi,0x3d
  00b3e:    	movq   xmm2,rdi
  00b43:    	jmp    0xb5a
  00b48:    	call   0xffff63d1
  00b4d:    	test   rax,rax
  00b50:    	je     0x3aab8
  00b56:    	movq   xmm2,xmm0
  00b5a:    	mulsd  xmm2,xmm3
:00063 %11 = %11 + %12                      [Float][Float]
  00b5e:    	mov    rdi,QWORD PTR [rbp-0x80]
  00b62: 00 	test   rdi,0x1
  00b69:    	jne    0x3aae1
  00b6f: 00 	test   rdi,0x2
  00b76:    	je     0xbb2
  00b7c:    	xorps  xmm4,xmm4
  00b7f: 00 	movabs rax,0x8000000000000002
  00b89:    	cmp    rdi,rax
  00b8c:    	je     0xbc4
  00b92:    	mov    rax,rdi
  00b95:    	sar    rax,0x3f
  00b99:    	add    rax,0x2
  00b9d:    	and    rdi,0xfffffffffffffffc
  00ba1:    	or     rdi,rax
  00ba4:    	rol    rdi,0x3d
  00ba8:    	movq   xmm4,rdi
  00bad:    	jmp    0xbc4
  00bb2:    	call   0xffff63d1
  00bb7:    	test   rax,rax
  00bba:    	je     0x3aae1
  00bc0:    	movq   xmm4,xmm0
  00bc4:    	addsd  xmm4,xmm2
:00064 %13 = %1.call org()                  [Ray]
:00065 
  00bc8:    	mov    rdi,QWORD PTR [rbp-0x30]
  00bcc: 00 	test   rdi,0x7
  00bd3:    	jne    0x3ab1a
  00bd9:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00bdd:    	jne    0x3ab1a
  00be3: 26 	cmp    DWORD PTR [rip+0xffffffffffff8187],0x26        # 0xffff8d71
  00bea:    	jne    0x3ab1a
  00bf0:    	mov    esi,DWORD PTR [rip+0xdd3]        # 0x19c9
  00bf6:    	cmp    esi,0xffffffff
  00bf9:    	je     0x3ab60
  00bff:    	cmp    WORD PTR [rdi+0x2],0x3
  00c04:    	jne    0xc1d
  00c0a:    	cmp    esi,0x6
  00c0d:    	jge    0xc1d
  00c13:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00c18:    	jmp    0xc77
  00c1d:    	sub    rsp,0x30
  00c21:    	movq   QWORD PTR [rsp],xmm2
  00c26:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c2c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c32:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c38:    	movq   QWORD PTR [rsp+0x20],xmm6
  00c3e:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c44: 78 	movabs rax,0x55788c73bb50
  00c4e:    	call   rax
  00c50:    	movq   xmm2,QWORD PTR [rsp]
  00c55:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c5b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c61:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c67:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c6d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c73:    	add    rsp,0x30
  00c77: ff 	mov    QWORD PTR [rbp-0x90],rax
:00067 %12 = %13.call y()                   [Vec]
:00068 
  00c7e: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00c85: 00 	test   rdi,0x7
  00c8c:    	jne    0x3abd7
  00c92:    	cmp    DWORD PTR [rdi+0x4],0x25
  00c96:    	jne    0x3abd7
  00c9c: 26 	cmp    DWORD PTR [rip+0xffffffffffff80ce],0x26        # 0xffff8d71
  00ca3:    	jne    0x3abd7
  00ca9:    	mov    esi,DWORD PTR [rip+0xd22]        # 0x19d1
  00caf:    	cmp    esi,0xffffffff
  00cb2:    	je     0x3ac0d
  00cb8:    	cmp    WORD PTR [rdi+0x2],0x3
  00cbd:    	jne    0xcd6
  00cc3:    	cmp    esi,0x6
  00cc6:    	jge    0xcd6
  00ccc:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00cd1:    	jmp    0xd24
  00cd6:    	sub    rsp,0x30
  00cda:    	movq   QWORD PTR [rsp],xmm3
  00cdf:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ce5:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ceb:    	movq   QWORD PTR [rsp+0x18],xmm6
  00cf1:    	movq   QWORD PTR [rsp+0x20],xmm7
  00cf7: 78 	movabs rax,0x55788c73bb50
  00d01:    	call   rax
  00d03:    	movq   xmm3,QWORD PTR [rsp]
  00d08:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d0e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d14:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d1a:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d20:    	add    rsp,0x30
  00d24: ff 	mov    QWORD PTR [rbp-0x88],rax
:00070 %14 = %1.call dir()                  [Ray]
:00071 
  00d2b:    	mov    rdi,QWORD PTR [rbp-0x30]
  00d2f: 00 	test   rdi,0x7
  00d36:    	jne    0x3ac78
  00d3c:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00d40:    	jne    0x3ac78
  00d46: 26 	cmp    DWORD PTR [rip+0xffffffffffff8024],0x26        # 0xffff8d71
  00d4d:    	jne    0x3ac78
  00d53:    	mov    esi,DWORD PTR [rip+0xc80]        # 0x19d9
  00d59:    	cmp    esi,0xffffffff
  00d5c:    	je     0x3acae
  00d62:    	cmp    WORD PTR [rdi+0x2],0x3
  00d67:    	jne    0xd80
  00d6d:    	cmp    esi,0x6
  00d70:    	jge    0xd80
  00d76:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d7b:    	jmp    0xdce
  00d80:    	sub    rsp,0x30
  00d84:    	movq   QWORD PTR [rsp],xmm3
  00d89:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d8f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d95:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d9b:    	movq   QWORD PTR [rsp+0x20],xmm7
  00da1: 78 	movabs rax,0x55788c73bb50
  00dab:    	call   rax
  00dad:    	movq   xmm3,QWORD PTR [rsp]
  00db2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00db8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00dbe:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00dc4:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00dca:    	add    rsp,0x30
  00dce: ff 	mov    QWORD PTR [rbp-0x98],rax
:00073 %13 = %14.call y()                   [Vec]
:00074 
  00dd5: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00ddc: 00 	test   rdi,0x7
  00de3:    	jne    0x3ad19
  00de9:    	cmp    DWORD PTR [rdi+0x4],0x25
  00ded:    	jne    0x3ad19
  00df3: 26 	cmp    DWORD PTR [rip+0xffffffffffff7f77],0x26        # 0xffff8d71
  00dfa:    	jne    0x3ad19
  00e00:    	mov    esi,DWORD PTR [rip+0xbdb]        # 0x19e1
  00e06:    	cmp    esi,0xffffffff
  00e09:    	je     0x3ad4f
  00e0f:    	cmp    WORD PTR [rdi+0x2],0x3
  00e14:    	jne    0xe2d
  00e1a:    	cmp    esi,0x6
  00e1d:    	jge    0xe2d
  00e23:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e28:    	jmp    0xe7b
  00e2d:    	sub    rsp,0x30
  00e31:    	movq   QWORD PTR [rsp],xmm3
  00e36:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e3c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e42:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e48:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e4e: 78 	movabs rax,0x55788c73bb50
  00e58:    	call   rax
  00e5a:    	movq   xmm3,QWORD PTR [rsp]
  00e5f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e65:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e6b:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e71:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e77:    	add    rsp,0x30
  00e7b: ff 	mov    QWORD PTR [rbp-0x90],rax
:00076 %13 = %13 * %7                       [Float][Float]
  00e82: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00e89: 00 	test   rdi,0x1
  00e90:    	jne    0x3adba
  00e96: 00 	test   rdi,0x2
  00e9d:    	je     0xed9
  00ea3:    	xorps  xmm2,xmm2
  00ea6: 00 	movabs rax,0x8000000000000002
  00eb0:    	cmp    rdi,rax
  00eb3:    	je     0xeeb
  00eb9:    	mov    rax,rdi
  00ebc:    	sar    rax,0x3f
  00ec0:    	add    rax,0x2
  00ec4:    	and    rdi,0xfffffffffffffffc
  00ec8:    	or     rdi,rax
  00ecb:    	rol    rdi,0x3d
  00ecf:    	movq   xmm2,rdi
  00ed4:    	jmp    0xeeb
  00ed9:    	call   0xffff63d1
  00ede:    	test   rax,rax
  00ee1:    	je     0x3adba
  00ee7:    	movq   xmm2,xmm0
  00eeb:    	mulsd  xmm2,xmm3
:00077 %12 = %12 + %13                      [Float][Float]
  00eef: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00ef6: 00 	test   rdi,0x1
  00efd:    	jne    0x3adf0
  00f03: 00 	test   rdi,0x2
  00f0a:    	je     0xf47
  00f10:    	xorps  xmm8,xmm8
  00f14: 00 	movabs rax,0x8000000000000002
  00f1e:    	cmp    rdi,rax
  00f21:    	je     0xf5a
  00f27:    	mov    rax,rdi
  00f2a:    	sar    rax,0x3f
  00f2e:    	add    rax,0x2
  00f32:    	and    rdi,0xfffffffffffffffc
  00f36:    	or     rdi,rax
  00f39:    	rol    rdi,0x3d
  00f3d:    	movq   xmm8,rdi
  00f42:    	jmp    0xf5a
  00f47:    	call   0xffff63d1
  00f4c:    	test   rax,rax
  00f4f:    	je     0x3adf0
  00f55:    	movq   xmm8,xmm0
  00f5a:    	addsd  xmm8,xmm2
:00078 %14 = %1.call org()                  [Ray]
:00079 
  00f5f:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f63: 00 	test   rdi,0x7
  00f6a:    	jne    0x3ae36
  00f70:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00f74:    	jne    0x3ae36
  00f7a: 26 	cmp    DWORD PTR [rip+0xffffffffffff7df0],0x26        # 0xffff8d71
  00f81:    	jne    0x3ae36
  00f87:    	mov    esi,DWORD PTR [rip+0xa5c]        # 0x19e9
  00f8d:    	cmp    esi,0xffffffff
  00f90:    	je     0x3ae8d
  00f96:    	cmp    WORD PTR [rdi+0x2],0x3
  00f9b:    	jne    0xfb4
  00fa1:    	cmp    esi,0x6
  00fa4:    	jge    0xfb4
  00faa:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00faf:    	jmp    0x101c
  00fb4:    	sub    rsp,0x40
  00fb8:    	movq   QWORD PTR [rsp],xmm2
  00fbd:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fc3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fc9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fcf:    	movq   QWORD PTR [rsp+0x20],xmm6
  00fd5:    	movq   QWORD PTR [rsp+0x28],xmm7
  00fdb: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00fe2: 78 	movabs rax,0x55788c73bb50
  00fec:    	call   rax
  00fee:    	movq   xmm2,QWORD PTR [rsp]
  00ff3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ff9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fff:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01005:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0100b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01011: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01018:    	add    rsp,0x40
  0101c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00081 %13 = %14.call z()                   [Vec]
:00082 
  01023: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0102a: 00 	test   rdi,0x7
  01031:    	jne    0x3af12
  01037:    	cmp    DWORD PTR [rdi+0x4],0x25
  0103b:    	jne    0x3af12
  01041: 26 	cmp    DWORD PTR [rip+0xffffffffffff7d29],0x26        # 0xffff8d71
  01048:    	jne    0x3af12
  0104e:    	mov    esi,DWORD PTR [rip+0x99d]        # 0x19f1
  01054:    	cmp    esi,0xffffffff
  01057:    	je     0x3af59
  0105d:    	cmp    WORD PTR [rdi+0x2],0x3
  01062:    	jne    0x107b
  01068:    	cmp    esi,0x6
  0106b:    	jge    0x107b
  01071:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01076:    	jmp    0x10d7
  0107b:    	sub    rsp,0x30
  0107f:    	movq   QWORD PTR [rsp],xmm3
  01084:    	movq   QWORD PTR [rsp+0x8],xmm4
  0108a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01090:    	movq   QWORD PTR [rsp+0x18],xmm6
  01096:    	movq   QWORD PTR [rsp+0x20],xmm7
  0109c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  010a3: 78 	movabs rax,0x55788c73bb50
  010ad:    	call   rax
  010af:    	movq   xmm3,QWORD PTR [rsp]
  010b4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010ba:    	movq   xmm5,QWORD PTR [rsp+0x10]
  010c0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010c6:    	movq   xmm7,QWORD PTR [rsp+0x20]
  010cc: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  010d3:    	add    rsp,0x30
  010d7: ff 	mov    QWORD PTR [rbp-0x90],rax
:00084 %15 = %1.call dir()                  [Ray]
:00085 
  010de:    	mov    rdi,QWORD PTR [rbp-0x30]
  010e2: 00 	test   rdi,0x7
  010e9:    	jne    0x3afd2
  010ef:    	cmp    DWORD PTR [rdi+0x4],0x2b
  010f3:    	jne    0x3afd2
  010f9: 26 	cmp    DWORD PTR [rip+0xffffffffffff7c71],0x26        # 0xffff8d71
  01100:    	jne    0x3afd2
  01106:    	mov    esi,DWORD PTR [rip+0x8ed]        # 0x19f9
  0110c:    	cmp    esi,0xffffffff
  0110f:    	je     0x3b019
  01115:    	cmp    WORD PTR [rdi+0x2],0x3
  0111a:    	jne    0x1133
  01120:    	cmp    esi,0x6
  01123:    	jge    0x1133
  01129:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0112e:    	jmp    0x118f
  01133:    	sub    rsp,0x30
  01137:    	movq   QWORD PTR [rsp],xmm3
  0113c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01142:    	movq   QWORD PTR [rsp+0x10],xmm5
  01148:    	movq   QWORD PTR [rsp+0x18],xmm6
  0114e:    	movq   QWORD PTR [rsp+0x20],xmm7
  01154: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0115b: 78 	movabs rax,0x55788c73bb50
  01165:    	call   rax
  01167:    	movq   xmm3,QWORD PTR [rsp]
  0116c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01172:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01178:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0117e:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01184: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0118b:    	add    rsp,0x30
  0118f: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00087 %14 = %15.call z()                   [Vec]
:00088 
  01196: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0119d: 00 	test   rdi,0x7
  011a4:    	jne    0x3b092
  011aa:    	cmp    DWORD PTR [rdi+0x4],0x25
  011ae:    	jne    0x3b092
  011b4: 26 	cmp    DWORD PTR [rip+0xffffffffffff7bb6],0x26        # 0xffff8d71
  011bb:    	jne    0x3b092
  011c1:    	mov    esi,DWORD PTR [rip+0x83a]        # 0x1a01
  011c7:    	cmp    esi,0xffffffff
  011ca:    	je     0x3b0d9
  011d0:    	cmp    WORD PTR [rdi+0x2],0x3
  011d5:    	jne    0x11ee
  011db:    	cmp    esi,0x6
  011de:    	jge    0x11ee
  011e4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  011e9:    	jmp    0x124a
  011ee:    	sub    rsp,0x30
  011f2:    	movq   QWORD PTR [rsp],xmm3
  011f7:    	movq   QWORD PTR [rsp+0x8],xmm4
  011fd:    	movq   QWORD PTR [rsp+0x10],xmm5
  01203:    	movq   QWORD PTR [rsp+0x18],xmm6
  01209:    	movq   QWORD PTR [rsp+0x20],xmm7
  0120f: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01216: 78 	movabs rax,0x55788c73bb50
  01220:    	call   rax
  01222:    	movq   xmm3,QWORD PTR [rsp]
  01227:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0122d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01233:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01239:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0123f: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01246:    	add    rsp,0x30
  0124a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %14 = %14 * %7                       [Float][Float]
  01251: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01258: 00 	test   rdi,0x1
  0125f:    	jne    0x3b152
  01265: 00 	test   rdi,0x2
  0126c:    	je     0x12a8
  01272:    	xorps  xmm2,xmm2
  01275: 00 	movabs rax,0x8000000000000002
  0127f:    	cmp    rdi,rax
  01282:    	je     0x12ba
  01288:    	mov    rax,rdi
  0128b:    	sar    rax,0x3f
  0128f:    	add    rax,0x2
  01293:    	and    rdi,0xfffffffffffffffc
  01297:    	or     rdi,rax
  0129a:    	rol    rdi,0x3d
  0129e:    	movq   xmm2,rdi
  012a3:    	jmp    0x12ba
  012a8:    	call   0xffff63d1
  012ad:    	test   rax,rax
  012b0:    	je     0x3b152
  012b6:    	movq   xmm2,xmm0
  012ba:    	mulsd  xmm2,xmm3
:00091 %13 = %13 + %14                      [Float][Float]
  012be: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  012c5: 00 	test   rdi,0x1
  012cc:    	jne    0x3b199
  012d2: 00 	test   rdi,0x2
  012d9:    	je     0x1316
  012df:    	xorps  xmm9,xmm9
  012e3: 00 	movabs rax,0x8000000000000002
  012ed:    	cmp    rdi,rax
  012f0:    	je     0x1329
  012f6:    	mov    rax,rdi
  012f9:    	sar    rax,0x3f
  012fd:    	add    rax,0x2
  01301:    	and    rdi,0xfffffffffffffffc
  01305:    	or     rdi,rax
  01308:    	rol    rdi,0x3d
  0130c:    	movq   xmm9,rdi
  01311:    	jmp    0x1329
  01316:    	call   0xffff63d1
  0131b:    	test   rax,rax
  0131e:    	je     0x3b199
  01324:    	movq   xmm9,xmm0
  01329:    	addsd  xmm9,xmm2
:00092 %9 = %10.call new(%11; 3)            [#<Class:Vec>]
:00093 
  0132e:    	movq   xmm0,xmm4
  01332:    	call   0xffff64c4
  01337:    	mov    QWORD PTR [rbp-0x80],rax
  0133b:    	movq   xmm0,xmm8
  01340:    	call   0xffff64c4
  01345: ff 	mov    QWORD PTR [rbp-0x88],rax
  0134c:    	movq   xmm0,xmm9
  01351:    	call   0xffff64c4
  01356: ff 	mov    QWORD PTR [rbp-0x90],rax
  0135d:    	mov    rdi,QWORD PTR [rbp-0x78]
  01361: 00 	test   rdi,0x7
  01368:    	jne    0x3b1f0
  0136e:    	cmp    DWORD PTR [rdi+0x4],0x26
  01372:    	jne    0x3b1f0
  01378: 26 	cmp    DWORD PTR [rip+0xffffffffffff79f2],0x26        # 0xffff8d71
  0137f:    	jne    0x3b1f0
  01385: 00 	mov    r9,0x0
  0138c:    	sub    rsp,0x40
  01390:    	movq   QWORD PTR [rsp],xmm2
  01395:    	movq   QWORD PTR [rsp+0x8],xmm3
  0139b:    	movq   QWORD PTR [rsp+0x10],xmm4
  013a1:    	movq   QWORD PTR [rsp+0x18],xmm5
  013a7:    	movq   QWORD PTR [rsp+0x20],xmm6
  013ad:    	movq   QWORD PTR [rsp+0x28],xmm7
  013b3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  013ba: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  013c1:    	mov    rdx,rdi
  013c4:    	mov    rax,QWORD PTR [rbx]
  013c7:    	lea    rdi,[rsp-0x18]
  013cc:    	mov    QWORD PTR [rdi],rax
  013cf:    	mov    QWORD PTR [rbx],rdi
  013d2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  013db:    	mov    QWORD PTR [rsp-0x38],rcx
  013e0:    	lea    rcx,[rbp-0x80]
  013e4: 00 	mov    r8,0x3
  013eb:    	call   0x3b229
  013f0:    	lea    rdi,[rbp-0x8]
  013f4:    	mov    QWORD PTR [rbx],rdi
  013f7:    	movq   xmm2,QWORD PTR [rsp]
  013fc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01402:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01408:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0140e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01414:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0141a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01421: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01428:    	add    rsp,0x40
  0142c: 78 	movabs r13,0x55788dee8c80
  01436:    	test   rax,rax
  01439:    	je     0xffff6398
  0143f:    	mov    QWORD PTR [rbp-0x70],rax
:00095 _ = %2.call pl=(%9; 1)               [Isect]
:00096 
  01443:    	mov    rdi,QWORD PTR [rbp-0x38]
  01447: 00 	test   rdi,0x7
  0144e:    	jne    0x3b25b
  01454:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01458:    	jne    0x3b25b
  0145e: 26 	cmp    DWORD PTR [rip+0xffffffffffff790c],0x26        # 0xffff8d71
  01465:    	jne    0x3b25b
  0146b:    	mov    esi,DWORD PTR [rip+0x598]        # 0x1a09
  01471:    	cmp    esi,0xffffffff
  01474:    	je     0x3b294
  0147a:    	cmp    WORD PTR [rdi+0x2],0x3
  0147f:    	jne    0x149c
  01485:    	cmp    esi,0x6
  01488:    	jge    0x149c
  0148e:    	mov    rax,QWORD PTR [rbp-0x70]
  01492:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01497:    	jmp    0x1529
  0149c:    	sub    rsp,0x40
  014a0:    	movq   QWORD PTR [rsp],xmm2
  014a5:    	movq   QWORD PTR [rsp+0x8],xmm3
  014ab:    	movq   QWORD PTR [rsp+0x10],xmm4
  014b1:    	movq   QWORD PTR [rsp+0x18],xmm5
  014b7:    	movq   QWORD PTR [rsp+0x20],xmm6
  014bd:    	movq   QWORD PTR [rsp+0x28],xmm7
  014c3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014ca: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014d1:    	mov    rdx,QWORD PTR [rbp-0x70]
  014d5: 78 	movabs rax,0x55788c73bdd0
  014df:    	call   rax
  014e1:    	movq   xmm2,QWORD PTR [rsp]
  014e6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014ec:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014f2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014f8:    	movq   xmm6,QWORD PTR [rsp+0x20]
  014fe:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01504: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0150b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01512:    	add    rsp,0x40
  01516: 78 	movabs r13,0x55788dee8cb0
  01520:    	test   rax,rax
  01523:    	je     0xffff6398
:00098 %9 = %2.call pl()                    [Isect]
:00099 
  01529:    	mov    rdi,QWORD PTR [rbp-0x38]
  0152d: 00 	test   rdi,0x7
  01534:    	jne    0x3b32e
  0153a:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0153e:    	jne    0x3b32e
  01544: 26 	cmp    DWORD PTR [rip+0xffffffffffff7826],0x26        # 0xffff8d71
  0154b:    	jne    0x3b32e
  01551:    	mov    esi,DWORD PTR [rip+0x4ba]        # 0x1a11
  01557:    	cmp    esi,0xffffffff
  0155a:    	je     0x3b367
  01560:    	cmp    WORD PTR [rdi+0x2],0x3
  01565:    	jne    0x157e
  0156b:    	cmp    esi,0x6
  0156e:    	jge    0x157e
  01574:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01579:    	jmp    0x15f4
  0157e:    	sub    rsp,0x40
  01582:    	movq   QWORD PTR [rsp],xmm2
  01587:    	movq   QWORD PTR [rsp+0x8],xmm3
  0158d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01593:    	movq   QWORD PTR [rsp+0x18],xmm5
  01599:    	movq   QWORD PTR [rsp+0x20],xmm6
  0159f:    	movq   QWORD PTR [rsp+0x28],xmm7
  015a5: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015ac: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015b3: 78 	movabs rax,0x55788c73bb50
  015bd:    	call   rax
  015bf:    	movq   xmm2,QWORD PTR [rsp]
  015c4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015ca:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015d0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015d6:    	movq   xmm6,QWORD PTR [rsp+0x20]
  015dc:    	movq   xmm7,QWORD PTR [rsp+0x28]
  015e2: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  015e9: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  015f0:    	add    rsp,0x40
  015f4:    	mov    QWORD PTR [rbp-0x70],rax
:00101 %10 = @center: Sphere[IvarId(0)]
  015f8:    	mov    rdi,QWORD PTR [rbp-0x28]
  015fc:    	cmp    WORD PTR [rdi+0x2],0x3
  01601:    	jne    0x3b3fa
  01607:    	mov    rax,QWORD PTR [rdi+0x10]
  0160b:    	mov    QWORD PTR [rbp-0x78],rax
:00102 %8 = %9.call vsub(%10; 1)            [Vec]
:00103 
  0160f:    	mov    rdi,QWORD PTR [rbp-0x70]
  01613: 00 	test   rdi,0x7
  0161a:    	jne    0x3b47a
  01620:    	cmp    DWORD PTR [rdi+0x4],0x25
  01624:    	jne    0x3b47a
  0162a: 26 	cmp    DWORD PTR [rip+0xffffffffffff7740],0x26        # 0xffff8d71
  01631:    	jne    0x3b47a
  01637:    	sub    rsp,0x40
  0163b:    	movq   QWORD PTR [rsp],xmm2
  01640:    	movq   QWORD PTR [rsp+0x8],xmm3
  01646:    	movq   QWORD PTR [rsp+0x10],xmm4
  0164c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01652:    	movq   QWORD PTR [rsp+0x20],xmm6
  01658:    	movq   QWORD PTR [rsp+0x28],xmm7
  0165e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01665: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0166c:    	mov    rax,QWORD PTR [rbx]
  0166f:    	lea    rdi,[rsp-0x18]
  01674:    	mov    QWORD PTR [rdi],rax
  01677:    	mov    QWORD PTR [rbx],rdi
  0167a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01683:    	mov    QWORD PTR [rsp-0x38],rcx
  01688:    	mov    rax,QWORD PTR [rbp-0x70]
  0168c:    	mov    QWORD PTR [rsp-0x38],rax
  01691: 00 	mov    rdi,0x1
  01698:    	mov    rax,QWORD PTR [rbp-0x78]
  0169c:    	mov    QWORD PTR [rsp-0x40],rax
  016a1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016aa: 08 	movabs rax,0x1000800000039
  016b4:    	mov    QWORD PTR [rsp-0x28],rax
  016b9: 78 	movabs r13,0x55788deeffb0
  016c3:    	call   0xffff99d0
  016c8:    	lea    rdi,[rbp-0x8]
  016cc:    	mov    QWORD PTR [rbx],rdi
  016cf:    	movq   xmm2,QWORD PTR [rsp]
  016d4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  016da:    	movq   xmm4,QWORD PTR [rsp+0x10]
  016e0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  016e6:    	movq   xmm6,QWORD PTR [rsp+0x20]
  016ec:    	movq   xmm7,QWORD PTR [rsp+0x28]
  016f2: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  016f9: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01700:    	add    rsp,0x40
  01704: 78 	movabs r13,0x55788dee8d20
  0170e:    	test   rax,rax
  01711:    	je     0xffff6398
  01717:    	mov    QWORD PTR [rbp-0x68],rax
:00105 %9 = %8.call vnormalize()            [Vec]
:00106 
  0171b:    	mov    rdi,QWORD PTR [rbp-0x68]
  0171f: 00 	test   rdi,0x7
  01726:    	jne    0x3b4b3
  0172c:    	cmp    DWORD PTR [rdi+0x4],0x25
  01730:    	jne    0x3b4b3
  01736: 26 	cmp    DWORD PTR [rip+0xffffffffffff7634],0x26        # 0xffff8d71
  0173d:    	jne    0x3b4b3
  01743:    	sub    rsp,0x40
  01747:    	movq   QWORD PTR [rsp],xmm2
  0174c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01752:    	movq   QWORD PTR [rsp+0x10],xmm4
  01758:    	movq   QWORD PTR [rsp+0x18],xmm5
  0175e:    	movq   QWORD PTR [rsp+0x20],xmm6
  01764:    	movq   QWORD PTR [rsp+0x28],xmm7
  0176a: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01771: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01778:    	mov    rax,QWORD PTR [rbx]
  0177b:    	lea    rdi,[rsp-0x18]
  01780:    	mov    QWORD PTR [rdi],rax
  01783:    	mov    QWORD PTR [rbx],rdi
  01786: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0178f:    	mov    QWORD PTR [rsp-0x38],rcx
  01794:    	mov    rax,QWORD PTR [rbp-0x68]
  01798:    	mov    QWORD PTR [rsp-0x38],rax
  0179d: 00 	mov    rdi,0x0
  017a4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  017ad: 07 	movabs rax,0x100070000003d
  017b7:    	mov    QWORD PTR [rsp-0x28],rax
  017bc: 78 	movabs r13,0x55788def86a0
  017c6:    	call   0xffff9636
  017cb:    	lea    rdi,[rbp-0x8]
  017cf:    	mov    QWORD PTR [rbx],rdi
  017d2:    	movq   xmm2,QWORD PTR [rsp]
  017d7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  017dd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  017e3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  017e9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  017ef:    	movq   xmm7,QWORD PTR [rsp+0x28]
  017f5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  017fc: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01803:    	add    rsp,0x40
  01807: 78 	movabs r13,0x55788dee8d50
  01811:    	test   rax,rax
  01814:    	je     0xffff6398
  0181a:    	mov    QWORD PTR [rbp-0x70],rax
:00108 _ = %2.call n=(%9; 1)                [Isect]
:00109 
  0181e:    	mov    rdi,QWORD PTR [rbp-0x38]
  01822: 00 	test   rdi,0x7
  01829:    	jne    0x3b4ec
  0182f:    	cmp    DWORD PTR [rdi+0x4],0x2d
  01833:    	jne    0x3b4ec
  01839: 26 	cmp    DWORD PTR [rip+0xffffffffffff7531],0x26        # 0xffff8d71
  01840:    	jne    0x3b4ec
  01846:    	mov    esi,DWORD PTR [rip+0x1cd]        # 0x1a19
  0184c:    	cmp    esi,0xffffffff
  0184f:    	je     0x3b525
  01855:    	cmp    WORD PTR [rdi+0x2],0x3
  0185a:    	jne    0x1877
  01860:    	cmp    esi,0x6
  01863:    	jge    0x1877
  01869:    	mov    rax,QWORD PTR [rbp-0x70]
  0186d:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01872:    	jmp    0x1904
  01877:    	sub    rsp,0x40
  0187b:    	movq   QWORD PTR [rsp],xmm2
  01880:    	movq   QWORD PTR [rsp+0x8],xmm3
  01886:    	movq   QWORD PTR [rsp+0x10],xmm4
  0188c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01892:    	movq   QWORD PTR [rsp+0x20],xmm6
  01898:    	movq   QWORD PTR [rsp+0x28],xmm7
  0189e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  018a5: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  018ac:    	mov    rdx,QWORD PTR [rbp-0x70]
  018b0: 78 	movabs rax,0x55788c73bdd0
  018ba:    	call   rax
  018bc:    	movq   xmm2,QWORD PTR [rsp]
  018c1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  018c7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  018cd:    	movq   xmm5,QWORD PTR [rsp+0x18]
  018d3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  018d9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  018df: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  018e6: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  018ed:    	add    rsp,0x40
  018f1: 78 	movabs r13,0x55788dee8d80
  018fb:    	test   rax,rax
  018fe:    	je     0xffff6398
:00111 br =>:00112
  01904:    	jmp    0x3b686
:00112 br =>:00113
  01909:    	jmp    0x3b725
:00113 %9 = nil
  0190e: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00114 ret %9
  01916:    	mov    rax,QWORD PTR [rbp-0x70]
  0191a:    	leave  
  0191b:    	ret    
==> start whole compile: <unnamed> FuncId(73) self_class:Scene start:[00000] bytecode:0x55788dee0f70
<== finished compile. elapsed:143.9µs
offset:Pos(46784) code: 8829 bytes  data: 411 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xb0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d:    	mov    rdi,QWORD PTR [rbp-0x28]
  00061: 00 	test   rdi,0x7
  00068:    	jne    0x39d3b
  0006e:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00072:    	jne    0x39d3b
:00000 %13 = %0.call rand()                 [Scene]
:00001 
  00078:    	mov    rdi,QWORD PTR [rbp-0x28]
  0007c: 26 	cmp    DWORD PTR [rip+0xffffffffffff72d1],0x26        # 0xffff7354
  00083:    	jne    0x39d4a
  00089: 00 	mov    r9,0x0
  00090:    	mov    rdx,rdi
  00093:    	mov    rax,QWORD PTR [rbx]
  00096:    	lea    rdi,[rsp-0x18]
  0009b:    	mov    QWORD PTR [rdi],rax
  0009e:    	mov    QWORD PTR [rbx],rdi
  000a1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000aa:    	mov    QWORD PTR [rsp-0x38],rcx
  000af: ff 	lea    rcx,[rbp-0x98]
  000b6: 00 	mov    r8,0x0
  000bd:    	call   0x39d59
  000c2:    	lea    rdi,[rbp-0x8]
  000c6:    	mov    QWORD PTR [rbx],rdi
  000c9: 78 	movabs r13,0x55788dee0f90
  000d3:    	test   rax,rax
  000d6:    	je     0xffff497b
  000dc: ff 	mov    QWORD PTR [rbp-0x90],rax
:00003 %2 = %13
  000e3: ff 	mov    rax,QWORD PTR [rbp-0x90]
  000ea:    	mov    QWORD PTR [rbp-0x38],rax
:00004 %13 = literal[2.0]
  000ee: 00 	movq   xmm2,QWORD PTR [rip+0x218a]        # 0x2280
:00005 %14 = literal[3.14159265]
  000f6: 00 	movq   xmm3,QWORD PTR [rip+0x2192]        # 0x2290
:00006 %13 = %13 * %14                      [Float][Float]
  000fe:    	mulsd  xmm2,xmm3
:00007 %14 = %0.call rand()                 [Scene]
:00008 
  00102:    	mov    rdi,QWORD PTR [rbp-0x28]
  00106: 26 	cmp    DWORD PTR [rip+0xffffffffffff7247],0x26        # 0xffff7354
  0010d:    	jne    0x39d8b
  00113: 00 	mov    r9,0x0
  0011a:    	sub    rsp,0x10
  0011e:    	movq   QWORD PTR [rsp],xmm2
  00123:    	mov    rdx,rdi
  00126:    	mov    rax,QWORD PTR [rbx]
  00129:    	lea    rdi,[rsp-0x18]
  0012e:    	mov    QWORD PTR [rdi],rax
  00131:    	mov    QWORD PTR [rbx],rdi
  00134: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0013d:    	mov    QWORD PTR [rsp-0x38],rcx
  00142: ff 	lea    rcx,[rbp-0xa0]
  00149: 00 	mov    r8,0x0
  00150:    	call   0x39daa
  00155:    	lea    rdi,[rbp-0x8]
  00159:    	mov    QWORD PTR [rbx],rdi
  0015c:    	movq   xmm2,QWORD PTR [rsp]
  00161:    	add    rsp,0x10
  00165: 78 	movabs r13,0x55788dee1000
  0016f:    	test   rax,rax
  00172:    	je     0xffff497b
  00178: ff 	mov    QWORD PTR [rbp-0x98],rax
:00010 %3 = %13 * %14                       [Float][Float]
  0017f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00186: 00 	test   rdi,0x1
  0018d:    	jne    0x39ddc
  00193: 00 	test   rdi,0x2
  0019a:    	je     0x1d6
  001a0:    	xorps  xmm3,xmm3
  001a3: 00 	movabs rax,0x8000000000000002
  001ad:    	cmp    rdi,rax
  001b0:    	je     0x1e8
  001b6:    	mov    rax,rdi
  001b9:    	sar    rax,0x3f
  001bd:    	add    rax,0x2
  001c1:    	and    rdi,0xfffffffffffffffc
  001c5:    	or     rdi,rax
  001c8:    	rol    rdi,0x3d
  001cc:    	movq   xmm3,rdi
  001d1:    	jmp    0x1e8
  001d6:    	call   0xffff49b4
  001db:    	test   rax,rax
  001de:    	je     0x39ddc
  001e4:    	movq   xmm3,xmm0
  001e8:    	movq   xmm4,xmm2
  001ec:    	mulsd  xmm4,xmm3
:00011 %14 = const[Math]                    [Math]
  001f0: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff7169]        # 0xffff7360
  001f7: 00 	cmp    rax,QWORD PTR [rip+0x20b2]        # 0x22b0
  001fe:    	jne    0x39dfb
  00204: 00 	mov    rax,QWORD PTR [rip+0x2095]        # 0x22a0
  0020b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %15 = %3
:00013 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
:00014 
  00212: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00219: 00 	test   rdi,0x7
  00220:    	jne    0x39e5f
  00226:    	cmp    DWORD PTR [rdi+0x4],0x20
  0022a:    	jne    0x39e5f
  00230: 26 	cmp    DWORD PTR [rip+0xffffffffffff711d],0x26        # 0xffff7354
  00237:    	jne    0x39e5f
  0023d:    	sub    rsp,0x10
  00241:    	movq   QWORD PTR [rsp],xmm2
  00246:    	movq   QWORD PTR [rsp+0x8],xmm4
  0024c:    	movq   xmm0,xmm4
  00250: 78 	movabs rax,0x55788c77cfd0
  0025a:    	call   rax
  0025c:    	movq   xmm2,QWORD PTR [rsp]
  00261:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00267:    	add    rsp,0x10
  0026b:    	movq   xmm2,xmm0
:00016 %15 = const[Math]                    [Math]
  0026f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff70ea]        # 0xffff7360
  00276: 00 	cmp    rax,QWORD PTR [rip+0x2053]        # 0x22d0
  0027d:    	jne    0x39e82
  00283: 00 	mov    rax,QWORD PTR [rip+0x2036]        # 0x22c0
  0028a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00017 %16 = literal[1.0]
  00291: 00 	movq   xmm3,QWORD PTR [rip+0x2047]        # 0x22e0
:00018 %16 = %16 - %2                       [Float][Float]
  00299:    	mov    rdi,QWORD PTR [rbp-0x38]
  0029d: 00 	test   rdi,0x1
  002a4:    	jne    0x39ee6
  002aa: 00 	test   rdi,0x2
  002b1:    	je     0x2ed
  002b7:    	xorps  xmm5,xmm5
  002ba: 00 	movabs rax,0x8000000000000002
  002c4:    	cmp    rdi,rax
  002c7:    	je     0x2ff
  002cd:    	mov    rax,rdi
  002d0:    	sar    rax,0x3f
  002d4:    	add    rax,0x2
  002d8:    	and    rdi,0xfffffffffffffffc
  002dc:    	or     rdi,rax
  002df:    	rol    rdi,0x3d
  002e3:    	movq   xmm5,rdi
  002e8:    	jmp    0x2ff
  002ed:    	call   0xffff49b4
  002f2:    	test   rax,rax
  002f5:    	je     0x39ee6
  002fb:    	movq   xmm5,xmm0
  002ff:    	subsd  xmm3,xmm5
:00019 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
:00020 
  00303: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0030a: 00 	test   rdi,0x7
  00311:    	jne    0x39f22
  00317:    	cmp    DWORD PTR [rdi+0x4],0x20
  0031b:    	jne    0x39f22
  00321: 26 	cmp    DWORD PTR [rip+0xffffffffffff702c],0x26        # 0xffff7354
  00328:    	jne    0x39f22
  0032e:    	sqrtsd xmm6,xmm3
:00022 %4 = %13 * %14                       [Float][Float]
  00332:    	movq   xmm7,xmm2
  00336:    	mulsd  xmm7,xmm6
:00023 %14 = const[Math]                    [Math]
  0033a: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff701f]        # 0xffff7360
  00341: 00 	cmp    rax,QWORD PTR [rip+0x1fb8]        # 0x2300
  00348:    	jne    0x39f5e
  0034e: 00 	mov    rax,QWORD PTR [rip+0x1f9b]        # 0x22f0
  00355: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %15 = %3
:00025 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
:00026 
  0035c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00363: 00 	test   rdi,0x7
  0036a:    	jne    0x39fe6
  00370:    	cmp    DWORD PTR [rdi+0x4],0x20
  00374:    	jne    0x39fe6
  0037a: 26 	cmp    DWORD PTR [rip+0xffffffffffff6fd3],0x26        # 0xffff7354
  00381:    	jne    0x39fe6
  00387:    	sub    rsp,0x30
  0038b:    	movq   QWORD PTR [rsp],xmm2
  00390:    	movq   QWORD PTR [rsp+0x8],xmm3
  00396:    	movq   QWORD PTR [rsp+0x10],xmm4
  0039c:    	movq   QWORD PTR [rsp+0x18],xmm5
  003a2:    	movq   QWORD PTR [rsp+0x20],xmm7
  003a8:    	movq   xmm0,xmm4
  003ac: 78 	movabs rax,0x55788c77cfe0
  003b6:    	call   rax
  003b8:    	movq   xmm2,QWORD PTR [rsp]
  003bd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003c3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003c9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  003cf:    	movq   xmm7,QWORD PTR [rsp+0x20]
  003d5:    	add    rsp,0x30
  003d9:    	movq   xmm2,xmm0
:00028 %15 = const[Math]                    [Math]
  003dd: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff6f7c]        # 0xffff7360
  003e4: 00 	cmp    rax,QWORD PTR [rip+0x1f35]        # 0x2320
  003eb:    	jne    0x3a026
  003f1: 00 	mov    rax,QWORD PTR [rip+0x1f18]        # 0x2310
  003f8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00029 %16 = literal[1.0]
  003ff: 00 	movq   xmm3,QWORD PTR [rip+0x1f29]        # 0x2330
:00030 %16 = %16 - %2                       [Float][Float]
  00407:    	subsd  xmm3,xmm5
:00031 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
:00032 
  0040b: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00412: 00 	test   rdi,0x7
  00419:    	jne    0x3a0ae
  0041f:    	cmp    DWORD PTR [rdi+0x4],0x20
  00423:    	jne    0x3a0ae
  00429: 26 	cmp    DWORD PTR [rip+0xffffffffffff6f24],0x26        # 0xffff7354
  00430:    	jne    0x3a0ae
  00436:    	sqrtsd xmm6,xmm3
:00034 %5 = %13 * %14                       [Float][Float]
  0043a:    	movq   xmm8,xmm2
  0043f:    	mulsd  xmm8,xmm6
:00035 %13 = const[Math]                    [Math]
  00444: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff6f15]        # 0xffff7360
  0044b: 00 	cmp    rax,QWORD PTR [rip+0x1efe]        # 0x2350
  00452:    	jne    0x3a0f7
  00458: 00 	mov    rax,QWORD PTR [rip+0x1ee1]        # 0x2340
  0045f: ff 	mov    QWORD PTR [rbp-0x90],rax
:00036 %14 = %2
:00037 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
:00038 
  00466: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0046d: 00 	test   rdi,0x7
  00474:    	jne    0x3a18d
  0047a:    	cmp    DWORD PTR [rdi+0x4],0x20
  0047e:    	jne    0x3a18d
  00484: 26 	cmp    DWORD PTR [rip+0xffffffffffff6ec9],0x26        # 0xffff7354
  0048b:    	jne    0x3a18d
  00491:    	sqrtsd xmm2,xmm5
:00040 %14 = dynvar(2, %2)
  00495:    	mov    rax,QWORD PTR [rbp-0x10]
  00499:    	mov    rax,QWORD PTR [rax]
  0049c:    	mov    rax,QWORD PTR [rax-0x28]
  004a0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00041 %15 = 0: i32
  004a7: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00042 %14 = %14.[%15]
  004b2:    	sub    rsp,0x30
  004b6:    	movq   QWORD PTR [rsp],xmm2
  004bb:    	movq   QWORD PTR [rsp+0x8],xmm3
  004c1:    	movq   QWORD PTR [rsp+0x10],xmm4
  004c7:    	movq   QWORD PTR [rsp+0x18],xmm5
  004cd:    	movq   QWORD PTR [rsp+0x20],xmm7
  004d3: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  004da: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  004e1: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  004e8:    	mov    rdi,rbx
  004eb:    	mov    rsi,r12
  004ee: 78 	movabs rax,0x55788c797be0
  004f8:    	call   rax
  004fa:    	movq   xmm2,QWORD PTR [rsp]
  004ff:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00505:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0050b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00511:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00517: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0051e:    	add    rsp,0x30
  00522: 78 	movabs r13,0x55788dee1220
  0052c:    	test   rax,rax
  0052f:    	je     0xffff497b
  00535: ff 	mov    QWORD PTR [rbp-0x98],rax
:00043 %13 = %14.call x()                   [Vec]
:00044 
  0053c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00543: 00 	test   rdi,0x7
  0054a:    	jne    0x3a1e4
  00550:    	cmp    DWORD PTR [rdi+0x4],0x25
  00554:    	jne    0x3a1e4
  0055a: 26 	cmp    DWORD PTR [rip+0xffffffffffff6df3],0x26        # 0xffff7354
  00561:    	jne    0x3a1e4
  00567:    	mov    esi,DWORD PTR [rip+0x1def]        # 0x235c
  0056d:    	cmp    esi,0xffffffff
  00570:    	je     0x3a238
  00576:    	cmp    WORD PTR [rdi+0x2],0x3
  0057b:    	jne    0x594
  00581:    	cmp    esi,0x6
  00584:    	jge    0x594
  0058a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0058f:    	jmp    0x5f0
  00594:    	sub    rsp,0x30
  00598:    	movq   QWORD PTR [rsp],xmm2
  0059d:    	movq   QWORD PTR [rsp+0x8],xmm3
  005a3:    	movq   QWORD PTR [rsp+0x10],xmm4
  005a9:    	movq   QWORD PTR [rsp+0x18],xmm5
  005af:    	movq   QWORD PTR [rsp+0x20],xmm7
  005b5: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  005bc: 78 	movabs rax,0x55788c73bb50
  005c6:    	call   rax
  005c8:    	movq   xmm2,QWORD PTR [rsp]
  005cd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005d3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005d9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005df:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005e5: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005ec:    	add    rsp,0x30
  005f0: ff 	mov    QWORD PTR [rbp-0x90],rax
:00046 %13 = %4 * %13                       [Float][Float]
  005f7: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  005fe: 00 	test   rdi,0x1
  00605:    	jne    0x3a2b1
  0060b: 00 	test   rdi,0x2
  00612:    	je     0x64e
  00618:    	xorps  xmm6,xmm6
  0061b: 00 	movabs rax,0x8000000000000002
  00625:    	cmp    rdi,rax
  00628:    	je     0x660
  0062e:    	mov    rax,rdi
  00631:    	sar    rax,0x3f
  00635:    	add    rax,0x2
  00639:    	and    rdi,0xfffffffffffffffc
  0063d:    	or     rdi,rax
  00640:    	rol    rdi,0x3d
  00644:    	movq   xmm6,rdi
  00649:    	jmp    0x660
  0064e:    	call   0xffff49b4
  00653:    	test   rax,rax
  00656:    	je     0x3a2b1
  0065c:    	movq   xmm6,xmm0
  00660:    	mulsd  xmm6,xmm7
:00047 %15 = dynvar(2, %2)
  00664:    	mov    rax,QWORD PTR [rbp-0x10]
  00668:    	mov    rax,QWORD PTR [rax]
  0066b:    	mov    rax,QWORD PTR [rax-0x28]
  0066f: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00048 %16 = 1: i32
  00676: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00049 %15 = %15.[%16]
  00681:    	sub    rsp,0x30
  00685:    	movq   QWORD PTR [rsp],xmm2
  0068a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00690:    	movq   QWORD PTR [rsp+0x10],xmm5
  00696:    	movq   QWORD PTR [rsp+0x18],xmm6
  0069c:    	movq   QWORD PTR [rsp+0x20],xmm7
  006a2: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  006a9: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  006b0: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  006b7:    	mov    rdi,rbx
  006ba:    	mov    rsi,r12
  006bd: 78 	movabs rax,0x55788c797be0
  006c7:    	call   rax
  006c9:    	movq   xmm2,QWORD PTR [rsp]
  006ce:    	movq   xmm4,QWORD PTR [rsp+0x8]
  006d4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006da:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006e0:    	movq   xmm7,QWORD PTR [rsp+0x20]
  006e6: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  006ed:    	add    rsp,0x30
  006f1: 78 	movabs r13,0x55788dee1290
  006fb:    	test   rax,rax
  006fe:    	je     0xffff497b
  00704: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00050 %14 = %15.call x()                   [Vec]
:00051 
  0070b: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00712: 00 	test   rdi,0x7
  00719:    	jne    0x3a305
  0071f:    	cmp    DWORD PTR [rdi+0x4],0x25
  00723:    	jne    0x3a305
  00729: 26 	cmp    DWORD PTR [rip+0xffffffffffff6c24],0x26        # 0xffff7354
  00730:    	jne    0x3a305
  00736:    	mov    esi,DWORD PTR [rip+0x1c28]        # 0x2364
  0073c:    	cmp    esi,0xffffffff
  0073f:    	je     0x3a359
  00745:    	cmp    WORD PTR [rdi+0x2],0x3
  0074a:    	jne    0x763
  00750:    	cmp    esi,0x6
  00753:    	jge    0x763
  00759:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0075e:    	jmp    0x7bf
  00763:    	sub    rsp,0x30
  00767:    	movq   QWORD PTR [rsp],xmm2
  0076c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00772:    	movq   QWORD PTR [rsp+0x10],xmm5
  00778:    	movq   QWORD PTR [rsp+0x18],xmm6
  0077e:    	movq   QWORD PTR [rsp+0x20],xmm7
  00784: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0078b: 78 	movabs rax,0x55788c73bb50
  00795:    	call   rax
  00797:    	movq   xmm2,QWORD PTR [rsp]
  0079c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007a2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007a8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007ae:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007b4: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  007bb:    	add    rsp,0x30
  007bf: ff 	mov    QWORD PTR [rbp-0x98],rax
:00053 %14 = %5 * %14                       [Float][Float]
  007c6: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  007cd: 00 	test   rdi,0x1
  007d4:    	jne    0x3a3d2
  007da: 00 	test   rdi,0x2
  007e1:    	je     0x81d
  007e7:    	xorps  xmm3,xmm3
  007ea: 00 	movabs rax,0x8000000000000002
  007f4:    	cmp    rdi,rax
  007f7:    	je     0x82f
  007fd:    	mov    rax,rdi
  00800:    	sar    rax,0x3f
  00804:    	add    rax,0x2
  00808:    	and    rdi,0xfffffffffffffffc
  0080c:    	or     rdi,rax
  0080f:    	rol    rdi,0x3d
  00813:    	movq   xmm3,rdi
  00818:    	jmp    0x82f
  0081d:    	call   0xffff49b4
  00822:    	test   rax,rax
  00825:    	je     0x3a3d2
  0082b:    	movq   xmm3,xmm0
  0082f:    	mulsd  xmm3,xmm8
:00054 %13 = %13 + %14                      [Float][Float]
  00834:    	addsd  xmm6,xmm3
:00055 %15 = dynvar(2, %2)
  00838:    	mov    rax,QWORD PTR [rbp-0x10]
  0083c:    	mov    rax,QWORD PTR [rax]
  0083f:    	mov    rax,QWORD PTR [rax-0x28]
  00843: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00056 %16 = 2: i32
  0084a: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00057 %15 = %15.[%16]
  00855:    	sub    rsp,0x40
  00859:    	movq   QWORD PTR [rsp],xmm2
  0085e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00864:    	movq   QWORD PTR [rsp+0x10],xmm4
  0086a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00870:    	movq   QWORD PTR [rsp+0x20],xmm6
  00876:    	movq   QWORD PTR [rsp+0x28],xmm7
  0087c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00883: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  0088a: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00891:    	mov    rdi,rbx
  00894:    	mov    rsi,r12
  00897: 78 	movabs rax,0x55788c797be0
  008a1:    	call   rax
  008a3:    	movq   xmm2,QWORD PTR [rsp]
  008a8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008ae:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008b4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008ba:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008c0:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008c6: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008cd:    	add    rsp,0x40
  008d1: 78 	movabs r13,0x55788dee1310
  008db:    	test   rax,rax
  008de:    	je     0xffff497b
  008e4: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00058 %14 = %15.call x()                   [Vec]
:00059 
  008eb: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  008f2: 00 	test   rdi,0x7
  008f9:    	jne    0x3a426
  008ff:    	cmp    DWORD PTR [rdi+0x4],0x25
  00903:    	jne    0x3a426
  00909: 26 	cmp    DWORD PTR [rip+0xffffffffffff6a44],0x26        # 0xffff7354
  00910:    	jne    0x3a426
  00916:    	mov    esi,DWORD PTR [rip+0x1a50]        # 0x236c
  0091c:    	cmp    esi,0xffffffff
  0091f:    	je     0x3a47a
  00925:    	cmp    WORD PTR [rdi+0x2],0x3
  0092a:    	jne    0x943
  00930:    	cmp    esi,0x6
  00933:    	jge    0x943
  00939:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0093e:    	jmp    0x99f
  00943:    	sub    rsp,0x30
  00947:    	movq   QWORD PTR [rsp],xmm2
  0094c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00952:    	movq   QWORD PTR [rsp+0x10],xmm5
  00958:    	movq   QWORD PTR [rsp+0x18],xmm6
  0095e:    	movq   QWORD PTR [rsp+0x20],xmm7
  00964: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0096b: 78 	movabs rax,0x55788c73bb50
  00975:    	call   rax
  00977:    	movq   xmm2,QWORD PTR [rsp]
  0097c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00982:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00988:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0098e:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00994: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0099b:    	add    rsp,0x30
  0099f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00061 %14 = %6 * %14                       [Float][Float]
  009a6: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  009ad: 00 	test   rdi,0x1
  009b4:    	jne    0x3a4f3
  009ba: 00 	test   rdi,0x2
  009c1:    	je     0x9fd
  009c7:    	xorps  xmm3,xmm3
  009ca: 00 	movabs rax,0x8000000000000002
  009d4:    	cmp    rdi,rax
  009d7:    	je     0xa0f
  009dd:    	mov    rax,rdi
  009e0:    	sar    rax,0x3f
  009e4:    	add    rax,0x2
  009e8:    	and    rdi,0xfffffffffffffffc
  009ec:    	or     rdi,rax
  009ef:    	rol    rdi,0x3d
  009f3:    	movq   xmm3,rdi
  009f8:    	jmp    0xa0f
  009fd:    	call   0xffff49b4
  00a02:    	test   rax,rax
  00a05:    	je     0x3a4f3
  00a0b:    	movq   xmm3,xmm0
  00a0f:    	mulsd  xmm3,xmm2
:00062 %7 = %13 + %14                       [Float][Float]
  00a13:    	movq   xmm9,xmm6
  00a18:    	addsd  xmm9,xmm3
:00063 %14 = dynvar(2, %2)
  00a1d:    	mov    rax,QWORD PTR [rbp-0x10]
  00a21:    	mov    rax,QWORD PTR [rax]
  00a24:    	mov    rax,QWORD PTR [rax-0x28]
  00a28: ff 	mov    QWORD PTR [rbp-0x98],rax
:00064 %15 = 0: i32
  00a2f: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00065 %14 = %14.[%15]
  00a3a:    	sub    rsp,0x40
  00a3e:    	movq   QWORD PTR [rsp],xmm2
  00a43:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a49:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a4f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a55:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a5b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00a62: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00a69: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00a70: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00a77:    	mov    rdi,rbx
  00a7a:    	mov    rsi,r12
  00a7d: 78 	movabs rax,0x55788c797be0
  00a87:    	call   rax
  00a89:    	movq   xmm2,QWORD PTR [rsp]
  00a8e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a94:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a9a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00aa0:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00aa6: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00aad: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00ab4:    	add    rsp,0x40
  00ab8: 78 	movabs r13,0x55788dee1390
  00ac2:    	test   rax,rax
  00ac5:    	je     0xffff497b
  00acb: ff 	mov    QWORD PTR [rbp-0x98],rax
:00066 %13 = %14.call y()                   [Vec]
:00067 
  00ad2: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00ad9: 00 	test   rdi,0x7
  00ae0:    	jne    0x3a547
  00ae6:    	cmp    DWORD PTR [rdi+0x4],0x25
  00aea:    	jne    0x3a547
  00af0: 26 	cmp    DWORD PTR [rip+0xffffffffffff685d],0x26        # 0xffff7354
  00af7:    	jne    0x3a547
  00afd:    	mov    esi,DWORD PTR [rip+0x1871]        # 0x2374
  00b03:    	cmp    esi,0xffffffff
  00b06:    	je     0x3a599
  00b0c:    	cmp    WORD PTR [rdi+0x2],0x3
  00b11:    	jne    0xb2a
  00b17:    	cmp    esi,0x6
  00b1a:    	jge    0xb2a
  00b20:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b25:    	jmp    0xb88
  00b2a:    	sub    rsp,0x30
  00b2e:    	movq   QWORD PTR [rsp],xmm2
  00b33:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b39:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b3f:    	movq   QWORD PTR [rsp+0x18],xmm7
  00b45: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00b4c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00b53: 78 	movabs rax,0x55788c73bb50
  00b5d:    	call   rax
  00b5f:    	movq   xmm2,QWORD PTR [rsp]
  00b64:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b6a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b70:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00b76: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00b7d: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00b84:    	add    rsp,0x30
  00b88: ff 	mov    QWORD PTR [rbp-0x90],rax
:00069 %13 = %4 * %13                       [Float][Float]
  00b8f: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00b96: 00 	test   rdi,0x1
  00b9d:    	jne    0x3a614
  00ba3: 00 	test   rdi,0x2
  00baa:    	je     0xbe6
  00bb0:    	xorps  xmm3,xmm3
  00bb3: 00 	movabs rax,0x8000000000000002
  00bbd:    	cmp    rdi,rax
  00bc0:    	je     0xbf8
  00bc6:    	mov    rax,rdi
  00bc9:    	sar    rax,0x3f
  00bcd:    	add    rax,0x2
  00bd1:    	and    rdi,0xfffffffffffffffc
  00bd5:    	or     rdi,rax
  00bd8:    	rol    rdi,0x3d
  00bdc:    	movq   xmm3,rdi
  00be1:    	jmp    0xbf8
  00be6:    	call   0xffff49b4
  00beb:    	test   rax,rax
  00bee:    	je     0x3a614
  00bf4:    	movq   xmm3,xmm0
  00bf8:    	mulsd  xmm3,xmm7
:00070 %15 = dynvar(2, %2)
  00bfc:    	mov    rax,QWORD PTR [rbp-0x10]
  00c00:    	mov    rax,QWORD PTR [rax]
  00c03:    	mov    rax,QWORD PTR [rax-0x28]
  00c07: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00071 %16 = 1: i32
  00c0e: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00072 %15 = %15.[%16]
  00c19:    	sub    rsp,0x40
  00c1d:    	movq   QWORD PTR [rsp],xmm2
  00c22:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c28:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c2e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c34:    	movq   QWORD PTR [rsp+0x20],xmm7
  00c3a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00c41: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00c48: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00c4f: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00c56:    	mov    rdi,rbx
  00c59:    	mov    rsi,r12
  00c5c: 78 	movabs rax,0x55788c797be0
  00c66:    	call   rax
  00c68:    	movq   xmm2,QWORD PTR [rsp]
  00c6d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c73:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c79:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c7f:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00c85: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00c8c: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00c93:    	add    rsp,0x40
  00c97: 78 	movabs r13,0x55788dee1400
  00ca1:    	test   rax,rax
  00ca4:    	je     0xffff497b
  00caa: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00073 %14 = %15.call y()                   [Vec]
:00074 
  00cb1: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00cb8: 00 	test   rdi,0x7
  00cbf:    	jne    0x3a666
  00cc5:    	cmp    DWORD PTR [rdi+0x4],0x25
  00cc9:    	jne    0x3a666
  00ccf: 26 	cmp    DWORD PTR [rip+0xffffffffffff667e],0x26        # 0xffff7354
  00cd6:    	jne    0x3a666
  00cdc:    	mov    esi,DWORD PTR [rip+0x169a]        # 0x237c
  00ce2:    	cmp    esi,0xffffffff
  00ce5:    	je     0x3a6c8
  00ceb:    	cmp    WORD PTR [rdi+0x2],0x3
  00cf0:    	jne    0xd09
  00cf6:    	cmp    esi,0x6
  00cf9:    	jge    0xd09
  00cff:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d04:    	jmp    0xd73
  00d09:    	sub    rsp,0x40
  00d0d:    	movq   QWORD PTR [rsp],xmm2
  00d12:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d18:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d1e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d24:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d2a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00d31: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d38: 78 	movabs rax,0x55788c73bb50
  00d42:    	call   rax
  00d44:    	movq   xmm2,QWORD PTR [rsp]
  00d49:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d4f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d55:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d5b:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d61: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00d68: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00d6f:    	add    rsp,0x40
  00d73: ff 	mov    QWORD PTR [rbp-0x98],rax
:00076 %14 = %5 * %14                       [Float][Float]
  00d7a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00d81: 00 	test   rdi,0x1
  00d88:    	jne    0x3a74f
  00d8e: 00 	test   rdi,0x2
  00d95:    	je     0xdd1
  00d9b:    	xorps  xmm6,xmm6
  00d9e: 00 	movabs rax,0x8000000000000002
  00da8:    	cmp    rdi,rax
  00dab:    	je     0xde3
  00db1:    	mov    rax,rdi
  00db4:    	sar    rax,0x3f
  00db8:    	add    rax,0x2
  00dbc:    	and    rdi,0xfffffffffffffffc
  00dc0:    	or     rdi,rax
  00dc3:    	rol    rdi,0x3d
  00dc7:    	movq   xmm6,rdi
  00dcc:    	jmp    0xde3
  00dd1:    	call   0xffff49b4
  00dd6:    	test   rax,rax
  00dd9:    	je     0x3a74f
  00ddf:    	movq   xmm6,xmm0
  00de3:    	mulsd  xmm6,xmm8
:00077 %13 = %13 + %14                      [Float][Float]
  00de8:    	addsd  xmm3,xmm6
:00078 %15 = dynvar(2, %2)
  00dec:    	mov    rax,QWORD PTR [rbp-0x10]
  00df0:    	mov    rax,QWORD PTR [rax]
  00df3:    	mov    rax,QWORD PTR [rax-0x28]
  00df7: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00079 %16 = 2: i32
  00dfe: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00080 %15 = %15.[%16]
  00e09:    	sub    rsp,0x40
  00e0d:    	movq   QWORD PTR [rsp],xmm2
  00e12:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e18:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e1e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e24:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e2a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e30: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e37: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e3e: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00e45: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00e4c:    	mov    rdi,rbx
  00e4f:    	mov    rsi,r12
  00e52: 78 	movabs rax,0x55788c797be0
  00e5c:    	call   rax
  00e5e:    	movq   xmm2,QWORD PTR [rsp]
  00e63:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e69:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e6f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e75:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e7b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e81: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00e88: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00e8f:    	add    rsp,0x40
  00e93: 78 	movabs r13,0x55788dee1480
  00e9d:    	test   rax,rax
  00ea0:    	je     0xffff497b
  00ea6: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00081 %14 = %15.call y()                   [Vec]
:00082 
  00ead: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00eb4: 00 	test   rdi,0x7
  00ebb:    	jne    0x3a7b1
  00ec1:    	cmp    DWORD PTR [rdi+0x4],0x25
  00ec5:    	jne    0x3a7b1
  00ecb: 26 	cmp    DWORD PTR [rip+0xffffffffffff6482],0x26        # 0xffff7354
  00ed2:    	jne    0x3a7b1
  00ed8:    	mov    esi,DWORD PTR [rip+0x14a6]        # 0x2384
  00ede:    	cmp    esi,0xffffffff
  00ee1:    	je     0x3a813
  00ee7:    	cmp    WORD PTR [rdi+0x2],0x3
  00eec:    	jne    0xf05
  00ef2:    	cmp    esi,0x6
  00ef5:    	jge    0xf05
  00efb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f00:    	jmp    0xf6f
  00f05:    	sub    rsp,0x40
  00f09:    	movq   QWORD PTR [rsp],xmm2
  00f0e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f14:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f1a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f20:    	movq   QWORD PTR [rsp+0x20],xmm7
  00f26: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00f2d: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00f34: 78 	movabs rax,0x55788c73bb50
  00f3e:    	call   rax
  00f40:    	movq   xmm2,QWORD PTR [rsp]
  00f45:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f4b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f51:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f57:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00f5d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00f64: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00f6b:    	add    rsp,0x40
  00f6f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00084 %14 = %6 * %14                       [Float][Float]
  00f76: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00f7d: 00 	test   rdi,0x1
  00f84:    	jne    0x3a89a
  00f8a: 00 	test   rdi,0x2
  00f91:    	je     0xfcd
  00f97:    	xorps  xmm6,xmm6
  00f9a: 00 	movabs rax,0x8000000000000002
  00fa4:    	cmp    rdi,rax
  00fa7:    	je     0xfdf
  00fad:    	mov    rax,rdi
  00fb0:    	sar    rax,0x3f
  00fb4:    	add    rax,0x2
  00fb8:    	and    rdi,0xfffffffffffffffc
  00fbc:    	or     rdi,rax
  00fbf:    	rol    rdi,0x3d
  00fc3:    	movq   xmm6,rdi
  00fc8:    	jmp    0xfdf
  00fcd:    	call   0xffff49b4
  00fd2:    	test   rax,rax
  00fd5:    	je     0x3a89a
  00fdb:    	movq   xmm6,xmm0
  00fdf:    	mulsd  xmm6,xmm2
:00085 %8 = %13 + %14                       [Float][Float]
  00fe3:    	movq   xmm10,xmm3
  00fe8:    	addsd  xmm10,xmm6
:00086 %14 = dynvar(2, %2)
  00fed:    	mov    rax,QWORD PTR [rbp-0x10]
  00ff1:    	mov    rax,QWORD PTR [rax]
  00ff4:    	mov    rax,QWORD PTR [rax-0x28]
  00ff8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00087 %15 = 0: i32
  00fff: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00088 %14 = %14.[%15]
  0100a:    	sub    rsp,0x40
  0100e:    	movq   QWORD PTR [rsp],xmm2
  01013:    	movq   QWORD PTR [rsp+0x8],xmm3
  01019:    	movq   QWORD PTR [rsp+0x10],xmm4
  0101f:    	movq   QWORD PTR [rsp+0x18],xmm5
  01025:    	movq   QWORD PTR [rsp+0x20],xmm7
  0102b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01032: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01039: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01040: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01047: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0104e:    	mov    rdi,rbx
  01051:    	mov    rsi,r12
  01054: 78 	movabs rax,0x55788c797be0
  0105e:    	call   rax
  01060:    	movq   xmm2,QWORD PTR [rsp]
  01065:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0106b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01071:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01077:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0107d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01084: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0108b: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01092:    	add    rsp,0x40
  01096: 78 	movabs r13,0x55788dee1500
  010a0:    	test   rax,rax
  010a3:    	je     0xffff497b
  010a9: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %13 = %14.call z()                   [Vec]
:00090 
  010b0: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  010b7: 00 	test   rdi,0x7
  010be:    	jne    0x3a8fc
  010c4:    	cmp    DWORD PTR [rdi+0x4],0x25
  010c8:    	jne    0x3a8fc
  010ce: 26 	cmp    DWORD PTR [rip+0xffffffffffff627f],0x26        # 0xffff7354
  010d5:    	jne    0x3a8fc
  010db:    	mov    esi,DWORD PTR [rip+0x12ab]        # 0x238c
  010e1:    	cmp    esi,0xffffffff
  010e4:    	je     0x3a95c
  010ea:    	cmp    WORD PTR [rdi+0x2],0x3
  010ef:    	jne    0x1108
  010f5:    	cmp    esi,0x6
  010f8:    	jge    0x1108
  010fe:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01103:    	jmp    0x1174
  01108:    	sub    rsp,0x40
  0110c:    	movq   QWORD PTR [rsp],xmm2
  01111:    	movq   QWORD PTR [rsp+0x8],xmm4
  01117:    	movq   QWORD PTR [rsp+0x10],xmm5
  0111d:    	movq   QWORD PTR [rsp+0x18],xmm7
  01123: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0112a: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01131: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01138: 78 	movabs rax,0x55788c73bb50
  01142:    	call   rax
  01144:    	movq   xmm2,QWORD PTR [rsp]
  01149:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0114f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01155:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0115b: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01162: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01169: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01170:    	add    rsp,0x40
  01174: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 %13 = %4 * %13                       [Float][Float]
  0117b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01182: 00 	test   rdi,0x1
  01189:    	jne    0x3a9e5
  0118f: 00 	test   rdi,0x2
  01196:    	je     0x11d2
  0119c:    	xorps  xmm3,xmm3
  0119f: 00 	movabs rax,0x8000000000000002
  011a9:    	cmp    rdi,rax
  011ac:    	je     0x11e4
  011b2:    	mov    rax,rdi
  011b5:    	sar    rax,0x3f
  011b9:    	add    rax,0x2
  011bd:    	and    rdi,0xfffffffffffffffc
  011c1:    	or     rdi,rax
  011c4:    	rol    rdi,0x3d
  011c8:    	movq   xmm3,rdi
  011cd:    	jmp    0x11e4
  011d2:    	call   0xffff49b4
  011d7:    	test   rax,rax
  011da:    	je     0x3a9e5
  011e0:    	movq   xmm3,xmm0
  011e4:    	mulsd  xmm3,xmm7
:00093 %15 = dynvar(2, %2)
  011e8:    	mov    rax,QWORD PTR [rbp-0x10]
  011ec:    	mov    rax,QWORD PTR [rax]
  011ef:    	mov    rax,QWORD PTR [rax-0x28]
  011f3: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00094 %16 = 1: i32
  011fa: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00095 %15 = %15.[%16]
  01205:    	sub    rsp,0x40
  01209:    	movq   QWORD PTR [rsp],xmm2
  0120e:    	movq   QWORD PTR [rsp+0x8],xmm3
  01214:    	movq   QWORD PTR [rsp+0x10],xmm4
  0121a:    	movq   QWORD PTR [rsp+0x18],xmm5
  01220:    	movq   QWORD PTR [rsp+0x20],xmm7
  01226: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0122d: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01234: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0123b: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01242: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  01249:    	mov    rdi,rbx
  0124c:    	mov    rsi,r12
  0124f: 78 	movabs rax,0x55788c797be0
  01259:    	call   rax
  0125b:    	movq   xmm2,QWORD PTR [rsp]
  01260:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01266:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0126c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01272:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01278: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0127f: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01286: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0128d:    	add    rsp,0x40
  01291: 78 	movabs r13,0x55788dee1570
  0129b:    	test   rax,rax
  0129e:    	je     0xffff497b
  012a4: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00096 %14 = %15.call z()                   [Vec]
:00097 
  012ab: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  012b2: 00 	test   rdi,0x7
  012b9:    	jne    0x3aa45
  012bf:    	cmp    DWORD PTR [rdi+0x4],0x25
  012c3:    	jne    0x3aa45
  012c9: 26 	cmp    DWORD PTR [rip+0xffffffffffff6084],0x26        # 0xffff7354
  012d0:    	jne    0x3aa45
  012d6:    	mov    esi,DWORD PTR [rip+0x10b8]        # 0x2394
  012dc:    	cmp    esi,0xffffffff
  012df:    	je     0x3aab5
  012e5:    	cmp    WORD PTR [rdi+0x2],0x3
  012ea:    	jne    0x1303
  012f0:    	cmp    esi,0x6
  012f3:    	jge    0x1303
  012f9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  012fe:    	jmp    0x137b
  01303:    	sub    rsp,0x40
  01307:    	movq   QWORD PTR [rsp],xmm2
  0130c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01312:    	movq   QWORD PTR [rsp+0x10],xmm4
  01318:    	movq   QWORD PTR [rsp+0x18],xmm5
  0131e:    	movq   QWORD PTR [rsp+0x20],xmm7
  01324: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0132b: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01332: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01339: 78 	movabs rax,0x55788c73bb50
  01343:    	call   rax
  01345:    	movq   xmm2,QWORD PTR [rsp]
  0134a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01350:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01356:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0135c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01362: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01369: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01370: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01377:    	add    rsp,0x40
  0137b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00099 %14 = %5 * %14                       [Float][Float]
  01382: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01389: 00 	test   rdi,0x1
  01390:    	jne    0x3ab4a
  01396: 00 	test   rdi,0x2
  0139d:    	je     0x13d9
  013a3:    	xorps  xmm6,xmm6
  013a6: 00 	movabs rax,0x8000000000000002
  013b0:    	cmp    rdi,rax
  013b3:    	je     0x13eb
  013b9:    	mov    rax,rdi
  013bc:    	sar    rax,0x3f
  013c0:    	add    rax,0x2
  013c4:    	and    rdi,0xfffffffffffffffc
  013c8:    	or     rdi,rax
  013cb:    	rol    rdi,0x3d
  013cf:    	movq   xmm6,rdi
  013d4:    	jmp    0x13eb
  013d9:    	call   0xffff49b4
  013de:    	test   rax,rax
  013e1:    	je     0x3ab4a
  013e7:    	movq   xmm6,xmm0
  013eb:    	mulsd  xmm6,xmm8
:00100 %13 = %13 + %14                      [Float][Float]
  013f0:    	addsd  xmm3,xmm6
:00101 %15 = dynvar(2, %2)
  013f4:    	mov    rax,QWORD PTR [rbp-0x10]
  013f8:    	mov    rax,QWORD PTR [rax]
  013fb:    	mov    rax,QWORD PTR [rax-0x28]
  013ff: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00102 %16 = 2: i32
  01406: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00103 %15 = %15.[%16]
  01411:    	sub    rsp,0x50
  01415:    	movq   QWORD PTR [rsp],xmm2
  0141a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01420:    	movq   QWORD PTR [rsp+0x10],xmm4
  01426:    	movq   QWORD PTR [rsp+0x18],xmm5
  0142c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01432:    	movq   QWORD PTR [rsp+0x28],xmm7
  01438: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0143f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01446: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0144d: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01454: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0145b:    	mov    rdi,rbx
  0145e:    	mov    rsi,r12
  01461: 78 	movabs rax,0x55788c797be0
  0146b:    	call   rax
  0146d:    	movq   xmm2,QWORD PTR [rsp]
  01472:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01478:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0147e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01484:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0148a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01490: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01497: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0149e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  014a5:    	add    rsp,0x50
  014a9: 78 	movabs r13,0x55788dee15f0
  014b3:    	test   rax,rax
  014b6:    	je     0xffff497b
  014bc: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00104 %14 = %15.call z()                   [Vec]
:00105 
  014c3: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  014ca: 00 	test   rdi,0x7
  014d1:    	jne    0x3abba
  014d7:    	cmp    DWORD PTR [rdi+0x4],0x25
  014db:    	jne    0x3abba
  014e1: 26 	cmp    DWORD PTR [rip+0xffffffffffff5e6c],0x26        # 0xffff7354
  014e8:    	jne    0x3abba
  014ee:    	mov    esi,DWORD PTR [rip+0xea8]        # 0x239c
  014f4:    	cmp    esi,0xffffffff
  014f7:    	je     0x3ac2a
  014fd:    	cmp    WORD PTR [rdi+0x2],0x3
  01502:    	jne    0x151b
  01508:    	cmp    esi,0x6
  0150b:    	jge    0x151b
  01511:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01516:    	jmp    0x1593
  0151b:    	sub    rsp,0x40
  0151f:    	movq   QWORD PTR [rsp],xmm2
  01524:    	movq   QWORD PTR [rsp+0x8],xmm3
  0152a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01530:    	movq   QWORD PTR [rsp+0x18],xmm5
  01536:    	movq   QWORD PTR [rsp+0x20],xmm7
  0153c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01543: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0154a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01551: 78 	movabs rax,0x55788c73bb50
  0155b:    	call   rax
  0155d:    	movq   xmm2,QWORD PTR [rsp]
  01562:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01568:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0156e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01574:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0157a: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01581: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01588: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0158f:    	add    rsp,0x40
  01593: ff 	mov    QWORD PTR [rbp-0x98],rax
:00107 %14 = %6 * %14                       [Float][Float]
  0159a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  015a1: 00 	test   rdi,0x1
  015a8:    	jne    0x3acbf
  015ae: 00 	test   rdi,0x2
  015b5:    	je     0x15f1
  015bb:    	xorps  xmm6,xmm6
  015be: 00 	movabs rax,0x8000000000000002
  015c8:    	cmp    rdi,rax
  015cb:    	je     0x1603
  015d1:    	mov    rax,rdi
  015d4:    	sar    rax,0x3f
  015d8:    	add    rax,0x2
  015dc:    	and    rdi,0xfffffffffffffffc
  015e0:    	or     rdi,rax
  015e3:    	rol    rdi,0x3d
  015e7:    	movq   xmm6,rdi
  015ec:    	jmp    0x1603
  015f1:    	call   0xffff49b4
  015f6:    	test   rax,rax
  015f9:    	je     0x3acbf
  015ff:    	movq   xmm6,xmm0
  01603:    	mulsd  xmm6,xmm2
:00108 %9 = %13 + %14                       [Float][Float]
  01607:    	movq   xmm11,xmm3
  0160c:    	addsd  xmm11,xmm6
:00109 %13 = const[Vec]                     [Vec]
  01611: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5d48]        # 0xffff7360
  01618: 00 	cmp    rax,QWORD PTR [rip+0xd91]        # 0x23b0
  0161f:    	jne    0x3ad2f
  01625: 00 	mov    rax,QWORD PTR [rip+0xd74]        # 0x23a0
  0162c: ff 	mov    QWORD PTR [rbp-0x90],rax
:00110 %14 = %7
:00111 %15 = %8
:00112 %16 = %9
:00113 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
:00114 
  01633:    	movq   xmm0,xmm9
  01638:    	call   0xffff4aa7
  0163d: ff 	mov    QWORD PTR [rbp-0x98],rax
  01644:    	movq   xmm0,xmm10
  01649:    	call   0xffff4aa7
  0164e: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01655:    	movq   xmm0,xmm11
  0165a:    	call   0xffff4aa7
  0165f: ff 	mov    QWORD PTR [rbp-0xa8],rax
  01666: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0166d: 00 	test   rdi,0x7
  01674:    	jne    0x3adef
  0167a:    	cmp    DWORD PTR [rdi+0x4],0x26
  0167e:    	jne    0x3adef
  01684: 26 	cmp    DWORD PTR [rip+0xffffffffffff5cc9],0x26        # 0xffff7354
  0168b:    	jne    0x3adef
  01691: 00 	mov    r9,0x0
  01698:    	sub    rsp,0x40
  0169c:    	movq   QWORD PTR [rsp],xmm2
  016a1:    	movq   QWORD PTR [rsp+0x8],xmm4
  016a7:    	movq   QWORD PTR [rsp+0x10],xmm5
  016ad:    	movq   QWORD PTR [rsp+0x18],xmm7
  016b3: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  016ba: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  016c1: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  016c8: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  016cf:    	mov    rdx,rdi
  016d2:    	mov    rax,QWORD PTR [rbx]
  016d5:    	lea    rdi,[rsp-0x18]
  016da:    	mov    QWORD PTR [rdi],rax
  016dd:    	mov    QWORD PTR [rbx],rdi
  016e0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016e9:    	mov    QWORD PTR [rsp-0x38],rcx
  016ee: ff 	lea    rcx,[rbp-0x98]
  016f5: 00 	mov    r8,0x3
  016fc:    	call   0x3ae5d
  01701:    	lea    rdi,[rbp-0x8]
  01705:    	mov    QWORD PTR [rbx],rdi
  01708:    	movq   xmm2,QWORD PTR [rsp]
  0170d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01713:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01719:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0171f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01726: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0172d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01734: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0173b:    	add    rsp,0x40
  0173f: 78 	movabs r13,0x55788dee16a0
  01749:    	test   rax,rax
  0174c:    	je     0xffff497b
  01752:    	mov    QWORD PTR [rbp-0x78],rax
:00116 %13 = const[Ray]                     [Ray]
  01756: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5c03]        # 0xffff7360
  0175d: 00 	cmp    rax,QWORD PTR [rip+0xc6c]        # 0x23d0
  01764:    	jne    0x3ae8f
  0176a: 00 	mov    rax,QWORD PTR [rip+0xc4f]        # 0x23c0
  01771: ff 	mov    QWORD PTR [rbp-0x90],rax
:00117 %14 = dynvar(2, %7)
  01778:    	mov    rax,QWORD PTR [rbp-0x10]
  0177c:    	mov    rax,QWORD PTR [rax]
  0177f:    	mov    rax,QWORD PTR [rax-0x50]
  01783: ff 	mov    QWORD PTR [rbp-0x98],rax
:00118 %15 = %10
  0178a:    	mov    rax,QWORD PTR [rbp-0x78]
  0178e: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00119 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
:00120 
  01795: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0179c: 00 	test   rdi,0x7
  017a3:    	jne    0x3af43
  017a9:    	cmp    DWORD PTR [rdi+0x4],0x2c
  017ad:    	jne    0x3af43
  017b3: 26 	cmp    DWORD PTR [rip+0xffffffffffff5b9a],0x26        # 0xffff7354
  017ba:    	jne    0x3af43
  017c0: 00 	mov    r9,0x0
  017c7:    	sub    rsp,0x40
  017cb:    	movq   QWORD PTR [rsp],xmm2
  017d0:    	movq   QWORD PTR [rsp+0x8],xmm4
  017d6:    	movq   QWORD PTR [rsp+0x10],xmm5
  017dc:    	movq   QWORD PTR [rsp+0x18],xmm7
  017e2: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  017e9: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  017f0: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  017f7: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  017fe:    	mov    rdx,rdi
  01801:    	mov    rax,QWORD PTR [rbx]
  01804:    	lea    rdi,[rsp-0x18]
  01809:    	mov    QWORD PTR [rdi],rax
  0180c:    	mov    QWORD PTR [rbx],rdi
  0180f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01818:    	mov    QWORD PTR [rsp-0x38],rcx
  0181d: ff 	lea    rcx,[rbp-0x98]
  01824: 00 	mov    r8,0x2
  0182b:    	call   0x3afb1
  01830:    	lea    rdi,[rbp-0x8]
  01834:    	mov    QWORD PTR [rbx],rdi
  01837:    	movq   xmm2,QWORD PTR [rsp]
  0183c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01842:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01848:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0184e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01855: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0185c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01863: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0186a:    	add    rsp,0x40
  0186e: 78 	movabs r13,0x55788dee1700
  01878:    	test   rax,rax
  0187b:    	je     0xffff497b
  01881:    	mov    QWORD PTR [rbp-0x80],rax
:00122 %13 = const[Isect]                   [Isect]
  01885: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5ad4]        # 0xffff7360
  0188c: 00 	cmp    rax,QWORD PTR [rip+0xb5d]        # 0x23f0
  01893:    	jne    0x3afe3
  01899: 00 	mov    rax,QWORD PTR [rip+0xb40]        # 0x23e0
  018a0: ff 	mov    QWORD PTR [rbp-0x90],rax
:00123 %12 = %13.call new()                 [#<Class:Isect>]
:00124 
  018a7: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  018ae: 00 	test   rdi,0x7
  018b5:    	jne    0x3b097
  018bb:    	cmp    DWORD PTR [rdi+0x4],0x2e
  018bf:    	jne    0x3b097
  018c5: 26 	cmp    DWORD PTR [rip+0xffffffffffff5a88],0x26        # 0xffff7354
  018cc:    	jne    0x3b097
  018d2: 00 	mov    r9,0x0
  018d9:    	sub    rsp,0x40
  018dd:    	movq   QWORD PTR [rsp],xmm2
  018e2:    	movq   QWORD PTR [rsp+0x8],xmm4
  018e8:    	movq   QWORD PTR [rsp+0x10],xmm5
  018ee:    	movq   QWORD PTR [rsp+0x18],xmm7
  018f4: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  018fb: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01902: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01909: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01910:    	mov    rdx,rdi
  01913:    	mov    rax,QWORD PTR [rbx]
  01916:    	lea    rdi,[rsp-0x18]
  0191b:    	mov    QWORD PTR [rdi],rax
  0191e:    	mov    QWORD PTR [rbx],rdi
  01921: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0192a:    	mov    QWORD PTR [rsp-0x38],rcx
  0192f: ff 	lea    rcx,[rbp-0x98]
  01936: 00 	mov    r8,0x0
  0193d:    	call   0x3b105
  01942:    	lea    rdi,[rbp-0x8]
  01946:    	mov    QWORD PTR [rbx],rdi
  01949:    	movq   xmm2,QWORD PTR [rsp]
  0194e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01954:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0195a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01960: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01967: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0196e: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01975: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0197c:    	add    rsp,0x40
  01980: 78 	movabs r13,0x55788dee1740
  0198a:    	test   rax,rax
  0198d:    	je     0xffff497b
  01993: ff 	mov    QWORD PTR [rbp-0x88],rax
:00126 %13 = @spheres: Scene[IvarId(0)]
  0199a:    	mov    rdi,QWORD PTR [rbp-0x28]
  0199e:    	cmp    WORD PTR [rdi+0x2],0x3
  019a3:    	jne    0x3b137
  019a9:    	mov    rax,QWORD PTR [rdi+0x10]
  019ad: ff 	mov    QWORD PTR [rbp-0x90],rax
:00127 %14 = 0: i32
  019b4: ff 	mov    QWORD PTR [rbp-0x98],0x1
:00128 %13 = %13.[%14]
  019bf:    	sub    rsp,0x40
  019c3:    	movq   QWORD PTR [rsp],xmm2
  019c8:    	movq   QWORD PTR [rsp+0x8],xmm4
  019ce:    	movq   QWORD PTR [rsp+0x10],xmm5
  019d4:    	movq   QWORD PTR [rsp+0x18],xmm7
  019da: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  019e1: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  019e8: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  019ef: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  019f6: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  019fd: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01a04:    	mov    rdi,rbx
  01a07:    	mov    rsi,r12
  01a0a: 78 	movabs rax,0x55788c797be0
  01a14:    	call   rax
  01a16:    	movq   xmm2,QWORD PTR [rsp]
  01a1b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a21:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a27:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a2d: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a34: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a3b: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a42: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a49:    	add    rsp,0x40
  01a4d: 78 	movabs r13,0x55788dee1780
  01a57:    	test   rax,rax
  01a5a:    	je     0xffff497b
  01a60: ff 	mov    QWORD PTR [rbp-0x90],rax
:00129 %14 = %11
  01a67:    	mov    rax,QWORD PTR [rbp-0x80]
  01a6b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00130 %15 = %12
  01a72: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01a79: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00131 _ = %13.call intersect(%14; 2)       [Sphere]
:00132 
  01a80: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01a87: 00 	test   rdi,0x7
  01a8e:    	jne    0x3b1bb
  01a94:    	cmp    DWORD PTR [rdi+0x4],0x27
  01a98:    	jne    0x3b1bb
  01a9e: 26 	cmp    DWORD PTR [rip+0xffffffffffff58af],0x26        # 0xffff7354
  01aa5:    	jne    0x3b1bb
  01aab:    	sub    rsp,0x40
  01aaf:    	movq   QWORD PTR [rsp],xmm2
  01ab4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01aba:    	movq   QWORD PTR [rsp+0x10],xmm5
  01ac0:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ac6: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01acd: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ad4: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01adb: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01ae2:    	mov    rax,QWORD PTR [rbx]
  01ae5:    	lea    rdi,[rsp-0x18]
  01aea:    	mov    QWORD PTR [rdi],rax
  01aed:    	mov    QWORD PTR [rbx],rdi
  01af0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01af9:    	mov    QWORD PTR [rsp-0x38],rcx
  01afe: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01b05:    	mov    QWORD PTR [rsp-0x38],rax
  01b0a: 00 	mov    rdi,0x2
  01b11: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01b18:    	mov    QWORD PTR [rsp-0x40],rax
  01b1d: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01b24:    	mov    QWORD PTR [rsp-0x48],rax
  01b29: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b32: 10 	movabs rax,0x100100000003f
  01b3c:    	mov    QWORD PTR [rsp-0x28],rax
  01b41: 78 	movabs r13,0x55788dee86a0
  01b4b:    	call   0xffff7f21
  01b50:    	lea    rdi,[rbp-0x8]
  01b54:    	mov    QWORD PTR [rbx],rdi
  01b57:    	movq   xmm2,QWORD PTR [rsp]
  01b5c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b62:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01b68:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b6e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01b75: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01b7c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01b83: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01b8a:    	add    rsp,0x40
  01b8e: 78 	movabs r13,0x55788dee17c0
  01b98:    	test   rax,rax
  01b9b:    	je     0xffff497b
:00134 %13 = @spheres: Scene[IvarId(0)]
  01ba1:    	mov    rdi,QWORD PTR [rbp-0x28]
  01ba5:    	cmp    WORD PTR [rdi+0x2],0x3
  01baa:    	jne    0x3b229
  01bb0:    	mov    rax,QWORD PTR [rdi+0x10]
  01bb4: ff 	mov    QWORD PTR [rbp-0x90],rax
:00135 %14 = 1: i32
  01bbb: ff 	mov    QWORD PTR [rbp-0x98],0x3
:00136 %13 = %13.[%14]
  01bc6:    	sub    rsp,0x40
  01bca:    	movq   QWORD PTR [rsp],xmm2
  01bcf:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bd5:    	movq   QWORD PTR [rsp+0x10],xmm5
  01bdb:    	movq   QWORD PTR [rsp+0x18],xmm7
  01be1: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01be8: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01bef: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01bf6: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01bfd: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01c04: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01c0b:    	mov    rdi,rbx
  01c0e:    	mov    rsi,r12
  01c11: 78 	movabs rax,0x55788c797be0
  01c1b:    	call   rax
  01c1d:    	movq   xmm2,QWORD PTR [rsp]
  01c22:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c28:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01c2e:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c34: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01c3b: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01c42: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01c49: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01c50:    	add    rsp,0x40
  01c54: 78 	movabs r13,0x55788dee1800
  01c5e:    	test   rax,rax
  01c61:    	je     0xffff497b
  01c67: ff 	mov    QWORD PTR [rbp-0x90],rax
:00137 %14 = %11
  01c6e:    	mov    rax,QWORD PTR [rbp-0x80]
  01c72: ff 	mov    QWORD PTR [rbp-0x98],rax
:00138 %15 = %12
  01c79: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01c80: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00139 _ = %13.call intersect(%14; 2)       [Sphere]
:00140 
  01c87: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01c8e: 00 	test   rdi,0x7
  01c95:    	jne    0x3b2ad
  01c9b:    	cmp    DWORD PTR [rdi+0x4],0x27
  01c9f:    	jne    0x3b2ad
  01ca5: 26 	cmp    DWORD PTR [rip+0xffffffffffff56a8],0x26        # 0xffff7354
  01cac:    	jne    0x3b2ad
  01cb2:    	sub    rsp,0x40
  01cb6:    	movq   QWORD PTR [rsp],xmm2
  01cbb:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cc1:    	movq   QWORD PTR [rsp+0x10],xmm5
  01cc7:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ccd: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01cd4: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01cdb: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01ce2: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01ce9:    	mov    rax,QWORD PTR [rbx]
  01cec:    	lea    rdi,[rsp-0x18]
  01cf1:    	mov    QWORD PTR [rdi],rax
  01cf4:    	mov    QWORD PTR [rbx],rdi
  01cf7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01d00:    	mov    QWORD PTR [rsp-0x38],rcx
  01d05: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01d0c:    	mov    QWORD PTR [rsp-0x38],rax
  01d11: 00 	mov    rdi,0x2
  01d18: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01d1f:    	mov    QWORD PTR [rsp-0x40],rax
  01d24: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01d2b:    	mov    QWORD PTR [rsp-0x48],rax
  01d30: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01d39: 10 	movabs rax,0x100100000003f
  01d43:    	mov    QWORD PTR [rsp-0x28],rax
  01d48: 78 	movabs r13,0x55788dee86a0
  01d52:    	call   0xffff7f21
  01d57:    	lea    rdi,[rbp-0x8]
  01d5b:    	mov    QWORD PTR [rbx],rdi
  01d5e:    	movq   xmm2,QWORD PTR [rsp]
  01d63:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d69:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01d6f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01d75: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01d7c: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01d83: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01d8a: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01d91:    	add    rsp,0x40
  01d95: 78 	movabs r13,0x55788dee1840
  01d9f:    	test   rax,rax
  01da2:    	je     0xffff497b
:00142 %13 = @spheres: Scene[IvarId(0)]
  01da8:    	mov    rdi,QWORD PTR [rbp-0x28]
  01dac:    	cmp    WORD PTR [rdi+0x2],0x3
  01db1:    	jne    0x3b31b
  01db7:    	mov    rax,QWORD PTR [rdi+0x10]
  01dbb: ff 	mov    QWORD PTR [rbp-0x90],rax
:00143 %14 = 2: i32
  01dc2: ff 	mov    QWORD PTR [rbp-0x98],0x5
:00144 %13 = %13.[%14]
  01dcd:    	sub    rsp,0x40
  01dd1:    	movq   QWORD PTR [rsp],xmm2
  01dd6:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ddc:    	movq   QWORD PTR [rsp+0x10],xmm5
  01de2:    	movq   QWORD PTR [rsp+0x18],xmm7
  01de8: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01def: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01df6: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01dfd: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01e04: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01e0b: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01e12:    	mov    rdi,rbx
  01e15:    	mov    rsi,r12
  01e18: 78 	movabs rax,0x55788c797be0
  01e22:    	call   rax
  01e24:    	movq   xmm2,QWORD PTR [rsp]
  01e29:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e2f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01e35:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01e3b: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01e42: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01e49: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01e50: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01e57:    	add    rsp,0x40
  01e5b: 78 	movabs r13,0x55788dee1880
  01e65:    	test   rax,rax
  01e68:    	je     0xffff497b
  01e6e: ff 	mov    QWORD PTR [rbp-0x90],rax
:00145 %14 = %11
  01e75:    	mov    rax,QWORD PTR [rbp-0x80]
  01e79: ff 	mov    QWORD PTR [rbp-0x98],rax
:00146 %15 = %12
  01e80: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01e87: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00147 _ = %13.call intersect(%14; 2)       [Sphere]
:00148 
  01e8e: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01e95: 00 	test   rdi,0x7
  01e9c:    	jne    0x3b39f
  01ea2:    	cmp    DWORD PTR [rdi+0x4],0x27
  01ea6:    	jne    0x3b39f
  01eac: 26 	cmp    DWORD PTR [rip+0xffffffffffff54a1],0x26        # 0xffff7354
  01eb3:    	jne    0x3b39f
  01eb9:    	sub    rsp,0x40
  01ebd:    	movq   QWORD PTR [rsp],xmm2
  01ec2:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ec8:    	movq   QWORD PTR [rsp+0x10],xmm5
  01ece:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ed4: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01edb: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ee2: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01ee9: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01ef0:    	mov    rax,QWORD PTR [rbx]
  01ef3:    	lea    rdi,[rsp-0x18]
  01ef8:    	mov    QWORD PTR [rdi],rax
  01efb:    	mov    QWORD PTR [rbx],rdi
  01efe: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01f07:    	mov    QWORD PTR [rsp-0x38],rcx
  01f0c: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01f13:    	mov    QWORD PTR [rsp-0x38],rax
  01f18: 00 	mov    rdi,0x2
  01f1f: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01f26:    	mov    QWORD PTR [rsp-0x40],rax
  01f2b: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01f32:    	mov    QWORD PTR [rsp-0x48],rax
  01f37: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01f40: 10 	movabs rax,0x100100000003f
  01f4a:    	mov    QWORD PTR [rsp-0x28],rax
  01f4f: 78 	movabs r13,0x55788dee86a0
  01f59:    	call   0xffff7f21
  01f5e:    	lea    rdi,[rbp-0x8]
  01f62:    	mov    QWORD PTR [rbx],rdi
  01f65:    	movq   xmm2,QWORD PTR [rsp]
  01f6a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01f70:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01f76:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01f7c: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01f83: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01f8a: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01f91: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01f98:    	add    rsp,0x40
  01f9c: 78 	movabs r13,0x55788dee18c0
  01fa6:    	test   rax,rax
  01fa9:    	je     0xffff497b
:00150 %13 = @plane: Scene[IvarId(1)]
  01faf:    	mov    rdi,QWORD PTR [rbp-0x28]
  01fb3:    	cmp    WORD PTR [rdi+0x2],0x3
  01fb8:    	jne    0x3b40d
  01fbe:    	mov    rax,QWORD PTR [rdi+0x18]
  01fc2: ff 	mov    QWORD PTR [rbp-0x90],rax
:00151 %14 = %11
  01fc9:    	mov    rax,QWORD PTR [rbp-0x80]
  01fcd: ff 	mov    QWORD PTR [rbp-0x98],rax
:00152 %15 = %12
  01fd4: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01fdb: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00153 _ = %13.call intersect(%14; 2)       [Plane]
:00154 
  01fe2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01fe9: 00 	test   rdi,0x7
  01ff0:    	jne    0x3b491
  01ff6:    	cmp    DWORD PTR [rdi+0x4],0x29
  01ffa:    	jne    0x3b491
  02000: 26 	cmp    DWORD PTR [rip+0xffffffffffff534d],0x26        # 0xffff7354
  02007:    	jne    0x3b491
  0200d:    	sub    rsp,0x40
  02011:    	movq   QWORD PTR [rsp],xmm2
  02016:    	movq   QWORD PTR [rsp+0x8],xmm4
  0201c:    	movq   QWORD PTR [rsp+0x10],xmm5
  02022:    	movq   QWORD PTR [rsp+0x18],xmm7
  02028: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0202f: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02036: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0203d: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02044:    	mov    rax,QWORD PTR [rbx]
  02047:    	lea    rdi,[rsp-0x18]
  0204c:    	mov    QWORD PTR [rdi],rax
  0204f:    	mov    QWORD PTR [rbx],rdi
  02052: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0205b:    	mov    QWORD PTR [rsp-0x38],rcx
  02060: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02067:    	mov    QWORD PTR [rsp-0x38],rax
  0206c: 00 	mov    rdi,0x2
  02073: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0207a:    	mov    QWORD PTR [rsp-0x40],rax
  0207f: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02086:    	mov    QWORD PTR [rsp-0x48],rax
  0208b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02094: 0e 	movabs rax,0x1000e00000041
  0209e:    	mov    QWORD PTR [rsp-0x28],rax
  020a3: 78 	movabs r13,0x55788deea540
  020ad:    	call   0xffff850e
  020b2:    	lea    rdi,[rbp-0x8]
  020b6:    	mov    QWORD PTR [rbx],rdi
  020b9:    	movq   xmm2,QWORD PTR [rsp]
  020be:    	movq   xmm4,QWORD PTR [rsp+0x8]
  020c4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  020ca:    	movq   xmm7,QWORD PTR [rsp+0x18]
  020d0: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  020d7: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  020de: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  020e5: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  020ec:    	add    rsp,0x40
  020f0: 78 	movabs r13,0x55788dee1920
  020fa:    	test   rax,rax
  020fd:    	je     0xffff497b
:00156 %13 = %12.call hit()                 [Isect]
:00157 
  02103: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0210a: 00 	test   rdi,0x7
  02111:    	jne    0x3b4ff
  02117:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0211b:    	jne    0x3b4ff
  02121: 26 	cmp    DWORD PTR [rip+0xffffffffffff522c],0x26        # 0xffff7354
  02128:    	jne    0x3b4ff
  0212e:    	mov    esi,DWORD PTR [rip+0x2c8]        # 0x23fc
  02134:    	cmp    esi,0xffffffff
  02137:    	je     0x3b56d
  0213d:    	cmp    WORD PTR [rdi+0x2],0x3
  02142:    	jne    0x215b
  02148:    	cmp    esi,0x6
  0214b:    	jge    0x215b
  02151:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  02156:    	jmp    0x21d5
  0215b:    	sub    rsp,0x40
  0215f:    	movq   QWORD PTR [rsp],xmm2
  02164:    	movq   QWORD PTR [rsp+0x8],xmm4
  0216a:    	movq   QWORD PTR [rsp+0x10],xmm5
  02170:    	movq   QWORD PTR [rsp+0x18],xmm7
  02176: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0217d: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02184: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0218b: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02192: 78 	movabs rax,0x55788c73bb50
  0219c:    	call   rax
  0219e:    	movq   xmm2,QWORD PTR [rsp]
  021a3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  021a9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  021af:    	movq   xmm7,QWORD PTR [rsp+0x18]
  021b5: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  021bc: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  021c3: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  021ca: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  021d1:    	add    rsp,0x40
  021d5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00159 condnotbr %13 =>:00165
  021dc: ff 	mov    rax,QWORD PTR [rbp-0x90]
  021e3:    	or     rax,0x10
  021e7:    	cmp    rax,0x14
  021eb:    	je     0x225c
:00160 %13 = dynvar(2, %6)
  021f1:    	mov    rax,QWORD PTR [rbp-0x10]
  021f5:    	mov    rax,QWORD PTR [rax]
  021f8:    	mov    rax,QWORD PTR [rax-0x48]
  021fc: ff 	mov    QWORD PTR [rbp-0x90],rax
:00161 %14 = literal[1.0]
  02203: 00 	movq   xmm3,QWORD PTR [rip+0x1f5]        # 0x2400
:00162 %13 = %13 + %14                      [<INVALID>][<INVALID>]
  0220b: 00 	mov    rdi,0x4
  02212: 01 	sub    DWORD PTR [rip+0x1ef],0x1        # 0x2408
  02219:    	jne    0x3b604
  0221f:    	mov    rdi,r12
  02222:    	mov    esi,DWORD PTR [rbp-0x18]
  02225:    	mov    rdx,QWORD PTR [rbp-0x28]
  02229: 78 	movabs rax,0x55788c79da60
  02233:    	call   rax
  02235: 00 	mov    rdi,0x4
  0223c:    	jmp    0x3b604
:00163 dynvar(2, %6) = %13
  02241:    	mov    rax,QWORD PTR [rbp-0x10]
  02245:    	mov    rax,QWORD PTR [rax]
  02248: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0224f:    	mov    QWORD PTR [rax-0x48],rdi
:00164 ret %13
  02253: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0225a:    	leave  
  0225b:    	ret    
:00165 %13 = literal[0.0]
  0225c: 00 	movq   xmm3,QWORD PTR [rip+0x1ac]        # 0x2410
:00166 ret %13
  02264:    	movq   xmm0,xmm3
  02268:    	call   0xffff4aa7
  0226d: ff 	mov    QWORD PTR [rbp-0x90],rax
  02274: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0227b:    	leave  
  0227c:    	ret    
==> start whole compile: <unnamed> FuncId(71) self_class:Scene start:[00000] bytecode:0x55788dec35d0
<== finished compile. elapsed:20.4µs
offset:Pos(56024) code: 217 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x3926a
  0002c: cmp    DWORD PTR [rdi+0x4],0x2f
  00030: jne    0x3926a
:00000 %3 = dynvar(1, %3)
  00036: mov    rax,QWORD PTR [rbp-0x10]
  0003a: mov    rax,QWORD PTR [rax-0x30]
  0003e: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = literal[73]
  00042: mov    rax,0x93
  00049: mov    QWORD PTR [rbp-0x48],rax
:00002 %2 = %3.call times(&%4)              [Integer]
:00003 
  0004d: mov    rdi,QWORD PTR [rbp-0x40]
  00051: test   rdi,0x1
  00058: jne    0x75
  0005e: test   rdi,0x7
  00065: jne    0x39279
  0006b: cmp    DWORD PTR [rdi+0x4],0x6
  0006f: jne    0x39279
  00075: cmp    DWORD PTR [rip+0xffffffffffff4ec0],0x26        # 0xffff4f3c
  0007c: jne    0x39279
  00082: mov    r9,QWORD PTR [rbp-0x48]
  00086: mov    rdx,rdi
  00089: mov    rax,QWORD PTR [rbx]
  0008c: lea    rdi,[rsp-0x18]
  00091: mov    QWORD PTR [rdi],rax
  00094: mov    QWORD PTR [rbx],rdi
  00097: mov    QWORD PTR [rsp-0x20],0x0
  000a0: mov    QWORD PTR [rsp-0x38],rcx
  000a5: lea    rcx,[rbp-0x50]
  000a9: mov    r8,0x0
  000b0: call   0x39288
  000b5: lea    rdi,[rbp-0x8]
  000b9: mov    QWORD PTR [rbx],rdi
  000bc: movabs r13,0x55788dec3610
  000c6: test   rax,rax
  000c9: je     0xffff2563
  000cf: mov    QWORD PTR [rbp-0x38],rax
:00005 ret %2
  000d3: mov    rax,QWORD PTR [rbp-0x38]
  000d7: leave  
  000d8: ret    
==> start whole compile: vcross FuncId(58) self_class:Vec start:[00000] bytecode:0x55788dee5eb0
<== finished compile. elapsed:49.6µs
offset:Pos(56241) code: 2478 bytes  data: 73 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x70
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    QWORD PTR [rbp-0x50],rax
  0001f: mov    QWORD PTR [rbp-0x58],rax
  00023: mov    QWORD PTR [rbp-0x60],rax
  00027: mov    QWORD PTR [rbp-0x68],rax
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: test   rdi,0x7
  00036: jne    0x391e1
  0003c: cmp    DWORD PTR [rdi+0x4],0x25
  00040: jne    0x391e1
:00000 %3 = const[Vec]                      [Vec]
  00046: mov    rax,QWORD PTR [rip+0xffffffffffff4e22]        # 0xffff4e6f
  0004d: cmp    rax,QWORD PTR [rip+0x96b]        # 0x9bf
  00054: jne    0x391f0
  0005a: mov    rax,QWORD PTR [rip+0x94e]        # 0x9af
  00061: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = @y: Vec[IvarId(1)]
  00065: mov    rdi,QWORD PTR [rbp-0x28]
  00069: cmp    WORD PTR [rdi+0x2],0x3
  0006e: jne    0x39236
  00074: mov    rax,QWORD PTR [rdi+0x18]
  00078: mov    QWORD PTR [rbp-0x48],rax
:00002 %5 = %1.call z()                     [Vec]
:00003 
  0007c: mov    rdi,QWORD PTR [rbp-0x30]
  00080: test   rdi,0x7
  00087: jne    0x3924c
  0008d: cmp    DWORD PTR [rdi+0x4],0x25
  00091: jne    0x3924c
  00097: cmp    DWORD PTR [rip+0xffffffffffff4dc5],0x26        # 0xffff4e63
  0009e: jne    0x3924c
  000a4: mov    esi,DWORD PTR [rip+0x921]        # 0x9cb
  000aa: cmp    esi,0xffffffff
  000ad: je     0x3925b
  000b3: cmp    WORD PTR [rdi+0x2],0x3
  000b8: jne    0xd1
  000be: cmp    esi,0x6
  000c1: jge    0xd1
  000c7: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000cc: jmp    0xdd
  000d1: movabs rax,0x55788c73bb50
  000db: call   rax
  000dd: mov    QWORD PTR [rbp-0x50],rax
:00005 %4 = %4 * %5                         [Float][Float]
  000e1: mov    rdi,QWORD PTR [rbp-0x48]
  000e5: test   rdi,0x1
  000ec: jne    0x39284
  000f2: test   rdi,0x2
  000f9: je     0x135
  000ff: xorps  xmm2,xmm2
  00102: movabs rax,0x8000000000000002
  0010c: cmp    rdi,rax
  0010f: je     0x147
  00115: mov    rax,rdi
  00118: sar    rax,0x3f
  0011c: add    rax,0x2
  00120: and    rdi,0xfffffffffffffffc
  00124: or     rdi,rax
  00127: rol    rdi,0x3d
  0012b: movq   xmm2,rdi
  00130: jmp    0x147
  00135: call   0xffff24c3
  0013a: test   rax,rax
  0013d: je     0x39284
  00143: movq   xmm2,xmm0
  00147: mov    rdi,QWORD PTR [rbp-0x50]
  0014b: test   rdi,0x1
  00152: jne    0x39293
  00158: test   rdi,0x2
  0015f: je     0x19b
  00165: xorps  xmm3,xmm3
  00168: movabs rax,0x8000000000000002
  00172: cmp    rdi,rax
  00175: je     0x1ad
  0017b: mov    rax,rdi
  0017e: sar    rax,0x3f
  00182: add    rax,0x2
  00186: and    rdi,0xfffffffffffffffc
  0018a: or     rdi,rax
  0018d: rol    rdi,0x3d
  00191: movq   xmm3,rdi
  00196: jmp    0x1ad
  0019b: call   0xffff24c3
  001a0: test   rax,rax
  001a3: je     0x39293
  001a9: movq   xmm3,xmm0
  001ad: mulsd  xmm2,xmm3
:00006 %5 = @z: Vec[IvarId(2)]
  001b1: mov    rdi,QWORD PTR [rbp-0x28]
  001b5: cmp    WORD PTR [rdi+0x2],0x3
  001ba: jne    0x392a2
  001c0: mov    rax,QWORD PTR [rdi+0x20]
  001c4: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = %1.call y()                     [Vec]
:00008 
  001c8: mov    rdi,QWORD PTR [rbp-0x30]
  001cc: test   rdi,0x7
  001d3: jne    0x392ca
  001d9: cmp    DWORD PTR [rdi+0x4],0x25
  001dd: jne    0x392ca
  001e3: cmp    DWORD PTR [rip+0xffffffffffff4c79],0x26        # 0xffff4e63
  001ea: jne    0x392ca
  001f0: mov    esi,DWORD PTR [rip+0x7dd]        # 0x9d3
  001f6: cmp    esi,0xffffffff
  001f9: je     0x392e6
  001ff: cmp    WORD PTR [rdi+0x2],0x3
  00204: jne    0x21d
  0020a: cmp    esi,0x6
  0020d: jge    0x21d
  00213: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00218: jmp    0x23b
  0021d: sub    rsp,0x10
  00221: movq   QWORD PTR [rsp],xmm2
  00226: movabs rax,0x55788c73bb50
  00230: call   rax
  00232: movq   xmm2,QWORD PTR [rsp]
  00237: add    rsp,0x10
  0023b: mov    QWORD PTR [rbp-0x58],rax
:00010 %5 = %5 * %6                         [Float][Float]
  0023f: mov    rdi,QWORD PTR [rbp-0x50]
  00243: test   rdi,0x1
  0024a: jne    0x39321
  00250: test   rdi,0x2
  00257: je     0x293
  0025d: xorps  xmm3,xmm3
  00260: movabs rax,0x8000000000000002
  0026a: cmp    rdi,rax
  0026d: je     0x2a5
  00273: mov    rax,rdi
  00276: sar    rax,0x3f
  0027a: add    rax,0x2
  0027e: and    rdi,0xfffffffffffffffc
  00282: or     rdi,rax
  00285: rol    rdi,0x3d
  00289: movq   xmm3,rdi
  0028e: jmp    0x2a5
  00293: call   0xffff24c3
  00298: test   rax,rax
  0029b: je     0x39321
  002a1: movq   xmm3,xmm0
  002a5: mov    rdi,QWORD PTR [rbp-0x58]
  002a9: test   rdi,0x1
  002b0: jne    0x3933d
  002b6: test   rdi,0x2
  002bd: je     0x2f9
  002c3: xorps  xmm4,xmm4
  002c6: movabs rax,0x8000000000000002
  002d0: cmp    rdi,rax
  002d3: je     0x30b
  002d9: mov    rax,rdi
  002dc: sar    rax,0x3f
  002e0: add    rax,0x2
  002e4: and    rdi,0xfffffffffffffffc
  002e8: or     rdi,rax
  002eb: rol    rdi,0x3d
  002ef: movq   xmm4,rdi
  002f4: jmp    0x30b
  002f9: call   0xffff24c3
  002fe: test   rax,rax
  00301: je     0x3933d
  00307: movq   xmm4,xmm0
  0030b: mulsd  xmm3,xmm4
:00011 %4 = %4 - %5                         [Float][Float]
  0030f: subsd  xmm2,xmm3
:00012 %5 = @z: Vec[IvarId(2)]
  00313: mov    rdi,QWORD PTR [rbp-0x28]
  00317: cmp    WORD PTR [rdi+0x2],0x3
  0031c: jne    0x39359
  00322: mov    rax,QWORD PTR [rdi+0x20]
  00326: mov    QWORD PTR [rbp-0x50],rax
:00013 %6 = %1.call x()                     [Vec]
:00014 
  0032a: mov    rdi,QWORD PTR [rbp-0x30]
  0032e: test   rdi,0x7
  00335: jne    0x3938d
  0033b: cmp    DWORD PTR [rdi+0x4],0x25
  0033f: jne    0x3938d
  00345: cmp    DWORD PTR [rip+0xffffffffffff4b17],0x26        # 0xffff4e63
  0034c: jne    0x3938d
  00352: mov    esi,DWORD PTR [rip+0x683]        # 0x9db
  00358: cmp    esi,0xffffffff
  0035b: je     0x393a9
  00361: cmp    WORD PTR [rdi+0x2],0x3
  00366: jne    0x37f
  0036c: cmp    esi,0x6
  0036f: jge    0x37f
  00375: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0037a: jmp    0x39d
  0037f: sub    rsp,0x10
  00383: movq   QWORD PTR [rsp],xmm2
  00388: movabs rax,0x55788c73bb50
  00392: call   rax
  00394: movq   xmm2,QWORD PTR [rsp]
  00399: add    rsp,0x10
  0039d: mov    QWORD PTR [rbp-0x58],rax
:00016 %5 = %5 * %6                         [Float][Float]
  003a1: mov    rdi,QWORD PTR [rbp-0x50]
  003a5: test   rdi,0x1
  003ac: jne    0x393e4
  003b2: test   rdi,0x2
  003b9: je     0x3f5
  003bf: xorps  xmm3,xmm3
  003c2: movabs rax,0x8000000000000002
  003cc: cmp    rdi,rax
  003cf: je     0x407
  003d5: mov    rax,rdi
  003d8: sar    rax,0x3f
  003dc: add    rax,0x2
  003e0: and    rdi,0xfffffffffffffffc
  003e4: or     rdi,rax
  003e7: rol    rdi,0x3d
  003eb: movq   xmm3,rdi
  003f0: jmp    0x407
  003f5: call   0xffff24c3
  003fa: test   rax,rax
  003fd: je     0x393e4
  00403: movq   xmm3,xmm0
  00407: mov    rdi,QWORD PTR [rbp-0x58]
  0040b: test   rdi,0x1
  00412: jne    0x39400
  00418: test   rdi,0x2
  0041f: je     0x45b
  00425: xorps  xmm4,xmm4
  00428: movabs rax,0x8000000000000002
  00432: cmp    rdi,rax
  00435: je     0x46d
  0043b: mov    rax,rdi
  0043e: sar    rax,0x3f
  00442: add    rax,0x2
  00446: and    rdi,0xfffffffffffffffc
  0044a: or     rdi,rax
  0044d: rol    rdi,0x3d
  00451: movq   xmm4,rdi
  00456: jmp    0x46d
  0045b: call   0xffff24c3
  00460: test   rax,rax
  00463: je     0x39400
  00469: movq   xmm4,xmm0
  0046d: mulsd  xmm3,xmm4
:00017 %6 = @x: Vec[IvarId(0)]
  00471: mov    rdi,QWORD PTR [rbp-0x28]
  00475: cmp    WORD PTR [rdi+0x2],0x3
  0047a: jne    0x3941c
  00480: mov    rax,QWORD PTR [rdi+0x10]
  00484: mov    QWORD PTR [rbp-0x58],rax
:00018 %7 = %1.call z()                     [Vec]
:00019 
  00488: mov    rdi,QWORD PTR [rbp-0x30]
  0048c: test   rdi,0x7
  00493: jne    0x39450
  00499: cmp    DWORD PTR [rdi+0x4],0x25
  0049d: jne    0x39450
  004a3: cmp    DWORD PTR [rip+0xffffffffffff49b9],0x26        # 0xffff4e63
  004aa: jne    0x39450
  004b0: mov    esi,DWORD PTR [rip+0x52d]        # 0x9e3
  004b6: cmp    esi,0xffffffff
  004b9: je     0x39479
  004bf: cmp    WORD PTR [rdi+0x2],0x3
  004c4: jne    0x4dd
  004ca: cmp    esi,0x6
  004cd: jge    0x4dd
  004d3: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004d8: jmp    0x507
  004dd: sub    rsp,0x10
  004e1: movq   QWORD PTR [rsp],xmm2
  004e6: movq   QWORD PTR [rsp+0x8],xmm3
  004ec: movabs rax,0x55788c73bb50
  004f6: call   rax
  004f8: movq   xmm2,QWORD PTR [rsp]
  004fd: movq   xmm3,QWORD PTR [rsp+0x8]
  00503: add    rsp,0x10
  00507: mov    QWORD PTR [rbp-0x60],rax
:00021 %6 = %6 * %7                         [Float][Float]
  0050b: mov    rdi,QWORD PTR [rbp-0x58]
  0050f: test   rdi,0x1
  00516: jne    0x394c0
  0051c: test   rdi,0x2
  00523: je     0x55f
  00529: xorps  xmm4,xmm4
  0052c: movabs rax,0x8000000000000002
  00536: cmp    rdi,rax
  00539: je     0x571
  0053f: mov    rax,rdi
  00542: sar    rax,0x3f
  00546: add    rax,0x2
  0054a: and    rdi,0xfffffffffffffffc
  0054e: or     rdi,rax
  00551: rol    rdi,0x3d
  00555: movq   xmm4,rdi
  0055a: jmp    0x571
  0055f: call   0xffff24c3
  00564: test   rax,rax
  00567: je     0x394c0
  0056d: movq   xmm4,xmm0
  00571: mov    rdi,QWORD PTR [rbp-0x60]
  00575: test   rdi,0x1
  0057c: jne    0x394e9
  00582: test   rdi,0x2
  00589: je     0x5c5
  0058f: xorps  xmm5,xmm5
  00592: movabs rax,0x8000000000000002
  0059c: cmp    rdi,rax
  0059f: je     0x5d7
  005a5: mov    rax,rdi
  005a8: sar    rax,0x3f
  005ac: add    rax,0x2
  005b0: and    rdi,0xfffffffffffffffc
  005b4: or     rdi,rax
  005b7: rol    rdi,0x3d
  005bb: movq   xmm5,rdi
  005c0: jmp    0x5d7
  005c5: call   0xffff24c3
  005ca: test   rax,rax
  005cd: je     0x394e9
  005d3: movq   xmm5,xmm0
  005d7: mulsd  xmm4,xmm5
:00022 %5 = %5 - %6                         [Float][Float]
  005db: subsd  xmm3,xmm4
:00023 %6 = @x: Vec[IvarId(0)]
  005df: mov    rdi,QWORD PTR [rbp-0x28]
  005e3: cmp    WORD PTR [rdi+0x2],0x3
  005e8: jne    0x39512
  005ee: mov    rax,QWORD PTR [rdi+0x10]
  005f2: mov    QWORD PTR [rbp-0x58],rax
:00024 %7 = %1.call y()                     [Vec]
:00025 
  005f6: mov    rdi,QWORD PTR [rbp-0x30]
  005fa: test   rdi,0x7
  00601: jne    0x39552
  00607: cmp    DWORD PTR [rdi+0x4],0x25
  0060b: jne    0x39552
  00611: cmp    DWORD PTR [rip+0xffffffffffff484b],0x26        # 0xffff4e63
  00618: jne    0x39552
  0061e: mov    esi,DWORD PTR [rip+0x3c7]        # 0x9eb
  00624: cmp    esi,0xffffffff
  00627: je     0x3957b
  0062d: cmp    WORD PTR [rdi+0x2],0x3
  00632: jne    0x64b
  00638: cmp    esi,0x6
  0063b: jge    0x64b
  00641: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00646: jmp    0x675
  0064b: sub    rsp,0x10
  0064f: movq   QWORD PTR [rsp],xmm2
  00654: movq   QWORD PTR [rsp+0x8],xmm3
  0065a: movabs rax,0x55788c73bb50
  00664: call   rax
  00666: movq   xmm2,QWORD PTR [rsp]
  0066b: movq   xmm3,QWORD PTR [rsp+0x8]
  00671: add    rsp,0x10
  00675: mov    QWORD PTR [rbp-0x60],rax
:00027 %6 = %6 * %7                         [Float][Float]
  00679: mov    rdi,QWORD PTR [rbp-0x58]
  0067d: test   rdi,0x1
  00684: jne    0x395c2
  0068a: test   rdi,0x2
  00691: je     0x6cd
  00697: xorps  xmm4,xmm4
  0069a: movabs rax,0x8000000000000002
  006a4: cmp    rdi,rax
  006a7: je     0x6df
  006ad: mov    rax,rdi
  006b0: sar    rax,0x3f
  006b4: add    rax,0x2
  006b8: and    rdi,0xfffffffffffffffc
  006bc: or     rdi,rax
  006bf: rol    rdi,0x3d
  006c3: movq   xmm4,rdi
  006c8: jmp    0x6df
  006cd: call   0xffff24c3
  006d2: test   rax,rax
  006d5: je     0x395c2
  006db: movq   xmm4,xmm0
  006df: mov    rdi,QWORD PTR [rbp-0x60]
  006e3: test   rdi,0x1
  006ea: jne    0x395eb
  006f0: test   rdi,0x2
  006f7: je     0x733
  006fd: xorps  xmm5,xmm5
  00700: movabs rax,0x8000000000000002
  0070a: cmp    rdi,rax
  0070d: je     0x745
  00713: mov    rax,rdi
  00716: sar    rax,0x3f
  0071a: add    rax,0x2
  0071e: and    rdi,0xfffffffffffffffc
  00722: or     rdi,rax
  00725: rol    rdi,0x3d
  00729: movq   xmm5,rdi
  0072e: jmp    0x745
  00733: call   0xffff24c3
  00738: test   rax,rax
  0073b: je     0x395eb
  00741: movq   xmm5,xmm0
  00745: mulsd  xmm4,xmm5
:00028 %7 = @y: Vec[IvarId(1)]
  00749: mov    rdi,QWORD PTR [rbp-0x28]
  0074d: cmp    WORD PTR [rdi+0x2],0x3
  00752: jne    0x39614
  00758: mov    rax,QWORD PTR [rdi+0x18]
  0075c: mov    QWORD PTR [rbp-0x60],rax
:00029 %8 = %1.call x()                     [Vec]
:00030 
  00760: mov    rdi,QWORD PTR [rbp-0x30]
  00764: test   rdi,0x7
  0076b: jne    0x39654
  00771: cmp    DWORD PTR [rdi+0x4],0x25
  00775: jne    0x39654
  0077b: cmp    DWORD PTR [rip+0xffffffffffff46e1],0x26        # 0xffff4e63
  00782: jne    0x39654
  00788: mov    esi,DWORD PTR [rip+0x265]        # 0x9f3
  0078e: cmp    esi,0xffffffff
  00791: je     0x3968a
  00797: cmp    WORD PTR [rdi+0x2],0x3
  0079c: jne    0x7b5
  007a2: cmp    esi,0x6
  007a5: jge    0x7b5
  007ab: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007b0: jmp    0x7eb
  007b5: sub    rsp,0x20
  007b9: movq   QWORD PTR [rsp],xmm2
  007be: movq   QWORD PTR [rsp+0x8],xmm3
  007c4: movq   QWORD PTR [rsp+0x10],xmm4
  007ca: movabs rax,0x55788c73bb50
  007d4: call   rax
  007d6: movq   xmm2,QWORD PTR [rsp]
  007db: movq   xmm3,QWORD PTR [rsp+0x8]
  007e1: movq   xmm4,QWORD PTR [rsp+0x10]
  007e7: add    rsp,0x20
  007eb: mov    QWORD PTR [rbp-0x68],rax
:00032 %7 = %7 * %8                         [Float][Float]
  007ef: mov    rdi,QWORD PTR [rbp-0x60]
  007f3: test   rdi,0x1
  007fa: jne    0x396dd
  00800: test   rdi,0x2
  00807: je     0x843
  0080d: xorps  xmm5,xmm5
  00810: movabs rax,0x8000000000000002
  0081a: cmp    rdi,rax
  0081d: je     0x855
  00823: mov    rax,rdi
  00826: sar    rax,0x3f
  0082a: add    rax,0x2
  0082e: and    rdi,0xfffffffffffffffc
  00832: or     rdi,rax
  00835: rol    rdi,0x3d
  00839: movq   xmm5,rdi
  0083e: jmp    0x855
  00843: call   0xffff24c3
  00848: test   rax,rax
  0084b: je     0x396dd
  00851: movq   xmm5,xmm0
  00855: mov    rdi,QWORD PTR [rbp-0x68]
  00859: test   rdi,0x1
  00860: jne    0x39713
  00866: test   rdi,0x2
  0086d: je     0x8a9
  00873: xorps  xmm6,xmm6
  00876: movabs rax,0x8000000000000002
  00880: cmp    rdi,rax
  00883: je     0x8bb
  00889: mov    rax,rdi
  0088c: sar    rax,0x3f
  00890: add    rax,0x2
  00894: and    rdi,0xfffffffffffffffc
  00898: or     rdi,rax
  0089b: rol    rdi,0x3d
  0089f: movq   xmm6,rdi
  008a4: jmp    0x8bb
  008a9: call   0xffff24c3
  008ae: test   rax,rax
  008b1: je     0x39713
  008b7: movq   xmm6,xmm0
  008bb: mulsd  xmm5,xmm6
:00033 %6 = %6 - %7                         [Float][Float]
  008bf: subsd  xmm4,xmm5
:00034 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00035 
  008c3: movq   xmm0,xmm2
  008c7: call   0xffff25b6
  008cc: mov    QWORD PTR [rbp-0x48],rax
  008d0: movq   xmm0,xmm3
  008d4: call   0xffff25b6
  008d9: mov    QWORD PTR [rbp-0x50],rax
  008dd: movq   xmm0,xmm4
  008e1: call   0xffff25b6
  008e6: mov    QWORD PTR [rbp-0x58],rax
  008ea: mov    rdi,QWORD PTR [rbp-0x40]
  008ee: test   rdi,0x7
  008f5: jne    0x39749
  008fb: cmp    DWORD PTR [rdi+0x4],0x26
  008ff: jne    0x39749
  00905: cmp    DWORD PTR [rip+0xffffffffffff4557],0x26        # 0xffff4e63
  0090c: jne    0x39749
  00912: mov    r9,0x0
  00919: sub    rsp,0x30
  0091d: movq   QWORD PTR [rsp],xmm2
  00922: movq   QWORD PTR [rsp+0x8],xmm3
  00928: movq   QWORD PTR [rsp+0x10],xmm4
  0092e: movq   QWORD PTR [rsp+0x18],xmm5
  00934: movq   QWORD PTR [rsp+0x20],xmm6
  0093a: mov    rdx,rdi
  0093d: mov    rax,QWORD PTR [rbx]
  00940: lea    rdi,[rsp-0x18]
  00945: mov    QWORD PTR [rdi],rax
  00948: mov    QWORD PTR [rbx],rdi
  0094b: mov    QWORD PTR [rsp-0x20],0x0
  00954: mov    QWORD PTR [rsp-0x38],rcx
  00959: lea    rcx,[rbp-0x48]
  0095d: mov    r8,0x3
  00964: call   0x39765
  00969: lea    rdi,[rbp-0x8]
  0096d: mov    QWORD PTR [rbx],rdi
  00970: movq   xmm2,QWORD PTR [rsp]
  00975: movq   xmm3,QWORD PTR [rsp+0x8]
  0097b: movq   xmm4,QWORD PTR [rsp+0x10]
  00981: movq   xmm5,QWORD PTR [rsp+0x18]
  00987: movq   xmm6,QWORD PTR [rsp+0x20]
  0098d: add    rsp,0x30
  00991: movabs r13,0x55788dee60f0
  0099b: test   rax,rax
  0099e: je     0xffff248a
  009a4: mov    QWORD PTR [rbp-0x38],rax
:00037 ret %2
  009a8: mov    rax,QWORD PTR [rbp-0x38]
  009ac: leave  
  009ad: ret    
==> start whole compile: intersect FuncId(65) self_class:Plane start:[00000] bytecode:0x55788deea540
<== finished compile. elapsed:110.5µs
offset:Pos(58792) code: 5648 bytes  data: 264 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xa0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x40],rax
  00016:    	mov    QWORD PTR [rbp-0x48],rax
  0001a:    	mov    QWORD PTR [rbp-0x50],rax
  0001e:    	mov    QWORD PTR [rbp-0x58],rax
  00022:    	mov    QWORD PTR [rbp-0x60],rax
  00026:    	mov    QWORD PTR [rbp-0x68],rax
  0002a:    	mov    QWORD PTR [rbp-0x70],rax
  0002e:    	mov    QWORD PTR [rbp-0x78],rax
  00032:    	mov    QWORD PTR [rbp-0x80],rax
  00036: ff 	mov    QWORD PTR [rbp-0x88],rax
  0003d: ff 	mov    QWORD PTR [rbp-0x90],rax
  00044:    	mov    rdi,QWORD PTR [rbp-0x28]
  00048: 00 	test   rdi,0x7
  0004f:    	jne    0x38da0
  00055:    	cmp    DWORD PTR [rdi+0x4],0x29
  00059:    	jne    0x38da0
:00000 %7 = @p: Plane[IvarId(0)]
  0005f:    	mov    rdi,QWORD PTR [rbp-0x28]
  00063:    	cmp    WORD PTR [rdi+0x2],0x3
  00068:    	jne    0x38daf
  0006e:    	mov    rax,QWORD PTR [rdi+0x10]
  00072:    	mov    QWORD PTR [rbp-0x60],rax
:00001 %8 = @n: Plane[IvarId(1)]
  00076:    	mov    rdi,QWORD PTR [rbp-0x28]
  0007a:    	cmp    WORD PTR [rdi+0x2],0x3
  0007f:    	jne    0x38dc5
  00085:    	mov    rax,QWORD PTR [rdi+0x18]
  00089:    	mov    QWORD PTR [rbp-0x68],rax
:00002 %3 = %7.call vdot(%8; 1)             [Vec]
:00003 
  0008d:    	mov    rdi,QWORD PTR [rbp-0x60]
  00091: 00 	test   rdi,0x7
  00098:    	jne    0x38ddb
  0009e:    	cmp    DWORD PTR [rdi+0x4],0x25
  000a2:    	jne    0x38ddb
  000a8: 26 	cmp    DWORD PTR [rip+0xffffffffffff43bd],0x26        # 0xffff446c
  000af:    	jne    0x38ddb
  000b5:    	mov    rax,QWORD PTR [rbx]
  000b8:    	lea    rdi,[rsp-0x18]
  000bd:    	mov    QWORD PTR [rdi],rax
  000c0:    	mov    QWORD PTR [rbx],rdi
  000c3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000cc:    	mov    QWORD PTR [rsp-0x38],rcx
  000d1:    	mov    rax,QWORD PTR [rbp-0x60]
  000d5:    	mov    QWORD PTR [rsp-0x38],rax
  000da: 00 	mov    rdi,0x1
  000e1:    	mov    rax,QWORD PTR [rbp-0x68]
  000e5:    	mov    QWORD PTR [rsp-0x40],rax
  000ea: 00 	mov    QWORD PTR [rsp-0x30],0x0
  000f3: 05 	movabs rax,0x100050000003b
  000fd:    	mov    QWORD PTR [rsp-0x28],rax
  00102: 78 	movabs r13,0x55788df32010
  0010c:    	call   0xffff515d
  00111:    	lea    rdi,[rbp-0x8]
  00115:    	mov    QWORD PTR [rbx],rdi
  00118: 78 	movabs r13,0x55788deea580
  00122:    	test   rax,rax
  00125:    	je     0xffff1a93
  0012b:    	mov    QWORD PTR [rbp-0x40],rax
:00005 %3 = neg %3                          [Float]
  0012f:    	mov    rdi,QWORD PTR [rbp-0x40]
  00133: 00 	test   rdi,0x1
  0013a:    	jne    0x38dea
  00140: 00 	test   rdi,0x2
  00147:    	je     0x183
  0014d:    	xorps  xmm2,xmm2
  00150: 00 	movabs rax,0x8000000000000002
  0015a:    	cmp    rdi,rax
  0015d:    	je     0x195
  00163:    	mov    rax,rdi
  00166:    	sar    rax,0x3f
  0016a:    	add    rax,0x2
  0016e:    	and    rdi,0xfffffffffffffffc
  00172:    	or     rdi,rax
  00175:    	rol    rdi,0x3d
  00179:    	movq   xmm2,rdi
  0017e:    	jmp    0x195
  00183:    	call   0xffff1acc
  00188:    	test   rax,rax
  0018b:    	je     0x38dea
  00191:    	movq   xmm2,xmm0
  00195: 00 	xorps  xmm2,XMMWORD PTR [rip+0x147c]        # 0x1618
:00006 %7 = %1.call dir()                   [Ray]
:00007 
  0019c:    	mov    rdi,QWORD PTR [rbp-0x30]
  001a0: 00 	test   rdi,0x7
  001a7:    	jne    0x38df9
  001ad:    	cmp    DWORD PTR [rdi+0x4],0x2b
  001b1:    	jne    0x38df9
  001b7: 26 	cmp    DWORD PTR [rip+0xffffffffffff42ae],0x26        # 0xffff446c
  001be:    	jne    0x38df9
  001c4:    	mov    esi,DWORD PTR [rip+0x145a]        # 0x1624
  001ca:    	cmp    esi,0xffffffff
  001cd:    	je     0x38e15
  001d3:    	cmp    WORD PTR [rdi+0x2],0x3
  001d8:    	jne    0x1f1
  001de:    	cmp    esi,0x6
  001e1:    	jge    0x1f1
  001e7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ec:    	jmp    0x20f
  001f1:    	sub    rsp,0x10
  001f5:    	movq   QWORD PTR [rsp],xmm2
  001fa: 78 	movabs rax,0x55788c73bb50
  00204:    	call   rax
  00206:    	movq   xmm2,QWORD PTR [rsp]
  0020b:    	add    rsp,0x10
  0020f:    	mov    QWORD PTR [rbp-0x60],rax
:00009 %8 = @n: Plane[IvarId(1)]
  00213:    	mov    rdi,QWORD PTR [rbp-0x28]
  00217:    	cmp    WORD PTR [rdi+0x2],0x3
  0021c:    	jne    0x38e50
  00222:    	mov    rax,QWORD PTR [rdi+0x18]
  00226:    	mov    QWORD PTR [rbp-0x68],rax
:00010 %4 = %7.call vdot(%8; 1)             [Vec]
:00011 
  0022a:    	mov    rdi,QWORD PTR [rbp-0x60]
  0022e: 00 	test   rdi,0x7
  00235:    	jne    0x38e78
  0023b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0023f:    	jne    0x38e78
  00245: 26 	cmp    DWORD PTR [rip+0xffffffffffff4220],0x26        # 0xffff446c
  0024c:    	jne    0x38e78
  00252:    	sub    rsp,0x10
  00256:    	movq   QWORD PTR [rsp],xmm2
  0025b:    	mov    rax,QWORD PTR [rbx]
  0025e:    	lea    rdi,[rsp-0x18]
  00263:    	mov    QWORD PTR [rdi],rax
  00266:    	mov    QWORD PTR [rbx],rdi
  00269: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00272:    	mov    QWORD PTR [rsp-0x38],rcx
  00277:    	mov    rax,QWORD PTR [rbp-0x60]
  0027b:    	mov    QWORD PTR [rsp-0x38],rax
  00280: 00 	mov    rdi,0x1
  00287:    	mov    rax,QWORD PTR [rbp-0x68]
  0028b:    	mov    QWORD PTR [rsp-0x40],rax
  00290: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00299: 05 	movabs rax,0x100050000003b
  002a3:    	mov    QWORD PTR [rsp-0x28],rax
  002a8: 78 	movabs r13,0x55788df32010
  002b2:    	call   0xffff515d
  002b7:    	lea    rdi,[rbp-0x8]
  002bb:    	mov    QWORD PTR [rbx],rdi
  002be:    	movq   xmm2,QWORD PTR [rsp]
  002c3:    	add    rsp,0x10
  002c7: 78 	movabs r13,0x55788deea600
  002d1:    	test   rax,rax
  002d4:    	je     0xffff1a93
  002da:    	mov    QWORD PTR [rbp-0x48],rax
:00013 %5 = %4
  002de:    	mov    rax,QWORD PTR [rbp-0x48]
  002e2:    	mov    QWORD PTR [rbp-0x50],rax
:00014 %7 = literal[0.0]
  002e6: 00 	movq   xmm3,QWORD PTR [rip+0x133a]        # 0x1628
:00015 _%7 = %4 < %7                        [Float][Float]
:00016 condnotbr _%7 =>:00020
  002ee:    	mov    rdi,QWORD PTR [rbp-0x48]
  002f2: 00 	test   rdi,0x1
  002f9:    	jne    0x38e94
  002ff: 00 	test   rdi,0x2
  00306:    	je     0x342
  0030c:    	xorps  xmm4,xmm4
  0030f: 00 	movabs rax,0x8000000000000002
  00319:    	cmp    rdi,rax
  0031c:    	je     0x354
  00322:    	mov    rax,rdi
  00325:    	sar    rax,0x3f
  00329:    	add    rax,0x2
  0032d:    	and    rdi,0xfffffffffffffffc
  00331:    	or     rdi,rax
  00334:    	rol    rdi,0x3d
  00338:    	movq   xmm4,rdi
  0033d:    	jmp    0x354
  00342:    	call   0xffff1acc
  00347:    	test   rax,rax
  0034a:    	je     0x38e94
  00350:    	movq   xmm4,xmm0
  00354:    	ucomisd xmm4,xmm3
  00358:    	jae    0x38ebd
:00017 %5 = %4
:00018 %5 = neg %5                          [Float]
  0035e:    	movq   xmm5,xmm4
  00362: 00 	xorps  xmm5,XMMWORD PTR [rip+0x12cf]        # 0x1638
:00019 br =>:00020
  00369:    	jmp    0x38ef0
:00020 %7 = literal[1e-17]
  0036e: 00 	movq   xmm3,QWORD PTR [rip+0x12d2]        # 0x1648
:00021 _%7 = %5 < %7                        [Float][Float]
:00022 condnotbr _%7 =>:00026
  00376:    	mov    rdi,QWORD PTR [rbp-0x50]
  0037a: 00 	test   rdi,0x1
  00381:    	jne    0x38f30
  00387: 00 	test   rdi,0x2
  0038e:    	je     0x3ca
  00394:    	xorps  xmm5,xmm5
  00397: 00 	movabs rax,0x8000000000000002
  003a1:    	cmp    rdi,rax
  003a4:    	je     0x3dc
  003aa:    	mov    rax,rdi
  003ad:    	sar    rax,0x3f
  003b1:    	add    rax,0x2
  003b5:    	and    rdi,0xfffffffffffffffc
  003b9:    	or     rdi,rax
  003bc:    	rol    rdi,0x3d
  003c0:    	movq   xmm5,rdi
  003c5:    	jmp    0x3dc
  003ca:    	call   0xffff1acc
  003cf:    	test   rax,rax
  003d2:    	je     0x38f30
  003d8:    	movq   xmm5,xmm0
  003dc:    	ucomisd xmm5,xmm3
  003e0:    	jae    0x3f4
:00023 %7 = nil
  003e6: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00024 ret %7
  003ee:    	mov    rax,QWORD PTR [rbp-0x60]
  003f2:    	leave  
  003f3:    	ret    
:00026 %8 = %1.call org()                   [Ray]
:00027 
  003f4:    	mov    rdi,QWORD PTR [rbp-0x30]
  003f8: 00 	test   rdi,0x7
  003ff:    	jne    0x38f59
  00405:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00409:    	jne    0x38f59
  0040f: 26 	cmp    DWORD PTR [rip+0xffffffffffff4056],0x26        # 0xffff446c
  00416:    	jne    0x38f59
  0041c:    	mov    esi,DWORD PTR [rip+0x1232]        # 0x1654
  00422:    	cmp    esi,0xffffffff
  00425:    	je     0x38f82
  0042b:    	cmp    WORD PTR [rdi+0x2],0x3
  00430:    	jne    0x449
  00436:    	cmp    esi,0x6
  00439:    	jge    0x449
  0043f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00444:    	jmp    0x48b
  00449:    	sub    rsp,0x20
  0044d:    	movq   QWORD PTR [rsp],xmm2
  00452:    	movq   QWORD PTR [rsp+0x8],xmm3
  00458:    	movq   QWORD PTR [rsp+0x10],xmm4
  0045e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00464: 78 	movabs rax,0x55788c73bb50
  0046e:    	call   rax
  00470:    	movq   xmm2,QWORD PTR [rsp]
  00475:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0047b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00481:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00487:    	add    rsp,0x20
  0048b:    	mov    QWORD PTR [rbp-0x68],rax
:00029 %9 = @n: Plane[IvarId(1)]
  0048f:    	mov    rdi,QWORD PTR [rbp-0x28]
  00493:    	cmp    WORD PTR [rdi+0x2],0x3
  00498:    	jne    0x38fe1
  0049e:    	mov    rax,QWORD PTR [rdi+0x18]
  004a2:    	mov    QWORD PTR [rbp-0x70],rax
:00030 %7 = %8.call vdot(%9; 1)             [Vec]
:00031 
  004a6:    	mov    rdi,QWORD PTR [rbp-0x68]
  004aa: 00 	test   rdi,0x7
  004b1:    	jne    0x3902d
  004b7:    	cmp    DWORD PTR [rdi+0x4],0x25
  004bb:    	jne    0x3902d
  004c1: 26 	cmp    DWORD PTR [rip+0xffffffffffff3fa4],0x26        # 0xffff446c
  004c8:    	jne    0x3902d
  004ce:    	sub    rsp,0x20
  004d2:    	movq   QWORD PTR [rsp],xmm2
  004d7:    	movq   QWORD PTR [rsp+0x8],xmm4
  004dd:    	movq   QWORD PTR [rsp+0x10],xmm5
  004e3:    	mov    rax,QWORD PTR [rbx]
  004e6:    	lea    rdi,[rsp-0x18]
  004eb:    	mov    QWORD PTR [rdi],rax
  004ee:    	mov    QWORD PTR [rbx],rdi
  004f1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  004fa:    	mov    QWORD PTR [rsp-0x38],rcx
  004ff:    	mov    rax,QWORD PTR [rbp-0x68]
  00503:    	mov    QWORD PTR [rsp-0x38],rax
  00508: 00 	mov    rdi,0x1
  0050f:    	mov    rax,QWORD PTR [rbp-0x70]
  00513:    	mov    QWORD PTR [rsp-0x40],rax
  00518: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00521: 05 	movabs rax,0x100050000003b
  0052b:    	mov    QWORD PTR [rsp-0x28],rax
  00530: 78 	movabs r13,0x55788df32010
  0053a:    	call   0xffff515d
  0053f:    	lea    rdi,[rbp-0x8]
  00543:    	mov    QWORD PTR [rbx],rdi
  00546:    	movq   xmm2,QWORD PTR [rsp]
  0054b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00551:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00557:    	add    rsp,0x20
  0055b: 78 	movabs r13,0x55788deea740
  00565:    	test   rax,rax
  00568:    	je     0xffff1a93
  0056e:    	mov    QWORD PTR [rbp-0x60],rax
:00033 %7 = %7 + %3                         [Float][Float]
  00572:    	mov    rdi,QWORD PTR [rbp-0x60]
  00576: 00 	test   rdi,0x1
  0057d:    	jne    0x39049
  00583: 00 	test   rdi,0x2
  0058a:    	je     0x5c6
  00590:    	xorps  xmm3,xmm3
  00593: 00 	movabs rax,0x8000000000000002
  0059d:    	cmp    rdi,rax
  005a0:    	je     0x5d8
  005a6:    	mov    rax,rdi
  005a9:    	sar    rax,0x3f
  005ad:    	add    rax,0x2
  005b1:    	and    rdi,0xfffffffffffffffc
  005b5:    	or     rdi,rax
  005b8:    	rol    rdi,0x3d
  005bc:    	movq   xmm3,rdi
  005c1:    	jmp    0x5d8
  005c6:    	call   0xffff1acc
  005cb:    	test   rax,rax
  005ce:    	je     0x39049
  005d4:    	movq   xmm3,xmm0
  005d8:    	addsd  xmm3,xmm2
:00034 %7 = neg %7                          [Float]
  005dc: 00 	xorps  xmm3,XMMWORD PTR [rip+0x1075]        # 0x1658
:00035 %6 = %7 / %4                         [Float][Float]
  005e3:    	movq   xmm6,xmm3
  005e7:    	movq   rax,xmm4
  005ec:    	test   rax,rax
  005ef:    	je     0xffff1ab8
  005f5:    	divsd  xmm6,xmm4
:00036 %7 = literal[0.0]
  005f9: 00 	movq   xmm3,QWORD PTR [rip+0x1067]        # 0x1668
:00037 _%7 = %6 > %7                        [Float][Float]
:00038 condnotbr _%7 =>:00105
  00601:    	ucomisd xmm6,xmm3
  00605:    	jbe    0x39ce5
:00039 %7 = %2.call t()                     [Isect]
:00040 
  0060b:    	mov    rdi,QWORD PTR [rbp-0x38]
  0060f: 00 	test   rdi,0x7
  00616:    	jne    0x39065
  0061c:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00620:    	jne    0x39065
  00626: 26 	cmp    DWORD PTR [rip+0xffffffffffff3e3f],0x26        # 0xffff446c
  0062d:    	jne    0x39065
  00633:    	mov    esi,DWORD PTR [rip+0x103b]        # 0x1674
  00639:    	cmp    esi,0xffffffff
  0063c:    	je     0x3908e
  00642:    	cmp    WORD PTR [rdi+0x2],0x3
  00647:    	jne    0x660
  0064d:    	cmp    esi,0x6
  00650:    	jge    0x660
  00656:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0065b:    	jmp    0x6a2
  00660:    	sub    rsp,0x20
  00664:    	movq   QWORD PTR [rsp],xmm2
  00669:    	movq   QWORD PTR [rsp+0x8],xmm4
  0066f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00675:    	movq   QWORD PTR [rsp+0x18],xmm6
  0067b: 78 	movabs rax,0x55788c73bb50
  00685:    	call   rax
  00687:    	movq   xmm2,QWORD PTR [rsp]
  0068c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00692:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00698:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0069e:    	add    rsp,0x20
  006a2:    	mov    QWORD PTR [rbp-0x60],rax
:00042 _%7 = %6 < %7                        [Float][Float]
:00043 condnotbr _%7 =>:00105
  006a6:    	mov    rdi,QWORD PTR [rbp-0x60]
  006aa: 00 	test   rdi,0x1
  006b1:    	jne    0x390ed
  006b7: 00 	test   rdi,0x2
  006be:    	je     0x6fa
  006c4:    	xorps  xmm3,xmm3
  006c7: 00 	movabs rax,0x8000000000000002
  006d1:    	cmp    rdi,rax
  006d4:    	je     0x70c
  006da:    	mov    rax,rdi
  006dd:    	sar    rax,0x3f
  006e1:    	add    rax,0x2
  006e5:    	and    rdi,0xfffffffffffffffc
  006e9:    	or     rdi,rax
  006ec:    	rol    rdi,0x3d
  006f0:    	movq   xmm3,rdi
  006f5:    	jmp    0x70c
  006fa:    	call   0xffff1acc
  006ff:    	test   rax,rax
  00702:    	je     0x390ed
  00708:    	movq   xmm3,xmm0
  0070c:    	ucomisd xmm6,xmm3
  00710:    	jae    0x39d25
:00044 %7 = literal[true]
  00716: 00 	mov    rax,0x1c
  0071d:    	mov    QWORD PTR [rbp-0x60],rax
:00045 _ = %2.call hit=(%7; 1)              [Isect]
:00046 
  00721:    	mov    rdi,QWORD PTR [rbp-0x38]
  00725: 00 	test   rdi,0x7
  0072c:    	jne    0x39116
  00732:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00736:    	jne    0x39116
  0073c: 26 	cmp    DWORD PTR [rip+0xffffffffffff3d29],0x26        # 0xffff446c
  00743:    	jne    0x39116
  00749:    	mov    esi,DWORD PTR [rip+0xf2d]        # 0x167c
  0074f:    	cmp    esi,0xffffffff
  00752:    	je     0x3913f
  00758:    	cmp    WORD PTR [rdi+0x2],0x3
  0075d:    	jne    0x77a
  00763:    	cmp    esi,0x6
  00766:    	jge    0x77a
  0076c:    	mov    rax,QWORD PTR [rbp-0x60]
  00770:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00775:    	jmp    0x7d3
  0077a:    	sub    rsp,0x20
  0077e:    	movq   QWORD PTR [rsp],xmm2
  00783:    	movq   QWORD PTR [rsp+0x8],xmm4
  00789:    	movq   QWORD PTR [rsp+0x10],xmm5
  0078f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00795:    	mov    rdx,QWORD PTR [rbp-0x60]
  00799: 78 	movabs rax,0x55788c73bdd0
  007a3:    	call   rax
  007a5:    	movq   xmm2,QWORD PTR [rsp]
  007aa:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007b0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007b6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007bc:    	add    rsp,0x20
  007c0: 78 	movabs r13,0x55788deea830
  007ca:    	test   rax,rax
  007cd:    	je     0xffff1a93
:00048 _ = %2.call t=(%6; 1)                [Isect]
:00049 
  007d3:    	movq   xmm0,xmm6
  007d7:    	call   0xffff1bbf
  007dc:    	mov    QWORD PTR [rbp-0x58],rax
  007e0:    	mov    rdi,QWORD PTR [rbp-0x38]
  007e4: 00 	test   rdi,0x7
  007eb:    	jne    0x391a5
  007f1:    	cmp    DWORD PTR [rdi+0x4],0x2d
  007f5:    	jne    0x391a5
  007fb: 26 	cmp    DWORD PTR [rip+0xffffffffffff3c6a],0x26        # 0xffff446c
  00802:    	jne    0x391a5
  00808:    	mov    esi,DWORD PTR [rip+0xe76]        # 0x1684
  0080e:    	cmp    esi,0xffffffff
  00811:    	je     0x391c1
  00817:    	cmp    WORD PTR [rdi+0x2],0x3
  0081c:    	jne    0x839
  00822:    	cmp    esi,0x6
  00825:    	jge    0x839
  0082b:    	mov    rax,QWORD PTR [rbp-0x58]
  0082f:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00834:    	jmp    0x892
  00839:    	sub    rsp,0x20
  0083d:    	movq   QWORD PTR [rsp],xmm2
  00842:    	movq   QWORD PTR [rsp+0x8],xmm4
  00848:    	movq   QWORD PTR [rsp+0x10],xmm5
  0084e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00854:    	mov    rdx,QWORD PTR [rbp-0x58]
  00858: 78 	movabs rax,0x55788c73bdd0
  00862:    	call   rax
  00864:    	movq   xmm2,QWORD PTR [rsp]
  00869:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0086f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00875:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0087b:    	add    rsp,0x20
  0087f: 78 	movabs r13,0x55788deea860
  00889:    	test   rax,rax
  0088c:    	je     0xffff1a93
:00051 %7 = @n: Plane[IvarId(1)]
  00892:    	mov    rdi,QWORD PTR [rbp-0x28]
  00896:    	cmp    WORD PTR [rdi+0x2],0x3
  0089b:    	jne    0x39227
  008a1:    	mov    rax,QWORD PTR [rdi+0x18]
  008a5:    	mov    QWORD PTR [rbp-0x60],rax
:00052 _ = %2.call n=(%7; 1)                [Isect]
:00053 
  008a9:    	mov    rdi,QWORD PTR [rbp-0x38]
  008ad: 00 	test   rdi,0x7
  008b4:    	jne    0x39273
  008ba:    	cmp    DWORD PTR [rdi+0x4],0x2d
  008be:    	jne    0x39273
  008c4: 26 	cmp    DWORD PTR [rip+0xffffffffffff3ba1],0x26        # 0xffff446c
  008cb:    	jne    0x39273
  008d1:    	mov    esi,DWORD PTR [rip+0xdb5]        # 0x168c
  008d7:    	cmp    esi,0xffffffff
  008da:    	je     0x3928f
  008e0:    	cmp    WORD PTR [rdi+0x2],0x3
  008e5:    	jne    0x902
  008eb:    	cmp    esi,0x6
  008ee:    	jge    0x902
  008f4:    	mov    rax,QWORD PTR [rbp-0x60]
  008f8:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  008fd:    	jmp    0x95b
  00902:    	sub    rsp,0x20
  00906:    	movq   QWORD PTR [rsp],xmm2
  0090b:    	movq   QWORD PTR [rsp+0x8],xmm4
  00911:    	movq   QWORD PTR [rsp+0x10],xmm5
  00917:    	movq   QWORD PTR [rsp+0x18],xmm6
  0091d:    	mov    rdx,QWORD PTR [rbp-0x60]
  00921: 78 	movabs rax,0x55788c73bdd0
  0092b:    	call   rax
  0092d:    	movq   xmm2,QWORD PTR [rsp]
  00932:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00938:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0093e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00944:    	add    rsp,0x20
  00948: 78 	movabs r13,0x55788deea8a0
  00952:    	test   rax,rax
  00955:    	je     0xffff1a93
:00055 %8 = const[Vec]                      [Vec]
  0095b: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3b16]        # 0xffff4478
  00962: 00 	cmp    rax,QWORD PTR [rip+0xd3f]        # 0x16a8
  00969:    	jne    0x392f5
  0096f: 00 	mov    rax,QWORD PTR [rip+0xd22]        # 0x1698
  00976:    	mov    QWORD PTR [rbp-0x68],rax
:00056 %10 = %1.call org()                  [Ray]
:00057 
  0097a:    	mov    rdi,QWORD PTR [rbp-0x30]
  0097e: 00 	test   rdi,0x7
  00985:    	jne    0x39371
  0098b:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0098f:    	jne    0x39371
  00995: 26 	cmp    DWORD PTR [rip+0xffffffffffff3ad0],0x26        # 0xffff446c
  0099c:    	jne    0x39371
  009a2:    	mov    esi,DWORD PTR [rip+0xd0c]        # 0x16b4
  009a8:    	cmp    esi,0xffffffff
  009ab:    	je     0x3938d
  009b1:    	cmp    WORD PTR [rdi+0x2],0x3
  009b6:    	jne    0x9cf
  009bc:    	cmp    esi,0x6
  009bf:    	jge    0x9cf
  009c5:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009ca:    	jmp    0xa11
  009cf:    	sub    rsp,0x20
  009d3:    	movq   QWORD PTR [rsp],xmm2
  009d8:    	movq   QWORD PTR [rsp+0x8],xmm4
  009de:    	movq   QWORD PTR [rsp+0x10],xmm5
  009e4:    	movq   QWORD PTR [rsp+0x18],xmm6
  009ea: 78 	movabs rax,0x55788c73bb50
  009f4:    	call   rax
  009f6:    	movq   xmm2,QWORD PTR [rsp]
  009fb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a01:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a07:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a0d:    	add    rsp,0x20
  00a11:    	mov    QWORD PTR [rbp-0x78],rax
:00059 %9 = %10.call x()                    [Vec]
:00060 
  00a15:    	mov    rdi,QWORD PTR [rbp-0x78]
  00a19: 00 	test   rdi,0x7
  00a20:    	jne    0x393ec
  00a26:    	cmp    DWORD PTR [rdi+0x4],0x25
  00a2a:    	jne    0x393ec
  00a30: 26 	cmp    DWORD PTR [rip+0xffffffffffff3a35],0x26        # 0xffff446c
  00a37:    	jne    0x393ec
  00a3d:    	mov    esi,DWORD PTR [rip+0xc79]        # 0x16bc
  00a43:    	cmp    esi,0xffffffff
  00a46:    	je     0x39408
  00a4c:    	cmp    WORD PTR [rdi+0x2],0x3
  00a51:    	jne    0xa6a
  00a57:    	cmp    esi,0x6
  00a5a:    	jge    0xa6a
  00a60:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a65:    	jmp    0xaac
  00a6a:    	sub    rsp,0x20
  00a6e:    	movq   QWORD PTR [rsp],xmm2
  00a73:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a79:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a7f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a85: 78 	movabs rax,0x55788c73bb50
  00a8f:    	call   rax
  00a91:    	movq   xmm2,QWORD PTR [rsp]
  00a96:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a9c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00aa2:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00aa8:    	add    rsp,0x20
  00aac:    	mov    QWORD PTR [rbp-0x70],rax
:00062 %11 = %1.call dir()                  [Ray]
:00063 
  00ab0:    	mov    rdi,QWORD PTR [rbp-0x30]
  00ab4: 00 	test   rdi,0x7
  00abb:    	jne    0x39467
  00ac1:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00ac5:    	jne    0x39467
  00acb: 26 	cmp    DWORD PTR [rip+0xffffffffffff399a],0x26        # 0xffff446c
  00ad2:    	jne    0x39467
  00ad8:    	mov    esi,DWORD PTR [rip+0xbe6]        # 0x16c4
  00ade:    	cmp    esi,0xffffffff
  00ae1:    	je     0x39483
  00ae7:    	cmp    WORD PTR [rdi+0x2],0x3
  00aec:    	jne    0xb05
  00af2:    	cmp    esi,0x6
  00af5:    	jge    0xb05
  00afb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b00:    	jmp    0xb47
  00b05:    	sub    rsp,0x20
  00b09:    	movq   QWORD PTR [rsp],xmm2
  00b0e:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b14:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b1a:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b20: 78 	movabs rax,0x55788c73bb50
  00b2a:    	call   rax
  00b2c:    	movq   xmm2,QWORD PTR [rsp]
  00b31:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b37:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b3d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b43:    	add    rsp,0x20
  00b47:    	mov    QWORD PTR [rbp-0x80],rax
:00065 %10 = %11.call x()                   [Vec]
:00066 
  00b4b:    	mov    rdi,QWORD PTR [rbp-0x80]
  00b4f: 00 	test   rdi,0x7
  00b56:    	jne    0x394e2
  00b5c:    	cmp    DWORD PTR [rdi+0x4],0x25
  00b60:    	jne    0x394e2
  00b66: 26 	cmp    DWORD PTR [rip+0xffffffffffff38ff],0x26        # 0xffff446c
  00b6d:    	jne    0x394e2
  00b73:    	mov    esi,DWORD PTR [rip+0xb53]        # 0x16cc
  00b79:    	cmp    esi,0xffffffff
  00b7c:    	je     0x394fe
  00b82:    	cmp    WORD PTR [rdi+0x2],0x3
  00b87:    	jne    0xba0
  00b8d:    	cmp    esi,0x6
  00b90:    	jge    0xba0
  00b96:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b9b:    	jmp    0xbe2
  00ba0:    	sub    rsp,0x20
  00ba4:    	movq   QWORD PTR [rsp],xmm2
  00ba9:    	movq   QWORD PTR [rsp+0x8],xmm4
  00baf:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bb5:    	movq   QWORD PTR [rsp+0x18],xmm6
  00bbb: 78 	movabs rax,0x55788c73bb50
  00bc5:    	call   rax
  00bc7:    	movq   xmm2,QWORD PTR [rsp]
  00bcc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bd2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00bd8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00bde:    	add    rsp,0x20
  00be2:    	mov    QWORD PTR [rbp-0x78],rax
:00068 %10 = %6 * %10                       [Float][Float]
  00be6:    	mov    rdi,QWORD PTR [rbp-0x78]
  00bea: 00 	test   rdi,0x1
  00bf1:    	jne    0x3955d
  00bf7: 00 	test   rdi,0x2
  00bfe:    	je     0xc3a
  00c04:    	xorps  xmm3,xmm3
  00c07: 00 	movabs rax,0x8000000000000002
  00c11:    	cmp    rdi,rax
  00c14:    	je     0xc4c
  00c1a:    	mov    rax,rdi
  00c1d:    	sar    rax,0x3f
  00c21:    	add    rax,0x2
  00c25:    	and    rdi,0xfffffffffffffffc
  00c29:    	or     rdi,rax
  00c2c:    	rol    rdi,0x3d
  00c30:    	movq   xmm3,rdi
  00c35:    	jmp    0xc4c
  00c3a:    	call   0xffff1acc
  00c3f:    	test   rax,rax
  00c42:    	je     0x3955d
  00c48:    	movq   xmm3,xmm0
  00c4c:    	mulsd  xmm3,xmm6
:00069 %9 = %9 + %10                        [Float][Float]
  00c50:    	mov    rdi,QWORD PTR [rbp-0x70]
  00c54: 00 	test   rdi,0x1
  00c5b:    	jne    0x39579
  00c61: 00 	test   rdi,0x2
  00c68:    	je     0xca4
  00c6e:    	xorps  xmm7,xmm7
  00c71: 00 	movabs rax,0x8000000000000002
  00c7b:    	cmp    rdi,rax
  00c7e:    	je     0xcb6
  00c84:    	mov    rax,rdi
  00c87:    	sar    rax,0x3f
  00c8b:    	add    rax,0x2
  00c8f:    	and    rdi,0xfffffffffffffffc
  00c93:    	or     rdi,rax
  00c96:    	rol    rdi,0x3d
  00c9a:    	movq   xmm7,rdi
  00c9f:    	jmp    0xcb6
  00ca4:    	call   0xffff1acc
  00ca9:    	test   rax,rax
  00cac:    	je     0x39579
  00cb2:    	movq   xmm7,xmm0
  00cb6:    	addsd  xmm7,xmm3
:00070 %11 = %1.call org()                  [Ray]
:00071 
  00cba:    	mov    rdi,QWORD PTR [rbp-0x30]
  00cbe: 00 	test   rdi,0x7
  00cc5:    	jne    0x395a2
  00ccb:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00ccf:    	jne    0x395a2
  00cd5: 26 	cmp    DWORD PTR [rip+0xffffffffffff3790],0x26        # 0xffff446c
  00cdc:    	jne    0x395a2
  00ce2:    	mov    esi,DWORD PTR [rip+0x9ec]        # 0x16d4
  00ce8:    	cmp    esi,0xffffffff
  00ceb:    	je     0x395d8
  00cf1:    	cmp    WORD PTR [rdi+0x2],0x3
  00cf6:    	jne    0xd0f
  00cfc:    	cmp    esi,0x6
  00cff:    	jge    0xd0f
  00d05:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d0a:    	jmp    0xd69
  00d0f:    	sub    rsp,0x30
  00d13:    	movq   QWORD PTR [rsp],xmm2
  00d18:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d1e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d24:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d2a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00d30:    	movq   QWORD PTR [rsp+0x28],xmm7
  00d36: 78 	movabs rax,0x55788c73bb50
  00d40:    	call   rax
  00d42:    	movq   xmm2,QWORD PTR [rsp]
  00d47:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d4d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d53:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d59:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d5f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d65:    	add    rsp,0x30
  00d69:    	mov    QWORD PTR [rbp-0x80],rax
:00073 %10 = %11.call y()                   [Vec]
:00074 
  00d6d:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d71: 00 	test   rdi,0x7
  00d78:    	jne    0x3964f
  00d7e:    	cmp    DWORD PTR [rdi+0x4],0x25
  00d82:    	jne    0x3964f
  00d88: 26 	cmp    DWORD PTR [rip+0xffffffffffff36dd],0x26        # 0xffff446c
  00d8f:    	jne    0x3964f
  00d95:    	mov    esi,DWORD PTR [rip+0x941]        # 0x16dc
  00d9b:    	cmp    esi,0xffffffff
  00d9e:    	je     0x39678
  00da4:    	cmp    WORD PTR [rdi+0x2],0x3
  00da9:    	jne    0xdc2
  00daf:    	cmp    esi,0x6
  00db2:    	jge    0xdc2
  00db8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00dbd:    	jmp    0xe10
  00dc2:    	sub    rsp,0x30
  00dc6:    	movq   QWORD PTR [rsp],xmm2
  00dcb:    	movq   QWORD PTR [rsp+0x8],xmm4
  00dd1:    	movq   QWORD PTR [rsp+0x10],xmm5
  00dd7:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ddd:    	movq   QWORD PTR [rsp+0x20],xmm7
  00de3: 78 	movabs rax,0x55788c73bb50
  00ded:    	call   rax
  00def:    	movq   xmm2,QWORD PTR [rsp]
  00df4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00dfa:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e00:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e06:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00e0c:    	add    rsp,0x30
  00e10:    	mov    QWORD PTR [rbp-0x78],rax
:00076 %12 = %1.call dir()                  [Ray]
:00077 
  00e14:    	mov    rdi,QWORD PTR [rbp-0x30]
  00e18: 00 	test   rdi,0x7
  00e1f:    	jne    0x396e3
  00e25:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00e29:    	jne    0x396e3
  00e2f: 26 	cmp    DWORD PTR [rip+0xffffffffffff3636],0x26        # 0xffff446c
  00e36:    	jne    0x396e3
  00e3c:    	mov    esi,DWORD PTR [rip+0x8a2]        # 0x16e4
  00e42:    	cmp    esi,0xffffffff
  00e45:    	je     0x3970c
  00e4b:    	cmp    WORD PTR [rdi+0x2],0x3
  00e50:    	jne    0xe69
  00e56:    	cmp    esi,0x6
  00e59:    	jge    0xe69
  00e5f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00e64:    	jmp    0xeb7
  00e69:    	sub    rsp,0x30
  00e6d:    	movq   QWORD PTR [rsp],xmm2
  00e72:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e78:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e7e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e84:    	movq   QWORD PTR [rsp+0x20],xmm7
  00e8a: 78 	movabs rax,0x55788c73bb50
  00e94:    	call   rax
  00e96:    	movq   xmm2,QWORD PTR [rsp]
  00e9b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ea1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ea7:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ead:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00eb3:    	add    rsp,0x30
  00eb7: ff 	mov    QWORD PTR [rbp-0x88],rax
:00079 %11 = %12.call y()                   [Vec]
:00080 
  00ebe: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00ec5: 00 	test   rdi,0x7
  00ecc:    	jne    0x39777
  00ed2:    	cmp    DWORD PTR [rdi+0x4],0x25
  00ed6:    	jne    0x39777
  00edc: 26 	cmp    DWORD PTR [rip+0xffffffffffff3589],0x26        # 0xffff446c
  00ee3:    	jne    0x39777
  00ee9:    	mov    esi,DWORD PTR [rip+0x7fd]        # 0x16ec
  00eef:    	cmp    esi,0xffffffff
  00ef2:    	je     0x397a0
  00ef8:    	cmp    WORD PTR [rdi+0x2],0x3
  00efd:    	jne    0xf16
  00f03:    	cmp    esi,0x6
  00f06:    	jge    0xf16
  00f0c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f11:    	jmp    0xf64
  00f16:    	sub    rsp,0x30
  00f1a:    	movq   QWORD PTR [rsp],xmm2
  00f1f:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f25:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f2b:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f31:    	movq   QWORD PTR [rsp+0x20],xmm7
  00f37: 78 	movabs rax,0x55788c73bb50
  00f41:    	call   rax
  00f43:    	movq   xmm2,QWORD PTR [rsp]
  00f48:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f4e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f54:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f5a:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00f60:    	add    rsp,0x30
  00f64:    	mov    QWORD PTR [rbp-0x80],rax
:00082 %11 = %6 * %11                       [Float][Float]
  00f68:    	mov    rdi,QWORD PTR [rbp-0x80]
  00f6c: 00 	test   rdi,0x1
  00f73:    	jne    0x3980b
  00f79: 00 	test   rdi,0x2
  00f80:    	je     0xfbc
  00f86:    	xorps  xmm3,xmm3
  00f89: 00 	movabs rax,0x8000000000000002
  00f93:    	cmp    rdi,rax
  00f96:    	je     0xfce
  00f9c:    	mov    rax,rdi
  00f9f:    	sar    rax,0x3f
  00fa3:    	add    rax,0x2
  00fa7:    	and    rdi,0xfffffffffffffffc
  00fab:    	or     rdi,rax
  00fae:    	rol    rdi,0x3d
  00fb2:    	movq   xmm3,rdi
  00fb7:    	jmp    0xfce
  00fbc:    	call   0xffff1acc
  00fc1:    	test   rax,rax
  00fc4:    	je     0x3980b
  00fca:    	movq   xmm3,xmm0
  00fce:    	mulsd  xmm3,xmm6
:00083 %10 = %10 + %11                      [Float][Float]
  00fd2:    	mov    rdi,QWORD PTR [rbp-0x78]
  00fd6: 00 	test   rdi,0x1
  00fdd:    	jne    0x39834
  00fe3: 00 	test   rdi,0x2
  00fea:    	je     0x1027
  00ff0:    	xorps  xmm8,xmm8
  00ff4: 00 	movabs rax,0x8000000000000002
  00ffe:    	cmp    rdi,rax
  01001:    	je     0x103a
  01007:    	mov    rax,rdi
  0100a:    	sar    rax,0x3f
  0100e:    	add    rax,0x2
  01012:    	and    rdi,0xfffffffffffffffc
  01016:    	or     rdi,rax
  01019:    	rol    rdi,0x3d
  0101d:    	movq   xmm8,rdi
  01022:    	jmp    0x103a
  01027:    	call   0xffff1acc
  0102c:    	test   rax,rax
  0102f:    	je     0x39834
  01035:    	movq   xmm8,xmm0
  0103a:    	addsd  xmm8,xmm3
:00084 %12 = %1.call org()                  [Ray]
:00085 
  0103f:    	mov    rdi,QWORD PTR [rbp-0x30]
  01043: 00 	test   rdi,0x7
  0104a:    	jne    0x3986a
  01050:    	cmp    DWORD PTR [rdi+0x4],0x2b
  01054:    	jne    0x3986a
  0105a: 26 	cmp    DWORD PTR [rip+0xffffffffffff340b],0x26        # 0xffff446c
  01061:    	jne    0x3986a
  01067:    	mov    esi,DWORD PTR [rip+0x687]        # 0x16f4
  0106d:    	cmp    esi,0xffffffff
  01070:    	je     0x398ae
  01076:    	cmp    WORD PTR [rdi+0x2],0x3
  0107b:    	jne    0x1094
  01081:    	cmp    esi,0x6
  01084:    	jge    0x1094
  0108a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0108f:    	jmp    0x10fc
  01094:    	sub    rsp,0x40
  01098:    	movq   QWORD PTR [rsp],xmm2
  0109d:    	movq   QWORD PTR [rsp+0x8],xmm3
  010a3:    	movq   QWORD PTR [rsp+0x10],xmm4
  010a9:    	movq   QWORD PTR [rsp+0x18],xmm5
  010af:    	movq   QWORD PTR [rsp+0x20],xmm6
  010b5:    	movq   QWORD PTR [rsp+0x28],xmm7
  010bb: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  010c2: 78 	movabs rax,0x55788c73bb50
  010cc:    	call   rax
  010ce:    	movq   xmm2,QWORD PTR [rsp]
  010d3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010d9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010df:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010e5:    	movq   xmm6,QWORD PTR [rsp+0x20]
  010eb:    	movq   xmm7,QWORD PTR [rsp+0x28]
  010f1: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  010f8:    	add    rsp,0x40
  010fc: ff 	mov    QWORD PTR [rbp-0x88],rax
:00087 %11 = %12.call z()                   [Vec]
:00088 
  01103: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0110a: 00 	test   rdi,0x7
  01111:    	jne    0x39933
  01117:    	cmp    DWORD PTR [rdi+0x4],0x25
  0111b:    	jne    0x39933
  01121: 26 	cmp    DWORD PTR [rip+0xffffffffffff3344],0x26        # 0xffff446c
  01128:    	jne    0x39933
  0112e:    	mov    esi,DWORD PTR [rip+0x5c8]        # 0x16fc
  01134:    	cmp    esi,0xffffffff
  01137:    	je     0x3996a
  0113d:    	cmp    WORD PTR [rdi+0x2],0x3
  01142:    	jne    0x115b
  01148:    	cmp    esi,0x6
  0114b:    	jge    0x115b
  01151:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01156:    	jmp    0x11b7
  0115b:    	sub    rsp,0x30
  0115f:    	movq   QWORD PTR [rsp],xmm2
  01164:    	movq   QWORD PTR [rsp+0x8],xmm4
  0116a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01170:    	movq   QWORD PTR [rsp+0x18],xmm6
  01176:    	movq   QWORD PTR [rsp+0x20],xmm7
  0117c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01183: 78 	movabs rax,0x55788c73bb50
  0118d:    	call   rax
  0118f:    	movq   xmm2,QWORD PTR [rsp]
  01194:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0119a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011a0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011a6:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011ac: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  011b3:    	add    rsp,0x30
  011b7:    	mov    QWORD PTR [rbp-0x80],rax
:00090 %13 = %1.call dir()                  [Ray]
:00091 
  011bb:    	mov    rdi,QWORD PTR [rbp-0x30]
  011bf: 00 	test   rdi,0x7
  011c6:    	jne    0x399e3
  011cc:    	cmp    DWORD PTR [rdi+0x4],0x2b
  011d0:    	jne    0x399e3
  011d6: 26 	cmp    DWORD PTR [rip+0xffffffffffff328f],0x26        # 0xffff446c
  011dd:    	jne    0x399e3
  011e3:    	mov    esi,DWORD PTR [rip+0x51b]        # 0x1704
  011e9:    	cmp    esi,0xffffffff
  011ec:    	je     0x39a1a
  011f2:    	cmp    WORD PTR [rdi+0x2],0x3
  011f7:    	jne    0x1210
  011fd:    	cmp    esi,0x6
  01200:    	jge    0x1210
  01206:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0120b:    	jmp    0x126c
  01210:    	sub    rsp,0x30
  01214:    	movq   QWORD PTR [rsp],xmm2
  01219:    	movq   QWORD PTR [rsp+0x8],xmm4
  0121f:    	movq   QWORD PTR [rsp+0x10],xmm5
  01225:    	movq   QWORD PTR [rsp+0x18],xmm6
  0122b:    	movq   QWORD PTR [rsp+0x20],xmm7
  01231: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01238: 78 	movabs rax,0x55788c73bb50
  01242:    	call   rax
  01244:    	movq   xmm2,QWORD PTR [rsp]
  01249:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0124f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01255:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0125b:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01261: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01268:    	add    rsp,0x30
  0126c: ff 	mov    QWORD PTR [rbp-0x90],rax
:00093 %12 = %13.call z()                   [Vec]
:00094 
  01273: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0127a: 00 	test   rdi,0x7
  01281:    	jne    0x39a93
  01287:    	cmp    DWORD PTR [rdi+0x4],0x25
  0128b:    	jne    0x39a93
  01291: 26 	cmp    DWORD PTR [rip+0xffffffffffff31d4],0x26        # 0xffff446c
  01298:    	jne    0x39a93
  0129e:    	mov    esi,DWORD PTR [rip+0x468]        # 0x170c
  012a4:    	cmp    esi,0xffffffff
  012a7:    	je     0x39aca
  012ad:    	cmp    WORD PTR [rdi+0x2],0x3
  012b2:    	jne    0x12cb
  012b8:    	cmp    esi,0x6
  012bb:    	jge    0x12cb
  012c1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  012c6:    	jmp    0x1327
  012cb:    	sub    rsp,0x30
  012cf:    	movq   QWORD PTR [rsp],xmm2
  012d4:    	movq   QWORD PTR [rsp+0x8],xmm4
  012da:    	movq   QWORD PTR [rsp+0x10],xmm5
  012e0:    	movq   QWORD PTR [rsp+0x18],xmm6
  012e6:    	movq   QWORD PTR [rsp+0x20],xmm7
  012ec: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  012f3: 78 	movabs rax,0x55788c73bb50
  012fd:    	call   rax
  012ff:    	movq   xmm2,QWORD PTR [rsp]
  01304:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0130a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01310:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01316:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0131c: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01323:    	add    rsp,0x30
  01327: ff 	mov    QWORD PTR [rbp-0x88],rax
:00096 %12 = %6 * %12                       [Float][Float]
  0132e: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01335: 00 	test   rdi,0x1
  0133c:    	jne    0x39b43
  01342: 00 	test   rdi,0x2
  01349:    	je     0x1385
  0134f:    	xorps  xmm3,xmm3
  01352: 00 	movabs rax,0x8000000000000002
  0135c:    	cmp    rdi,rax
  0135f:    	je     0x1397
  01365:    	mov    rax,rdi
  01368:    	sar    rax,0x3f
  0136c:    	add    rax,0x2
  01370:    	and    rdi,0xfffffffffffffffc
  01374:    	or     rdi,rax
  01377:    	rol    rdi,0x3d
  0137b:    	movq   xmm3,rdi
  01380:    	jmp    0x1397
  01385:    	call   0xffff1acc
  0138a:    	test   rax,rax
  0138d:    	je     0x39b43
  01393:    	movq   xmm3,xmm0
  01397:    	mulsd  xmm3,xmm6
:00097 %11 = %11 + %12                      [Float][Float]
  0139b:    	mov    rdi,QWORD PTR [rbp-0x80]
  0139f: 00 	test   rdi,0x1
  013a6:    	jne    0x39b7a
  013ac: 00 	test   rdi,0x2
  013b3:    	je     0x13f0
  013b9:    	xorps  xmm9,xmm9
  013bd: 00 	movabs rax,0x8000000000000002
  013c7:    	cmp    rdi,rax
  013ca:    	je     0x1403
  013d0:    	mov    rax,rdi
  013d3:    	sar    rax,0x3f
  013d7:    	add    rax,0x2
  013db:    	and    rdi,0xfffffffffffffffc
  013df:    	or     rdi,rax
  013e2:    	rol    rdi,0x3d
  013e6:    	movq   xmm9,rdi
  013eb:    	jmp    0x1403
  013f0:    	call   0xffff1acc
  013f5:    	test   rax,rax
  013f8:    	je     0x39b7a
  013fe:    	movq   xmm9,xmm0
  01403:    	addsd  xmm9,xmm3
:00098 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
:00099 
  01408:    	movq   xmm0,xmm7
  0140c:    	call   0xffff1bbf
  01411:    	mov    QWORD PTR [rbp-0x70],rax
  01415:    	movq   xmm0,xmm8
  0141a:    	call   0xffff1bbf
  0141f:    	mov    QWORD PTR [rbp-0x78],rax
  01423:    	movq   xmm0,xmm9
  01428:    	call   0xffff1bbf
  0142d:    	mov    QWORD PTR [rbp-0x80],rax
  01431:    	mov    rdi,QWORD PTR [rbp-0x68]
  01435: 00 	test   rdi,0x7
  0143c:    	jne    0x39bc1
  01442:    	cmp    DWORD PTR [rdi+0x4],0x26
  01446:    	jne    0x39bc1
  0144c: 26 	cmp    DWORD PTR [rip+0xffffffffffff3019],0x26        # 0xffff446c
  01453:    	jne    0x39bc1
  01459: 00 	mov    r9,0x0
  01460:    	sub    rsp,0x40
  01464:    	movq   QWORD PTR [rsp],xmm2
  01469:    	movq   QWORD PTR [rsp+0x8],xmm3
  0146f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01475:    	movq   QWORD PTR [rsp+0x18],xmm5
  0147b:    	movq   QWORD PTR [rsp+0x20],xmm6
  01481:    	movq   QWORD PTR [rsp+0x28],xmm7
  01487: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0148e: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01495:    	mov    rdx,rdi
  01498:    	mov    rax,QWORD PTR [rbx]
  0149b:    	lea    rdi,[rsp-0x18]
  014a0:    	mov    QWORD PTR [rdi],rax
  014a3:    	mov    QWORD PTR [rbx],rdi
  014a6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014af:    	mov    QWORD PTR [rsp-0x38],rcx
  014b4:    	lea    rcx,[rbp-0x70]
  014b8: 00 	mov    r8,0x3
  014bf:    	call   0x39bed
  014c4:    	lea    rdi,[rbp-0x8]
  014c8:    	mov    QWORD PTR [rbx],rdi
  014cb:    	movq   xmm2,QWORD PTR [rsp]
  014d0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014d6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014dc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014e2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  014e8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  014ee: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  014f5: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  014fc:    	add    rsp,0x40
  01500: 78 	movabs r13,0x55788deeab80
  0150a:    	test   rax,rax
  0150d:    	je     0xffff1a93
  01513:    	mov    QWORD PTR [rbp-0x60],rax
:00101 _ = %2.call pl=(%7; 1)               [Isect]
:00102 
  01517:    	mov    rdi,QWORD PTR [rbp-0x38]
  0151b: 00 	test   rdi,0x7
  01522:    	jne    0x39c1f
  01528:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0152c:    	jne    0x39c1f
  01532: 26 	cmp    DWORD PTR [rip+0xffffffffffff2f33],0x26        # 0xffff446c
  01539:    	jne    0x39c1f
  0153f:    	mov    esi,DWORD PTR [rip+0x1cf]        # 0x1714
  01545:    	cmp    esi,0xffffffff
  01548:    	je     0x39c4b
  0154e:    	cmp    WORD PTR [rdi+0x2],0x3
  01553:    	jne    0x1570
  01559:    	cmp    esi,0x6
  0155c:    	jge    0x1570
  01562:    	mov    rax,QWORD PTR [rbp-0x60]
  01566:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0156b:    	jmp    0x15fd
  01570:    	sub    rsp,0x40
  01574:    	movq   QWORD PTR [rsp],xmm2
  01579:    	movq   QWORD PTR [rsp+0x8],xmm3
  0157f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01585:    	movq   QWORD PTR [rsp+0x18],xmm5
  0158b:    	movq   QWORD PTR [rsp+0x20],xmm6
  01591:    	movq   QWORD PTR [rsp+0x28],xmm7
  01597: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0159e: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015a5:    	mov    rdx,QWORD PTR [rbp-0x60]
  015a9: 78 	movabs rax,0x55788c73bdd0
  015b3:    	call   rax
  015b5:    	movq   xmm2,QWORD PTR [rsp]
  015ba:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015c0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015c6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015cc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  015d2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  015d8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  015df: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  015e6:    	add    rsp,0x40
  015ea: 78 	movabs r13,0x55788deeabb0
  015f4:    	test   rax,rax
  015f7:    	je     0xffff1a93
:00104 br =>:00105
  015fd:    	jmp    0x39d58
:00105 %7 = nil
  01602: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00106 ret %7
  0160a:    	mov    rax,QWORD PTR [rbp-0x60]
  0160e:    	leave  
  0160f:    	ret    
==> start whole compile: <unnamed> FuncId(73) self_class:Scene start:[00000] bytecode:0x55788dee0f70
<== finished compile. elapsed:344.9µs
offset:Pos(64704) code: 8900 bytes  data: 420 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xb0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d:    	mov    rdi,QWORD PTR [rbp-0x28]
  00061: 00 	test   rdi,0x7
  00068:    	jne    0x38676
  0006e:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00072:    	jne    0x38676
:00000 %13 = %0.call rand()                 [Scene]
:00001 
  00078:    	mov    rdi,QWORD PTR [rbp-0x28]
  0007c: 26 	cmp    DWORD PTR [rip+0xffffffffffff2cd1],0x26        # 0xffff2d54
  00083:    	jne    0x38685
  00089: 00 	mov    r9,0x0
  00090:    	mov    rdx,rdi
  00093:    	mov    rax,QWORD PTR [rbx]
  00096:    	lea    rdi,[rsp-0x18]
  0009b:    	mov    QWORD PTR [rdi],rax
  0009e:    	mov    QWORD PTR [rbx],rdi
  000a1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000aa:    	mov    QWORD PTR [rsp-0x38],rcx
  000af: ff 	lea    rcx,[rbp-0x98]
  000b6: 00 	mov    r8,0x0
  000bd:    	call   0x38694
  000c2:    	lea    rdi,[rbp-0x8]
  000c6:    	mov    QWORD PTR [rbx],rdi
  000c9: 78 	movabs r13,0x55788dee0f90
  000d3:    	test   rax,rax
  000d6:    	je     0xffff037b
  000dc: ff 	mov    QWORD PTR [rbp-0x90],rax
:00003 %2 = %13
  000e3: ff 	mov    rax,QWORD PTR [rbp-0x90]
  000ea:    	mov    QWORD PTR [rbp-0x38],rax
:00004 %13 = literal[2.0]
  000ee: 00 	movq   xmm2,QWORD PTR [rip+0x21da]        # 0x22d0
:00005 %14 = literal[3.14159265]
  000f6: 00 	movq   xmm3,QWORD PTR [rip+0x21e2]        # 0x22e0
:00006 %13 = %13 * %14                      [Float][Float]
  000fe:    	mulsd  xmm2,xmm3
:00007 %14 = %0.call rand()                 [Scene]
:00008 
  00102:    	mov    rdi,QWORD PTR [rbp-0x28]
  00106: 26 	cmp    DWORD PTR [rip+0xffffffffffff2c47],0x26        # 0xffff2d54
  0010d:    	jne    0x386c6
  00113: 00 	mov    r9,0x0
  0011a:    	sub    rsp,0x10
  0011e:    	movq   QWORD PTR [rsp],xmm2
  00123:    	mov    rdx,rdi
  00126:    	mov    rax,QWORD PTR [rbx]
  00129:    	lea    rdi,[rsp-0x18]
  0012e:    	mov    QWORD PTR [rdi],rax
  00131:    	mov    QWORD PTR [rbx],rdi
  00134: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0013d:    	mov    QWORD PTR [rsp-0x38],rcx
  00142: ff 	lea    rcx,[rbp-0xa0]
  00149: 00 	mov    r8,0x0
  00150:    	call   0x386e5
  00155:    	lea    rdi,[rbp-0x8]
  00159:    	mov    QWORD PTR [rbx],rdi
  0015c:    	movq   xmm2,QWORD PTR [rsp]
  00161:    	add    rsp,0x10
  00165: 78 	movabs r13,0x55788dee1000
  0016f:    	test   rax,rax
  00172:    	je     0xffff037b
  00178: ff 	mov    QWORD PTR [rbp-0x98],rax
:00010 %3 = %13 * %14                       [Float][Float]
  0017f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00186: 00 	test   rdi,0x1
  0018d:    	jne    0x38717
  00193: 00 	test   rdi,0x2
  0019a:    	je     0x1d6
  001a0:    	xorps  xmm3,xmm3
  001a3: 00 	movabs rax,0x8000000000000002
  001ad:    	cmp    rdi,rax
  001b0:    	je     0x1e8
  001b6:    	mov    rax,rdi
  001b9:    	sar    rax,0x3f
  001bd:    	add    rax,0x2
  001c1:    	and    rdi,0xfffffffffffffffc
  001c5:    	or     rdi,rax
  001c8:    	rol    rdi,0x3d
  001cc:    	movq   xmm3,rdi
  001d1:    	jmp    0x1e8
  001d6:    	call   0xffff03b4
  001db:    	test   rax,rax
  001de:    	je     0x38717
  001e4:    	movq   xmm3,xmm0
  001e8:    	movq   xmm4,xmm2
  001ec:    	mulsd  xmm4,xmm3
:00011 %14 = const[Math]                    [Math]
  001f0: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2b69]        # 0xffff2d60
  001f7: 00 	cmp    rax,QWORD PTR [rip+0x2102]        # 0x2300
  001fe:    	jne    0x38736
  00204: 00 	mov    rax,QWORD PTR [rip+0x20e5]        # 0x22f0
  0020b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %15 = %3
:00013 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
:00014 
  00212: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00219: 00 	test   rdi,0x7
  00220:    	jne    0x3879a
  00226:    	cmp    DWORD PTR [rdi+0x4],0x20
  0022a:    	jne    0x3879a
  00230: 26 	cmp    DWORD PTR [rip+0xffffffffffff2b1d],0x26        # 0xffff2d54
  00237:    	jne    0x3879a
  0023d:    	sub    rsp,0x10
  00241:    	movq   QWORD PTR [rsp],xmm2
  00246:    	movq   QWORD PTR [rsp+0x8],xmm4
  0024c:    	movq   xmm0,xmm4
  00250: 78 	movabs rax,0x55788c77cfd0
  0025a:    	call   rax
  0025c:    	movq   xmm2,QWORD PTR [rsp]
  00261:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00267:    	add    rsp,0x10
  0026b:    	movq   xmm2,xmm0
:00016 %15 = const[Math]                    [Math]
  0026f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2aea]        # 0xffff2d60
  00276: 00 	cmp    rax,QWORD PTR [rip+0x20a3]        # 0x2320
  0027d:    	jne    0x387bd
  00283: 00 	mov    rax,QWORD PTR [rip+0x2086]        # 0x2310
  0028a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00017 %16 = literal[1.0]
  00291: 00 	movq   xmm3,QWORD PTR [rip+0x2097]        # 0x2330
:00018 %16 = %16 - %2                       [Float][Float]
  00299:    	mov    rdi,QWORD PTR [rbp-0x38]
  0029d: 00 	test   rdi,0x1
  002a4:    	jne    0x38821
  002aa: 00 	test   rdi,0x2
  002b1:    	je     0x2ed
  002b7:    	xorps  xmm5,xmm5
  002ba: 00 	movabs rax,0x8000000000000002
  002c4:    	cmp    rdi,rax
  002c7:    	je     0x2ff
  002cd:    	mov    rax,rdi
  002d0:    	sar    rax,0x3f
  002d4:    	add    rax,0x2
  002d8:    	and    rdi,0xfffffffffffffffc
  002dc:    	or     rdi,rax
  002df:    	rol    rdi,0x3d
  002e3:    	movq   xmm5,rdi
  002e8:    	jmp    0x2ff
  002ed:    	call   0xffff03b4
  002f2:    	test   rax,rax
  002f5:    	je     0x38821
  002fb:    	movq   xmm5,xmm0
  002ff:    	subsd  xmm3,xmm5
:00019 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
:00020 
  00303: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0030a: 00 	test   rdi,0x7
  00311:    	jne    0x3885d
  00317:    	cmp    DWORD PTR [rdi+0x4],0x20
  0031b:    	jne    0x3885d
  00321: 26 	cmp    DWORD PTR [rip+0xffffffffffff2a2c],0x26        # 0xffff2d54
  00328:    	jne    0x3885d
  0032e:    	sqrtsd xmm6,xmm3
:00022 %4 = %13 * %14                       [Float][Float]
  00332:    	movq   xmm7,xmm2
  00336:    	mulsd  xmm7,xmm6
:00023 %14 = const[Math]                    [Math]
  0033a: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2a1f]        # 0xffff2d60
  00341: 00 	cmp    rax,QWORD PTR [rip+0x2008]        # 0x2350
  00348:    	jne    0x38899
  0034e: 00 	mov    rax,QWORD PTR [rip+0x1feb]        # 0x2340
  00355: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %15 = %3
:00025 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
:00026 
  0035c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00363: 00 	test   rdi,0x7
  0036a:    	jne    0x38921
  00370:    	cmp    DWORD PTR [rdi+0x4],0x20
  00374:    	jne    0x38921
  0037a: 26 	cmp    DWORD PTR [rip+0xffffffffffff29d3],0x26        # 0xffff2d54
  00381:    	jne    0x38921
  00387:    	sub    rsp,0x30
  0038b:    	movq   QWORD PTR [rsp],xmm2
  00390:    	movq   QWORD PTR [rsp+0x8],xmm3
  00396:    	movq   QWORD PTR [rsp+0x10],xmm4
  0039c:    	movq   QWORD PTR [rsp+0x18],xmm5
  003a2:    	movq   QWORD PTR [rsp+0x20],xmm7
  003a8:    	movq   xmm0,xmm4
  003ac: 78 	movabs rax,0x55788c77cfe0
  003b6:    	call   rax
  003b8:    	movq   xmm2,QWORD PTR [rsp]
  003bd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003c3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003c9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  003cf:    	movq   xmm7,QWORD PTR [rsp+0x20]
  003d5:    	add    rsp,0x30
  003d9:    	movq   xmm2,xmm0
:00028 %15 = const[Math]                    [Math]
  003dd: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff297c]        # 0xffff2d60
  003e4: 00 	cmp    rax,QWORD PTR [rip+0x1f85]        # 0x2370
  003eb:    	jne    0x38961
  003f1: 00 	mov    rax,QWORD PTR [rip+0x1f68]        # 0x2360
  003f8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00029 %16 = literal[1.0]
  003ff: 00 	movq   xmm3,QWORD PTR [rip+0x1f79]        # 0x2380
:00030 %16 = %16 - %2                       [Float][Float]
  00407:    	subsd  xmm3,xmm5
:00031 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
:00032 
  0040b: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00412: 00 	test   rdi,0x7
  00419:    	jne    0x389e9
  0041f:    	cmp    DWORD PTR [rdi+0x4],0x20
  00423:    	jne    0x389e9
  00429: 26 	cmp    DWORD PTR [rip+0xffffffffffff2924],0x26        # 0xffff2d54
  00430:    	jne    0x389e9
  00436:    	sqrtsd xmm6,xmm3
:00034 %5 = %13 * %14                       [Float][Float]
  0043a:    	movq   xmm8,xmm2
  0043f:    	mulsd  xmm8,xmm6
:00035 %13 = const[Math]                    [Math]
  00444: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2915]        # 0xffff2d60
  0044b: 00 	cmp    rax,QWORD PTR [rip+0x1f4e]        # 0x23a0
  00452:    	jne    0x38a32
  00458: 00 	mov    rax,QWORD PTR [rip+0x1f31]        # 0x2390
  0045f: ff 	mov    QWORD PTR [rbp-0x90],rax
:00036 %14 = %2
:00037 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
:00038 
  00466: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0046d: 00 	test   rdi,0x7
  00474:    	jne    0x38ac8
  0047a:    	cmp    DWORD PTR [rdi+0x4],0x20
  0047e:    	jne    0x38ac8
  00484: 26 	cmp    DWORD PTR [rip+0xffffffffffff28c9],0x26        # 0xffff2d54
  0048b:    	jne    0x38ac8
  00491:    	sqrtsd xmm2,xmm5
:00040 %14 = dynvar(2, %2)
  00495:    	mov    rax,QWORD PTR [rbp-0x10]
  00499:    	mov    rax,QWORD PTR [rax]
  0049c:    	mov    rax,QWORD PTR [rax-0x28]
  004a0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00041 %15 = 0: i32
  004a7: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00042 %14 = %14.[%15]
  004b2:    	sub    rsp,0x30
  004b6:    	movq   QWORD PTR [rsp],xmm2
  004bb:    	movq   QWORD PTR [rsp+0x8],xmm3
  004c1:    	movq   QWORD PTR [rsp+0x10],xmm4
  004c7:    	movq   QWORD PTR [rsp+0x18],xmm5
  004cd:    	movq   QWORD PTR [rsp+0x20],xmm7
  004d3: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  004da: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  004e1: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  004e8:    	mov    rdi,rbx
  004eb:    	mov    rsi,r12
  004ee: 78 	movabs rax,0x55788c797be0
  004f8:    	call   rax
  004fa:    	movq   xmm2,QWORD PTR [rsp]
  004ff:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00505:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0050b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00511:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00517: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0051e:    	add    rsp,0x30
  00522: 78 	movabs r13,0x55788dee1220
  0052c:    	test   rax,rax
  0052f:    	je     0xffff037b
  00535: ff 	mov    QWORD PTR [rbp-0x98],rax
:00043 %13 = %14.call x()                   [Vec]
:00044 
  0053c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00543: 00 	test   rdi,0x7
  0054a:    	jne    0x38b1f
  00550:    	cmp    DWORD PTR [rdi+0x4],0x25
  00554:    	jne    0x38b1f
  0055a: 26 	cmp    DWORD PTR [rip+0xffffffffffff27f3],0x26        # 0xffff2d54
  00561:    	jne    0x38b1f
  00567:    	mov    esi,DWORD PTR [rip+0x1e3f]        # 0x23ac
  0056d:    	cmp    esi,0xffffffff
  00570:    	je     0x38b73
  00576:    	cmp    WORD PTR [rdi+0x2],0x3
  0057b:    	jne    0x594
  00581:    	cmp    esi,0x6
  00584:    	jge    0x594
  0058a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0058f:    	jmp    0x5f0
  00594:    	sub    rsp,0x30
  00598:    	movq   QWORD PTR [rsp],xmm2
  0059d:    	movq   QWORD PTR [rsp+0x8],xmm3
  005a3:    	movq   QWORD PTR [rsp+0x10],xmm4
  005a9:    	movq   QWORD PTR [rsp+0x18],xmm5
  005af:    	movq   QWORD PTR [rsp+0x20],xmm7
  005b5: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  005bc: 78 	movabs rax,0x55788c73bb50
  005c6:    	call   rax
  005c8:    	movq   xmm2,QWORD PTR [rsp]
  005cd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005d3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005d9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005df:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005e5: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  005ec:    	add    rsp,0x30
  005f0: ff 	mov    QWORD PTR [rbp-0x90],rax
:00046 %13 = %4 * %13                       [Float][Float]
  005f7: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  005fe: 00 	test   rdi,0x1
  00605:    	jne    0x38bec
  0060b: 00 	test   rdi,0x2
  00612:    	je     0x64e
  00618:    	xorps  xmm6,xmm6
  0061b: 00 	movabs rax,0x8000000000000002
  00625:    	cmp    rdi,rax
  00628:    	je     0x660
  0062e:    	mov    rax,rdi
  00631:    	sar    rax,0x3f
  00635:    	add    rax,0x2
  00639:    	and    rdi,0xfffffffffffffffc
  0063d:    	or     rdi,rax
  00640:    	rol    rdi,0x3d
  00644:    	movq   xmm6,rdi
  00649:    	jmp    0x660
  0064e:    	call   0xffff03b4
  00653:    	test   rax,rax
  00656:    	je     0x38bec
  0065c:    	movq   xmm6,xmm0
  00660:    	mulsd  xmm6,xmm7
:00047 %15 = dynvar(2, %2)
  00664:    	mov    rax,QWORD PTR [rbp-0x10]
  00668:    	mov    rax,QWORD PTR [rax]
  0066b:    	mov    rax,QWORD PTR [rax-0x28]
  0066f: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00048 %16 = 1: i32
  00676: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00049 %15 = %15.[%16]
  00681:    	sub    rsp,0x30
  00685:    	movq   QWORD PTR [rsp],xmm2
  0068a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00690:    	movq   QWORD PTR [rsp+0x10],xmm5
  00696:    	movq   QWORD PTR [rsp+0x18],xmm6
  0069c:    	movq   QWORD PTR [rsp+0x20],xmm7
  006a2: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  006a9: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  006b0: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  006b7:    	mov    rdi,rbx
  006ba:    	mov    rsi,r12
  006bd: 78 	movabs rax,0x55788c797be0
  006c7:    	call   rax
  006c9:    	movq   xmm2,QWORD PTR [rsp]
  006ce:    	movq   xmm4,QWORD PTR [rsp+0x8]
  006d4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  006da:    	movq   xmm6,QWORD PTR [rsp+0x18]
  006e0:    	movq   xmm7,QWORD PTR [rsp+0x20]
  006e6: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  006ed:    	add    rsp,0x30
  006f1: 78 	movabs r13,0x55788dee1290
  006fb:    	test   rax,rax
  006fe:    	je     0xffff037b
  00704: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00050 %14 = %15.call x()                   [Vec]
:00051 
  0070b: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00712: 00 	test   rdi,0x7
  00719:    	jne    0x38c40
  0071f:    	cmp    DWORD PTR [rdi+0x4],0x25
  00723:    	jne    0x38c40
  00729: 26 	cmp    DWORD PTR [rip+0xffffffffffff2624],0x26        # 0xffff2d54
  00730:    	jne    0x38c40
  00736:    	mov    esi,DWORD PTR [rip+0x1c78]        # 0x23b4
  0073c:    	cmp    esi,0xffffffff
  0073f:    	je     0x38c94
  00745:    	cmp    WORD PTR [rdi+0x2],0x3
  0074a:    	jne    0x763
  00750:    	cmp    esi,0x6
  00753:    	jge    0x763
  00759:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0075e:    	jmp    0x7bf
  00763:    	sub    rsp,0x30
  00767:    	movq   QWORD PTR [rsp],xmm2
  0076c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00772:    	movq   QWORD PTR [rsp+0x10],xmm5
  00778:    	movq   QWORD PTR [rsp+0x18],xmm6
  0077e:    	movq   QWORD PTR [rsp+0x20],xmm7
  00784: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0078b: 78 	movabs rax,0x55788c73bb50
  00795:    	call   rax
  00797:    	movq   xmm2,QWORD PTR [rsp]
  0079c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  007a2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007a8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  007ae:    	movq   xmm7,QWORD PTR [rsp+0x20]
  007b4: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  007bb:    	add    rsp,0x30
  007bf: ff 	mov    QWORD PTR [rbp-0x98],rax
:00053 %14 = %5 * %14                       [Float][Float]
  007c6: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  007cd: 00 	test   rdi,0x1
  007d4:    	jne    0x38d0d
  007da: 00 	test   rdi,0x2
  007e1:    	je     0x81d
  007e7:    	xorps  xmm3,xmm3
  007ea: 00 	movabs rax,0x8000000000000002
  007f4:    	cmp    rdi,rax
  007f7:    	je     0x82f
  007fd:    	mov    rax,rdi
  00800:    	sar    rax,0x3f
  00804:    	add    rax,0x2
  00808:    	and    rdi,0xfffffffffffffffc
  0080c:    	or     rdi,rax
  0080f:    	rol    rdi,0x3d
  00813:    	movq   xmm3,rdi
  00818:    	jmp    0x82f
  0081d:    	call   0xffff03b4
  00822:    	test   rax,rax
  00825:    	je     0x38d0d
  0082b:    	movq   xmm3,xmm0
  0082f:    	mulsd  xmm3,xmm8
:00054 %13 = %13 + %14                      [Float][Float]
  00834:    	addsd  xmm6,xmm3
:00055 %15 = dynvar(2, %2)
  00838:    	mov    rax,QWORD PTR [rbp-0x10]
  0083c:    	mov    rax,QWORD PTR [rax]
  0083f:    	mov    rax,QWORD PTR [rax-0x28]
  00843: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00056 %16 = 2: i32
  0084a: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00057 %15 = %15.[%16]
  00855:    	sub    rsp,0x40
  00859:    	movq   QWORD PTR [rsp],xmm2
  0085e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00864:    	movq   QWORD PTR [rsp+0x10],xmm4
  0086a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00870:    	movq   QWORD PTR [rsp+0x20],xmm6
  00876:    	movq   QWORD PTR [rsp+0x28],xmm7
  0087c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00883: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  0088a: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00891:    	mov    rdi,rbx
  00894:    	mov    rsi,r12
  00897: 78 	movabs rax,0x55788c797be0
  008a1:    	call   rax
  008a3:    	movq   xmm2,QWORD PTR [rsp]
  008a8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008ae:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008b4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008ba:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008c0:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008c6: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008cd:    	add    rsp,0x40
  008d1: 78 	movabs r13,0x55788dee1310
  008db:    	test   rax,rax
  008de:    	je     0xffff037b
  008e4: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00058 %14 = %15.call x()                   [Vec]
:00059 
  008eb: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  008f2: 00 	test   rdi,0x7
  008f9:    	jne    0x38d61
  008ff:    	cmp    DWORD PTR [rdi+0x4],0x25
  00903:    	jne    0x38d61
  00909: 26 	cmp    DWORD PTR [rip+0xffffffffffff2444],0x26        # 0xffff2d54
  00910:    	jne    0x38d61
  00916:    	mov    esi,DWORD PTR [rip+0x1aa0]        # 0x23bc
  0091c:    	cmp    esi,0xffffffff
  0091f:    	je     0x38db5
  00925:    	cmp    WORD PTR [rdi+0x2],0x3
  0092a:    	jne    0x943
  00930:    	cmp    esi,0x6
  00933:    	jge    0x943
  00939:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0093e:    	jmp    0x99f
  00943:    	sub    rsp,0x30
  00947:    	movq   QWORD PTR [rsp],xmm2
  0094c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00952:    	movq   QWORD PTR [rsp+0x10],xmm5
  00958:    	movq   QWORD PTR [rsp+0x18],xmm6
  0095e:    	movq   QWORD PTR [rsp+0x20],xmm7
  00964: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0096b: 78 	movabs rax,0x55788c73bb50
  00975:    	call   rax
  00977:    	movq   xmm2,QWORD PTR [rsp]
  0097c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00982:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00988:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0098e:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00994: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0099b:    	add    rsp,0x30
  0099f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00061 %14 = %6 * %14                       [Float][Float]
  009a6: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  009ad: 00 	test   rdi,0x1
  009b4:    	jne    0x38e2e
  009ba: 00 	test   rdi,0x2
  009c1:    	je     0x9fd
  009c7:    	xorps  xmm3,xmm3
  009ca: 00 	movabs rax,0x8000000000000002
  009d4:    	cmp    rdi,rax
  009d7:    	je     0xa0f
  009dd:    	mov    rax,rdi
  009e0:    	sar    rax,0x3f
  009e4:    	add    rax,0x2
  009e8:    	and    rdi,0xfffffffffffffffc
  009ec:    	or     rdi,rax
  009ef:    	rol    rdi,0x3d
  009f3:    	movq   xmm3,rdi
  009f8:    	jmp    0xa0f
  009fd:    	call   0xffff03b4
  00a02:    	test   rax,rax
  00a05:    	je     0x38e2e
  00a0b:    	movq   xmm3,xmm0
  00a0f:    	mulsd  xmm3,xmm2
:00062 %7 = %13 + %14                       [Float][Float]
  00a13:    	movq   xmm9,xmm6
  00a18:    	addsd  xmm9,xmm3
:00063 %14 = dynvar(2, %2)
  00a1d:    	mov    rax,QWORD PTR [rbp-0x10]
  00a21:    	mov    rax,QWORD PTR [rax]
  00a24:    	mov    rax,QWORD PTR [rax-0x28]
  00a28: ff 	mov    QWORD PTR [rbp-0x98],rax
:00064 %15 = 0: i32
  00a2f: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00065 %14 = %14.[%15]
  00a3a:    	sub    rsp,0x40
  00a3e:    	movq   QWORD PTR [rsp],xmm2
  00a43:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a49:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a4f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a55:    	movq   QWORD PTR [rsp+0x20],xmm7
  00a5b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00a62: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00a69: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00a70: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00a77:    	mov    rdi,rbx
  00a7a:    	mov    rsi,r12
  00a7d: 78 	movabs rax,0x55788c797be0
  00a87:    	call   rax
  00a89:    	movq   xmm2,QWORD PTR [rsp]
  00a8e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a94:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a9a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00aa0:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00aa6: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00aad: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00ab4:    	add    rsp,0x40
  00ab8: 78 	movabs r13,0x55788dee1390
  00ac2:    	test   rax,rax
  00ac5:    	je     0xffff037b
  00acb: ff 	mov    QWORD PTR [rbp-0x98],rax
:00066 %13 = %14.call y()                   [Vec]
:00067 
  00ad2: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00ad9: 00 	test   rdi,0x7
  00ae0:    	jne    0x38e82
  00ae6:    	cmp    DWORD PTR [rdi+0x4],0x25
  00aea:    	jne    0x38e82
  00af0: 26 	cmp    DWORD PTR [rip+0xffffffffffff225d],0x26        # 0xffff2d54
  00af7:    	jne    0x38e82
  00afd:    	mov    esi,DWORD PTR [rip+0x18c1]        # 0x23c4
  00b03:    	cmp    esi,0xffffffff
  00b06:    	je     0x38ed4
  00b0c:    	cmp    WORD PTR [rdi+0x2],0x3
  00b11:    	jne    0xb2a
  00b17:    	cmp    esi,0x6
  00b1a:    	jge    0xb2a
  00b20:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b25:    	jmp    0xb88
  00b2a:    	sub    rsp,0x30
  00b2e:    	movq   QWORD PTR [rsp],xmm2
  00b33:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b39:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b3f:    	movq   QWORD PTR [rsp+0x18],xmm7
  00b45: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00b4c: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00b53: 78 	movabs rax,0x55788c73bb50
  00b5d:    	call   rax
  00b5f:    	movq   xmm2,QWORD PTR [rsp]
  00b64:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b6a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b70:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00b76: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00b7d: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00b84:    	add    rsp,0x30
  00b88: ff 	mov    QWORD PTR [rbp-0x90],rax
:00069 %13 = %4 * %13                       [Float][Float]
  00b8f: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00b96: 00 	test   rdi,0x1
  00b9d:    	jne    0x38f4f
  00ba3: 00 	test   rdi,0x2
  00baa:    	je     0xbe6
  00bb0:    	xorps  xmm3,xmm3
  00bb3: 00 	movabs rax,0x8000000000000002
  00bbd:    	cmp    rdi,rax
  00bc0:    	je     0xbf8
  00bc6:    	mov    rax,rdi
  00bc9:    	sar    rax,0x3f
  00bcd:    	add    rax,0x2
  00bd1:    	and    rdi,0xfffffffffffffffc
  00bd5:    	or     rdi,rax
  00bd8:    	rol    rdi,0x3d
  00bdc:    	movq   xmm3,rdi
  00be1:    	jmp    0xbf8
  00be6:    	call   0xffff03b4
  00beb:    	test   rax,rax
  00bee:    	je     0x38f4f
  00bf4:    	movq   xmm3,xmm0
  00bf8:    	mulsd  xmm3,xmm7
:00070 %15 = dynvar(2, %2)
  00bfc:    	mov    rax,QWORD PTR [rbp-0x10]
  00c00:    	mov    rax,QWORD PTR [rax]
  00c03:    	mov    rax,QWORD PTR [rax-0x28]
  00c07: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00071 %16 = 1: i32
  00c0e: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00072 %15 = %15.[%16]
  00c19:    	sub    rsp,0x40
  00c1d:    	movq   QWORD PTR [rsp],xmm2
  00c22:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c28:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c2e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c34:    	movq   QWORD PTR [rsp+0x20],xmm7
  00c3a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00c41: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00c48: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00c4f: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00c56:    	mov    rdi,rbx
  00c59:    	mov    rsi,r12
  00c5c: 78 	movabs rax,0x55788c797be0
  00c66:    	call   rax
  00c68:    	movq   xmm2,QWORD PTR [rsp]
  00c6d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c73:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c79:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c7f:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00c85: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00c8c: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00c93:    	add    rsp,0x40
  00c97: 78 	movabs r13,0x55788dee1400
  00ca1:    	test   rax,rax
  00ca4:    	je     0xffff037b
  00caa: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00073 %14 = %15.call y()                   [Vec]
:00074 
  00cb1: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00cb8: 00 	test   rdi,0x7
  00cbf:    	jne    0x38fa1
  00cc5:    	cmp    DWORD PTR [rdi+0x4],0x25
  00cc9:    	jne    0x38fa1
  00ccf: 26 	cmp    DWORD PTR [rip+0xffffffffffff207e],0x26        # 0xffff2d54
  00cd6:    	jne    0x38fa1
  00cdc:    	mov    esi,DWORD PTR [rip+0x16ea]        # 0x23cc
  00ce2:    	cmp    esi,0xffffffff
  00ce5:    	je     0x39003
  00ceb:    	cmp    WORD PTR [rdi+0x2],0x3
  00cf0:    	jne    0xd09
  00cf6:    	cmp    esi,0x6
  00cf9:    	jge    0xd09
  00cff:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d04:    	jmp    0xd73
  00d09:    	sub    rsp,0x40
  00d0d:    	movq   QWORD PTR [rsp],xmm2
  00d12:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d18:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d1e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d24:    	movq   QWORD PTR [rsp+0x20],xmm7
  00d2a: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00d31: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00d38: 78 	movabs rax,0x55788c73bb50
  00d42:    	call   rax
  00d44:    	movq   xmm2,QWORD PTR [rsp]
  00d49:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d4f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d55:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d5b:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00d61: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00d68: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00d6f:    	add    rsp,0x40
  00d73: ff 	mov    QWORD PTR [rbp-0x98],rax
:00076 %14 = %5 * %14                       [Float][Float]
  00d7a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00d81: 00 	test   rdi,0x1
  00d88:    	jne    0x3908a
  00d8e: 00 	test   rdi,0x2
  00d95:    	je     0xdd1
  00d9b:    	xorps  xmm6,xmm6
  00d9e: 00 	movabs rax,0x8000000000000002
  00da8:    	cmp    rdi,rax
  00dab:    	je     0xde3
  00db1:    	mov    rax,rdi
  00db4:    	sar    rax,0x3f
  00db8:    	add    rax,0x2
  00dbc:    	and    rdi,0xfffffffffffffffc
  00dc0:    	or     rdi,rax
  00dc3:    	rol    rdi,0x3d
  00dc7:    	movq   xmm6,rdi
  00dcc:    	jmp    0xde3
  00dd1:    	call   0xffff03b4
  00dd6:    	test   rax,rax
  00dd9:    	je     0x3908a
  00ddf:    	movq   xmm6,xmm0
  00de3:    	mulsd  xmm6,xmm8
:00077 %13 = %13 + %14                      [Float][Float]
  00de8:    	addsd  xmm3,xmm6
:00078 %15 = dynvar(2, %2)
  00dec:    	mov    rax,QWORD PTR [rbp-0x10]
  00df0:    	mov    rax,QWORD PTR [rax]
  00df3:    	mov    rax,QWORD PTR [rax-0x28]
  00df7: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00079 %16 = 2: i32
  00dfe: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00080 %15 = %15.[%16]
  00e09:    	sub    rsp,0x40
  00e0d:    	movq   QWORD PTR [rsp],xmm2
  00e12:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e18:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e1e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e24:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e2a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e30: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e37: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e3e: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00e45: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00e4c:    	mov    rdi,rbx
  00e4f:    	mov    rsi,r12
  00e52: 78 	movabs rax,0x55788c797be0
  00e5c:    	call   rax
  00e5e:    	movq   xmm2,QWORD PTR [rsp]
  00e63:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e69:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e6f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e75:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e7b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e81: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00e88: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00e8f:    	add    rsp,0x40
  00e93: 78 	movabs r13,0x55788dee1480
  00e9d:    	test   rax,rax
  00ea0:    	je     0xffff037b
  00ea6: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00081 %14 = %15.call y()                   [Vec]
:00082 
  00ead: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00eb4: 00 	test   rdi,0x7
  00ebb:    	jne    0x390ec
  00ec1:    	cmp    DWORD PTR [rdi+0x4],0x25
  00ec5:    	jne    0x390ec
  00ecb: 26 	cmp    DWORD PTR [rip+0xffffffffffff1e82],0x26        # 0xffff2d54
  00ed2:    	jne    0x390ec
  00ed8:    	mov    esi,DWORD PTR [rip+0x14f6]        # 0x23d4
  00ede:    	cmp    esi,0xffffffff
  00ee1:    	je     0x3914e
  00ee7:    	cmp    WORD PTR [rdi+0x2],0x3
  00eec:    	jne    0xf05
  00ef2:    	cmp    esi,0x6
  00ef5:    	jge    0xf05
  00efb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f00:    	jmp    0xf6f
  00f05:    	sub    rsp,0x40
  00f09:    	movq   QWORD PTR [rsp],xmm2
  00f0e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f14:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f1a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f20:    	movq   QWORD PTR [rsp+0x20],xmm7
  00f26: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00f2d: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00f34: 78 	movabs rax,0x55788c73bb50
  00f3e:    	call   rax
  00f40:    	movq   xmm2,QWORD PTR [rsp]
  00f45:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f4b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f51:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f57:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00f5d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00f64: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00f6b:    	add    rsp,0x40
  00f6f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00084 %14 = %6 * %14                       [Float][Float]
  00f76: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00f7d: 00 	test   rdi,0x1
  00f84:    	jne    0x391d5
  00f8a: 00 	test   rdi,0x2
  00f91:    	je     0xfcd
  00f97:    	xorps  xmm6,xmm6
  00f9a: 00 	movabs rax,0x8000000000000002
  00fa4:    	cmp    rdi,rax
  00fa7:    	je     0xfdf
  00fad:    	mov    rax,rdi
  00fb0:    	sar    rax,0x3f
  00fb4:    	add    rax,0x2
  00fb8:    	and    rdi,0xfffffffffffffffc
  00fbc:    	or     rdi,rax
  00fbf:    	rol    rdi,0x3d
  00fc3:    	movq   xmm6,rdi
  00fc8:    	jmp    0xfdf
  00fcd:    	call   0xffff03b4
  00fd2:    	test   rax,rax
  00fd5:    	je     0x391d5
  00fdb:    	movq   xmm6,xmm0
  00fdf:    	mulsd  xmm6,xmm2
:00085 %8 = %13 + %14                       [Float][Float]
  00fe3:    	movq   xmm10,xmm3
  00fe8:    	addsd  xmm10,xmm6
:00086 %14 = dynvar(2, %2)
  00fed:    	mov    rax,QWORD PTR [rbp-0x10]
  00ff1:    	mov    rax,QWORD PTR [rax]
  00ff4:    	mov    rax,QWORD PTR [rax-0x28]
  00ff8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00087 %15 = 0: i32
  00fff: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00088 %14 = %14.[%15]
  0100a:    	sub    rsp,0x40
  0100e:    	movq   QWORD PTR [rsp],xmm2
  01013:    	movq   QWORD PTR [rsp+0x8],xmm3
  01019:    	movq   QWORD PTR [rsp+0x10],xmm4
  0101f:    	movq   QWORD PTR [rsp+0x18],xmm5
  01025:    	movq   QWORD PTR [rsp+0x20],xmm7
  0102b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01032: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01039: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01040: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01047: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0104e:    	mov    rdi,rbx
  01051:    	mov    rsi,r12
  01054: 78 	movabs rax,0x55788c797be0
  0105e:    	call   rax
  01060:    	movq   xmm2,QWORD PTR [rsp]
  01065:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0106b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01071:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01077:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0107d: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01084: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0108b: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01092:    	add    rsp,0x40
  01096: 78 	movabs r13,0x55788dee1500
  010a0:    	test   rax,rax
  010a3:    	je     0xffff037b
  010a9: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %13 = %14.call z()                   [Vec]
:00090 
  010b0: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  010b7: 00 	test   rdi,0x7
  010be:    	jne    0x39237
  010c4:    	cmp    DWORD PTR [rdi+0x4],0x25
  010c8:    	jne    0x39237
  010ce: 26 	cmp    DWORD PTR [rip+0xffffffffffff1c7f],0x26        # 0xffff2d54
  010d5:    	jne    0x39237
  010db:    	mov    esi,DWORD PTR [rip+0x12fb]        # 0x23dc
  010e1:    	cmp    esi,0xffffffff
  010e4:    	je     0x39297
  010ea:    	cmp    WORD PTR [rdi+0x2],0x3
  010ef:    	jne    0x1108
  010f5:    	cmp    esi,0x6
  010f8:    	jge    0x1108
  010fe:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01103:    	jmp    0x1174
  01108:    	sub    rsp,0x40
  0110c:    	movq   QWORD PTR [rsp],xmm2
  01111:    	movq   QWORD PTR [rsp+0x8],xmm4
  01117:    	movq   QWORD PTR [rsp+0x10],xmm5
  0111d:    	movq   QWORD PTR [rsp+0x18],xmm7
  01123: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0112a: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01131: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01138: 78 	movabs rax,0x55788c73bb50
  01142:    	call   rax
  01144:    	movq   xmm2,QWORD PTR [rsp]
  01149:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0114f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01155:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0115b: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01162: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01169: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01170:    	add    rsp,0x40
  01174: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 %13 = %4 * %13                       [Float][Float]
  0117b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01182: 00 	test   rdi,0x1
  01189:    	jne    0x39320
  0118f: 00 	test   rdi,0x2
  01196:    	je     0x11d2
  0119c:    	xorps  xmm3,xmm3
  0119f: 00 	movabs rax,0x8000000000000002
  011a9:    	cmp    rdi,rax
  011ac:    	je     0x11e4
  011b2:    	mov    rax,rdi
  011b5:    	sar    rax,0x3f
  011b9:    	add    rax,0x2
  011bd:    	and    rdi,0xfffffffffffffffc
  011c1:    	or     rdi,rax
  011c4:    	rol    rdi,0x3d
  011c8:    	movq   xmm3,rdi
  011cd:    	jmp    0x11e4
  011d2:    	call   0xffff03b4
  011d7:    	test   rax,rax
  011da:    	je     0x39320
  011e0:    	movq   xmm3,xmm0
  011e4:    	mulsd  xmm3,xmm7
:00093 %15 = dynvar(2, %2)
  011e8:    	mov    rax,QWORD PTR [rbp-0x10]
  011ec:    	mov    rax,QWORD PTR [rax]
  011ef:    	mov    rax,QWORD PTR [rax-0x28]
  011f3: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00094 %16 = 1: i32
  011fa: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00095 %15 = %15.[%16]
  01205:    	sub    rsp,0x40
  01209:    	movq   QWORD PTR [rsp],xmm2
  0120e:    	movq   QWORD PTR [rsp+0x8],xmm3
  01214:    	movq   QWORD PTR [rsp+0x10],xmm4
  0121a:    	movq   QWORD PTR [rsp+0x18],xmm5
  01220:    	movq   QWORD PTR [rsp+0x20],xmm7
  01226: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0122d: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01234: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0123b: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01242: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  01249:    	mov    rdi,rbx
  0124c:    	mov    rsi,r12
  0124f: 78 	movabs rax,0x55788c797be0
  01259:    	call   rax
  0125b:    	movq   xmm2,QWORD PTR [rsp]
  01260:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01266:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0126c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01272:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01278: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  0127f: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01286: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0128d:    	add    rsp,0x40
  01291: 78 	movabs r13,0x55788dee1570
  0129b:    	test   rax,rax
  0129e:    	je     0xffff037b
  012a4: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00096 %14 = %15.call z()                   [Vec]
:00097 
  012ab: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  012b2: 00 	test   rdi,0x7
  012b9:    	jne    0x39380
  012bf:    	cmp    DWORD PTR [rdi+0x4],0x25
  012c3:    	jne    0x39380
  012c9: 26 	cmp    DWORD PTR [rip+0xffffffffffff1a84],0x26        # 0xffff2d54
  012d0:    	jne    0x39380
  012d6:    	mov    esi,DWORD PTR [rip+0x1108]        # 0x23e4
  012dc:    	cmp    esi,0xffffffff
  012df:    	je     0x393f0
  012e5:    	cmp    WORD PTR [rdi+0x2],0x3
  012ea:    	jne    0x1303
  012f0:    	cmp    esi,0x6
  012f3:    	jge    0x1303
  012f9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  012fe:    	jmp    0x137b
  01303:    	sub    rsp,0x40
  01307:    	movq   QWORD PTR [rsp],xmm2
  0130c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01312:    	movq   QWORD PTR [rsp+0x10],xmm4
  01318:    	movq   QWORD PTR [rsp+0x18],xmm5
  0131e:    	movq   QWORD PTR [rsp+0x20],xmm7
  01324: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0132b: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01332: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01339: 78 	movabs rax,0x55788c73bb50
  01343:    	call   rax
  01345:    	movq   xmm2,QWORD PTR [rsp]
  0134a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01350:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01356:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0135c:    	movq   xmm7,QWORD PTR [rsp+0x20]
  01362: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01369: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01370: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01377:    	add    rsp,0x40
  0137b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00099 %14 = %5 * %14                       [Float][Float]
  01382: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01389: 00 	test   rdi,0x1
  01390:    	jne    0x39485
  01396: 00 	test   rdi,0x2
  0139d:    	je     0x13d9
  013a3:    	xorps  xmm6,xmm6
  013a6: 00 	movabs rax,0x8000000000000002
  013b0:    	cmp    rdi,rax
  013b3:    	je     0x13eb
  013b9:    	mov    rax,rdi
  013bc:    	sar    rax,0x3f
  013c0:    	add    rax,0x2
  013c4:    	and    rdi,0xfffffffffffffffc
  013c8:    	or     rdi,rax
  013cb:    	rol    rdi,0x3d
  013cf:    	movq   xmm6,rdi
  013d4:    	jmp    0x13eb
  013d9:    	call   0xffff03b4
  013de:    	test   rax,rax
  013e1:    	je     0x39485
  013e7:    	movq   xmm6,xmm0
  013eb:    	mulsd  xmm6,xmm8
:00100 %13 = %13 + %14                      [Float][Float]
  013f0:    	addsd  xmm3,xmm6
:00101 %15 = dynvar(2, %2)
  013f4:    	mov    rax,QWORD PTR [rbp-0x10]
  013f8:    	mov    rax,QWORD PTR [rax]
  013fb:    	mov    rax,QWORD PTR [rax-0x28]
  013ff: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00102 %16 = 2: i32
  01406: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00103 %15 = %15.[%16]
  01411:    	sub    rsp,0x50
  01415:    	movq   QWORD PTR [rsp],xmm2
  0141a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01420:    	movq   QWORD PTR [rsp+0x10],xmm4
  01426:    	movq   QWORD PTR [rsp+0x18],xmm5
  0142c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01432:    	movq   QWORD PTR [rsp+0x28],xmm7
  01438: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0143f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01446: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0144d: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01454: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  0145b:    	mov    rdi,rbx
  0145e:    	mov    rsi,r12
  01461: 78 	movabs rax,0x55788c797be0
  0146b:    	call   rax
  0146d:    	movq   xmm2,QWORD PTR [rsp]
  01472:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01478:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0147e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01484:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0148a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01490: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01497: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0149e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  014a5:    	add    rsp,0x50
  014a9: 78 	movabs r13,0x55788dee15f0
  014b3:    	test   rax,rax
  014b6:    	je     0xffff037b
  014bc: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00104 %14 = %15.call z()                   [Vec]
:00105 
  014c3: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  014ca: 00 	test   rdi,0x7
  014d1:    	jne    0x394f5
  014d7:    	cmp    DWORD PTR [rdi+0x4],0x25
  014db:    	jne    0x394f5
  014e1: 26 	cmp    DWORD PTR [rip+0xffffffffffff186c],0x26        # 0xffff2d54
  014e8:    	jne    0x394f5
  014ee:    	mov    esi,DWORD PTR [rip+0xef8]        # 0x23ec
  014f4:    	cmp    esi,0xffffffff
  014f7:    	je     0x39565
  014fd:    	cmp    WORD PTR [rdi+0x2],0x3
  01502:    	jne    0x151b
  01508:    	cmp    esi,0x6
  0150b:    	jge    0x151b
  01511:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01516:    	jmp    0x1593
  0151b:    	sub    rsp,0x40
  0151f:    	movq   QWORD PTR [rsp],xmm2
  01524:    	movq   QWORD PTR [rsp+0x8],xmm3
  0152a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01530:    	movq   QWORD PTR [rsp+0x18],xmm5
  01536:    	movq   QWORD PTR [rsp+0x20],xmm7
  0153c: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01543: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0154a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01551: 78 	movabs rax,0x55788c73bb50
  0155b:    	call   rax
  0155d:    	movq   xmm2,QWORD PTR [rsp]
  01562:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01568:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0156e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01574:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0157a: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01581: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01588: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0158f:    	add    rsp,0x40
  01593: ff 	mov    QWORD PTR [rbp-0x98],rax
:00107 %14 = %6 * %14                       [Float][Float]
  0159a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  015a1: 00 	test   rdi,0x1
  015a8:    	jne    0x395fa
  015ae: 00 	test   rdi,0x2
  015b5:    	je     0x15f1
  015bb:    	xorps  xmm6,xmm6
  015be: 00 	movabs rax,0x8000000000000002
  015c8:    	cmp    rdi,rax
  015cb:    	je     0x1603
  015d1:    	mov    rax,rdi
  015d4:    	sar    rax,0x3f
  015d8:    	add    rax,0x2
  015dc:    	and    rdi,0xfffffffffffffffc
  015e0:    	or     rdi,rax
  015e3:    	rol    rdi,0x3d
  015e7:    	movq   xmm6,rdi
  015ec:    	jmp    0x1603
  015f1:    	call   0xffff03b4
  015f6:    	test   rax,rax
  015f9:    	je     0x395fa
  015ff:    	movq   xmm6,xmm0
  01603:    	mulsd  xmm6,xmm2
:00108 %9 = %13 + %14                       [Float][Float]
  01607:    	movq   xmm11,xmm3
  0160c:    	addsd  xmm11,xmm6
:00109 %13 = const[Vec]                     [Vec]
  01611: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1748]        # 0xffff2d60
  01618: 00 	cmp    rax,QWORD PTR [rip+0xde1]        # 0x2400
  0161f:    	jne    0x3966a
  01625: 00 	mov    rax,QWORD PTR [rip+0xdc4]        # 0x23f0
  0162c: ff 	mov    QWORD PTR [rbp-0x90],rax
:00110 %14 = %7
:00111 %15 = %8
:00112 %16 = %9
:00113 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
:00114 
  01633:    	movq   xmm0,xmm9
  01638:    	call   0xffff04a7
  0163d: ff 	mov    QWORD PTR [rbp-0x98],rax
  01644:    	movq   xmm0,xmm10
  01649:    	call   0xffff04a7
  0164e: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01655:    	movq   xmm0,xmm11
  0165a:    	call   0xffff04a7
  0165f: ff 	mov    QWORD PTR [rbp-0xa8],rax
  01666: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0166d: 00 	test   rdi,0x7
  01674:    	jne    0x3972a
  0167a:    	cmp    DWORD PTR [rdi+0x4],0x26
  0167e:    	jne    0x3972a
  01684: 26 	cmp    DWORD PTR [rip+0xffffffffffff16c9],0x26        # 0xffff2d54
  0168b:    	jne    0x3972a
  01691: 00 	mov    r9,0x0
  01698:    	sub    rsp,0x40
  0169c:    	movq   QWORD PTR [rsp],xmm2
  016a1:    	movq   QWORD PTR [rsp+0x8],xmm4
  016a7:    	movq   QWORD PTR [rsp+0x10],xmm5
  016ad:    	movq   QWORD PTR [rsp+0x18],xmm7
  016b3: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  016ba: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  016c1: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  016c8: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  016cf:    	mov    rdx,rdi
  016d2:    	mov    rax,QWORD PTR [rbx]
  016d5:    	lea    rdi,[rsp-0x18]
  016da:    	mov    QWORD PTR [rdi],rax
  016dd:    	mov    QWORD PTR [rbx],rdi
  016e0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016e9:    	mov    QWORD PTR [rsp-0x38],rcx
  016ee: ff 	lea    rcx,[rbp-0x98]
  016f5: 00 	mov    r8,0x3
  016fc:    	call   0x39798
  01701:    	lea    rdi,[rbp-0x8]
  01705:    	mov    QWORD PTR [rbx],rdi
  01708:    	movq   xmm2,QWORD PTR [rsp]
  0170d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01713:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01719:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0171f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01726: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0172d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01734: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0173b:    	add    rsp,0x40
  0173f: 78 	movabs r13,0x55788dee16a0
  01749:    	test   rax,rax
  0174c:    	je     0xffff037b
  01752:    	mov    QWORD PTR [rbp-0x78],rax
:00116 %13 = const[Ray]                     [Ray]
  01756: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff1603]        # 0xffff2d60
  0175d: 00 	cmp    rax,QWORD PTR [rip+0xcbc]        # 0x2420
  01764:    	jne    0x397ca
  0176a: 00 	mov    rax,QWORD PTR [rip+0xc9f]        # 0x2410
  01771: ff 	mov    QWORD PTR [rbp-0x90],rax
:00117 %14 = dynvar(2, %7)
  01778:    	mov    rax,QWORD PTR [rbp-0x10]
  0177c:    	mov    rax,QWORD PTR [rax]
  0177f:    	mov    rax,QWORD PTR [rax-0x50]
  01783: ff 	mov    QWORD PTR [rbp-0x98],rax
:00118 %15 = %10
  0178a:    	mov    rax,QWORD PTR [rbp-0x78]
  0178e: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00119 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
:00120 
  01795: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0179c: 00 	test   rdi,0x7
  017a3:    	jne    0x3987e
  017a9:    	cmp    DWORD PTR [rdi+0x4],0x2c
  017ad:    	jne    0x3987e
  017b3: 26 	cmp    DWORD PTR [rip+0xffffffffffff159a],0x26        # 0xffff2d54
  017ba:    	jne    0x3987e
  017c0: 00 	mov    r9,0x0
  017c7:    	sub    rsp,0x40
  017cb:    	movq   QWORD PTR [rsp],xmm2
  017d0:    	movq   QWORD PTR [rsp+0x8],xmm4
  017d6:    	movq   QWORD PTR [rsp+0x10],xmm5
  017dc:    	movq   QWORD PTR [rsp+0x18],xmm7
  017e2: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  017e9: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  017f0: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  017f7: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  017fe:    	mov    rdx,rdi
  01801:    	mov    rax,QWORD PTR [rbx]
  01804:    	lea    rdi,[rsp-0x18]
  01809:    	mov    QWORD PTR [rdi],rax
  0180c:    	mov    QWORD PTR [rbx],rdi
  0180f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01818:    	mov    QWORD PTR [rsp-0x38],rcx
  0181d: ff 	lea    rcx,[rbp-0x98]
  01824: 00 	mov    r8,0x2
  0182b:    	call   0x398ec
  01830:    	lea    rdi,[rbp-0x8]
  01834:    	mov    QWORD PTR [rbx],rdi
  01837:    	movq   xmm2,QWORD PTR [rsp]
  0183c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01842:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01848:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0184e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01855: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0185c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01863: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0186a:    	add    rsp,0x40
  0186e: 78 	movabs r13,0x55788dee1700
  01878:    	test   rax,rax
  0187b:    	je     0xffff037b
  01881:    	mov    QWORD PTR [rbp-0x80],rax
:00122 %13 = const[Isect]                   [Isect]
  01885: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff14d4]        # 0xffff2d60
  0188c: 00 	cmp    rax,QWORD PTR [rip+0xbad]        # 0x2440
  01893:    	jne    0x3991e
  01899: 00 	mov    rax,QWORD PTR [rip+0xb90]        # 0x2430
  018a0: ff 	mov    QWORD PTR [rbp-0x90],rax
:00123 %12 = %13.call new()                 [#<Class:Isect>]
:00124 
  018a7: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  018ae: 00 	test   rdi,0x7
  018b5:    	jne    0x399d2
  018bb:    	cmp    DWORD PTR [rdi+0x4],0x2e
  018bf:    	jne    0x399d2
  018c5: 26 	cmp    DWORD PTR [rip+0xffffffffffff1488],0x26        # 0xffff2d54
  018cc:    	jne    0x399d2
  018d2: 00 	mov    r9,0x0
  018d9:    	sub    rsp,0x40
  018dd:    	movq   QWORD PTR [rsp],xmm2
  018e2:    	movq   QWORD PTR [rsp+0x8],xmm4
  018e8:    	movq   QWORD PTR [rsp+0x10],xmm5
  018ee:    	movq   QWORD PTR [rsp+0x18],xmm7
  018f4: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  018fb: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01902: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01909: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01910:    	mov    rdx,rdi
  01913:    	mov    rax,QWORD PTR [rbx]
  01916:    	lea    rdi,[rsp-0x18]
  0191b:    	mov    QWORD PTR [rdi],rax
  0191e:    	mov    QWORD PTR [rbx],rdi
  01921: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0192a:    	mov    QWORD PTR [rsp-0x38],rcx
  0192f: ff 	lea    rcx,[rbp-0x98]
  01936: 00 	mov    r8,0x0
  0193d:    	call   0x39a40
  01942:    	lea    rdi,[rbp-0x8]
  01946:    	mov    QWORD PTR [rbx],rdi
  01949:    	movq   xmm2,QWORD PTR [rsp]
  0194e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01954:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0195a:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01960: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01967: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0196e: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01975: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0197c:    	add    rsp,0x40
  01980: 78 	movabs r13,0x55788dee1740
  0198a:    	test   rax,rax
  0198d:    	je     0xffff037b
  01993: ff 	mov    QWORD PTR [rbp-0x88],rax
:00126 %13 = @spheres: Scene[IvarId(0)]
  0199a:    	mov    rdi,QWORD PTR [rbp-0x28]
  0199e:    	cmp    WORD PTR [rdi+0x2],0x3
  019a3:    	jne    0x39a72
  019a9:    	mov    rax,QWORD PTR [rdi+0x10]
  019ad: ff 	mov    QWORD PTR [rbp-0x90],rax
:00127 %14 = 0: i32
  019b4: ff 	mov    QWORD PTR [rbp-0x98],0x1
:00128 %13 = %13.[%14]
  019bf:    	sub    rsp,0x40
  019c3:    	movq   QWORD PTR [rsp],xmm2
  019c8:    	movq   QWORD PTR [rsp+0x8],xmm4
  019ce:    	movq   QWORD PTR [rsp+0x10],xmm5
  019d4:    	movq   QWORD PTR [rsp+0x18],xmm7
  019da: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  019e1: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  019e8: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  019ef: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  019f6: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  019fd: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01a04:    	mov    rdi,rbx
  01a07:    	mov    rsi,r12
  01a0a: 78 	movabs rax,0x55788c797be0
  01a14:    	call   rax
  01a16:    	movq   xmm2,QWORD PTR [rsp]
  01a1b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a21:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01a27:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01a2d: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01a34: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01a3b: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01a42: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01a49:    	add    rsp,0x40
  01a4d: 78 	movabs r13,0x55788dee1780
  01a57:    	test   rax,rax
  01a5a:    	je     0xffff037b
  01a60: ff 	mov    QWORD PTR [rbp-0x90],rax
:00129 %14 = %11
  01a67:    	mov    rax,QWORD PTR [rbp-0x80]
  01a6b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00130 %15 = %12
  01a72: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01a79: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00131 _ = %13.call intersect(%14; 2)       [Sphere]
:00132 
  01a80: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01a87: 00 	test   rdi,0x7
  01a8e:    	jne    0x39af6
  01a94:    	cmp    DWORD PTR [rdi+0x4],0x27
  01a98:    	jne    0x39af6
  01a9e: 26 	cmp    DWORD PTR [rip+0xffffffffffff12af],0x26        # 0xffff2d54
  01aa5:    	jne    0x39af6
  01aab:    	sub    rsp,0x40
  01aaf:    	movq   QWORD PTR [rsp],xmm2
  01ab4:    	movq   QWORD PTR [rsp+0x8],xmm4
  01aba:    	movq   QWORD PTR [rsp+0x10],xmm5
  01ac0:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ac6: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01acd: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ad4: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01adb: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01ae2:    	mov    rax,QWORD PTR [rbx]
  01ae5:    	lea    rdi,[rsp-0x18]
  01aea:    	mov    QWORD PTR [rdi],rax
  01aed:    	mov    QWORD PTR [rbx],rdi
  01af0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01af9:    	mov    QWORD PTR [rsp-0x38],rcx
  01afe: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01b05:    	mov    QWORD PTR [rsp-0x38],rax
  01b0a: 00 	mov    rdi,0x2
  01b11: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01b18:    	mov    QWORD PTR [rsp-0x40],rax
  01b1d: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01b24:    	mov    QWORD PTR [rsp-0x48],rax
  01b29: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b32: 10 	movabs rax,0x100100000003f
  01b3c:    	mov    QWORD PTR [rsp-0x28],rax
  01b41: 78 	movabs r13,0x55788dee86a0
  01b4b:    	call   0xffff3921
  01b50:    	lea    rdi,[rbp-0x8]
  01b54:    	mov    QWORD PTR [rbx],rdi
  01b57:    	movq   xmm2,QWORD PTR [rsp]
  01b5c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b62:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01b68:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01b6e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01b75: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01b7c: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01b83: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01b8a:    	add    rsp,0x40
  01b8e: 78 	movabs r13,0x55788dee17c0
  01b98:    	test   rax,rax
  01b9b:    	je     0xffff037b
:00134 %13 = @spheres: Scene[IvarId(0)]
  01ba1:    	mov    rdi,QWORD PTR [rbp-0x28]
  01ba5:    	cmp    WORD PTR [rdi+0x2],0x3
  01baa:    	jne    0x39b64
  01bb0:    	mov    rax,QWORD PTR [rdi+0x10]
  01bb4: ff 	mov    QWORD PTR [rbp-0x90],rax
:00135 %14 = 1: i32
  01bbb: ff 	mov    QWORD PTR [rbp-0x98],0x3
:00136 %13 = %13.[%14]
  01bc6:    	sub    rsp,0x40
  01bca:    	movq   QWORD PTR [rsp],xmm2
  01bcf:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bd5:    	movq   QWORD PTR [rsp+0x10],xmm5
  01bdb:    	movq   QWORD PTR [rsp+0x18],xmm7
  01be1: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01be8: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01bef: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01bf6: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01bfd: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01c04: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01c0b:    	mov    rdi,rbx
  01c0e:    	mov    rsi,r12
  01c11: 78 	movabs rax,0x55788c797be0
  01c1b:    	call   rax
  01c1d:    	movq   xmm2,QWORD PTR [rsp]
  01c22:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c28:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01c2e:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01c34: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01c3b: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01c42: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01c49: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01c50:    	add    rsp,0x40
  01c54: 78 	movabs r13,0x55788dee1800
  01c5e:    	test   rax,rax
  01c61:    	je     0xffff037b
  01c67: ff 	mov    QWORD PTR [rbp-0x90],rax
:00137 %14 = %11
  01c6e:    	mov    rax,QWORD PTR [rbp-0x80]
  01c72: ff 	mov    QWORD PTR [rbp-0x98],rax
:00138 %15 = %12
  01c79: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01c80: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00139 _ = %13.call intersect(%14; 2)       [Sphere]
:00140 
  01c87: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01c8e: 00 	test   rdi,0x7
  01c95:    	jne    0x39be8
  01c9b:    	cmp    DWORD PTR [rdi+0x4],0x27
  01c9f:    	jne    0x39be8
  01ca5: 26 	cmp    DWORD PTR [rip+0xffffffffffff10a8],0x26        # 0xffff2d54
  01cac:    	jne    0x39be8
  01cb2:    	sub    rsp,0x40
  01cb6:    	movq   QWORD PTR [rsp],xmm2
  01cbb:    	movq   QWORD PTR [rsp+0x8],xmm4
  01cc1:    	movq   QWORD PTR [rsp+0x10],xmm5
  01cc7:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ccd: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01cd4: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01cdb: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01ce2: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01ce9:    	mov    rax,QWORD PTR [rbx]
  01cec:    	lea    rdi,[rsp-0x18]
  01cf1:    	mov    QWORD PTR [rdi],rax
  01cf4:    	mov    QWORD PTR [rbx],rdi
  01cf7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01d00:    	mov    QWORD PTR [rsp-0x38],rcx
  01d05: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01d0c:    	mov    QWORD PTR [rsp-0x38],rax
  01d11: 00 	mov    rdi,0x2
  01d18: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01d1f:    	mov    QWORD PTR [rsp-0x40],rax
  01d24: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01d2b:    	mov    QWORD PTR [rsp-0x48],rax
  01d30: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01d39: 10 	movabs rax,0x100100000003f
  01d43:    	mov    QWORD PTR [rsp-0x28],rax
  01d48: 78 	movabs r13,0x55788dee86a0
  01d52:    	call   0xffff3921
  01d57:    	lea    rdi,[rbp-0x8]
  01d5b:    	mov    QWORD PTR [rbx],rdi
  01d5e:    	movq   xmm2,QWORD PTR [rsp]
  01d63:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d69:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01d6f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01d75: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01d7c: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01d83: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01d8a: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01d91:    	add    rsp,0x40
  01d95: 78 	movabs r13,0x55788dee1840
  01d9f:    	test   rax,rax
  01da2:    	je     0xffff037b
:00142 %13 = @spheres: Scene[IvarId(0)]
  01da8:    	mov    rdi,QWORD PTR [rbp-0x28]
  01dac:    	cmp    WORD PTR [rdi+0x2],0x3
  01db1:    	jne    0x39c56
  01db7:    	mov    rax,QWORD PTR [rdi+0x10]
  01dbb: ff 	mov    QWORD PTR [rbp-0x90],rax
:00143 %14 = 2: i32
  01dc2: ff 	mov    QWORD PTR [rbp-0x98],0x5
:00144 %13 = %13.[%14]
  01dcd:    	sub    rsp,0x40
  01dd1:    	movq   QWORD PTR [rsp],xmm2
  01dd6:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ddc:    	movq   QWORD PTR [rsp+0x10],xmm5
  01de2:    	movq   QWORD PTR [rsp+0x18],xmm7
  01de8: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01def: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01df6: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01dfd: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01e04: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01e0b: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01e12:    	mov    rdi,rbx
  01e15:    	mov    rsi,r12
  01e18: 78 	movabs rax,0x55788c797be0
  01e22:    	call   rax
  01e24:    	movq   xmm2,QWORD PTR [rsp]
  01e29:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01e2f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01e35:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01e3b: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01e42: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01e49: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01e50: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01e57:    	add    rsp,0x40
  01e5b: 78 	movabs r13,0x55788dee1880
  01e65:    	test   rax,rax
  01e68:    	je     0xffff037b
  01e6e: ff 	mov    QWORD PTR [rbp-0x90],rax
:00145 %14 = %11
  01e75:    	mov    rax,QWORD PTR [rbp-0x80]
  01e79: ff 	mov    QWORD PTR [rbp-0x98],rax
:00146 %15 = %12
  01e80: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01e87: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00147 _ = %13.call intersect(%14; 2)       [Sphere]
:00148 
  01e8e: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01e95: 00 	test   rdi,0x7
  01e9c:    	jne    0x39cda
  01ea2:    	cmp    DWORD PTR [rdi+0x4],0x27
  01ea6:    	jne    0x39cda
  01eac: 26 	cmp    DWORD PTR [rip+0xffffffffffff0ea1],0x26        # 0xffff2d54
  01eb3:    	jne    0x39cda
  01eb9:    	sub    rsp,0x40
  01ebd:    	movq   QWORD PTR [rsp],xmm2
  01ec2:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ec8:    	movq   QWORD PTR [rsp+0x10],xmm5
  01ece:    	movq   QWORD PTR [rsp+0x18],xmm7
  01ed4: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01edb: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01ee2: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01ee9: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01ef0:    	mov    rax,QWORD PTR [rbx]
  01ef3:    	lea    rdi,[rsp-0x18]
  01ef8:    	mov    QWORD PTR [rdi],rax
  01efb:    	mov    QWORD PTR [rbx],rdi
  01efe: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01f07:    	mov    QWORD PTR [rsp-0x38],rcx
  01f0c: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01f13:    	mov    QWORD PTR [rsp-0x38],rax
  01f18: 00 	mov    rdi,0x2
  01f1f: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01f26:    	mov    QWORD PTR [rsp-0x40],rax
  01f2b: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01f32:    	mov    QWORD PTR [rsp-0x48],rax
  01f37: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01f40: 10 	movabs rax,0x100100000003f
  01f4a:    	mov    QWORD PTR [rsp-0x28],rax
  01f4f: 78 	movabs r13,0x55788dee86a0
  01f59:    	call   0xffff3921
  01f5e:    	lea    rdi,[rbp-0x8]
  01f62:    	mov    QWORD PTR [rbx],rdi
  01f65:    	movq   xmm2,QWORD PTR [rsp]
  01f6a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01f70:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01f76:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01f7c: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01f83: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01f8a: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01f91: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01f98:    	add    rsp,0x40
  01f9c: 78 	movabs r13,0x55788dee18c0
  01fa6:    	test   rax,rax
  01fa9:    	je     0xffff037b
:00150 %13 = @plane: Scene[IvarId(1)]
  01faf:    	mov    rdi,QWORD PTR [rbp-0x28]
  01fb3:    	cmp    WORD PTR [rdi+0x2],0x3
  01fb8:    	jne    0x39d48
  01fbe:    	mov    rax,QWORD PTR [rdi+0x18]
  01fc2: ff 	mov    QWORD PTR [rbp-0x90],rax
:00151 %14 = %11
  01fc9:    	mov    rax,QWORD PTR [rbp-0x80]
  01fcd: ff 	mov    QWORD PTR [rbp-0x98],rax
:00152 %15 = %12
  01fd4: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01fdb: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00153 _ = %13.call intersect(%14; 2)       [Plane]
:00154 
  01fe2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01fe9: 00 	test   rdi,0x7
  01ff0:    	jne    0x39dcc
  01ff6:    	cmp    DWORD PTR [rdi+0x4],0x29
  01ffa:    	jne    0x39dcc
  02000: 26 	cmp    DWORD PTR [rip+0xffffffffffff0d4d],0x26        # 0xffff2d54
  02007:    	jne    0x39dcc
  0200d:    	sub    rsp,0x40
  02011:    	movq   QWORD PTR [rsp],xmm2
  02016:    	movq   QWORD PTR [rsp+0x8],xmm4
  0201c:    	movq   QWORD PTR [rsp+0x10],xmm5
  02022:    	movq   QWORD PTR [rsp+0x18],xmm7
  02028: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0202f: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02036: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0203d: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02044:    	mov    rax,QWORD PTR [rbx]
  02047:    	lea    rdi,[rsp-0x18]
  0204c:    	mov    QWORD PTR [rdi],rax
  0204f:    	mov    QWORD PTR [rbx],rdi
  02052: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0205b:    	mov    QWORD PTR [rsp-0x38],rcx
  02060: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02067:    	mov    QWORD PTR [rsp-0x38],rax
  0206c: 00 	mov    rdi,0x2
  02073: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0207a:    	mov    QWORD PTR [rsp-0x40],rax
  0207f: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02086:    	mov    QWORD PTR [rsp-0x48],rax
  0208b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02094: 0e 	movabs rax,0x1000e00000041
  0209e:    	mov    QWORD PTR [rsp-0x28],rax
  020a3: 78 	movabs r13,0x55788deea540
  020ad:    	call   0xffff3f0e
  020b2:    	lea    rdi,[rbp-0x8]
  020b6:    	mov    QWORD PTR [rbx],rdi
  020b9:    	movq   xmm2,QWORD PTR [rsp]
  020be:    	movq   xmm4,QWORD PTR [rsp+0x8]
  020c4:    	movq   xmm5,QWORD PTR [rsp+0x10]
  020ca:    	movq   xmm7,QWORD PTR [rsp+0x18]
  020d0: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  020d7: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  020de: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  020e5: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  020ec:    	add    rsp,0x40
  020f0: 78 	movabs r13,0x55788dee1920
  020fa:    	test   rax,rax
  020fd:    	je     0xffff037b
:00156 %13 = %12.call hit()                 [Isect]
:00157 
  02103: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0210a: 00 	test   rdi,0x7
  02111:    	jne    0x39e3a
  02117:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0211b:    	jne    0x39e3a
  02121: 26 	cmp    DWORD PTR [rip+0xffffffffffff0c2c],0x26        # 0xffff2d54
  02128:    	jne    0x39e3a
  0212e:    	mov    esi,DWORD PTR [rip+0x318]        # 0x244c
  02134:    	cmp    esi,0xffffffff
  02137:    	je     0x39ea8
  0213d:    	cmp    WORD PTR [rdi+0x2],0x3
  02142:    	jne    0x215b
  02148:    	cmp    esi,0x6
  0214b:    	jge    0x215b
  02151:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  02156:    	jmp    0x21d5
  0215b:    	sub    rsp,0x40
  0215f:    	movq   QWORD PTR [rsp],xmm2
  02164:    	movq   QWORD PTR [rsp+0x8],xmm4
  0216a:    	movq   QWORD PTR [rsp+0x10],xmm5
  02170:    	movq   QWORD PTR [rsp+0x18],xmm7
  02176: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0217d: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02184: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  0218b: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02192: 78 	movabs rax,0x55788c73bb50
  0219c:    	call   rax
  0219e:    	movq   xmm2,QWORD PTR [rsp]
  021a3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  021a9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  021af:    	movq   xmm7,QWORD PTR [rsp+0x18]
  021b5: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  021bc: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  021c3: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  021ca: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  021d1:    	add    rsp,0x40
  021d5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00159 condnotbr %13 =>:00165
  021dc: ff 	mov    rax,QWORD PTR [rbp-0x90]
  021e3:    	or     rax,0x10
  021e7:    	cmp    rax,0x14
  021eb:    	je     0x22a3
:00160 %13 = dynvar(2, %6)
  021f1:    	mov    rax,QWORD PTR [rbp-0x10]
  021f5:    	mov    rax,QWORD PTR [rax]
  021f8:    	mov    rax,QWORD PTR [rax-0x48]
  021fc: ff 	mov    QWORD PTR [rbp-0x90],rax
:00161 %14 = literal[1.0]
  02203: 00 	movq   xmm3,QWORD PTR [rip+0x245]        # 0x2450
:00162 %13 = %13 + %14                      [Float][Float]
  0220b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  02212: 00 	test   rdi,0x1
  02219:    	jne    0x39f3f
  0221f: 00 	test   rdi,0x2
  02226:    	je     0x2262
  0222c:    	xorps  xmm6,xmm6
  0222f: 00 	movabs rax,0x8000000000000002
  02239:    	cmp    rdi,rax
  0223c:    	je     0x2274
  02242:    	mov    rax,rdi
  02245:    	sar    rax,0x3f
  02249:    	add    rax,0x2
  0224d:    	and    rdi,0xfffffffffffffffc
  02251:    	or     rdi,rax
  02254:    	rol    rdi,0x3d
  02258:    	movq   xmm6,rdi
  0225d:    	jmp    0x2274
  02262:    	call   0xffff03b4
  02267:    	test   rax,rax
  0226a:    	je     0x39f3f
  02270:    	movq   xmm6,xmm0
  02274:    	addsd  xmm6,xmm3
:00163 dynvar(2, %6) = %13
  02278:    	movq   xmm0,xmm6
  0227c:    	call   0xffff04a7
  02281: ff 	mov    QWORD PTR [rbp-0x90],rax
  02288:    	mov    rax,QWORD PTR [rbp-0x10]
  0228c:    	mov    rax,QWORD PTR [rax]
  0228f: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  02296:    	mov    QWORD PTR [rax-0x48],rdi
:00164 ret %13
  0229a: ff 	mov    rax,QWORD PTR [rbp-0x90]
  022a1:    	leave  
  022a2:    	ret    
:00165 %13 = literal[0.0]
  022a3: 00 	movq   xmm3,QWORD PTR [rip+0x1b5]        # 0x2460
:00166 ret %13
  022ab:    	movq   xmm0,xmm3
  022af:    	call   0xffff04a7
  022b4: ff 	mov    QWORD PTR [rbp-0x90],rax
  022bb: ff 	mov    rax,QWORD PTR [rbp-0x90]
  022c2:    	leave  
  022c3:    	ret    
==> start whole compile: <unnamed> FuncId(76) self_class:Scene start:[00000] bytecode:0x55788df2ec10
<== finished compile. elapsed:187.6µs
offset:Pos(74024) code: 8973 bytes  data: 355 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xd0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00064: ff 	mov    QWORD PTR [rbp-0xb8],rax
  0006b: ff 	mov    QWORD PTR [rbp-0xc0],rax
  00072:    	mov    rdi,QWORD PTR [rbp-0x28]
  00076: 00 	test   rdi,0x7
  0007d:    	jne    0x37b55
  00083:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00087:    	jne    0x37b55
:00000 %14 = dynvar(4, %4)
  0008d:    	mov    rax,QWORD PTR [rbp-0x10]
  00091:    	mov    rax,QWORD PTR [rax]
  00094:    	mov    rax,QWORD PTR [rax]
  00097:    	mov    rax,QWORD PTR [rax]
  0009a:    	mov    rax,QWORD PTR [rax-0x38]
  0009e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00001 %14 = %14 + 1: i16                   [Integer][Integer]
  000a5: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000ac: 00 	test   rdi,0x1
  000b3:    	je     0x37b64
  000b9:    	add    rdi,0x2
  000bd:    	jo     0x37b64
  000c3: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00002 dynvar(4, %4) = %14
  000ca:    	mov    rax,QWORD PTR [rbp-0x10]
  000ce:    	mov    rax,QWORD PTR [rax]
  000d1:    	mov    rax,QWORD PTR [rax]
  000d4:    	mov    rax,QWORD PTR [rax]
  000d7: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000de:    	mov    QWORD PTR [rax-0x38],rdi
:00003 %14 = dynvar(4, %1)
  000e2:    	mov    rax,QWORD PTR [rbp-0x10]
  000e6:    	mov    rax,QWORD PTR [rax]
  000e9:    	mov    rax,QWORD PTR [rax]
  000ec:    	mov    rax,QWORD PTR [rax]
  000ef:    	mov    rax,QWORD PTR [rax-0x20]
  000f3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00004 %2 = %14.call to_f()                 [Integer]
:00005 
  000fa: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00101: 00 	test   rdi,0x1
  00108:    	jne    0x125
  0010e: 00 	test   rdi,0x7
  00115:    	jne    0x37b73
  0011b:    	cmp    DWORD PTR [rdi+0x4],0x6
  0011f:    	jne    0x37b73
  00125: 26 	cmp    DWORD PTR [rip+0xffffffffffff07c0],0x26        # 0xffff08ec
  0012c:    	jne    0x37b73
  00132:    	sar    rdi,1
  00135:    	cvtsi2sd xmm2,rdi
:00007 %14 = dynvar(4, %2)
  0013a:    	mov    rax,QWORD PTR [rbp-0x10]
  0013e:    	mov    rax,QWORD PTR [rax]
  00141:    	mov    rax,QWORD PTR [rax]
  00144:    	mov    rax,QWORD PTR [rax]
  00147:    	mov    rax,QWORD PTR [rax-0x28]
  0014b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00008 %3 = %14.call to_f()                 [Integer]
:00009 
  00152: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00159: 00 	test   rdi,0x1
  00160:    	jne    0x17d
  00166: 00 	test   rdi,0x7
  0016d:    	jne    0x37b82
  00173:    	cmp    DWORD PTR [rdi+0x4],0x6
  00177:    	jne    0x37b82
  0017d: 26 	cmp    DWORD PTR [rip+0xffffffffffff0768],0x26        # 0xffff08ec
  00184:    	jne    0x37b82
  0018a:    	sar    rdi,1
  0018d:    	cvtsi2sd xmm3,rdi
:00011 %14 = dynvar(2, %1)
  00192:    	mov    rax,QWORD PTR [rbp-0x10]
  00196:    	mov    rax,QWORD PTR [rax]
  00199:    	mov    rax,QWORD PTR [rax-0x20]
  0019d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %4 = %14.call to_f()                 [Integer]
:00013 
  001a4: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001ab: 00 	test   rdi,0x1
  001b2:    	jne    0x1cf
  001b8: 00 	test   rdi,0x7
  001bf:    	jne    0x37b9e
  001c5:    	cmp    DWORD PTR [rdi+0x4],0x6
  001c9:    	jne    0x37b9e
  001cf: 26 	cmp    DWORD PTR [rip+0xffffffffffff0716],0x26        # 0xffff08ec
  001d6:    	jne    0x37b9e
  001dc:    	sar    rdi,1
  001df:    	cvtsi2sd xmm4,rdi
:00015 %14 = dynvar(3, %1)
  001e4:    	mov    rax,QWORD PTR [rbp-0x10]
  001e8:    	mov    rax,QWORD PTR [rax]
  001eb:    	mov    rax,QWORD PTR [rax]
  001ee:    	mov    rax,QWORD PTR [rax-0x20]
  001f2: ff 	mov    QWORD PTR [rbp-0x98],rax
:00016 %5 = %14.call to_f()                 [Integer]
:00017 
  001f9: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00200: 00 	test   rdi,0x1
  00207:    	jne    0x224
  0020d: 00 	test   rdi,0x7
  00214:    	jne    0x37bc7
  0021a:    	cmp    DWORD PTR [rdi+0x4],0x6
  0021e:    	jne    0x37bc7
  00224: 26 	cmp    DWORD PTR [rip+0xffffffffffff06c1],0x26        # 0xffff08ec
  0022b:    	jne    0x37bc7
  00231:    	sar    rdi,1
  00234:    	cvtsi2sd xmm5,rdi
:00019 %6 = %1.call to_f()                  [Integer]
:00020 
  00239:    	mov    rdi,QWORD PTR [rbp-0x30]
  0023d: 00 	test   rdi,0x1
  00244:    	jne    0x261
  0024a: 00 	test   rdi,0x7
  00251:    	jne    0x37bfd
  00257:    	cmp    DWORD PTR [rdi+0x4],0x6
  0025b:    	jne    0x37bfd
  00261: 26 	cmp    DWORD PTR [rip+0xffffffffffff0684],0x26        # 0xffff08ec
  00268:    	jne    0x37bfd
  0026e:    	sar    rdi,1
  00271:    	cvtsi2sd xmm6,rdi
:00022 %14 = dynvar(1, %1)
  00276:    	mov    rax,QWORD PTR [rbp-0x10]
  0027a:    	mov    rax,QWORD PTR [rax-0x20]
  0027e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00023 %7 = %14.call to_f()                 [Integer]
:00024 
  00285: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0028c: 00 	test   rdi,0x1
  00293:    	jne    0x2b0
  00299: 00 	test   rdi,0x7
  002a0:    	jne    0x37c40
  002a6:    	cmp    DWORD PTR [rdi+0x4],0x6
  002aa:    	jne    0x37c40
  002b0: 26 	cmp    DWORD PTR [rip+0xffffffffffff0635],0x26        # 0xffff08ec
  002b7:    	jne    0x37c40
  002bd:    	sar    rdi,1
  002c0:    	cvtsi2sd xmm7,rdi
:00026 %14 = dynvar(4, %5)
  002c5:    	mov    rax,QWORD PTR [rbp-0x10]
  002c9:    	mov    rax,QWORD PTR [rax]
  002cc:    	mov    rax,QWORD PTR [rax]
  002cf:    	mov    rax,QWORD PTR [rax]
  002d2:    	mov    rax,QWORD PTR [rax-0x40]
  002d6: ff 	mov    QWORD PTR [rbp-0x98],rax
:00027 %14 = %6 / %14                       [Float][Float]
  002dd: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  002e4: 00 	test   rdi,0x1
  002eb:    	jne    0x37c90
  002f1: 00 	test   rdi,0x2
  002f8:    	je     0x335
  002fe:    	xorps  xmm8,xmm8
  00302: 00 	movabs rax,0x8000000000000002
  0030c:    	cmp    rdi,rax
  0030f:    	je     0x348
  00315:    	mov    rax,rdi
  00318:    	sar    rax,0x3f
  0031c:    	add    rax,0x2
  00320:    	and    rdi,0xfffffffffffffffc
  00324:    	or     rdi,rax
  00327:    	rol    rdi,0x3d
  0032b:    	movq   xmm8,rdi
  00330:    	jmp    0x348
  00335:    	call   0xfffedf4c
  0033a:    	test   rax,rax
  0033d:    	je     0x37c90
  00343:    	movq   xmm8,xmm0
  00348:    	movq   rax,xmm8
  0034d:    	test   rax,rax
  00350:    	je     0xfffedf38
  00356:    	movq   xmm0,xmm6
  0035a:    	divsd  xmm0,xmm8
  0035f:    	movq   xmm8,xmm0
:00028 %14 = %4 + %14                       [Float][Float]
  00364:    	addsd  xmm8,xmm4
:00029 %15 = literal[2.0]
  00369: 1f 	movq   xmm9,QWORD PTR [rip+0x1fa6]        # 0x2318
:00030 %15 = %2 / %15                       [Float][Float]
  00372:    	movq   rax,xmm9
  00377:    	test   rax,rax
  0037a:    	je     0xfffedf38
  00380:    	movq   xmm0,xmm2
  00384:    	divsd  xmm0,xmm9
  00389:    	movq   xmm9,xmm0
:00031 %14 = %14 - %15                      [Float][Float]
  0038e:    	subsd  xmm8,xmm9
:00032 %15 = literal[2.0]
  00393: 1f 	movq   xmm9,QWORD PTR [rip+0x1f8c]        # 0x2328
:00033 %15 = %2 / %15                       [Float][Float]
  0039c:    	movq   rax,xmm9
  003a1:    	test   rax,rax
  003a4:    	je     0xfffedf38
  003aa:    	movq   xmm0,xmm2
  003ae:    	divsd  xmm0,xmm9
  003b3:    	movq   xmm9,xmm0
:00034 %8 = %14 / %15                       [Float][Float]
  003b8:    	movq   xmm10,xmm8
  003bd:    	movq   rax,xmm9
  003c2:    	test   rax,rax
  003c5:    	je     0xfffedf38
  003cb:    	divsd  xmm10,xmm9
:00035 %14 = dynvar(4, %5)
  003d0:    	mov    rax,QWORD PTR [rbp-0x10]
  003d4:    	mov    rax,QWORD PTR [rax]
  003d7:    	mov    rax,QWORD PTR [rax]
  003da:    	mov    rax,QWORD PTR [rax]
  003dd:    	mov    rax,QWORD PTR [rax-0x40]
  003e1: ff 	mov    QWORD PTR [rbp-0x98],rax
:00036 %14 = %7 / %14                       [Float][Float]
  003e8: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003ef: 00 	test   rdi,0x1
  003f6:    	jne    0x37ced
  003fc: 00 	test   rdi,0x2
  00403:    	je     0x440
  00409:    	xorps  xmm8,xmm8
  0040d: 00 	movabs rax,0x8000000000000002
  00417:    	cmp    rdi,rax
  0041a:    	je     0x453
  00420:    	mov    rax,rdi
  00423:    	sar    rax,0x3f
  00427:    	add    rax,0x2
  0042b:    	and    rdi,0xfffffffffffffffc
  0042f:    	or     rdi,rax
  00432:    	rol    rdi,0x3d
  00436:    	movq   xmm8,rdi
  0043b:    	jmp    0x453
  00440:    	call   0xfffedf4c
  00445:    	test   rax,rax
  00448:    	je     0x37ced
  0044e:    	movq   xmm8,xmm0
  00453:    	movq   rax,xmm8
  00458:    	test   rax,rax
  0045b:    	je     0xfffedf38
  00461:    	movq   xmm0,xmm7
  00465:    	divsd  xmm0,xmm8
  0046a:    	movq   xmm8,xmm0
:00037 %14 = %5 + %14                       [Float][Float]
  0046f:    	addsd  xmm8,xmm5
:00038 %15 = literal[2.0]
  00474: 1e 	movq   xmm9,QWORD PTR [rip+0x1ebb]        # 0x2338
:00039 %15 = %3 / %15                       [Float][Float]
  0047d:    	movq   rax,xmm9
  00482:    	test   rax,rax
  00485:    	je     0xfffedf38
  0048b:    	movq   xmm0,xmm3
  0048f:    	divsd  xmm0,xmm9
  00494:    	movq   xmm9,xmm0
:00040 %14 = %14 - %15                      [Float][Float]
  00499:    	subsd  xmm8,xmm9
:00041 %14 = neg %14                        [Float]
  0049e: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1ea2]        # 0x2348
:00042 %15 = literal[2.0]
  004a6: 1e 	movq   xmm9,QWORD PTR [rip+0x1ea9]        # 0x2358
:00043 %15 = %3 / %15                       [Float][Float]
  004af:    	movq   rax,xmm9
  004b4:    	test   rax,rax
  004b7:    	je     0xfffedf38
  004bd:    	movq   xmm0,xmm3
  004c1:    	divsd  xmm0,xmm9
  004c6:    	movq   xmm9,xmm0
:00044 %9 = %14 / %15                       [Float][Float]
  004cb:    	movq   xmm11,xmm8
  004d0:    	movq   rax,xmm9
  004d5:    	test   rax,rax
  004d8:    	je     0xfffedf38
  004de:    	divsd  xmm11,xmm9
:00045 %15 = const[Vec]                     [Vec]
  004e3: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff040e]        # 0xffff08f8
  004ea: 00 	cmp    rax,QWORD PTR [rip+0x1e87]        # 0x2378
  004f1:    	jne    0x37d69
  004f7: 00 	mov    rax,QWORD PTR [rip+0x1e6a]        # 0x2368
  004fe: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00046 %16 = %8
:00047 %17 = %9
:00048 %18 = literal[-1.0]
  00505: 1e 	movq   xmm9,QWORD PTR [rip+0x1e7a]        # 0x2388
:00049 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
:00050 
  0050e:    	movq   xmm0,xmm10
  00513:    	call   0xfffee03f
  00518: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0051f:    	movq   xmm0,xmm11
  00524:    	call   0xfffee03f
  00529: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00530:    	movq   xmm0,xmm9
  00535:    	call   0xfffee03f
  0053a: ff 	mov    QWORD PTR [rbp-0xb8],rax
  00541: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00548: 00 	test   rdi,0x7
  0054f:    	jne    0x37e27
  00555:    	cmp    DWORD PTR [rdi+0x4],0x26
  00559:    	jne    0x37e27
  0055f: 26 	cmp    DWORD PTR [rip+0xffffffffffff0386],0x26        # 0xffff08ec
  00566:    	jne    0x37e27
  0056c: 00 	mov    r9,0x0
  00573:    	sub    rsp,0x50
  00577:    	movq   QWORD PTR [rsp],xmm2
  0057c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00582:    	movq   QWORD PTR [rsp+0x10],xmm4
  00588:    	movq   QWORD PTR [rsp+0x18],xmm5
  0058e:    	movq   QWORD PTR [rsp+0x20],xmm6
  00594:    	movq   QWORD PTR [rsp+0x28],xmm7
  0059a: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  005a1: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  005a8: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  005af:    	mov    rdx,rdi
  005b2:    	mov    rax,QWORD PTR [rbx]
  005b5:    	lea    rdi,[rsp-0x18]
  005ba:    	mov    QWORD PTR [rdi],rax
  005bd:    	mov    QWORD PTR [rbx],rdi
  005c0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  005c9:    	mov    QWORD PTR [rsp-0x38],rcx
  005ce: ff 	lea    rcx,[rbp-0xa8]
  005d5: 00 	mov    r8,0x3
  005dc:    	call   0x37ea0
  005e1:    	lea    rdi,[rbp-0x8]
  005e5:    	mov    QWORD PTR [rbx],rdi
  005e8:    	movq   xmm2,QWORD PTR [rsp]
  005ed:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005f3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005f9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005ff:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00605:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0060b: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00612: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00619: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00620:    	add    rsp,0x50
  00624: 78 	movabs r13,0x55788df2ef40
  0062e:    	test   rax,rax
  00631:    	je     0xfffedf13
  00637: ff 	mov    QWORD PTR [rbp-0x98],rax
:00052 %10 = %14.call vnormalize()          [Vec]
:00053 
  0063e: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00645: 00 	test   rdi,0x7
  0064c:    	jne    0x37ed2
  00652:    	cmp    DWORD PTR [rdi+0x4],0x25
  00656:    	jne    0x37ed2
  0065c: 26 	cmp    DWORD PTR [rip+0xffffffffffff0289],0x26        # 0xffff08ec
  00663:    	jne    0x37ed2
  00669:    	sub    rsp,0x50
  0066d:    	movq   QWORD PTR [rsp],xmm2
  00672:    	movq   QWORD PTR [rsp+0x8],xmm3
  00678:    	movq   QWORD PTR [rsp+0x10],xmm4
  0067e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00684:    	movq   QWORD PTR [rsp+0x20],xmm6
  0068a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00690: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00697: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0069e: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  006a5:    	mov    rax,QWORD PTR [rbx]
  006a8:    	lea    rdi,[rsp-0x18]
  006ad:    	mov    QWORD PTR [rdi],rax
  006b0:    	mov    QWORD PTR [rbx],rdi
  006b3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  006bc:    	mov    QWORD PTR [rsp-0x38],rcx
  006c1: ff 	mov    rax,QWORD PTR [rbp-0x98]
  006c8:    	mov    QWORD PTR [rsp-0x38],rax
  006cd: 00 	mov    rdi,0x0
  006d4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006dd: 07 	movabs rax,0x70000003d
  006e7:    	mov    QWORD PTR [rsp-0x28],rax
  006ec: 78 	movabs r13,0x55788def86a0
  006f6:    	call   0xffff11b1
  006fb:    	lea    rdi,[rbp-0x8]
  006ff:    	mov    QWORD PTR [rbx],rdi
  00702:    	movq   xmm2,QWORD PTR [rsp]
  00707:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0070d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00713:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00719:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0071f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00725: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0072c: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00733: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  0073a:    	add    rsp,0x50
  0073e: 78 	movabs r13,0x55788df2ef70
  00748:    	test   rax,rax
  0074b:    	je     0xfffedf13
  00751:    	mov    QWORD PTR [rbp-0x78],rax
:00055 %14 = const[Ray]                     [Ray]
  00755: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff019c]        # 0xffff08f8
  0075c: 00 	cmp    rax,QWORD PTR [rip+0x1c45]        # 0x23a8
  00763:    	jne    0x37f4b
  00769: 00 	mov    rax,QWORD PTR [rip+0x1c28]        # 0x2398
  00770: ff 	mov    QWORD PTR [rbp-0x98],rax
:00056 %16 = const[Vec]                     [Vec]
  00777: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff017a]        # 0xffff08f8
  0077e: 00 	cmp    rax,QWORD PTR [rip+0x1c43]        # 0x23c8
  00785:    	jne    0x38009
  0078b: 00 	mov    rax,QWORD PTR [rip+0x1c26]        # 0x23b8
  00792: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00057 %17 = literal[0.0]
  00799: 1c 	movq   xmm8,QWORD PTR [rip+0x1c36]        # 0x23d8
:00058 %18 = literal[0.0]
  007a2: 1c 	movq   xmm9,QWORD PTR [rip+0x1c3d]        # 0x23e8
:00059 %19 = literal[0.0]
  007ab: 1c 	movq   xmm12,QWORD PTR [rip+0x1c44]        # 0x23f8
:00060 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
:00061 
  007b4:    	movq   xmm0,xmm8
  007b9:    	call   0xfffee03f
  007be: ff 	mov    QWORD PTR [rbp-0xb0],rax
  007c5:    	movq   xmm0,xmm9
  007ca:    	call   0xfffee03f
  007cf: ff 	mov    QWORD PTR [rbp-0xb8],rax
  007d6:    	movq   xmm0,xmm12
  007db:    	call   0xfffee03f
  007e0: ff 	mov    QWORD PTR [rbp-0xc0],rax
  007e7: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  007ee: 00 	test   rdi,0x7
  007f5:    	jne    0x380c7
  007fb:    	cmp    DWORD PTR [rdi+0x4],0x26
  007ff:    	jne    0x380c7
  00805: 26 	cmp    DWORD PTR [rip+0xffffffffffff00e0],0x26        # 0xffff08ec
  0080c:    	jne    0x380c7
  00812: 00 	mov    r9,0x0
  00819:    	sub    rsp,0x60
  0081d:    	movq   QWORD PTR [rsp],xmm2
  00822:    	movq   QWORD PTR [rsp+0x8],xmm3
  00828:    	movq   QWORD PTR [rsp+0x10],xmm4
  0082e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00834:    	movq   QWORD PTR [rsp+0x20],xmm6
  0083a:    	movq   QWORD PTR [rsp+0x28],xmm7
  00840: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00847: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0084e: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00855: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0085c: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00863:    	mov    rdx,rdi
  00866:    	mov    rax,QWORD PTR [rbx]
  00869:    	lea    rdi,[rsp-0x18]
  0086e:    	mov    QWORD PTR [rdi],rax
  00871:    	mov    QWORD PTR [rbx],rdi
  00874: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0087d:    	mov    QWORD PTR [rsp-0x38],rcx
  00882: ff 	lea    rcx,[rbp-0xb0]
  00889: 00 	mov    r8,0x3
  00890:    	call   0x38140
  00895:    	lea    rdi,[rbp-0x8]
  00899:    	mov    QWORD PTR [rbx],rdi
  0089c:    	movq   xmm2,QWORD PTR [rsp]
  008a1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008a7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008ad:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008b3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  008b9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  008bf: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  008c6: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  008cd: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  008d4: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  008db: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  008e2:    	add    rsp,0x60
  008e6: 78 	movabs r13,0x55788df2eff0
  008f0:    	test   rax,rax
  008f3:    	je     0xfffedf13
  008f9: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00063 %16 = %10
  00900:    	mov    rax,QWORD PTR [rbp-0x78]
  00904: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00064 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
:00065 
  0090b: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00912: 00 	test   rdi,0x7
  00919:    	jne    0x38172
  0091f:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00923:    	jne    0x38172
  00929: 26 	cmp    DWORD PTR [rip+0xfffffffffffeffbc],0x26        # 0xffff08ec
  00930:    	jne    0x38172
  00936: 00 	mov    r9,0x0
  0093d:    	sub    rsp,0x60
  00941:    	movq   QWORD PTR [rsp],xmm2
  00946:    	movq   QWORD PTR [rsp+0x8],xmm3
  0094c:    	movq   QWORD PTR [rsp+0x10],xmm4
  00952:    	movq   QWORD PTR [rsp+0x18],xmm5
  00958:    	movq   QWORD PTR [rsp+0x20],xmm6
  0095e:    	movq   QWORD PTR [rsp+0x28],xmm7
  00964: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0096b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00972: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00979: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00980: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00987:    	mov    rdx,rdi
  0098a:    	mov    rax,QWORD PTR [rbx]
  0098d:    	lea    rdi,[rsp-0x18]
  00992:    	mov    QWORD PTR [rdi],rax
  00995:    	mov    QWORD PTR [rbx],rdi
  00998: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009a1:    	mov    QWORD PTR [rsp-0x38],rcx
  009a6: ff 	lea    rcx,[rbp-0xa0]
  009ad: 00 	mov    r8,0x2
  009b4:    	call   0x381eb
  009b9:    	lea    rdi,[rbp-0x8]
  009bd:    	mov    QWORD PTR [rbx],rdi
  009c0:    	movq   xmm2,QWORD PTR [rsp]
  009c5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009cb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009d1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009d7:    	movq   xmm6,QWORD PTR [rsp+0x20]
  009dd:    	movq   xmm7,QWORD PTR [rsp+0x28]
  009e3: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  009ea: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  009f1: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  009f8: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  009ff: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00a06:    	add    rsp,0x60
  00a0a: 78 	movabs r13,0x55788df2f030
  00a14:    	test   rax,rax
  00a17:    	je     0xfffedf13
  00a1d:    	mov    QWORD PTR [rbp-0x80],rax
:00067 %14 = const[Isect]                   [Isect]
  00a21: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffefed0]        # 0xffff08f8
  00a28: 00 	cmp    rax,QWORD PTR [rip+0x19e9]        # 0x2418
  00a2f:    	jne    0x3821d
  00a35: 00 	mov    rax,QWORD PTR [rip+0x19cc]        # 0x2408
  00a3c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00068 %12 = %14.call new()                 [#<Class:Isect>]
:00069 
  00a43: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a4a: 00 	test   rdi,0x7
  00a51:    	jne    0x382f7
  00a57:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00a5b:    	jne    0x382f7
  00a61: 26 	cmp    DWORD PTR [rip+0xfffffffffffefe84],0x26        # 0xffff08ec
  00a68:    	jne    0x382f7
  00a6e: 00 	mov    r9,0x0
  00a75:    	sub    rsp,0x60
  00a79:    	movq   QWORD PTR [rsp],xmm2
  00a7e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a84:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a8a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a90:    	movq   QWORD PTR [rsp+0x20],xmm6
  00a96:    	movq   QWORD PTR [rsp+0x28],xmm7
  00a9c: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00aa3: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00aaa: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ab1: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ab8: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00abf:    	mov    rdx,rdi
  00ac2:    	mov    rax,QWORD PTR [rbx]
  00ac5:    	lea    rdi,[rsp-0x18]
  00aca:    	mov    QWORD PTR [rdi],rax
  00acd:    	mov    QWORD PTR [rbx],rdi
  00ad0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ad9:    	mov    QWORD PTR [rsp-0x38],rcx
  00ade: ff 	lea    rcx,[rbp-0xa0]
  00ae5: 00 	mov    r8,0x0
  00aec:    	call   0x38370
  00af1:    	lea    rdi,[rbp-0x8]
  00af5:    	mov    QWORD PTR [rbx],rdi
  00af8:    	movq   xmm2,QWORD PTR [rsp]
  00afd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b03:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b09:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b0f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b15:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b1b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00b22: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00b29: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00b30: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00b37: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00b3e:    	add    rsp,0x60
  00b42: 78 	movabs r13,0x55788df2f070
  00b4c:    	test   rax,rax
  00b4f:    	je     0xfffedf13
  00b55: ff 	mov    QWORD PTR [rbp-0x88],rax
:00071 %14 = @spheres: Scene[IvarId(0)]
  00b5c:    	mov    rdi,QWORD PTR [rbp-0x28]
  00b60:    	cmp    WORD PTR [rdi+0x2],0x3
  00b65:    	jne    0x383a2
  00b6b:    	mov    rax,QWORD PTR [rdi+0x10]
  00b6f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 %15 = 0: i32
  00b76: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00073 %14 = %14.[%15]
  00b81:    	sub    rsp,0x60
  00b85:    	movq   QWORD PTR [rsp],xmm2
  00b8a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b90:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b96:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b9c:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ba2:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ba8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00baf: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00bb6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00bbd: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00bc4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00bcb: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00bd2: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00bd9:    	mov    rdi,rbx
  00bdc:    	mov    rsi,r12
  00bdf: 78 	movabs rax,0x55788c797be0
  00be9:    	call   rax
  00beb:    	movq   xmm2,QWORD PTR [rsp]
  00bf0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bf6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00bfc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c02:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c08:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c0e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00c15: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00c1c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00c23: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00c2a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00c31:    	add    rsp,0x60
  00c35: 78 	movabs r13,0x55788df2f0b0
  00c3f:    	test   rax,rax
  00c42:    	je     0xfffedf13
  00c48: ff 	mov    QWORD PTR [rbp-0x98],rax
:00074 %15 = %11
  00c4f:    	mov    rax,QWORD PTR [rbp-0x80]
  00c53: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00075 %16 = %12
  00c5a: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00c61: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00076 _ = %14.call intersect(%15; 2)       [Sphere]
:00077 
  00c68: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00c6f: 00 	test   rdi,0x7
  00c76:    	jne    0x3844c
  00c7c:    	cmp    DWORD PTR [rdi+0x4],0x27
  00c80:    	jne    0x3844c
  00c86: 26 	cmp    DWORD PTR [rip+0xfffffffffffefc5f],0x26        # 0xffff08ec
  00c8d:    	jne    0x3844c
  00c93:    	sub    rsp,0x60
  00c97:    	movq   QWORD PTR [rsp],xmm2
  00c9c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ca2:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ca8:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cae:    	movq   QWORD PTR [rsp+0x20],xmm6
  00cb4:    	movq   QWORD PTR [rsp+0x28],xmm7
  00cba: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00cc1: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00cc8: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ccf: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00cd6: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00cdd:    	mov    rax,QWORD PTR [rbx]
  00ce0:    	lea    rdi,[rsp-0x18]
  00ce5:    	mov    QWORD PTR [rdi],rax
  00ce8:    	mov    QWORD PTR [rbx],rdi
  00ceb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cf4:    	mov    QWORD PTR [rsp-0x38],rcx
  00cf9: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00d00:    	mov    QWORD PTR [rsp-0x38],rax
  00d05: 00 	mov    rdi,0x2
  00d0c: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00d13:    	mov    QWORD PTR [rsp-0x40],rax
  00d18: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00d1f:    	mov    QWORD PTR [rsp-0x48],rax
  00d24: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d2d: 10 	movabs rax,0x100000003f
  00d37:    	mov    QWORD PTR [rsp-0x28],rax
  00d3c: 78 	movabs r13,0x55788dee86a0
  00d46:    	call   0xffff14b9
  00d4b:    	lea    rdi,[rbp-0x8]
  00d4f:    	mov    QWORD PTR [rbx],rdi
  00d52:    	movq   xmm2,QWORD PTR [rsp]
  00d57:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d5d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d63:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d69:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d6f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d75: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00d7c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00d83: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00d8a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00d91: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00d98:    	add    rsp,0x60
  00d9c: 78 	movabs r13,0x55788df2f0f0
  00da6:    	test   rax,rax
  00da9:    	je     0xfffedf13
:00079 %14 = @spheres: Scene[IvarId(0)]
  00daf:    	mov    rdi,QWORD PTR [rbp-0x28]
  00db3:    	cmp    WORD PTR [rdi+0x2],0x3
  00db8:    	jne    0x384c5
  00dbe:    	mov    rax,QWORD PTR [rdi+0x10]
  00dc2: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 %15 = 1: i32
  00dc9: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00081 %14 = %14.[%15]
  00dd4:    	sub    rsp,0x60
  00dd8:    	movq   QWORD PTR [rsp],xmm2
  00ddd:    	movq   QWORD PTR [rsp+0x8],xmm3
  00de3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00de9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00def:    	movq   QWORD PTR [rsp+0x20],xmm6
  00df5:    	movq   QWORD PTR [rsp+0x28],xmm7
  00dfb: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00e02: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00e09: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00e10: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00e17: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00e1e: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00e25: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00e2c:    	mov    rdi,rbx
  00e2f:    	mov    rsi,r12
  00e32: 78 	movabs rax,0x55788c797be0
  00e3c:    	call   rax
  00e3e:    	movq   xmm2,QWORD PTR [rsp]
  00e43:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e49:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e4f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e55:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e5b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e61: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00e68: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00e6f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00e76: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00e7d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00e84:    	add    rsp,0x60
  00e88: 78 	movabs r13,0x55788df2f130
  00e92:    	test   rax,rax
  00e95:    	je     0xfffedf13
  00e9b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00082 %15 = %11
  00ea2:    	mov    rax,QWORD PTR [rbp-0x80]
  00ea6: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00083 %16 = %12
  00ead: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00eb4: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00084 _ = %14.call intersect(%15; 2)       [Sphere]
:00085 
  00ebb: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00ec2: 00 	test   rdi,0x7
  00ec9:    	jne    0x3856f
  00ecf:    	cmp    DWORD PTR [rdi+0x4],0x27
  00ed3:    	jne    0x3856f
  00ed9: 26 	cmp    DWORD PTR [rip+0xfffffffffffefa0c],0x26        # 0xffff08ec
  00ee0:    	jne    0x3856f
  00ee6:    	sub    rsp,0x60
  00eea:    	movq   QWORD PTR [rsp],xmm2
  00eef:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ef5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00efb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f01:    	movq   QWORD PTR [rsp+0x20],xmm6
  00f07:    	movq   QWORD PTR [rsp+0x28],xmm7
  00f0d: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00f14: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00f1b: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f22: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f29: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f30:    	mov    rax,QWORD PTR [rbx]
  00f33:    	lea    rdi,[rsp-0x18]
  00f38:    	mov    QWORD PTR [rdi],rax
  00f3b:    	mov    QWORD PTR [rbx],rdi
  00f3e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f47:    	mov    QWORD PTR [rsp-0x38],rcx
  00f4c: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00f53:    	mov    QWORD PTR [rsp-0x38],rax
  00f58: 00 	mov    rdi,0x2
  00f5f: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  00f66:    	mov    QWORD PTR [rsp-0x40],rax
  00f6b: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  00f72:    	mov    QWORD PTR [rsp-0x48],rax
  00f77: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f80: 10 	movabs rax,0x100000003f
  00f8a:    	mov    QWORD PTR [rsp-0x28],rax
  00f8f: 78 	movabs r13,0x55788dee86a0
  00f99:    	call   0xffff14b9
  00f9e:    	lea    rdi,[rbp-0x8]
  00fa2:    	mov    QWORD PTR [rbx],rdi
  00fa5:    	movq   xmm2,QWORD PTR [rsp]
  00faa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fb0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fb6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00fbc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00fc2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00fc8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00fcf: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00fd6: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00fdd: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00fe4: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00feb:    	add    rsp,0x60
  00fef: 78 	movabs r13,0x55788df2f170
  00ff9:    	test   rax,rax
  00ffc:    	je     0xfffedf13
:00087 %14 = @spheres: Scene[IvarId(0)]
  01002:    	mov    rdi,QWORD PTR [rbp-0x28]
  01006:    	cmp    WORD PTR [rdi+0x2],0x3
  0100b:    	jne    0x385e8
  01011:    	mov    rax,QWORD PTR [rdi+0x10]
  01015: ff 	mov    QWORD PTR [rbp-0x98],rax
:00088 %15 = 2: i32
  0101c: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00089 %14 = %14.[%15]
  01027:    	sub    rsp,0x60
  0102b:    	movq   QWORD PTR [rsp],xmm2
  01030:    	movq   QWORD PTR [rsp+0x8],xmm3
  01036:    	movq   QWORD PTR [rsp+0x10],xmm4
  0103c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01042:    	movq   QWORD PTR [rsp+0x20],xmm6
  01048:    	movq   QWORD PTR [rsp+0x28],xmm7
  0104e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01055: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0105c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01063: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0106a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01071: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01078: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0107f:    	mov    rdi,rbx
  01082:    	mov    rsi,r12
  01085: 78 	movabs rax,0x55788c797be0
  0108f:    	call   rax
  01091:    	movq   xmm2,QWORD PTR [rsp]
  01096:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0109c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010a2:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010a8:    	movq   xmm6,QWORD PTR [rsp+0x20]
  010ae:    	movq   xmm7,QWORD PTR [rsp+0x28]
  010b4: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  010bb: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  010c2: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  010c9: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  010d0: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  010d7:    	add    rsp,0x60
  010db: 78 	movabs r13,0x55788df2f1b0
  010e5:    	test   rax,rax
  010e8:    	je     0xfffedf13
  010ee: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %15 = %11
  010f5:    	mov    rax,QWORD PTR [rbp-0x80]
  010f9: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00091 %16 = %12
  01100: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01107: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00092 _ = %14.call intersect(%15; 2)       [Sphere]
:00093 
  0110e: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01115: 00 	test   rdi,0x7
  0111c:    	jne    0x38692
  01122:    	cmp    DWORD PTR [rdi+0x4],0x27
  01126:    	jne    0x38692
  0112c: 26 	cmp    DWORD PTR [rip+0xfffffffffffef7b9],0x26        # 0xffff08ec
  01133:    	jne    0x38692
  01139:    	sub    rsp,0x60
  0113d:    	movq   QWORD PTR [rsp],xmm2
  01142:    	movq   QWORD PTR [rsp+0x8],xmm3
  01148:    	movq   QWORD PTR [rsp+0x10],xmm4
  0114e:    	movq   QWORD PTR [rsp+0x18],xmm5
  01154:    	movq   QWORD PTR [rsp+0x20],xmm6
  0115a:    	movq   QWORD PTR [rsp+0x28],xmm7
  01160: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01167: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0116e: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01175: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0117c: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01183:    	mov    rax,QWORD PTR [rbx]
  01186:    	lea    rdi,[rsp-0x18]
  0118b:    	mov    QWORD PTR [rdi],rax
  0118e:    	mov    QWORD PTR [rbx],rdi
  01191: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0119a:    	mov    QWORD PTR [rsp-0x38],rcx
  0119f: ff 	mov    rax,QWORD PTR [rbp-0x98]
  011a6:    	mov    QWORD PTR [rsp-0x38],rax
  011ab: 00 	mov    rdi,0x2
  011b2: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  011b9:    	mov    QWORD PTR [rsp-0x40],rax
  011be: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  011c5:    	mov    QWORD PTR [rsp-0x48],rax
  011ca: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011d3: 10 	movabs rax,0x100000003f
  011dd:    	mov    QWORD PTR [rsp-0x28],rax
  011e2: 78 	movabs r13,0x55788dee86a0
  011ec:    	call   0xffff14b9
  011f1:    	lea    rdi,[rbp-0x8]
  011f5:    	mov    QWORD PTR [rbx],rdi
  011f8:    	movq   xmm2,QWORD PTR [rsp]
  011fd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01203:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01209:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0120f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01215:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0121b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01222: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01229: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01230: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01237: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0123e:    	add    rsp,0x60
  01242: 78 	movabs r13,0x55788df2f1f0
  0124c:    	test   rax,rax
  0124f:    	je     0xfffedf13
:00095 %14 = @plane: Scene[IvarId(1)]
  01255:    	mov    rdi,QWORD PTR [rbp-0x28]
  01259:    	cmp    WORD PTR [rdi+0x2],0x3
  0125e:    	jne    0x3870b
  01264:    	mov    rax,QWORD PTR [rdi+0x18]
  01268: ff 	mov    QWORD PTR [rbp-0x98],rax
:00096 %15 = %11
  0126f:    	mov    rax,QWORD PTR [rbp-0x80]
  01273: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00097 %16 = %12
  0127a: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01281: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00098 _ = %14.call intersect(%15; 2)       [Plane]
:00099 
  01288: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0128f: 00 	test   rdi,0x7
  01296:    	jne    0x387b5
  0129c:    	cmp    DWORD PTR [rdi+0x4],0x29
  012a0:    	jne    0x387b5
  012a6: 26 	cmp    DWORD PTR [rip+0xfffffffffffef63f],0x26        # 0xffff08ec
  012ad:    	jne    0x387b5
  012b3:    	sub    rsp,0x60
  012b7:    	movq   QWORD PTR [rsp],xmm2
  012bc:    	movq   QWORD PTR [rsp+0x8],xmm3
  012c2:    	movq   QWORD PTR [rsp+0x10],xmm4
  012c8:    	movq   QWORD PTR [rsp+0x18],xmm5
  012ce:    	movq   QWORD PTR [rsp+0x20],xmm6
  012d4:    	movq   QWORD PTR [rsp+0x28],xmm7
  012da: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  012e1: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  012e8: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  012ef: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  012f6: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  012fd:    	mov    rax,QWORD PTR [rbx]
  01300:    	lea    rdi,[rsp-0x18]
  01305:    	mov    QWORD PTR [rdi],rax
  01308:    	mov    QWORD PTR [rbx],rdi
  0130b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01314:    	mov    QWORD PTR [rsp-0x38],rcx
  01319: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01320:    	mov    QWORD PTR [rsp-0x38],rax
  01325: 00 	mov    rdi,0x2
  0132c: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01333:    	mov    QWORD PTR [rsp-0x40],rax
  01338: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  0133f:    	mov    QWORD PTR [rsp-0x48],rax
  01344: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0134d: 0e 	movabs rax,0xe00000041
  01357:    	mov    QWORD PTR [rsp-0x28],rax
  0135c: 78 	movabs r13,0x55788deea540
  01366:    	call   0xffff1aa6
  0136b:    	lea    rdi,[rbp-0x8]
  0136f:    	mov    QWORD PTR [rbx],rdi
  01372:    	movq   xmm2,QWORD PTR [rsp]
  01377:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0137d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01383:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01389:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0138f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01395: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0139c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  013a3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  013aa: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  013b1: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  013b8:    	add    rsp,0x60
  013bc: 78 	movabs r13,0x55788df2f250
  013c6:    	test   rax,rax
  013c9:    	je     0xfffedf13
:00101 %14 = %12.call hit()                 [Isect]
:00102 
  013cf: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  013d6: 00 	test   rdi,0x7
  013dd:    	jne    0x3882e
  013e3:    	cmp    DWORD PTR [rdi+0x4],0x2d
  013e7:    	jne    0x3882e
  013ed: 26 	cmp    DWORD PTR [rip+0xfffffffffffef4f8],0x26        # 0xffff08ec
  013f4:    	jne    0x3882e
  013fa:    	mov    esi,DWORD PTR [rip+0x1024]        # 0x2424
  01400:    	cmp    esi,0xffffffff
  01403:    	je     0x388a7
  01409:    	cmp    WORD PTR [rdi+0x2],0x3
  0140e:    	jne    0x1427
  01414:    	cmp    esi,0x6
  01417:    	jge    0x1427
  0141d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01422:    	jmp    0x14c7
  01427:    	sub    rsp,0x60
  0142b:    	movq   QWORD PTR [rsp],xmm2
  01430:    	movq   QWORD PTR [rsp+0x8],xmm3
  01436:    	movq   QWORD PTR [rsp+0x10],xmm4
  0143c:    	movq   QWORD PTR [rsp+0x18],xmm5
  01442:    	movq   QWORD PTR [rsp+0x20],xmm6
  01448:    	movq   QWORD PTR [rsp+0x28],xmm7
  0144e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01455: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0145c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01463: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0146a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01471: 78 	movabs rax,0x55788c73bb50
  0147b:    	call   rax
  0147d:    	movq   xmm2,QWORD PTR [rsp]
  01482:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01488:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0148e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01494:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0149a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  014a0: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  014a7: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  014ae: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  014b5: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  014bc: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  014c3:    	add    rsp,0x60
  014c7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00104 condnotbr %14 =>:00147
  014ce: ff 	mov    rax,QWORD PTR [rbp-0x98]
  014d5:    	or     rax,0x10
  014d9:    	cmp    rax,0x14
  014dd:    	je     0x22f9
:00105 %14 = %12
  014e3: ff 	mov    rax,QWORD PTR [rbp-0x88]
  014ea: ff 	mov    QWORD PTR [rbp-0x98],rax
:00106 %13 = %0.call ambient_occlusion(%14; 1) [Scene]
:00107 
  014f1:    	mov    rdi,QWORD PTR [rbp-0x28]
  014f5: 26 	cmp    DWORD PTR [rip+0xfffffffffffef3f0],0x26        # 0xffff08ec
  014fc:    	jne    0x38964
  01502:    	sub    rsp,0x60
  01506:    	movq   QWORD PTR [rsp],xmm2
  0150b:    	movq   QWORD PTR [rsp+0x8],xmm3
  01511:    	movq   QWORD PTR [rsp+0x10],xmm4
  01517:    	movq   QWORD PTR [rsp+0x18],xmm5
  0151d:    	movq   QWORD PTR [rsp+0x20],xmm6
  01523:    	movq   QWORD PTR [rsp+0x28],xmm7
  01529: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01530: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01537: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0153e: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01545: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0154c:    	mov    rax,QWORD PTR [rbx]
  0154f:    	lea    rdi,[rsp-0x18]
  01554:    	mov    QWORD PTR [rdi],rax
  01557:    	mov    QWORD PTR [rbx],rdi
  0155a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01563:    	mov    QWORD PTR [rsp-0x38],rcx
  01568:    	mov    rax,QWORD PTR [rbp-0x28]
  0156c:    	mov    QWORD PTR [rsp-0x38],rax
  01571: 00 	mov    rdi,0x1
  01578: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0157f:    	mov    QWORD PTR [rsp-0x40],rax
  01584: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0158d: 0e 	movabs rax,0xe00000045
  01597:    	mov    QWORD PTR [rsp-0x28],rax
  0159c: 78 	movabs r13,0x55788deeac50
  015a6:    	call   0xffff78d2
  015ab:    	lea    rdi,[rbp-0x8]
  015af:    	mov    QWORD PTR [rbx],rdi
  015b2:    	movq   xmm2,QWORD PTR [rsp]
  015b7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015bd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015c3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  015c9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  015cf:    	movq   xmm7,QWORD PTR [rsp+0x28]
  015d5: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  015dc: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  015e3: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  015ea: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  015f1: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  015f8:    	add    rsp,0x60
  015fc: 78 	movabs r13,0x55788df2f2d0
  01606:    	test   rax,rax
  01609:    	je     0xfffedf13
  0160f: ff 	mov    QWORD PTR [rbp-0x90],rax
:00109 %14 = dynvar(2, %2)
  01616:    	mov    rax,QWORD PTR [rbp-0x10]
  0161a:    	mov    rax,QWORD PTR [rax]
  0161d:    	mov    rax,QWORD PTR [rax-0x28]
  01621: ff 	mov    QWORD PTR [rbp-0x98],rax
:00110 %16 = dynvar(2, %2)
  01628:    	mov    rax,QWORD PTR [rbp-0x10]
  0162c:    	mov    rax,QWORD PTR [rax]
  0162f:    	mov    rax,QWORD PTR [rax-0x28]
  01633: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00111 %15 = %16.call x()                   [Vec]
:00112 
  0163a: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01641: 00 	test   rdi,0x7
  01648:    	jne    0x389dd
  0164e:    	cmp    DWORD PTR [rdi+0x4],0x25
  01652:    	jne    0x389dd
  01658: 26 	cmp    DWORD PTR [rip+0xfffffffffffef28d],0x26        # 0xffff08ec
  0165f:    	jne    0x389dd
  01665:    	mov    esi,DWORD PTR [rip+0xdc1]        # 0x242c
  0166b:    	cmp    esi,0xffffffff
  0166e:    	je     0x38a56
  01674:    	cmp    WORD PTR [rdi+0x2],0x3
  01679:    	jne    0x1692
  0167f:    	cmp    esi,0x6
  01682:    	jge    0x1692
  01688:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0168d:    	jmp    0x1732
  01692:    	sub    rsp,0x60
  01696:    	movq   QWORD PTR [rsp],xmm2
  0169b:    	movq   QWORD PTR [rsp+0x8],xmm3
  016a1:    	movq   QWORD PTR [rsp+0x10],xmm4
  016a7:    	movq   QWORD PTR [rsp+0x18],xmm5
  016ad:    	movq   QWORD PTR [rsp+0x20],xmm6
  016b3:    	movq   QWORD PTR [rsp+0x28],xmm7
  016b9: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  016c0: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  016c7: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  016ce: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  016d5: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  016dc: 78 	movabs rax,0x55788c73bb50
  016e6:    	call   rax
  016e8:    	movq   xmm2,QWORD PTR [rsp]
  016ed:    	movq   xmm3,QWORD PTR [rsp+0x8]
  016f3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  016f9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  016ff:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01705:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0170b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01712: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01719: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01720: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01727: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0172e:    	add    rsp,0x60
  01732: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00114 %16 = %13.call x()                   [Vec]
:00115 
  01739: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01740: 00 	test   rdi,0x7
  01747:    	jne    0x38b13
  0174d:    	cmp    DWORD PTR [rdi+0x4],0x25
  01751:    	jne    0x38b13
  01757: 26 	cmp    DWORD PTR [rip+0xfffffffffffef18e],0x26        # 0xffff08ec
  0175e:    	jne    0x38b13
  01764:    	mov    esi,DWORD PTR [rip+0xcca]        # 0x2434
  0176a:    	cmp    esi,0xffffffff
  0176d:    	je     0x38b8c
  01773:    	cmp    WORD PTR [rdi+0x2],0x3
  01778:    	jne    0x1791
  0177e:    	cmp    esi,0x6
  01781:    	jge    0x1791
  01787:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0178c:    	jmp    0x1831
  01791:    	sub    rsp,0x60
  01795:    	movq   QWORD PTR [rsp],xmm2
  0179a:    	movq   QWORD PTR [rsp+0x8],xmm3
  017a0:    	movq   QWORD PTR [rsp+0x10],xmm4
  017a6:    	movq   QWORD PTR [rsp+0x18],xmm5
  017ac:    	movq   QWORD PTR [rsp+0x20],xmm6
  017b2:    	movq   QWORD PTR [rsp+0x28],xmm7
  017b8: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  017bf: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  017c6: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  017cd: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  017d4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  017db: 78 	movabs rax,0x55788c73bb50
  017e5:    	call   rax
  017e7:    	movq   xmm2,QWORD PTR [rsp]
  017ec:    	movq   xmm3,QWORD PTR [rsp+0x8]
  017f2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  017f8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  017fe:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01804:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0180a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01811: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01818: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0181f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01826: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0182d:    	add    rsp,0x60
  01831: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00117 %15 = %15 + %16                      [Float][Float]
  01838: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0183f: 00 	test   rdi,0x1
  01846:    	jne    0x38c49
  0184c: 00 	test   rdi,0x2
  01853:    	je     0x1890
  01859:    	xorps  xmm13,xmm13
  0185d: 00 	movabs rax,0x8000000000000002
  01867:    	cmp    rdi,rax
  0186a:    	je     0x18a3
  01870:    	mov    rax,rdi
  01873:    	sar    rax,0x3f
  01877:    	add    rax,0x2
  0187b:    	and    rdi,0xfffffffffffffffc
  0187f:    	or     rdi,rax
  01882:    	rol    rdi,0x3d
  01886:    	movq   xmm13,rdi
  0188b:    	jmp    0x18a3
  01890:    	call   0xfffedf4c
  01895:    	test   rax,rax
  01898:    	je     0x38c49
  0189e:    	movq   xmm13,xmm0
  018a3: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  018aa: 00 	test   rdi,0x1
  018b1:    	jne    0x38cc2
  018b7: 00 	test   rdi,0x2
  018be:    	je     0x18fb
  018c4:    	xorps  xmm14,xmm14
  018c8: 00 	movabs rax,0x8000000000000002
  018d2:    	cmp    rdi,rax
  018d5:    	je     0x190e
  018db:    	mov    rax,rdi
  018de:    	sar    rax,0x3f
  018e2:    	add    rax,0x2
  018e6:    	and    rdi,0xfffffffffffffffc
  018ea:    	or     rdi,rax
  018ed:    	rol    rdi,0x3d
  018f1:    	movq   xmm14,rdi
  018f6:    	jmp    0x190e
  018fb:    	call   0xfffedf4c
  01900:    	test   rax,rax
  01903:    	je     0x38cc2
  01909:    	movq   xmm14,xmm0
  0190e:    	addsd  xmm13,xmm14
:00118 _ = %14.call x=(%15; 1)              [Vec]
:00119 
  01913:    	movq   xmm0,xmm13
  01918:    	call   0xfffee03f
  0191d: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01924: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0192b: 00 	test   rdi,0x7
  01932:    	jne    0x38d3b
  01938:    	cmp    DWORD PTR [rdi+0x4],0x25
  0193c:    	jne    0x38d3b
  01942: 26 	cmp    DWORD PTR [rip+0xfffffffffffeefa3],0x26        # 0xffff08ec
  01949:    	jne    0x38d3b
  0194f:    	mov    esi,DWORD PTR [rip+0xae7]        # 0x243c
  01955:    	cmp    esi,0xffffffff
  01958:    	je     0x38db4
  0195e:    	cmp    WORD PTR [rdi+0x2],0x3
  01963:    	jne    0x1983
  01969:    	cmp    esi,0x6
  0196c:    	jge    0x1983
  01972: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01979:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0197e:    	jmp    0x1a59
  01983:    	sub    rsp,0x70
  01987:    	movq   QWORD PTR [rsp],xmm2
  0198c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01992:    	movq   QWORD PTR [rsp+0x10],xmm4
  01998:    	movq   QWORD PTR [rsp+0x18],xmm5
  0199e:    	movq   QWORD PTR [rsp+0x20],xmm6
  019a4:    	movq   QWORD PTR [rsp+0x28],xmm7
  019aa: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  019b1: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  019b8: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  019bf: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  019c6: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  019cd: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  019d4: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  019db: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  019e2: 78 	movabs rax,0x55788c73bdd0
  019ec:    	call   rax
  019ee:    	movq   xmm2,QWORD PTR [rsp]
  019f3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  019f9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  019ff:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01a05:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01a0b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01a11: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01a18: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01a1f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01a26: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01a2d: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01a34: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  01a3b: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  01a42:    	add    rsp,0x70
  01a46: 78 	movabs r13,0x55788df2f390
  01a50:    	test   rax,rax
  01a53:    	je     0xfffedf13
:00121 %14 = dynvar(2, %2)
  01a59:    	mov    rax,QWORD PTR [rbp-0x10]
  01a5d:    	mov    rax,QWORD PTR [rax]
  01a60:    	mov    rax,QWORD PTR [rax-0x28]
  01a64: ff 	mov    QWORD PTR [rbp-0x98],rax
:00122 %16 = dynvar(2, %2)
  01a6b:    	mov    rax,QWORD PTR [rbp-0x10]
  01a6f:    	mov    rax,QWORD PTR [rax]
  01a72:    	mov    rax,QWORD PTR [rax-0x28]
  01a76: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00123 %15 = %16.call y()                   [Vec]
:00124 
  01a7d: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01a84: 00 	test   rdi,0x7
  01a8b:    	jne    0x38e97
  01a91:    	cmp    DWORD PTR [rdi+0x4],0x25
  01a95:    	jne    0x38e97
  01a9b: 26 	cmp    DWORD PTR [rip+0xfffffffffffeee4a],0x26        # 0xffff08ec
  01aa2:    	jne    0x38e97
  01aa8:    	mov    esi,DWORD PTR [rip+0x996]        # 0x2444
  01aae:    	cmp    esi,0xffffffff
  01ab1:    	je     0x38f10
  01ab7:    	cmp    WORD PTR [rdi+0x2],0x3
  01abc:    	jne    0x1ad5
  01ac2:    	cmp    esi,0x6
  01ac5:    	jge    0x1ad5
  01acb:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01ad0:    	jmp    0x1b75
  01ad5:    	sub    rsp,0x60
  01ad9:    	movq   QWORD PTR [rsp],xmm2
  01ade:    	movq   QWORD PTR [rsp+0x8],xmm3
  01ae4:    	movq   QWORD PTR [rsp+0x10],xmm4
  01aea:    	movq   QWORD PTR [rsp+0x18],xmm5
  01af0:    	movq   QWORD PTR [rsp+0x20],xmm6
  01af6:    	movq   QWORD PTR [rsp+0x28],xmm7
  01afc: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01b03: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01b0a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01b11: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01b18: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01b1f: 78 	movabs rax,0x55788c73bb50
  01b29:    	call   rax
  01b2b:    	movq   xmm2,QWORD PTR [rsp]
  01b30:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01b36:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01b3c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01b42:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01b48:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01b4e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01b55: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01b5c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01b63: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01b6a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01b71:    	add    rsp,0x60
  01b75: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00126 %16 = %13.call y()                   [Vec]
:00127 
  01b7c: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01b83: 00 	test   rdi,0x7
  01b8a:    	jne    0x38fcd
  01b90:    	cmp    DWORD PTR [rdi+0x4],0x25
  01b94:    	jne    0x38fcd
  01b9a: 26 	cmp    DWORD PTR [rip+0xfffffffffffeed4b],0x26        # 0xffff08ec
  01ba1:    	jne    0x38fcd
  01ba7:    	mov    esi,DWORD PTR [rip+0x89f]        # 0x244c
  01bad:    	cmp    esi,0xffffffff
  01bb0:    	je     0x39046
  01bb6:    	cmp    WORD PTR [rdi+0x2],0x3
  01bbb:    	jne    0x1bd4
  01bc1:    	cmp    esi,0x6
  01bc4:    	jge    0x1bd4
  01bca:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01bcf:    	jmp    0x1c74
  01bd4:    	sub    rsp,0x60
  01bd8:    	movq   QWORD PTR [rsp],xmm2
  01bdd:    	movq   QWORD PTR [rsp+0x8],xmm3
  01be3:    	movq   QWORD PTR [rsp+0x10],xmm4
  01be9:    	movq   QWORD PTR [rsp+0x18],xmm5
  01bef:    	movq   QWORD PTR [rsp+0x20],xmm6
  01bf5:    	movq   QWORD PTR [rsp+0x28],xmm7
  01bfb: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01c02: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01c09: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01c10: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01c17: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01c1e: 78 	movabs rax,0x55788c73bb50
  01c28:    	call   rax
  01c2a:    	movq   xmm2,QWORD PTR [rsp]
  01c2f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01c35:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01c3b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01c41:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01c47:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01c4d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01c54: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01c5b: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01c62: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01c69: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01c70:    	add    rsp,0x60
  01c74: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00129 %15 = %15 + %16                      [Float][Float]
  01c7b: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01c82: 00 	test   rdi,0x1
  01c89:    	jne    0x39103
  01c8f: 00 	test   rdi,0x2
  01c96:    	je     0x1cd3
  01c9c:    	xorps  xmm13,xmm13
  01ca0: 00 	movabs rax,0x8000000000000002
  01caa:    	cmp    rdi,rax
  01cad:    	je     0x1ce6
  01cb3:    	mov    rax,rdi
  01cb6:    	sar    rax,0x3f
  01cba:    	add    rax,0x2
  01cbe:    	and    rdi,0xfffffffffffffffc
  01cc2:    	or     rdi,rax
  01cc5:    	rol    rdi,0x3d
  01cc9:    	movq   xmm13,rdi
  01cce:    	jmp    0x1ce6
  01cd3:    	call   0xfffedf4c
  01cd8:    	test   rax,rax
  01cdb:    	je     0x39103
  01ce1:    	movq   xmm13,xmm0
  01ce6: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01ced: 00 	test   rdi,0x1
  01cf4:    	jne    0x3917c
  01cfa: 00 	test   rdi,0x2
  01d01:    	je     0x1d3e
  01d07:    	xorps  xmm14,xmm14
  01d0b: 00 	movabs rax,0x8000000000000002
  01d15:    	cmp    rdi,rax
  01d18:    	je     0x1d51
  01d1e:    	mov    rax,rdi
  01d21:    	sar    rax,0x3f
  01d25:    	add    rax,0x2
  01d29:    	and    rdi,0xfffffffffffffffc
  01d2d:    	or     rdi,rax
  01d30:    	rol    rdi,0x3d
  01d34:    	movq   xmm14,rdi
  01d39:    	jmp    0x1d51
  01d3e:    	call   0xfffedf4c
  01d43:    	test   rax,rax
  01d46:    	je     0x3917c
  01d4c:    	movq   xmm14,xmm0
  01d51:    	addsd  xmm13,xmm14
:00130 _ = %14.call y=(%15; 1)              [Vec]
:00131 
  01d56:    	movq   xmm0,xmm13
  01d5b:    	call   0xfffee03f
  01d60: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01d67: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01d6e: 00 	test   rdi,0x7
  01d75:    	jne    0x391f5
  01d7b:    	cmp    DWORD PTR [rdi+0x4],0x25
  01d7f:    	jne    0x391f5
  01d85: 26 	cmp    DWORD PTR [rip+0xfffffffffffeeb60],0x26        # 0xffff08ec
  01d8c:    	jne    0x391f5
  01d92:    	mov    esi,DWORD PTR [rip+0x6bc]        # 0x2454
  01d98:    	cmp    esi,0xffffffff
  01d9b:    	je     0x3926e
  01da1:    	cmp    WORD PTR [rdi+0x2],0x3
  01da6:    	jne    0x1dc6
  01dac:    	cmp    esi,0x6
  01daf:    	jge    0x1dc6
  01db5: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01dbc:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  01dc1:    	jmp    0x1e9c
  01dc6:    	sub    rsp,0x70
  01dca:    	movq   QWORD PTR [rsp],xmm2
  01dcf:    	movq   QWORD PTR [rsp+0x8],xmm3
  01dd5:    	movq   QWORD PTR [rsp+0x10],xmm4
  01ddb:    	movq   QWORD PTR [rsp+0x18],xmm5
  01de1:    	movq   QWORD PTR [rsp+0x20],xmm6
  01de7:    	movq   QWORD PTR [rsp+0x28],xmm7
  01ded: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01df4: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01dfb: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01e02: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01e09: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01e10: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  01e17: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  01e1e: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  01e25: 78 	movabs rax,0x55788c73bdd0
  01e2f:    	call   rax
  01e31:    	movq   xmm2,QWORD PTR [rsp]
  01e36:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01e3c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e42:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e48:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e4e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e54: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e5b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01e62: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01e69: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01e70: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01e77: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  01e7e: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  01e85:    	add    rsp,0x70
  01e89: 78 	movabs r13,0x55788df2f450
  01e93:    	test   rax,rax
  01e96:    	je     0xfffedf13
:00133 %14 = dynvar(2, %2)
  01e9c:    	mov    rax,QWORD PTR [rbp-0x10]
  01ea0:    	mov    rax,QWORD PTR [rax]
  01ea3:    	mov    rax,QWORD PTR [rax-0x28]
  01ea7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00134 %16 = dynvar(2, %2)
  01eae:    	mov    rax,QWORD PTR [rbp-0x10]
  01eb2:    	mov    rax,QWORD PTR [rax]
  01eb5:    	mov    rax,QWORD PTR [rax-0x28]
  01eb9: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00135 %15 = %16.call z()                   [Vec]
:00136 
  01ec0: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01ec7: 00 	test   rdi,0x7
  01ece:    	jne    0x39351
  01ed4:    	cmp    DWORD PTR [rdi+0x4],0x25
  01ed8:    	jne    0x39351
  01ede: 26 	cmp    DWORD PTR [rip+0xfffffffffffeea07],0x26        # 0xffff08ec
  01ee5:    	jne    0x39351
  01eeb:    	mov    esi,DWORD PTR [rip+0x56b]        # 0x245c
  01ef1:    	cmp    esi,0xffffffff
  01ef4:    	je     0x393ca
  01efa:    	cmp    WORD PTR [rdi+0x2],0x3
  01eff:    	jne    0x1f18
  01f05:    	cmp    esi,0x6
  01f08:    	jge    0x1f18
  01f0e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01f13:    	jmp    0x1fb8
  01f18:    	sub    rsp,0x60
  01f1c:    	movq   QWORD PTR [rsp],xmm2
  01f21:    	movq   QWORD PTR [rsp+0x8],xmm3
  01f27:    	movq   QWORD PTR [rsp+0x10],xmm4
  01f2d:    	movq   QWORD PTR [rsp+0x18],xmm5
  01f33:    	movq   QWORD PTR [rsp+0x20],xmm6
  01f39:    	movq   QWORD PTR [rsp+0x28],xmm7
  01f3f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01f46: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01f4d: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01f54: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01f5b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01f62: 78 	movabs rax,0x55788c73bb50
  01f6c:    	call   rax
  01f6e:    	movq   xmm2,QWORD PTR [rsp]
  01f73:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01f79:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01f7f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01f85:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01f8b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01f91: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01f98: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01f9f: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01fa6: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01fad: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01fb4:    	add    rsp,0x60
  01fb8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00138 %16 = %13.call z()                   [Vec]
:00139 
  01fbf: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01fc6: 00 	test   rdi,0x7
  01fcd:    	jne    0x39487
  01fd3:    	cmp    DWORD PTR [rdi+0x4],0x25
  01fd7:    	jne    0x39487
  01fdd: 26 	cmp    DWORD PTR [rip+0xfffffffffffee908],0x26        # 0xffff08ec
  01fe4:    	jne    0x39487
  01fea:    	mov    esi,DWORD PTR [rip+0x474]        # 0x2464
  01ff0:    	cmp    esi,0xffffffff
  01ff3:    	je     0x39500
  01ff9:    	cmp    WORD PTR [rdi+0x2],0x3
  01ffe:    	jne    0x2017
  02004:    	cmp    esi,0x6
  02007:    	jge    0x2017
  0200d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  02012:    	jmp    0x20b7
  02017:    	sub    rsp,0x60
  0201b:    	movq   QWORD PTR [rsp],xmm2
  02020:    	movq   QWORD PTR [rsp+0x8],xmm3
  02026:    	movq   QWORD PTR [rsp+0x10],xmm4
  0202c:    	movq   QWORD PTR [rsp+0x18],xmm5
  02032:    	movq   QWORD PTR [rsp+0x20],xmm6
  02038:    	movq   QWORD PTR [rsp+0x28],xmm7
  0203e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02045: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0204c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02053: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0205a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02061: 78 	movabs rax,0x55788c73bb50
  0206b:    	call   rax
  0206d:    	movq   xmm2,QWORD PTR [rsp]
  02072:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02078:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0207e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02084:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0208a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02090: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02097: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0209e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  020a5: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  020ac: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  020b3:    	add    rsp,0x60
  020b7: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00141 %15 = %15 + %16                      [Float][Float]
  020be: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  020c5: 00 	test   rdi,0x1
  020cc:    	jne    0x395bd
  020d2: 00 	test   rdi,0x2
  020d9:    	je     0x2116
  020df:    	xorps  xmm13,xmm13
  020e3: 00 	movabs rax,0x8000000000000002
  020ed:    	cmp    rdi,rax
  020f0:    	je     0x2129
  020f6:    	mov    rax,rdi
  020f9:    	sar    rax,0x3f
  020fd:    	add    rax,0x2
  02101:    	and    rdi,0xfffffffffffffffc
  02105:    	or     rdi,rax
  02108:    	rol    rdi,0x3d
  0210c:    	movq   xmm13,rdi
  02111:    	jmp    0x2129
  02116:    	call   0xfffedf4c
  0211b:    	test   rax,rax
  0211e:    	je     0x395bd
  02124:    	movq   xmm13,xmm0
  02129: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  02130: 00 	test   rdi,0x1
  02137:    	jne    0x39636
  0213d: 00 	test   rdi,0x2
  02144:    	je     0x2181
  0214a:    	xorps  xmm14,xmm14
  0214e: 00 	movabs rax,0x8000000000000002
  02158:    	cmp    rdi,rax
  0215b:    	je     0x2194
  02161:    	mov    rax,rdi
  02164:    	sar    rax,0x3f
  02168:    	add    rax,0x2
  0216c:    	and    rdi,0xfffffffffffffffc
  02170:    	or     rdi,rax
  02173:    	rol    rdi,0x3d
  02177:    	movq   xmm14,rdi
  0217c:    	jmp    0x2194
  02181:    	call   0xfffedf4c
  02186:    	test   rax,rax
  02189:    	je     0x39636
  0218f:    	movq   xmm14,xmm0
  02194:    	addsd  xmm13,xmm14
:00142 _ = %14.call z=(%15; 1)              [Vec]
:00143 
  02199:    	movq   xmm0,xmm13
  0219e:    	call   0xfffee03f
  021a3: ff 	mov    QWORD PTR [rbp-0xa0],rax
  021aa: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  021b1: 00 	test   rdi,0x7
  021b8:    	jne    0x396af
  021be:    	cmp    DWORD PTR [rdi+0x4],0x25
  021c2:    	jne    0x396af
  021c8: 26 	cmp    DWORD PTR [rip+0xfffffffffffee71d],0x26        # 0xffff08ec
  021cf:    	jne    0x396af
  021d5:    	mov    esi,DWORD PTR [rip+0x291]        # 0x246c
  021db:    	cmp    esi,0xffffffff
  021de:    	je     0x39728
  021e4:    	cmp    WORD PTR [rdi+0x2],0x3
  021e9:    	jne    0x2209
  021ef:    	cmp    esi,0x6
  021f2:    	jge    0x2209
  021f8: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  021ff:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  02204:    	jmp    0x22df
  02209:    	sub    rsp,0x70
  0220d:    	movq   QWORD PTR [rsp],xmm2
  02212:    	movq   QWORD PTR [rsp+0x8],xmm3
  02218:    	movq   QWORD PTR [rsp+0x10],xmm4
  0221e:    	movq   QWORD PTR [rsp+0x18],xmm5
  02224:    	movq   QWORD PTR [rsp+0x20],xmm6
  0222a:    	movq   QWORD PTR [rsp+0x28],xmm7
  02230: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02237: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0223e: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02245: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0224c: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02253: 58 	movq   QWORD PTR [rsp+0x58],xmm13
  0225a: 60 	movq   QWORD PTR [rsp+0x60],xmm14
  02261: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  02268: 78 	movabs rax,0x55788c73bdd0
  02272:    	call   rax
  02274:    	movq   xmm2,QWORD PTR [rsp]
  02279:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0227f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02285:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0228b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02291:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02297: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0229e: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  022a5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  022ac: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  022b3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  022ba: 58 	movq   xmm13,QWORD PTR [rsp+0x58]
  022c1: 60 	movq   xmm14,QWORD PTR [rsp+0x60]
  022c8:    	add    rsp,0x70
  022cc: 78 	movabs r13,0x55788df2f510
  022d6:    	test   rax,rax
  022d9:    	je     0xfffedf13
:00145 %14 = %15
:00146 ret %14
  022df:    	movq   xmm0,xmm13
  022e4:    	call   0xfffee03f
  022e9: ff 	mov    QWORD PTR [rbp-0x98],rax
  022f0: ff 	mov    rax,QWORD PTR [rbp-0x98]
  022f7:    	leave  
  022f8:    	ret    
:00147 %14 = nil
  022f9: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00148 ret %14
  02304: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0230b:    	leave  
  0230c:    	ret    
==> start whole compile: ambient_occlusion FuncId(69) self_class:Scene start:[00000] bytecode:0x55788deeac50
<== finished compile. elapsed:87.9µs
offset:Pos(83352) code: 4079 bytes  data: 289 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0xa0
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x38],rax
  00016: mov    QWORD PTR [rbp-0x40],rax
  0001a: mov    QWORD PTR [rbp-0x48],rax
  0001e: mov    QWORD PTR [rbp-0x50],rax
  00022: mov    QWORD PTR [rbp-0x58],rax
  00026: mov    QWORD PTR [rbp-0x60],rax
  0002a: mov    QWORD PTR [rbp-0x68],rax
  0002e: mov    QWORD PTR [rbp-0x70],rax
  00032: mov    QWORD PTR [rbp-0x78],rax
  00036: mov    QWORD PTR [rbp-0x80],rax
  0003a: mov    QWORD PTR [rbp-0x88],rax
  00041: mov    QWORD PTR [rbp-0x90],rax
  00048: mov    rdi,QWORD PTR [rbp-0x28]
  0004c: test   rdi,0x7
  00053: jne    0x3739b
  00059: cmp    DWORD PTR [rdi+0x4],0x2f
  0005d: jne    0x3739b
:00000 %8 = const[Array]                    [Array]
  00063: mov    rax,QWORD PTR [rip+0xfffffffffffee41e]        # 0xfffee488
  0006a: cmp    rax,QWORD PTR [rip+0xf97]        # 0x1008
  00071: jne    0x373aa
  00077: mov    rax,QWORD PTR [rip+0xf7a]        # 0xff8
  0007e: mov    QWORD PTR [rbp-0x68],rax
:00001 %2 = %8.call new()                   [#<Class:Array>]
:00002 
  00082: mov    rdi,QWORD PTR [rbp-0x68]
  00086: test   rdi,0x7
  0008d: jne    0x373f0
  00093: cmp    DWORD PTR [rdi+0x4],0x1e
  00097: jne    0x373f0
  0009d: cmp    DWORD PTR [rip+0xfffffffffffee3d8],0x26        # 0xfffee47c
  000a4: jne    0x373f0
  000aa: mov    r9,0x0
  000b1: mov    rdx,rdi
  000b4: mov    rax,QWORD PTR [rbx]
  000b7: lea    rdi,[rsp-0x18]
  000bc: mov    QWORD PTR [rdi],rax
  000bf: mov    QWORD PTR [rbx],rdi
  000c2: mov    QWORD PTR [rsp-0x20],0x0
  000cb: mov    QWORD PTR [rsp-0x38],rcx
  000d0: lea    rcx,[rbp-0x70]
  000d4: mov    r8,0x0
  000db: call   0x373ff
  000e0: lea    rdi,[rbp-0x8]
  000e4: mov    QWORD PTR [rbx],rdi
  000e7: movabs r13,0x55788deeac80
  000f1: test   rax,rax
  000f4: je     0xfffebaa3
  000fa: mov    QWORD PTR [rbp-0x38],rax
:00004 %8 = %2
  000fe: mov    rax,QWORD PTR [rbp-0x38]
  00102: mov    QWORD PTR [rbp-0x68],rax
:00005 %9 = %1.call n()                     [Isect]
:00006 
  00106: mov    rdi,QWORD PTR [rbp-0x30]
  0010a: test   rdi,0x7
  00111: jne    0x37431
  00117: cmp    DWORD PTR [rdi+0x4],0x2d
  0011b: jne    0x37431
  00121: cmp    DWORD PTR [rip+0xfffffffffffee354],0x26        # 0xfffee47c
  00128: jne    0x37431
  0012e: mov    esi,DWORD PTR [rip+0xee0]        # 0x1014
  00134: cmp    esi,0xffffffff
  00137: je     0x37440
  0013d: cmp    WORD PTR [rdi+0x2],0x3
  00142: jne    0x15b
  00148: cmp    esi,0x6
  0014b: jge    0x15b
  00151: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00156: jmp    0x167
  0015b: movabs rax,0x55788c73bb50
  00165: call   rax
  00167: mov    QWORD PTR [rbp-0x70],rax
:00008 _ = %0.call otherBasis(%8; 2)        [Scene]
:00009 
  0016b: mov    rdi,QWORD PTR [rbp-0x28]
  0016f: cmp    DWORD PTR [rip+0xfffffffffffee306],0x26        # 0xfffee47c
  00176: jne    0x37469
  0017c: mov    rax,QWORD PTR [rbx]
  0017f: lea    rdi,[rsp-0x18]
  00184: mov    QWORD PTR [rdi],rax
  00187: mov    QWORD PTR [rbx],rdi
  0018a: mov    QWORD PTR [rsp-0x20],0x0
  00193: mov    QWORD PTR [rsp-0x38],rcx
  00198: mov    rax,QWORD PTR [rbp-0x28]
  0019c: mov    QWORD PTR [rsp-0x38],rax
  001a1: mov    rdi,0x2
  001a8: mov    rax,QWORD PTR [rbp-0x68]
  001ac: mov    QWORD PTR [rsp-0x40],rax
  001b1: mov    rax,QWORD PTR [rbp-0x70]
  001b5: mov    QWORD PTR [rsp-0x48],rax
  001ba: mov    QWORD PTR [rsp-0x30],0x0
  001c3: movabs rax,0x900000035
  001cd: mov    QWORD PTR [rsp-0x28],rax
  001d2: movabs r13,0x55788df01280
  001dc: call   0xffff54f4
  001e1: lea    rdi,[rbp-0x8]
  001e5: mov    QWORD PTR [rbx],rdi
  001e8: movabs r13,0x55788deeacf0
  001f2: test   rax,rax
  001f5: je     0xfffebaa3
:00011 %3 = const[NAO_SAMPLES]              [8]
  001fb: mov    rax,QWORD PTR [rip+0xfffffffffffee286]        # 0xfffee488
  00202: cmp    rax,QWORD PTR [rip+0xe1f]        # 0x1028
  00209: jne    0x37478
  0020f: mov    rax,QWORD PTR [rip+0xe02]        # 0x1018
  00216: mov    QWORD PTR [rbp-0x40],rax
:00012 %4 = const[NAO_SAMPLES]              [8]
  0021a: mov    rax,QWORD PTR [rip+0xfffffffffffee267]        # 0xfffee488
  00221: cmp    rax,QWORD PTR [rip+0xe20]        # 0x1048
  00228: jne    0x374be
  0022e: mov    rax,QWORD PTR [rip+0xe03]        # 0x1038
  00235: mov    QWORD PTR [rbp-0x48],rax
:00013 %5 = literal[0.0001]
  00239: movq   xmm2,QWORD PTR [rip+0xe17]        # 0x1058
:00014 %6 = literal[0.0]
  00241: movq   xmm3,QWORD PTR [rip+0xe1f]        # 0x1068
:00015 %8 = const[Vec]                      [Vec]
  00249: mov    rax,QWORD PTR [rip+0xfffffffffffee238]        # 0xfffee488
  00250: cmp    rax,QWORD PTR [rip+0xe31]        # 0x1088
  00257: jne    0x37504
  0025d: mov    rax,QWORD PTR [rip+0xe14]        # 0x1078
  00264: mov    QWORD PTR [rbp-0x68],rax
:00016 %10 = %1.call pl()                   [Isect]
:00017 
  00268: mov    rdi,QWORD PTR [rbp-0x30]
  0026c: test   rdi,0x7
  00273: jne    0x37568
  00279: cmp    DWORD PTR [rdi+0x4],0x2d
  0027d: jne    0x37568
  00283: cmp    DWORD PTR [rip+0xfffffffffffee1f2],0x26        # 0xfffee47c
  0028a: jne    0x37568
  00290: mov    esi,DWORD PTR [rip+0xdfe]        # 0x1094
  00296: cmp    esi,0xffffffff
  00299: je     0x37591
  0029f: cmp    WORD PTR [rdi+0x2],0x3
  002a4: jne    0x2bd
  002aa: cmp    esi,0x6
  002ad: jge    0x2bd
  002b3: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  002b8: jmp    0x2e7
  002bd: sub    rsp,0x10
  002c1: movq   QWORD PTR [rsp],xmm2
  002c6: movq   QWORD PTR [rsp+0x8],xmm3
  002cc: movabs rax,0x55788c73bb50
  002d6: call   rax
  002d8: movq   xmm2,QWORD PTR [rsp]
  002dd: movq   xmm3,QWORD PTR [rsp+0x8]
  002e3: add    rsp,0x10
  002e7: mov    QWORD PTR [rbp-0x78],rax
:00019 %9 = %10.call x()                    [Vec]
:00020 
  002eb: mov    rdi,QWORD PTR [rbp-0x78]
  002ef: test   rdi,0x7
  002f6: jne    0x375d8
  002fc: cmp    DWORD PTR [rdi+0x4],0x25
  00300: jne    0x375d8
  00306: cmp    DWORD PTR [rip+0xfffffffffffee16f],0x26        # 0xfffee47c
  0030d: jne    0x375d8
  00313: mov    esi,DWORD PTR [rip+0xd83]        # 0x109c
  00319: cmp    esi,0xffffffff
  0031c: je     0x37601
  00322: cmp    WORD PTR [rdi+0x2],0x3
  00327: jne    0x340
  0032d: cmp    esi,0x6
  00330: jge    0x340
  00336: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0033b: jmp    0x36a
  00340: sub    rsp,0x10
  00344: movq   QWORD PTR [rsp],xmm2
  00349: movq   QWORD PTR [rsp+0x8],xmm3
  0034f: movabs rax,0x55788c73bb50
  00359: call   rax
  0035b: movq   xmm2,QWORD PTR [rsp]
  00360: movq   xmm3,QWORD PTR [rsp+0x8]
  00366: add    rsp,0x10
  0036a: mov    QWORD PTR [rbp-0x70],rax
:00022 %11 = %1.call n()                    [Isect]
:00023 
  0036e: mov    rdi,QWORD PTR [rbp-0x30]
  00372: test   rdi,0x7
  00379: jne    0x37648
  0037f: cmp    DWORD PTR [rdi+0x4],0x2d
  00383: jne    0x37648
  00389: cmp    DWORD PTR [rip+0xfffffffffffee0ec],0x26        # 0xfffee47c
  00390: jne    0x37648
  00396: mov    esi,DWORD PTR [rip+0xd08]        # 0x10a4
  0039c: cmp    esi,0xffffffff
  0039f: je     0x37671
  003a5: cmp    WORD PTR [rdi+0x2],0x3
  003aa: jne    0x3c3
  003b0: cmp    esi,0x6
  003b3: jge    0x3c3
  003b9: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003be: jmp    0x3ed
  003c3: sub    rsp,0x10
  003c7: movq   QWORD PTR [rsp],xmm2
  003cc: movq   QWORD PTR [rsp+0x8],xmm3
  003d2: movabs rax,0x55788c73bb50
  003dc: call   rax
  003de: movq   xmm2,QWORD PTR [rsp]
  003e3: movq   xmm3,QWORD PTR [rsp+0x8]
  003e9: add    rsp,0x10
  003ed: mov    QWORD PTR [rbp-0x80],rax
:00025 %10 = %11.call x()                   [Vec]
:00026 
  003f1: mov    rdi,QWORD PTR [rbp-0x80]
  003f5: test   rdi,0x7
  003fc: jne    0x376b8
  00402: cmp    DWORD PTR [rdi+0x4],0x25
  00406: jne    0x376b8
  0040c: cmp    DWORD PTR [rip+0xfffffffffffee069],0x26        # 0xfffee47c
  00413: jne    0x376b8
  00419: mov    esi,DWORD PTR [rip+0xc8d]        # 0x10ac
  0041f: cmp    esi,0xffffffff
  00422: je     0x376e1
  00428: cmp    WORD PTR [rdi+0x2],0x3
  0042d: jne    0x446
  00433: cmp    esi,0x6
  00436: jge    0x446
  0043c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00441: jmp    0x470
  00446: sub    rsp,0x10
  0044a: movq   QWORD PTR [rsp],xmm2
  0044f: movq   QWORD PTR [rsp+0x8],xmm3
  00455: movabs rax,0x55788c73bb50
  0045f: call   rax
  00461: movq   xmm2,QWORD PTR [rsp]
  00466: movq   xmm3,QWORD PTR [rsp+0x8]
  0046c: add    rsp,0x10
  00470: mov    QWORD PTR [rbp-0x78],rax
:00028 %10 = %5 * %10                       [Float][Float]
  00474: mov    rdi,QWORD PTR [rbp-0x78]
  00478: test   rdi,0x1
  0047f: jne    0x37728
  00485: test   rdi,0x2
  0048c: je     0x4c8
  00492: xorps  xmm4,xmm4
  00495: movabs rax,0x8000000000000002
  0049f: cmp    rdi,rax
  004a2: je     0x4da
  004a8: mov    rax,rdi
  004ab: sar    rax,0x3f
  004af: add    rax,0x2
  004b3: and    rdi,0xfffffffffffffffc
  004b7: or     rdi,rax
  004ba: rol    rdi,0x3d
  004be: movq   xmm4,rdi
  004c3: jmp    0x4da
  004c8: call   0xfffebadc
  004cd: test   rax,rax
  004d0: je     0x37728
  004d6: movq   xmm4,xmm0
  004da: mulsd  xmm4,xmm2
:00029 %9 = %9 + %10                        [Float][Float]
  004de: mov    rdi,QWORD PTR [rbp-0x70]
  004e2: test   rdi,0x1
  004e9: jne    0x37751
  004ef: test   rdi,0x2
  004f6: je     0x532
  004fc: xorps  xmm5,xmm5
  004ff: movabs rax,0x8000000000000002
  00509: cmp    rdi,rax
  0050c: je     0x544
  00512: mov    rax,rdi
  00515: sar    rax,0x3f
  00519: add    rax,0x2
  0051d: and    rdi,0xfffffffffffffffc
  00521: or     rdi,rax
  00524: rol    rdi,0x3d
  00528: movq   xmm5,rdi
  0052d: jmp    0x544
  00532: call   0xfffebadc
  00537: test   rax,rax
  0053a: je     0x37751
  00540: movq   xmm5,xmm0
  00544: addsd  xmm5,xmm4
:00030 %11 = %1.call pl()                   [Isect]
:00031 
  00548: mov    rdi,QWORD PTR [rbp-0x30]
  0054c: test   rdi,0x7
  00553: jne    0x37787
  00559: cmp    DWORD PTR [rdi+0x4],0x2d
  0055d: jne    0x37787
  00563: cmp    DWORD PTR [rip+0xfffffffffffedf12],0x26        # 0xfffee47c
  0056a: jne    0x37787
  00570: mov    esi,DWORD PTR [rip+0xb3e]        # 0x10b4
  00576: cmp    esi,0xffffffff
  00579: je     0x377ca
  0057f: cmp    WORD PTR [rdi+0x2],0x3
  00584: jne    0x59d
  0058a: cmp    esi,0x6
  0058d: jge    0x59d
  00593: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00598: jmp    0x5df
  0059d: sub    rsp,0x20
  005a1: movq   QWORD PTR [rsp],xmm2
  005a6: movq   QWORD PTR [rsp+0x8],xmm3
  005ac: movq   QWORD PTR [rsp+0x10],xmm4
  005b2: movq   QWORD PTR [rsp+0x18],xmm5
  005b8: movabs rax,0x55788c73bb50
  005c2: call   rax
  005c4: movq   xmm2,QWORD PTR [rsp]
  005c9: movq   xmm3,QWORD PTR [rsp+0x8]
  005cf: movq   xmm4,QWORD PTR [rsp+0x10]
  005d5: movq   xmm5,QWORD PTR [rsp+0x18]
  005db: add    rsp,0x20
  005df: mov    QWORD PTR [rbp-0x80],rax
:00033 %10 = %11.call y()                   [Vec]
:00034 
  005e3: mov    rdi,QWORD PTR [rbp-0x80]
  005e7: test   rdi,0x7
  005ee: jne    0x37829
  005f4: cmp    DWORD PTR [rdi+0x4],0x25
  005f8: jne    0x37829
  005fe: cmp    DWORD PTR [rip+0xfffffffffffede77],0x26        # 0xfffee47c
  00605: jne    0x37829
  0060b: mov    esi,DWORD PTR [rip+0xaab]        # 0x10bc
  00611: cmp    esi,0xffffffff
  00614: je     0x3785f
  0061a: cmp    WORD PTR [rdi+0x2],0x3
  0061f: jne    0x638
  00625: cmp    esi,0x6
  00628: jge    0x638
  0062e: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00633: jmp    0x66e
  00638: sub    rsp,0x20
  0063c: movq   QWORD PTR [rsp],xmm2
  00641: movq   QWORD PTR [rsp+0x8],xmm3
  00647: movq   QWORD PTR [rsp+0x10],xmm5
  0064d: movabs rax,0x55788c73bb50
  00657: call   rax
  00659: movq   xmm2,QWORD PTR [rsp]
  0065e: movq   xmm3,QWORD PTR [rsp+0x8]
  00664: movq   xmm5,QWORD PTR [rsp+0x10]
  0066a: add    rsp,0x20
  0066e: mov    QWORD PTR [rbp-0x78],rax
:00036 %12 = %1.call n()                    [Isect]
:00037 
  00672: mov    rdi,QWORD PTR [rbp-0x30]
  00676: test   rdi,0x7
  0067d: jne    0x378b2
  00683: cmp    DWORD PTR [rdi+0x4],0x2d
  00687: jne    0x378b2
  0068d: cmp    DWORD PTR [rip+0xfffffffffffedde8],0x26        # 0xfffee47c
  00694: jne    0x378b2
  0069a: mov    esi,DWORD PTR [rip+0xa24]        # 0x10c4
  006a0: cmp    esi,0xffffffff
  006a3: je     0x378e8
  006a9: cmp    WORD PTR [rdi+0x2],0x3
  006ae: jne    0x6c7
  006b4: cmp    esi,0x6
  006b7: jge    0x6c7
  006bd: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  006c2: jmp    0x6fd
  006c7: sub    rsp,0x20
  006cb: movq   QWORD PTR [rsp],xmm2
  006d0: movq   QWORD PTR [rsp+0x8],xmm3
  006d6: movq   QWORD PTR [rsp+0x10],xmm5
  006dc: movabs rax,0x55788c73bb50
  006e6: call   rax
  006e8: movq   xmm2,QWORD PTR [rsp]
  006ed: movq   xmm3,QWORD PTR [rsp+0x8]
  006f3: movq   xmm5,QWORD PTR [rsp+0x10]
  006f9: add    rsp,0x20
  006fd: mov    QWORD PTR [rbp-0x88],rax
:00039 %11 = %12.call y()                   [Vec]
:00040 
  00704: mov    rdi,QWORD PTR [rbp-0x88]
  0070b: test   rdi,0x7
  00712: jne    0x3793b
  00718: cmp    DWORD PTR [rdi+0x4],0x25
  0071c: jne    0x3793b
  00722: cmp    DWORD PTR [rip+0xfffffffffffedd53],0x26        # 0xfffee47c
  00729: jne    0x3793b
  0072f: mov    esi,DWORD PTR [rip+0x997]        # 0x10cc
  00735: cmp    esi,0xffffffff
  00738: je     0x37971
  0073e: cmp    WORD PTR [rdi+0x2],0x3
  00743: jne    0x75c
  00749: cmp    esi,0x6
  0074c: jge    0x75c
  00752: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00757: jmp    0x792
  0075c: sub    rsp,0x20
  00760: movq   QWORD PTR [rsp],xmm2
  00765: movq   QWORD PTR [rsp+0x8],xmm3
  0076b: movq   QWORD PTR [rsp+0x10],xmm5
  00771: movabs rax,0x55788c73bb50
  0077b: call   rax
  0077d: movq   xmm2,QWORD PTR [rsp]
  00782: movq   xmm3,QWORD PTR [rsp+0x8]
  00788: movq   xmm5,QWORD PTR [rsp+0x10]
  0078e: add    rsp,0x20
  00792: mov    QWORD PTR [rbp-0x80],rax
:00042 %11 = %5 * %11                       [Float][Float]
  00796: mov    rdi,QWORD PTR [rbp-0x80]
  0079a: test   rdi,0x1
  007a1: jne    0x379c4
  007a7: test   rdi,0x2
  007ae: je     0x7ea
  007b4: xorps  xmm4,xmm4
  007b7: movabs rax,0x8000000000000002
  007c1: cmp    rdi,rax
  007c4: je     0x7fc
  007ca: mov    rax,rdi
  007cd: sar    rax,0x3f
  007d1: add    rax,0x2
  007d5: and    rdi,0xfffffffffffffffc
  007d9: or     rdi,rax
  007dc: rol    rdi,0x3d
  007e0: movq   xmm4,rdi
  007e5: jmp    0x7fc
  007ea: call   0xfffebadc
  007ef: test   rax,rax
  007f2: je     0x379c4
  007f8: movq   xmm4,xmm0
  007fc: mulsd  xmm4,xmm2
:00043 %10 = %10 + %11                      [Float][Float]
  00800: mov    rdi,QWORD PTR [rbp-0x78]
  00804: test   rdi,0x1
  0080b: jne    0x379fa
  00811: test   rdi,0x2
  00818: je     0x854
  0081e: xorps  xmm6,xmm6
  00821: movabs rax,0x8000000000000002
  0082b: cmp    rdi,rax
  0082e: je     0x866
  00834: mov    rax,rdi
  00837: sar    rax,0x3f
  0083b: add    rax,0x2
  0083f: and    rdi,0xfffffffffffffffc
  00843: or     rdi,rax
  00846: rol    rdi,0x3d
  0084a: movq   xmm6,rdi
  0084f: jmp    0x866
  00854: call   0xfffebadc
  00859: test   rax,rax
  0085c: je     0x379fa
  00862: movq   xmm6,xmm0
  00866: addsd  xmm6,xmm4
:00044 %12 = %1.call pl()                   [Isect]
:00045 
  0086a: mov    rdi,QWORD PTR [rbp-0x30]
  0086e: test   rdi,0x7
  00875: jne    0x37a3d
  0087b: cmp    DWORD PTR [rdi+0x4],0x2d
  0087f: jne    0x37a3d
  00885: cmp    DWORD PTR [rip+0xfffffffffffedbf0],0x26        # 0xfffee47c
  0088c: jne    0x37a3d
  00892: mov    esi,DWORD PTR [rip+0x83c]        # 0x10d4
  00898: cmp    esi,0xffffffff
  0089b: je     0x37a8d
  008a1: cmp    WORD PTR [rdi+0x2],0x3
  008a6: jne    0x8bf
  008ac: cmp    esi,0x6
  008af: jge    0x8bf
  008b5: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008ba: jmp    0x90d
  008bf: sub    rsp,0x30
  008c3: movq   QWORD PTR [rsp],xmm2
  008c8: movq   QWORD PTR [rsp+0x8],xmm3
  008ce: movq   QWORD PTR [rsp+0x10],xmm4
  008d4: movq   QWORD PTR [rsp+0x18],xmm5
  008da: movq   QWORD PTR [rsp+0x20],xmm6
  008e0: movabs rax,0x55788c73bb50
  008ea: call   rax
  008ec: movq   xmm2,QWORD PTR [rsp]
  008f1: movq   xmm3,QWORD PTR [rsp+0x8]
  008f7: movq   xmm4,QWORD PTR [rsp+0x10]
  008fd: movq   xmm5,QWORD PTR [rsp+0x18]
  00903: movq   xmm6,QWORD PTR [rsp+0x20]
  00909: add    rsp,0x30
  0090d: mov    QWORD PTR [rbp-0x88],rax
:00047 %11 = %12.call z()                   [Vec]
:00048 
  00914: mov    rdi,QWORD PTR [rbp-0x88]
  0091b: test   rdi,0x7
  00922: jne    0x37af8
  00928: cmp    DWORD PTR [rdi+0x4],0x25
  0092c: jne    0x37af8
  00932: cmp    DWORD PTR [rip+0xfffffffffffedb43],0x26        # 0xfffee47c
  00939: jne    0x37af8
  0093f: mov    esi,DWORD PTR [rip+0x797]        # 0x10dc
  00945: cmp    esi,0xffffffff
  00948: je     0x37b3b
  0094e: cmp    WORD PTR [rdi+0x2],0x3
  00953: jne    0x96c
  00959: cmp    esi,0x6
  0095c: jge    0x96c
  00962: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00967: jmp    0x9ae
  0096c: sub    rsp,0x20
  00970: movq   QWORD PTR [rsp],xmm2
  00975: movq   QWORD PTR [rsp+0x8],xmm3
  0097b: movq   QWORD PTR [rsp+0x10],xmm5
  00981: movq   QWORD PTR [rsp+0x18],xmm6
  00987: movabs rax,0x55788c73bb50
  00991: call   rax
  00993: movq   xmm2,QWORD PTR [rsp]
  00998: movq   xmm3,QWORD PTR [rsp+0x8]
  0099e: movq   xmm5,QWORD PTR [rsp+0x10]
  009a4: movq   xmm6,QWORD PTR [rsp+0x18]
  009aa: add    rsp,0x20
  009ae: mov    QWORD PTR [rbp-0x80],rax
:00050 %13 = %1.call n()                    [Isect]
:00051 
  009b2: mov    rdi,QWORD PTR [rbp-0x30]
  009b6: test   rdi,0x7
  009bd: jne    0x37b9a
  009c3: cmp    DWORD PTR [rdi+0x4],0x2d
  009c7: jne    0x37b9a
  009cd: cmp    DWORD PTR [rip+0xfffffffffffedaa8],0x26        # 0xfffee47c
  009d4: jne    0x37b9a
  009da: mov    esi,DWORD PTR [rip+0x704]        # 0x10e4
  009e0: cmp    esi,0xffffffff
  009e3: je     0x37bdd
  009e9: cmp    WORD PTR [rdi+0x2],0x3
  009ee: jne    0xa07
  009f4: cmp    esi,0x6
  009f7: jge    0xa07
  009fd: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a02: jmp    0xa49
  00a07: sub    rsp,0x20
  00a0b: movq   QWORD PTR [rsp],xmm2
  00a10: movq   QWORD PTR [rsp+0x8],xmm3
  00a16: movq   QWORD PTR [rsp+0x10],xmm5
  00a1c: movq   QWORD PTR [rsp+0x18],xmm6
  00a22: movabs rax,0x55788c73bb50
  00a2c: call   rax
  00a2e: movq   xmm2,QWORD PTR [rsp]
  00a33: movq   xmm3,QWORD PTR [rsp+0x8]
  00a39: movq   xmm5,QWORD PTR [rsp+0x10]
  00a3f: movq   xmm6,QWORD PTR [rsp+0x18]
  00a45: add    rsp,0x20
  00a49: mov    QWORD PTR [rbp-0x90],rax
:00053 %12 = %13.call z()                   [Vec]
:00054 
  00a50: mov    rdi,QWORD PTR [rbp-0x90]
  00a57: test   rdi,0x7
  00a5e: jne    0x37c3c
  00a64: cmp    DWORD PTR [rdi+0x4],0x25
  00a68: jne    0x37c3c
  00a6e: cmp    DWORD PTR [rip+0xfffffffffffeda07],0x26        # 0xfffee47c
  00a75: jne    0x37c3c
  00a7b: mov    esi,DWORD PTR [rip+0x66b]        # 0x10ec
  00a81: cmp    esi,0xffffffff
  00a84: je     0x37c7f
  00a8a: cmp    WORD PTR [rdi+0x2],0x3
  00a8f: jne    0xaa8
  00a95: cmp    esi,0x6
  00a98: jge    0xaa8
  00a9e: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00aa3: jmp    0xaea
  00aa8: sub    rsp,0x20
  00aac: movq   QWORD PTR [rsp],xmm2
  00ab1: movq   QWORD PTR [rsp+0x8],xmm3
  00ab7: movq   QWORD PTR [rsp+0x10],xmm5
  00abd: movq   QWORD PTR [rsp+0x18],xmm6
  00ac3: movabs rax,0x55788c73bb50
  00acd: call   rax
  00acf: movq   xmm2,QWORD PTR [rsp]
  00ad4: movq   xmm3,QWORD PTR [rsp+0x8]
  00ada: movq   xmm5,QWORD PTR [rsp+0x10]
  00ae0: movq   xmm6,QWORD PTR [rsp+0x18]
  00ae6: add    rsp,0x20
  00aea: mov    QWORD PTR [rbp-0x88],rax
:00056 %12 = %5 * %12                       [Float][Float]
  00af1: mov    rdi,QWORD PTR [rbp-0x88]
  00af8: test   rdi,0x1
  00aff: jne    0x37cde
  00b05: test   rdi,0x2
  00b0c: je     0xb48
  00b12: xorps  xmm4,xmm4
  00b15: movabs rax,0x8000000000000002
  00b1f: cmp    rdi,rax
  00b22: je     0xb5a
  00b28: mov    rax,rdi
  00b2b: sar    rax,0x3f
  00b2f: add    rax,0x2
  00b33: and    rdi,0xfffffffffffffffc
  00b37: or     rdi,rax
  00b3a: rol    rdi,0x3d
  00b3e: movq   xmm4,rdi
  00b43: jmp    0xb5a
  00b48: call   0xfffebadc
  00b4d: test   rax,rax
  00b50: je     0x37cde
  00b56: movq   xmm4,xmm0
  00b5a: mulsd  xmm4,xmm2
:00057 %11 = %11 + %12                      [Float][Float]
  00b5e: mov    rdi,QWORD PTR [rbp-0x80]
  00b62: test   rdi,0x1
  00b69: jne    0x37d21
  00b6f: test   rdi,0x2
  00b76: je     0xbb2
  00b7c: xorps  xmm7,xmm7
  00b7f: movabs rax,0x8000000000000002
  00b89: cmp    rdi,rax
  00b8c: je     0xbc4
  00b92: mov    rax,rdi
  00b95: sar    rax,0x3f
  00b99: add    rax,0x2
  00b9d: and    rdi,0xfffffffffffffffc
  00ba1: or     rdi,rax
  00ba4: rol    rdi,0x3d
  00ba8: movq   xmm7,rdi
  00bad: jmp    0xbc4
  00bb2: call   0xfffebadc
  00bb7: test   rax,rax
  00bba: je     0x37d21
  00bc0: movq   xmm7,xmm0
  00bc4: addsd  xmm7,xmm4
:00058 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
:00059 
  00bc8: movq   xmm0,xmm5
  00bcc: call   0xfffebbcf
  00bd1: mov    QWORD PTR [rbp-0x70],rax
  00bd5: movq   xmm0,xmm6
  00bd9: call   0xfffebbcf
  00bde: mov    QWORD PTR [rbp-0x78],rax
  00be2: movq   xmm0,xmm7
  00be6: call   0xfffebbcf
  00beb: mov    QWORD PTR [rbp-0x80],rax
  00bef: mov    rdi,QWORD PTR [rbp-0x68]
  00bf3: test   rdi,0x7
  00bfa: jne    0x37d74
  00c00: cmp    DWORD PTR [rdi+0x4],0x26
  00c04: jne    0x37d74
  00c0a: cmp    DWORD PTR [rip+0xfffffffffffed86b],0x26        # 0xfffee47c
  00c11: jne    0x37d74
  00c17: mov    r9,0x0
  00c1e: sub    rsp,0x30
  00c22: movq   QWORD PTR [rsp],xmm2
  00c27: movq   QWORD PTR [rsp+0x8],xmm3
  00c2d: movq   QWORD PTR [rsp+0x10],xmm4
  00c33: movq   QWORD PTR [rsp+0x18],xmm5
  00c39: movq   QWORD PTR [rsp+0x20],xmm6
  00c3f: movq   QWORD PTR [rsp+0x28],xmm7
  00c45: mov    rdx,rdi
  00c48: mov    rax,QWORD PTR [rbx]
  00c4b: lea    rdi,[rsp-0x18]
  00c50: mov    QWORD PTR [rdi],rax
  00c53: mov    QWORD PTR [rbx],rdi
  00c56: mov    QWORD PTR [rsp-0x20],0x0
  00c5f: mov    QWORD PTR [rsp-0x38],rcx
  00c64: lea    rcx,[rbp-0x70]
  00c68: mov    r8,0x3
  00c6f: call   0x37dad
  00c74: lea    rdi,[rbp-0x8]
  00c78: mov    QWORD PTR [rbx],rdi
  00c7b: movq   xmm2,QWORD PTR [rsp]
  00c80: movq   xmm3,QWORD PTR [rsp+0x8]
  00c86: movq   xmm4,QWORD PTR [rsp+0x10]
  00c8c: movq   xmm5,QWORD PTR [rsp+0x18]
  00c92: movq   xmm6,QWORD PTR [rsp+0x20]
  00c98: movq   xmm7,QWORD PTR [rsp+0x28]
  00c9e: add    rsp,0x30
  00ca2: movabs r13,0x55788deeb010
  00cac: test   rax,rax
  00caf: je     0xfffebaa3
  00cb5: mov    QWORD PTR [rbp-0x60],rax
:00061 %8 = literal[71]
  00cb9: mov    rax,0x8f
  00cc0: mov    QWORD PTR [rbp-0x68],rax
:00062 _ = %4.call times(&%8)               [Integer]
:00063 
  00cc4: movq   xmm0,xmm2
  00cc8: call   0xfffebbcf
  00ccd: mov    QWORD PTR [rbp-0x50],rax
  00cd1: movq   xmm0,xmm3
  00cd5: call   0xfffebbcf
  00cda: mov    QWORD PTR [rbp-0x58],rax
  00cde: mov    rdi,QWORD PTR [rbp-0x48]
  00ce2: test   rdi,0x1
  00ce9: jne    0xd06
  00cef: test   rdi,0x7
  00cf6: jne    0x37ddf
  00cfc: cmp    DWORD PTR [rdi+0x4],0x6
  00d00: jne    0x37ddf
  00d06: cmp    DWORD PTR [rip+0xfffffffffffed76f],0x26        # 0xfffee47c
  00d0d: jne    0x37ddf
  00d13: mov    r9,QWORD PTR [rbp-0x68]
  00d17: sub    rsp,0x20
  00d1b: movq   QWORD PTR [rsp],xmm4
  00d20: movq   QWORD PTR [rsp+0x8],xmm5
  00d26: movq   QWORD PTR [rsp+0x10],xmm6
  00d2c: movq   QWORD PTR [rsp+0x18],xmm7
  00d32: mov    rdx,rdi
  00d35: mov    rax,QWORD PTR [rbx]
  00d38: lea    rdi,[rsp-0x18]
  00d3d: mov    QWORD PTR [rdi],rax
  00d40: mov    QWORD PTR [rbx],rdi
  00d43: mov    QWORD PTR [rsp-0x20],0x0
  00d4c: mov    QWORD PTR [rsp-0x38],rcx
  00d51: lea    rcx,[rbp-0x70]
  00d55: mov    r8,0x0
  00d5c: call   0x37dfe
  00d61: lea    rdi,[rbp-0x8]
  00d65: mov    QWORD PTR [rbx],rdi
  00d68: movq   xmm4,QWORD PTR [rsp]
  00d6d: movq   xmm5,QWORD PTR [rsp+0x8]
  00d73: movq   xmm6,QWORD PTR [rsp+0x10]
  00d79: movq   xmm7,QWORD PTR [rsp+0x18]
  00d7f: add    rsp,0x20
  00d83: movabs r13,0x55788deeb050
  00d8d: test   rax,rax
  00d90: je     0xfffebaa3
:00065 %8 = %3.call to_f()                  [Integer]
:00066 
  00d96: mov    rdi,QWORD PTR [rbp-0x40]
  00d9a: test   rdi,0x1
  00da1: jne    0xdbe
  00da7: test   rdi,0x7
  00dae: jne    0x37e30
  00db4: cmp    DWORD PTR [rdi+0x4],0x6
  00db8: jne    0x37e30
  00dbe: cmp    DWORD PTR [rip+0xfffffffffffed6b7],0x26        # 0xfffee47c
  00dc5: jne    0x37e30
  00dcb: sar    rdi,1
  00dce: cvtsi2sd xmm2,rdi
:00068 %9 = %4.call to_f()                  [Integer]
:00069 
  00dd3: mov    rdi,QWORD PTR [rbp-0x48]
  00dd7: test   rdi,0x1
  00dde: jne    0xdfb
  00de4: test   rdi,0x7
  00deb: jne    0x37e4f
  00df1: cmp    DWORD PTR [rdi+0x4],0x6
  00df5: jne    0x37e4f
  00dfb: cmp    DWORD PTR [rip+0xfffffffffffed67a],0x26        # 0xfffee47c
  00e02: jne    0x37e4f
  00e08: sar    rdi,1
  00e0b: cvtsi2sd xmm3,rdi
:00071 %8 = %8 * %9                         [Float][Float]
  00e10: mulsd  xmm2,xmm3
:00072 %8 = %8 - %6                         [Float][Float]
  00e14: mov    rdi,QWORD PTR [rbp-0x58]
  00e18: test   rdi,0x1
  00e1f: jne    0x37e7b
  00e25: test   rdi,0x2
  00e2c: je     0xe68
  00e32: xorps  xmm5,xmm5
  00e35: movabs rax,0x8000000000000002
  00e3f: cmp    rdi,rax
  00e42: je     0xe7a
  00e48: mov    rax,rdi
  00e4b: sar    rax,0x3f
  00e4f: add    rax,0x2
  00e53: and    rdi,0xfffffffffffffffc
  00e57: or     rdi,rax
  00e5a: rol    rdi,0x3d
  00e5e: movq   xmm5,rdi
  00e63: jmp    0xe7a
  00e68: call   0xfffebadc
  00e6d: test   rax,rax
  00e70: je     0x37e7b
  00e76: movq   xmm5,xmm0
  00e7a: subsd  xmm2,xmm5
:00073 %9 = %3.call to_f()                  [Integer]
:00074 
  00e7e: mov    rdi,QWORD PTR [rbp-0x40]
  00e82: test   rdi,0x1
  00e89: jne    0xea6
  00e8f: test   rdi,0x7
  00e96: jne    0x37eb4
  00e9c: cmp    DWORD PTR [rdi+0x4],0x6
  00ea0: jne    0x37eb4
  00ea6: cmp    DWORD PTR [rip+0xfffffffffffed5cf],0x26        # 0xfffee47c
  00ead: jne    0x37eb4
  00eb3: sar    rdi,1
  00eb6: cvtsi2sd xmm3,rdi
:00076 %10 = %4.call to_f()                 [Integer]
:00077 
  00ebb: mov    rdi,QWORD PTR [rbp-0x48]
  00ebf: test   rdi,0x1
  00ec6: jne    0xee3
  00ecc: test   rdi,0x7
  00ed3: jne    0x37ee0
  00ed9: cmp    DWORD PTR [rdi+0x4],0x6
  00edd: jne    0x37ee0
  00ee3: cmp    DWORD PTR [rip+0xfffffffffffed592],0x26        # 0xfffee47c
  00eea: jne    0x37ee0
  00ef0: sar    rdi,1
  00ef3: cvtsi2sd xmm6,rdi
:00079 %9 = %9 * %10                        [Float][Float]
  00ef8: mulsd  xmm3,xmm6
:00080 %6 = %8 / %9                         [Float][Float]
  00efc: movq   xmm5,xmm2
  00f00: movq   rax,xmm3
  00f05: test   rax,rax
  00f08: je     0xfffebac8
  00f0e: divsd  xmm5,xmm3
:00081 %9 = const[Vec]                      [Vec]
  00f12: mov    rax,QWORD PTR [rip+0xfffffffffffed56f]        # 0xfffee488
  00f19: cmp    rax,QWORD PTR [rip+0x1e8]        # 0x1108
  00f20: jne    0x37f19
  00f26: mov    rax,QWORD PTR [rip+0x1cb]        # 0x10f8
  00f2d: mov    QWORD PTR [rbp-0x70],rax
:00082 %10 = %6
:00083 %11 = %6
:00084 %12 = %6
:00085 %8 = %9.call new(%10; 3)             [#<Class:Vec>]
:00086 
  00f31: movq   xmm0,xmm5
  00f35: call   0xfffebbcf
  00f3a: mov    QWORD PTR [rbp-0x78],rax
  00f3e: movq   xmm0,xmm5
  00f42: call   0xfffebbcf
  00f47: mov    QWORD PTR [rbp-0x80],rax
  00f4b: movq   xmm0,xmm5
  00f4f: call   0xfffebbcf
  00f54: mov    QWORD PTR [rbp-0x88],rax
  00f5b: mov    rdi,QWORD PTR [rbp-0x70]
  00f5f: test   rdi,0x7
  00f66: jne    0x37fa1
  00f6c: cmp    DWORD PTR [rdi+0x4],0x26
  00f70: jne    0x37fa1
  00f76: cmp    DWORD PTR [rip+0xfffffffffffed4ff],0x26        # 0xfffee47c
  00f7d: jne    0x37fa1
  00f83: mov    r9,0x0
  00f8a: sub    rsp,0x10
  00f8e: movq   QWORD PTR [rsp],xmm5
  00f93: mov    rdx,rdi
  00f96: mov    rax,QWORD PTR [rbx]
  00f99: lea    rdi,[rsp-0x18]
  00f9e: mov    QWORD PTR [rdi],rax
  00fa1: mov    QWORD PTR [rbx],rdi
  00fa4: mov    QWORD PTR [rsp-0x20],0x0
  00fad: mov    QWORD PTR [rsp-0x38],rcx
  00fb2: lea    rcx,[rbp-0x78]
  00fb6: mov    r8,0x3
  00fbd: call   0x37fbd
  00fc2: lea    rdi,[rbp-0x8]
  00fc6: mov    QWORD PTR [rbx],rdi
  00fc9: movq   xmm5,QWORD PTR [rsp]
  00fce: add    rsp,0x10
  00fd2: movabs r13,0x55788deeb1c0
  00fdc: test   rax,rax
  00fdf: je     0xfffebaa3
  00fe5: mov    QWORD PTR [rbp-0x68],rax
:00088 ret %8
  00fe9: mov    rax,QWORD PTR [rbp-0x68]
  00fed: leave  
  00fee: ret    
==> start whole compile: otherBasis FuncId(53) self_class:Scene start:[00000] bytecode:0x55788df01280
<== finished compile. elapsed:102.5µs
offset:Pos(87720) code: 6134 bytes  data: 302 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	sub    rsp,0x70
  00008: 00 	mov    rax,0x4
  0000f:    	mov    QWORD PTR [rbp-0x40],rax
  00013:    	mov    QWORD PTR [rbp-0x48],rax
  00017:    	mov    QWORD PTR [rbp-0x50],rax
  0001b:    	mov    QWORD PTR [rbp-0x58],rax
  0001f:    	mov    QWORD PTR [rbp-0x60],rax
  00023:    	mov    QWORD PTR [rbp-0x68],rax
  00027:    	mov    rdi,QWORD PTR [rbp-0x28]
  0002b: 00 	test   rdi,0x7
  00032:    	jne    0x36edf
  00038:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0003c:    	jne    0x36edf
:00000 %3 = 2: i32
  00042: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00001 %5 = const[Vec]                      [Vec]
  0004a: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffed327]        # 0xfffed378
  00051: 00 	cmp    rax,QWORD PTR [rip+0x17b0]        # 0x1808
  00058:    	jne    0x36eee
  0005e: 00 	mov    rax,QWORD PTR [rip+0x1793]        # 0x17f8
  00065:    	mov    QWORD PTR [rbp-0x50],rax
:00002 %6 = %2.call x()                     [Vec]
:00003 
  00069:    	mov    rdi,QWORD PTR [rbp-0x38]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x36f34
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0007e:    	jne    0x36f34
  00084: 26 	cmp    DWORD PTR [rip+0xfffffffffffed2e1],0x26        # 0xfffed36c
  0008b:    	jne    0x36f34
  00091:    	mov    esi,DWORD PTR [rip+0x177d]        # 0x1814
  00097:    	cmp    esi,0xffffffff
  0009a:    	je     0x36f43
  000a0:    	cmp    WORD PTR [rdi+0x2],0x3
  000a5:    	jne    0xbe
  000ab:    	cmp    esi,0x6
  000ae:    	jge    0xbe
  000b4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000b9:    	jmp    0xca
  000be: 78 	movabs rax,0x55788c73bb50
  000c8:    	call   rax
  000ca:    	mov    QWORD PTR [rbp-0x58],rax
:00005 %7 = %2.call y()                     [Vec]
:00006 
  000ce:    	mov    rdi,QWORD PTR [rbp-0x38]
  000d2: 00 	test   rdi,0x7
  000d9:    	jne    0x36f6c
  000df:    	cmp    DWORD PTR [rdi+0x4],0x25
  000e3:    	jne    0x36f6c
  000e9: 26 	cmp    DWORD PTR [rip+0xfffffffffffed27c],0x26        # 0xfffed36c
  000f0:    	jne    0x36f6c
  000f6:    	mov    esi,DWORD PTR [rip+0x1720]        # 0x181c
  000fc:    	cmp    esi,0xffffffff
  000ff:    	je     0x36f7b
  00105:    	cmp    WORD PTR [rdi+0x2],0x3
  0010a:    	jne    0x123
  00110:    	cmp    esi,0x6
  00113:    	jge    0x123
  00119:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0011e:    	jmp    0x12f
  00123: 78 	movabs rax,0x55788c73bb50
  0012d:    	call   rax
  0012f:    	mov    QWORD PTR [rbp-0x60],rax
:00008 %8 = %2.call z()                     [Vec]
:00009 
  00133:    	mov    rdi,QWORD PTR [rbp-0x38]
  00137: 00 	test   rdi,0x7
  0013e:    	jne    0x36fa4
  00144:    	cmp    DWORD PTR [rdi+0x4],0x25
  00148:    	jne    0x36fa4
  0014e: 26 	cmp    DWORD PTR [rip+0xfffffffffffed217],0x26        # 0xfffed36c
  00155:    	jne    0x36fa4
  0015b:    	mov    esi,DWORD PTR [rip+0x16c3]        # 0x1824
  00161:    	cmp    esi,0xffffffff
  00164:    	je     0x36fb3
  0016a:    	cmp    WORD PTR [rdi+0x2],0x3
  0016f:    	jne    0x188
  00175:    	cmp    esi,0x6
  00178:    	jge    0x188
  0017e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00183:    	jmp    0x194
  00188: 78 	movabs rax,0x55788c73bb50
  00192:    	call   rax
  00194:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00012 
  00198:    	mov    rdi,QWORD PTR [rbp-0x50]
  0019c: 00 	test   rdi,0x7
  001a3:    	jne    0x36fdc
  001a9:    	cmp    DWORD PTR [rdi+0x4],0x26
  001ad:    	jne    0x36fdc
  001b3: 26 	cmp    DWORD PTR [rip+0xfffffffffffed1b2],0x26        # 0xfffed36c
  001ba:    	jne    0x36fdc
  001c0: 00 	mov    r9,0x0
  001c7:    	mov    rdx,rdi
  001ca:    	mov    rax,QWORD PTR [rbx]
  001cd:    	lea    rdi,[rsp-0x18]
  001d2:    	mov    QWORD PTR [rdi],rax
  001d5:    	mov    QWORD PTR [rbx],rdi
  001d8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  001e1:    	mov    QWORD PTR [rsp-0x38],rcx
  001e6:    	lea    rcx,[rbp-0x58]
  001ea: 00 	mov    r8,0x3
  001f1:    	call   0x36feb
  001f6:    	lea    rdi,[rbp-0x8]
  001fa:    	mov    QWORD PTR [rbx],rdi
  001fd: 78 	movabs r13,0x55788df01350
  00207:    	test   rax,rax
  0020a:    	je     0xfffea993
  00210:    	mov    QWORD PTR [rbp-0x48],rax
:00014 %1.[%3] = %4
  00214:    	mov    rdx,QWORD PTR [rbp-0x30]
  00218:    	mov    rcx,QWORD PTR [rbp-0x40]
  0021c:    	mov    r8,QWORD PTR [rbp-0x48]
  00220:    	mov    rdi,rbx
  00223:    	mov    rsi,r12
  00226: 78 	movabs rax,0x55788c797cf0
  00230:    	call   rax
  00232: 78 	movabs r13,0x55788df01370
  0023c:    	test   rax,rax
  0023f:    	je     0xfffea993
:00015 %3 = 1: i32
  00245: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00016 %5 = const[Vec]                      [Vec]
  0024d: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffed124]        # 0xfffed378
  00254: 00 	cmp    rax,QWORD PTR [rip+0x15dd]        # 0x1838
  0025b:    	jne    0x3701d
  00261: 00 	mov    rax,QWORD PTR [rip+0x15c0]        # 0x1828
  00268:    	mov    QWORD PTR [rbp-0x50],rax
:00017 %6 = literal[0.0]
  0026c: 00 	movq   xmm2,QWORD PTR [rip+0x15d4]        # 0x1848
:00018 %7 = literal[0.0]
  00274: 00 	movq   xmm3,QWORD PTR [rip+0x15dc]        # 0x1858
:00019 %8 = literal[0.0]
  0027c: 00 	movq   xmm4,QWORD PTR [rip+0x15e4]        # 0x1868
:00020 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00021 
  00284:    	movq   xmm0,xmm2
  00288:    	call   0xfffeaabf
  0028d:    	mov    QWORD PTR [rbp-0x58],rax
  00291:    	movq   xmm0,xmm3
  00295:    	call   0xfffeaabf
  0029a:    	mov    QWORD PTR [rbp-0x60],rax
  0029e:    	movq   xmm0,xmm4
  002a2:    	call   0xfffeaabf
  002a7:    	mov    QWORD PTR [rbp-0x68],rax
  002ab:    	mov    rdi,QWORD PTR [rbp-0x50]
  002af: 00 	test   rdi,0x7
  002b6:    	jne    0x37063
  002bc:    	cmp    DWORD PTR [rdi+0x4],0x26
  002c0:    	jne    0x37063
  002c6: 26 	cmp    DWORD PTR [rip+0xfffffffffffed09f],0x26        # 0xfffed36c
  002cd:    	jne    0x37063
  002d3: 00 	mov    r9,0x0
  002da:    	sub    rsp,0x20
  002de:    	movq   QWORD PTR [rsp],xmm2
  002e3:    	movq   QWORD PTR [rsp+0x8],xmm3
  002e9:    	movq   QWORD PTR [rsp+0x10],xmm4
  002ef:    	mov    rdx,rdi
  002f2:    	mov    rax,QWORD PTR [rbx]
  002f5:    	lea    rdi,[rsp-0x18]
  002fa:    	mov    QWORD PTR [rdi],rax
  002fd:    	mov    QWORD PTR [rbx],rdi
  00300: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00309:    	mov    QWORD PTR [rsp-0x38],rcx
  0030e:    	lea    rcx,[rbp-0x58]
  00312: 00 	mov    r8,0x3
  00319:    	call   0x37072
  0031e:    	lea    rdi,[rbp-0x8]
  00322:    	mov    QWORD PTR [rbx],rdi
  00325:    	movq   xmm2,QWORD PTR [rsp]
  0032a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00330:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00336:    	add    rsp,0x20
  0033a: 78 	movabs r13,0x55788df013e0
  00344:    	test   rax,rax
  00347:    	je     0xfffea993
  0034d:    	mov    QWORD PTR [rbp-0x48],rax
:00023 %1.[%3] = %4
  00351:    	sub    rsp,0x20
  00355:    	movq   QWORD PTR [rsp],xmm2
  0035a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00360:    	movq   QWORD PTR [rsp+0x10],xmm4
  00366:    	mov    rdx,QWORD PTR [rbp-0x30]
  0036a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0036e:    	mov    r8,QWORD PTR [rbp-0x48]
  00372:    	mov    rdi,rbx
  00375:    	mov    rsi,r12
  00378: 78 	movabs rax,0x55788c797cf0
  00382:    	call   rax
  00384:    	movq   xmm2,QWORD PTR [rsp]
  00389:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0038f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00395:    	add    rsp,0x20
  00399: 78 	movabs r13,0x55788df01400
  003a3:    	test   rax,rax
  003a6:    	je     0xfffea993
:00024 %3 = %2.call x()                     [Vec]
:00025 
  003ac:    	mov    rdi,QWORD PTR [rbp-0x38]
  003b0: 00 	test   rdi,0x7
  003b7:    	jne    0x370a4
  003bd:    	cmp    DWORD PTR [rdi+0x4],0x25
  003c1:    	jne    0x370a4
  003c7: 26 	cmp    DWORD PTR [rip+0xfffffffffffecf9e],0x26        # 0xfffed36c
  003ce:    	jne    0x370a4
  003d4:    	mov    esi,DWORD PTR [rip+0x149a]        # 0x1874
  003da:    	cmp    esi,0xffffffff
  003dd:    	je     0x370b3
  003e3:    	cmp    WORD PTR [rdi+0x2],0x3
  003e8:    	jne    0x401
  003ee:    	cmp    esi,0x6
  003f1:    	jge    0x401
  003f7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003fc:    	jmp    0x437
  00401:    	sub    rsp,0x20
  00405:    	movq   QWORD PTR [rsp],xmm2
  0040a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00410:    	movq   QWORD PTR [rsp+0x10],xmm4
  00416: 78 	movabs rax,0x55788c73bb50
  00420:    	call   rax
  00422:    	movq   xmm2,QWORD PTR [rsp]
  00427:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0042d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00433:    	add    rsp,0x20
  00437:    	mov    QWORD PTR [rbp-0x40],rax
:00027 %4 = literal[0.6]
  0043b: 00 	movq   xmm5,QWORD PTR [rip+0x1435]        # 0x1878
:00028 _%3 = %3 < %4                        [Float][Float]
:00029 condnotbr _%3 =>:00043
  00443:    	mov    rdi,QWORD PTR [rbp-0x40]
  00447: 00 	test   rdi,0x1
  0044e:    	jne    0x37106
  00454: 00 	test   rdi,0x2
  0045b:    	je     0x497
  00461:    	xorps  xmm6,xmm6
  00464: 00 	movabs rax,0x8000000000000002
  0046e:    	cmp    rdi,rax
  00471:    	je     0x4a9
  00477:    	mov    rax,rdi
  0047a:    	sar    rax,0x3f
  0047e:    	add    rax,0x2
  00482:    	and    rdi,0xfffffffffffffffc
  00486:    	or     rdi,rax
  00489:    	rol    rdi,0x3d
  0048d:    	movq   xmm6,rdi
  00492:    	jmp    0x4a9
  00497:    	call   0xfffea9cc
  0049c:    	test   rax,rax
  0049f:    	je     0x37106
  004a5:    	movq   xmm6,xmm0
  004a9:    	ucomisd xmm6,xmm5
  004ad:    	jae    0x3722e
:00030 %3 = %2.call x()                     [Vec]
:00031 
  004b3:    	mov    rdi,QWORD PTR [rbp-0x38]
  004b7: 00 	test   rdi,0x7
  004be:    	jne    0x37122
  004c4:    	cmp    DWORD PTR [rdi+0x4],0x25
  004c8:    	jne    0x37122
  004ce: 26 	cmp    DWORD PTR [rip+0xfffffffffffece97],0x26        # 0xfffed36c
  004d5:    	jne    0x37122
  004db:    	mov    esi,DWORD PTR [rip+0x13a3]        # 0x1884
  004e1:    	cmp    esi,0xffffffff
  004e4:    	je     0x3713e
  004ea:    	cmp    WORD PTR [rdi+0x2],0x3
  004ef:    	jne    0x508
  004f5:    	cmp    esi,0x6
  004f8:    	jge    0x508
  004fe:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00503:    	jmp    0x54a
  00508:    	sub    rsp,0x20
  0050c:    	movq   QWORD PTR [rsp],xmm2
  00511:    	movq   QWORD PTR [rsp+0x8],xmm3
  00517:    	movq   QWORD PTR [rsp+0x10],xmm4
  0051d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00523: 78 	movabs rax,0x55788c73bb50
  0052d:    	call   rax
  0052f:    	movq   xmm2,QWORD PTR [rsp]
  00534:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0053a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00540:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00546:    	add    rsp,0x20
  0054a:    	mov    QWORD PTR [rbp-0x40],rax
:00033 %4 = literal[-0.6]
  0054e: 00 	movq   xmm5,QWORD PTR [rip+0x1332]        # 0x1888
:00034 _%3 = %3 > %4                        [Float][Float]
:00035 condnotbr _%3 =>:00043
  00556:    	mov    rdi,QWORD PTR [rbp-0x40]
  0055a: 00 	test   rdi,0x1
  00561:    	jne    0x3719d
  00567: 00 	test   rdi,0x2
  0056e:    	je     0x5aa
  00574:    	xorps  xmm6,xmm6
  00577: 00 	movabs rax,0x8000000000000002
  00581:    	cmp    rdi,rax
  00584:    	je     0x5bc
  0058a:    	mov    rax,rdi
  0058d:    	sar    rax,0x3f
  00591:    	add    rax,0x2
  00595:    	and    rdi,0xfffffffffffffffc
  00599:    	or     rdi,rax
  0059c:    	rol    rdi,0x3d
  005a0:    	movq   xmm6,rdi
  005a5:    	jmp    0x5bc
  005aa:    	call   0xfffea9cc
  005af:    	test   rax,rax
  005b2:    	je     0x3719d
  005b8:    	movq   xmm6,xmm0
  005bc:    	ucomisd xmm6,xmm5
  005c0:    	jbe    0x37254
:00036 %3 = 1: i32
  005c6: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00037 %3 = %1.[%3]
  005ce:    	sub    rsp,0x20
  005d2:    	movq   QWORD PTR [rsp],xmm2
  005d7:    	movq   QWORD PTR [rsp+0x8],xmm3
  005dd:    	movq   QWORD PTR [rsp+0x10],xmm4
  005e3:    	movq   QWORD PTR [rsp+0x18],xmm5
  005e9:    	mov    rdx,QWORD PTR [rbp-0x30]
  005ed:    	mov    rcx,QWORD PTR [rbp-0x40]
  005f1:    	mov    rdi,rbx
  005f4:    	mov    rsi,r12
  005f7: 78 	movabs rax,0x55788c797be0
  00601:    	call   rax
  00603:    	movq   xmm2,QWORD PTR [rsp]
  00608:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0060e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00614:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0061a:    	add    rsp,0x20
  0061e: 78 	movabs r13,0x55788df014e0
  00628:    	test   rax,rax
  0062b:    	je     0xfffea993
  00631:    	mov    QWORD PTR [rbp-0x40],rax
:00038 %4 = literal[1.0]
  00635: 00 	movq   xmm5,QWORD PTR [rip+0x125b]        # 0x1898
:00039 _ = %3.call x=(%4; 1)                [Vec]
:00040 
  0063d:    	movq   xmm0,xmm5
  00641:    	call   0xfffeaabf
  00646:    	mov    QWORD PTR [rbp-0x48],rax
  0064a:    	mov    rdi,QWORD PTR [rbp-0x40]
  0064e: 00 	test   rdi,0x7
  00655:    	jne    0x371b9
  0065b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0065f:    	jne    0x371b9
  00665: 26 	cmp    DWORD PTR [rip+0xfffffffffffecd00],0x26        # 0xfffed36c
  0066c:    	jne    0x371b9
  00672:    	mov    esi,DWORD PTR [rip+0x122c]        # 0x18a4
  00678:    	cmp    esi,0xffffffff
  0067b:    	je     0x371c8
  00681:    	cmp    WORD PTR [rdi+0x2],0x3
  00686:    	jne    0x6a3
  0068c:    	cmp    esi,0x6
  0068f:    	jge    0x6a3
  00695:    	mov    rax,QWORD PTR [rbp-0x48]
  00699:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0069e:    	jmp    0x6fc
  006a3:    	sub    rsp,0x20
  006a7:    	movq   QWORD PTR [rsp],xmm2
  006ac:    	movq   QWORD PTR [rsp+0x8],xmm3
  006b2:    	movq   QWORD PTR [rsp+0x10],xmm4
  006b8:    	movq   QWORD PTR [rsp+0x18],xmm5
  006be:    	mov    rdx,QWORD PTR [rbp-0x48]
  006c2: 78 	movabs rax,0x55788c73bdd0
  006cc:    	call   rax
  006ce:    	movq   xmm2,QWORD PTR [rsp]
  006d3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006d9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006df:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006e5:    	add    rsp,0x20
  006e9: 78 	movabs r13,0x55788df01510
  006f3:    	test   rax,rax
  006f6:    	je     0xfffea993
:00042 br =>:00087
  006fc:    	jmp    0x3750b
:00043 %3 = %2.call y()                     [<INVALID>]
:00044 
  00701: 00 	mov    rdi,0x4
  00708: 01 	sub    DWORD PTR [rip+0x1199],0x1        # 0x18a8
  0070f:    	jne    0x3727a
  00715:    	mov    rdi,r12
  00718:    	mov    esi,DWORD PTR [rbp-0x18]
  0071b:    	mov    rdx,QWORD PTR [rbp-0x28]
  0071f: 78 	movabs rax,0x55788c79da60
  00729:    	call   rax
  0072b: 00 	mov    rdi,0x4
  00732:    	jmp    0x3727a
:00046 %4 = literal[0.6]
  00737: 00 	movq   xmm5,QWORD PTR [rip+0x1179]        # 0x18b8
:00047 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00048 condnotbr _%3 =>:00062
  0073f:    	movq   xmm0,xmm5
  00743:    	call   0xfffeaabf
  00748:    	mov    QWORD PTR [rbp-0x48],rax
  0074c:    	mov    rdi,QWORD PTR [rbp-0x40]
  00750:    	mov    rsi,QWORD PTR [rbp-0x48]
  00754: 00 	test   rdi,0x1
  0075b:    	je     0x37296
  00761: 00 	test   rsi,0x1
  00768:    	je     0x37296
  0076e:    	cmp    rdi,rsi
  00771:    	jge    0x3736b
:00049 %3 = %2.call y()                     [<INVALID>]
:00050 
  00777: 00 	mov    rdi,0x4
  0077e: 01 	sub    DWORD PTR [rip+0x113b],0x1        # 0x18c0
  00785:    	jne    0x372eb
  0078b:    	mov    rdi,r12
  0078e:    	mov    esi,DWORD PTR [rbp-0x18]
  00791:    	mov    rdx,QWORD PTR [rbp-0x28]
  00795: 78 	movabs rax,0x55788c79da60
  0079f:    	call   rax
  007a1: 00 	mov    rdi,0x4
  007a8:    	jmp    0x372eb
:00052 %4 = literal[-0.6]
  007ad: 00 	movq   xmm5,QWORD PTR [rip+0x1113]        # 0x18c8
:00053 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00054 condnotbr _%3 =>:00062
  007b5:    	movq   xmm0,xmm5
  007b9:    	call   0xfffeaabf
  007be:    	mov    QWORD PTR [rbp-0x48],rax
  007c2:    	mov    rdi,QWORD PTR [rbp-0x40]
  007c6:    	mov    rsi,QWORD PTR [rbp-0x48]
  007ca: 00 	test   rdi,0x1
  007d1:    	je     0x372fa
  007d7: 00 	test   rsi,0x1
  007de:    	je     0x372fa
  007e4:    	cmp    rdi,rsi
  007e7:    	jle    0x37384
:00055 %3 = 1: i32
  007ed: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00056 %3 = %1.[%3]
  007f5:    	sub    rsp,0x20
  007f9:    	movq   QWORD PTR [rsp],xmm2
  007fe:    	movq   QWORD PTR [rsp+0x8],xmm3
  00804:    	movq   QWORD PTR [rsp+0x10],xmm4
  0080a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00810:    	mov    rdx,QWORD PTR [rbp-0x30]
  00814:    	mov    rcx,QWORD PTR [rbp-0x40]
  00818:    	mov    rdi,rbx
  0081b:    	mov    rsi,r12
  0081e: 78 	movabs rax,0x55788c797be0
  00828:    	call   rax
  0082a:    	movq   xmm2,QWORD PTR [rsp]
  0082f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00835:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0083b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00841:    	add    rsp,0x20
  00845: 78 	movabs r13,0x55788df01610
  0084f:    	test   rax,rax
  00852:    	je     0xfffea993
  00858:    	mov    QWORD PTR [rbp-0x40],rax
:00057 %4 = literal[1.0]
  0085c: 00 	movq   xmm5,QWORD PTR [rip+0x1074]        # 0x18d8
:00058 _ = %3.call y=(%4; 1)                [<INVALID>]
:00059 
  00864: 00 	mov    rdi,0x4
  0086b: 01 	sub    DWORD PTR [rip+0x106e],0x1        # 0x18e0
  00872:    	jne    0x3734f
  00878:    	mov    rdi,r12
  0087b:    	mov    esi,DWORD PTR [rbp-0x18]
  0087e:    	mov    rdx,QWORD PTR [rbp-0x28]
  00882: 78 	movabs rax,0x55788c79da60
  0088c:    	call   rax
  0088e: 00 	mov    rdi,0x4
  00895:    	jmp    0x3734f
:00061 br =>:00087
  0089a:    	jmp    0x37524
:00062 %3 = %2.call z()                     [<INVALID>]
:00063 
  0089f: 00 	mov    rdi,0x4
  008a6: 01 	sub    DWORD PTR [rip+0x1037],0x1        # 0x18e4
  008ad:    	jne    0x3739d
  008b3:    	mov    rdi,r12
  008b6:    	mov    esi,DWORD PTR [rbp-0x18]
  008b9:    	mov    rdx,QWORD PTR [rbp-0x28]
  008bd: 78 	movabs rax,0x55788c79da60
  008c7:    	call   rax
  008c9: 00 	mov    rdi,0x4
  008d0:    	jmp    0x3739d
:00065 %4 = literal[0.6]
  008d5: 00 	movq   xmm5,QWORD PTR [rip+0x100b]        # 0x18e8
:00066 _%3 = %3 < %4                        [<INVALID>][<INVALID>]
:00067 condnotbr _%3 =>:00081
  008dd:    	movq   xmm0,xmm5
  008e1:    	call   0xfffeaabf
  008e6:    	mov    QWORD PTR [rbp-0x48],rax
  008ea:    	mov    rdi,QWORD PTR [rbp-0x40]
  008ee:    	mov    rsi,QWORD PTR [rbp-0x48]
  008f2: 00 	test   rdi,0x1
  008f9:    	je     0x373ac
  008ff: 00 	test   rsi,0x1
  00906:    	je     0x373ac
  0090c:    	cmp    rdi,rsi
  0090f:    	jge    0x37481
:00068 %3 = %2.call z()                     [<INVALID>]
:00069 
  00915: 00 	mov    rdi,0x4
  0091c: 01 	sub    DWORD PTR [rip+0xfcd],0x1        # 0x18f0
  00923:    	jne    0x37401
  00929:    	mov    rdi,r12
  0092c:    	mov    esi,DWORD PTR [rbp-0x18]
  0092f:    	mov    rdx,QWORD PTR [rbp-0x28]
  00933: 78 	movabs rax,0x55788c79da60
  0093d:    	call   rax
  0093f: 00 	mov    rdi,0x4
  00946:    	jmp    0x37401
:00071 %4 = literal[-0.6]
  0094b: 00 	movq   xmm5,QWORD PTR [rip+0xfa5]        # 0x18f8
:00072 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00073 condnotbr _%3 =>:00081
  00953:    	movq   xmm0,xmm5
  00957:    	call   0xfffeaabf
  0095c:    	mov    QWORD PTR [rbp-0x48],rax
  00960:    	mov    rdi,QWORD PTR [rbp-0x40]
  00964:    	mov    rsi,QWORD PTR [rbp-0x48]
  00968: 00 	test   rdi,0x1
  0096f:    	je     0x37410
  00975: 00 	test   rsi,0x1
  0097c:    	je     0x37410
  00982:    	cmp    rdi,rsi
  00985:    	jle    0x3749a
:00074 %3 = 1: i32
  0098b: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00075 %3 = %1.[%3]
  00993:    	sub    rsp,0x20
  00997:    	movq   QWORD PTR [rsp],xmm2
  0099c:    	movq   QWORD PTR [rsp+0x8],xmm3
  009a2:    	movq   QWORD PTR [rsp+0x10],xmm4
  009a8:    	movq   QWORD PTR [rsp+0x18],xmm5
  009ae:    	mov    rdx,QWORD PTR [rbp-0x30]
  009b2:    	mov    rcx,QWORD PTR [rbp-0x40]
  009b6:    	mov    rdi,rbx
  009b9:    	mov    rsi,r12
  009bc: 78 	movabs rax,0x55788c797be0
  009c6:    	call   rax
  009c8:    	movq   xmm2,QWORD PTR [rsp]
  009cd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009d3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009d9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009df:    	add    rsp,0x20
  009e3: 78 	movabs r13,0x55788df01740
  009ed:    	test   rax,rax
  009f0:    	je     0xfffea993
  009f6:    	mov    QWORD PTR [rbp-0x40],rax
:00076 %4 = literal[1.0]
  009fa: 00 	movq   xmm5,QWORD PTR [rip+0xf06]        # 0x1908
:00077 _ = %3.call z=(%4; 1)                [<INVALID>]
:00078 
  00a02: 00 	mov    rdi,0x4
  00a09: 01 	sub    DWORD PTR [rip+0xf00],0x1        # 0x1910
  00a10:    	jne    0x37465
  00a16:    	mov    rdi,r12
  00a19:    	mov    esi,DWORD PTR [rbp-0x18]
  00a1c:    	mov    rdx,QWORD PTR [rbp-0x28]
  00a20: 78 	movabs rax,0x55788c79da60
  00a2a:    	call   rax
  00a2c: 00 	mov    rdi,0x4
  00a33:    	jmp    0x37465
:00080 br =>:00087
  00a38:    	jmp    0x3754a
:00081 %3 = 1: i32
  00a3d: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00082 %3 = %1.[%3]
  00a45:    	sub    rsp,0x20
  00a49:    	movq   QWORD PTR [rsp],xmm2
  00a4e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a54:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a5a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a60:    	mov    rdx,QWORD PTR [rbp-0x30]
  00a64:    	mov    rcx,QWORD PTR [rbp-0x40]
  00a68:    	mov    rdi,rbx
  00a6b:    	mov    rsi,r12
  00a6e: 78 	movabs rax,0x55788c797be0
  00a78:    	call   rax
  00a7a:    	movq   xmm2,QWORD PTR [rsp]
  00a7f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a85:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a8b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a91:    	add    rsp,0x20
  00a95: 78 	movabs r13,0x55788df017b0
  00a9f:    	test   rax,rax
  00aa2:    	je     0xfffea993
  00aa8:    	mov    QWORD PTR [rbp-0x40],rax
:00083 %4 = literal[1.0]
  00aac: 00 	movq   xmm5,QWORD PTR [rip+0xe64]        # 0x1918
:00084 _ = %3.call x=(%4; 1)                [<INVALID>]
:00085 
  00ab4: 00 	mov    rdi,0x4
  00abb: 01 	sub    DWORD PTR [rip+0xe5e],0x1        # 0x1920
  00ac2:    	jne    0x374b3
  00ac8:    	mov    rdi,r12
  00acb:    	mov    esi,DWORD PTR [rbp-0x18]
  00ace:    	mov    rdx,QWORD PTR [rbp-0x28]
  00ad2: 78 	movabs rax,0x55788c79da60
  00adc:    	call   rax
  00ade: 00 	mov    rdi,0x4
  00ae5:    	jmp    0x374b3
:00087 %3 = 0: i32
  00aea: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  00af2: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  00afa:    	sub    rsp,0x20
  00afe:    	movq   QWORD PTR [rsp],xmm2
  00b03:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b09:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b0f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b15:    	mov    rdx,QWORD PTR [rbp-0x30]
  00b19:    	mov    rcx,QWORD PTR [rbp-0x50]
  00b1d:    	mov    rdi,rbx
  00b20:    	mov    rsi,r12
  00b23: 78 	movabs rax,0x55788c797be0
  00b2d:    	call   rax
  00b2f:    	movq   xmm2,QWORD PTR [rsp]
  00b34:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b3a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b40:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b46:    	add    rsp,0x20
  00b4a: 78 	movabs r13,0x55788df01820
  00b54:    	test   rax,rax
  00b57:    	je     0xfffea993
  00b5d:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  00b61: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  00b69:    	sub    rsp,0x20
  00b6d:    	movq   QWORD PTR [rsp],xmm3
  00b72:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b78:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b7e:    	mov    rdx,QWORD PTR [rbp-0x30]
  00b82:    	mov    rcx,QWORD PTR [rbp-0x58]
  00b86:    	mov    rdi,rbx
  00b89:    	mov    rsi,r12
  00b8c: 78 	movabs rax,0x55788c797be0
  00b96:    	call   rax
  00b98:    	movq   xmm3,QWORD PTR [rsp]
  00b9d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ba3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ba9:    	add    rsp,0x20
  00bad: 78 	movabs r13,0x55788df01840
  00bb7:    	test   rax,rax
  00bba:    	je     0xfffea993
  00bc0:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  00bc4:    	mov    rdi,QWORD PTR [rbp-0x50]
  00bc8: 00 	test   rdi,0x7
  00bcf:    	jne    0x374cf
  00bd5:    	cmp    DWORD PTR [rdi+0x4],0x25
  00bd9:    	jne    0x374cf
  00bdf: 26 	cmp    DWORD PTR [rip+0xfffffffffffec786],0x26        # 0xfffed36c
  00be6:    	jne    0x374cf
  00bec:    	sub    rsp,0x10
  00bf0:    	movq   QWORD PTR [rsp],xmm3
  00bf5:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bfb:    	mov    rax,QWORD PTR [rbx]
  00bfe:    	lea    rdi,[rsp-0x18]
  00c03:    	mov    QWORD PTR [rdi],rax
  00c06:    	mov    QWORD PTR [rbx],rdi
  00c09: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c12:    	mov    QWORD PTR [rsp-0x38],rcx
  00c17:    	mov    rax,QWORD PTR [rbp-0x50]
  00c1b:    	mov    QWORD PTR [rsp-0x38],rax
  00c20: 00 	mov    rdi,0x1
  00c27:    	mov    rax,QWORD PTR [rbp-0x58]
  00c2b:    	mov    QWORD PTR [rsp-0x40],rax
  00c30: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c39: 09 	movabs rax,0x90000003a
  00c43:    	mov    QWORD PTR [rsp-0x28],rax
  00c48: 78 	movabs r13,0x55788dee5eb0
  00c52:    	call   0xffff443c
  00c57:    	lea    rdi,[rbp-0x8]
  00c5b:    	mov    QWORD PTR [rbx],rdi
  00c5e:    	movq   xmm3,QWORD PTR [rsp]
  00c63:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c69:    	add    rsp,0x10
  00c6d: 78 	movabs r13,0x55788df01860
  00c77:    	test   rax,rax
  00c7a:    	je     0xfffea993
  00c80:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  00c84:    	sub    rsp,0x10
  00c88:    	movq   QWORD PTR [rsp],xmm3
  00c8d:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c93:    	mov    rdx,QWORD PTR [rbp-0x30]
  00c97:    	mov    rcx,QWORD PTR [rbp-0x40]
  00c9b:    	mov    r8,QWORD PTR [rbp-0x48]
  00c9f:    	mov    rdi,rbx
  00ca2:    	mov    rsi,r12
  00ca5: 78 	movabs rax,0x55788c797cf0
  00caf:    	call   rax
  00cb1:    	movq   xmm3,QWORD PTR [rsp]
  00cb6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00cbc:    	add    rsp,0x10
  00cc0: 78 	movabs r13,0x55788df01880
  00cca:    	test   rax,rax
  00ccd:    	je     0xfffea993
:00096 %3 = 0: i32
  00cd3: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  00cdb: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  00ce3:    	sub    rsp,0x10
  00ce7:    	movq   QWORD PTR [rsp],xmm3
  00cec:    	movq   QWORD PTR [rsp+0x8],xmm4
  00cf2:    	mov    rdx,QWORD PTR [rbp-0x30]
  00cf6:    	mov    rcx,QWORD PTR [rbp-0x50]
  00cfa:    	mov    rdi,rbx
  00cfd:    	mov    rsi,r12
  00d00: 78 	movabs rax,0x55788c797be0
  00d0a:    	call   rax
  00d0c:    	movq   xmm3,QWORD PTR [rsp]
  00d11:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d17:    	add    rsp,0x10
  00d1b: 78 	movabs r13,0x55788df018b0
  00d25:    	test   rax,rax
  00d28:    	je     0xfffea993
  00d2e:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  00d32:    	mov    rdi,QWORD PTR [rbp-0x50]
  00d36: 00 	test   rdi,0x7
  00d3d:    	jne    0x374de
  00d43:    	cmp    DWORD PTR [rdi+0x4],0x25
  00d47:    	jne    0x374de
  00d4d: 26 	cmp    DWORD PTR [rip+0xfffffffffffec618],0x26        # 0xfffed36c
  00d54:    	jne    0x374de
  00d5a:    	sub    rsp,0x10
  00d5e:    	movq   QWORD PTR [rsp],xmm3
  00d63:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d69:    	mov    rax,QWORD PTR [rbx]
  00d6c:    	lea    rdi,[rsp-0x18]
  00d71:    	mov    QWORD PTR [rdi],rax
  00d74:    	mov    QWORD PTR [rbx],rdi
  00d77: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d80:    	mov    QWORD PTR [rsp-0x38],rcx
  00d85:    	mov    rax,QWORD PTR [rbp-0x50]
  00d89:    	mov    QWORD PTR [rsp-0x38],rax
  00d8e: 00 	mov    rdi,0x0
  00d95: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d9e: 07 	movabs rax,0x100070000003d
  00da8:    	mov    QWORD PTR [rsp-0x28],rax
  00dad: 78 	movabs r13,0x55788def86a0
  00db7:    	call   0xfffedc31
  00dbc:    	lea    rdi,[rbp-0x8]
  00dc0:    	mov    QWORD PTR [rbx],rdi
  00dc3:    	movq   xmm3,QWORD PTR [rsp]
  00dc8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00dce:    	add    rsp,0x10
  00dd2: 78 	movabs r13,0x55788df018d0
  00ddc:    	test   rax,rax
  00ddf:    	je     0xfffea993
  00de5:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  00de9:    	sub    rsp,0x10
  00ded:    	movq   QWORD PTR [rsp],xmm3
  00df2:    	movq   QWORD PTR [rsp+0x8],xmm4
  00df8:    	mov    rdx,QWORD PTR [rbp-0x30]
  00dfc:    	mov    rcx,QWORD PTR [rbp-0x40]
  00e00:    	mov    r8,QWORD PTR [rbp-0x48]
  00e04:    	mov    rdi,rbx
  00e07:    	mov    rsi,r12
  00e0a: 78 	movabs rax,0x55788c797cf0
  00e14:    	call   rax
  00e16:    	movq   xmm3,QWORD PTR [rsp]
  00e1b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e21:    	add    rsp,0x10
  00e25: 78 	movabs r13,0x55788df018f0
  00e2f:    	test   rax,rax
  00e32:    	je     0xfffea993
:00103 %3 = 1: i32
  00e38: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  00e40: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  00e48:    	sub    rsp,0x10
  00e4c:    	movq   QWORD PTR [rsp],xmm3
  00e51:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e57:    	mov    rdx,QWORD PTR [rbp-0x30]
  00e5b:    	mov    rcx,QWORD PTR [rbp-0x50]
  00e5f:    	mov    rdi,rbx
  00e62:    	mov    rsi,r12
  00e65: 78 	movabs rax,0x55788c797be0
  00e6f:    	call   rax
  00e71:    	movq   xmm3,QWORD PTR [rsp]
  00e76:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e7c:    	add    rsp,0x10
  00e80: 78 	movabs r13,0x55788df01920
  00e8a:    	test   rax,rax
  00e8d:    	je     0xfffea993
  00e93:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  00e97: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  00e9f:    	sub    rsp,0x10
  00ea3:    	movq   QWORD PTR [rsp],xmm3
  00ea8:    	movq   QWORD PTR [rsp+0x8],xmm4
  00eae:    	mov    rdx,QWORD PTR [rbp-0x30]
  00eb2:    	mov    rcx,QWORD PTR [rbp-0x58]
  00eb6:    	mov    rdi,rbx
  00eb9:    	mov    rsi,r12
  00ebc: 78 	movabs rax,0x55788c797be0
  00ec6:    	call   rax
  00ec8:    	movq   xmm3,QWORD PTR [rsp]
  00ecd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ed3:    	add    rsp,0x10
  00ed7: 78 	movabs r13,0x55788df01940
  00ee1:    	test   rax,rax
  00ee4:    	je     0xfffea993
  00eea:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  00eee:    	mov    rdi,QWORD PTR [rbp-0x50]
  00ef2: 00 	test   rdi,0x7
  00ef9:    	jne    0x374ed
  00eff:    	cmp    DWORD PTR [rdi+0x4],0x25
  00f03:    	jne    0x374ed
  00f09: 26 	cmp    DWORD PTR [rip+0xfffffffffffec45c],0x26        # 0xfffed36c
  00f10:    	jne    0x374ed
  00f16:    	sub    rsp,0x10
  00f1a:    	movq   QWORD PTR [rsp],xmm3
  00f1f:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f25:    	mov    rax,QWORD PTR [rbx]
  00f28:    	lea    rdi,[rsp-0x18]
  00f2d:    	mov    QWORD PTR [rdi],rax
  00f30:    	mov    QWORD PTR [rbx],rdi
  00f33: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f3c:    	mov    QWORD PTR [rsp-0x38],rcx
  00f41:    	mov    rax,QWORD PTR [rbp-0x50]
  00f45:    	mov    QWORD PTR [rsp-0x38],rax
  00f4a: 00 	mov    rdi,0x1
  00f51:    	mov    rax,QWORD PTR [rbp-0x58]
  00f55:    	mov    QWORD PTR [rsp-0x40],rax
  00f5a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f63: 09 	movabs rax,0x90000003a
  00f6d:    	mov    QWORD PTR [rsp-0x28],rax
  00f72: 78 	movabs r13,0x55788dee5eb0
  00f7c:    	call   0xffff443c
  00f81:    	lea    rdi,[rbp-0x8]
  00f85:    	mov    QWORD PTR [rbx],rdi
  00f88:    	movq   xmm3,QWORD PTR [rsp]
  00f8d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f93:    	add    rsp,0x10
  00f97: 78 	movabs r13,0x55788df01960
  00fa1:    	test   rax,rax
  00fa4:    	je     0xfffea993
  00faa:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  00fae:    	sub    rsp,0x10
  00fb2:    	movq   QWORD PTR [rsp],xmm3
  00fb7:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fbd:    	mov    rdx,QWORD PTR [rbp-0x30]
  00fc1:    	mov    rcx,QWORD PTR [rbp-0x40]
  00fc5:    	mov    r8,QWORD PTR [rbp-0x48]
  00fc9:    	mov    rdi,rbx
  00fcc:    	mov    rsi,r12
  00fcf: 78 	movabs rax,0x55788c797cf0
  00fd9:    	call   rax
  00fdb:    	movq   xmm3,QWORD PTR [rsp]
  00fe0:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fe6:    	add    rsp,0x10
  00fea: 78 	movabs r13,0x55788df01980
  00ff4:    	test   rax,rax
  00ff7:    	je     0xfffea993
:00112 %3 = 1: i32
  00ffd: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  01005: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  0100d:    	sub    rsp,0x10
  01011:    	movq   QWORD PTR [rsp],xmm3
  01016:    	movq   QWORD PTR [rsp+0x8],xmm4
  0101c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01020:    	mov    rcx,QWORD PTR [rbp-0x50]
  01024:    	mov    rdi,rbx
  01027:    	mov    rsi,r12
  0102a: 78 	movabs rax,0x55788c797be0
  01034:    	call   rax
  01036:    	movq   xmm3,QWORD PTR [rsp]
  0103b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01041:    	add    rsp,0x10
  01045: 78 	movabs r13,0x55788df019b0
  0104f:    	test   rax,rax
  01052:    	je     0xfffea993
  01058:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  0105c:    	mov    rdi,QWORD PTR [rbp-0x50]
  01060: 00 	test   rdi,0x7
  01067:    	jne    0x374fc
  0106d:    	cmp    DWORD PTR [rdi+0x4],0x25
  01071:    	jne    0x374fc
  01077: 26 	cmp    DWORD PTR [rip+0xfffffffffffec2ee],0x26        # 0xfffed36c
  0107e:    	jne    0x374fc
  01084:    	sub    rsp,0x10
  01088:    	movq   QWORD PTR [rsp],xmm3
  0108d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01093:    	mov    rax,QWORD PTR [rbx]
  01096:    	lea    rdi,[rsp-0x18]
  0109b:    	mov    QWORD PTR [rdi],rax
  0109e:    	mov    QWORD PTR [rbx],rdi
  010a1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010aa:    	mov    QWORD PTR [rsp-0x38],rcx
  010af:    	mov    rax,QWORD PTR [rbp-0x50]
  010b3:    	mov    QWORD PTR [rsp-0x38],rax
  010b8: 00 	mov    rdi,0x0
  010bf: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010c8: 07 	movabs rax,0x100070000003d
  010d2:    	mov    QWORD PTR [rsp-0x28],rax
  010d7: 78 	movabs r13,0x55788def86a0
  010e1:    	call   0xfffedc31
  010e6:    	lea    rdi,[rbp-0x8]
  010ea:    	mov    QWORD PTR [rbx],rdi
  010ed:    	movq   xmm3,QWORD PTR [rsp]
  010f2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010f8:    	add    rsp,0x10
  010fc: 78 	movabs r13,0x55788df019d0
  01106:    	test   rax,rax
  01109:    	je     0xfffea993
  0110f:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  01113:    	sub    rsp,0x10
  01117:    	movq   QWORD PTR [rsp],xmm3
  0111c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01122:    	mov    rdx,QWORD PTR [rbp-0x30]
  01126:    	mov    rcx,QWORD PTR [rbp-0x40]
  0112a:    	mov    r8,QWORD PTR [rbp-0x48]
  0112e:    	mov    rdi,rbx
  01131:    	mov    rsi,r12
  01134: 78 	movabs rax,0x55788c797cf0
  0113e:    	call   rax
  01140:    	movq   xmm3,QWORD PTR [rsp]
  01145:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0114b:    	add    rsp,0x10
  0114f: 78 	movabs r13,0x55788df019f0
  01159:    	test   rax,rax
  0115c:    	je     0xfffea993
:00119 %3 = %4
  01162:    	mov    rax,QWORD PTR [rbp-0x48]
  01166:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  0116a:    	mov    rax,QWORD PTR [rbp-0x40]
  0116e:    	leave  
  0116f:    	ret    
:00087 %3 = 0: i32
  01170: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  01178: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  01180:    	sub    rsp,0x20
  01184:    	movq   QWORD PTR [rsp],xmm2
  01189:    	movq   QWORD PTR [rsp+0x8],xmm3
  0118f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01195:    	movq   QWORD PTR [rsp+0x18],xmm5
  0119b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0119f:    	mov    rcx,QWORD PTR [rbp-0x50]
  011a3:    	mov    rdi,rbx
  011a6:    	mov    rsi,r12
  011a9: 78 	movabs rax,0x55788c797be0
  011b3:    	call   rax
  011b5:    	movq   xmm2,QWORD PTR [rsp]
  011ba:    	movq   xmm3,QWORD PTR [rsp+0x8]
  011c0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  011c6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  011cc:    	add    rsp,0x20
  011d0: 78 	movabs r13,0x55788df01820
  011da:    	test   rax,rax
  011dd:    	je     0xfffea993
  011e3:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  011e7: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  011ef:    	sub    rsp,0x20
  011f3:    	movq   QWORD PTR [rsp],xmm3
  011f8:    	movq   QWORD PTR [rsp+0x8],xmm4
  011fe:    	movq   QWORD PTR [rsp+0x10],xmm5
  01204:    	mov    rdx,QWORD PTR [rbp-0x30]
  01208:    	mov    rcx,QWORD PTR [rbp-0x58]
  0120c:    	mov    rdi,rbx
  0120f:    	mov    rsi,r12
  01212: 78 	movabs rax,0x55788c797be0
  0121c:    	call   rax
  0121e:    	movq   xmm3,QWORD PTR [rsp]
  01223:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01229:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0122f:    	add    rsp,0x20
  01233: 78 	movabs r13,0x55788df01840
  0123d:    	test   rax,rax
  01240:    	je     0xfffea993
  01246:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  0124a:    	mov    rdi,QWORD PTR [rbp-0x50]
  0124e: 00 	test   rdi,0x7
  01255:    	jne    0x37570
  0125b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0125f:    	jne    0x37570
  01265: 26 	cmp    DWORD PTR [rip+0xfffffffffffec100],0x26        # 0xfffed36c
  0126c:    	jne    0x37570
  01272:    	sub    rsp,0x10
  01276:    	movq   QWORD PTR [rsp],xmm3
  0127b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01281:    	mov    rax,QWORD PTR [rbx]
  01284:    	lea    rdi,[rsp-0x18]
  01289:    	mov    QWORD PTR [rdi],rax
  0128c:    	mov    QWORD PTR [rbx],rdi
  0128f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01298:    	mov    QWORD PTR [rsp-0x38],rcx
  0129d:    	mov    rax,QWORD PTR [rbp-0x50]
  012a1:    	mov    QWORD PTR [rsp-0x38],rax
  012a6: 00 	mov    rdi,0x1
  012ad:    	mov    rax,QWORD PTR [rbp-0x58]
  012b1:    	mov    QWORD PTR [rsp-0x40],rax
  012b6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012bf: 09 	movabs rax,0x90000003a
  012c9:    	mov    QWORD PTR [rsp-0x28],rax
  012ce: 78 	movabs r13,0x55788dee5eb0
  012d8:    	call   0xffff443c
  012dd:    	lea    rdi,[rbp-0x8]
  012e1:    	mov    QWORD PTR [rbx],rdi
  012e4:    	movq   xmm3,QWORD PTR [rsp]
  012e9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012ef:    	add    rsp,0x10
  012f3: 78 	movabs r13,0x55788df01860
  012fd:    	test   rax,rax
  01300:    	je     0xfffea993
  01306:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  0130a:    	sub    rsp,0x10
  0130e:    	movq   QWORD PTR [rsp],xmm3
  01313:    	movq   QWORD PTR [rsp+0x8],xmm4
  01319:    	mov    rdx,QWORD PTR [rbp-0x30]
  0131d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01321:    	mov    r8,QWORD PTR [rbp-0x48]
  01325:    	mov    rdi,rbx
  01328:    	mov    rsi,r12
  0132b: 78 	movabs rax,0x55788c797cf0
  01335:    	call   rax
  01337:    	movq   xmm3,QWORD PTR [rsp]
  0133c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01342:    	add    rsp,0x10
  01346: 78 	movabs r13,0x55788df01880
  01350:    	test   rax,rax
  01353:    	je     0xfffea993
:00096 %3 = 0: i32
  01359: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  01361: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  01369:    	sub    rsp,0x10
  0136d:    	movq   QWORD PTR [rsp],xmm3
  01372:    	movq   QWORD PTR [rsp+0x8],xmm4
  01378:    	mov    rdx,QWORD PTR [rbp-0x30]
  0137c:    	mov    rcx,QWORD PTR [rbp-0x50]
  01380:    	mov    rdi,rbx
  01383:    	mov    rsi,r12
  01386: 78 	movabs rax,0x55788c797be0
  01390:    	call   rax
  01392:    	movq   xmm3,QWORD PTR [rsp]
  01397:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0139d:    	add    rsp,0x10
  013a1: 78 	movabs r13,0x55788df018b0
  013ab:    	test   rax,rax
  013ae:    	je     0xfffea993
  013b4:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  013b8:    	mov    rdi,QWORD PTR [rbp-0x50]
  013bc: 00 	test   rdi,0x7
  013c3:    	jne    0x3757f
  013c9:    	cmp    DWORD PTR [rdi+0x4],0x25
  013cd:    	jne    0x3757f
  013d3: 26 	cmp    DWORD PTR [rip+0xfffffffffffebf92],0x26        # 0xfffed36c
  013da:    	jne    0x3757f
  013e0:    	sub    rsp,0x10
  013e4:    	movq   QWORD PTR [rsp],xmm3
  013e9:    	movq   QWORD PTR [rsp+0x8],xmm4
  013ef:    	mov    rax,QWORD PTR [rbx]
  013f2:    	lea    rdi,[rsp-0x18]
  013f7:    	mov    QWORD PTR [rdi],rax
  013fa:    	mov    QWORD PTR [rbx],rdi
  013fd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01406:    	mov    QWORD PTR [rsp-0x38],rcx
  0140b:    	mov    rax,QWORD PTR [rbp-0x50]
  0140f:    	mov    QWORD PTR [rsp-0x38],rax
  01414: 00 	mov    rdi,0x0
  0141b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01424: 07 	movabs rax,0x100070000003d
  0142e:    	mov    QWORD PTR [rsp-0x28],rax
  01433: 78 	movabs r13,0x55788def86a0
  0143d:    	call   0xfffedc31
  01442:    	lea    rdi,[rbp-0x8]
  01446:    	mov    QWORD PTR [rbx],rdi
  01449:    	movq   xmm3,QWORD PTR [rsp]
  0144e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01454:    	add    rsp,0x10
  01458: 78 	movabs r13,0x55788df018d0
  01462:    	test   rax,rax
  01465:    	je     0xfffea993
  0146b:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  0146f:    	sub    rsp,0x10
  01473:    	movq   QWORD PTR [rsp],xmm3
  01478:    	movq   QWORD PTR [rsp+0x8],xmm4
  0147e:    	mov    rdx,QWORD PTR [rbp-0x30]
  01482:    	mov    rcx,QWORD PTR [rbp-0x40]
  01486:    	mov    r8,QWORD PTR [rbp-0x48]
  0148a:    	mov    rdi,rbx
  0148d:    	mov    rsi,r12
  01490: 78 	movabs rax,0x55788c797cf0
  0149a:    	call   rax
  0149c:    	movq   xmm3,QWORD PTR [rsp]
  014a1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014a7:    	add    rsp,0x10
  014ab: 78 	movabs r13,0x55788df018f0
  014b5:    	test   rax,rax
  014b8:    	je     0xfffea993
:00103 %3 = 1: i32
  014be: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  014c6: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  014ce:    	sub    rsp,0x10
  014d2:    	movq   QWORD PTR [rsp],xmm3
  014d7:    	movq   QWORD PTR [rsp+0x8],xmm4
  014dd:    	mov    rdx,QWORD PTR [rbp-0x30]
  014e1:    	mov    rcx,QWORD PTR [rbp-0x50]
  014e5:    	mov    rdi,rbx
  014e8:    	mov    rsi,r12
  014eb: 78 	movabs rax,0x55788c797be0
  014f5:    	call   rax
  014f7:    	movq   xmm3,QWORD PTR [rsp]
  014fc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01502:    	add    rsp,0x10
  01506: 78 	movabs r13,0x55788df01920
  01510:    	test   rax,rax
  01513:    	je     0xfffea993
  01519:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  0151d: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  01525:    	sub    rsp,0x10
  01529:    	movq   QWORD PTR [rsp],xmm3
  0152e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01534:    	mov    rdx,QWORD PTR [rbp-0x30]
  01538:    	mov    rcx,QWORD PTR [rbp-0x58]
  0153c:    	mov    rdi,rbx
  0153f:    	mov    rsi,r12
  01542: 78 	movabs rax,0x55788c797be0
  0154c:    	call   rax
  0154e:    	movq   xmm3,QWORD PTR [rsp]
  01553:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01559:    	add    rsp,0x10
  0155d: 78 	movabs r13,0x55788df01940
  01567:    	test   rax,rax
  0156a:    	je     0xfffea993
  01570:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  01574:    	mov    rdi,QWORD PTR [rbp-0x50]
  01578: 00 	test   rdi,0x7
  0157f:    	jne    0x3758e
  01585:    	cmp    DWORD PTR [rdi+0x4],0x25
  01589:    	jne    0x3758e
  0158f: 26 	cmp    DWORD PTR [rip+0xfffffffffffebdd6],0x26        # 0xfffed36c
  01596:    	jne    0x3758e
  0159c:    	sub    rsp,0x10
  015a0:    	movq   QWORD PTR [rsp],xmm3
  015a5:    	movq   QWORD PTR [rsp+0x8],xmm4
  015ab:    	mov    rax,QWORD PTR [rbx]
  015ae:    	lea    rdi,[rsp-0x18]
  015b3:    	mov    QWORD PTR [rdi],rax
  015b6:    	mov    QWORD PTR [rbx],rdi
  015b9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015c2:    	mov    QWORD PTR [rsp-0x38],rcx
  015c7:    	mov    rax,QWORD PTR [rbp-0x50]
  015cb:    	mov    QWORD PTR [rsp-0x38],rax
  015d0: 00 	mov    rdi,0x1
  015d7:    	mov    rax,QWORD PTR [rbp-0x58]
  015db:    	mov    QWORD PTR [rsp-0x40],rax
  015e0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  015e9: 09 	movabs rax,0x90000003a
  015f3:    	mov    QWORD PTR [rsp-0x28],rax
  015f8: 78 	movabs r13,0x55788dee5eb0
  01602:    	call   0xffff443c
  01607:    	lea    rdi,[rbp-0x8]
  0160b:    	mov    QWORD PTR [rbx],rdi
  0160e:    	movq   xmm3,QWORD PTR [rsp]
  01613:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01619:    	add    rsp,0x10
  0161d: 78 	movabs r13,0x55788df01960
  01627:    	test   rax,rax
  0162a:    	je     0xfffea993
  01630:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  01634:    	sub    rsp,0x10
  01638:    	movq   QWORD PTR [rsp],xmm3
  0163d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01643:    	mov    rdx,QWORD PTR [rbp-0x30]
  01647:    	mov    rcx,QWORD PTR [rbp-0x40]
  0164b:    	mov    r8,QWORD PTR [rbp-0x48]
  0164f:    	mov    rdi,rbx
  01652:    	mov    rsi,r12
  01655: 78 	movabs rax,0x55788c797cf0
  0165f:    	call   rax
  01661:    	movq   xmm3,QWORD PTR [rsp]
  01666:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0166c:    	add    rsp,0x10
  01670: 78 	movabs r13,0x55788df01980
  0167a:    	test   rax,rax
  0167d:    	je     0xfffea993
:00112 %3 = 1: i32
  01683: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  0168b: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  01693:    	sub    rsp,0x10
  01697:    	movq   QWORD PTR [rsp],xmm3
  0169c:    	movq   QWORD PTR [rsp+0x8],xmm4
  016a2:    	mov    rdx,QWORD PTR [rbp-0x30]
  016a6:    	mov    rcx,QWORD PTR [rbp-0x50]
  016aa:    	mov    rdi,rbx
  016ad:    	mov    rsi,r12
  016b0: 78 	movabs rax,0x55788c797be0
  016ba:    	call   rax
  016bc:    	movq   xmm3,QWORD PTR [rsp]
  016c1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016c7:    	add    rsp,0x10
  016cb: 78 	movabs r13,0x55788df019b0
  016d5:    	test   rax,rax
  016d8:    	je     0xfffea993
  016de:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  016e2:    	mov    rdi,QWORD PTR [rbp-0x50]
  016e6: 00 	test   rdi,0x7
  016ed:    	jne    0x3759d
  016f3:    	cmp    DWORD PTR [rdi+0x4],0x25
  016f7:    	jne    0x3759d
  016fd: 26 	cmp    DWORD PTR [rip+0xfffffffffffebc68],0x26        # 0xfffed36c
  01704:    	jne    0x3759d
  0170a:    	sub    rsp,0x10
  0170e:    	movq   QWORD PTR [rsp],xmm3
  01713:    	movq   QWORD PTR [rsp+0x8],xmm4
  01719:    	mov    rax,QWORD PTR [rbx]
  0171c:    	lea    rdi,[rsp-0x18]
  01721:    	mov    QWORD PTR [rdi],rax
  01724:    	mov    QWORD PTR [rbx],rdi
  01727: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01730:    	mov    QWORD PTR [rsp-0x38],rcx
  01735:    	mov    rax,QWORD PTR [rbp-0x50]
  01739:    	mov    QWORD PTR [rsp-0x38],rax
  0173e: 00 	mov    rdi,0x0
  01745: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0174e: 07 	movabs rax,0x100070000003d
  01758:    	mov    QWORD PTR [rsp-0x28],rax
  0175d: 78 	movabs r13,0x55788def86a0
  01767:    	call   0xfffedc31
  0176c:    	lea    rdi,[rbp-0x8]
  01770:    	mov    QWORD PTR [rbx],rdi
  01773:    	movq   xmm3,QWORD PTR [rsp]
  01778:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0177e:    	add    rsp,0x10
  01782: 78 	movabs r13,0x55788df019d0
  0178c:    	test   rax,rax
  0178f:    	je     0xfffea993
  01795:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  01799:    	sub    rsp,0x10
  0179d:    	movq   QWORD PTR [rsp],xmm3
  017a2:    	movq   QWORD PTR [rsp+0x8],xmm4
  017a8:    	mov    rdx,QWORD PTR [rbp-0x30]
  017ac:    	mov    rcx,QWORD PTR [rbp-0x40]
  017b0:    	mov    r8,QWORD PTR [rbp-0x48]
  017b4:    	mov    rdi,rbx
  017b7:    	mov    rsi,r12
  017ba: 78 	movabs rax,0x55788c797cf0
  017c4:    	call   rax
  017c6:    	movq   xmm3,QWORD PTR [rsp]
  017cb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017d1:    	add    rsp,0x10
  017d5: 78 	movabs r13,0x55788df019f0
  017df:    	test   rax,rax
  017e2:    	je     0xfffea993
:00119 %3 = %4
  017e8:    	mov    rax,QWORD PTR [rbp-0x48]
  017ec:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  017f0:    	mov    rax,QWORD PTR [rbp-0x40]
  017f4:    	leave  
  017f5:    	ret    
==> start whole compile: otherBasis FuncId(53) self_class:Scene start:[00000] bytecode:0x55788df01280
<== finished compile. elapsed:131.7µs
offset:Pos(94156) code: 6742 bytes  data: 330 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	sub    rsp,0x70
  00008: 00 	mov    rax,0x4
  0000f:    	mov    QWORD PTR [rbp-0x40],rax
  00013:    	mov    QWORD PTR [rbp-0x48],rax
  00017:    	mov    QWORD PTR [rbp-0x50],rax
  0001b:    	mov    QWORD PTR [rbp-0x58],rax
  0001f:    	mov    QWORD PTR [rbp-0x60],rax
  00023:    	mov    QWORD PTR [rbp-0x68],rax
  00027:    	mov    rdi,QWORD PTR [rbp-0x28]
  0002b: 00 	test   rdi,0x7
  00032:    	jne    0x35c88
  00038:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0003c:    	jne    0x35c88
:00000 %3 = 2: i32
  00042: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00001 %5 = const[Vec]                      [Vec]
  0004a: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeba03]        # 0xfffeba54
  00051: 00 	cmp    rax,QWORD PTR [rip+0x1a1c]        # 0x1a74
  00058:    	jne    0x35c97
  0005e: 00 	mov    rax,QWORD PTR [rip+0x19ff]        # 0x1a64
  00065:    	mov    QWORD PTR [rbp-0x50],rax
:00002 %6 = %2.call x()                     [Vec]
:00003 
  00069:    	mov    rdi,QWORD PTR [rbp-0x38]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x35cdd
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0007e:    	jne    0x35cdd
  00084: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb9bd],0x26        # 0xfffeba48
  0008b:    	jne    0x35cdd
  00091:    	mov    esi,DWORD PTR [rip+0x19e9]        # 0x1a80
  00097:    	cmp    esi,0xffffffff
  0009a:    	je     0x35cec
  000a0:    	cmp    WORD PTR [rdi+0x2],0x3
  000a5:    	jne    0xbe
  000ab:    	cmp    esi,0x6
  000ae:    	jge    0xbe
  000b4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000b9:    	jmp    0xca
  000be: 78 	movabs rax,0x55788c73bb50
  000c8:    	call   rax
  000ca:    	mov    QWORD PTR [rbp-0x58],rax
:00005 %7 = %2.call y()                     [Vec]
:00006 
  000ce:    	mov    rdi,QWORD PTR [rbp-0x38]
  000d2: 00 	test   rdi,0x7
  000d9:    	jne    0x35d15
  000df:    	cmp    DWORD PTR [rdi+0x4],0x25
  000e3:    	jne    0x35d15
  000e9: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb958],0x26        # 0xfffeba48
  000f0:    	jne    0x35d15
  000f6:    	mov    esi,DWORD PTR [rip+0x198c]        # 0x1a88
  000fc:    	cmp    esi,0xffffffff
  000ff:    	je     0x35d24
  00105:    	cmp    WORD PTR [rdi+0x2],0x3
  0010a:    	jne    0x123
  00110:    	cmp    esi,0x6
  00113:    	jge    0x123
  00119:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0011e:    	jmp    0x12f
  00123: 78 	movabs rax,0x55788c73bb50
  0012d:    	call   rax
  0012f:    	mov    QWORD PTR [rbp-0x60],rax
:00008 %8 = %2.call z()                     [Vec]
:00009 
  00133:    	mov    rdi,QWORD PTR [rbp-0x38]
  00137: 00 	test   rdi,0x7
  0013e:    	jne    0x35d4d
  00144:    	cmp    DWORD PTR [rdi+0x4],0x25
  00148:    	jne    0x35d4d
  0014e: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb8f3],0x26        # 0xfffeba48
  00155:    	jne    0x35d4d
  0015b:    	mov    esi,DWORD PTR [rip+0x192f]        # 0x1a90
  00161:    	cmp    esi,0xffffffff
  00164:    	je     0x35d5c
  0016a:    	cmp    WORD PTR [rdi+0x2],0x3
  0016f:    	jne    0x188
  00175:    	cmp    esi,0x6
  00178:    	jge    0x188
  0017e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00183:    	jmp    0x194
  00188: 78 	movabs rax,0x55788c73bb50
  00192:    	call   rax
  00194:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00012 
  00198:    	mov    rdi,QWORD PTR [rbp-0x50]
  0019c: 00 	test   rdi,0x7
  001a3:    	jne    0x35d85
  001a9:    	cmp    DWORD PTR [rdi+0x4],0x26
  001ad:    	jne    0x35d85
  001b3: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb88e],0x26        # 0xfffeba48
  001ba:    	jne    0x35d85
  001c0: 00 	mov    r9,0x0
  001c7:    	mov    rdx,rdi
  001ca:    	mov    rax,QWORD PTR [rbx]
  001cd:    	lea    rdi,[rsp-0x18]
  001d2:    	mov    QWORD PTR [rdi],rax
  001d5:    	mov    QWORD PTR [rbx],rdi
  001d8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  001e1:    	mov    QWORD PTR [rsp-0x38],rcx
  001e6:    	lea    rcx,[rbp-0x58]
  001ea: 00 	mov    r8,0x3
  001f1:    	call   0x35d94
  001f6:    	lea    rdi,[rbp-0x8]
  001fa:    	mov    QWORD PTR [rbx],rdi
  001fd: 78 	movabs r13,0x55788df01350
  00207:    	test   rax,rax
  0020a:    	je     0xfffe906f
  00210:    	mov    QWORD PTR [rbp-0x48],rax
:00014 %1.[%3] = %4
  00214:    	mov    rdx,QWORD PTR [rbp-0x30]
  00218:    	mov    rcx,QWORD PTR [rbp-0x40]
  0021c:    	mov    r8,QWORD PTR [rbp-0x48]
  00220:    	mov    rdi,rbx
  00223:    	mov    rsi,r12
  00226: 78 	movabs rax,0x55788c797cf0
  00230:    	call   rax
  00232: 78 	movabs r13,0x55788df01370
  0023c:    	test   rax,rax
  0023f:    	je     0xfffe906f
:00015 %3 = 1: i32
  00245: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00016 %5 = const[Vec]                      [Vec]
  0024d: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffeb800]        # 0xfffeba54
  00254: 00 	cmp    rax,QWORD PTR [rip+0x1849]        # 0x1aa4
  0025b:    	jne    0x35dc6
  00261: 00 	mov    rax,QWORD PTR [rip+0x182c]        # 0x1a94
  00268:    	mov    QWORD PTR [rbp-0x50],rax
:00017 %6 = literal[0.0]
  0026c: 00 	movq   xmm2,QWORD PTR [rip+0x1840]        # 0x1ab4
:00018 %7 = literal[0.0]
  00274: 00 	movq   xmm3,QWORD PTR [rip+0x1848]        # 0x1ac4
:00019 %8 = literal[0.0]
  0027c: 00 	movq   xmm4,QWORD PTR [rip+0x1850]        # 0x1ad4
:00020 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00021 
  00284:    	movq   xmm0,xmm2
  00288:    	call   0xfffe919b
  0028d:    	mov    QWORD PTR [rbp-0x58],rax
  00291:    	movq   xmm0,xmm3
  00295:    	call   0xfffe919b
  0029a:    	mov    QWORD PTR [rbp-0x60],rax
  0029e:    	movq   xmm0,xmm4
  002a2:    	call   0xfffe919b
  002a7:    	mov    QWORD PTR [rbp-0x68],rax
  002ab:    	mov    rdi,QWORD PTR [rbp-0x50]
  002af: 00 	test   rdi,0x7
  002b6:    	jne    0x35e0c
  002bc:    	cmp    DWORD PTR [rdi+0x4],0x26
  002c0:    	jne    0x35e0c
  002c6: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb77b],0x26        # 0xfffeba48
  002cd:    	jne    0x35e0c
  002d3: 00 	mov    r9,0x0
  002da:    	sub    rsp,0x20
  002de:    	movq   QWORD PTR [rsp],xmm2
  002e3:    	movq   QWORD PTR [rsp+0x8],xmm3
  002e9:    	movq   QWORD PTR [rsp+0x10],xmm4
  002ef:    	mov    rdx,rdi
  002f2:    	mov    rax,QWORD PTR [rbx]
  002f5:    	lea    rdi,[rsp-0x18]
  002fa:    	mov    QWORD PTR [rdi],rax
  002fd:    	mov    QWORD PTR [rbx],rdi
  00300: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00309:    	mov    QWORD PTR [rsp-0x38],rcx
  0030e:    	lea    rcx,[rbp-0x58]
  00312: 00 	mov    r8,0x3
  00319:    	call   0x35e1b
  0031e:    	lea    rdi,[rbp-0x8]
  00322:    	mov    QWORD PTR [rbx],rdi
  00325:    	movq   xmm2,QWORD PTR [rsp]
  0032a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00330:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00336:    	add    rsp,0x20
  0033a: 78 	movabs r13,0x55788df013e0
  00344:    	test   rax,rax
  00347:    	je     0xfffe906f
  0034d:    	mov    QWORD PTR [rbp-0x48],rax
:00023 %1.[%3] = %4
  00351:    	sub    rsp,0x20
  00355:    	movq   QWORD PTR [rsp],xmm2
  0035a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00360:    	movq   QWORD PTR [rsp+0x10],xmm4
  00366:    	mov    rdx,QWORD PTR [rbp-0x30]
  0036a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0036e:    	mov    r8,QWORD PTR [rbp-0x48]
  00372:    	mov    rdi,rbx
  00375:    	mov    rsi,r12
  00378: 78 	movabs rax,0x55788c797cf0
  00382:    	call   rax
  00384:    	movq   xmm2,QWORD PTR [rsp]
  00389:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0038f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00395:    	add    rsp,0x20
  00399: 78 	movabs r13,0x55788df01400
  003a3:    	test   rax,rax
  003a6:    	je     0xfffe906f
:00024 %3 = %2.call x()                     [Vec]
:00025 
  003ac:    	mov    rdi,QWORD PTR [rbp-0x38]
  003b0: 00 	test   rdi,0x7
  003b7:    	jne    0x35e4d
  003bd:    	cmp    DWORD PTR [rdi+0x4],0x25
  003c1:    	jne    0x35e4d
  003c7: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb67a],0x26        # 0xfffeba48
  003ce:    	jne    0x35e4d
  003d4:    	mov    esi,DWORD PTR [rip+0x1706]        # 0x1ae0
  003da:    	cmp    esi,0xffffffff
  003dd:    	je     0x35e5c
  003e3:    	cmp    WORD PTR [rdi+0x2],0x3
  003e8:    	jne    0x401
  003ee:    	cmp    esi,0x6
  003f1:    	jge    0x401
  003f7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003fc:    	jmp    0x437
  00401:    	sub    rsp,0x20
  00405:    	movq   QWORD PTR [rsp],xmm2
  0040a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00410:    	movq   QWORD PTR [rsp+0x10],xmm4
  00416: 78 	movabs rax,0x55788c73bb50
  00420:    	call   rax
  00422:    	movq   xmm2,QWORD PTR [rsp]
  00427:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0042d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00433:    	add    rsp,0x20
  00437:    	mov    QWORD PTR [rbp-0x40],rax
:00027 %4 = literal[0.6]
  0043b: 00 	movq   xmm5,QWORD PTR [rip+0x16a1]        # 0x1ae4
:00028 _%3 = %3 < %4                        [Float][Float]
:00029 condnotbr _%3 =>:00043
  00443:    	mov    rdi,QWORD PTR [rbp-0x40]
  00447: 00 	test   rdi,0x1
  0044e:    	jne    0x35eaf
  00454: 00 	test   rdi,0x2
  0045b:    	je     0x497
  00461:    	xorps  xmm6,xmm6
  00464: 00 	movabs rax,0x8000000000000002
  0046e:    	cmp    rdi,rax
  00471:    	je     0x4a9
  00477:    	mov    rax,rdi
  0047a:    	sar    rax,0x3f
  0047e:    	add    rax,0x2
  00482:    	and    rdi,0xfffffffffffffffc
  00486:    	or     rdi,rax
  00489:    	rol    rdi,0x3d
  0048d:    	movq   xmm6,rdi
  00492:    	jmp    0x4a9
  00497:    	call   0xfffe90a8
  0049c:    	test   rax,rax
  0049f:    	je     0x35eaf
  004a5:    	movq   xmm6,xmm0
  004a9:    	ucomisd xmm6,xmm5
  004ad:    	jae    0x35fd7
:00030 %3 = %2.call x()                     [Vec]
:00031 
  004b3:    	mov    rdi,QWORD PTR [rbp-0x38]
  004b7: 00 	test   rdi,0x7
  004be:    	jne    0x35ecb
  004c4:    	cmp    DWORD PTR [rdi+0x4],0x25
  004c8:    	jne    0x35ecb
  004ce: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb573],0x26        # 0xfffeba48
  004d5:    	jne    0x35ecb
  004db:    	mov    esi,DWORD PTR [rip+0x160f]        # 0x1af0
  004e1:    	cmp    esi,0xffffffff
  004e4:    	je     0x35ee7
  004ea:    	cmp    WORD PTR [rdi+0x2],0x3
  004ef:    	jne    0x508
  004f5:    	cmp    esi,0x6
  004f8:    	jge    0x508
  004fe:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00503:    	jmp    0x54a
  00508:    	sub    rsp,0x20
  0050c:    	movq   QWORD PTR [rsp],xmm2
  00511:    	movq   QWORD PTR [rsp+0x8],xmm3
  00517:    	movq   QWORD PTR [rsp+0x10],xmm4
  0051d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00523: 78 	movabs rax,0x55788c73bb50
  0052d:    	call   rax
  0052f:    	movq   xmm2,QWORD PTR [rsp]
  00534:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0053a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00540:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00546:    	add    rsp,0x20
  0054a:    	mov    QWORD PTR [rbp-0x40],rax
:00033 %4 = literal[-0.6]
  0054e: 00 	movq   xmm5,QWORD PTR [rip+0x159e]        # 0x1af4
:00034 _%3 = %3 > %4                        [Float][Float]
:00035 condnotbr _%3 =>:00043
  00556:    	mov    rdi,QWORD PTR [rbp-0x40]
  0055a: 00 	test   rdi,0x1
  00561:    	jne    0x35f46
  00567: 00 	test   rdi,0x2
  0056e:    	je     0x5aa
  00574:    	xorps  xmm6,xmm6
  00577: 00 	movabs rax,0x8000000000000002
  00581:    	cmp    rdi,rax
  00584:    	je     0x5bc
  0058a:    	mov    rax,rdi
  0058d:    	sar    rax,0x3f
  00591:    	add    rax,0x2
  00595:    	and    rdi,0xfffffffffffffffc
  00599:    	or     rdi,rax
  0059c:    	rol    rdi,0x3d
  005a0:    	movq   xmm6,rdi
  005a5:    	jmp    0x5bc
  005aa:    	call   0xfffe90a8
  005af:    	test   rax,rax
  005b2:    	je     0x35f46
  005b8:    	movq   xmm6,xmm0
  005bc:    	ucomisd xmm6,xmm5
  005c0:    	jbe    0x35ffd
:00036 %3 = 1: i32
  005c6: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00037 %3 = %1.[%3]
  005ce:    	sub    rsp,0x20
  005d2:    	movq   QWORD PTR [rsp],xmm2
  005d7:    	movq   QWORD PTR [rsp+0x8],xmm3
  005dd:    	movq   QWORD PTR [rsp+0x10],xmm4
  005e3:    	movq   QWORD PTR [rsp+0x18],xmm5
  005e9:    	mov    rdx,QWORD PTR [rbp-0x30]
  005ed:    	mov    rcx,QWORD PTR [rbp-0x40]
  005f1:    	mov    rdi,rbx
  005f4:    	mov    rsi,r12
  005f7: 78 	movabs rax,0x55788c797be0
  00601:    	call   rax
  00603:    	movq   xmm2,QWORD PTR [rsp]
  00608:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0060e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00614:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0061a:    	add    rsp,0x20
  0061e: 78 	movabs r13,0x55788df014e0
  00628:    	test   rax,rax
  0062b:    	je     0xfffe906f
  00631:    	mov    QWORD PTR [rbp-0x40],rax
:00038 %4 = literal[1.0]
  00635: 00 	movq   xmm5,QWORD PTR [rip+0x14c7]        # 0x1b04
:00039 _ = %3.call x=(%4; 1)                [Vec]
:00040 
  0063d:    	movq   xmm0,xmm5
  00641:    	call   0xfffe919b
  00646:    	mov    QWORD PTR [rbp-0x48],rax
  0064a:    	mov    rdi,QWORD PTR [rbp-0x40]
  0064e: 00 	test   rdi,0x7
  00655:    	jne    0x35f62
  0065b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0065f:    	jne    0x35f62
  00665: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb3dc],0x26        # 0xfffeba48
  0066c:    	jne    0x35f62
  00672:    	mov    esi,DWORD PTR [rip+0x1498]        # 0x1b10
  00678:    	cmp    esi,0xffffffff
  0067b:    	je     0x35f71
  00681:    	cmp    WORD PTR [rdi+0x2],0x3
  00686:    	jne    0x6a3
  0068c:    	cmp    esi,0x6
  0068f:    	jge    0x6a3
  00695:    	mov    rax,QWORD PTR [rbp-0x48]
  00699:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0069e:    	jmp    0x6fc
  006a3:    	sub    rsp,0x20
  006a7:    	movq   QWORD PTR [rsp],xmm2
  006ac:    	movq   QWORD PTR [rsp+0x8],xmm3
  006b2:    	movq   QWORD PTR [rsp+0x10],xmm4
  006b8:    	movq   QWORD PTR [rsp+0x18],xmm5
  006be:    	mov    rdx,QWORD PTR [rbp-0x48]
  006c2: 78 	movabs rax,0x55788c73bdd0
  006cc:    	call   rax
  006ce:    	movq   xmm2,QWORD PTR [rsp]
  006d3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006d9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006df:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006e5:    	add    rsp,0x20
  006e9: 78 	movabs r13,0x55788df01510
  006f3:    	test   rax,rax
  006f6:    	je     0xfffe906f
:00042 br =>:00087
  006fc:    	jmp    0x363c0
:00043 %3 = %2.call y()                     [Vec]
:00044 
  00701:    	mov    rdi,QWORD PTR [rbp-0x38]
  00705: 00 	test   rdi,0x7
  0070c:    	jne    0x36023
  00712:    	cmp    DWORD PTR [rdi+0x4],0x25
  00716:    	jne    0x36023
  0071c: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb325],0x26        # 0xfffeba48
  00723:    	jne    0x36023
  00729:    	mov    esi,DWORD PTR [rip+0x13e9]        # 0x1b18
  0072f:    	cmp    esi,0xffffffff
  00732:    	je     0x3603f
  00738:    	cmp    WORD PTR [rdi+0x2],0x3
  0073d:    	jne    0x756
  00743:    	cmp    esi,0x6
  00746:    	jge    0x756
  0074c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00751:    	jmp    0x798
  00756:    	sub    rsp,0x20
  0075a:    	movq   QWORD PTR [rsp],xmm2
  0075f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00765:    	movq   QWORD PTR [rsp+0x10],xmm4
  0076b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00771: 78 	movabs rax,0x55788c73bb50
  0077b:    	call   rax
  0077d:    	movq   xmm2,QWORD PTR [rsp]
  00782:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00788:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0078e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00794:    	add    rsp,0x20
  00798:    	mov    QWORD PTR [rbp-0x40],rax
:00046 %4 = literal[0.6]
  0079c: 00 	movq   xmm5,QWORD PTR [rip+0x1380]        # 0x1b24
:00047 _%3 = %3 < %4                        [Float][Float]
:00048 condnotbr _%3 =>:00062
  007a4:    	mov    rdi,QWORD PTR [rbp-0x40]
  007a8: 00 	test   rdi,0x1
  007af:    	jne    0x3609e
  007b5: 00 	test   rdi,0x2
  007bc:    	je     0x7f8
  007c2:    	xorps  xmm6,xmm6
  007c5: 00 	movabs rax,0x8000000000000002
  007cf:    	cmp    rdi,rax
  007d2:    	je     0x80a
  007d8:    	mov    rax,rdi
  007db:    	sar    rax,0x3f
  007df:    	add    rax,0x2
  007e3:    	and    rdi,0xfffffffffffffffc
  007e7:    	or     rdi,rax
  007ea:    	rol    rdi,0x3d
  007ee:    	movq   xmm6,rdi
  007f3:    	jmp    0x80a
  007f8:    	call   0xfffe90a8
  007fd:    	test   rax,rax
  00800:    	je     0x3609e
  00806:    	movq   xmm6,xmm0
  0080a:    	ucomisd xmm6,xmm5
  0080e:    	jae    0x36147
:00049 %3 = %2.call y()                     [<INVALID>]
:00050 
  00814: 00 	mov    rdi,0x4
  0081b: 01 	sub    DWORD PTR [rip+0x130a],0x1        # 0x1b2c
  00822:    	jne    0x360ba
  00828:    	mov    rdi,r12
  0082b:    	mov    esi,DWORD PTR [rbp-0x18]
  0082e:    	mov    rdx,QWORD PTR [rbp-0x28]
  00832: 78 	movabs rax,0x55788c79da60
  0083c:    	call   rax
  0083e: 00 	mov    rdi,0x4
  00845:    	jmp    0x360ba
:00052 %4 = literal[-0.6]
  0084a: 00 	movq   xmm5,QWORD PTR [rip+0x12e2]        # 0x1b34
:00053 _%3 = %3 > %4                        [<INVALID>][<INVALID>]
:00054 condnotbr _%3 =>:00062
  00852:    	movq   xmm0,xmm5
  00856:    	call   0xfffe919b
  0085b:    	mov    QWORD PTR [rbp-0x48],rax
  0085f:    	mov    rdi,QWORD PTR [rbp-0x40]
  00863:    	mov    rsi,QWORD PTR [rbp-0x48]
  00867: 00 	test   rdi,0x1
  0086e:    	je     0x360d6
  00874: 00 	test   rsi,0x1
  0087b:    	je     0x360d6
  00881:    	cmp    rdi,rsi
  00884:    	jle    0x3616d
:00055 %3 = 1: i32
  0088a: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00056 %3 = %1.[%3]
  00892:    	sub    rsp,0x20
  00896:    	movq   QWORD PTR [rsp],xmm2
  0089b:    	movq   QWORD PTR [rsp+0x8],xmm3
  008a1:    	movq   QWORD PTR [rsp+0x10],xmm4
  008a7:    	movq   QWORD PTR [rsp+0x18],xmm5
  008ad:    	mov    rdx,QWORD PTR [rbp-0x30]
  008b1:    	mov    rcx,QWORD PTR [rbp-0x40]
  008b5:    	mov    rdi,rbx
  008b8:    	mov    rsi,r12
  008bb: 78 	movabs rax,0x55788c797be0
  008c5:    	call   rax
  008c7:    	movq   xmm2,QWORD PTR [rsp]
  008cc:    	movq   xmm3,QWORD PTR [rsp+0x8]
  008d2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008d8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008de:    	add    rsp,0x20
  008e2: 78 	movabs r13,0x55788df01610
  008ec:    	test   rax,rax
  008ef:    	je     0xfffe906f
  008f5:    	mov    QWORD PTR [rbp-0x40],rax
:00057 %4 = literal[1.0]
  008f9: 00 	movq   xmm5,QWORD PTR [rip+0x1243]        # 0x1b44
:00058 _ = %3.call y=(%4; 1)                [<INVALID>]
:00059 
  00901: 00 	mov    rdi,0x4
  00908: 01 	sub    DWORD PTR [rip+0x123d],0x1        # 0x1b4c
  0090f:    	jne    0x3612b
  00915:    	mov    rdi,r12
  00918:    	mov    esi,DWORD PTR [rbp-0x18]
  0091b:    	mov    rdx,QWORD PTR [rbp-0x28]
  0091f: 78 	movabs rax,0x55788c79da60
  00929:    	call   rax
  0092b: 00 	mov    rdi,0x4
  00932:    	jmp    0x3612b
:00061 br =>:00087
  00937:    	jmp    0x363d9
:00062 %3 = %2.call z()                     [Vec]
:00063 
  0093c:    	mov    rdi,QWORD PTR [rbp-0x38]
  00940: 00 	test   rdi,0x7
  00947:    	jne    0x36186
  0094d:    	cmp    DWORD PTR [rdi+0x4],0x25
  00951:    	jne    0x36186
  00957: 26 	cmp    DWORD PTR [rip+0xfffffffffffeb0ea],0x26        # 0xfffeba48
  0095e:    	jne    0x36186
  00964:    	mov    esi,DWORD PTR [rip+0x11ea]        # 0x1b54
  0096a:    	cmp    esi,0xffffffff
  0096d:    	je     0x36195
  00973:    	cmp    WORD PTR [rdi+0x2],0x3
  00978:    	jne    0x991
  0097e:    	cmp    esi,0x6
  00981:    	jge    0x991
  00987:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0098c:    	jmp    0x9d3
  00991:    	sub    rsp,0x20
  00995:    	movq   QWORD PTR [rsp],xmm2
  0099a:    	movq   QWORD PTR [rsp+0x8],xmm3
  009a0:    	movq   QWORD PTR [rsp+0x10],xmm4
  009a6:    	movq   QWORD PTR [rsp+0x18],xmm5
  009ac: 78 	movabs rax,0x55788c73bb50
  009b6:    	call   rax
  009b8:    	movq   xmm2,QWORD PTR [rsp]
  009bd:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009c3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009c9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  009cf:    	add    rsp,0x20
  009d3:    	mov    QWORD PTR [rbp-0x40],rax
:00065 %4 = literal[0.6]
  009d7: 00 	movq   xmm5,QWORD PTR [rip+0x1185]        # 0x1b64
:00066 _%3 = %3 < %4                        [Float][Float]
:00067 condnotbr _%3 =>:00081
  009df:    	mov    rdi,QWORD PTR [rbp-0x40]
  009e3: 00 	test   rdi,0x1
  009ea:    	jne    0x361f4
  009f0: 00 	test   rdi,0x2
  009f7:    	je     0xa33
  009fd:    	xorps  xmm6,xmm6
  00a00: 00 	movabs rax,0x8000000000000002
  00a0a:    	cmp    rdi,rax
  00a0d:    	je     0xa45
  00a13:    	mov    rax,rdi
  00a16:    	sar    rax,0x3f
  00a1a:    	add    rax,0x2
  00a1e:    	and    rdi,0xfffffffffffffffc
  00a22:    	or     rdi,rax
  00a25:    	rol    rdi,0x3d
  00a29:    	movq   xmm6,rdi
  00a2e:    	jmp    0xa45
  00a33:    	call   0xfffe90a8
  00a38:    	test   rax,rax
  00a3b:    	je     0x361f4
  00a41:    	movq   xmm6,xmm0
  00a45:    	ucomisd xmm6,xmm5
  00a49:    	jae    0x3631c
:00068 %3 = %2.call z()                     [Vec]
:00069 
  00a4f:    	mov    rdi,QWORD PTR [rbp-0x38]
  00a53: 00 	test   rdi,0x7
  00a5a:    	jne    0x36210
  00a60:    	cmp    DWORD PTR [rdi+0x4],0x25
  00a64:    	jne    0x36210
  00a6a: 26 	cmp    DWORD PTR [rip+0xfffffffffffeafd7],0x26        # 0xfffeba48
  00a71:    	jne    0x36210
  00a77:    	mov    esi,DWORD PTR [rip+0x10f3]        # 0x1b70
  00a7d:    	cmp    esi,0xffffffff
  00a80:    	je     0x3622c
  00a86:    	cmp    WORD PTR [rdi+0x2],0x3
  00a8b:    	jne    0xaa4
  00a91:    	cmp    esi,0x6
  00a94:    	jge    0xaa4
  00a9a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a9f:    	jmp    0xae6
  00aa4:    	sub    rsp,0x20
  00aa8:    	movq   QWORD PTR [rsp],xmm2
  00aad:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ab3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ab9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00abf: 78 	movabs rax,0x55788c73bb50
  00ac9:    	call   rax
  00acb:    	movq   xmm2,QWORD PTR [rsp]
  00ad0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ad6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00adc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ae2:    	add    rsp,0x20
  00ae6:    	mov    QWORD PTR [rbp-0x40],rax
:00071 %4 = literal[-0.6]
  00aea: 00 	movq   xmm5,QWORD PTR [rip+0x1082]        # 0x1b74
:00072 _%3 = %3 > %4                        [Float][Float]
:00073 condnotbr _%3 =>:00081
  00af2:    	mov    rdi,QWORD PTR [rbp-0x40]
  00af6: 00 	test   rdi,0x1
  00afd:    	jne    0x3628b
  00b03: 00 	test   rdi,0x2
  00b0a:    	je     0xb46
  00b10:    	xorps  xmm6,xmm6
  00b13: 00 	movabs rax,0x8000000000000002
  00b1d:    	cmp    rdi,rax
  00b20:    	je     0xb58
  00b26:    	mov    rax,rdi
  00b29:    	sar    rax,0x3f
  00b2d:    	add    rax,0x2
  00b31:    	and    rdi,0xfffffffffffffffc
  00b35:    	or     rdi,rax
  00b38:    	rol    rdi,0x3d
  00b3c:    	movq   xmm6,rdi
  00b41:    	jmp    0xb58
  00b46:    	call   0xfffe90a8
  00b4b:    	test   rax,rax
  00b4e:    	je     0x3628b
  00b54:    	movq   xmm6,xmm0
  00b58:    	ucomisd xmm6,xmm5
  00b5c:    	jbe    0x36342
:00074 %3 = 1: i32
  00b62: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00075 %3 = %1.[%3]
  00b6a:    	sub    rsp,0x20
  00b6e:    	movq   QWORD PTR [rsp],xmm2
  00b73:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b79:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b7f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b85:    	mov    rdx,QWORD PTR [rbp-0x30]
  00b89:    	mov    rcx,QWORD PTR [rbp-0x40]
  00b8d:    	mov    rdi,rbx
  00b90:    	mov    rsi,r12
  00b93: 78 	movabs rax,0x55788c797be0
  00b9d:    	call   rax
  00b9f:    	movq   xmm2,QWORD PTR [rsp]
  00ba4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00baa:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00bb0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00bb6:    	add    rsp,0x20
  00bba: 78 	movabs r13,0x55788df01740
  00bc4:    	test   rax,rax
  00bc7:    	je     0xfffe906f
  00bcd:    	mov    QWORD PTR [rbp-0x40],rax
:00076 %4 = literal[1.0]
  00bd1: 00 	movq   xmm5,QWORD PTR [rip+0xfab]        # 0x1b84
:00077 _ = %3.call z=(%4; 1)                [Vec]
:00078 
  00bd9:    	movq   xmm0,xmm5
  00bdd:    	call   0xfffe919b
  00be2:    	mov    QWORD PTR [rbp-0x48],rax
  00be6:    	mov    rdi,QWORD PTR [rbp-0x40]
  00bea: 00 	test   rdi,0x7
  00bf1:    	jne    0x362a7
  00bf7:    	cmp    DWORD PTR [rdi+0x4],0x25
  00bfb:    	jne    0x362a7
  00c01: 26 	cmp    DWORD PTR [rip+0xfffffffffffeae40],0x26        # 0xfffeba48
  00c08:    	jne    0x362a7
  00c0e:    	mov    esi,DWORD PTR [rip+0xf7c]        # 0x1b90
  00c14:    	cmp    esi,0xffffffff
  00c17:    	je     0x362b6
  00c1d:    	cmp    WORD PTR [rdi+0x2],0x3
  00c22:    	jne    0xc3f
  00c28:    	cmp    esi,0x6
  00c2b:    	jge    0xc3f
  00c31:    	mov    rax,QWORD PTR [rbp-0x48]
  00c35:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00c3a:    	jmp    0xc98
  00c3f:    	sub    rsp,0x20
  00c43:    	movq   QWORD PTR [rsp],xmm2
  00c48:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c4e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c54:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c5a:    	mov    rdx,QWORD PTR [rbp-0x48]
  00c5e: 78 	movabs rax,0x55788c73bdd0
  00c68:    	call   rax
  00c6a:    	movq   xmm2,QWORD PTR [rsp]
  00c6f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c75:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c7b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c81:    	add    rsp,0x20
  00c85: 78 	movabs r13,0x55788df01770
  00c8f:    	test   rax,rax
  00c92:    	je     0xfffe906f
:00080 br =>:00087
  00c98:    	jmp    0x363ff
:00081 %3 = 1: i32
  00c9d: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00082 %3 = %1.[%3]
  00ca5:    	sub    rsp,0x20
  00ca9:    	movq   QWORD PTR [rsp],xmm2
  00cae:    	movq   QWORD PTR [rsp+0x8],xmm3
  00cb4:    	movq   QWORD PTR [rsp+0x10],xmm4
  00cba:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cc0:    	mov    rdx,QWORD PTR [rbp-0x30]
  00cc4:    	mov    rcx,QWORD PTR [rbp-0x40]
  00cc8:    	mov    rdi,rbx
  00ccb:    	mov    rsi,r12
  00cce: 78 	movabs rax,0x55788c797be0
  00cd8:    	call   rax
  00cda:    	movq   xmm2,QWORD PTR [rsp]
  00cdf:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ce5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ceb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cf1:    	add    rsp,0x20
  00cf5: 78 	movabs r13,0x55788df017b0
  00cff:    	test   rax,rax
  00d02:    	je     0xfffe906f
  00d08:    	mov    QWORD PTR [rbp-0x40],rax
:00083 %4 = literal[1.0]
  00d0c: 00 	movq   xmm5,QWORD PTR [rip+0xe80]        # 0x1b94
:00084 _ = %3.call x=(%4; 1)                [<INVALID>]
:00085 
  00d14: 00 	mov    rdi,0x4
  00d1b: 01 	sub    DWORD PTR [rip+0xe7a],0x1        # 0x1b9c
  00d22:    	jne    0x36368
  00d28:    	mov    rdi,r12
  00d2b:    	mov    esi,DWORD PTR [rbp-0x18]
  00d2e:    	mov    rdx,QWORD PTR [rbp-0x28]
  00d32: 78 	movabs rax,0x55788c79da60
  00d3c:    	call   rax
  00d3e: 00 	mov    rdi,0x4
  00d45:    	jmp    0x36368
:00087 %3 = 0: i32
  00d4a: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  00d52: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  00d5a:    	sub    rsp,0x20
  00d5e:    	movq   QWORD PTR [rsp],xmm2
  00d63:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d69:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d6f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d75:    	mov    rdx,QWORD PTR [rbp-0x30]
  00d79:    	mov    rcx,QWORD PTR [rbp-0x50]
  00d7d:    	mov    rdi,rbx
  00d80:    	mov    rsi,r12
  00d83: 78 	movabs rax,0x55788c797be0
  00d8d:    	call   rax
  00d8f:    	movq   xmm2,QWORD PTR [rsp]
  00d94:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d9a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00da0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00da6:    	add    rsp,0x20
  00daa: 78 	movabs r13,0x55788df01820
  00db4:    	test   rax,rax
  00db7:    	je     0xfffe906f
  00dbd:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  00dc1: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  00dc9:    	sub    rsp,0x20
  00dcd:    	movq   QWORD PTR [rsp],xmm3
  00dd2:    	movq   QWORD PTR [rsp+0x8],xmm4
  00dd8:    	movq   QWORD PTR [rsp+0x10],xmm5
  00dde:    	mov    rdx,QWORD PTR [rbp-0x30]
  00de2:    	mov    rcx,QWORD PTR [rbp-0x58]
  00de6:    	mov    rdi,rbx
  00de9:    	mov    rsi,r12
  00dec: 78 	movabs rax,0x55788c797be0
  00df6:    	call   rax
  00df8:    	movq   xmm3,QWORD PTR [rsp]
  00dfd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e03:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e09:    	add    rsp,0x20
  00e0d: 78 	movabs r13,0x55788df01840
  00e17:    	test   rax,rax
  00e1a:    	je     0xfffe906f
  00e20:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  00e24:    	mov    rdi,QWORD PTR [rbp-0x50]
  00e28: 00 	test   rdi,0x7
  00e2f:    	jne    0x36384
  00e35:    	cmp    DWORD PTR [rdi+0x4],0x25
  00e39:    	jne    0x36384
  00e3f: 26 	cmp    DWORD PTR [rip+0xfffffffffffeac02],0x26        # 0xfffeba48
  00e46:    	jne    0x36384
  00e4c:    	sub    rsp,0x10
  00e50:    	movq   QWORD PTR [rsp],xmm3
  00e55:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e5b:    	mov    rax,QWORD PTR [rbx]
  00e5e:    	lea    rdi,[rsp-0x18]
  00e63:    	mov    QWORD PTR [rdi],rax
  00e66:    	mov    QWORD PTR [rbx],rdi
  00e69: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e72:    	mov    QWORD PTR [rsp-0x38],rcx
  00e77:    	mov    rax,QWORD PTR [rbp-0x50]
  00e7b:    	mov    QWORD PTR [rsp-0x38],rax
  00e80: 00 	mov    rdi,0x1
  00e87:    	mov    rax,QWORD PTR [rbp-0x58]
  00e8b:    	mov    QWORD PTR [rsp-0x40],rax
  00e90: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00e99: 09 	movabs rax,0x90000003a
  00ea3:    	mov    QWORD PTR [rsp-0x28],rax
  00ea8: 78 	movabs r13,0x55788dee5eb0
  00eb2:    	call   0xffff2b18
  00eb7:    	lea    rdi,[rbp-0x8]
  00ebb:    	mov    QWORD PTR [rbx],rdi
  00ebe:    	movq   xmm3,QWORD PTR [rsp]
  00ec3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00ec9:    	add    rsp,0x10
  00ecd: 78 	movabs r13,0x55788df01860
  00ed7:    	test   rax,rax
  00eda:    	je     0xfffe906f
  00ee0:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  00ee4:    	sub    rsp,0x10
  00ee8:    	movq   QWORD PTR [rsp],xmm3
  00eed:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ef3:    	mov    rdx,QWORD PTR [rbp-0x30]
  00ef7:    	mov    rcx,QWORD PTR [rbp-0x40]
  00efb:    	mov    r8,QWORD PTR [rbp-0x48]
  00eff:    	mov    rdi,rbx
  00f02:    	mov    rsi,r12
  00f05: 78 	movabs rax,0x55788c797cf0
  00f0f:    	call   rax
  00f11:    	movq   xmm3,QWORD PTR [rsp]
  00f16:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f1c:    	add    rsp,0x10
  00f20: 78 	movabs r13,0x55788df01880
  00f2a:    	test   rax,rax
  00f2d:    	je     0xfffe906f
:00096 %3 = 0: i32
  00f33: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  00f3b: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  00f43:    	sub    rsp,0x10
  00f47:    	movq   QWORD PTR [rsp],xmm3
  00f4c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f52:    	mov    rdx,QWORD PTR [rbp-0x30]
  00f56:    	mov    rcx,QWORD PTR [rbp-0x50]
  00f5a:    	mov    rdi,rbx
  00f5d:    	mov    rsi,r12
  00f60: 78 	movabs rax,0x55788c797be0
  00f6a:    	call   rax
  00f6c:    	movq   xmm3,QWORD PTR [rsp]
  00f71:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f77:    	add    rsp,0x10
  00f7b: 78 	movabs r13,0x55788df018b0
  00f85:    	test   rax,rax
  00f88:    	je     0xfffe906f
  00f8e:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  00f92:    	mov    rdi,QWORD PTR [rbp-0x50]
  00f96: 00 	test   rdi,0x7
  00f9d:    	jne    0x36393
  00fa3:    	cmp    DWORD PTR [rdi+0x4],0x25
  00fa7:    	jne    0x36393
  00fad: 26 	cmp    DWORD PTR [rip+0xfffffffffffeaa94],0x26        # 0xfffeba48
  00fb4:    	jne    0x36393
  00fba:    	sub    rsp,0x10
  00fbe:    	movq   QWORD PTR [rsp],xmm3
  00fc3:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fc9:    	mov    rax,QWORD PTR [rbx]
  00fcc:    	lea    rdi,[rsp-0x18]
  00fd1:    	mov    QWORD PTR [rdi],rax
  00fd4:    	mov    QWORD PTR [rbx],rdi
  00fd7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fe0:    	mov    QWORD PTR [rsp-0x38],rcx
  00fe5:    	mov    rax,QWORD PTR [rbp-0x50]
  00fe9:    	mov    QWORD PTR [rsp-0x38],rax
  00fee: 00 	mov    rdi,0x0
  00ff5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ffe: 07 	movabs rax,0x100070000003d
  01008:    	mov    QWORD PTR [rsp-0x28],rax
  0100d: 78 	movabs r13,0x55788def86a0
  01017:    	call   0xfffec30d
  0101c:    	lea    rdi,[rbp-0x8]
  01020:    	mov    QWORD PTR [rbx],rdi
  01023:    	movq   xmm3,QWORD PTR [rsp]
  01028:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0102e:    	add    rsp,0x10
  01032: 78 	movabs r13,0x55788df018d0
  0103c:    	test   rax,rax
  0103f:    	je     0xfffe906f
  01045:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  01049:    	sub    rsp,0x10
  0104d:    	movq   QWORD PTR [rsp],xmm3
  01052:    	movq   QWORD PTR [rsp+0x8],xmm4
  01058:    	mov    rdx,QWORD PTR [rbp-0x30]
  0105c:    	mov    rcx,QWORD PTR [rbp-0x40]
  01060:    	mov    r8,QWORD PTR [rbp-0x48]
  01064:    	mov    rdi,rbx
  01067:    	mov    rsi,r12
  0106a: 78 	movabs rax,0x55788c797cf0
  01074:    	call   rax
  01076:    	movq   xmm3,QWORD PTR [rsp]
  0107b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01081:    	add    rsp,0x10
  01085: 78 	movabs r13,0x55788df018f0
  0108f:    	test   rax,rax
  01092:    	je     0xfffe906f
:00103 %3 = 1: i32
  01098: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  010a0: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  010a8:    	sub    rsp,0x10
  010ac:    	movq   QWORD PTR [rsp],xmm3
  010b1:    	movq   QWORD PTR [rsp+0x8],xmm4
  010b7:    	mov    rdx,QWORD PTR [rbp-0x30]
  010bb:    	mov    rcx,QWORD PTR [rbp-0x50]
  010bf:    	mov    rdi,rbx
  010c2:    	mov    rsi,r12
  010c5: 78 	movabs rax,0x55788c797be0
  010cf:    	call   rax
  010d1:    	movq   xmm3,QWORD PTR [rsp]
  010d6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010dc:    	add    rsp,0x10
  010e0: 78 	movabs r13,0x55788df01920
  010ea:    	test   rax,rax
  010ed:    	je     0xfffe906f
  010f3:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  010f7: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  010ff:    	sub    rsp,0x10
  01103:    	movq   QWORD PTR [rsp],xmm3
  01108:    	movq   QWORD PTR [rsp+0x8],xmm4
  0110e:    	mov    rdx,QWORD PTR [rbp-0x30]
  01112:    	mov    rcx,QWORD PTR [rbp-0x58]
  01116:    	mov    rdi,rbx
  01119:    	mov    rsi,r12
  0111c: 78 	movabs rax,0x55788c797be0
  01126:    	call   rax
  01128:    	movq   xmm3,QWORD PTR [rsp]
  0112d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01133:    	add    rsp,0x10
  01137: 78 	movabs r13,0x55788df01940
  01141:    	test   rax,rax
  01144:    	je     0xfffe906f
  0114a:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  0114e:    	mov    rdi,QWORD PTR [rbp-0x50]
  01152: 00 	test   rdi,0x7
  01159:    	jne    0x363a2
  0115f:    	cmp    DWORD PTR [rdi+0x4],0x25
  01163:    	jne    0x363a2
  01169: 26 	cmp    DWORD PTR [rip+0xfffffffffffea8d8],0x26        # 0xfffeba48
  01170:    	jne    0x363a2
  01176:    	sub    rsp,0x10
  0117a:    	movq   QWORD PTR [rsp],xmm3
  0117f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01185:    	mov    rax,QWORD PTR [rbx]
  01188:    	lea    rdi,[rsp-0x18]
  0118d:    	mov    QWORD PTR [rdi],rax
  01190:    	mov    QWORD PTR [rbx],rdi
  01193: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0119c:    	mov    QWORD PTR [rsp-0x38],rcx
  011a1:    	mov    rax,QWORD PTR [rbp-0x50]
  011a5:    	mov    QWORD PTR [rsp-0x38],rax
  011aa: 00 	mov    rdi,0x1
  011b1:    	mov    rax,QWORD PTR [rbp-0x58]
  011b5:    	mov    QWORD PTR [rsp-0x40],rax
  011ba: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011c3: 09 	movabs rax,0x90000003a
  011cd:    	mov    QWORD PTR [rsp-0x28],rax
  011d2: 78 	movabs r13,0x55788dee5eb0
  011dc:    	call   0xffff2b18
  011e1:    	lea    rdi,[rbp-0x8]
  011e5:    	mov    QWORD PTR [rbx],rdi
  011e8:    	movq   xmm3,QWORD PTR [rsp]
  011ed:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011f3:    	add    rsp,0x10
  011f7: 78 	movabs r13,0x55788df01960
  01201:    	test   rax,rax
  01204:    	je     0xfffe906f
  0120a:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  0120e:    	sub    rsp,0x10
  01212:    	movq   QWORD PTR [rsp],xmm3
  01217:    	movq   QWORD PTR [rsp+0x8],xmm4
  0121d:    	mov    rdx,QWORD PTR [rbp-0x30]
  01221:    	mov    rcx,QWORD PTR [rbp-0x40]
  01225:    	mov    r8,QWORD PTR [rbp-0x48]
  01229:    	mov    rdi,rbx
  0122c:    	mov    rsi,r12
  0122f: 78 	movabs rax,0x55788c797cf0
  01239:    	call   rax
  0123b:    	movq   xmm3,QWORD PTR [rsp]
  01240:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01246:    	add    rsp,0x10
  0124a: 78 	movabs r13,0x55788df01980
  01254:    	test   rax,rax
  01257:    	je     0xfffe906f
:00112 %3 = 1: i32
  0125d: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  01265: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  0126d:    	sub    rsp,0x10
  01271:    	movq   QWORD PTR [rsp],xmm3
  01276:    	movq   QWORD PTR [rsp+0x8],xmm4
  0127c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01280:    	mov    rcx,QWORD PTR [rbp-0x50]
  01284:    	mov    rdi,rbx
  01287:    	mov    rsi,r12
  0128a: 78 	movabs rax,0x55788c797be0
  01294:    	call   rax
  01296:    	movq   xmm3,QWORD PTR [rsp]
  0129b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012a1:    	add    rsp,0x10
  012a5: 78 	movabs r13,0x55788df019b0
  012af:    	test   rax,rax
  012b2:    	je     0xfffe906f
  012b8:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  012bc:    	mov    rdi,QWORD PTR [rbp-0x50]
  012c0: 00 	test   rdi,0x7
  012c7:    	jne    0x363b1
  012cd:    	cmp    DWORD PTR [rdi+0x4],0x25
  012d1:    	jne    0x363b1
  012d7: 26 	cmp    DWORD PTR [rip+0xfffffffffffea76a],0x26        # 0xfffeba48
  012de:    	jne    0x363b1
  012e4:    	sub    rsp,0x10
  012e8:    	movq   QWORD PTR [rsp],xmm3
  012ed:    	movq   QWORD PTR [rsp+0x8],xmm4
  012f3:    	mov    rax,QWORD PTR [rbx]
  012f6:    	lea    rdi,[rsp-0x18]
  012fb:    	mov    QWORD PTR [rdi],rax
  012fe:    	mov    QWORD PTR [rbx],rdi
  01301: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0130a:    	mov    QWORD PTR [rsp-0x38],rcx
  0130f:    	mov    rax,QWORD PTR [rbp-0x50]
  01313:    	mov    QWORD PTR [rsp-0x38],rax
  01318: 00 	mov    rdi,0x0
  0131f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01328: 07 	movabs rax,0x100070000003d
  01332:    	mov    QWORD PTR [rsp-0x28],rax
  01337: 78 	movabs r13,0x55788def86a0
  01341:    	call   0xfffec30d
  01346:    	lea    rdi,[rbp-0x8]
  0134a:    	mov    QWORD PTR [rbx],rdi
  0134d:    	movq   xmm3,QWORD PTR [rsp]
  01352:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01358:    	add    rsp,0x10
  0135c: 78 	movabs r13,0x55788df019d0
  01366:    	test   rax,rax
  01369:    	je     0xfffe906f
  0136f:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  01373:    	sub    rsp,0x10
  01377:    	movq   QWORD PTR [rsp],xmm3
  0137c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01382:    	mov    rdx,QWORD PTR [rbp-0x30]
  01386:    	mov    rcx,QWORD PTR [rbp-0x40]
  0138a:    	mov    r8,QWORD PTR [rbp-0x48]
  0138e:    	mov    rdi,rbx
  01391:    	mov    rsi,r12
  01394: 78 	movabs rax,0x55788c797cf0
  0139e:    	call   rax
  013a0:    	movq   xmm3,QWORD PTR [rsp]
  013a5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013ab:    	add    rsp,0x10
  013af: 78 	movabs r13,0x55788df019f0
  013b9:    	test   rax,rax
  013bc:    	je     0xfffe906f
:00119 %3 = %4
  013c2:    	mov    rax,QWORD PTR [rbp-0x48]
  013c6:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  013ca:    	mov    rax,QWORD PTR [rbp-0x40]
  013ce:    	leave  
  013cf:    	ret    
:00087 %3 = 0: i32
  013d0: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  013d8: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  013e0:    	sub    rsp,0x20
  013e4:    	movq   QWORD PTR [rsp],xmm2
  013e9:    	movq   QWORD PTR [rsp+0x8],xmm3
  013ef:    	movq   QWORD PTR [rsp+0x10],xmm4
  013f5:    	movq   QWORD PTR [rsp+0x18],xmm5
  013fb:    	mov    rdx,QWORD PTR [rbp-0x30]
  013ff:    	mov    rcx,QWORD PTR [rbp-0x50]
  01403:    	mov    rdi,rbx
  01406:    	mov    rsi,r12
  01409: 78 	movabs rax,0x55788c797be0
  01413:    	call   rax
  01415:    	movq   xmm2,QWORD PTR [rsp]
  0141a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01420:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01426:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0142c:    	add    rsp,0x20
  01430: 78 	movabs r13,0x55788df01820
  0143a:    	test   rax,rax
  0143d:    	je     0xfffe906f
  01443:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  01447: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  0144f:    	sub    rsp,0x20
  01453:    	movq   QWORD PTR [rsp],xmm3
  01458:    	movq   QWORD PTR [rsp+0x8],xmm4
  0145e:    	movq   QWORD PTR [rsp+0x10],xmm5
  01464:    	mov    rdx,QWORD PTR [rbp-0x30]
  01468:    	mov    rcx,QWORD PTR [rbp-0x58]
  0146c:    	mov    rdi,rbx
  0146f:    	mov    rsi,r12
  01472: 78 	movabs rax,0x55788c797be0
  0147c:    	call   rax
  0147e:    	movq   xmm3,QWORD PTR [rsp]
  01483:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01489:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0148f:    	add    rsp,0x20
  01493: 78 	movabs r13,0x55788df01840
  0149d:    	test   rax,rax
  014a0:    	je     0xfffe906f
  014a6:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  014aa:    	mov    rdi,QWORD PTR [rbp-0x50]
  014ae: 00 	test   rdi,0x7
  014b5:    	jne    0x36418
  014bb:    	cmp    DWORD PTR [rdi+0x4],0x25
  014bf:    	jne    0x36418
  014c5: 26 	cmp    DWORD PTR [rip+0xfffffffffffea57c],0x26        # 0xfffeba48
  014cc:    	jne    0x36418
  014d2:    	sub    rsp,0x10
  014d6:    	movq   QWORD PTR [rsp],xmm3
  014db:    	movq   QWORD PTR [rsp+0x8],xmm4
  014e1:    	mov    rax,QWORD PTR [rbx]
  014e4:    	lea    rdi,[rsp-0x18]
  014e9:    	mov    QWORD PTR [rdi],rax
  014ec:    	mov    QWORD PTR [rbx],rdi
  014ef: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014f8:    	mov    QWORD PTR [rsp-0x38],rcx
  014fd:    	mov    rax,QWORD PTR [rbp-0x50]
  01501:    	mov    QWORD PTR [rsp-0x38],rax
  01506: 00 	mov    rdi,0x1
  0150d:    	mov    rax,QWORD PTR [rbp-0x58]
  01511:    	mov    QWORD PTR [rsp-0x40],rax
  01516: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0151f: 09 	movabs rax,0x90000003a
  01529:    	mov    QWORD PTR [rsp-0x28],rax
  0152e: 78 	movabs r13,0x55788dee5eb0
  01538:    	call   0xffff2b18
  0153d:    	lea    rdi,[rbp-0x8]
  01541:    	mov    QWORD PTR [rbx],rdi
  01544:    	movq   xmm3,QWORD PTR [rsp]
  01549:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0154f:    	add    rsp,0x10
  01553: 78 	movabs r13,0x55788df01860
  0155d:    	test   rax,rax
  01560:    	je     0xfffe906f
  01566:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  0156a:    	sub    rsp,0x10
  0156e:    	movq   QWORD PTR [rsp],xmm3
  01573:    	movq   QWORD PTR [rsp+0x8],xmm4
  01579:    	mov    rdx,QWORD PTR [rbp-0x30]
  0157d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01581:    	mov    r8,QWORD PTR [rbp-0x48]
  01585:    	mov    rdi,rbx
  01588:    	mov    rsi,r12
  0158b: 78 	movabs rax,0x55788c797cf0
  01595:    	call   rax
  01597:    	movq   xmm3,QWORD PTR [rsp]
  0159c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015a2:    	add    rsp,0x10
  015a6: 78 	movabs r13,0x55788df01880
  015b0:    	test   rax,rax
  015b3:    	je     0xfffe906f
:00096 %3 = 0: i32
  015b9: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  015c1: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  015c9:    	sub    rsp,0x10
  015cd:    	movq   QWORD PTR [rsp],xmm3
  015d2:    	movq   QWORD PTR [rsp+0x8],xmm4
  015d8:    	mov    rdx,QWORD PTR [rbp-0x30]
  015dc:    	mov    rcx,QWORD PTR [rbp-0x50]
  015e0:    	mov    rdi,rbx
  015e3:    	mov    rsi,r12
  015e6: 78 	movabs rax,0x55788c797be0
  015f0:    	call   rax
  015f2:    	movq   xmm3,QWORD PTR [rsp]
  015f7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015fd:    	add    rsp,0x10
  01601: 78 	movabs r13,0x55788df018b0
  0160b:    	test   rax,rax
  0160e:    	je     0xfffe906f
  01614:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  01618:    	mov    rdi,QWORD PTR [rbp-0x50]
  0161c: 00 	test   rdi,0x7
  01623:    	jne    0x36427
  01629:    	cmp    DWORD PTR [rdi+0x4],0x25
  0162d:    	jne    0x36427
  01633: 26 	cmp    DWORD PTR [rip+0xfffffffffffea40e],0x26        # 0xfffeba48
  0163a:    	jne    0x36427
  01640:    	sub    rsp,0x10
  01644:    	movq   QWORD PTR [rsp],xmm3
  01649:    	movq   QWORD PTR [rsp+0x8],xmm4
  0164f:    	mov    rax,QWORD PTR [rbx]
  01652:    	lea    rdi,[rsp-0x18]
  01657:    	mov    QWORD PTR [rdi],rax
  0165a:    	mov    QWORD PTR [rbx],rdi
  0165d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01666:    	mov    QWORD PTR [rsp-0x38],rcx
  0166b:    	mov    rax,QWORD PTR [rbp-0x50]
  0166f:    	mov    QWORD PTR [rsp-0x38],rax
  01674: 00 	mov    rdi,0x0
  0167b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01684: 07 	movabs rax,0x100070000003d
  0168e:    	mov    QWORD PTR [rsp-0x28],rax
  01693: 78 	movabs r13,0x55788def86a0
  0169d:    	call   0xfffec30d
  016a2:    	lea    rdi,[rbp-0x8]
  016a6:    	mov    QWORD PTR [rbx],rdi
  016a9:    	movq   xmm3,QWORD PTR [rsp]
  016ae:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016b4:    	add    rsp,0x10
  016b8: 78 	movabs r13,0x55788df018d0
  016c2:    	test   rax,rax
  016c5:    	je     0xfffe906f
  016cb:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  016cf:    	sub    rsp,0x10
  016d3:    	movq   QWORD PTR [rsp],xmm3
  016d8:    	movq   QWORD PTR [rsp+0x8],xmm4
  016de:    	mov    rdx,QWORD PTR [rbp-0x30]
  016e2:    	mov    rcx,QWORD PTR [rbp-0x40]
  016e6:    	mov    r8,QWORD PTR [rbp-0x48]
  016ea:    	mov    rdi,rbx
  016ed:    	mov    rsi,r12
  016f0: 78 	movabs rax,0x55788c797cf0
  016fa:    	call   rax
  016fc:    	movq   xmm3,QWORD PTR [rsp]
  01701:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01707:    	add    rsp,0x10
  0170b: 78 	movabs r13,0x55788df018f0
  01715:    	test   rax,rax
  01718:    	je     0xfffe906f
:00103 %3 = 1: i32
  0171e: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  01726: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  0172e:    	sub    rsp,0x10
  01732:    	movq   QWORD PTR [rsp],xmm3
  01737:    	movq   QWORD PTR [rsp+0x8],xmm4
  0173d:    	mov    rdx,QWORD PTR [rbp-0x30]
  01741:    	mov    rcx,QWORD PTR [rbp-0x50]
  01745:    	mov    rdi,rbx
  01748:    	mov    rsi,r12
  0174b: 78 	movabs rax,0x55788c797be0
  01755:    	call   rax
  01757:    	movq   xmm3,QWORD PTR [rsp]
  0175c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01762:    	add    rsp,0x10
  01766: 78 	movabs r13,0x55788df01920
  01770:    	test   rax,rax
  01773:    	je     0xfffe906f
  01779:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  0177d: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  01785:    	sub    rsp,0x10
  01789:    	movq   QWORD PTR [rsp],xmm3
  0178e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01794:    	mov    rdx,QWORD PTR [rbp-0x30]
  01798:    	mov    rcx,QWORD PTR [rbp-0x58]
  0179c:    	mov    rdi,rbx
  0179f:    	mov    rsi,r12
  017a2: 78 	movabs rax,0x55788c797be0
  017ac:    	call   rax
  017ae:    	movq   xmm3,QWORD PTR [rsp]
  017b3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017b9:    	add    rsp,0x10
  017bd: 78 	movabs r13,0x55788df01940
  017c7:    	test   rax,rax
  017ca:    	je     0xfffe906f
  017d0:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  017d4:    	mov    rdi,QWORD PTR [rbp-0x50]
  017d8: 00 	test   rdi,0x7
  017df:    	jne    0x36436
  017e5:    	cmp    DWORD PTR [rdi+0x4],0x25
  017e9:    	jne    0x36436
  017ef: 26 	cmp    DWORD PTR [rip+0xfffffffffffea252],0x26        # 0xfffeba48
  017f6:    	jne    0x36436
  017fc:    	sub    rsp,0x10
  01800:    	movq   QWORD PTR [rsp],xmm3
  01805:    	movq   QWORD PTR [rsp+0x8],xmm4
  0180b:    	mov    rax,QWORD PTR [rbx]
  0180e:    	lea    rdi,[rsp-0x18]
  01813:    	mov    QWORD PTR [rdi],rax
  01816:    	mov    QWORD PTR [rbx],rdi
  01819: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01822:    	mov    QWORD PTR [rsp-0x38],rcx
  01827:    	mov    rax,QWORD PTR [rbp-0x50]
  0182b:    	mov    QWORD PTR [rsp-0x38],rax
  01830: 00 	mov    rdi,0x1
  01837:    	mov    rax,QWORD PTR [rbp-0x58]
  0183b:    	mov    QWORD PTR [rsp-0x40],rax
  01840: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01849: 09 	movabs rax,0x90000003a
  01853:    	mov    QWORD PTR [rsp-0x28],rax
  01858: 78 	movabs r13,0x55788dee5eb0
  01862:    	call   0xffff2b18
  01867:    	lea    rdi,[rbp-0x8]
  0186b:    	mov    QWORD PTR [rbx],rdi
  0186e:    	movq   xmm3,QWORD PTR [rsp]
  01873:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01879:    	add    rsp,0x10
  0187d: 78 	movabs r13,0x55788df01960
  01887:    	test   rax,rax
  0188a:    	je     0xfffe906f
  01890:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  01894:    	sub    rsp,0x10
  01898:    	movq   QWORD PTR [rsp],xmm3
  0189d:    	movq   QWORD PTR [rsp+0x8],xmm4
  018a3:    	mov    rdx,QWORD PTR [rbp-0x30]
  018a7:    	mov    rcx,QWORD PTR [rbp-0x40]
  018ab:    	mov    r8,QWORD PTR [rbp-0x48]
  018af:    	mov    rdi,rbx
  018b2:    	mov    rsi,r12
  018b5: 78 	movabs rax,0x55788c797cf0
  018bf:    	call   rax
  018c1:    	movq   xmm3,QWORD PTR [rsp]
  018c6:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018cc:    	add    rsp,0x10
  018d0: 78 	movabs r13,0x55788df01980
  018da:    	test   rax,rax
  018dd:    	je     0xfffe906f
:00112 %3 = 1: i32
  018e3: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  018eb: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  018f3:    	sub    rsp,0x10
  018f7:    	movq   QWORD PTR [rsp],xmm3
  018fc:    	movq   QWORD PTR [rsp+0x8],xmm4
  01902:    	mov    rdx,QWORD PTR [rbp-0x30]
  01906:    	mov    rcx,QWORD PTR [rbp-0x50]
  0190a:    	mov    rdi,rbx
  0190d:    	mov    rsi,r12
  01910: 78 	movabs rax,0x55788c797be0
  0191a:    	call   rax
  0191c:    	movq   xmm3,QWORD PTR [rsp]
  01921:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01927:    	add    rsp,0x10
  0192b: 78 	movabs r13,0x55788df019b0
  01935:    	test   rax,rax
  01938:    	je     0xfffe906f
  0193e:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  01942:    	mov    rdi,QWORD PTR [rbp-0x50]
  01946: 00 	test   rdi,0x7
  0194d:    	jne    0x36445
  01953:    	cmp    DWORD PTR [rdi+0x4],0x25
  01957:    	jne    0x36445
  0195d: 26 	cmp    DWORD PTR [rip+0xfffffffffffea0e4],0x26        # 0xfffeba48
  01964:    	jne    0x36445
  0196a:    	sub    rsp,0x10
  0196e:    	movq   QWORD PTR [rsp],xmm3
  01973:    	movq   QWORD PTR [rsp+0x8],xmm4
  01979:    	mov    rax,QWORD PTR [rbx]
  0197c:    	lea    rdi,[rsp-0x18]
  01981:    	mov    QWORD PTR [rdi],rax
  01984:    	mov    QWORD PTR [rbx],rdi
  01987: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01990:    	mov    QWORD PTR [rsp-0x38],rcx
  01995:    	mov    rax,QWORD PTR [rbp-0x50]
  01999:    	mov    QWORD PTR [rsp-0x38],rax
  0199e: 00 	mov    rdi,0x0
  019a5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019ae: 07 	movabs rax,0x100070000003d
  019b8:    	mov    QWORD PTR [rsp-0x28],rax
  019bd: 78 	movabs r13,0x55788def86a0
  019c7:    	call   0xfffec30d
  019cc:    	lea    rdi,[rbp-0x8]
  019d0:    	mov    QWORD PTR [rbx],rdi
  019d3:    	movq   xmm3,QWORD PTR [rsp]
  019d8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019de:    	add    rsp,0x10
  019e2: 78 	movabs r13,0x55788df019d0
  019ec:    	test   rax,rax
  019ef:    	je     0xfffe906f
  019f5:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  019f9:    	sub    rsp,0x10
  019fd:    	movq   QWORD PTR [rsp],xmm3
  01a02:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a08:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a0c:    	mov    rcx,QWORD PTR [rbp-0x40]
  01a10:    	mov    r8,QWORD PTR [rbp-0x48]
  01a14:    	mov    rdi,rbx
  01a17:    	mov    rsi,r12
  01a1a: 78 	movabs rax,0x55788c797cf0
  01a24:    	call   rax
  01a26:    	movq   xmm3,QWORD PTR [rsp]
  01a2b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a31:    	add    rsp,0x10
  01a35: 78 	movabs r13,0x55788df019f0
  01a3f:    	test   rax,rax
  01a42:    	je     0xfffe906f
:00119 %3 = %4
  01a48:    	mov    rax,QWORD PTR [rbp-0x48]
  01a4c:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  01a50:    	mov    rax,QWORD PTR [rbp-0x40]
  01a54:    	leave  
  01a55:    	ret    
==> start whole compile: otherBasis FuncId(53) self_class:Scene start:[00000] bytecode:0x55788df01280
<== finished compile. elapsed:138.2µs
offset:Pos(101228) code: 7036 bytes  data: 324 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	sub    rsp,0x70
  00008: 00 	mov    rax,0x4
  0000f:    	mov    QWORD PTR [rbp-0x40],rax
  00013:    	mov    QWORD PTR [rbp-0x48],rax
  00017:    	mov    QWORD PTR [rbp-0x50],rax
  0001b:    	mov    QWORD PTR [rbp-0x58],rax
  0001f:    	mov    QWORD PTR [rbp-0x60],rax
  00023:    	mov    QWORD PTR [rbp-0x68],rax
  00027:    	mov    rdi,QWORD PTR [rbp-0x28]
  0002b: 00 	test   rdi,0x7
  00032:    	jne    0x348b4
  00038:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0003c:    	jne    0x348b4
:00000 %3 = 2: i32
  00042: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00001 %5 = const[Vec]                      [Vec]
  0004a: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe9e63]        # 0xfffe9eb4
  00051: 00 	cmp    rax,QWORD PTR [rip+0x1b3c]        # 0x1b94
  00058:    	jne    0x348c3
  0005e: 00 	mov    rax,QWORD PTR [rip+0x1b1f]        # 0x1b84
  00065:    	mov    QWORD PTR [rbp-0x50],rax
:00002 %6 = %2.call x()                     [Vec]
:00003 
  00069:    	mov    rdi,QWORD PTR [rbp-0x38]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x34909
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0007e:    	jne    0x34909
  00084: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9e1d],0x26        # 0xfffe9ea8
  0008b:    	jne    0x34909
  00091:    	mov    esi,DWORD PTR [rip+0x1b09]        # 0x1ba0
  00097:    	cmp    esi,0xffffffff
  0009a:    	je     0x34918
  000a0:    	cmp    WORD PTR [rdi+0x2],0x3
  000a5:    	jne    0xbe
  000ab:    	cmp    esi,0x6
  000ae:    	jge    0xbe
  000b4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000b9:    	jmp    0xca
  000be: 78 	movabs rax,0x55788c73bb50
  000c8:    	call   rax
  000ca:    	mov    QWORD PTR [rbp-0x58],rax
:00005 %7 = %2.call y()                     [Vec]
:00006 
  000ce:    	mov    rdi,QWORD PTR [rbp-0x38]
  000d2: 00 	test   rdi,0x7
  000d9:    	jne    0x34941
  000df:    	cmp    DWORD PTR [rdi+0x4],0x25
  000e3:    	jne    0x34941
  000e9: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9db8],0x26        # 0xfffe9ea8
  000f0:    	jne    0x34941
  000f6:    	mov    esi,DWORD PTR [rip+0x1aac]        # 0x1ba8
  000fc:    	cmp    esi,0xffffffff
  000ff:    	je     0x34950
  00105:    	cmp    WORD PTR [rdi+0x2],0x3
  0010a:    	jne    0x123
  00110:    	cmp    esi,0x6
  00113:    	jge    0x123
  00119:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0011e:    	jmp    0x12f
  00123: 78 	movabs rax,0x55788c73bb50
  0012d:    	call   rax
  0012f:    	mov    QWORD PTR [rbp-0x60],rax
:00008 %8 = %2.call z()                     [Vec]
:00009 
  00133:    	mov    rdi,QWORD PTR [rbp-0x38]
  00137: 00 	test   rdi,0x7
  0013e:    	jne    0x34979
  00144:    	cmp    DWORD PTR [rdi+0x4],0x25
  00148:    	jne    0x34979
  0014e: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9d53],0x26        # 0xfffe9ea8
  00155:    	jne    0x34979
  0015b:    	mov    esi,DWORD PTR [rip+0x1a4f]        # 0x1bb0
  00161:    	cmp    esi,0xffffffff
  00164:    	je     0x34988
  0016a:    	cmp    WORD PTR [rdi+0x2],0x3
  0016f:    	jne    0x188
  00175:    	cmp    esi,0x6
  00178:    	jge    0x188
  0017e:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00183:    	jmp    0x194
  00188: 78 	movabs rax,0x55788c73bb50
  00192:    	call   rax
  00194:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00012 
  00198:    	mov    rdi,QWORD PTR [rbp-0x50]
  0019c: 00 	test   rdi,0x7
  001a3:    	jne    0x349b1
  001a9:    	cmp    DWORD PTR [rdi+0x4],0x26
  001ad:    	jne    0x349b1
  001b3: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9cee],0x26        # 0xfffe9ea8
  001ba:    	jne    0x349b1
  001c0: 00 	mov    r9,0x0
  001c7:    	mov    rdx,rdi
  001ca:    	mov    rax,QWORD PTR [rbx]
  001cd:    	lea    rdi,[rsp-0x18]
  001d2:    	mov    QWORD PTR [rdi],rax
  001d5:    	mov    QWORD PTR [rbx],rdi
  001d8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  001e1:    	mov    QWORD PTR [rsp-0x38],rcx
  001e6:    	lea    rcx,[rbp-0x58]
  001ea: 00 	mov    r8,0x3
  001f1:    	call   0x349c0
  001f6:    	lea    rdi,[rbp-0x8]
  001fa:    	mov    QWORD PTR [rbx],rdi
  001fd: 78 	movabs r13,0x55788df01350
  00207:    	test   rax,rax
  0020a:    	je     0xfffe74cf
  00210:    	mov    QWORD PTR [rbp-0x48],rax
:00014 %1.[%3] = %4
  00214:    	mov    rdx,QWORD PTR [rbp-0x30]
  00218:    	mov    rcx,QWORD PTR [rbp-0x40]
  0021c:    	mov    r8,QWORD PTR [rbp-0x48]
  00220:    	mov    rdi,rbx
  00223:    	mov    rsi,r12
  00226: 78 	movabs rax,0x55788c797cf0
  00230:    	call   rax
  00232: 78 	movabs r13,0x55788df01370
  0023c:    	test   rax,rax
  0023f:    	je     0xfffe74cf
:00015 %3 = 1: i32
  00245: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00016 %5 = const[Vec]                      [Vec]
  0024d: ff 	mov    rax,QWORD PTR [rip+0xfffffffffffe9c60]        # 0xfffe9eb4
  00254: 00 	cmp    rax,QWORD PTR [rip+0x1969]        # 0x1bc4
  0025b:    	jne    0x349f2
  00261: 00 	mov    rax,QWORD PTR [rip+0x194c]        # 0x1bb4
  00268:    	mov    QWORD PTR [rbp-0x50],rax
:00017 %6 = literal[0.0]
  0026c: 00 	movq   xmm2,QWORD PTR [rip+0x1960]        # 0x1bd4
:00018 %7 = literal[0.0]
  00274: 00 	movq   xmm3,QWORD PTR [rip+0x1968]        # 0x1be4
:00019 %8 = literal[0.0]
  0027c: 00 	movq   xmm4,QWORD PTR [rip+0x1970]        # 0x1bf4
:00020 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00021 
  00284:    	movq   xmm0,xmm2
  00288:    	call   0xfffe75fb
  0028d:    	mov    QWORD PTR [rbp-0x58],rax
  00291:    	movq   xmm0,xmm3
  00295:    	call   0xfffe75fb
  0029a:    	mov    QWORD PTR [rbp-0x60],rax
  0029e:    	movq   xmm0,xmm4
  002a2:    	call   0xfffe75fb
  002a7:    	mov    QWORD PTR [rbp-0x68],rax
  002ab:    	mov    rdi,QWORD PTR [rbp-0x50]
  002af: 00 	test   rdi,0x7
  002b6:    	jne    0x34a38
  002bc:    	cmp    DWORD PTR [rdi+0x4],0x26
  002c0:    	jne    0x34a38
  002c6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9bdb],0x26        # 0xfffe9ea8
  002cd:    	jne    0x34a38
  002d3: 00 	mov    r9,0x0
  002da:    	sub    rsp,0x20
  002de:    	movq   QWORD PTR [rsp],xmm2
  002e3:    	movq   QWORD PTR [rsp+0x8],xmm3
  002e9:    	movq   QWORD PTR [rsp+0x10],xmm4
  002ef:    	mov    rdx,rdi
  002f2:    	mov    rax,QWORD PTR [rbx]
  002f5:    	lea    rdi,[rsp-0x18]
  002fa:    	mov    QWORD PTR [rdi],rax
  002fd:    	mov    QWORD PTR [rbx],rdi
  00300: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00309:    	mov    QWORD PTR [rsp-0x38],rcx
  0030e:    	lea    rcx,[rbp-0x58]
  00312: 00 	mov    r8,0x3
  00319:    	call   0x34a47
  0031e:    	lea    rdi,[rbp-0x8]
  00322:    	mov    QWORD PTR [rbx],rdi
  00325:    	movq   xmm2,QWORD PTR [rsp]
  0032a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00330:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00336:    	add    rsp,0x20
  0033a: 78 	movabs r13,0x55788df013e0
  00344:    	test   rax,rax
  00347:    	je     0xfffe74cf
  0034d:    	mov    QWORD PTR [rbp-0x48],rax
:00023 %1.[%3] = %4
  00351:    	sub    rsp,0x20
  00355:    	movq   QWORD PTR [rsp],xmm2
  0035a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00360:    	movq   QWORD PTR [rsp+0x10],xmm4
  00366:    	mov    rdx,QWORD PTR [rbp-0x30]
  0036a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0036e:    	mov    r8,QWORD PTR [rbp-0x48]
  00372:    	mov    rdi,rbx
  00375:    	mov    rsi,r12
  00378: 78 	movabs rax,0x55788c797cf0
  00382:    	call   rax
  00384:    	movq   xmm2,QWORD PTR [rsp]
  00389:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0038f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00395:    	add    rsp,0x20
  00399: 78 	movabs r13,0x55788df01400
  003a3:    	test   rax,rax
  003a6:    	je     0xfffe74cf
:00024 %3 = %2.call x()                     [Vec]
:00025 
  003ac:    	mov    rdi,QWORD PTR [rbp-0x38]
  003b0: 00 	test   rdi,0x7
  003b7:    	jne    0x34a79
  003bd:    	cmp    DWORD PTR [rdi+0x4],0x25
  003c1:    	jne    0x34a79
  003c7: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9ada],0x26        # 0xfffe9ea8
  003ce:    	jne    0x34a79
  003d4:    	mov    esi,DWORD PTR [rip+0x1826]        # 0x1c00
  003da:    	cmp    esi,0xffffffff
  003dd:    	je     0x34a88
  003e3:    	cmp    WORD PTR [rdi+0x2],0x3
  003e8:    	jne    0x401
  003ee:    	cmp    esi,0x6
  003f1:    	jge    0x401
  003f7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003fc:    	jmp    0x437
  00401:    	sub    rsp,0x20
  00405:    	movq   QWORD PTR [rsp],xmm2
  0040a:    	movq   QWORD PTR [rsp+0x8],xmm3
  00410:    	movq   QWORD PTR [rsp+0x10],xmm4
  00416: 78 	movabs rax,0x55788c73bb50
  00420:    	call   rax
  00422:    	movq   xmm2,QWORD PTR [rsp]
  00427:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0042d:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00433:    	add    rsp,0x20
  00437:    	mov    QWORD PTR [rbp-0x40],rax
:00027 %4 = literal[0.6]
  0043b: 00 	movq   xmm5,QWORD PTR [rip+0x17c1]        # 0x1c04
:00028 _%3 = %3 < %4                        [Float][Float]
:00029 condnotbr _%3 =>:00043
  00443:    	mov    rdi,QWORD PTR [rbp-0x40]
  00447: 00 	test   rdi,0x1
  0044e:    	jne    0x34adb
  00454: 00 	test   rdi,0x2
  0045b:    	je     0x497
  00461:    	xorps  xmm6,xmm6
  00464: 00 	movabs rax,0x8000000000000002
  0046e:    	cmp    rdi,rax
  00471:    	je     0x4a9
  00477:    	mov    rax,rdi
  0047a:    	sar    rax,0x3f
  0047e:    	add    rax,0x2
  00482:    	and    rdi,0xfffffffffffffffc
  00486:    	or     rdi,rax
  00489:    	rol    rdi,0x3d
  0048d:    	movq   xmm6,rdi
  00492:    	jmp    0x4a9
  00497:    	call   0xfffe7508
  0049c:    	test   rax,rax
  0049f:    	je     0x34adb
  004a5:    	movq   xmm6,xmm0
  004a9:    	ucomisd xmm6,xmm5
  004ad:    	jae    0x34c03
:00030 %3 = %2.call x()                     [Vec]
:00031 
  004b3:    	mov    rdi,QWORD PTR [rbp-0x38]
  004b7: 00 	test   rdi,0x7
  004be:    	jne    0x34af7
  004c4:    	cmp    DWORD PTR [rdi+0x4],0x25
  004c8:    	jne    0x34af7
  004ce: 26 	cmp    DWORD PTR [rip+0xfffffffffffe99d3],0x26        # 0xfffe9ea8
  004d5:    	jne    0x34af7
  004db:    	mov    esi,DWORD PTR [rip+0x172f]        # 0x1c10
  004e1:    	cmp    esi,0xffffffff
  004e4:    	je     0x34b13
  004ea:    	cmp    WORD PTR [rdi+0x2],0x3
  004ef:    	jne    0x508
  004f5:    	cmp    esi,0x6
  004f8:    	jge    0x508
  004fe:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00503:    	jmp    0x54a
  00508:    	sub    rsp,0x20
  0050c:    	movq   QWORD PTR [rsp],xmm2
  00511:    	movq   QWORD PTR [rsp+0x8],xmm3
  00517:    	movq   QWORD PTR [rsp+0x10],xmm4
  0051d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00523: 78 	movabs rax,0x55788c73bb50
  0052d:    	call   rax
  0052f:    	movq   xmm2,QWORD PTR [rsp]
  00534:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0053a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00540:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00546:    	add    rsp,0x20
  0054a:    	mov    QWORD PTR [rbp-0x40],rax
:00033 %4 = literal[-0.6]
  0054e: 00 	movq   xmm5,QWORD PTR [rip+0x16be]        # 0x1c14
:00034 _%3 = %3 > %4                        [Float][Float]
:00035 condnotbr _%3 =>:00043
  00556:    	mov    rdi,QWORD PTR [rbp-0x40]
  0055a: 00 	test   rdi,0x1
  00561:    	jne    0x34b72
  00567: 00 	test   rdi,0x2
  0056e:    	je     0x5aa
  00574:    	xorps  xmm6,xmm6
  00577: 00 	movabs rax,0x8000000000000002
  00581:    	cmp    rdi,rax
  00584:    	je     0x5bc
  0058a:    	mov    rax,rdi
  0058d:    	sar    rax,0x3f
  00591:    	add    rax,0x2
  00595:    	and    rdi,0xfffffffffffffffc
  00599:    	or     rdi,rax
  0059c:    	rol    rdi,0x3d
  005a0:    	movq   xmm6,rdi
  005a5:    	jmp    0x5bc
  005aa:    	call   0xfffe7508
  005af:    	test   rax,rax
  005b2:    	je     0x34b72
  005b8:    	movq   xmm6,xmm0
  005bc:    	ucomisd xmm6,xmm5
  005c0:    	jbe    0x34c29
:00036 %3 = 1: i32
  005c6: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00037 %3 = %1.[%3]
  005ce:    	sub    rsp,0x20
  005d2:    	movq   QWORD PTR [rsp],xmm2
  005d7:    	movq   QWORD PTR [rsp+0x8],xmm3
  005dd:    	movq   QWORD PTR [rsp+0x10],xmm4
  005e3:    	movq   QWORD PTR [rsp+0x18],xmm5
  005e9:    	mov    rdx,QWORD PTR [rbp-0x30]
  005ed:    	mov    rcx,QWORD PTR [rbp-0x40]
  005f1:    	mov    rdi,rbx
  005f4:    	mov    rsi,r12
  005f7: 78 	movabs rax,0x55788c797be0
  00601:    	call   rax
  00603:    	movq   xmm2,QWORD PTR [rsp]
  00608:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0060e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00614:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0061a:    	add    rsp,0x20
  0061e: 78 	movabs r13,0x55788df014e0
  00628:    	test   rax,rax
  0062b:    	je     0xfffe74cf
  00631:    	mov    QWORD PTR [rbp-0x40],rax
:00038 %4 = literal[1.0]
  00635: 00 	movq   xmm5,QWORD PTR [rip+0x15e7]        # 0x1c24
:00039 _ = %3.call x=(%4; 1)                [Vec]
:00040 
  0063d:    	movq   xmm0,xmm5
  00641:    	call   0xfffe75fb
  00646:    	mov    QWORD PTR [rbp-0x48],rax
  0064a:    	mov    rdi,QWORD PTR [rbp-0x40]
  0064e: 00 	test   rdi,0x7
  00655:    	jne    0x34b8e
  0065b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0065f:    	jne    0x34b8e
  00665: 26 	cmp    DWORD PTR [rip+0xfffffffffffe983c],0x26        # 0xfffe9ea8
  0066c:    	jne    0x34b8e
  00672:    	mov    esi,DWORD PTR [rip+0x15b8]        # 0x1c30
  00678:    	cmp    esi,0xffffffff
  0067b:    	je     0x34b9d
  00681:    	cmp    WORD PTR [rdi+0x2],0x3
  00686:    	jne    0x6a3
  0068c:    	cmp    esi,0x6
  0068f:    	jge    0x6a3
  00695:    	mov    rax,QWORD PTR [rbp-0x48]
  00699:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0069e:    	jmp    0x6fc
  006a3:    	sub    rsp,0x20
  006a7:    	movq   QWORD PTR [rsp],xmm2
  006ac:    	movq   QWORD PTR [rsp+0x8],xmm3
  006b2:    	movq   QWORD PTR [rsp+0x10],xmm4
  006b8:    	movq   QWORD PTR [rsp+0x18],xmm5
  006be:    	mov    rdx,QWORD PTR [rbp-0x48]
  006c2: 78 	movabs rax,0x55788c73bdd0
  006cc:    	call   rax
  006ce:    	movq   xmm2,QWORD PTR [rsp]
  006d3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006d9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006df:    	movq   xmm5,QWORD PTR [rsp+0x18]
  006e5:    	add    rsp,0x20
  006e9: 78 	movabs r13,0x55788df01510
  006f3:    	test   rax,rax
  006f6:    	je     0xfffe74cf
:00042 br =>:00087
  006fc:    	jmp    0x35085
:00043 %3 = %2.call y()                     [Vec]
:00044 
  00701:    	mov    rdi,QWORD PTR [rbp-0x38]
  00705: 00 	test   rdi,0x7
  0070c:    	jne    0x34c4f
  00712:    	cmp    DWORD PTR [rdi+0x4],0x25
  00716:    	jne    0x34c4f
  0071c: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9785],0x26        # 0xfffe9ea8
  00723:    	jne    0x34c4f
  00729:    	mov    esi,DWORD PTR [rip+0x1509]        # 0x1c38
  0072f:    	cmp    esi,0xffffffff
  00732:    	je     0x34c6b
  00738:    	cmp    WORD PTR [rdi+0x2],0x3
  0073d:    	jne    0x756
  00743:    	cmp    esi,0x6
  00746:    	jge    0x756
  0074c:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00751:    	jmp    0x798
  00756:    	sub    rsp,0x20
  0075a:    	movq   QWORD PTR [rsp],xmm2
  0075f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00765:    	movq   QWORD PTR [rsp+0x10],xmm4
  0076b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00771: 78 	movabs rax,0x55788c73bb50
  0077b:    	call   rax
  0077d:    	movq   xmm2,QWORD PTR [rsp]
  00782:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00788:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0078e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00794:    	add    rsp,0x20
  00798:    	mov    QWORD PTR [rbp-0x40],rax
:00046 %4 = literal[0.6]
  0079c: 00 	movq   xmm5,QWORD PTR [rip+0x14a0]        # 0x1c44
:00047 _%3 = %3 < %4                        [Float][Float]
:00048 condnotbr _%3 =>:00062
  007a4:    	mov    rdi,QWORD PTR [rbp-0x40]
  007a8: 00 	test   rdi,0x1
  007af:    	jne    0x34cca
  007b5: 00 	test   rdi,0x2
  007bc:    	je     0x7f8
  007c2:    	xorps  xmm6,xmm6
  007c5: 00 	movabs rax,0x8000000000000002
  007cf:    	cmp    rdi,rax
  007d2:    	je     0x80a
  007d8:    	mov    rax,rdi
  007db:    	sar    rax,0x3f
  007df:    	add    rax,0x2
  007e3:    	and    rdi,0xfffffffffffffffc
  007e7:    	or     rdi,rax
  007ea:    	rol    rdi,0x3d
  007ee:    	movq   xmm6,rdi
  007f3:    	jmp    0x80a
  007f8:    	call   0xfffe7508
  007fd:    	test   rax,rax
  00800:    	je     0x34cca
  00806:    	movq   xmm6,xmm0
  0080a:    	ucomisd xmm6,xmm5
  0080e:    	jae    0x34df2
:00049 %3 = %2.call y()                     [Vec]
:00050 
  00814:    	mov    rdi,QWORD PTR [rbp-0x38]
  00818: 00 	test   rdi,0x7
  0081f:    	jne    0x34ce6
  00825:    	cmp    DWORD PTR [rdi+0x4],0x25
  00829:    	jne    0x34ce6
  0082f: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9672],0x26        # 0xfffe9ea8
  00836:    	jne    0x34ce6
  0083c:    	mov    esi,DWORD PTR [rip+0x140e]        # 0x1c50
  00842:    	cmp    esi,0xffffffff
  00845:    	je     0x34d02
  0084b:    	cmp    WORD PTR [rdi+0x2],0x3
  00850:    	jne    0x869
  00856:    	cmp    esi,0x6
  00859:    	jge    0x869
  0085f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00864:    	jmp    0x8ab
  00869:    	sub    rsp,0x20
  0086d:    	movq   QWORD PTR [rsp],xmm2
  00872:    	movq   QWORD PTR [rsp+0x8],xmm3
  00878:    	movq   QWORD PTR [rsp+0x10],xmm4
  0087e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00884: 78 	movabs rax,0x55788c73bb50
  0088e:    	call   rax
  00890:    	movq   xmm2,QWORD PTR [rsp]
  00895:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0089b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  008a1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  008a7:    	add    rsp,0x20
  008ab:    	mov    QWORD PTR [rbp-0x40],rax
:00052 %4 = literal[-0.6]
  008af: 00 	movq   xmm5,QWORD PTR [rip+0x139d]        # 0x1c54
:00053 _%3 = %3 > %4                        [Float][Float]
:00054 condnotbr _%3 =>:00062
  008b7:    	mov    rdi,QWORD PTR [rbp-0x40]
  008bb: 00 	test   rdi,0x1
  008c2:    	jne    0x34d61
  008c8: 00 	test   rdi,0x2
  008cf:    	je     0x90b
  008d5:    	xorps  xmm6,xmm6
  008d8: 00 	movabs rax,0x8000000000000002
  008e2:    	cmp    rdi,rax
  008e5:    	je     0x91d
  008eb:    	mov    rax,rdi
  008ee:    	sar    rax,0x3f
  008f2:    	add    rax,0x2
  008f6:    	and    rdi,0xfffffffffffffffc
  008fa:    	or     rdi,rax
  008fd:    	rol    rdi,0x3d
  00901:    	movq   xmm6,rdi
  00906:    	jmp    0x91d
  0090b:    	call   0xfffe7508
  00910:    	test   rax,rax
  00913:    	je     0x34d61
  00919:    	movq   xmm6,xmm0
  0091d:    	ucomisd xmm6,xmm5
  00921:    	jbe    0x34e18
:00055 %3 = 1: i32
  00927: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00056 %3 = %1.[%3]
  0092f:    	sub    rsp,0x20
  00933:    	movq   QWORD PTR [rsp],xmm2
  00938:    	movq   QWORD PTR [rsp+0x8],xmm3
  0093e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00944:    	movq   QWORD PTR [rsp+0x18],xmm5
  0094a:    	mov    rdx,QWORD PTR [rbp-0x30]
  0094e:    	mov    rcx,QWORD PTR [rbp-0x40]
  00952:    	mov    rdi,rbx
  00955:    	mov    rsi,r12
  00958: 78 	movabs rax,0x55788c797be0
  00962:    	call   rax
  00964:    	movq   xmm2,QWORD PTR [rsp]
  00969:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0096f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00975:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0097b:    	add    rsp,0x20
  0097f: 78 	movabs r13,0x55788df01610
  00989:    	test   rax,rax
  0098c:    	je     0xfffe74cf
  00992:    	mov    QWORD PTR [rbp-0x40],rax
:00057 %4 = literal[1.0]
  00996: 00 	movq   xmm5,QWORD PTR [rip+0x12c6]        # 0x1c64
:00058 _ = %3.call y=(%4; 1)                [Vec]
:00059 
  0099e:    	movq   xmm0,xmm5
  009a2:    	call   0xfffe75fb
  009a7:    	mov    QWORD PTR [rbp-0x48],rax
  009ab:    	mov    rdi,QWORD PTR [rbp-0x40]
  009af: 00 	test   rdi,0x7
  009b6:    	jne    0x34d7d
  009bc:    	cmp    DWORD PTR [rdi+0x4],0x25
  009c0:    	jne    0x34d7d
  009c6: 26 	cmp    DWORD PTR [rip+0xfffffffffffe94db],0x26        # 0xfffe9ea8
  009cd:    	jne    0x34d7d
  009d3:    	mov    esi,DWORD PTR [rip+0x1297]        # 0x1c70
  009d9:    	cmp    esi,0xffffffff
  009dc:    	je     0x34d8c
  009e2:    	cmp    WORD PTR [rdi+0x2],0x3
  009e7:    	jne    0xa04
  009ed:    	cmp    esi,0x6
  009f0:    	jge    0xa04
  009f6:    	mov    rax,QWORD PTR [rbp-0x48]
  009fa:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  009ff:    	jmp    0xa5d
  00a04:    	sub    rsp,0x20
  00a08:    	movq   QWORD PTR [rsp],xmm2
  00a0d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a13:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a19:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a1f:    	mov    rdx,QWORD PTR [rbp-0x48]
  00a23: 78 	movabs rax,0x55788c73bdd0
  00a2d:    	call   rax
  00a2f:    	movq   xmm2,QWORD PTR [rsp]
  00a34:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a3a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a40:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a46:    	add    rsp,0x20
  00a4a: 78 	movabs r13,0x55788df01640
  00a54:    	test   rax,rax
  00a57:    	je     0xfffe74cf
:00061 br =>:00087
  00a5d:    	jmp    0x3509e
:00062 %3 = %2.call z()                     [Vec]
:00063 
  00a62:    	mov    rdi,QWORD PTR [rbp-0x38]
  00a66: 00 	test   rdi,0x7
  00a6d:    	jne    0x34e3e
  00a73:    	cmp    DWORD PTR [rdi+0x4],0x25
  00a77:    	jne    0x34e3e
  00a7d: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9424],0x26        # 0xfffe9ea8
  00a84:    	jne    0x34e3e
  00a8a:    	mov    esi,DWORD PTR [rip+0x11e8]        # 0x1c78
  00a90:    	cmp    esi,0xffffffff
  00a93:    	je     0x34e5a
  00a99:    	cmp    WORD PTR [rdi+0x2],0x3
  00a9e:    	jne    0xab7
  00aa4:    	cmp    esi,0x6
  00aa7:    	jge    0xab7
  00aad:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00ab2:    	jmp    0xaf9
  00ab7:    	sub    rsp,0x20
  00abb:    	movq   QWORD PTR [rsp],xmm2
  00ac0:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ac6:    	movq   QWORD PTR [rsp+0x10],xmm4
  00acc:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ad2: 78 	movabs rax,0x55788c73bb50
  00adc:    	call   rax
  00ade:    	movq   xmm2,QWORD PTR [rsp]
  00ae3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ae9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00aef:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00af5:    	add    rsp,0x20
  00af9:    	mov    QWORD PTR [rbp-0x40],rax
:00065 %4 = literal[0.6]
  00afd: 00 	movq   xmm5,QWORD PTR [rip+0x117f]        # 0x1c84
:00066 _%3 = %3 < %4                        [Float][Float]
:00067 condnotbr _%3 =>:00081
  00b05:    	mov    rdi,QWORD PTR [rbp-0x40]
  00b09: 00 	test   rdi,0x1
  00b10:    	jne    0x34eb9
  00b16: 00 	test   rdi,0x2
  00b1d:    	je     0xb59
  00b23:    	xorps  xmm6,xmm6
  00b26: 00 	movabs rax,0x8000000000000002
  00b30:    	cmp    rdi,rax
  00b33:    	je     0xb6b
  00b39:    	mov    rax,rdi
  00b3c:    	sar    rax,0x3f
  00b40:    	add    rax,0x2
  00b44:    	and    rdi,0xfffffffffffffffc
  00b48:    	or     rdi,rax
  00b4b:    	rol    rdi,0x3d
  00b4f:    	movq   xmm6,rdi
  00b54:    	jmp    0xb6b
  00b59:    	call   0xfffe7508
  00b5e:    	test   rax,rax
  00b61:    	je     0x34eb9
  00b67:    	movq   xmm6,xmm0
  00b6b:    	ucomisd xmm6,xmm5
  00b6f:    	jae    0x34fe1
:00068 %3 = %2.call z()                     [Vec]
:00069 
  00b75:    	mov    rdi,QWORD PTR [rbp-0x38]
  00b79: 00 	test   rdi,0x7
  00b80:    	jne    0x34ed5
  00b86:    	cmp    DWORD PTR [rdi+0x4],0x25
  00b8a:    	jne    0x34ed5
  00b90: 26 	cmp    DWORD PTR [rip+0xfffffffffffe9311],0x26        # 0xfffe9ea8
  00b97:    	jne    0x34ed5
  00b9d:    	mov    esi,DWORD PTR [rip+0x10ed]        # 0x1c90
  00ba3:    	cmp    esi,0xffffffff
  00ba6:    	je     0x34ef1
  00bac:    	cmp    WORD PTR [rdi+0x2],0x3
  00bb1:    	jne    0xbca
  00bb7:    	cmp    esi,0x6
  00bba:    	jge    0xbca
  00bc0:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00bc5:    	jmp    0xc0c
  00bca:    	sub    rsp,0x20
  00bce:    	movq   QWORD PTR [rsp],xmm2
  00bd3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bd9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bdf:    	movq   QWORD PTR [rsp+0x18],xmm5
  00be5: 78 	movabs rax,0x55788c73bb50
  00bef:    	call   rax
  00bf1:    	movq   xmm2,QWORD PTR [rsp]
  00bf6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bfc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c02:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c08:    	add    rsp,0x20
  00c0c:    	mov    QWORD PTR [rbp-0x40],rax
:00071 %4 = literal[-0.6]
  00c10: 00 	movq   xmm5,QWORD PTR [rip+0x107c]        # 0x1c94
:00072 _%3 = %3 > %4                        [Float][Float]
:00073 condnotbr _%3 =>:00081
  00c18:    	mov    rdi,QWORD PTR [rbp-0x40]
  00c1c: 00 	test   rdi,0x1
  00c23:    	jne    0x34f50
  00c29: 00 	test   rdi,0x2
  00c30:    	je     0xc6c
  00c36:    	xorps  xmm6,xmm6
  00c39: 00 	movabs rax,0x8000000000000002
  00c43:    	cmp    rdi,rax
  00c46:    	je     0xc7e
  00c4c:    	mov    rax,rdi
  00c4f:    	sar    rax,0x3f
  00c53:    	add    rax,0x2
  00c57:    	and    rdi,0xfffffffffffffffc
  00c5b:    	or     rdi,rax
  00c5e:    	rol    rdi,0x3d
  00c62:    	movq   xmm6,rdi
  00c67:    	jmp    0xc7e
  00c6c:    	call   0xfffe7508
  00c71:    	test   rax,rax
  00c74:    	je     0x34f50
  00c7a:    	movq   xmm6,xmm0
  00c7e:    	ucomisd xmm6,xmm5
  00c82:    	jbe    0x35007
:00074 %3 = 1: i32
  00c88: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00075 %3 = %1.[%3]
  00c90:    	sub    rsp,0x20
  00c94:    	movq   QWORD PTR [rsp],xmm2
  00c99:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c9f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ca5:    	movq   QWORD PTR [rsp+0x18],xmm5
  00cab:    	mov    rdx,QWORD PTR [rbp-0x30]
  00caf:    	mov    rcx,QWORD PTR [rbp-0x40]
  00cb3:    	mov    rdi,rbx
  00cb6:    	mov    rsi,r12
  00cb9: 78 	movabs rax,0x55788c797be0
  00cc3:    	call   rax
  00cc5:    	movq   xmm2,QWORD PTR [rsp]
  00cca:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cd0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cd6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00cdc:    	add    rsp,0x20
  00ce0: 78 	movabs r13,0x55788df01740
  00cea:    	test   rax,rax
  00ced:    	je     0xfffe74cf
  00cf3:    	mov    QWORD PTR [rbp-0x40],rax
:00076 %4 = literal[1.0]
  00cf7: 00 	movq   xmm5,QWORD PTR [rip+0xfa5]        # 0x1ca4
:00077 _ = %3.call z=(%4; 1)                [Vec]
:00078 
  00cff:    	movq   xmm0,xmm5
  00d03:    	call   0xfffe75fb
  00d08:    	mov    QWORD PTR [rbp-0x48],rax
  00d0c:    	mov    rdi,QWORD PTR [rbp-0x40]
  00d10: 00 	test   rdi,0x7
  00d17:    	jne    0x34f6c
  00d1d:    	cmp    DWORD PTR [rdi+0x4],0x25
  00d21:    	jne    0x34f6c
  00d27: 26 	cmp    DWORD PTR [rip+0xfffffffffffe917a],0x26        # 0xfffe9ea8
  00d2e:    	jne    0x34f6c
  00d34:    	mov    esi,DWORD PTR [rip+0xf76]        # 0x1cb0
  00d3a:    	cmp    esi,0xffffffff
  00d3d:    	je     0x34f7b
  00d43:    	cmp    WORD PTR [rdi+0x2],0x3
  00d48:    	jne    0xd65
  00d4e:    	cmp    esi,0x6
  00d51:    	jge    0xd65
  00d57:    	mov    rax,QWORD PTR [rbp-0x48]
  00d5b:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00d60:    	jmp    0xdbe
  00d65:    	sub    rsp,0x20
  00d69:    	movq   QWORD PTR [rsp],xmm2
  00d6e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d74:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d7a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d80:    	mov    rdx,QWORD PTR [rbp-0x48]
  00d84: 78 	movabs rax,0x55788c73bdd0
  00d8e:    	call   rax
  00d90:    	movq   xmm2,QWORD PTR [rsp]
  00d95:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d9b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00da1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00da7:    	add    rsp,0x20
  00dab: 78 	movabs r13,0x55788df01770
  00db5:    	test   rax,rax
  00db8:    	je     0xfffe74cf
:00080 br =>:00087
  00dbe:    	jmp    0x350b7
:00081 %3 = 1: i32
  00dc3: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00082 %3 = %1.[%3]
  00dcb:    	sub    rsp,0x20
  00dcf:    	movq   QWORD PTR [rsp],xmm2
  00dd4:    	movq   QWORD PTR [rsp+0x8],xmm3
  00dda:    	movq   QWORD PTR [rsp+0x10],xmm4
  00de0:    	movq   QWORD PTR [rsp+0x18],xmm5
  00de6:    	mov    rdx,QWORD PTR [rbp-0x30]
  00dea:    	mov    rcx,QWORD PTR [rbp-0x40]
  00dee:    	mov    rdi,rbx
  00df1:    	mov    rsi,r12
  00df4: 78 	movabs rax,0x55788c797be0
  00dfe:    	call   rax
  00e00:    	movq   xmm2,QWORD PTR [rsp]
  00e05:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e0b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e11:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e17:    	add    rsp,0x20
  00e1b: 78 	movabs r13,0x55788df017b0
  00e25:    	test   rax,rax
  00e28:    	je     0xfffe74cf
  00e2e:    	mov    QWORD PTR [rbp-0x40],rax
:00083 %4 = literal[1.0]
  00e32: 00 	movq   xmm5,QWORD PTR [rip+0xe7a]        # 0x1cb4
:00084 _ = %3.call x=(%4; 1)                [<INVALID>]
:00085 
  00e3a: 00 	mov    rdi,0x4
  00e41: 01 	sub    DWORD PTR [rip+0xe74],0x1        # 0x1cbc
  00e48:    	jne    0x3502d
  00e4e:    	mov    rdi,r12
  00e51:    	mov    esi,DWORD PTR [rbp-0x18]
  00e54:    	mov    rdx,QWORD PTR [rbp-0x28]
  00e58: 78 	movabs rax,0x55788c79da60
  00e62:    	call   rax
  00e64: 00 	mov    rdi,0x4
  00e6b:    	jmp    0x3502d
:00087 %3 = 0: i32
  00e70: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  00e78: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  00e80:    	sub    rsp,0x20
  00e84:    	movq   QWORD PTR [rsp],xmm2
  00e89:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e8f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e95:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e9b:    	mov    rdx,QWORD PTR [rbp-0x30]
  00e9f:    	mov    rcx,QWORD PTR [rbp-0x50]
  00ea3:    	mov    rdi,rbx
  00ea6:    	mov    rsi,r12
  00ea9: 78 	movabs rax,0x55788c797be0
  00eb3:    	call   rax
  00eb5:    	movq   xmm2,QWORD PTR [rsp]
  00eba:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ec0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ec6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ecc:    	add    rsp,0x20
  00ed0: 78 	movabs r13,0x55788df01820
  00eda:    	test   rax,rax
  00edd:    	je     0xfffe74cf
  00ee3:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  00ee7: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  00eef:    	sub    rsp,0x20
  00ef3:    	movq   QWORD PTR [rsp],xmm3
  00ef8:    	movq   QWORD PTR [rsp+0x8],xmm4
  00efe:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f04:    	mov    rdx,QWORD PTR [rbp-0x30]
  00f08:    	mov    rcx,QWORD PTR [rbp-0x58]
  00f0c:    	mov    rdi,rbx
  00f0f:    	mov    rsi,r12
  00f12: 78 	movabs rax,0x55788c797be0
  00f1c:    	call   rax
  00f1e:    	movq   xmm3,QWORD PTR [rsp]
  00f23:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f29:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f2f:    	add    rsp,0x20
  00f33: 78 	movabs r13,0x55788df01840
  00f3d:    	test   rax,rax
  00f40:    	je     0xfffe74cf
  00f46:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  00f4a:    	mov    rdi,QWORD PTR [rbp-0x50]
  00f4e: 00 	test   rdi,0x7
  00f55:    	jne    0x35049
  00f5b:    	cmp    DWORD PTR [rdi+0x4],0x25
  00f5f:    	jne    0x35049
  00f65: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8f3c],0x26        # 0xfffe9ea8
  00f6c:    	jne    0x35049
  00f72:    	sub    rsp,0x10
  00f76:    	movq   QWORD PTR [rsp],xmm3
  00f7b:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f81:    	mov    rax,QWORD PTR [rbx]
  00f84:    	lea    rdi,[rsp-0x18]
  00f89:    	mov    QWORD PTR [rdi],rax
  00f8c:    	mov    QWORD PTR [rbx],rdi
  00f8f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f98:    	mov    QWORD PTR [rsp-0x38],rcx
  00f9d:    	mov    rax,QWORD PTR [rbp-0x50]
  00fa1:    	mov    QWORD PTR [rsp-0x38],rax
  00fa6: 00 	mov    rdi,0x1
  00fad:    	mov    rax,QWORD PTR [rbp-0x58]
  00fb1:    	mov    QWORD PTR [rsp-0x40],rax
  00fb6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00fbf: 09 	movabs rax,0x90000003a
  00fc9:    	mov    QWORD PTR [rsp-0x28],rax
  00fce: 78 	movabs r13,0x55788dee5eb0
  00fd8:    	call   0xffff0f78
  00fdd:    	lea    rdi,[rbp-0x8]
  00fe1:    	mov    QWORD PTR [rbx],rdi
  00fe4:    	movq   xmm3,QWORD PTR [rsp]
  00fe9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fef:    	add    rsp,0x10
  00ff3: 78 	movabs r13,0x55788df01860
  00ffd:    	test   rax,rax
  01000:    	je     0xfffe74cf
  01006:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  0100a:    	sub    rsp,0x10
  0100e:    	movq   QWORD PTR [rsp],xmm3
  01013:    	movq   QWORD PTR [rsp+0x8],xmm4
  01019:    	mov    rdx,QWORD PTR [rbp-0x30]
  0101d:    	mov    rcx,QWORD PTR [rbp-0x40]
  01021:    	mov    r8,QWORD PTR [rbp-0x48]
  01025:    	mov    rdi,rbx
  01028:    	mov    rsi,r12
  0102b: 78 	movabs rax,0x55788c797cf0
  01035:    	call   rax
  01037:    	movq   xmm3,QWORD PTR [rsp]
  0103c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01042:    	add    rsp,0x10
  01046: 78 	movabs r13,0x55788df01880
  01050:    	test   rax,rax
  01053:    	je     0xfffe74cf
:00096 %3 = 0: i32
  01059: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  01061: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  01069:    	sub    rsp,0x10
  0106d:    	movq   QWORD PTR [rsp],xmm3
  01072:    	movq   QWORD PTR [rsp+0x8],xmm4
  01078:    	mov    rdx,QWORD PTR [rbp-0x30]
  0107c:    	mov    rcx,QWORD PTR [rbp-0x50]
  01080:    	mov    rdi,rbx
  01083:    	mov    rsi,r12
  01086: 78 	movabs rax,0x55788c797be0
  01090:    	call   rax
  01092:    	movq   xmm3,QWORD PTR [rsp]
  01097:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0109d:    	add    rsp,0x10
  010a1: 78 	movabs r13,0x55788df018b0
  010ab:    	test   rax,rax
  010ae:    	je     0xfffe74cf
  010b4:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  010b8:    	mov    rdi,QWORD PTR [rbp-0x50]
  010bc: 00 	test   rdi,0x7
  010c3:    	jne    0x35058
  010c9:    	cmp    DWORD PTR [rdi+0x4],0x25
  010cd:    	jne    0x35058
  010d3: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8dce],0x26        # 0xfffe9ea8
  010da:    	jne    0x35058
  010e0:    	sub    rsp,0x10
  010e4:    	movq   QWORD PTR [rsp],xmm3
  010e9:    	movq   QWORD PTR [rsp+0x8],xmm4
  010ef:    	mov    rax,QWORD PTR [rbx]
  010f2:    	lea    rdi,[rsp-0x18]
  010f7:    	mov    QWORD PTR [rdi],rax
  010fa:    	mov    QWORD PTR [rbx],rdi
  010fd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01106:    	mov    QWORD PTR [rsp-0x38],rcx
  0110b:    	mov    rax,QWORD PTR [rbp-0x50]
  0110f:    	mov    QWORD PTR [rsp-0x38],rax
  01114: 00 	mov    rdi,0x0
  0111b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01124: 07 	movabs rax,0x100070000003d
  0112e:    	mov    QWORD PTR [rsp-0x28],rax
  01133: 78 	movabs r13,0x55788def86a0
  0113d:    	call   0xfffea76d
  01142:    	lea    rdi,[rbp-0x8]
  01146:    	mov    QWORD PTR [rbx],rdi
  01149:    	movq   xmm3,QWORD PTR [rsp]
  0114e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01154:    	add    rsp,0x10
  01158: 78 	movabs r13,0x55788df018d0
  01162:    	test   rax,rax
  01165:    	je     0xfffe74cf
  0116b:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  0116f:    	sub    rsp,0x10
  01173:    	movq   QWORD PTR [rsp],xmm3
  01178:    	movq   QWORD PTR [rsp+0x8],xmm4
  0117e:    	mov    rdx,QWORD PTR [rbp-0x30]
  01182:    	mov    rcx,QWORD PTR [rbp-0x40]
  01186:    	mov    r8,QWORD PTR [rbp-0x48]
  0118a:    	mov    rdi,rbx
  0118d:    	mov    rsi,r12
  01190: 78 	movabs rax,0x55788c797cf0
  0119a:    	call   rax
  0119c:    	movq   xmm3,QWORD PTR [rsp]
  011a1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011a7:    	add    rsp,0x10
  011ab: 78 	movabs r13,0x55788df018f0
  011b5:    	test   rax,rax
  011b8:    	je     0xfffe74cf
:00103 %3 = 1: i32
  011be: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  011c6: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  011ce:    	sub    rsp,0x10
  011d2:    	movq   QWORD PTR [rsp],xmm3
  011d7:    	movq   QWORD PTR [rsp+0x8],xmm4
  011dd:    	mov    rdx,QWORD PTR [rbp-0x30]
  011e1:    	mov    rcx,QWORD PTR [rbp-0x50]
  011e5:    	mov    rdi,rbx
  011e8:    	mov    rsi,r12
  011eb: 78 	movabs rax,0x55788c797be0
  011f5:    	call   rax
  011f7:    	movq   xmm3,QWORD PTR [rsp]
  011fc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01202:    	add    rsp,0x10
  01206: 78 	movabs r13,0x55788df01920
  01210:    	test   rax,rax
  01213:    	je     0xfffe74cf
  01219:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  0121d: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  01225:    	sub    rsp,0x10
  01229:    	movq   QWORD PTR [rsp],xmm3
  0122e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01234:    	mov    rdx,QWORD PTR [rbp-0x30]
  01238:    	mov    rcx,QWORD PTR [rbp-0x58]
  0123c:    	mov    rdi,rbx
  0123f:    	mov    rsi,r12
  01242: 78 	movabs rax,0x55788c797be0
  0124c:    	call   rax
  0124e:    	movq   xmm3,QWORD PTR [rsp]
  01253:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01259:    	add    rsp,0x10
  0125d: 78 	movabs r13,0x55788df01940
  01267:    	test   rax,rax
  0126a:    	je     0xfffe74cf
  01270:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  01274:    	mov    rdi,QWORD PTR [rbp-0x50]
  01278: 00 	test   rdi,0x7
  0127f:    	jne    0x35067
  01285:    	cmp    DWORD PTR [rdi+0x4],0x25
  01289:    	jne    0x35067
  0128f: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8c12],0x26        # 0xfffe9ea8
  01296:    	jne    0x35067
  0129c:    	sub    rsp,0x10
  012a0:    	movq   QWORD PTR [rsp],xmm3
  012a5:    	movq   QWORD PTR [rsp+0x8],xmm4
  012ab:    	mov    rax,QWORD PTR [rbx]
  012ae:    	lea    rdi,[rsp-0x18]
  012b3:    	mov    QWORD PTR [rdi],rax
  012b6:    	mov    QWORD PTR [rbx],rdi
  012b9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012c2:    	mov    QWORD PTR [rsp-0x38],rcx
  012c7:    	mov    rax,QWORD PTR [rbp-0x50]
  012cb:    	mov    QWORD PTR [rsp-0x38],rax
  012d0: 00 	mov    rdi,0x1
  012d7:    	mov    rax,QWORD PTR [rbp-0x58]
  012db:    	mov    QWORD PTR [rsp-0x40],rax
  012e0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012e9: 09 	movabs rax,0x90000003a
  012f3:    	mov    QWORD PTR [rsp-0x28],rax
  012f8: 78 	movabs r13,0x55788dee5eb0
  01302:    	call   0xffff0f78
  01307:    	lea    rdi,[rbp-0x8]
  0130b:    	mov    QWORD PTR [rbx],rdi
  0130e:    	movq   xmm3,QWORD PTR [rsp]
  01313:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01319:    	add    rsp,0x10
  0131d: 78 	movabs r13,0x55788df01960
  01327:    	test   rax,rax
  0132a:    	je     0xfffe74cf
  01330:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  01334:    	sub    rsp,0x10
  01338:    	movq   QWORD PTR [rsp],xmm3
  0133d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01343:    	mov    rdx,QWORD PTR [rbp-0x30]
  01347:    	mov    rcx,QWORD PTR [rbp-0x40]
  0134b:    	mov    r8,QWORD PTR [rbp-0x48]
  0134f:    	mov    rdi,rbx
  01352:    	mov    rsi,r12
  01355: 78 	movabs rax,0x55788c797cf0
  0135f:    	call   rax
  01361:    	movq   xmm3,QWORD PTR [rsp]
  01366:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0136c:    	add    rsp,0x10
  01370: 78 	movabs r13,0x55788df01980
  0137a:    	test   rax,rax
  0137d:    	je     0xfffe74cf
:00112 %3 = 1: i32
  01383: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  0138b: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  01393:    	sub    rsp,0x10
  01397:    	movq   QWORD PTR [rsp],xmm3
  0139c:    	movq   QWORD PTR [rsp+0x8],xmm4
  013a2:    	mov    rdx,QWORD PTR [rbp-0x30]
  013a6:    	mov    rcx,QWORD PTR [rbp-0x50]
  013aa:    	mov    rdi,rbx
  013ad:    	mov    rsi,r12
  013b0: 78 	movabs rax,0x55788c797be0
  013ba:    	call   rax
  013bc:    	movq   xmm3,QWORD PTR [rsp]
  013c1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013c7:    	add    rsp,0x10
  013cb: 78 	movabs r13,0x55788df019b0
  013d5:    	test   rax,rax
  013d8:    	je     0xfffe74cf
  013de:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  013e2:    	mov    rdi,QWORD PTR [rbp-0x50]
  013e6: 00 	test   rdi,0x7
  013ed:    	jne    0x35076
  013f3:    	cmp    DWORD PTR [rdi+0x4],0x25
  013f7:    	jne    0x35076
  013fd: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8aa4],0x26        # 0xfffe9ea8
  01404:    	jne    0x35076
  0140a:    	sub    rsp,0x10
  0140e:    	movq   QWORD PTR [rsp],xmm3
  01413:    	movq   QWORD PTR [rsp+0x8],xmm4
  01419:    	mov    rax,QWORD PTR [rbx]
  0141c:    	lea    rdi,[rsp-0x18]
  01421:    	mov    QWORD PTR [rdi],rax
  01424:    	mov    QWORD PTR [rbx],rdi
  01427: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01430:    	mov    QWORD PTR [rsp-0x38],rcx
  01435:    	mov    rax,QWORD PTR [rbp-0x50]
  01439:    	mov    QWORD PTR [rsp-0x38],rax
  0143e: 00 	mov    rdi,0x0
  01445: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0144e: 07 	movabs rax,0x100070000003d
  01458:    	mov    QWORD PTR [rsp-0x28],rax
  0145d: 78 	movabs r13,0x55788def86a0
  01467:    	call   0xfffea76d
  0146c:    	lea    rdi,[rbp-0x8]
  01470:    	mov    QWORD PTR [rbx],rdi
  01473:    	movq   xmm3,QWORD PTR [rsp]
  01478:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0147e:    	add    rsp,0x10
  01482: 78 	movabs r13,0x55788df019d0
  0148c:    	test   rax,rax
  0148f:    	je     0xfffe74cf
  01495:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  01499:    	sub    rsp,0x10
  0149d:    	movq   QWORD PTR [rsp],xmm3
  014a2:    	movq   QWORD PTR [rsp+0x8],xmm4
  014a8:    	mov    rdx,QWORD PTR [rbp-0x30]
  014ac:    	mov    rcx,QWORD PTR [rbp-0x40]
  014b0:    	mov    r8,QWORD PTR [rbp-0x48]
  014b4:    	mov    rdi,rbx
  014b7:    	mov    rsi,r12
  014ba: 78 	movabs rax,0x55788c797cf0
  014c4:    	call   rax
  014c6:    	movq   xmm3,QWORD PTR [rsp]
  014cb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014d1:    	add    rsp,0x10
  014d5: 78 	movabs r13,0x55788df019f0
  014df:    	test   rax,rax
  014e2:    	je     0xfffe74cf
:00119 %3 = %4
  014e8:    	mov    rax,QWORD PTR [rbp-0x48]
  014ec:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  014f0:    	mov    rax,QWORD PTR [rbp-0x40]
  014f4:    	leave  
  014f5:    	ret    
:00087 %3 = 0: i32
  014f6: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  014fe: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  01506:    	sub    rsp,0x20
  0150a:    	movq   QWORD PTR [rsp],xmm2
  0150f:    	movq   QWORD PTR [rsp+0x8],xmm3
  01515:    	movq   QWORD PTR [rsp+0x10],xmm4
  0151b:    	movq   QWORD PTR [rsp+0x18],xmm5
  01521:    	mov    rdx,QWORD PTR [rbp-0x30]
  01525:    	mov    rcx,QWORD PTR [rbp-0x50]
  01529:    	mov    rdi,rbx
  0152c:    	mov    rsi,r12
  0152f: 78 	movabs rax,0x55788c797be0
  01539:    	call   rax
  0153b:    	movq   xmm2,QWORD PTR [rsp]
  01540:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01546:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0154c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01552:    	add    rsp,0x20
  01556: 78 	movabs r13,0x55788df01820
  01560:    	test   rax,rax
  01563:    	je     0xfffe74cf
  01569:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  0156d: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  01575:    	sub    rsp,0x20
  01579:    	movq   QWORD PTR [rsp],xmm3
  0157e:    	movq   QWORD PTR [rsp+0x8],xmm4
  01584:    	movq   QWORD PTR [rsp+0x10],xmm5
  0158a:    	mov    rdx,QWORD PTR [rbp-0x30]
  0158e:    	mov    rcx,QWORD PTR [rbp-0x58]
  01592:    	mov    rdi,rbx
  01595:    	mov    rsi,r12
  01598: 78 	movabs rax,0x55788c797be0
  015a2:    	call   rax
  015a4:    	movq   xmm3,QWORD PTR [rsp]
  015a9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015af:    	movq   xmm5,QWORD PTR [rsp+0x10]
  015b5:    	add    rsp,0x20
  015b9: 78 	movabs r13,0x55788df01840
  015c3:    	test   rax,rax
  015c6:    	je     0xfffe74cf
  015cc:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  015d0:    	mov    rdi,QWORD PTR [rbp-0x50]
  015d4: 00 	test   rdi,0x7
  015db:    	jne    0x350d0
  015e1:    	cmp    DWORD PTR [rdi+0x4],0x25
  015e5:    	jne    0x350d0
  015eb: 26 	cmp    DWORD PTR [rip+0xfffffffffffe88b6],0x26        # 0xfffe9ea8
  015f2:    	jne    0x350d0
  015f8:    	sub    rsp,0x10
  015fc:    	movq   QWORD PTR [rsp],xmm3
  01601:    	movq   QWORD PTR [rsp+0x8],xmm4
  01607:    	mov    rax,QWORD PTR [rbx]
  0160a:    	lea    rdi,[rsp-0x18]
  0160f:    	mov    QWORD PTR [rdi],rax
  01612:    	mov    QWORD PTR [rbx],rdi
  01615: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0161e:    	mov    QWORD PTR [rsp-0x38],rcx
  01623:    	mov    rax,QWORD PTR [rbp-0x50]
  01627:    	mov    QWORD PTR [rsp-0x38],rax
  0162c: 00 	mov    rdi,0x1
  01633:    	mov    rax,QWORD PTR [rbp-0x58]
  01637:    	mov    QWORD PTR [rsp-0x40],rax
  0163c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01645: 09 	movabs rax,0x90000003a
  0164f:    	mov    QWORD PTR [rsp-0x28],rax
  01654: 78 	movabs r13,0x55788dee5eb0
  0165e:    	call   0xffff0f78
  01663:    	lea    rdi,[rbp-0x8]
  01667:    	mov    QWORD PTR [rbx],rdi
  0166a:    	movq   xmm3,QWORD PTR [rsp]
  0166f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01675:    	add    rsp,0x10
  01679: 78 	movabs r13,0x55788df01860
  01683:    	test   rax,rax
  01686:    	je     0xfffe74cf
  0168c:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  01690:    	sub    rsp,0x10
  01694:    	movq   QWORD PTR [rsp],xmm3
  01699:    	movq   QWORD PTR [rsp+0x8],xmm4
  0169f:    	mov    rdx,QWORD PTR [rbp-0x30]
  016a3:    	mov    rcx,QWORD PTR [rbp-0x40]
  016a7:    	mov    r8,QWORD PTR [rbp-0x48]
  016ab:    	mov    rdi,rbx
  016ae:    	mov    rsi,r12
  016b1: 78 	movabs rax,0x55788c797cf0
  016bb:    	call   rax
  016bd:    	movq   xmm3,QWORD PTR [rsp]
  016c2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016c8:    	add    rsp,0x10
  016cc: 78 	movabs r13,0x55788df01880
  016d6:    	test   rax,rax
  016d9:    	je     0xfffe74cf
:00096 %3 = 0: i32
  016df: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  016e7: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  016ef:    	sub    rsp,0x10
  016f3:    	movq   QWORD PTR [rsp],xmm3
  016f8:    	movq   QWORD PTR [rsp+0x8],xmm4
  016fe:    	mov    rdx,QWORD PTR [rbp-0x30]
  01702:    	mov    rcx,QWORD PTR [rbp-0x50]
  01706:    	mov    rdi,rbx
  01709:    	mov    rsi,r12
  0170c: 78 	movabs rax,0x55788c797be0
  01716:    	call   rax
  01718:    	movq   xmm3,QWORD PTR [rsp]
  0171d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01723:    	add    rsp,0x10
  01727: 78 	movabs r13,0x55788df018b0
  01731:    	test   rax,rax
  01734:    	je     0xfffe74cf
  0173a:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  0173e:    	mov    rdi,QWORD PTR [rbp-0x50]
  01742: 00 	test   rdi,0x7
  01749:    	jne    0x350df
  0174f:    	cmp    DWORD PTR [rdi+0x4],0x25
  01753:    	jne    0x350df
  01759: 26 	cmp    DWORD PTR [rip+0xfffffffffffe8748],0x26        # 0xfffe9ea8
  01760:    	jne    0x350df
  01766:    	sub    rsp,0x10
  0176a:    	movq   QWORD PTR [rsp],xmm3
  0176f:    	movq   QWORD PTR [rsp+0x8],xmm4
  01775:    	mov    rax,QWORD PTR [rbx]
  01778:    	lea    rdi,[rsp-0x18]
  0177d:    	mov    QWORD PTR [rdi],rax
  01780:    	mov    QWORD PTR [rbx],rdi
  01783: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0178c:    	mov    QWORD PTR [rsp-0x38],rcx
  01791:    	mov    rax,QWORD PTR [rbp-0x50]
  01795:    	mov    QWORD PTR [rsp-0x38],rax
  0179a: 00 	mov    rdi,0x0
  017a1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  017aa: 07 	movabs rax,0x100070000003d
  017b4:    	mov    QWORD PTR [rsp-0x28],rax
  017b9: 78 	movabs r13,0x55788def86a0
  017c3:    	call   0xfffea76d
  017c8:    	lea    rdi,[rbp-0x8]
  017cc:    	mov    QWORD PTR [rbx],rdi
  017cf:    	movq   xmm3,QWORD PTR [rsp]
  017d4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017da:    	add    rsp,0x10
  017de: 78 	movabs r13,0x55788df018d0
  017e8:    	test   rax,rax
  017eb:    	je     0xfffe74cf
  017f1:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  017f5:    	sub    rsp,0x10
  017f9:    	movq   QWORD PTR [rsp],xmm3
  017fe:    	movq   QWORD PTR [rsp+0x8],xmm4
  01804:    	mov    rdx,QWORD PTR [rbp-0x30]
  01808:    	mov    rcx,QWORD PTR [rbp-0x40]
  0180c:    	mov    r8,QWORD PTR [rbp-0x48]
  01810:    	mov    rdi,rbx
  01813:    	mov    rsi,r12
  01816: 78 	movabs rax,0x55788c797cf0
  01820:    	call   rax
  01822:    	movq   xmm3,QWORD PTR [rsp]
  01827:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0182d:    	add    rsp,0x10
  01831: 78 	movabs r13,0x55788df018f0
  0183b:    	test   rax,rax
  0183e:    	je     0xfffe74cf
:00103 %3 = 1: i32
  01844: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  0184c: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  01854:    	sub    rsp,0x10
  01858:    	movq   QWORD PTR [rsp],xmm3
  0185d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01863:    	mov    rdx,QWORD PTR [rbp-0x30]
  01867:    	mov    rcx,QWORD PTR [rbp-0x50]
  0186b:    	mov    rdi,rbx
  0186e:    	mov    rsi,r12
  01871: 78 	movabs rax,0x55788c797be0
  0187b:    	call   rax
  0187d:    	movq   xmm3,QWORD PTR [rsp]
  01882:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01888:    	add    rsp,0x10
  0188c: 78 	movabs r13,0x55788df01920
  01896:    	test   rax,rax
  01899:    	je     0xfffe74cf
  0189f:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  018a3: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  018ab:    	sub    rsp,0x10
  018af:    	movq   QWORD PTR [rsp],xmm3
  018b4:    	movq   QWORD PTR [rsp+0x8],xmm4
  018ba:    	mov    rdx,QWORD PTR [rbp-0x30]
  018be:    	mov    rcx,QWORD PTR [rbp-0x58]
  018c2:    	mov    rdi,rbx
  018c5:    	mov    rsi,r12
  018c8: 78 	movabs rax,0x55788c797be0
  018d2:    	call   rax
  018d4:    	movq   xmm3,QWORD PTR [rsp]
  018d9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018df:    	add    rsp,0x10
  018e3: 78 	movabs r13,0x55788df01940
  018ed:    	test   rax,rax
  018f0:    	je     0xfffe74cf
  018f6:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  018fa:    	mov    rdi,QWORD PTR [rbp-0x50]
  018fe: 00 	test   rdi,0x7
  01905:    	jne    0x350ee
  0190b:    	cmp    DWORD PTR [rdi+0x4],0x25
  0190f:    	jne    0x350ee
  01915: 26 	cmp    DWORD PTR [rip+0xfffffffffffe858c],0x26        # 0xfffe9ea8
  0191c:    	jne    0x350ee
  01922:    	sub    rsp,0x10
  01926:    	movq   QWORD PTR [rsp],xmm3
  0192b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01931:    	mov    rax,QWORD PTR [rbx]
  01934:    	lea    rdi,[rsp-0x18]
  01939:    	mov    QWORD PTR [rdi],rax
  0193c:    	mov    QWORD PTR [rbx],rdi
  0193f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01948:    	mov    QWORD PTR [rsp-0x38],rcx
  0194d:    	mov    rax,QWORD PTR [rbp-0x50]
  01951:    	mov    QWORD PTR [rsp-0x38],rax
  01956: 00 	mov    rdi,0x1
  0195d:    	mov    rax,QWORD PTR [rbp-0x58]
  01961:    	mov    QWORD PTR [rsp-0x40],rax
  01966: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0196f: 09 	movabs rax,0x90000003a
  01979:    	mov    QWORD PTR [rsp-0x28],rax
  0197e: 78 	movabs r13,0x55788dee5eb0
  01988:    	call   0xffff0f78
  0198d:    	lea    rdi,[rbp-0x8]
  01991:    	mov    QWORD PTR [rbx],rdi
  01994:    	movq   xmm3,QWORD PTR [rsp]
  01999:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0199f:    	add    rsp,0x10
  019a3: 78 	movabs r13,0x55788df01960
  019ad:    	test   rax,rax
  019b0:    	je     0xfffe74cf
  019b6:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  019ba:    	sub    rsp,0x10
  019be:    	movq   QWORD PTR [rsp],xmm3
  019c3:    	movq   QWORD PTR [rsp+0x8],xmm4
  019c9:    	mov    rdx,QWORD PTR [rbp-0x30]
  019cd:    	mov    rcx,QWORD PTR [rbp-0x40]
  019d1:    	mov    r8,QWORD PTR [rbp-0x48]
  019d5:    	mov    rdi,rbx
  019d8:    	mov    rsi,r12
  019db: 78 	movabs rax,0x55788c797cf0
  019e5:    	call   rax
  019e7:    	movq   xmm3,QWORD PTR [rsp]
  019ec:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019f2:    	add    rsp,0x10
  019f6: 78 	movabs r13,0x55788df01980
  01a00:    	test   rax,rax
  01a03:    	je     0xfffe74cf
:00112 %3 = 1: i32
  01a09: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  01a11: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  01a19:    	sub    rsp,0x10
  01a1d:    	movq   QWORD PTR [rsp],xmm3
  01a22:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a28:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a2c:    	mov    rcx,QWORD PTR [rbp-0x50]
  01a30:    	mov    rdi,rbx
  01a33:    	mov    rsi,r12
  01a36: 78 	movabs rax,0x55788c797be0
  01a40:    	call   rax
  01a42:    	movq   xmm3,QWORD PTR [rsp]
  01a47:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a4d:    	add    rsp,0x10
  01a51: 78 	movabs r13,0x55788df019b0
  01a5b:    	test   rax,rax
  01a5e:    	je     0xfffe74cf
  01a64:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  01a68:    	mov    rdi,QWORD PTR [rbp-0x50]
  01a6c: 00 	test   rdi,0x7
  01a73:    	jne    0x350fd
  01a79:    	cmp    DWORD PTR [rdi+0x4],0x25
  01a7d:    	jne    0x350fd
  01a83: 26 	cmp    DWORD PTR [rip+0xfffffffffffe841e],0x26        # 0xfffe9ea8
  01a8a:    	jne    0x350fd
  01a90:    	sub    rsp,0x10
  01a94:    	movq   QWORD PTR [rsp],xmm3
  01a99:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a9f:    	mov    rax,QWORD PTR [rbx]
  01aa2:    	lea    rdi,[rsp-0x18]
  01aa7:    	mov    QWORD PTR [rdi],rax
  01aaa:    	mov    QWORD PTR [rbx],rdi
  01aad: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01ab6:    	mov    QWORD PTR [rsp-0x38],rcx
  01abb:    	mov    rax,QWORD PTR [rbp-0x50]
  01abf:    	mov    QWORD PTR [rsp-0x38],rax
  01ac4: 00 	mov    rdi,0x0
  01acb: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01ad4: 07 	movabs rax,0x100070000003d
  01ade:    	mov    QWORD PTR [rsp-0x28],rax
  01ae3: 78 	movabs r13,0x55788def86a0
  01aed:    	call   0xfffea76d
  01af2:    	lea    rdi,[rbp-0x8]
  01af6:    	mov    QWORD PTR [rbx],rdi
  01af9:    	movq   xmm3,QWORD PTR [rsp]
  01afe:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b04:    	add    rsp,0x10
  01b08: 78 	movabs r13,0x55788df019d0
  01b12:    	test   rax,rax
  01b15:    	je     0xfffe74cf
  01b1b:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  01b1f:    	sub    rsp,0x10
  01b23:    	movq   QWORD PTR [rsp],xmm3
  01b28:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b2e:    	mov    rdx,QWORD PTR [rbp-0x30]
  01b32:    	mov    rcx,QWORD PTR [rbp-0x40]
  01b36:    	mov    r8,QWORD PTR [rbp-0x48]
  01b3a:    	mov    rdi,rbx
  01b3d:    	mov    rsi,r12
  01b40: 78 	movabs rax,0x55788c797cf0
  01b4a:    	call   rax
  01b4c:    	movq   xmm3,QWORD PTR [rsp]
  01b51:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01b57:    	add    rsp,0x10
  01b5b: 78 	movabs r13,0x55788df019f0
  01b65:    	test   rax,rax
  01b68:    	je     0xfffe74cf
:00119 %3 = %4
  01b6e:    	mov    rax,QWORD PTR [rbp-0x48]
  01b72:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  01b76:    	mov    rax,QWORD PTR [rbp-0x40]
  01b7a:    	leave  
  01b7b:    	ret    
