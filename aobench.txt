    Finished release [optimized] target(s) in 0.10s
     Running `target/release/monoruby benchmark/app_aobench.rb`
==> start whole compile: initialize FuncId(53) self_class:Vec start:[00000] bytecode:0x55d0b3207ea0
<== finished compile. elapsed:25.7µs
offset:Pos(12241) code: 144 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x48],0x4
  00010: mov    rdi,QWORD PTR [rbp-0x28]
  00014: test   rdi,0x7
  0001b: jne    0x3d59b
  00021: cmp    DWORD PTR [rdi+0x4],0x25
  00025: jne    0x3d59b
:00000 @x: Vec[IvarId(0)] = %1
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: xor    rax,rax
  00032: mov    ax,WORD PTR [rdi+0x2]
  00036: cmp    rax,0x3
  0003a: jne    0x3d5aa
  00040: mov    rax,QWORD PTR [rbp-0x30]
  00044: mov    QWORD PTR [rdi+0x10],rax
:00001 @y: Vec[IvarId(1)] = %2
  00048: mov    rdi,QWORD PTR [rbp-0x28]
  0004c: xor    rax,rax
  0004f: mov    ax,WORD PTR [rdi+0x2]
  00053: cmp    rax,0x3
  00057: jne    0x3d5c4
  0005d: mov    rax,QWORD PTR [rbp-0x38]
  00061: mov    QWORD PTR [rdi+0x18],rax
:00002 @z: Vec[IvarId(2)] = %3
  00065: mov    rdi,QWORD PTR [rbp-0x28]
  00069: xor    rax,rax
  0006c: mov    ax,WORD PTR [rdi+0x2]
  00070: cmp    rax,0x3
  00074: jne    0x3d5de
  0007a: mov    rax,QWORD PTR [rbp-0x40]
  0007e: mov    QWORD PTR [rdi+0x20],rax
:00003 %4 = %3
  00082: mov    rax,QWORD PTR [rbp-0x40]
  00086: mov    QWORD PTR [rbp-0x48],rax
:00004 ret %4
  0008a: mov    rax,QWORD PTR [rbp-0x48]
  0008e: leave  
  0008f: ret    
==> start whole compile: vdot FuncId(57) self_class:Vec start:[00000] bytecode:0x55d0b3216f80
<== finished compile. elapsed:46.3µs
offset:Pos(14191) code: 1177 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    QWORD PTR [rbp-0x50],rax
  0001f: mov    rdi,QWORD PTR [rbp-0x28]
  00023: test   rdi,0x7
  0002a: jne    0x3ce5a
  00030: cmp    DWORD PTR [rdi+0x4],0x25
  00034: jne    0x3ce5a
:00000 %2 = @x: Vec[IvarId(0)]
  0003a: mov    rdi,QWORD PTR [rbp-0x28]
  0003e: xor    rax,rax
  00041: mov    ax,WORD PTR [rdi+0x2]
  00045: cmp    rax,0x3
  00049: jne    0x3ce69
  0004f: mov    rax,QWORD PTR [rdi+0x10]
  00053: mov    QWORD PTR [rbp-0x38],rax
:00001 %4 = %1
  00057: mov    rax,QWORD PTR [rbp-0x30]
  0005b: mov    QWORD PTR [rbp-0x48],rax
:00002 %3 = %4.call x()                     [Vec]
:00003 
  0005f: mov    rdi,QWORD PTR [rbp-0x48]
  00063: test   rdi,0x7
  0006a: jne    0x3ce7f
  00070: cmp    DWORD PTR [rdi+0x4],0x25
  00074: jne    0x3ce7f
  0007a: cmp    DWORD PTR [rip+0xfffffffffffff22b],0x26        # 0xfffff2ac
  00081: jne    0x3ce7f
  00087: mov    esi,DWORD PTR [rip+0x410]        # 0x49d
  0008d: cmp    esi,0xffffffff
  00090: je     0x3ce8e
  00096: xor    rax,rax
  00099: mov    ax,WORD PTR [rdi+0x2]
  0009d: cmp    rax,0x3
  000a1: jne    0xba
  000a7: cmp    esi,0x6
  000aa: jge    0xba
  000b0: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000b5: jmp    0xc6
  000ba: movabs rax,0x55d0b27c8be0
  000c4: call   rax
  000c6: mov    QWORD PTR [rbp-0x40],rax
:00005 %2 = %2 * %3                         [Float][Float]
  000ca: mov    rdi,QWORD PTR [rbp-0x38]
  000ce: test   rdi,0x1
  000d5: jne    0x3ceb7
  000db: test   rdi,0x2
  000e2: je     0x11e
  000e8: xorps  xmm2,xmm2
  000eb: movabs rax,0x8000000000000002
  000f5: cmp    rdi,rax
  000f8: je     0x130
  000fe: mov    rax,rdi
  00101: sar    rax,0x3f
  00105: add    rax,0x2
  00109: and    rdi,0xfffffffffffffffc
  0010d: or     rdi,rax
  00110: rol    rdi,0x3d
  00114: movq   xmm2,rdi
  00119: jmp    0x130
  0011e: call   0xffffc905
  00123: test   rax,rax
  00126: je     0x3ceb7
  0012c: movq   xmm2,xmm0
  00130: mov    rdi,QWORD PTR [rbp-0x40]
  00134: test   rdi,0x1
  0013b: jne    0x3cec6
  00141: test   rdi,0x2
  00148: je     0x184
  0014e: xorps  xmm3,xmm3
  00151: movabs rax,0x8000000000000002
  0015b: cmp    rdi,rax
  0015e: je     0x196
  00164: mov    rax,rdi
  00167: sar    rax,0x3f
  0016b: add    rax,0x2
  0016f: and    rdi,0xfffffffffffffffc
  00173: or     rdi,rax
  00176: rol    rdi,0x3d
  0017a: movq   xmm3,rdi
  0017f: jmp    0x196
  00184: call   0xffffc905
  00189: test   rax,rax
  0018c: je     0x3cec6
  00192: movq   xmm3,xmm0
  00196: mulsd  xmm2,xmm3
:00006 %3 = @y: Vec[IvarId(1)]
  0019a: mov    rdi,QWORD PTR [rbp-0x28]
  0019e: xor    rax,rax
  001a1: mov    ax,WORD PTR [rdi+0x2]
  001a5: cmp    rax,0x3
  001a9: jne    0x3ced5
  001af: mov    rax,QWORD PTR [rdi+0x18]
  001b3: mov    QWORD PTR [rbp-0x40],rax
:00007 %5 = %1
  001b7: mov    rax,QWORD PTR [rbp-0x30]
  001bb: mov    QWORD PTR [rbp-0x50],rax
:00008 %4 = %5.call y()                     [Vec]
:00009 
  001bf: mov    rdi,QWORD PTR [rbp-0x50]
  001c3: test   rdi,0x7
  001ca: jne    0x3cefd
  001d0: cmp    DWORD PTR [rdi+0x4],0x25
  001d4: jne    0x3cefd
  001da: cmp    DWORD PTR [rip+0xfffffffffffff0cb],0x26        # 0xfffff2ac
  001e1: jne    0x3cefd
  001e7: mov    esi,DWORD PTR [rip+0x2b8]        # 0x4a5
  001ed: cmp    esi,0xffffffff
  001f0: je     0x3cf19
  001f6: xor    rax,rax
  001f9: mov    ax,WORD PTR [rdi+0x2]
  001fd: cmp    rax,0x3
  00201: jne    0x21a
  00207: cmp    esi,0x6
  0020a: jge    0x21a
  00210: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00215: jmp    0x238
  0021a: sub    rsp,0x10
  0021e: movq   QWORD PTR [rsp],xmm2
  00223: movabs rax,0x55d0b27c8be0
  0022d: call   rax
  0022f: movq   xmm2,QWORD PTR [rsp]
  00234: add    rsp,0x10
  00238: mov    QWORD PTR [rbp-0x48],rax
:00011 %3 = %3 * %4                         [Float][Float]
  0023c: mov    rdi,QWORD PTR [rbp-0x40]
  00240: test   rdi,0x1
  00247: jne    0x3cf54
  0024d: test   rdi,0x2
  00254: je     0x290
  0025a: xorps  xmm3,xmm3
  0025d: movabs rax,0x8000000000000002
  00267: cmp    rdi,rax
  0026a: je     0x2a2
  00270: mov    rax,rdi
  00273: sar    rax,0x3f
  00277: add    rax,0x2
  0027b: and    rdi,0xfffffffffffffffc
  0027f: or     rdi,rax
  00282: rol    rdi,0x3d
  00286: movq   xmm3,rdi
  0028b: jmp    0x2a2
  00290: call   0xffffc905
  00295: test   rax,rax
  00298: je     0x3cf54
  0029e: movq   xmm3,xmm0
  002a2: mov    rdi,QWORD PTR [rbp-0x48]
  002a6: test   rdi,0x1
  002ad: jne    0x3cf70
  002b3: test   rdi,0x2
  002ba: je     0x2f6
  002c0: xorps  xmm4,xmm4
  002c3: movabs rax,0x8000000000000002
  002cd: cmp    rdi,rax
  002d0: je     0x308
  002d6: mov    rax,rdi
  002d9: sar    rax,0x3f
  002dd: add    rax,0x2
  002e1: and    rdi,0xfffffffffffffffc
  002e5: or     rdi,rax
  002e8: rol    rdi,0x3d
  002ec: movq   xmm4,rdi
  002f1: jmp    0x308
  002f6: call   0xffffc905
  002fb: test   rax,rax
  002fe: je     0x3cf70
  00304: movq   xmm4,xmm0
  00308: mulsd  xmm3,xmm4
:00012 %2 = %2 + %3                         [Float][Float]
  0030c: addsd  xmm2,xmm3
:00013 %3 = @z: Vec[IvarId(2)]
  00310: mov    rdi,QWORD PTR [rbp-0x28]
  00314: xor    rax,rax
  00317: mov    ax,WORD PTR [rdi+0x2]
  0031b: cmp    rax,0x3
  0031f: jne    0x3cf8c
  00325: mov    rax,QWORD PTR [rdi+0x20]
  00329: mov    QWORD PTR [rbp-0x40],rax
:00014 %5 = %1
  0032d: mov    rax,QWORD PTR [rbp-0x30]
  00331: mov    QWORD PTR [rbp-0x50],rax
:00015 %4 = %5.call z()                     [Vec]
:00016 
  00335: mov    rdi,QWORD PTR [rbp-0x50]
  00339: test   rdi,0x7
  00340: jne    0x3cfc0
  00346: cmp    DWORD PTR [rdi+0x4],0x25
  0034a: jne    0x3cfc0
  00350: cmp    DWORD PTR [rip+0xffffffffffffef55],0x26        # 0xfffff2ac
  00357: jne    0x3cfc0
  0035d: mov    esi,DWORD PTR [rip+0x14a]        # 0x4ad
  00363: cmp    esi,0xffffffff
  00366: je     0x3cfdc
  0036c: xor    rax,rax
  0036f: mov    ax,WORD PTR [rdi+0x2]
  00373: cmp    rax,0x3
  00377: jne    0x390
  0037d: cmp    esi,0x6
  00380: jge    0x390
  00386: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0038b: jmp    0x3ae
  00390: sub    rsp,0x10
  00394: movq   QWORD PTR [rsp],xmm2
  00399: movabs rax,0x55d0b27c8be0
  003a3: call   rax
  003a5: movq   xmm2,QWORD PTR [rsp]
  003aa: add    rsp,0x10
  003ae: mov    QWORD PTR [rbp-0x48],rax
:00018 %3 = %3 * %4                         [Float][Float]
  003b2: mov    rdi,QWORD PTR [rbp-0x40]
  003b6: test   rdi,0x1
  003bd: jne    0x3d017
  003c3: test   rdi,0x2
  003ca: je     0x406
  003d0: xorps  xmm3,xmm3
  003d3: movabs rax,0x8000000000000002
  003dd: cmp    rdi,rax
  003e0: je     0x418
  003e6: mov    rax,rdi
  003e9: sar    rax,0x3f
  003ed: add    rax,0x2
  003f1: and    rdi,0xfffffffffffffffc
  003f5: or     rdi,rax
  003f8: rol    rdi,0x3d
  003fc: movq   xmm3,rdi
  00401: jmp    0x418
  00406: call   0xffffc905
  0040b: test   rax,rax
  0040e: je     0x3d017
  00414: movq   xmm3,xmm0
  00418: mov    rdi,QWORD PTR [rbp-0x48]
  0041c: test   rdi,0x1
  00423: jne    0x3d033
  00429: test   rdi,0x2
  00430: je     0x46c
  00436: xorps  xmm4,xmm4
  00439: movabs rax,0x8000000000000002
  00443: cmp    rdi,rax
  00446: je     0x47e
  0044c: mov    rax,rdi
  0044f: sar    rax,0x3f
  00453: add    rax,0x2
  00457: and    rdi,0xfffffffffffffffc
  0045b: or     rdi,rax
  0045e: rol    rdi,0x3d
  00462: movq   xmm4,rdi
  00467: jmp    0x47e
  0046c: call   0xffffc905
  00471: test   rax,rax
  00474: je     0x3d033
  0047a: movq   xmm4,xmm0
  0047e: mulsd  xmm3,xmm4
:00019 %2 = %2 + %3                         [Float][Float]
  00482: addsd  xmm2,xmm3
:00020 ret %2
  00486: movq   xmm0,xmm2
  0048a: call   0xffffc9f8
  0048f: mov    QWORD PTR [rbp-0x38],rax
  00493: mov    rax,QWORD PTR [rbp-0x38]
  00497: leave  
  00498: ret    
==> start whole compile: intersect FuncId(61) self_class:Sphere start:[00000] bytecode:0x55d0b3224220
<== finished compile. elapsed:318.8µs
offset:Pos(15538) code: 7001 bytes  data: 269 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xb0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x40],rax
  00016:    	mov    QWORD PTR [rbp-0x48],rax
  0001a:    	mov    QWORD PTR [rbp-0x50],rax
  0001e:    	mov    QWORD PTR [rbp-0x58],rax
  00022:    	mov    QWORD PTR [rbp-0x60],rax
  00026:    	mov    QWORD PTR [rbp-0x68],rax
  0002a:    	mov    QWORD PTR [rbp-0x70],rax
  0002e:    	mov    QWORD PTR [rbp-0x78],rax
  00032:    	mov    QWORD PTR [rbp-0x80],rax
  00036: ff 	mov    QWORD PTR [rbp-0x88],rax
  0003d: ff 	mov    QWORD PTR [rbp-0x90],rax
  00044: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004b: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00052: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00059:    	mov    rdi,QWORD PTR [rbp-0x28]
  0005d: 00 	test   rdi,0x7
  00064:    	jne    0x3cb0c
  0006a:    	cmp    DWORD PTR [rdi+0x4],0x27
  0006e:    	jne    0x3cb0c
:00000 %10 = %1
  00074:    	mov    rax,QWORD PTR [rbp-0x30]
  00078:    	mov    QWORD PTR [rbp-0x78],rax
:00001 %9 = %10.call org()                  [Ray]
:00002 
  0007c:    	mov    rdi,QWORD PTR [rbp-0x78]
  00080: 00 	test   rdi,0x7
  00087:    	jne    0x3cb1b
  0008d:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00091:    	jne    0x3cb1b
  00097: 26 	cmp    DWORD PTR [rip+0xffffffffffffeccb],0x26        # 0xffffed69
  0009e:    	jne    0x3cb1b
  000a4:    	mov    esi,DWORD PTR [rip+0x1ab3]        # 0x1b5d
  000aa:    	cmp    esi,0xffffffff
  000ad:    	je     0x3cb2a
  000b3:    	xor    rax,rax
  000b6:    	mov    ax,WORD PTR [rdi+0x2]
  000ba:    	cmp    rax,0x3
  000be:    	jne    0xd7
  000c4:    	cmp    esi,0x6
  000c7:    	jge    0xd7
  000cd:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000d2:    	jmp    0xe3
  000d7: d0 	movabs rax,0x55d0b27c8be0
  000e1:    	call   rax
  000e3:    	mov    QWORD PTR [rbp-0x70],rax
:00004 %10 = @center: Sphere[IvarId(0)]
  000e7:    	mov    rdi,QWORD PTR [rbp-0x28]
  000eb:    	xor    rax,rax
  000ee:    	mov    ax,WORD PTR [rdi+0x2]
  000f2:    	cmp    rax,0x3
  000f6:    	jne    0x3cb53
  000fc:    	mov    rax,QWORD PTR [rdi+0x10]
  00100:    	mov    QWORD PTR [rbp-0x78],rax
:00005 %3 = %9.call vsub(%10; 1)            [Vec]
:00006 
  00104:    	mov    rdi,QWORD PTR [rbp-0x70]
  00108: 00 	test   rdi,0x7
  0010f:    	jne    0x3cb69
  00115:    	cmp    DWORD PTR [rdi+0x4],0x25
  00119:    	jne    0x3cb69
  0011f: 26 	cmp    DWORD PTR [rip+0xffffffffffffec43],0x26        # 0xffffed69
  00126:    	jne    0x3cb69
  0012c:    	mov    rax,QWORD PTR [rbx]
  0012f:    	lea    rdi,[rsp-0x18]
  00134:    	mov    QWORD PTR [rdi],rax
  00137:    	mov    QWORD PTR [rbx],rdi
  0013a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00143:    	mov    QWORD PTR [rsp-0x38],rcx
  00148:    	mov    rax,QWORD PTR [rbp-0x70]
  0014c:    	mov    QWORD PTR [rsp-0x38],rax
  00151: 00 	mov    rdi,0x1
  00158:    	mov    rax,QWORD PTR [rbp-0x78]
  0015c:    	mov    QWORD PTR [rsp-0x40],rax
  00161: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0016a: 09 	movabs rax,0x900000037
  00174:    	mov    QWORD PTR [rsp-0x28],rax
  00179: d0 	movabs r13,0x55d0b3206e60
  00183:    	call   0xfffff9d3
  00188:    	mov    rdi,QWORD PTR [rsp-0x18]
  0018d:    	mov    QWORD PTR [rbx],rdi
  00190: d0 	movabs r13,0x55d0b3224290
  0019a:    	test   rax,rax
  0019d:    	je     0xffffc389
  001a3:    	mov    QWORD PTR [rbp-0x40],rax
:00008 %9 = %3
  001a7:    	mov    rax,QWORD PTR [rbp-0x40]
  001ab:    	mov    QWORD PTR [rbp-0x70],rax
:00009 %11 = %1
  001af:    	mov    rax,QWORD PTR [rbp-0x30]
  001b3:    	mov    QWORD PTR [rbp-0x80],rax
:00010 %10 = %11.call dir()                 [Ray]
:00011 
  001b7:    	mov    rdi,QWORD PTR [rbp-0x80]
  001bb: 00 	test   rdi,0x7
  001c2:    	jne    0x3cb78
  001c8:    	cmp    DWORD PTR [rdi+0x4],0x2b
  001cc:    	jne    0x3cb78
  001d2: 26 	cmp    DWORD PTR [rip+0xffffffffffffeb90],0x26        # 0xffffed69
  001d9:    	jne    0x3cb78
  001df:    	mov    esi,DWORD PTR [rip+0x1980]        # 0x1b65
  001e5:    	cmp    esi,0xffffffff
  001e8:    	je     0x3cb87
  001ee:    	xor    rax,rax
  001f1:    	mov    ax,WORD PTR [rdi+0x2]
  001f5:    	cmp    rax,0x3
  001f9:    	jne    0x212
  001ff:    	cmp    esi,0x6
  00202:    	jge    0x212
  00208:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0020d:    	jmp    0x21e
  00212: d0 	movabs rax,0x55d0b27c8be0
  0021c:    	call   rax
  0021e:    	mov    QWORD PTR [rbp-0x78],rax
:00013 %4 = %9.call vdot(%10; 1)            [Vec]
:00014 
  00222:    	mov    rdi,QWORD PTR [rbp-0x70]
  00226: 00 	test   rdi,0x7
  0022d:    	jne    0x3cbb0
  00233:    	cmp    DWORD PTR [rdi+0x4],0x25
  00237:    	jne    0x3cbb0
  0023d: 26 	cmp    DWORD PTR [rip+0xffffffffffffeb25],0x26        # 0xffffed69
  00244:    	jne    0x3cbb0
  0024a:    	mov    rax,QWORD PTR [rbx]
  0024d:    	lea    rdi,[rsp-0x18]
  00252:    	mov    QWORD PTR [rdi],rax
  00255:    	mov    QWORD PTR [rbx],rdi
  00258: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00261:    	mov    QWORD PTR [rsp-0x38],rcx
  00266:    	mov    rax,QWORD PTR [rbp-0x70]
  0026a:    	mov    QWORD PTR [rsp-0x38],rax
  0026f: 00 	mov    rdi,0x1
  00276:    	mov    rax,QWORD PTR [rbp-0x78]
  0027a:    	mov    QWORD PTR [rsp-0x40],rax
  0027f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00288: 06 	movabs rax,0x600000039
  00292:    	mov    QWORD PTR [rsp-0x28],rax
  00297: d0 	movabs r13,0x55d0b3216f80
  002a1:    	call   0xfffffa65
  002a6:    	mov    rdi,QWORD PTR [rsp-0x18]
  002ab:    	mov    QWORD PTR [rbx],rdi
  002ae: d0 	movabs r13,0x55d0b3224310
  002b8:    	test   rax,rax
  002bb:    	je     0xffffc389
  002c1:    	mov    QWORD PTR [rbp-0x48],rax
:00016 %10 = %3
  002c5:    	mov    rax,QWORD PTR [rbp-0x40]
  002c9:    	mov    QWORD PTR [rbp-0x78],rax
:00017 %11 = %3
  002cd:    	mov    rax,QWORD PTR [rbp-0x40]
  002d1:    	mov    QWORD PTR [rbp-0x80],rax
:00018 %9 = %10.call vdot(%11; 1)           [Vec]
:00019 
  002d5:    	mov    rdi,QWORD PTR [rbp-0x78]
  002d9: 00 	test   rdi,0x7
  002e0:    	jne    0x3cbbf
  002e6:    	cmp    DWORD PTR [rdi+0x4],0x25
  002ea:    	jne    0x3cbbf
  002f0: 26 	cmp    DWORD PTR [rip+0xffffffffffffea72],0x26        # 0xffffed69
  002f7:    	jne    0x3cbbf
  002fd:    	mov    rax,QWORD PTR [rbx]
  00300:    	lea    rdi,[rsp-0x18]
  00305:    	mov    QWORD PTR [rdi],rax
  00308:    	mov    QWORD PTR [rbx],rdi
  0030b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00314:    	mov    QWORD PTR [rsp-0x38],rcx
  00319:    	mov    rax,QWORD PTR [rbp-0x78]
  0031d:    	mov    QWORD PTR [rsp-0x38],rax
  00322: 00 	mov    rdi,0x1
  00329:    	mov    rax,QWORD PTR [rbp-0x80]
  0032d:    	mov    QWORD PTR [rsp-0x40],rax
  00332: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0033b: 06 	movabs rax,0x600000039
  00345:    	mov    QWORD PTR [rsp-0x28],rax
  0034a: d0 	movabs r13,0x55d0b3216f80
  00354:    	call   0xfffffa65
  00359:    	mov    rdi,QWORD PTR [rsp-0x18]
  0035e:    	mov    QWORD PTR [rbx],rdi
  00361: d0 	movabs r13,0x55d0b3224360
  0036b:    	test   rax,rax
  0036e:    	je     0xffffc389
  00374:    	mov    QWORD PTR [rbp-0x70],rax
:00021 %10 = @radius: Sphere[IvarId(1)]
  00378:    	mov    rdi,QWORD PTR [rbp-0x28]
  0037c:    	xor    rax,rax
  0037f:    	mov    ax,WORD PTR [rdi+0x2]
  00383:    	cmp    rax,0x3
  00387:    	jne    0x3cbce
  0038d:    	mov    rax,QWORD PTR [rdi+0x18]
  00391:    	mov    QWORD PTR [rbp-0x78],rax
:00022 %11 = @radius: Sphere[IvarId(1)]
  00395:    	mov    rdi,QWORD PTR [rbp-0x28]
  00399:    	xor    rax,rax
  0039c:    	mov    ax,WORD PTR [rdi+0x2]
  003a0:    	cmp    rax,0x3
  003a4:    	jne    0x3cbe4
  003aa:    	mov    rax,QWORD PTR [rdi+0x18]
  003ae:    	mov    QWORD PTR [rbp-0x80],rax
:00023 %10 = %10 * %11                      [Float][Float]
  003b2:    	mov    rdi,QWORD PTR [rbp-0x78]
  003b6: 00 	test   rdi,0x1
  003bd:    	jne    0x3cbfa
  003c3: 00 	test   rdi,0x2
  003ca:    	je     0x406
  003d0:    	xorps  xmm2,xmm2
  003d3: 00 	movabs rax,0x8000000000000002
  003dd:    	cmp    rdi,rax
  003e0:    	je     0x418
  003e6:    	mov    rax,rdi
  003e9:    	sar    rax,0x3f
  003ed:    	add    rax,0x2
  003f1:    	and    rdi,0xfffffffffffffffc
  003f5:    	or     rdi,rax
  003f8:    	rol    rdi,0x3d
  003fc:    	movq   xmm2,rdi
  00401:    	jmp    0x418
  00406:    	call   0xffffc3c2
  0040b:    	test   rax,rax
  0040e:    	je     0x3cbfa
  00414:    	movq   xmm2,xmm0
  00418:    	mov    rdi,QWORD PTR [rbp-0x80]
  0041c: 00 	test   rdi,0x1
  00423:    	jne    0x3cc09
  00429: 00 	test   rdi,0x2
  00430:    	je     0x46c
  00436:    	xorps  xmm3,xmm3
  00439: 00 	movabs rax,0x8000000000000002
  00443:    	cmp    rdi,rax
  00446:    	je     0x47e
  0044c:    	mov    rax,rdi
  0044f:    	sar    rax,0x3f
  00453:    	add    rax,0x2
  00457:    	and    rdi,0xfffffffffffffffc
  0045b:    	or     rdi,rax
  0045e:    	rol    rdi,0x3d
  00462:    	movq   xmm3,rdi
  00467:    	jmp    0x47e
  0046c:    	call   0xffffc3c2
  00471:    	test   rax,rax
  00474:    	je     0x3cc09
  0047a:    	movq   xmm3,xmm0
  0047e:    	mulsd  xmm2,xmm3
:00024 %5 = %9 - %10                        [Float][Float]
  00482:    	mov    rdi,QWORD PTR [rbp-0x70]
  00486: 00 	test   rdi,0x1
  0048d:    	jne    0x3cc18
  00493: 00 	test   rdi,0x2
  0049a:    	je     0x4d6
  004a0:    	xorps  xmm4,xmm4
  004a3: 00 	movabs rax,0x8000000000000002
  004ad:    	cmp    rdi,rax
  004b0:    	je     0x4e8
  004b6:    	mov    rax,rdi
  004b9:    	sar    rax,0x3f
  004bd:    	add    rax,0x2
  004c1:    	and    rdi,0xfffffffffffffffc
  004c5:    	or     rdi,rax
  004c8:    	rol    rdi,0x3d
  004cc:    	movq   xmm4,rdi
  004d1:    	jmp    0x4e8
  004d6:    	call   0xffffc3c2
  004db:    	test   rax,rax
  004de:    	je     0x3cc18
  004e4:    	movq   xmm4,xmm0
  004e8:    	movq   xmm5,xmm4
  004ec:    	subsd  xmm5,xmm2
:00025 %9 = %4 * %4                         [Float][Float]
  004f0:    	mov    rdi,QWORD PTR [rbp-0x48]
  004f4: 00 	test   rdi,0x1
  004fb:    	jne    0x3cc34
  00501: 00 	test   rdi,0x2
  00508:    	je     0x544
  0050e:    	xorps  xmm6,xmm6
  00511: 00 	movabs rax,0x8000000000000002
  0051b:    	cmp    rdi,rax
  0051e:    	je     0x556
  00524:    	mov    rax,rdi
  00527:    	sar    rax,0x3f
  0052b:    	add    rax,0x2
  0052f:    	and    rdi,0xfffffffffffffffc
  00533:    	or     rdi,rax
  00536:    	rol    rdi,0x3d
  0053a:    	movq   xmm6,rdi
  0053f:    	jmp    0x556
  00544:    	call   0xffffc3c2
  00549:    	test   rax,rax
  0054c:    	je     0x3cc34
  00552:    	movq   xmm6,xmm0
  00556:    	movq   xmm4,xmm6
  0055a:    	mulsd  xmm4,xmm6
:00026 %6 = %9 - %5                         [Float][Float]
  0055e:    	movq   xmm7,xmm4
  00562:    	subsd  xmm7,xmm5
:00027 %9 = literal[0.0]
  00566: 00 	movq   xmm4,QWORD PTR [rip+0x1600]        # 0x1b6e
:00028 _%9 = %6 > %9                        [Float][Float]
:00029 condnotbr _%9 =>:00126
  0056e:    	ucomisd xmm7,xmm4
  00572:    	jbe    0x3da6c
:00030 %9 = %4
:00031 %9 = neg %9                          [Integer]
  00578:    	movq   xmm0,xmm6
  0057c:    	call   0xffffc4b5
  00581:    	mov    QWORD PTR [rbp-0x70],rax
  00585:    	sub    rsp,0x30
  00589:    	movq   QWORD PTR [rsp],xmm2
  0058e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00594:    	movq   QWORD PTR [rsp+0x10],xmm5
  0059a:    	movq   QWORD PTR [rsp+0x18],xmm6
  005a0:    	movq   QWORD PTR [rsp+0x20],xmm7
  005a6:    	mov    rdi,QWORD PTR [rbp-0x70]
  005aa:    	mov    rdx,rdi
  005ad:    	mov    rdi,rbx
  005b0:    	mov    rsi,r12
  005b3: d0 	movabs rax,0x55d0b27f0130
  005bd:    	call   rax
  005bf:    	movq   xmm2,QWORD PTR [rsp]
  005c4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005ca:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005d0:    	movq   xmm6,QWORD PTR [rsp+0x18]
  005d6:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005dc:    	add    rsp,0x30
  005e0: d0 	movabs r13,0x55d0b3224420
  005ea:    	test   rax,rax
  005ed:    	je     0xffffc389
  005f3:    	mov    QWORD PTR [rbp-0x70],rax
:00032 %11 = const[Math]                    [<invalid>]
  005f7: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe770]        # 0xffffed6e
  005fe: 00 	cmp    rax,QWORD PTR [rip+0x1589]        # 0x1b8e
  00605:    	jne    0x3cc5d
  0060b: 00 	mov    rax,QWORD PTR [rip+0x156c]        # 0x1b7e
  00612:    	mov    QWORD PTR [rbp-0x80],rax
:00033 %12 = %6
:00034 %10 = %11.call sqrt(%12; 1)          [<INVALID>]
:00035 
  00616:    	movq   xmm0,xmm7
  0061a:    	call   0xffffc4b5
  0061f: ff 	mov    QWORD PTR [rbp-0x88],rax
  00626:    	sub    rsp,0x20
  0062a:    	movq   QWORD PTR [rsp],xmm5
  0062f:    	movq   QWORD PTR [rsp+0x8],xmm6
  00635:    	movq   QWORD PTR [rsp+0x10],xmm7
  0063b:    	mov    rdi,QWORD PTR [rbp-0x80]
  0063f: d0 	movabs rax,0x55d0b27bf4f0
  00649:    	call   rax
  0064b:    	mov    r15d,eax
  0064e: 00 	cmp    r15d,DWORD PTR [rip+0x1545]        # 0x1b9a
  00655:    	jne    0x3ccd9
  0065b:    	mov    eax,DWORD PTR [rip+0xffffffffffffe708]        # 0xffffed69
  00661:    	cmp    DWORD PTR [rip+0x152f],eax        # 0x1b96
  00667:    	jne    0x3ccd9
  0066d:    	mov    rax,QWORD PTR [rbx]
  00670:    	lea    rdi,[rsp-0x18]
  00675:    	mov    QWORD PTR [rdi],rax
  00678:    	mov    QWORD PTR [rbx],rdi
  0067b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00684:    	mov    QWORD PTR [rsp-0x38],rcx
  00689:    	mov    rax,QWORD PTR [rbp-0x80]
  0068d:    	mov    QWORD PTR [rsp-0x38],rax
  00692: 00 	mov    rdi,0x1
  00699: ff 	mov    rax,QWORD PTR [rbp-0x88]
  006a0:    	mov    QWORD PTR [rsp-0x40],rax
  006a5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  006ae: 00 	movabs rax,0x0
  006b8:    	mov    QWORD PTR [rsp-0x28],rax
  006bd: 00 	movabs r13,0x0
  006c7:    	call   0xffffc34e
  006cc:    	mov    rdi,QWORD PTR [rsp-0x18]
  006d1:    	mov    QWORD PTR [rbx],rdi
  006d4:    	movq   xmm5,QWORD PTR [rsp]
  006d9:    	movq   xmm6,QWORD PTR [rsp+0x8]
  006df:    	movq   xmm7,QWORD PTR [rsp+0x10]
  006e5:    	add    rsp,0x20
  006e9:    	test   rax,rax
  006ec:    	je     0x3cd45
  006f2:    	mov    QWORD PTR [rbp-0x78],rax
:00037 %7 = %9 - %10                        [Integer][Integer]
  006f6:    	mov    rdi,QWORD PTR [rbp-0x70]
  006fa:    	mov    rsi,QWORD PTR [rbp-0x78]
  006fe: 00 	test   rdi,0x1
  00705:    	je     0x3cd54
  0070b: 00 	test   rsi,0x1
  00712:    	je     0x3cd54
  00718:    	sub    rdi,rsi
  0071b:    	jo     0x3cd54
  00721:    	add    rdi,0x1
  00725:    	mov    QWORD PTR [rbp-0x60],rdi
:00038 %10 = literal[0.0]
  00729: 00 	movq   xmm2,QWORD PTR [rip+0x146d]        # 0x1b9e
:00039 %9 = %7 > %10                        [Integer][Integer]
  00731:    	movq   xmm0,xmm2
  00735:    	call   0xffffc4b5
  0073a:    	mov    QWORD PTR [rbp-0x78],rax
  0073e:    	mov    rdi,QWORD PTR [rbp-0x60]
  00742:    	mov    rsi,QWORD PTR [rbp-0x78]
  00746: 00 	test   rdi,0x1
  0074d:    	je     0x3cd7d
  00753: 00 	test   rsi,0x1
  0075a:    	je     0x3cd7d
  00760:    	xor    rax,rax
  00763:    	cmp    rdi,rsi
  00766:    	setg   al
  0076a:    	shl    rax,0x3
  0076e:    	or     rax,0x14
  00772:    	mov    QWORD PTR [rbp-0x70],rax
:00040 condnotbr %9 =>:00046
  00776:    	mov    rax,QWORD PTR [rbp-0x70]
  0077a:    	or     rax,0x10
  0077e:    	cmp    rax,0x14
  00782:    	je     0x3ce7a
:00041 %11 = %2
  00788:    	mov    rax,QWORD PTR [rbp-0x38]
  0078c:    	mov    QWORD PTR [rbp-0x80],rax
:00042 %10 = %11.call t()                   [<INVALID>]
:00043 
  00790:    	sub    rsp,0x20
  00794:    	movq   QWORD PTR [rsp],xmm5
  00799:    	movq   QWORD PTR [rsp+0x8],xmm6
  0079f:    	movq   QWORD PTR [rsp+0x10],xmm7
  007a5:    	mov    rdi,QWORD PTR [rbp-0x80]
  007a9: d0 	movabs rax,0x55d0b27bf4f0
  007b3:    	call   rax
  007b5:    	mov    r15d,eax
  007b8: 00 	cmp    r15d,DWORD PTR [rip+0x13eb]        # 0x1baa
  007bf:    	jne    0x3cdc4
  007c5:    	mov    eax,DWORD PTR [rip+0xffffffffffffe59e]        # 0xffffed69
  007cb:    	cmp    DWORD PTR [rip+0x13d5],eax        # 0x1ba6
  007d1:    	jne    0x3cdc4
  007d7:    	mov    rax,QWORD PTR [rbx]
  007da:    	lea    rdi,[rsp-0x18]
  007df:    	mov    QWORD PTR [rdi],rax
  007e2:    	mov    QWORD PTR [rbx],rdi
  007e5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007ee:    	mov    QWORD PTR [rsp-0x38],rcx
  007f3:    	mov    rax,QWORD PTR [rbp-0x80]
  007f7:    	mov    QWORD PTR [rsp-0x38],rax
  007fc: 00 	mov    rdi,0x0
  00803: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0080c: 00 	movabs rax,0x0
  00816:    	mov    QWORD PTR [rsp-0x28],rax
  0081b: 00 	movabs r13,0x0
  00825:    	call   0xffffc34e
  0082a:    	mov    rdi,QWORD PTR [rsp-0x18]
  0082f:    	mov    QWORD PTR [rbx],rdi
  00832:    	movq   xmm5,QWORD PTR [rsp]
  00837:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0083d:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00843:    	add    rsp,0x20
  00847:    	test   rax,rax
  0084a:    	je     0x3ce30
  00850:    	mov    QWORD PTR [rbp-0x78],rax
:00045 %9 = %7 < %10                        [Integer][Integer]
  00854:    	mov    rdi,QWORD PTR [rbp-0x60]
  00858:    	mov    rsi,QWORD PTR [rbp-0x78]
  0085c: 00 	test   rdi,0x1
  00863:    	je     0x3ce3f
  00869: 00 	test   rsi,0x1
  00870:    	je     0x3ce3f
  00876:    	xor    rax,rax
  00879:    	cmp    rdi,rsi
  0087c:    	setl   al
  00880:    	shl    rax,0x3
  00884:    	or     rax,0x14
  00888:    	mov    QWORD PTR [rbp-0x70],rax
  0088c:    	jmp    0x3cead
:00046 condnotbr %9 =>:00125
  00891:    	mov    rax,QWORD PTR [rbp-0x70]
  00895:    	or     rax,0x10
  00899:    	cmp    rax,0x14
  0089d:    	je     0x3da06
:00047 _ = %2.call t=(%7; 1)                [<INVALID>]
:00048 
  008a3:    	sub    rsp,0x20
  008a7:    	movq   QWORD PTR [rsp],xmm5
  008ac:    	movq   QWORD PTR [rsp+0x8],xmm6
  008b2:    	movq   QWORD PTR [rsp+0x10],xmm7
  008b8:    	mov    rdi,QWORD PTR [rbp-0x38]
  008bc: d0 	movabs rax,0x55d0b27bf4f0
  008c6:    	call   rax
  008c8:    	mov    r15d,eax
  008cb: 00 	cmp    r15d,DWORD PTR [rip+0x12e0]        # 0x1bb2
  008d2:    	jne    0x3cee0
  008d8:    	mov    eax,DWORD PTR [rip+0xffffffffffffe48b]        # 0xffffed69
  008de:    	cmp    DWORD PTR [rip+0x12ca],eax        # 0x1bae
  008e4:    	jne    0x3cee0
  008ea:    	mov    rax,QWORD PTR [rbx]
  008ed:    	lea    rdi,[rsp-0x18]
  008f2:    	mov    QWORD PTR [rdi],rax
  008f5:    	mov    QWORD PTR [rbx],rdi
  008f8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00901:    	mov    QWORD PTR [rsp-0x38],rcx
  00906:    	mov    rax,QWORD PTR [rbp-0x38]
  0090a:    	mov    QWORD PTR [rsp-0x38],rax
  0090f: 00 	mov    rdi,0x1
  00916:    	mov    rax,QWORD PTR [rbp-0x60]
  0091a:    	mov    QWORD PTR [rsp-0x40],rax
  0091f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00928: 00 	movabs rax,0x0
  00932:    	mov    QWORD PTR [rsp-0x28],rax
  00937: 00 	movabs r13,0x0
  00941:    	call   0xffffc34e
  00946:    	mov    rdi,QWORD PTR [rsp-0x18]
  0094b:    	mov    QWORD PTR [rbx],rdi
  0094e:    	movq   xmm5,QWORD PTR [rsp]
  00953:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00959:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0095f:    	add    rsp,0x20
  00963:    	test   rax,rax
  00966:    	je     0x3cf4c
:00050 %9 = literal[true]
  0096c: 00 	mov    rax,0x1c
  00973:    	mov    QWORD PTR [rbp-0x70],rax
:00051 _ = %2.call hit=(%9; 1)              [<INVALID>]
:00052 
  00977:    	sub    rsp,0x20
  0097b:    	movq   QWORD PTR [rsp],xmm5
  00980:    	movq   QWORD PTR [rsp+0x8],xmm6
  00986:    	movq   QWORD PTR [rsp+0x10],xmm7
  0098c:    	mov    rdi,QWORD PTR [rbp-0x38]
  00990: d0 	movabs rax,0x55d0b27bf4f0
  0099a:    	call   rax
  0099c:    	mov    r15d,eax
  0099f: 00 	cmp    r15d,DWORD PTR [rip+0x1214]        # 0x1bba
  009a6:    	jne    0x3cf5b
  009ac:    	mov    eax,DWORD PTR [rip+0xffffffffffffe3b7]        # 0xffffed69
  009b2:    	cmp    DWORD PTR [rip+0x11fe],eax        # 0x1bb6
  009b8:    	jne    0x3cf5b
  009be:    	mov    rax,QWORD PTR [rbx]
  009c1:    	lea    rdi,[rsp-0x18]
  009c6:    	mov    QWORD PTR [rdi],rax
  009c9:    	mov    QWORD PTR [rbx],rdi
  009cc: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009d5:    	mov    QWORD PTR [rsp-0x38],rcx
  009da:    	mov    rax,QWORD PTR [rbp-0x38]
  009de:    	mov    QWORD PTR [rsp-0x38],rax
  009e3: 00 	mov    rdi,0x1
  009ea:    	mov    rax,QWORD PTR [rbp-0x70]
  009ee:    	mov    QWORD PTR [rsp-0x40],rax
  009f3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  009fc: 00 	movabs rax,0x0
  00a06:    	mov    QWORD PTR [rsp-0x28],rax
  00a0b: 00 	movabs r13,0x0
  00a15:    	call   0xffffc34e
  00a1a:    	mov    rdi,QWORD PTR [rsp-0x18]
  00a1f:    	mov    QWORD PTR [rbx],rdi
  00a22:    	movq   xmm5,QWORD PTR [rsp]
  00a27:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00a2d:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00a33:    	add    rsp,0x20
  00a37:    	test   rax,rax
  00a3a:    	je     0x3cfc7
:00054 %10 = const[Vec]                     [<invalid>]
  00a40: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe327]        # 0xffffed6e
  00a47: 00 	cmp    rax,QWORD PTR [rip+0x1180]        # 0x1bce
  00a4e:    	jne    0x3cfd6
  00a54: 00 	mov    rax,QWORD PTR [rip+0x1163]        # 0x1bbe
  00a5b:    	mov    QWORD PTR [rbp-0x78],rax
:00055 %13 = %1
  00a5f:    	mov    rax,QWORD PTR [rbp-0x30]
  00a63: ff 	mov    QWORD PTR [rbp-0x90],rax
:00056 %12 = %13.call org()                 [<INVALID>]
:00057 
  00a6a:    	sub    rsp,0x20
  00a6e:    	movq   QWORD PTR [rsp],xmm5
  00a73:    	movq   QWORD PTR [rsp+0x8],xmm6
  00a79:    	movq   QWORD PTR [rsp+0x10],xmm7
  00a7f: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00a86: d0 	movabs rax,0x55d0b27bf4f0
  00a90:    	call   rax
  00a92:    	mov    r15d,eax
  00a95: 00 	cmp    r15d,DWORD PTR [rip+0x113e]        # 0x1bda
  00a9c:    	jne    0x3d046
  00aa2:    	mov    eax,DWORD PTR [rip+0xffffffffffffe2c1]        # 0xffffed69
  00aa8:    	cmp    DWORD PTR [rip+0x1128],eax        # 0x1bd6
  00aae:    	jne    0x3d046
  00ab4:    	mov    rax,QWORD PTR [rbx]
  00ab7:    	lea    rdi,[rsp-0x18]
  00abc:    	mov    QWORD PTR [rdi],rax
  00abf:    	mov    QWORD PTR [rbx],rdi
  00ac2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00acb:    	mov    QWORD PTR [rsp-0x38],rcx
  00ad0: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00ad7:    	mov    QWORD PTR [rsp-0x38],rax
  00adc: 00 	mov    rdi,0x0
  00ae3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00aec: 00 	movabs rax,0x0
  00af6:    	mov    QWORD PTR [rsp-0x28],rax
  00afb: 00 	movabs r13,0x0
  00b05:    	call   0xffffc34e
  00b0a:    	mov    rdi,QWORD PTR [rsp-0x18]
  00b0f:    	mov    QWORD PTR [rbx],rdi
  00b12:    	movq   xmm5,QWORD PTR [rsp]
  00b17:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00b1d:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00b23:    	add    rsp,0x20
  00b27:    	test   rax,rax
  00b2a:    	je     0x3d0b5
  00b30: ff 	mov    QWORD PTR [rbp-0x88],rax
:00059 %11 = %12.call x()                   [<INVALID>]
:00060 
  00b37:    	sub    rsp,0x20
  00b3b:    	movq   QWORD PTR [rsp],xmm5
  00b40:    	movq   QWORD PTR [rsp+0x8],xmm6
  00b46:    	movq   QWORD PTR [rsp+0x10],xmm7
  00b4c: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00b53: d0 	movabs rax,0x55d0b27bf4f0
  00b5d:    	call   rax
  00b5f:    	mov    r15d,eax
  00b62: 00 	cmp    r15d,DWORD PTR [rip+0x1079]        # 0x1be2
  00b69:    	jne    0x3d0c4
  00b6f:    	mov    eax,DWORD PTR [rip+0xffffffffffffe1f4]        # 0xffffed69
  00b75:    	cmp    DWORD PTR [rip+0x1063],eax        # 0x1bde
  00b7b:    	jne    0x3d0c4
  00b81:    	mov    rax,QWORD PTR [rbx]
  00b84:    	lea    rdi,[rsp-0x18]
  00b89:    	mov    QWORD PTR [rdi],rax
  00b8c:    	mov    QWORD PTR [rbx],rdi
  00b8f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b98:    	mov    QWORD PTR [rsp-0x38],rcx
  00b9d: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00ba4:    	mov    QWORD PTR [rsp-0x38],rax
  00ba9: 00 	mov    rdi,0x0
  00bb0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00bb9: 00 	movabs rax,0x0
  00bc3:    	mov    QWORD PTR [rsp-0x28],rax
  00bc8: 00 	movabs r13,0x0
  00bd2:    	call   0xffffc34e
  00bd7:    	mov    rdi,QWORD PTR [rsp-0x18]
  00bdc:    	mov    QWORD PTR [rbx],rdi
  00bdf:    	movq   xmm5,QWORD PTR [rsp]
  00be4:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00bea:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00bf0:    	add    rsp,0x20
  00bf4:    	test   rax,rax
  00bf7:    	je     0x3d133
  00bfd:    	mov    QWORD PTR [rbp-0x80],rax
:00062 %14 = %1
  00c01:    	mov    rax,QWORD PTR [rbp-0x30]
  00c05: ff 	mov    QWORD PTR [rbp-0x98],rax
:00063 %13 = %14.call dir()                 [<INVALID>]
:00064 
  00c0c:    	sub    rsp,0x20
  00c10:    	movq   QWORD PTR [rsp],xmm5
  00c15:    	movq   QWORD PTR [rsp+0x8],xmm6
  00c1b:    	movq   QWORD PTR [rsp+0x10],xmm7
  00c21: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00c28: d0 	movabs rax,0x55d0b27bf4f0
  00c32:    	call   rax
  00c34:    	mov    r15d,eax
  00c37: 00 	cmp    r15d,DWORD PTR [rip+0xfac]        # 0x1bea
  00c3e:    	jne    0x3d142
  00c44:    	mov    eax,DWORD PTR [rip+0xffffffffffffe11f]        # 0xffffed69
  00c4a:    	cmp    DWORD PTR [rip+0xf96],eax        # 0x1be6
  00c50:    	jne    0x3d142
  00c56:    	mov    rax,QWORD PTR [rbx]
  00c59:    	lea    rdi,[rsp-0x18]
  00c5e:    	mov    QWORD PTR [rdi],rax
  00c61:    	mov    QWORD PTR [rbx],rdi
  00c64: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c6d:    	mov    QWORD PTR [rsp-0x38],rcx
  00c72: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00c79:    	mov    QWORD PTR [rsp-0x38],rax
  00c7e: 00 	mov    rdi,0x0
  00c85: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c8e: 00 	movabs rax,0x0
  00c98:    	mov    QWORD PTR [rsp-0x28],rax
  00c9d: 00 	movabs r13,0x0
  00ca7:    	call   0xffffc34e
  00cac:    	mov    rdi,QWORD PTR [rsp-0x18]
  00cb1:    	mov    QWORD PTR [rbx],rdi
  00cb4:    	movq   xmm5,QWORD PTR [rsp]
  00cb9:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00cbf:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00cc5:    	add    rsp,0x20
  00cc9:    	test   rax,rax
  00ccc:    	je     0x3d1b1
  00cd2: ff 	mov    QWORD PTR [rbp-0x90],rax
:00066 %12 = %13.call x()                   [<INVALID>]
:00067 
  00cd9:    	sub    rsp,0x20
  00cdd:    	movq   QWORD PTR [rsp],xmm5
  00ce2:    	movq   QWORD PTR [rsp+0x8],xmm6
  00ce8:    	movq   QWORD PTR [rsp+0x10],xmm7
  00cee: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00cf5: d0 	movabs rax,0x55d0b27bf4f0
  00cff:    	call   rax
  00d01:    	mov    r15d,eax
  00d04: 00 	cmp    r15d,DWORD PTR [rip+0xee7]        # 0x1bf2
  00d0b:    	jne    0x3d1c0
  00d11:    	mov    eax,DWORD PTR [rip+0xffffffffffffe052]        # 0xffffed69
  00d17:    	cmp    DWORD PTR [rip+0xed1],eax        # 0x1bee
  00d1d:    	jne    0x3d1c0
  00d23:    	mov    rax,QWORD PTR [rbx]
  00d26:    	lea    rdi,[rsp-0x18]
  00d2b:    	mov    QWORD PTR [rdi],rax
  00d2e:    	mov    QWORD PTR [rbx],rdi
  00d31: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d3a:    	mov    QWORD PTR [rsp-0x38],rcx
  00d3f: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00d46:    	mov    QWORD PTR [rsp-0x38],rax
  00d4b: 00 	mov    rdi,0x0
  00d52: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d5b: 00 	movabs rax,0x0
  00d65:    	mov    QWORD PTR [rsp-0x28],rax
  00d6a: 00 	movabs r13,0x0
  00d74:    	call   0xffffc34e
  00d79:    	mov    rdi,QWORD PTR [rsp-0x18]
  00d7e:    	mov    QWORD PTR [rbx],rdi
  00d81:    	movq   xmm5,QWORD PTR [rsp]
  00d86:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00d8c:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00d92:    	add    rsp,0x20
  00d96:    	test   rax,rax
  00d99:    	je     0x3d22f
  00d9f: ff 	mov    QWORD PTR [rbp-0x88],rax
:00069 %12 = %12 * %7                       [Integer][Integer]
  00da6: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00dad:    	mov    rsi,QWORD PTR [rbp-0x60]
  00db1:    	sub    rsp,0x20
  00db5:    	movq   QWORD PTR [rsp],xmm5
  00dba:    	movq   QWORD PTR [rsp+0x8],xmm6
  00dc0:    	movq   QWORD PTR [rsp+0x10],xmm7
  00dc6:    	mov    rdx,rdi
  00dc9:    	mov    rcx,rsi
  00dcc:    	mov    rdi,rbx
  00dcf:    	mov    rsi,r12
  00dd2: d0 	movabs rax,0x55d0b27f2b80
  00ddc:    	call   rax
  00dde:    	movq   xmm5,QWORD PTR [rsp]
  00de3:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00de9:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00def:    	add    rsp,0x20
  00df3: d0 	movabs r13,0x55d0b3224680
  00dfd:    	test   rax,rax
  00e00:    	je     0xffffc389
  00e06: ff 	mov    QWORD PTR [rbp-0x88],rax
:00070 %11 = %11 + %12                      [Integer][Integer]
  00e0d:    	mov    rdi,QWORD PTR [rbp-0x80]
  00e11: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  00e18: 00 	test   rdi,0x1
  00e1f:    	je     0x3d267
  00e25: 00 	test   rsi,0x1
  00e2c:    	je     0x3d267
  00e32:    	sub    rdi,0x1
  00e36:    	add    rdi,rsi
  00e39:    	jo     0x3d267
  00e3f:    	mov    QWORD PTR [rbp-0x80],rdi
:00071 %14 = %1
  00e43:    	mov    rax,QWORD PTR [rbp-0x30]
  00e47: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 %13 = %14.call org()                 [<INVALID>]
:00073 
  00e4e:    	sub    rsp,0x20
  00e52:    	movq   QWORD PTR [rsp],xmm5
  00e57:    	movq   QWORD PTR [rsp+0x8],xmm6
  00e5d:    	movq   QWORD PTR [rsp+0x10],xmm7
  00e63: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e6a: d0 	movabs rax,0x55d0b27bf4f0
  00e74:    	call   rax
  00e76:    	mov    r15d,eax
  00e79: 00 	cmp    r15d,DWORD PTR [rip+0xd7a]        # 0x1bfa
  00e80:    	jne    0x3d290
  00e86:    	mov    eax,DWORD PTR [rip+0xffffffffffffdedd]        # 0xffffed69
  00e8c:    	cmp    DWORD PTR [rip+0xd64],eax        # 0x1bf6
  00e92:    	jne    0x3d290
  00e98:    	mov    rax,QWORD PTR [rbx]
  00e9b:    	lea    rdi,[rsp-0x18]
  00ea0:    	mov    QWORD PTR [rdi],rax
  00ea3:    	mov    QWORD PTR [rbx],rdi
  00ea6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00eaf:    	mov    QWORD PTR [rsp-0x38],rcx
  00eb4: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00ebb:    	mov    QWORD PTR [rsp-0x38],rax
  00ec0: 00 	mov    rdi,0x0
  00ec7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ed0: 00 	movabs rax,0x0
  00eda:    	mov    QWORD PTR [rsp-0x28],rax
  00edf: 00 	movabs r13,0x0
  00ee9:    	call   0xffffc34e
  00eee:    	mov    rdi,QWORD PTR [rsp-0x18]
  00ef3:    	mov    QWORD PTR [rbx],rdi
  00ef6:    	movq   xmm5,QWORD PTR [rsp]
  00efb:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00f01:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00f07:    	add    rsp,0x20
  00f0b:    	test   rax,rax
  00f0e:    	je     0x3d2ff
  00f14: ff 	mov    QWORD PTR [rbp-0x90],rax
:00075 %12 = %13.call y()                   [<INVALID>]
:00076 
  00f1b:    	sub    rsp,0x20
  00f1f:    	movq   QWORD PTR [rsp],xmm5
  00f24:    	movq   QWORD PTR [rsp+0x8],xmm6
  00f2a:    	movq   QWORD PTR [rsp+0x10],xmm7
  00f30: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00f37: d0 	movabs rax,0x55d0b27bf4f0
  00f41:    	call   rax
  00f43:    	mov    r15d,eax
  00f46: 00 	cmp    r15d,DWORD PTR [rip+0xcb5]        # 0x1c02
  00f4d:    	jne    0x3d30e
  00f53:    	mov    eax,DWORD PTR [rip+0xffffffffffffde10]        # 0xffffed69
  00f59:    	cmp    DWORD PTR [rip+0xc9f],eax        # 0x1bfe
  00f5f:    	jne    0x3d30e
  00f65:    	mov    rax,QWORD PTR [rbx]
  00f68:    	lea    rdi,[rsp-0x18]
  00f6d:    	mov    QWORD PTR [rdi],rax
  00f70:    	mov    QWORD PTR [rbx],rdi
  00f73: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f7c:    	mov    QWORD PTR [rsp-0x38],rcx
  00f81: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00f88:    	mov    QWORD PTR [rsp-0x38],rax
  00f8d: 00 	mov    rdi,0x0
  00f94: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f9d: 00 	movabs rax,0x0
  00fa7:    	mov    QWORD PTR [rsp-0x28],rax
  00fac: 00 	movabs r13,0x0
  00fb6:    	call   0xffffc34e
  00fbb:    	mov    rdi,QWORD PTR [rsp-0x18]
  00fc0:    	mov    QWORD PTR [rbx],rdi
  00fc3:    	movq   xmm5,QWORD PTR [rsp]
  00fc8:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00fce:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00fd4:    	add    rsp,0x20
  00fd8:    	test   rax,rax
  00fdb:    	je     0x3d37d
  00fe1: ff 	mov    QWORD PTR [rbp-0x88],rax
:00078 %15 = %1
  00fe8:    	mov    rax,QWORD PTR [rbp-0x30]
  00fec: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00079 %14 = %15.call dir()                 [<INVALID>]
:00080 
  00ff3:    	sub    rsp,0x20
  00ff7:    	movq   QWORD PTR [rsp],xmm5
  00ffc:    	movq   QWORD PTR [rsp+0x8],xmm6
  01002:    	movq   QWORD PTR [rsp+0x10],xmm7
  01008: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0100f: d0 	movabs rax,0x55d0b27bf4f0
  01019:    	call   rax
  0101b:    	mov    r15d,eax
  0101e: 00 	cmp    r15d,DWORD PTR [rip+0xbe5]        # 0x1c0a
  01025:    	jne    0x3d38c
  0102b:    	mov    eax,DWORD PTR [rip+0xffffffffffffdd38]        # 0xffffed69
  01031:    	cmp    DWORD PTR [rip+0xbcf],eax        # 0x1c06
  01037:    	jne    0x3d38c
  0103d:    	mov    rax,QWORD PTR [rbx]
  01040:    	lea    rdi,[rsp-0x18]
  01045:    	mov    QWORD PTR [rdi],rax
  01048:    	mov    QWORD PTR [rbx],rdi
  0104b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01054:    	mov    QWORD PTR [rsp-0x38],rcx
  01059: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01060:    	mov    QWORD PTR [rsp-0x38],rax
  01065: 00 	mov    rdi,0x0
  0106c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01075: 00 	movabs rax,0x0
  0107f:    	mov    QWORD PTR [rsp-0x28],rax
  01084: 00 	movabs r13,0x0
  0108e:    	call   0xffffc34e
  01093:    	mov    rdi,QWORD PTR [rsp-0x18]
  01098:    	mov    QWORD PTR [rbx],rdi
  0109b:    	movq   xmm5,QWORD PTR [rsp]
  010a0:    	movq   xmm6,QWORD PTR [rsp+0x8]
  010a6:    	movq   xmm7,QWORD PTR [rsp+0x10]
  010ac:    	add    rsp,0x20
  010b0:    	test   rax,rax
  010b3:    	je     0x3d3fb
  010b9: ff 	mov    QWORD PTR [rbp-0x98],rax
:00082 %13 = %14.call y()                   [<INVALID>]
:00083 
  010c0:    	sub    rsp,0x20
  010c4:    	movq   QWORD PTR [rsp],xmm5
  010c9:    	movq   QWORD PTR [rsp+0x8],xmm6
  010cf:    	movq   QWORD PTR [rsp+0x10],xmm7
  010d5: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  010dc: d0 	movabs rax,0x55d0b27bf4f0
  010e6:    	call   rax
  010e8:    	mov    r15d,eax
  010eb: 00 	cmp    r15d,DWORD PTR [rip+0xb20]        # 0x1c12
  010f2:    	jne    0x3d40a
  010f8:    	mov    eax,DWORD PTR [rip+0xffffffffffffdc6b]        # 0xffffed69
  010fe:    	cmp    DWORD PTR [rip+0xb0a],eax        # 0x1c0e
  01104:    	jne    0x3d40a
  0110a:    	mov    rax,QWORD PTR [rbx]
  0110d:    	lea    rdi,[rsp-0x18]
  01112:    	mov    QWORD PTR [rdi],rax
  01115:    	mov    QWORD PTR [rbx],rdi
  01118: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01121:    	mov    QWORD PTR [rsp-0x38],rcx
  01126: ff 	mov    rax,QWORD PTR [rbp-0x98]
  0112d:    	mov    QWORD PTR [rsp-0x38],rax
  01132: 00 	mov    rdi,0x0
  01139: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01142: 00 	movabs rax,0x0
  0114c:    	mov    QWORD PTR [rsp-0x28],rax
  01151: 00 	movabs r13,0x0
  0115b:    	call   0xffffc34e
  01160:    	mov    rdi,QWORD PTR [rsp-0x18]
  01165:    	mov    QWORD PTR [rbx],rdi
  01168:    	movq   xmm5,QWORD PTR [rsp]
  0116d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01173:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01179:    	add    rsp,0x20
  0117d:    	test   rax,rax
  01180:    	je     0x3d479
  01186: ff 	mov    QWORD PTR [rbp-0x90],rax
:00085 %13 = %13 * %7                       [Integer][Integer]
  0118d: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01194:    	mov    rsi,QWORD PTR [rbp-0x60]
  01198:    	sub    rsp,0x20
  0119c:    	movq   QWORD PTR [rsp],xmm5
  011a1:    	movq   QWORD PTR [rsp+0x8],xmm6
  011a7:    	movq   QWORD PTR [rsp+0x10],xmm7
  011ad:    	mov    rdx,rdi
  011b0:    	mov    rcx,rsi
  011b3:    	mov    rdi,rbx
  011b6:    	mov    rsi,r12
  011b9: d0 	movabs rax,0x55d0b27f2b80
  011c3:    	call   rax
  011c5:    	movq   xmm5,QWORD PTR [rsp]
  011ca:    	movq   xmm6,QWORD PTR [rsp+0x8]
  011d0:    	movq   xmm7,QWORD PTR [rsp+0x10]
  011d6:    	add    rsp,0x20
  011da: d0 	movabs r13,0x55d0b3224780
  011e4:    	test   rax,rax
  011e7:    	je     0xffffc389
  011ed: ff 	mov    QWORD PTR [rbp-0x90],rax
:00086 %12 = %12 + %13                      [Integer][Integer]
  011f4: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  011fb: ff 	mov    rsi,QWORD PTR [rbp-0x90]
  01202: 00 	test   rdi,0x1
  01209:    	je     0x3d4b1
  0120f: 00 	test   rsi,0x1
  01216:    	je     0x3d4b1
  0121c:    	sub    rdi,0x1
  01220:    	add    rdi,rsi
  01223:    	jo     0x3d4b1
  01229: ff 	mov    QWORD PTR [rbp-0x88],rdi
:00087 %15 = %1
  01230:    	mov    rax,QWORD PTR [rbp-0x30]
  01234: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00088 %14 = %15.call org()                 [<INVALID>]
:00089 
  0123b:    	sub    rsp,0x20
  0123f:    	movq   QWORD PTR [rsp],xmm5
  01244:    	movq   QWORD PTR [rsp+0x8],xmm6
  0124a:    	movq   QWORD PTR [rsp+0x10],xmm7
  01250: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01257: d0 	movabs rax,0x55d0b27bf4f0
  01261:    	call   rax
  01263:    	mov    r15d,eax
  01266: 00 	cmp    r15d,DWORD PTR [rip+0x9ad]        # 0x1c1a
  0126d:    	jne    0x3d4da
  01273:    	mov    eax,DWORD PTR [rip+0xffffffffffffdaf0]        # 0xffffed69
  01279:    	cmp    DWORD PTR [rip+0x997],eax        # 0x1c16
  0127f:    	jne    0x3d4da
  01285:    	mov    rax,QWORD PTR [rbx]
  01288:    	lea    rdi,[rsp-0x18]
  0128d:    	mov    QWORD PTR [rdi],rax
  01290:    	mov    QWORD PTR [rbx],rdi
  01293: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0129c:    	mov    QWORD PTR [rsp-0x38],rcx
  012a1: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  012a8:    	mov    QWORD PTR [rsp-0x38],rax
  012ad: 00 	mov    rdi,0x0
  012b4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012bd: 00 	movabs rax,0x0
  012c7:    	mov    QWORD PTR [rsp-0x28],rax
  012cc: 00 	movabs r13,0x0
  012d6:    	call   0xffffc34e
  012db:    	mov    rdi,QWORD PTR [rsp-0x18]
  012e0:    	mov    QWORD PTR [rbx],rdi
  012e3:    	movq   xmm5,QWORD PTR [rsp]
  012e8:    	movq   xmm6,QWORD PTR [rsp+0x8]
  012ee:    	movq   xmm7,QWORD PTR [rsp+0x10]
  012f4:    	add    rsp,0x20
  012f8:    	test   rax,rax
  012fb:    	je     0x3d549
  01301: ff 	mov    QWORD PTR [rbp-0x98],rax
:00091 %13 = %14.call z()                   [<INVALID>]
:00092 
  01308:    	sub    rsp,0x20
  0130c:    	movq   QWORD PTR [rsp],xmm5
  01311:    	movq   QWORD PTR [rsp+0x8],xmm6
  01317:    	movq   QWORD PTR [rsp+0x10],xmm7
  0131d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01324: d0 	movabs rax,0x55d0b27bf4f0
  0132e:    	call   rax
  01330:    	mov    r15d,eax
  01333: 00 	cmp    r15d,DWORD PTR [rip+0x8e8]        # 0x1c22
  0133a:    	jne    0x3d558
  01340:    	mov    eax,DWORD PTR [rip+0xffffffffffffda23]        # 0xffffed69
  01346:    	cmp    DWORD PTR [rip+0x8d2],eax        # 0x1c1e
  0134c:    	jne    0x3d558
  01352:    	mov    rax,QWORD PTR [rbx]
  01355:    	lea    rdi,[rsp-0x18]
  0135a:    	mov    QWORD PTR [rdi],rax
  0135d:    	mov    QWORD PTR [rbx],rdi
  01360: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01369:    	mov    QWORD PTR [rsp-0x38],rcx
  0136e: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01375:    	mov    QWORD PTR [rsp-0x38],rax
  0137a: 00 	mov    rdi,0x0
  01381: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0138a: 00 	movabs rax,0x0
  01394:    	mov    QWORD PTR [rsp-0x28],rax
  01399: 00 	movabs r13,0x0
  013a3:    	call   0xffffc34e
  013a8:    	mov    rdi,QWORD PTR [rsp-0x18]
  013ad:    	mov    QWORD PTR [rbx],rdi
  013b0:    	movq   xmm5,QWORD PTR [rsp]
  013b5:    	movq   xmm6,QWORD PTR [rsp+0x8]
  013bb:    	movq   xmm7,QWORD PTR [rsp+0x10]
  013c1:    	add    rsp,0x20
  013c5:    	test   rax,rax
  013c8:    	je     0x3d5c7
  013ce: ff 	mov    QWORD PTR [rbp-0x90],rax
:00094 %16 = %1
  013d5:    	mov    rax,QWORD PTR [rbp-0x30]
  013d9: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00095 %15 = %16.call dir()                 [<INVALID>]
:00096 
  013e0:    	sub    rsp,0x20
  013e4:    	movq   QWORD PTR [rsp],xmm5
  013e9:    	movq   QWORD PTR [rsp+0x8],xmm6
  013ef:    	movq   QWORD PTR [rsp+0x10],xmm7
  013f5: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  013fc: d0 	movabs rax,0x55d0b27bf4f0
  01406:    	call   rax
  01408:    	mov    r15d,eax
  0140b: 00 	cmp    r15d,DWORD PTR [rip+0x818]        # 0x1c2a
  01412:    	jne    0x3d5d6
  01418:    	mov    eax,DWORD PTR [rip+0xffffffffffffd94b]        # 0xffffed69
  0141e:    	cmp    DWORD PTR [rip+0x802],eax        # 0x1c26
  01424:    	jne    0x3d5d6
  0142a:    	mov    rax,QWORD PTR [rbx]
  0142d:    	lea    rdi,[rsp-0x18]
  01432:    	mov    QWORD PTR [rdi],rax
  01435:    	mov    QWORD PTR [rbx],rdi
  01438: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01441:    	mov    QWORD PTR [rsp-0x38],rcx
  01446: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  0144d:    	mov    QWORD PTR [rsp-0x38],rax
  01452: 00 	mov    rdi,0x0
  01459: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01462: 00 	movabs rax,0x0
  0146c:    	mov    QWORD PTR [rsp-0x28],rax
  01471: 00 	movabs r13,0x0
  0147b:    	call   0xffffc34e
  01480:    	mov    rdi,QWORD PTR [rsp-0x18]
  01485:    	mov    QWORD PTR [rbx],rdi
  01488:    	movq   xmm5,QWORD PTR [rsp]
  0148d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01493:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01499:    	add    rsp,0x20
  0149d:    	test   rax,rax
  014a0:    	je     0x3d645
  014a6: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00098 %14 = %15.call z()                   [<INVALID>]
:00099 
  014ad:    	sub    rsp,0x20
  014b1:    	movq   QWORD PTR [rsp],xmm5
  014b6:    	movq   QWORD PTR [rsp+0x8],xmm6
  014bc:    	movq   QWORD PTR [rsp+0x10],xmm7
  014c2: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  014c9: d0 	movabs rax,0x55d0b27bf4f0
  014d3:    	call   rax
  014d5:    	mov    r15d,eax
  014d8: 00 	cmp    r15d,DWORD PTR [rip+0x753]        # 0x1c32
  014df:    	jne    0x3d654
  014e5:    	mov    eax,DWORD PTR [rip+0xffffffffffffd87e]        # 0xffffed69
  014eb:    	cmp    DWORD PTR [rip+0x73d],eax        # 0x1c2e
  014f1:    	jne    0x3d654
  014f7:    	mov    rax,QWORD PTR [rbx]
  014fa:    	lea    rdi,[rsp-0x18]
  014ff:    	mov    QWORD PTR [rdi],rax
  01502:    	mov    QWORD PTR [rbx],rdi
  01505: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0150e:    	mov    QWORD PTR [rsp-0x38],rcx
  01513: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0151a:    	mov    QWORD PTR [rsp-0x38],rax
  0151f: 00 	mov    rdi,0x0
  01526: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0152f: 00 	movabs rax,0x0
  01539:    	mov    QWORD PTR [rsp-0x28],rax
  0153e: 00 	movabs r13,0x0
  01548:    	call   0xffffc34e
  0154d:    	mov    rdi,QWORD PTR [rsp-0x18]
  01552:    	mov    QWORD PTR [rbx],rdi
  01555:    	movq   xmm5,QWORD PTR [rsp]
  0155a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01560:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01566:    	add    rsp,0x20
  0156a:    	test   rax,rax
  0156d:    	je     0x3d6c3
  01573: ff 	mov    QWORD PTR [rbp-0x98],rax
:00101 %14 = %14 * %7                       [Integer][Integer]
  0157a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01581:    	mov    rsi,QWORD PTR [rbp-0x60]
  01585:    	sub    rsp,0x20
  01589:    	movq   QWORD PTR [rsp],xmm5
  0158e:    	movq   QWORD PTR [rsp+0x8],xmm6
  01594:    	movq   QWORD PTR [rsp+0x10],xmm7
  0159a:    	mov    rdx,rdi
  0159d:    	mov    rcx,rsi
  015a0:    	mov    rdi,rbx
  015a3:    	mov    rsi,r12
  015a6: d0 	movabs rax,0x55d0b27f2b80
  015b0:    	call   rax
  015b2:    	movq   xmm5,QWORD PTR [rsp]
  015b7:    	movq   xmm6,QWORD PTR [rsp+0x8]
  015bd:    	movq   xmm7,QWORD PTR [rsp+0x10]
  015c3:    	add    rsp,0x20
  015c7: d0 	movabs r13,0x55d0b3224880
  015d1:    	test   rax,rax
  015d4:    	je     0xffffc389
  015da: ff 	mov    QWORD PTR [rbp-0x98],rax
:00102 %13 = %13 + %14                      [Integer][Integer]
  015e1: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  015e8: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  015ef: 00 	test   rdi,0x1
  015f6:    	je     0x3d6fb
  015fc: 00 	test   rsi,0x1
  01603:    	je     0x3d6fb
  01609:    	sub    rdi,0x1
  0160d:    	add    rdi,rsi
  01610:    	jo     0x3d6fb
  01616: ff 	mov    QWORD PTR [rbp-0x90],rdi
:00103 %9 = %10.call new(%11; 3)            [<INVALID>]
:00104 
  0161d:    	sub    rsp,0x20
  01621:    	movq   QWORD PTR [rsp],xmm5
  01626:    	movq   QWORD PTR [rsp+0x8],xmm6
  0162c:    	movq   QWORD PTR [rsp+0x10],xmm7
  01632:    	mov    rdi,QWORD PTR [rbp-0x78]
  01636: d0 	movabs rax,0x55d0b27bf4f0
  01640:    	call   rax
  01642:    	mov    r15d,eax
  01645: 00 	cmp    r15d,DWORD PTR [rip+0x5ee]        # 0x1c3a
  0164c:    	jne    0x3d724
  01652:    	mov    eax,DWORD PTR [rip+0xffffffffffffd711]        # 0xffffed69
  01658:    	cmp    DWORD PTR [rip+0x5d8],eax        # 0x1c36
  0165e:    	jne    0x3d724
  01664:    	mov    rax,QWORD PTR [rbx]
  01667:    	lea    rdi,[rsp-0x18]
  0166c:    	mov    QWORD PTR [rdi],rax
  0166f:    	mov    QWORD PTR [rbx],rdi
  01672: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0167b:    	mov    QWORD PTR [rsp-0x38],rcx
  01680:    	mov    rax,QWORD PTR [rbp-0x78]
  01684:    	mov    QWORD PTR [rsp-0x38],rax
  01689: 00 	mov    rdi,0x3
  01690:    	mov    rax,QWORD PTR [rbp-0x80]
  01694:    	mov    QWORD PTR [rsp-0x40],rax
  01699: ff 	mov    rax,QWORD PTR [rbp-0x88]
  016a0:    	mov    QWORD PTR [rsp-0x48],rax
  016a5: ff 	mov    rax,QWORD PTR [rbp-0x90]
  016ac:    	mov    QWORD PTR [rsp-0x50],rax
  016b1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016ba: 00 	movabs rax,0x0
  016c4:    	mov    QWORD PTR [rsp-0x28],rax
  016c9: 00 	movabs r13,0x0
  016d3:    	call   0xffffc34e
  016d8:    	mov    rdi,QWORD PTR [rsp-0x18]
  016dd:    	mov    QWORD PTR [rbx],rdi
  016e0:    	movq   xmm5,QWORD PTR [rsp]
  016e5:    	movq   xmm6,QWORD PTR [rsp+0x8]
  016eb:    	movq   xmm7,QWORD PTR [rsp+0x10]
  016f1:    	add    rsp,0x20
  016f5:    	test   rax,rax
  016f8:    	je     0x3d790
  016fe:    	mov    QWORD PTR [rbp-0x70],rax
:00106 _ = %2.call pl=(%9; 1)               [<INVALID>]
:00107 
  01702:    	sub    rsp,0x20
  01706:    	movq   QWORD PTR [rsp],xmm5
  0170b:    	movq   QWORD PTR [rsp+0x8],xmm6
  01711:    	movq   QWORD PTR [rsp+0x10],xmm7
  01717:    	mov    rdi,QWORD PTR [rbp-0x38]
  0171b: d0 	movabs rax,0x55d0b27bf4f0
  01725:    	call   rax
  01727:    	mov    r15d,eax
  0172a: 00 	cmp    r15d,DWORD PTR [rip+0x511]        # 0x1c42
  01731:    	jne    0x3d79f
  01737:    	mov    eax,DWORD PTR [rip+0xffffffffffffd62c]        # 0xffffed69
  0173d:    	cmp    DWORD PTR [rip+0x4fb],eax        # 0x1c3e
  01743:    	jne    0x3d79f
  01749:    	mov    rax,QWORD PTR [rbx]
  0174c:    	lea    rdi,[rsp-0x18]
  01751:    	mov    QWORD PTR [rdi],rax
  01754:    	mov    QWORD PTR [rbx],rdi
  01757: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01760:    	mov    QWORD PTR [rsp-0x38],rcx
  01765:    	mov    rax,QWORD PTR [rbp-0x38]
  01769:    	mov    QWORD PTR [rsp-0x38],rax
  0176e: 00 	mov    rdi,0x1
  01775:    	mov    rax,QWORD PTR [rbp-0x70]
  01779:    	mov    QWORD PTR [rsp-0x40],rax
  0177e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01787: 00 	movabs rax,0x0
  01791:    	mov    QWORD PTR [rsp-0x28],rax
  01796: 00 	movabs r13,0x0
  017a0:    	call   0xffffc34e
  017a5:    	mov    rdi,QWORD PTR [rsp-0x18]
  017aa:    	mov    QWORD PTR [rbx],rdi
  017ad:    	movq   xmm5,QWORD PTR [rsp]
  017b2:    	movq   xmm6,QWORD PTR [rsp+0x8]
  017b8:    	movq   xmm7,QWORD PTR [rsp+0x10]
  017be:    	add    rsp,0x20
  017c2:    	test   rax,rax
  017c5:    	je     0x3d80b
:00109 %10 = %2
  017cb:    	mov    rax,QWORD PTR [rbp-0x38]
  017cf:    	mov    QWORD PTR [rbp-0x78],rax
:00110 %9 = %10.call pl()                   [<INVALID>]
:00111 
  017d3:    	sub    rsp,0x20
  017d7:    	movq   QWORD PTR [rsp],xmm5
  017dc:    	movq   QWORD PTR [rsp+0x8],xmm6
  017e2:    	movq   QWORD PTR [rsp+0x10],xmm7
  017e8:    	mov    rdi,QWORD PTR [rbp-0x78]
  017ec: d0 	movabs rax,0x55d0b27bf4f0
  017f6:    	call   rax
  017f8:    	mov    r15d,eax
  017fb: 00 	cmp    r15d,DWORD PTR [rip+0x448]        # 0x1c4a
  01802:    	jne    0x3d81a
  01808:    	mov    eax,DWORD PTR [rip+0xffffffffffffd55b]        # 0xffffed69
  0180e:    	cmp    DWORD PTR [rip+0x432],eax        # 0x1c46
  01814:    	jne    0x3d81a
  0181a:    	mov    rax,QWORD PTR [rbx]
  0181d:    	lea    rdi,[rsp-0x18]
  01822:    	mov    QWORD PTR [rdi],rax
  01825:    	mov    QWORD PTR [rbx],rdi
  01828: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01831:    	mov    QWORD PTR [rsp-0x38],rcx
  01836:    	mov    rax,QWORD PTR [rbp-0x78]
  0183a:    	mov    QWORD PTR [rsp-0x38],rax
  0183f: 00 	mov    rdi,0x0
  01846: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0184f: 00 	movabs rax,0x0
  01859:    	mov    QWORD PTR [rsp-0x28],rax
  0185e: 00 	movabs r13,0x0
  01868:    	call   0xffffc34e
  0186d:    	mov    rdi,QWORD PTR [rsp-0x18]
  01872:    	mov    QWORD PTR [rbx],rdi
  01875:    	movq   xmm5,QWORD PTR [rsp]
  0187a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01880:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01886:    	add    rsp,0x20
  0188a:    	test   rax,rax
  0188d:    	je     0x3d886
  01893:    	mov    QWORD PTR [rbp-0x70],rax
:00113 %10 = @center: <INVALID>[IvarId(0)]
  01897:    	mov    rdi,QWORD PTR [rbp-0x28]
  0189b:    	sub    rsp,0x20
  0189f:    	movq   QWORD PTR [rsp],xmm5
  018a4:    	movq   QWORD PTR [rsp+0x8],xmm6
  018aa:    	movq   QWORD PTR [rsp+0x10],xmm7
  018b0: 00 	mov    rsi,0x79
  018b7:    	mov    rdx,r12
  018ba: d0 	movabs rax,0x55d0b27af810
  018c4:    	call   rax
  018c6:    	movq   xmm5,QWORD PTR [rsp]
  018cb:    	movq   xmm6,QWORD PTR [rsp+0x8]
  018d1:    	movq   xmm7,QWORD PTR [rsp+0x10]
  018d7:    	add    rsp,0x20
  018db:    	mov    QWORD PTR [rbp-0x78],rax
:00114 %8 = %9.call vsub(%10; 1)            [<INVALID>]
:00115 
  018df:    	sub    rsp,0x20
  018e3:    	movq   QWORD PTR [rsp],xmm5
  018e8:    	movq   QWORD PTR [rsp+0x8],xmm6
  018ee:    	movq   QWORD PTR [rsp+0x10],xmm7
  018f4:    	mov    rdi,QWORD PTR [rbp-0x70]
  018f8: d0 	movabs rax,0x55d0b27bf4f0
  01902:    	call   rax
  01904:    	mov    r15d,eax
  01907: 00 	cmp    r15d,DWORD PTR [rip+0x344]        # 0x1c52
  0190e:    	jne    0x3d895
  01914:    	mov    eax,DWORD PTR [rip+0xffffffffffffd44f]        # 0xffffed69
  0191a:    	cmp    DWORD PTR [rip+0x32e],eax        # 0x1c4e
  01920:    	jne    0x3d895
  01926:    	mov    rax,QWORD PTR [rbx]
  01929:    	lea    rdi,[rsp-0x18]
  0192e:    	mov    QWORD PTR [rdi],rax
  01931:    	mov    QWORD PTR [rbx],rdi
  01934: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0193d:    	mov    QWORD PTR [rsp-0x38],rcx
  01942:    	mov    rax,QWORD PTR [rbp-0x70]
  01946:    	mov    QWORD PTR [rsp-0x38],rax
  0194b: 00 	mov    rdi,0x1
  01952:    	mov    rax,QWORD PTR [rbp-0x78]
  01956:    	mov    QWORD PTR [rsp-0x40],rax
  0195b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01964: 00 	movabs rax,0x0
  0196e:    	mov    QWORD PTR [rsp-0x28],rax
  01973: 00 	movabs r13,0x0
  0197d:    	call   0xffffc34e
  01982:    	mov    rdi,QWORD PTR [rsp-0x18]
  01987:    	mov    QWORD PTR [rbx],rdi
  0198a:    	movq   xmm5,QWORD PTR [rsp]
  0198f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01995:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0199b:    	add    rsp,0x20
  0199f:    	test   rax,rax
  019a2:    	je     0x3d901
  019a8:    	mov    QWORD PTR [rbp-0x68],rax
:00117 %10 = %8
  019ac:    	mov    rax,QWORD PTR [rbp-0x68]
  019b0:    	mov    QWORD PTR [rbp-0x78],rax
:00118 %9 = %10.call vnormalize()           [<INVALID>]
:00119 
  019b4:    	sub    rsp,0x20
  019b8:    	movq   QWORD PTR [rsp],xmm5
  019bd:    	movq   QWORD PTR [rsp+0x8],xmm6
  019c3:    	movq   QWORD PTR [rsp+0x10],xmm7
  019c9:    	mov    rdi,QWORD PTR [rbp-0x78]
  019cd: d0 	movabs rax,0x55d0b27bf4f0
  019d7:    	call   rax
  019d9:    	mov    r15d,eax
  019dc: 00 	cmp    r15d,DWORD PTR [rip+0x277]        # 0x1c5a
  019e3:    	jne    0x3d910
  019e9:    	mov    eax,DWORD PTR [rip+0xffffffffffffd37a]        # 0xffffed69
  019ef:    	cmp    DWORD PTR [rip+0x261],eax        # 0x1c56
  019f5:    	jne    0x3d910
  019fb:    	mov    rax,QWORD PTR [rbx]
  019fe:    	lea    rdi,[rsp-0x18]
  01a03:    	mov    QWORD PTR [rdi],rax
  01a06:    	mov    QWORD PTR [rbx],rdi
  01a09: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a12:    	mov    QWORD PTR [rsp-0x38],rcx
  01a17:    	mov    rax,QWORD PTR [rbp-0x78]
  01a1b:    	mov    QWORD PTR [rsp-0x38],rax
  01a20: 00 	mov    rdi,0x0
  01a27: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a30: 00 	movabs rax,0x0
  01a3a:    	mov    QWORD PTR [rsp-0x28],rax
  01a3f: 00 	movabs r13,0x0
  01a49:    	call   0xffffc34e
  01a4e:    	mov    rdi,QWORD PTR [rsp-0x18]
  01a53:    	mov    QWORD PTR [rbx],rdi
  01a56:    	movq   xmm5,QWORD PTR [rsp]
  01a5b:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01a61:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01a67:    	add    rsp,0x20
  01a6b:    	test   rax,rax
  01a6e:    	je     0x3d97c
  01a74:    	mov    QWORD PTR [rbp-0x70],rax
:00121 _ = %2.call n=(%9; 1)                [<INVALID>]
:00122 
  01a78:    	sub    rsp,0x20
  01a7c:    	movq   QWORD PTR [rsp],xmm5
  01a81:    	movq   QWORD PTR [rsp+0x8],xmm6
  01a87:    	movq   QWORD PTR [rsp+0x10],xmm7
  01a8d:    	mov    rdi,QWORD PTR [rbp-0x38]
  01a91: d0 	movabs rax,0x55d0b27bf4f0
  01a9b:    	call   rax
  01a9d:    	mov    r15d,eax
  01aa0: 00 	cmp    r15d,DWORD PTR [rip+0x1bb]        # 0x1c62
  01aa7:    	jne    0x3d98b
  01aad:    	mov    eax,DWORD PTR [rip+0xffffffffffffd2b6]        # 0xffffed69
  01ab3:    	cmp    DWORD PTR [rip+0x1a5],eax        # 0x1c5e
  01ab9:    	jne    0x3d98b
  01abf:    	mov    rax,QWORD PTR [rbx]
  01ac2:    	lea    rdi,[rsp-0x18]
  01ac7:    	mov    QWORD PTR [rdi],rax
  01aca:    	mov    QWORD PTR [rbx],rdi
  01acd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01ad6:    	mov    QWORD PTR [rsp-0x38],rcx
  01adb:    	mov    rax,QWORD PTR [rbp-0x38]
  01adf:    	mov    QWORD PTR [rsp-0x38],rax
  01ae4: 00 	mov    rdi,0x1
  01aeb:    	mov    rax,QWORD PTR [rbp-0x70]
  01aef:    	mov    QWORD PTR [rsp-0x40],rax
  01af4: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01afd: 00 	movabs rax,0x0
  01b07:    	mov    QWORD PTR [rsp-0x28],rax
  01b0c: 00 	movabs r13,0x0
  01b16:    	call   0xffffc34e
  01b1b:    	mov    rdi,QWORD PTR [rsp-0x18]
  01b20:    	mov    QWORD PTR [rbx],rdi
  01b23:    	movq   xmm5,QWORD PTR [rsp]
  01b28:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01b2e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01b34:    	add    rsp,0x20
  01b38:    	test   rax,rax
  01b3b:    	je     0x3d9f7
:00124 br =>:00125
  01b41:    	jmp    0x3da39
:00125 br =>:00126
  01b46:    	jmp    0x3dab9
:00126 %9 = nil
  01b4b: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00127 ret %9
  01b53:    	mov    rax,QWORD PTR [rbp-0x70]
  01b57:    	leave  
  01b58:    	ret    
==> start whole compile: vsub FuncId(55) self_class:Vec start:[00000] bytecode:0x55d0b3206e60
<== finished compile. elapsed:56.3µs
offset:Pos(22808) code: 1429 bytes  data: 51 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x70
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    QWORD PTR [rbp-0x50],rax
  0001f: mov    QWORD PTR [rbp-0x58],rax
  00023: mov    QWORD PTR [rbp-0x60],rax
  00027: mov    QWORD PTR [rbp-0x68],rax
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: test   rdi,0x7
  00036: jne    0x3be86
  0003c: cmp    DWORD PTR [rdi+0x4],0x25
  00040: jne    0x3be86
:00000 %3 = const[Vec]                      [Vec]
  00046: mov    rax,QWORD PTR [rip+0xffffffffffffd0bb]        # 0xffffd108
  0004d: cmp    rax,QWORD PTR [rip+0x554]        # 0x5a8
  00054: jne    0x3be95
  0005a: mov    rax,QWORD PTR [rip+0x537]        # 0x598
  00061: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = @x: Vec[IvarId(0)]
  00065: mov    rdi,QWORD PTR [rbp-0x28]
  00069: xor    rax,rax
  0006c: mov    ax,WORD PTR [rdi+0x2]
  00070: cmp    rax,0x3
  00074: jne    0x3bedb
  0007a: mov    rax,QWORD PTR [rdi+0x10]
  0007e: mov    QWORD PTR [rbp-0x48],rax
:00002 %6 = %1
  00082: mov    rax,QWORD PTR [rbp-0x30]
  00086: mov    QWORD PTR [rbp-0x58],rax
:00003 %5 = %6.call x()                     [Vec]
:00004 
  0008a: mov    rdi,QWORD PTR [rbp-0x58]
  0008e: test   rdi,0x7
  00095: jne    0x3bef1
  0009b: cmp    DWORD PTR [rdi+0x4],0x25
  0009f: jne    0x3bef1
  000a5: cmp    DWORD PTR [rip+0xffffffffffffd057],0x26        # 0xffffd103
  000ac: jne    0x3bef1
  000b2: mov    esi,DWORD PTR [rip+0x4fc]        # 0x5b4
  000b8: cmp    esi,0xffffffff
  000bb: je     0x3bf00
  000c1: xor    rax,rax
  000c4: mov    ax,WORD PTR [rdi+0x2]
  000c8: cmp    rax,0x3
  000cc: jne    0xe5
  000d2: cmp    esi,0x6
  000d5: jge    0xe5
  000db: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000e0: jmp    0xf1
  000e5: movabs rax,0x55d0b27c8be0
  000ef: call   rax
  000f1: mov    QWORD PTR [rbp-0x50],rax
:00006 %4 = %4 - %5                         [Float][Float]
  000f5: mov    rdi,QWORD PTR [rbp-0x48]
  000f9: test   rdi,0x1
  00100: jne    0x3bf29
  00106: test   rdi,0x2
  0010d: je     0x149
  00113: xorps  xmm2,xmm2
  00116: movabs rax,0x8000000000000002
  00120: cmp    rdi,rax
  00123: je     0x15b
  00129: mov    rax,rdi
  0012c: sar    rax,0x3f
  00130: add    rax,0x2
  00134: and    rdi,0xfffffffffffffffc
  00138: or     rdi,rax
  0013b: rol    rdi,0x3d
  0013f: movq   xmm2,rdi
  00144: jmp    0x15b
  00149: call   0xffffa75c
  0014e: test   rax,rax
  00151: je     0x3bf29
  00157: movq   xmm2,xmm0
  0015b: mov    rdi,QWORD PTR [rbp-0x50]
  0015f: test   rdi,0x1
  00166: jne    0x3bf38
  0016c: test   rdi,0x2
  00173: je     0x1af
  00179: xorps  xmm3,xmm3
  0017c: movabs rax,0x8000000000000002
  00186: cmp    rdi,rax
  00189: je     0x1c1
  0018f: mov    rax,rdi
  00192: sar    rax,0x3f
  00196: add    rax,0x2
  0019a: and    rdi,0xfffffffffffffffc
  0019e: or     rdi,rax
  001a1: rol    rdi,0x3d
  001a5: movq   xmm3,rdi
  001aa: jmp    0x1c1
  001af: call   0xffffa75c
  001b4: test   rax,rax
  001b7: je     0x3bf38
  001bd: movq   xmm3,xmm0
  001c1: subsd  xmm2,xmm3
:00007 %5 = @y: Vec[IvarId(1)]
  001c5: mov    rdi,QWORD PTR [rbp-0x28]
  001c9: xor    rax,rax
  001cc: mov    ax,WORD PTR [rdi+0x2]
  001d0: cmp    rax,0x3
  001d4: jne    0x3bf47
  001da: mov    rax,QWORD PTR [rdi+0x18]
  001de: mov    QWORD PTR [rbp-0x50],rax
:00008 %7 = %1
  001e2: mov    rax,QWORD PTR [rbp-0x30]
  001e6: mov    QWORD PTR [rbp-0x60],rax
:00009 %6 = %7.call y()                     [Vec]
:00010 
  001ea: mov    rdi,QWORD PTR [rbp-0x60]
  001ee: test   rdi,0x7
  001f5: jne    0x3bf6f
  001fb: cmp    DWORD PTR [rdi+0x4],0x25
  001ff: jne    0x3bf6f
  00205: cmp    DWORD PTR [rip+0xffffffffffffcef7],0x26        # 0xffffd103
  0020c: jne    0x3bf6f
  00212: mov    esi,DWORD PTR [rip+0x3a4]        # 0x5bc
  00218: cmp    esi,0xffffffff
  0021b: je     0x3bf8b
  00221: xor    rax,rax
  00224: mov    ax,WORD PTR [rdi+0x2]
  00228: cmp    rax,0x3
  0022c: jne    0x245
  00232: cmp    esi,0x6
  00235: jge    0x245
  0023b: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00240: jmp    0x263
  00245: sub    rsp,0x10
  00249: movq   QWORD PTR [rsp],xmm2
  0024e: movabs rax,0x55d0b27c8be0
  00258: call   rax
  0025a: movq   xmm2,QWORD PTR [rsp]
  0025f: add    rsp,0x10
  00263: mov    QWORD PTR [rbp-0x58],rax
:00012 %5 = %5 - %6                         [Float][Float]
  00267: mov    rdi,QWORD PTR [rbp-0x50]
  0026b: test   rdi,0x1
  00272: jne    0x3bfc6
  00278: test   rdi,0x2
  0027f: je     0x2bb
  00285: xorps  xmm3,xmm3
  00288: movabs rax,0x8000000000000002
  00292: cmp    rdi,rax
  00295: je     0x2cd
  0029b: mov    rax,rdi
  0029e: sar    rax,0x3f
  002a2: add    rax,0x2
  002a6: and    rdi,0xfffffffffffffffc
  002aa: or     rdi,rax
  002ad: rol    rdi,0x3d
  002b1: movq   xmm3,rdi
  002b6: jmp    0x2cd
  002bb: call   0xffffa75c
  002c0: test   rax,rax
  002c3: je     0x3bfc6
  002c9: movq   xmm3,xmm0
  002cd: mov    rdi,QWORD PTR [rbp-0x58]
  002d1: test   rdi,0x1
  002d8: jne    0x3bfe2
  002de: test   rdi,0x2
  002e5: je     0x321
  002eb: xorps  xmm4,xmm4
  002ee: movabs rax,0x8000000000000002
  002f8: cmp    rdi,rax
  002fb: je     0x333
  00301: mov    rax,rdi
  00304: sar    rax,0x3f
  00308: add    rax,0x2
  0030c: and    rdi,0xfffffffffffffffc
  00310: or     rdi,rax
  00313: rol    rdi,0x3d
  00317: movq   xmm4,rdi
  0031c: jmp    0x333
  00321: call   0xffffa75c
  00326: test   rax,rax
  00329: je     0x3bfe2
  0032f: movq   xmm4,xmm0
  00333: subsd  xmm3,xmm4
:00013 %6 = @z: Vec[IvarId(2)]
  00337: mov    rdi,QWORD PTR [rbp-0x28]
  0033b: xor    rax,rax
  0033e: mov    ax,WORD PTR [rdi+0x2]
  00342: cmp    rax,0x3
  00346: jne    0x3bffe
  0034c: mov    rax,QWORD PTR [rdi+0x20]
  00350: mov    QWORD PTR [rbp-0x58],rax
:00014 %8 = %1
  00354: mov    rax,QWORD PTR [rbp-0x30]
  00358: mov    QWORD PTR [rbp-0x68],rax
:00015 %7 = %8.call z()                     [Vec]
:00016 
  0035c: mov    rdi,QWORD PTR [rbp-0x68]
  00360: test   rdi,0x7
  00367: jne    0x3c032
  0036d: cmp    DWORD PTR [rdi+0x4],0x25
  00371: jne    0x3c032
  00377: cmp    DWORD PTR [rip+0xffffffffffffcd85],0x26        # 0xffffd103
  0037e: jne    0x3c032
  00384: mov    esi,DWORD PTR [rip+0x23a]        # 0x5c4
  0038a: cmp    esi,0xffffffff
  0038d: je     0x3c05b
  00393: xor    rax,rax
  00396: mov    ax,WORD PTR [rdi+0x2]
  0039a: cmp    rax,0x3
  0039e: jne    0x3b7
  003a4: cmp    esi,0x6
  003a7: jge    0x3b7
  003ad: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003b2: jmp    0x3e1
  003b7: sub    rsp,0x10
  003bb: movq   QWORD PTR [rsp],xmm2
  003c0: movq   QWORD PTR [rsp+0x8],xmm3
  003c6: movabs rax,0x55d0b27c8be0
  003d0: call   rax
  003d2: movq   xmm2,QWORD PTR [rsp]
  003d7: movq   xmm3,QWORD PTR [rsp+0x8]
  003dd: add    rsp,0x10
  003e1: mov    QWORD PTR [rbp-0x60],rax
:00018 %6 = %6 - %7                         [Float][Float]
  003e5: mov    rdi,QWORD PTR [rbp-0x58]
  003e9: test   rdi,0x1
  003f0: jne    0x3c0a2
  003f6: test   rdi,0x2
  003fd: je     0x439
  00403: xorps  xmm4,xmm4
  00406: movabs rax,0x8000000000000002
  00410: cmp    rdi,rax
  00413: je     0x44b
  00419: mov    rax,rdi
  0041c: sar    rax,0x3f
  00420: add    rax,0x2
  00424: and    rdi,0xfffffffffffffffc
  00428: or     rdi,rax
  0042b: rol    rdi,0x3d
  0042f: movq   xmm4,rdi
  00434: jmp    0x44b
  00439: call   0xffffa75c
  0043e: test   rax,rax
  00441: je     0x3c0a2
  00447: movq   xmm4,xmm0
  0044b: mov    rdi,QWORD PTR [rbp-0x60]
  0044f: test   rdi,0x1
  00456: jne    0x3c0cb
  0045c: test   rdi,0x2
  00463: je     0x49f
  00469: xorps  xmm5,xmm5
  0046c: movabs rax,0x8000000000000002
  00476: cmp    rdi,rax
  00479: je     0x4b1
  0047f: mov    rax,rdi
  00482: sar    rax,0x3f
  00486: add    rax,0x2
  0048a: and    rdi,0xfffffffffffffffc
  0048e: or     rdi,rax
  00491: rol    rdi,0x3d
  00495: movq   xmm5,rdi
  0049a: jmp    0x4b1
  0049f: call   0xffffa75c
  004a4: test   rax,rax
  004a7: je     0x3c0cb
  004ad: movq   xmm5,xmm0
  004b1: subsd  xmm4,xmm5
:00019 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00020 
  004b5: movq   xmm0,xmm2
  004b9: call   0xffffa84f
  004be: mov    QWORD PTR [rbp-0x48],rax
  004c2: movq   xmm0,xmm3
  004c6: call   0xffffa84f
  004cb: mov    QWORD PTR [rbp-0x50],rax
  004cf: movq   xmm0,xmm4
  004d3: call   0xffffa84f
  004d8: mov    QWORD PTR [rbp-0x58],rax
  004dc: mov    rdi,QWORD PTR [rbp-0x40]
  004e0: test   rdi,0x7
  004e7: jne    0x3c0f4
  004ed: cmp    DWORD PTR [rdi+0x4],0x26
  004f1: jne    0x3c0f4
  004f7: cmp    DWORD PTR [rip+0xffffffffffffcc05],0x26        # 0xffffd103
  004fe: jne    0x3c0f4
  00504: mov    r9,0x0
  0050b: sub    rsp,0x20
  0050f: movq   QWORD PTR [rsp],xmm2
  00514: movq   QWORD PTR [rsp+0x8],xmm3
  0051a: movq   QWORD PTR [rsp+0x10],xmm4
  00520: movq   QWORD PTR [rsp+0x18],xmm5
  00526: mov    rdx,rdi
  00529: mov    rax,QWORD PTR [rbx]
  0052c: lea    rdi,[rsp-0x18]
  00531: mov    QWORD PTR [rdi],rax
  00534: mov    QWORD PTR [rbx],rdi
  00537: mov    QWORD PTR [rsp-0x20],0x0
  00540: mov    QWORD PTR [rsp-0x38],rcx
  00545: lea    rcx,[rbp-0x48]
  00549: mov    r8,0x3
  00550: call   0x3c103
  00555: mov    rdi,QWORD PTR [rsp-0x18]
  0055a: mov    QWORD PTR [rbx],rdi
  0055d: movq   xmm2,QWORD PTR [rsp]
  00562: movq   xmm3,QWORD PTR [rsp+0x8]
  00568: movq   xmm4,QWORD PTR [rsp+0x10]
  0056e: movq   xmm5,QWORD PTR [rsp+0x18]
  00574: add    rsp,0x20
  00578: movabs r13,0x55d0b3206fb0
  00582: test   rax,rax
  00585: je     0xffffa723
  0058b: mov    QWORD PTR [rbp-0x38],rax
:00022 ret %2
  0058f: mov    rax,QWORD PTR [rbp-0x38]
  00593: leave  
  00594: ret    
==> start whole compile: <unnamed> FuncId(74) self_class:Scene start:[00000] bytecode:0x55d0b32341c0
<== finished compile. elapsed:175.4µs
offset:Pos(24288) code: 10170 bytes  data: 374 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xd0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00064: ff 	mov    QWORD PTR [rbp-0xb8],rax
  0006b: ff 	mov    QWORD PTR [rbp-0xc0],rax
  00072:    	mov    rdi,QWORD PTR [rbp-0x28]
  00076: 00 	test   rdi,0x7
  0007d:    	jne    0x3bb69
  00083:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00087:    	jne    0x3bb69
:00000 %14 = dynvar(4, %4)
  0008d:    	mov    rax,QWORD PTR [rbp-0x10]
  00091:    	mov    rax,QWORD PTR [rax]
  00094:    	mov    rax,QWORD PTR [rax]
  00097:    	mov    rax,QWORD PTR [rax]
  0009a:    	lea    rax,[rax+0x10]
  0009e:    	mov    rax,QWORD PTR [rax-0x48]
  000a2: ff 	mov    QWORD PTR [rbp-0x98],rax
:00001 %14 = %14 + 1: i16                   [Integer][Integer]
  000a9: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000b0: 00 	test   rdi,0x1
  000b7:    	je     0x3bb78
  000bd:    	add    rdi,0x2
  000c1:    	jo     0x3bb78
  000c7: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00002 dynvar(4, %4) = %14
  000ce:    	mov    rax,QWORD PTR [rbp-0x10]
  000d2:    	mov    rax,QWORD PTR [rax]
  000d5:    	mov    rax,QWORD PTR [rax]
  000d8:    	mov    rax,QWORD PTR [rax]
  000db:    	lea    rax,[rax+0x10]
  000df: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000e6:    	mov    QWORD PTR [rax-0x48],rdi
:00003 %14 = dynvar(4, %4)
  000ea:    	mov    rax,QWORD PTR [rbp-0x10]
  000ee:    	mov    rax,QWORD PTR [rax]
  000f1:    	mov    rax,QWORD PTR [rax]
  000f4:    	mov    rax,QWORD PTR [rax]
  000f7:    	lea    rax,[rax+0x10]
  000fb:    	mov    rax,QWORD PTR [rax-0x48]
  000ff: ff 	mov    QWORD PTR [rbp-0x98],rax
:00004 %15 = 101092: i32
  00106: ff 	mov    QWORD PTR [rbp-0xa0],0x315c9
:00005 _%14 = %14 > %15                     [Integer][Integer]
:00006 condnotbr _%14 =>:00011
  00111: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00118: ff 	mov    rsi,QWORD PTR [rbp-0xa0]
  0011f: 00 	test   rdi,0x1
  00126:    	je     0x3bb87
  0012c: 00 	test   rsi,0x1
  00133:    	je     0x3bb87
  00139:    	cmp    rdi,rsi
  0013c:    	jle    0x3bc21
:00007 _ = %0.call exit()                   [<INVALID>]
:00008 
  00142:    	mov    r15d,0x2f
  00148: 00 	cmp    r15d,DWORD PTR [rip+0x266f]        # 0x27be
  0014f:    	jne    0x3bba6
  00155:    	mov    eax,DWORD PTR [rip+0xffffffffffffc9e0]        # 0xffffcb3b
  0015b:    	cmp    DWORD PTR [rip+0x2659],eax        # 0x27ba
  00161:    	jne    0x3bba6
  00167:    	mov    rax,QWORD PTR [rbx]
  0016a:    	lea    rdi,[rsp-0x18]
  0016f:    	mov    QWORD PTR [rdi],rax
  00172:    	mov    QWORD PTR [rbx],rdi
  00175: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0017e:    	mov    QWORD PTR [rsp-0x38],rcx
  00183:    	mov    rax,QWORD PTR [rbp-0x28]
  00187:    	mov    QWORD PTR [rsp-0x38],rax
  0018c: 00 	mov    rdi,0x0
  00193: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0019c: 00 	movabs rax,0x0
  001a6:    	mov    QWORD PTR [rsp-0x28],rax
  001ab: 00 	movabs r13,0x0
  001b5:    	call   0xffffa120
  001ba:    	mov    rdi,QWORD PTR [rsp-0x18]
  001bf:    	mov    QWORD PTR [rbx],rdi
  001c2:    	test   rax,rax
  001c5:    	je     0x3bc12
:00010 br =>:00011
  001cb:    	jmp    0x3bc3a
:00011 %14 = dynvar(4, %1)
  001d0:    	mov    rax,QWORD PTR [rbp-0x10]
  001d4:    	mov    rax,QWORD PTR [rax]
  001d7:    	mov    rax,QWORD PTR [rax]
  001da:    	mov    rax,QWORD PTR [rax]
  001dd:    	lea    rax,[rax+0x10]
  001e1:    	mov    rax,QWORD PTR [rax-0x30]
  001e5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %2 = %14.call to_f()                 [Integer]
:00013 
  001ec: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001f3: 00 	test   rdi,0x1
  001fa:    	jne    0x217
  00200: 00 	test   rdi,0x7
  00207:    	jne    0x3bc53
  0020d:    	cmp    DWORD PTR [rdi+0x4],0x6
  00211:    	jne    0x3bc53
  00217: 26 	cmp    DWORD PTR [rip+0xffffffffffffc91d],0x26        # 0xffffcb3b
  0021e:    	jne    0x3bc53
  00224: 00 	mov    r9,0x0
  0022b:    	mov    rdx,rdi
  0022e:    	mov    rax,QWORD PTR [rbx]
  00231:    	lea    rdi,[rsp-0x18]
  00236:    	mov    QWORD PTR [rdi],rax
  00239:    	mov    QWORD PTR [rbx],rdi
  0023c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00245:    	mov    QWORD PTR [rsp-0x38],rcx
  0024a: ff 	lea    rcx,[rbp-0xa0]
  00251: 00 	mov    r8,0x0
  00258:    	call   0x3bc62
  0025d:    	mov    rdi,QWORD PTR [rsp-0x18]
  00262:    	mov    QWORD PTR [rbx],rdi
  00265: d0 	movabs r13,0x55d0b32342a0
  0026f:    	test   rax,rax
  00272:    	je     0xffffa15b
  00278:    	mov    QWORD PTR [rbp-0x38],rax
:00015 %14 = dynvar(4, %2)
  0027c:    	mov    rax,QWORD PTR [rbp-0x10]
  00280:    	mov    rax,QWORD PTR [rax]
  00283:    	mov    rax,QWORD PTR [rax]
  00286:    	mov    rax,QWORD PTR [rax]
  00289:    	lea    rax,[rax+0x10]
  0028d:    	mov    rax,QWORD PTR [rax-0x38]
  00291: ff 	mov    QWORD PTR [rbp-0x98],rax
:00016 %3 = %14.call to_f()                 [Integer]
:00017 
  00298: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0029f: 00 	test   rdi,0x1
  002a6:    	jne    0x2c3
  002ac: 00 	test   rdi,0x7
  002b3:    	jne    0x3bc90
  002b9:    	cmp    DWORD PTR [rdi+0x4],0x6
  002bd:    	jne    0x3bc90
  002c3: 26 	cmp    DWORD PTR [rip+0xffffffffffffc871],0x26        # 0xffffcb3b
  002ca:    	jne    0x3bc90
  002d0: 00 	mov    r9,0x0
  002d7:    	mov    rdx,rdi
  002da:    	mov    rax,QWORD PTR [rbx]
  002dd:    	lea    rdi,[rsp-0x18]
  002e2:    	mov    QWORD PTR [rdi],rax
  002e5:    	mov    QWORD PTR [rbx],rdi
  002e8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  002f1:    	mov    QWORD PTR [rsp-0x38],rcx
  002f6: ff 	lea    rcx,[rbp-0xa0]
  002fd: 00 	mov    r8,0x0
  00304:    	call   0x3bc9f
  00309:    	mov    rdi,QWORD PTR [rsp-0x18]
  0030e:    	mov    QWORD PTR [rbx],rdi
  00311: d0 	movabs r13,0x55d0b32342e0
  0031b:    	test   rax,rax
  0031e:    	je     0xffffa15b
  00324:    	mov    QWORD PTR [rbp-0x40],rax
:00019 %14 = dynvar(2, %1)
  00328:    	mov    rax,QWORD PTR [rbp-0x10]
  0032c:    	mov    rax,QWORD PTR [rax]
  0032f:    	lea    rax,[rax+0x10]
  00333:    	mov    rax,QWORD PTR [rax-0x30]
  00337: ff 	mov    QWORD PTR [rbp-0x98],rax
:00020 %4 = %14.call to_f()                 [Integer]
:00021 
  0033e: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00345: 00 	test   rdi,0x1
  0034c:    	jne    0x369
  00352: 00 	test   rdi,0x7
  00359:    	jne    0x3bccd
  0035f:    	cmp    DWORD PTR [rdi+0x4],0x6
  00363:    	jne    0x3bccd
  00369: 26 	cmp    DWORD PTR [rip+0xffffffffffffc7cb],0x26        # 0xffffcb3b
  00370:    	jne    0x3bccd
  00376: 00 	mov    r9,0x0
  0037d:    	mov    rdx,rdi
  00380:    	mov    rax,QWORD PTR [rbx]
  00383:    	lea    rdi,[rsp-0x18]
  00388:    	mov    QWORD PTR [rdi],rax
  0038b:    	mov    QWORD PTR [rbx],rdi
  0038e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00397:    	mov    QWORD PTR [rsp-0x38],rcx
  0039c: ff 	lea    rcx,[rbp-0xa0]
  003a3: 00 	mov    r8,0x0
  003aa:    	call   0x3bcdc
  003af:    	mov    rdi,QWORD PTR [rsp-0x18]
  003b4:    	mov    QWORD PTR [rbx],rdi
  003b7: d0 	movabs r13,0x55d0b3234320
  003c1:    	test   rax,rax
  003c4:    	je     0xffffa15b
  003ca:    	mov    QWORD PTR [rbp-0x48],rax
:00023 %14 = dynvar(3, %1)
  003ce:    	mov    rax,QWORD PTR [rbp-0x10]
  003d2:    	mov    rax,QWORD PTR [rax]
  003d5:    	mov    rax,QWORD PTR [rax]
  003d8:    	lea    rax,[rax+0x10]
  003dc:    	mov    rax,QWORD PTR [rax-0x30]
  003e0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %5 = %14.call to_f()                 [Integer]
:00025 
  003e7: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  003ee: 00 	test   rdi,0x1
  003f5:    	jne    0x412
  003fb: 00 	test   rdi,0x7
  00402:    	jne    0x3bd0a
  00408:    	cmp    DWORD PTR [rdi+0x4],0x6
  0040c:    	jne    0x3bd0a
  00412: 26 	cmp    DWORD PTR [rip+0xffffffffffffc722],0x26        # 0xffffcb3b
  00419:    	jne    0x3bd0a
  0041f: 00 	mov    r9,0x0
  00426:    	mov    rdx,rdi
  00429:    	mov    rax,QWORD PTR [rbx]
  0042c:    	lea    rdi,[rsp-0x18]
  00431:    	mov    QWORD PTR [rdi],rax
  00434:    	mov    QWORD PTR [rbx],rdi
  00437: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00440:    	mov    QWORD PTR [rsp-0x38],rcx
  00445: ff 	lea    rcx,[rbp-0xa0]
  0044c: 00 	mov    r8,0x0
  00453:    	call   0x3bd19
  00458:    	mov    rdi,QWORD PTR [rsp-0x18]
  0045d:    	mov    QWORD PTR [rbx],rdi
  00460: d0 	movabs r13,0x55d0b3234360
  0046a:    	test   rax,rax
  0046d:    	je     0xffffa15b
  00473:    	mov    QWORD PTR [rbp-0x50],rax
:00027 %14 = %1
  00477:    	mov    rax,QWORD PTR [rbp-0x30]
  0047b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00028 %6 = %14.call to_f()                 [Integer]
:00029 
  00482: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00489: 00 	test   rdi,0x1
  00490:    	jne    0x4ad
  00496: 00 	test   rdi,0x7
  0049d:    	jne    0x3bd47
  004a3:    	cmp    DWORD PTR [rdi+0x4],0x6
  004a7:    	jne    0x3bd47
  004ad: 26 	cmp    DWORD PTR [rip+0xffffffffffffc687],0x26        # 0xffffcb3b
  004b4:    	jne    0x3bd47
  004ba: 00 	mov    r9,0x0
  004c1:    	mov    rdx,rdi
  004c4:    	mov    rax,QWORD PTR [rbx]
  004c7:    	lea    rdi,[rsp-0x18]
  004cc:    	mov    QWORD PTR [rdi],rax
  004cf:    	mov    QWORD PTR [rbx],rdi
  004d2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  004db:    	mov    QWORD PTR [rsp-0x38],rcx
  004e0: ff 	lea    rcx,[rbp-0xa0]
  004e7: 00 	mov    r8,0x0
  004ee:    	call   0x3bd56
  004f3:    	mov    rdi,QWORD PTR [rsp-0x18]
  004f8:    	mov    QWORD PTR [rbx],rdi
  004fb: d0 	movabs r13,0x55d0b32343a0
  00505:    	test   rax,rax
  00508:    	je     0xffffa15b
  0050e:    	mov    QWORD PTR [rbp-0x58],rax
:00031 %14 = dynvar(1, %1)
  00512:    	mov    rax,QWORD PTR [rbp-0x10]
  00516:    	lea    rax,[rax+0x10]
  0051a:    	mov    rax,QWORD PTR [rax-0x30]
  0051e: ff 	mov    QWORD PTR [rbp-0x98],rax
:00032 %7 = %14.call to_f()                 [Integer]
:00033 
  00525: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0052c: 00 	test   rdi,0x1
  00533:    	jne    0x550
  00539: 00 	test   rdi,0x7
  00540:    	jne    0x3bd84
  00546:    	cmp    DWORD PTR [rdi+0x4],0x6
  0054a:    	jne    0x3bd84
  00550: 26 	cmp    DWORD PTR [rip+0xffffffffffffc5e4],0x26        # 0xffffcb3b
  00557:    	jne    0x3bd84
  0055d: 00 	mov    r9,0x0
  00564:    	mov    rdx,rdi
  00567:    	mov    rax,QWORD PTR [rbx]
  0056a:    	lea    rdi,[rsp-0x18]
  0056f:    	mov    QWORD PTR [rdi],rax
  00572:    	mov    QWORD PTR [rbx],rdi
  00575: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0057e:    	mov    QWORD PTR [rsp-0x38],rcx
  00583: ff 	lea    rcx,[rbp-0xa0]
  0058a: 00 	mov    r8,0x0
  00591:    	call   0x3bd93
  00596:    	mov    rdi,QWORD PTR [rsp-0x18]
  0059b:    	mov    QWORD PTR [rbx],rdi
  0059e: d0 	movabs r13,0x55d0b32343e0
  005a8:    	test   rax,rax
  005ab:    	je     0xffffa15b
  005b1:    	mov    QWORD PTR [rbp-0x60],rax
:00035 %14 = dynvar(4, %5)
  005b5:    	mov    rax,QWORD PTR [rbp-0x10]
  005b9:    	mov    rax,QWORD PTR [rax]
  005bc:    	mov    rax,QWORD PTR [rax]
  005bf:    	mov    rax,QWORD PTR [rax]
  005c2:    	lea    rax,[rax+0x10]
  005c6:    	mov    rax,QWORD PTR [rax-0x50]
  005ca: ff 	mov    QWORD PTR [rbp-0x98],rax
:00036 %14 = %6 / %14                       [Float][Float]
  005d1:    	mov    rdi,QWORD PTR [rbp-0x58]
  005d5: 00 	test   rdi,0x1
  005dc:    	jne    0x3bdc1
  005e2: 00 	test   rdi,0x2
  005e9:    	je     0x625
  005ef:    	xorps  xmm2,xmm2
  005f2: 00 	movabs rax,0x8000000000000002
  005fc:    	cmp    rdi,rax
  005ff:    	je     0x637
  00605:    	mov    rax,rdi
  00608:    	sar    rax,0x3f
  0060c:    	add    rax,0x2
  00610:    	and    rdi,0xfffffffffffffffc
  00614:    	or     rdi,rax
  00617:    	rol    rdi,0x3d
  0061b:    	movq   xmm2,rdi
  00620:    	jmp    0x637
  00625:    	call   0xffffa194
  0062a:    	test   rax,rax
  0062d:    	je     0x3bdc1
  00633:    	movq   xmm2,xmm0
  00637: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0063e: 00 	test   rdi,0x1
  00645:    	jne    0x3bdd0
  0064b: 00 	test   rdi,0x2
  00652:    	je     0x68e
  00658:    	xorps  xmm3,xmm3
  0065b: 00 	movabs rax,0x8000000000000002
  00665:    	cmp    rdi,rax
  00668:    	je     0x6a0
  0066e:    	mov    rax,rdi
  00671:    	sar    rax,0x3f
  00675:    	add    rax,0x2
  00679:    	and    rdi,0xfffffffffffffffc
  0067d:    	or     rdi,rax
  00680:    	rol    rdi,0x3d
  00684:    	movq   xmm3,rdi
  00689:    	jmp    0x6a0
  0068e:    	call   0xffffa194
  00693:    	test   rax,rax
  00696:    	je     0x3bdd0
  0069c:    	movq   xmm3,xmm0
  006a0:    	movq   rax,xmm3
  006a5:    	test   rax,rax
  006a8:    	je     0xffffa180
  006ae:    	movq   xmm0,xmm2
  006b2:    	divsd  xmm0,xmm3
  006b6:    	movq   xmm3,xmm0
:00037 %14 = %4 + %14                       [Float][Float]
  006ba:    	mov    rdi,QWORD PTR [rbp-0x48]
  006be: 00 	test   rdi,0x1
  006c5:    	jne    0x3bddf
  006cb: 00 	test   rdi,0x2
  006d2:    	je     0x70e
  006d8:    	xorps  xmm4,xmm4
  006db: 00 	movabs rax,0x8000000000000002
  006e5:    	cmp    rdi,rax
  006e8:    	je     0x720
  006ee:    	mov    rax,rdi
  006f1:    	sar    rax,0x3f
  006f5:    	add    rax,0x2
  006f9:    	and    rdi,0xfffffffffffffffc
  006fd:    	or     rdi,rax
  00700:    	rol    rdi,0x3d
  00704:    	movq   xmm4,rdi
  00709:    	jmp    0x720
  0070e:    	call   0xffffa194
  00713:    	test   rax,rax
  00716:    	je     0x3bddf
  0071c:    	movq   xmm4,xmm0
  00720:    	addsd  xmm3,xmm4
:00038 %15 = literal[2.0]
  00724: 00 	movq   xmm5,QWORD PTR [rip+0x20a4]        # 0x27d0
:00039 %15 = %2 / %15                       [Float][Float]
  0072c:    	mov    rdi,QWORD PTR [rbp-0x38]
  00730: 00 	test   rdi,0x1
  00737:    	jne    0x3bdfe
  0073d: 00 	test   rdi,0x2
  00744:    	je     0x780
  0074a:    	xorps  xmm6,xmm6
  0074d: 00 	movabs rax,0x8000000000000002
  00757:    	cmp    rdi,rax
  0075a:    	je     0x792
  00760:    	mov    rax,rdi
  00763:    	sar    rax,0x3f
  00767:    	add    rax,0x2
  0076b:    	and    rdi,0xfffffffffffffffc
  0076f:    	or     rdi,rax
  00772:    	rol    rdi,0x3d
  00776:    	movq   xmm6,rdi
  0077b:    	jmp    0x792
  00780:    	call   0xffffa194
  00785:    	test   rax,rax
  00788:    	je     0x3bdfe
  0078e:    	movq   xmm6,xmm0
  00792:    	movq   rax,xmm5
  00797:    	test   rax,rax
  0079a:    	je     0xffffa180
  007a0:    	movq   xmm0,xmm6
  007a4:    	divsd  xmm0,xmm5
  007a8:    	movq   xmm5,xmm0
:00040 %14 = %14 - %15                      [Float][Float]
  007ac:    	subsd  xmm3,xmm5
:00041 %15 = literal[2.0]
  007b0: 00 	movq   xmm5,QWORD PTR [rip+0x2028]        # 0x27e0
:00042 %15 = %2 / %15                       [Float][Float]
  007b8:    	movq   rax,xmm5
  007bd:    	test   rax,rax
  007c0:    	je     0xffffa180
  007c6:    	movq   xmm0,xmm6
  007ca:    	divsd  xmm0,xmm5
  007ce:    	movq   xmm5,xmm0
:00043 %8 = %14 / %15                       [Float][Float]
  007d2:    	movq   xmm7,xmm3
  007d6:    	movq   rax,xmm5
  007db:    	test   rax,rax
  007de:    	je     0xffffa180
  007e4:    	divsd  xmm7,xmm5
:00044 %14 = dynvar(4, %5)
  007e8:    	mov    rax,QWORD PTR [rbp-0x10]
  007ec:    	mov    rax,QWORD PTR [rax]
  007ef:    	mov    rax,QWORD PTR [rax]
  007f2:    	mov    rax,QWORD PTR [rax]
  007f5:    	lea    rax,[rax+0x10]
  007f9:    	mov    rax,QWORD PTR [rax-0x50]
  007fd: ff 	mov    QWORD PTR [rbp-0x98],rax
:00045 %14 = %7 / %14                       [Float][Float]
  00804:    	mov    rdi,QWORD PTR [rbp-0x60]
  00808: 00 	test   rdi,0x1
  0080f:    	jne    0x3be2d
  00815: 00 	test   rdi,0x2
  0081c:    	je     0x858
  00822:    	xorps  xmm3,xmm3
  00825: 00 	movabs rax,0x8000000000000002
  0082f:    	cmp    rdi,rax
  00832:    	je     0x86a
  00838:    	mov    rax,rdi
  0083b:    	sar    rax,0x3f
  0083f:    	add    rax,0x2
  00843:    	and    rdi,0xfffffffffffffffc
  00847:    	or     rdi,rax
  0084a:    	rol    rdi,0x3d
  0084e:    	movq   xmm3,rdi
  00853:    	jmp    0x86a
  00858:    	call   0xffffa194
  0085d:    	test   rax,rax
  00860:    	je     0x3be2d
  00866:    	movq   xmm3,xmm0
  0086a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00871: 00 	test   rdi,0x1
  00878:    	jne    0x3be59
  0087e: 00 	test   rdi,0x2
  00885:    	je     0x8c2
  0088b:    	xorps  xmm8,xmm8
  0088f: 00 	movabs rax,0x8000000000000002
  00899:    	cmp    rdi,rax
  0089c:    	je     0x8d5
  008a2:    	mov    rax,rdi
  008a5:    	sar    rax,0x3f
  008a9:    	add    rax,0x2
  008ad:    	and    rdi,0xfffffffffffffffc
  008b1:    	or     rdi,rax
  008b4:    	rol    rdi,0x3d
  008b8:    	movq   xmm8,rdi
  008bd:    	jmp    0x8d5
  008c2:    	call   0xffffa194
  008c7:    	test   rax,rax
  008ca:    	je     0x3be59
  008d0:    	movq   xmm8,xmm0
  008d5:    	movq   rax,xmm8
  008da:    	test   rax,rax
  008dd:    	je     0xffffa180
  008e3:    	movq   xmm0,xmm3
  008e7:    	divsd  xmm0,xmm8
  008ec:    	movq   xmm8,xmm0
:00046 %14 = %5 + %14                       [Float][Float]
  008f1:    	mov    rdi,QWORD PTR [rbp-0x50]
  008f5: 00 	test   rdi,0x1
  008fc:    	jne    0x3be85
  00902: 00 	test   rdi,0x2
  00909:    	je     0x946
  0090f:    	xorps  xmm9,xmm9
  00913: 00 	movabs rax,0x8000000000000002
  0091d:    	cmp    rdi,rax
  00920:    	je     0x959
  00926:    	mov    rax,rdi
  00929:    	sar    rax,0x3f
  0092d:    	add    rax,0x2
  00931:    	and    rdi,0xfffffffffffffffc
  00935:    	or     rdi,rax
  00938:    	rol    rdi,0x3d
  0093c:    	movq   xmm9,rdi
  00941:    	jmp    0x959
  00946:    	call   0xffffa194
  0094b:    	test   rax,rax
  0094e:    	je     0x3be85
  00954:    	movq   xmm9,xmm0
  00959:    	addsd  xmm8,xmm9
:00047 %15 = literal[2.0]
  0095e: 00 	movq   xmm5,QWORD PTR [rip+0x1e8a]        # 0x27f0
:00048 %15 = %3 / %15                       [Float][Float]
  00966:    	mov    rdi,QWORD PTR [rbp-0x40]
  0096a: 00 	test   rdi,0x1
  00971:    	jne    0x3bec2
  00977: 00 	test   rdi,0x2
  0097e:    	je     0x9bb
  00984:    	xorps  xmm10,xmm10
  00988: 00 	movabs rax,0x8000000000000002
  00992:    	cmp    rdi,rax
  00995:    	je     0x9ce
  0099b:    	mov    rax,rdi
  0099e:    	sar    rax,0x3f
  009a2:    	add    rax,0x2
  009a6:    	and    rdi,0xfffffffffffffffc
  009aa:    	or     rdi,rax
  009ad:    	rol    rdi,0x3d
  009b1:    	movq   xmm10,rdi
  009b6:    	jmp    0x9ce
  009bb:    	call   0xffffa194
  009c0:    	test   rax,rax
  009c3:    	je     0x3bec2
  009c9:    	movq   xmm10,xmm0
  009ce:    	movq   rax,xmm5
  009d3:    	test   rax,rax
  009d6:    	je     0xffffa180
  009dc:    	movq   xmm0,xmm10
  009e1:    	divsd  xmm0,xmm5
  009e5:    	movq   xmm5,xmm0
:00049 %14 = %14 - %15                      [Float][Float]
  009e9:    	subsd  xmm8,xmm5
:00050 %14 = neg %14                        [Float]
  009ee: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1e0a]        # 0x2800
:00051 %15 = literal[2.0]
  009f6: 00 	movq   xmm5,QWORD PTR [rip+0x1e12]        # 0x2810
:00052 %15 = %3 / %15                       [Float][Float]
  009fe:    	movq   rax,xmm5
  00a03:    	test   rax,rax
  00a06:    	je     0xffffa180
  00a0c:    	movq   xmm0,xmm10
  00a11:    	divsd  xmm0,xmm5
  00a15:    	movq   xmm5,xmm0
:00053 %9 = %14 / %15                       [Float][Float]
  00a19:    	movq   xmm11,xmm8
  00a1e:    	movq   rax,xmm5
  00a23:    	test   rax,rax
  00a26:    	je     0xffffa180
  00a2c:    	divsd  xmm11,xmm5
:00054 %15 = const[Vec]                     [Vec]
  00a31: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc108]        # 0xffffcb40
  00a38: 00 	cmp    rax,QWORD PTR [rip+0x1df1]        # 0x2830
  00a3f:    	jne    0x3beff
  00a45: 00 	mov    rax,QWORD PTR [rip+0x1dd4]        # 0x2820
  00a4c: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00055 %16 = %8
:00056 %17 = %9
:00057 %18 = literal[-1.0]
  00a53: 00 	movq   xmm5,QWORD PTR [rip+0x1de5]        # 0x2840
:00058 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
:00059 
  00a5b:    	movq   xmm0,xmm7
  00a5f:    	call   0xffffa287
  00a64: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00a6b:    	movq   xmm0,xmm11
  00a70:    	call   0xffffa287
  00a75: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00a7c:    	movq   xmm0,xmm5
  00a80:    	call   0xffffa287
  00a85: ff 	mov    QWORD PTR [rbp-0xb8],rax
  00a8c: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00a93: 00 	test   rdi,0x7
  00a9a:    	jne    0x3bfbf
  00aa0:    	cmp    DWORD PTR [rdi+0x4],0x26
  00aa4:    	jne    0x3bfbf
  00aaa: 26 	cmp    DWORD PTR [rip+0xffffffffffffc08a],0x26        # 0xffffcb3b
  00ab1:    	jne    0x3bfbf
  00ab7: 00 	mov    r9,0x0
  00abe:    	sub    rsp,0x50
  00ac2:    	movq   QWORD PTR [rsp],xmm2
  00ac7:    	movq   QWORD PTR [rsp+0x8],xmm3
  00acd:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ad3:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ad9:    	movq   QWORD PTR [rsp+0x20],xmm6
  00adf:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ae5: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00aec: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00af3: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00afa:    	mov    rdx,rdi
  00afd:    	mov    rax,QWORD PTR [rbx]
  00b00:    	lea    rdi,[rsp-0x18]
  00b05:    	mov    QWORD PTR [rdi],rax
  00b08:    	mov    QWORD PTR [rbx],rdi
  00b0b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b14:    	mov    QWORD PTR [rsp-0x38],rcx
  00b19: ff 	lea    rcx,[rbp-0xa8]
  00b20: 00 	mov    r8,0x3
  00b27:    	call   0x3bfe9
  00b2c:    	mov    rdi,QWORD PTR [rsp-0x18]
  00b31:    	mov    QWORD PTR [rbx],rdi
  00b34:    	movq   xmm2,QWORD PTR [rsp]
  00b39:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b3f:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b45:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b4b:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b51:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b57: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00b5e: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00b65: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00b6c:    	add    rsp,0x50
  00b70: d0 	movabs r13,0x55d0b3234580
  00b7a:    	test   rax,rax
  00b7d:    	je     0xffffa15b
  00b83: ff 	mov    QWORD PTR [rbp-0x98],rax
:00061 %10 = %14.call vnormalize()          [Vec]
:00062 
  00b8a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00b91: 00 	test   rdi,0x7
  00b98:    	jne    0x3c017
  00b9e:    	cmp    DWORD PTR [rdi+0x4],0x25
  00ba2:    	jne    0x3c017
  00ba8: 26 	cmp    DWORD PTR [rip+0xffffffffffffbf8c],0x26        # 0xffffcb3b
  00baf:    	jne    0x3c017
  00bb5:    	sub    rsp,0x50
  00bb9:    	movq   QWORD PTR [rsp],xmm2
  00bbe:    	movq   QWORD PTR [rsp+0x8],xmm3
  00bc4:    	movq   QWORD PTR [rsp+0x10],xmm4
  00bca:    	movq   QWORD PTR [rsp+0x18],xmm5
  00bd0:    	movq   QWORD PTR [rsp+0x20],xmm6
  00bd6:    	movq   QWORD PTR [rsp+0x28],xmm7
  00bdc: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00be3: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00bea: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00bf1:    	mov    rax,QWORD PTR [rbx]
  00bf4:    	lea    rdi,[rsp-0x18]
  00bf9:    	mov    QWORD PTR [rdi],rax
  00bfc:    	mov    QWORD PTR [rbx],rdi
  00bff: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c08:    	mov    QWORD PTR [rsp-0x38],rcx
  00c0d: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00c14:    	mov    QWORD PTR [rsp-0x38],rax
  00c19: 00 	mov    rdi,0x0
  00c20: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c29: 07 	movabs rax,0x70000003b
  00c33:    	mov    QWORD PTR [rsp-0x28],rax
  00c38: d0 	movabs r13,0x55d0b321f9a0
  00c42:    	call   0xffffd40b
  00c47:    	mov    rdi,QWORD PTR [rsp-0x18]
  00c4c:    	mov    QWORD PTR [rbx],rdi
  00c4f:    	movq   xmm2,QWORD PTR [rsp]
  00c54:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c5a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c60:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c66:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00c6c:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00c72: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00c79: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00c80: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00c87:    	add    rsp,0x50
  00c8b: d0 	movabs r13,0x55d0b32345b0
  00c95:    	test   rax,rax
  00c98:    	je     0xffffa15b
  00c9e:    	mov    QWORD PTR [rbp-0x78],rax
:00064 %14 = const[Ray]                     [Ray]
  00ca2: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffbe97]        # 0xffffcb40
  00ca9: 00 	cmp    rax,QWORD PTR [rip+0x1bb0]        # 0x2860
  00cb0:    	jne    0x3c041
  00cb6: 00 	mov    rax,QWORD PTR [rip+0x1b93]        # 0x2850
  00cbd: ff 	mov    QWORD PTR [rbp-0x98],rax
:00065 %16 = const[Vec]                     [Vec]
  00cc4: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffbe75]        # 0xffffcb40
  00ccb: 00 	cmp    rax,QWORD PTR [rip+0x1bae]        # 0x2880
  00cd2:    	jne    0x3c0ff
  00cd8: 00 	mov    rax,QWORD PTR [rip+0x1b91]        # 0x2870
  00cdf: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00066 %17 = literal[0.0]
  00ce6: 1b 	movq   xmm8,QWORD PTR [rip+0x1ba1]        # 0x2890
:00067 %18 = literal[0.0]
  00cef: 00 	movq   xmm5,QWORD PTR [rip+0x1ba9]        # 0x28a0
:00068 %19 = literal[0.0]
  00cf7: 1b 	movq   xmm12,QWORD PTR [rip+0x1bb0]        # 0x28b0
:00069 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
:00070 
  00d00:    	movq   xmm0,xmm8
  00d05:    	call   0xffffa287
  00d0a: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00d11:    	movq   xmm0,xmm5
  00d15:    	call   0xffffa287
  00d1a: ff 	mov    QWORD PTR [rbp-0xb8],rax
  00d21:    	movq   xmm0,xmm12
  00d26:    	call   0xffffa287
  00d2b: ff 	mov    QWORD PTR [rbp-0xc0],rax
  00d32: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  00d39: 00 	test   rdi,0x7
  00d40:    	jne    0x3c1bd
  00d46:    	cmp    DWORD PTR [rdi+0x4],0x26
  00d4a:    	jne    0x3c1bd
  00d50: 26 	cmp    DWORD PTR [rip+0xffffffffffffbde4],0x26        # 0xffffcb3b
  00d57:    	jne    0x3c1bd
  00d5d: 00 	mov    r9,0x0
  00d64:    	sub    rsp,0x60
  00d68:    	movq   QWORD PTR [rsp],xmm2
  00d6d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d73:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d79:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d7f:    	movq   QWORD PTR [rsp+0x20],xmm6
  00d85:    	movq   QWORD PTR [rsp+0x28],xmm7
  00d8b: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00d92: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00d99: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00da0: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00da7: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00dae:    	mov    rdx,rdi
  00db1:    	mov    rax,QWORD PTR [rbx]
  00db4:    	lea    rdi,[rsp-0x18]
  00db9:    	mov    QWORD PTR [rdi],rax
  00dbc:    	mov    QWORD PTR [rbx],rdi
  00dbf: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00dc8:    	mov    QWORD PTR [rsp-0x38],rcx
  00dcd: ff 	lea    rcx,[rbp-0xb0]
  00dd4: 00 	mov    r8,0x3
  00ddb:    	call   0x3c1e7
  00de0:    	mov    rdi,QWORD PTR [rsp-0x18]
  00de5:    	mov    QWORD PTR [rbx],rdi
  00de8:    	movq   xmm2,QWORD PTR [rsp]
  00ded:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00df3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00df9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dff:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e05:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e0b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00e12: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00e19: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00e20: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00e27: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00e2e:    	add    rsp,0x60
  00e32: d0 	movabs r13,0x55d0b3234630
  00e3c:    	test   rax,rax
  00e3f:    	je     0xffffa15b
  00e45: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00072 %16 = %10
  00e4c:    	mov    rax,QWORD PTR [rbp-0x78]
  00e50: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00073 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
:00074 
  00e57: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e5e: 00 	test   rdi,0x7
  00e65:    	jne    0x3c215
  00e6b:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00e6f:    	jne    0x3c215
  00e75: 26 	cmp    DWORD PTR [rip+0xffffffffffffbcbf],0x26        # 0xffffcb3b
  00e7c:    	jne    0x3c215
  00e82: 00 	mov    r9,0x0
  00e89:    	sub    rsp,0x60
  00e8d:    	movq   QWORD PTR [rsp],xmm2
  00e92:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e98:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e9e:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ea4:    	movq   QWORD PTR [rsp+0x20],xmm6
  00eaa:    	movq   QWORD PTR [rsp+0x28],xmm7
  00eb0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00eb7: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00ebe: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ec5: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00ecc: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00ed3:    	mov    rdx,rdi
  00ed6:    	mov    rax,QWORD PTR [rbx]
  00ed9:    	lea    rdi,[rsp-0x18]
  00ede:    	mov    QWORD PTR [rdi],rax
  00ee1:    	mov    QWORD PTR [rbx],rdi
  00ee4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00eed:    	mov    QWORD PTR [rsp-0x38],rcx
  00ef2: ff 	lea    rcx,[rbp-0xa0]
  00ef9: 00 	mov    r8,0x2
  00f00:    	call   0x3c23f
  00f05:    	mov    rdi,QWORD PTR [rsp-0x18]
  00f0a:    	mov    QWORD PTR [rbx],rdi
  00f0d:    	movq   xmm2,QWORD PTR [rsp]
  00f12:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f18:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f1e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f24:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f2a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f30: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00f37: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00f3e: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00f45: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00f4c: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00f53:    	add    rsp,0x60
  00f57: d0 	movabs r13,0x55d0b3234670
  00f61:    	test   rax,rax
  00f64:    	je     0xffffa15b
  00f6a:    	mov    QWORD PTR [rbp-0x80],rax
:00076 %14 = const[Isect]                   [Isect]
  00f6e: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffbbcb]        # 0xffffcb40
  00f75: 00 	cmp    rax,QWORD PTR [rip+0x1954]        # 0x28d0
  00f7c:    	jne    0x3c26d
  00f82: 00 	mov    rax,QWORD PTR [rip+0x1937]        # 0x28c0
  00f89: ff 	mov    QWORD PTR [rbp-0x98],rax
:00077 %12 = %14.call new()                 [#<Class:Isect>]
:00078 
  00f90: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00f97: 00 	test   rdi,0x7
  00f9e:    	jne    0x3c347
  00fa4:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00fa8:    	jne    0x3c347
  00fae: 26 	cmp    DWORD PTR [rip+0xffffffffffffbb86],0x26        # 0xffffcb3b
  00fb5:    	jne    0x3c347
  00fbb: 00 	mov    r9,0x0
  00fc2:    	sub    rsp,0x60
  00fc6:    	movq   QWORD PTR [rsp],xmm2
  00fcb:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fd1:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fd7:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fdd:    	movq   QWORD PTR [rsp+0x20],xmm6
  00fe3:    	movq   QWORD PTR [rsp+0x28],xmm7
  00fe9: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00ff0: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00ff7: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ffe: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01005: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0100c:    	mov    rdx,rdi
  0100f:    	mov    rax,QWORD PTR [rbx]
  01012:    	lea    rdi,[rsp-0x18]
  01017:    	mov    QWORD PTR [rdi],rax
  0101a:    	mov    QWORD PTR [rbx],rdi
  0101d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01026:    	mov    QWORD PTR [rsp-0x38],rcx
  0102b: ff 	lea    rcx,[rbp-0xa0]
  01032: 00 	mov    r8,0x0
  01039:    	call   0x3c371
  0103e:    	mov    rdi,QWORD PTR [rsp-0x18]
  01043:    	mov    QWORD PTR [rbx],rdi
  01046:    	movq   xmm2,QWORD PTR [rsp]
  0104b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01051:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01057:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0105d:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01063:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01069: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01070: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01077: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0107e: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01085: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0108c:    	add    rsp,0x60
  01090: d0 	movabs r13,0x55d0b32346b0
  0109a:    	test   rax,rax
  0109d:    	je     0xffffa15b
  010a3: ff 	mov    QWORD PTR [rbp-0x88],rax
:00080 %14 = @spheres: Scene[IvarId(0)]
  010aa:    	mov    rdi,QWORD PTR [rbp-0x28]
  010ae:    	xor    rax,rax
  010b1:    	mov    ax,WORD PTR [rdi+0x2]
  010b5:    	cmp    rax,0x3
  010b9:    	jne    0x3c39f
  010bf:    	mov    rax,QWORD PTR [rdi+0x10]
  010c3: ff 	mov    QWORD PTR [rbp-0x98],rax
:00081 %15 = 0: i32
  010ca: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00082 %14 = %14.[%15]
  010d5:    	sub    rsp,0x60
  010d9:    	movq   QWORD PTR [rsp],xmm2
  010de:    	movq   QWORD PTR [rsp+0x8],xmm3
  010e4:    	movq   QWORD PTR [rsp+0x10],xmm4
  010ea:    	movq   QWORD PTR [rsp+0x18],xmm5
  010f0:    	movq   QWORD PTR [rsp+0x20],xmm6
  010f6:    	movq   QWORD PTR [rsp+0x28],xmm7
  010fc: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01103: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0110a: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01111: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01118: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0111f: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01126: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0112d:    	mov    rdi,rbx
  01130:    	mov    rsi,r12
  01133: d0 	movabs rax,0x55d0b27af2f0
  0113d:    	call   rax
  0113f:    	movq   xmm2,QWORD PTR [rsp]
  01144:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0114a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01150:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01156:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0115c:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01162: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01169: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01170: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01177: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0117e: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01185:    	add    rsp,0x60
  01189: d0 	movabs r13,0x55d0b32346f0
  01193:    	test   rax,rax
  01196:    	je     0xffffa15b
  0119c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00083 %15 = %11
  011a3:    	mov    rax,QWORD PTR [rbp-0x80]
  011a7: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00084 %16 = %12
  011ae: ff 	mov    rax,QWORD PTR [rbp-0x88]
  011b5: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00085 _ = %14.call intersect(%15; 2)       [Sphere]
:00086 
  011bc: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  011c3: 00 	test   rdi,0x7
  011ca:    	jne    0x3c449
  011d0:    	cmp    DWORD PTR [rdi+0x4],0x27
  011d4:    	jne    0x3c449
  011da: 26 	cmp    DWORD PTR [rip+0xffffffffffffb95a],0x26        # 0xffffcb3b
  011e1:    	jne    0x3c449
  011e7:    	sub    rsp,0x60
  011eb:    	movq   QWORD PTR [rsp],xmm2
  011f0:    	movq   QWORD PTR [rsp+0x8],xmm3
  011f6:    	movq   QWORD PTR [rsp+0x10],xmm4
  011fc:    	movq   QWORD PTR [rsp+0x18],xmm5
  01202:    	movq   QWORD PTR [rsp+0x20],xmm6
  01208:    	movq   QWORD PTR [rsp+0x28],xmm7
  0120e: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01215: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0121c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01223: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0122a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01231:    	mov    rax,QWORD PTR [rbx]
  01234:    	lea    rdi,[rsp-0x18]
  01239:    	mov    QWORD PTR [rdi],rax
  0123c:    	mov    QWORD PTR [rbx],rdi
  0123f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01248:    	mov    QWORD PTR [rsp-0x38],rcx
  0124d: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01254:    	mov    QWORD PTR [rsp-0x38],rax
  01259: 00 	mov    rdi,0x2
  01260: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01267:    	mov    QWORD PTR [rsp-0x40],rax
  0126c: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01273:    	mov    QWORD PTR [rsp-0x48],rax
  01278: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01281: 11 	movabs rax,0x110000003d
  0128b:    	mov    QWORD PTR [rsp-0x28],rax
  01290: d0 	movabs r13,0x55d0b3224220
  0129a:    	call   0xffffd713
  0129f:    	mov    rdi,QWORD PTR [rsp-0x18]
  012a4:    	mov    QWORD PTR [rbx],rdi
  012a7:    	movq   xmm2,QWORD PTR [rsp]
  012ac:    	movq   xmm3,QWORD PTR [rsp+0x8]
  012b2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  012b8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  012be:    	movq   xmm6,QWORD PTR [rsp+0x20]
  012c4:    	movq   xmm7,QWORD PTR [rsp+0x28]
  012ca: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  012d1: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  012d8: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  012df: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  012e6: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  012ed:    	add    rsp,0x60
  012f1: d0 	movabs r13,0x55d0b3234730
  012fb:    	test   rax,rax
  012fe:    	je     0xffffa15b
:00088 %14 = @spheres: Scene[IvarId(0)]
  01304:    	mov    rdi,QWORD PTR [rbp-0x28]
  01308:    	xor    rax,rax
  0130b:    	mov    ax,WORD PTR [rdi+0x2]
  0130f:    	cmp    rax,0x3
  01313:    	jne    0x3c473
  01319:    	mov    rax,QWORD PTR [rdi+0x10]
  0131d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %15 = 1: i32
  01324: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00090 %14 = %14.[%15]
  0132f:    	sub    rsp,0x60
  01333:    	movq   QWORD PTR [rsp],xmm2
  01338:    	movq   QWORD PTR [rsp+0x8],xmm3
  0133e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01344:    	movq   QWORD PTR [rsp+0x18],xmm5
  0134a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01350:    	movq   QWORD PTR [rsp+0x28],xmm7
  01356: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0135d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01364: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0136b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01372: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01379: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01380: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  01387:    	mov    rdi,rbx
  0138a:    	mov    rsi,r12
  0138d: d0 	movabs rax,0x55d0b27af2f0
  01397:    	call   rax
  01399:    	movq   xmm2,QWORD PTR [rsp]
  0139e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013a4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  013aa:    	movq   xmm5,QWORD PTR [rsp+0x18]
  013b0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  013b6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  013bc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  013c3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  013ca: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  013d1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  013d8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  013df:    	add    rsp,0x60
  013e3: d0 	movabs r13,0x55d0b3234770
  013ed:    	test   rax,rax
  013f0:    	je     0xffffa15b
  013f6: ff 	mov    QWORD PTR [rbp-0x98],rax
:00091 %15 = %11
  013fd:    	mov    rax,QWORD PTR [rbp-0x80]
  01401: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00092 %16 = %12
  01408: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0140f: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00093 _ = %14.call intersect(%15; 2)       [Sphere]
:00094 
  01416: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0141d: 00 	test   rdi,0x7
  01424:    	jne    0x3c51d
  0142a:    	cmp    DWORD PTR [rdi+0x4],0x27
  0142e:    	jne    0x3c51d
  01434: 26 	cmp    DWORD PTR [rip+0xffffffffffffb700],0x26        # 0xffffcb3b
  0143b:    	jne    0x3c51d
  01441:    	sub    rsp,0x60
  01445:    	movq   QWORD PTR [rsp],xmm2
  0144a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01450:    	movq   QWORD PTR [rsp+0x10],xmm4
  01456:    	movq   QWORD PTR [rsp+0x18],xmm5
  0145c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01462:    	movq   QWORD PTR [rsp+0x28],xmm7
  01468: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0146f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01476: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0147d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01484: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0148b:    	mov    rax,QWORD PTR [rbx]
  0148e:    	lea    rdi,[rsp-0x18]
  01493:    	mov    QWORD PTR [rdi],rax
  01496:    	mov    QWORD PTR [rbx],rdi
  01499: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014a2:    	mov    QWORD PTR [rsp-0x38],rcx
  014a7: ff 	mov    rax,QWORD PTR [rbp-0x98]
  014ae:    	mov    QWORD PTR [rsp-0x38],rax
  014b3: 00 	mov    rdi,0x2
  014ba: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  014c1:    	mov    QWORD PTR [rsp-0x40],rax
  014c6: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  014cd:    	mov    QWORD PTR [rsp-0x48],rax
  014d2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014db: 11 	movabs rax,0x110000003d
  014e5:    	mov    QWORD PTR [rsp-0x28],rax
  014ea: d0 	movabs r13,0x55d0b3224220
  014f4:    	call   0xffffd713
  014f9:    	mov    rdi,QWORD PTR [rsp-0x18]
  014fe:    	mov    QWORD PTR [rbx],rdi
  01501:    	movq   xmm2,QWORD PTR [rsp]
  01506:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0150c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01512:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01518:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0151e:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01524: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0152b: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01532: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01539: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01540: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01547:    	add    rsp,0x60
  0154b: d0 	movabs r13,0x55d0b32347b0
  01555:    	test   rax,rax
  01558:    	je     0xffffa15b
:00096 %14 = @spheres: Scene[IvarId(0)]
  0155e:    	mov    rdi,QWORD PTR [rbp-0x28]
  01562:    	xor    rax,rax
  01565:    	mov    ax,WORD PTR [rdi+0x2]
  01569:    	cmp    rax,0x3
  0156d:    	jne    0x3c547
  01573:    	mov    rax,QWORD PTR [rdi+0x10]
  01577: ff 	mov    QWORD PTR [rbp-0x98],rax
:00097 %15 = 2: i32
  0157e: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00098 %14 = %14.[%15]
  01589:    	sub    rsp,0x60
  0158d:    	movq   QWORD PTR [rsp],xmm2
  01592:    	movq   QWORD PTR [rsp+0x8],xmm3
  01598:    	movq   QWORD PTR [rsp+0x10],xmm4
  0159e:    	movq   QWORD PTR [rsp+0x18],xmm5
  015a4:    	movq   QWORD PTR [rsp+0x20],xmm6
  015aa:    	movq   QWORD PTR [rsp+0x28],xmm7
  015b0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015b7: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015be: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  015c5: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  015cc: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  015d3: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  015da: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  015e1:    	mov    rdi,rbx
  015e4:    	mov    rsi,r12
  015e7: d0 	movabs rax,0x55d0b27af2f0
  015f1:    	call   rax
  015f3:    	movq   xmm2,QWORD PTR [rsp]
  015f8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015fe:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01604:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0160a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01610:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01616: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0161d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01624: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0162b: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01632: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01639:    	add    rsp,0x60
  0163d: d0 	movabs r13,0x55d0b32347f0
  01647:    	test   rax,rax
  0164a:    	je     0xffffa15b
  01650: ff 	mov    QWORD PTR [rbp-0x98],rax
:00099 %15 = %11
  01657:    	mov    rax,QWORD PTR [rbp-0x80]
  0165b: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00100 %16 = %12
  01662: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01669: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00101 _ = %14.call intersect(%15; 2)       [Sphere]
:00102 
  01670: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01677: 00 	test   rdi,0x7
  0167e:    	jne    0x3c5f1
  01684:    	cmp    DWORD PTR [rdi+0x4],0x27
  01688:    	jne    0x3c5f1
  0168e: 26 	cmp    DWORD PTR [rip+0xffffffffffffb4a6],0x26        # 0xffffcb3b
  01695:    	jne    0x3c5f1
  0169b:    	sub    rsp,0x60
  0169f:    	movq   QWORD PTR [rsp],xmm2
  016a4:    	movq   QWORD PTR [rsp+0x8],xmm3
  016aa:    	movq   QWORD PTR [rsp+0x10],xmm4
  016b0:    	movq   QWORD PTR [rsp+0x18],xmm5
  016b6:    	movq   QWORD PTR [rsp+0x20],xmm6
  016bc:    	movq   QWORD PTR [rsp+0x28],xmm7
  016c2: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  016c9: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  016d0: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  016d7: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  016de: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  016e5:    	mov    rax,QWORD PTR [rbx]
  016e8:    	lea    rdi,[rsp-0x18]
  016ed:    	mov    QWORD PTR [rdi],rax
  016f0:    	mov    QWORD PTR [rbx],rdi
  016f3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016fc:    	mov    QWORD PTR [rsp-0x38],rcx
  01701: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01708:    	mov    QWORD PTR [rsp-0x38],rax
  0170d: 00 	mov    rdi,0x2
  01714: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0171b:    	mov    QWORD PTR [rsp-0x40],rax
  01720: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01727:    	mov    QWORD PTR [rsp-0x48],rax
  0172c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01735: 11 	movabs rax,0x110000003d
  0173f:    	mov    QWORD PTR [rsp-0x28],rax
  01744: d0 	movabs r13,0x55d0b3224220
  0174e:    	call   0xffffd713
  01753:    	mov    rdi,QWORD PTR [rsp-0x18]
  01758:    	mov    QWORD PTR [rbx],rdi
  0175b:    	movq   xmm2,QWORD PTR [rsp]
  01760:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01766:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0176c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01772:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01778:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0177e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01785: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0178c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01793: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0179a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  017a1:    	add    rsp,0x60
  017a5: d0 	movabs r13,0x55d0b3234830
  017af:    	test   rax,rax
  017b2:    	je     0xffffa15b
:00104 %14 = @plane: Scene[IvarId(1)]
  017b8:    	mov    rdi,QWORD PTR [rbp-0x28]
  017bc:    	xor    rax,rax
  017bf:    	mov    ax,WORD PTR [rdi+0x2]
  017c3:    	cmp    rax,0x3
  017c7:    	jne    0x3c61b
  017cd:    	mov    rax,QWORD PTR [rdi+0x18]
  017d1: ff 	mov    QWORD PTR [rbp-0x98],rax
:00105 %15 = %11
  017d8:    	mov    rax,QWORD PTR [rbp-0x80]
  017dc: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00106 %16 = %12
  017e3: ff 	mov    rax,QWORD PTR [rbp-0x88]
  017ea: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00107 _ = %14.call intersect(%15; 2)       [Plane]
:00108 
  017f1: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  017f8: 00 	test   rdi,0x7
  017ff:    	jne    0x3c6c5
  01805:    	cmp    DWORD PTR [rdi+0x4],0x29
  01809:    	jne    0x3c6c5
  0180f: 26 	cmp    DWORD PTR [rip+0xffffffffffffb325],0x26        # 0xffffcb3b
  01816:    	jne    0x3c6c5
  0181c:    	sub    rsp,0x60
  01820:    	movq   QWORD PTR [rsp],xmm2
  01825:    	movq   QWORD PTR [rsp+0x8],xmm3
  0182b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01831:    	movq   QWORD PTR [rsp+0x18],xmm5
  01837:    	movq   QWORD PTR [rsp+0x20],xmm6
  0183d:    	movq   QWORD PTR [rsp+0x28],xmm7
  01843: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0184a: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01851: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01858: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0185f: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01866:    	mov    rax,QWORD PTR [rbx]
  01869:    	lea    rdi,[rsp-0x18]
  0186e:    	mov    QWORD PTR [rdi],rax
  01871:    	mov    QWORD PTR [rbx],rdi
  01874: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0187d:    	mov    QWORD PTR [rsp-0x38],rcx
  01882: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01889:    	mov    QWORD PTR [rsp-0x38],rax
  0188e: 00 	mov    rdi,0x2
  01895: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0189c:    	mov    QWORD PTR [rsp-0x40],rax
  018a1: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  018a8:    	mov    QWORD PTR [rsp-0x48],rax
  018ad: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018b6: 0f 	movabs rax,0xf0000003f
  018c0:    	mov    QWORD PTR [rsp-0x28],rax
  018c5: d0 	movabs r13,0x55d0b3204530
  018cf:    	call   0xffffdd40
  018d4:    	mov    rdi,QWORD PTR [rsp-0x18]
  018d9:    	mov    QWORD PTR [rbx],rdi
  018dc:    	movq   xmm2,QWORD PTR [rsp]
  018e1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  018e7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  018ed:    	movq   xmm5,QWORD PTR [rsp+0x18]
  018f3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  018f9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  018ff: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01906: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0190d: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01914: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0191b: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01922:    	add    rsp,0x60
  01926: d0 	movabs r13,0x55d0b3234890
  01930:    	test   rax,rax
  01933:    	je     0xffffa15b
:00110 %15 = %12
  01939: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01940: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00111 %14 = %15.call hit()                 [Isect]
:00112 
  01947: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0194e: 00 	test   rdi,0x7
  01955:    	jne    0x3c6ef
  0195b:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0195f:    	jne    0x3c6ef
  01965: 26 	cmp    DWORD PTR [rip+0xffffffffffffb1cf],0x26        # 0xffffcb3b
  0196c:    	jne    0x3c6ef
  01972:    	mov    esi,DWORD PTR [rip+0xf64]        # 0x28dc
  01978:    	cmp    esi,0xffffffff
  0197b:    	je     0x3c719
  01981:    	xor    rax,rax
  01984:    	mov    ax,WORD PTR [rdi+0x2]
  01988:    	cmp    rax,0x3
  0198c:    	jne    0x19a5
  01992:    	cmp    esi,0x6
  01995:    	jge    0x19a5
  0199b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  019a0:    	jmp    0x1a45
  019a5:    	sub    rsp,0x60
  019a9:    	movq   QWORD PTR [rsp],xmm2
  019ae:    	movq   QWORD PTR [rsp+0x8],xmm3
  019b4:    	movq   QWORD PTR [rsp+0x10],xmm4
  019ba:    	movq   QWORD PTR [rsp+0x18],xmm5
  019c0:    	movq   QWORD PTR [rsp+0x20],xmm6
  019c6:    	movq   QWORD PTR [rsp+0x28],xmm7
  019cc: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  019d3: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  019da: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  019e1: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  019e8: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  019ef: d0 	movabs rax,0x55d0b27c8be0
  019f9:    	call   rax
  019fb:    	movq   xmm2,QWORD PTR [rsp]
  01a00:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01a06:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01a0c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01a12:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01a18:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01a1e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01a25: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01a2c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01a33: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01a3a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01a41:    	add    rsp,0x60
  01a45: ff 	mov    QWORD PTR [rbp-0x98],rax
:00114 condnotbr %14 =>:00160
  01a4c: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01a53:    	or     rax,0x10
  01a57:    	cmp    rax,0x14
  01a5b:    	je     0x27a6
:00115 %14 = %12
  01a61: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01a68: ff 	mov    QWORD PTR [rbp-0x98],rax
:00116 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
:00117 
  01a6f:    	sub    rsp,0x60
  01a73:    	movq   QWORD PTR [rsp],xmm2
  01a78:    	movq   QWORD PTR [rsp+0x8],xmm3
  01a7e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01a84:    	movq   QWORD PTR [rsp+0x18],xmm5
  01a8a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01a90:    	movq   QWORD PTR [rsp+0x28],xmm7
  01a96: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01a9d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01aa4: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01aab: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01ab2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01ab9:    	mov    r15d,0x2f
  01abf: 00 	cmp    r15d,DWORD PTR [rip+0xe1e]        # 0x28e4
  01ac6:    	jne    0x3c7d6
  01acc:    	mov    eax,DWORD PTR [rip+0xffffffffffffb069]        # 0xffffcb3b
  01ad2:    	cmp    DWORD PTR [rip+0xe08],eax        # 0x28e0
  01ad8:    	jne    0x3c7d6
  01ade:    	mov    rax,QWORD PTR [rbx]
  01ae1:    	lea    rdi,[rsp-0x18]
  01ae6:    	mov    QWORD PTR [rdi],rax
  01ae9:    	mov    QWORD PTR [rbx],rdi
  01aec: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01af5:    	mov    QWORD PTR [rsp-0x38],rcx
  01afa:    	mov    rax,QWORD PTR [rbp-0x28]
  01afe:    	mov    QWORD PTR [rsp-0x38],rax
  01b03: 00 	mov    rdi,0x1
  01b0a: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01b11:    	mov    QWORD PTR [rsp-0x40],rax
  01b16: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b1f: 00 	movabs rax,0x0
  01b29:    	mov    QWORD PTR [rsp-0x28],rax
  01b2e: 00 	movabs r13,0x0
  01b38:    	call   0xffffa120
  01b3d:    	mov    rdi,QWORD PTR [rsp-0x18]
  01b42:    	mov    QWORD PTR [rbx],rdi
  01b45:    	movq   xmm2,QWORD PTR [rsp]
  01b4a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01b50:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01b56:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01b5c:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01b62:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01b68: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01b6f: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01b76: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01b7d: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01b84: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01b8b:    	add    rsp,0x60
  01b8f:    	test   rax,rax
  01b92:    	je     0x3c842
  01b98: ff 	mov    QWORD PTR [rbp-0x90],rax
:00119 %14 = dynvar(2, %2)
  01b9f:    	mov    rax,QWORD PTR [rbp-0x10]
  01ba3:    	mov    rax,QWORD PTR [rax]
  01ba6:    	lea    rax,[rax+0x10]
  01baa:    	mov    rax,QWORD PTR [rax-0x38]
  01bae: ff 	mov    QWORD PTR [rbp-0x98],rax
:00120 %16 = dynvar(2, %2)
  01bb5:    	mov    rax,QWORD PTR [rbp-0x10]
  01bb9:    	mov    rax,QWORD PTR [rax]
  01bbc:    	lea    rax,[rax+0x10]
  01bc0:    	mov    rax,QWORD PTR [rax-0x38]
  01bc4: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00121 %15 = %16.call x()                   [<INVALID>]
:00122 
  01bcb:    	sub    rsp,0x60
  01bcf:    	movq   QWORD PTR [rsp],xmm2
  01bd4:    	movq   QWORD PTR [rsp+0x8],xmm3
  01bda:    	movq   QWORD PTR [rsp+0x10],xmm4
  01be0:    	movq   QWORD PTR [rsp+0x18],xmm5
  01be6:    	movq   QWORD PTR [rsp+0x20],xmm6
  01bec:    	movq   QWORD PTR [rsp+0x28],xmm7
  01bf2: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01bf9: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01c00: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01c07: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01c0e: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01c15: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01c1c: d0 	movabs rax,0x55d0b27bf4f0
  01c26:    	call   rax
  01c28:    	mov    r15d,eax
  01c2b: 00 	cmp    r15d,DWORD PTR [rip+0xcba]        # 0x28ec
  01c32:    	jne    0x3c851
  01c38:    	mov    eax,DWORD PTR [rip+0xffffffffffffaefd]        # 0xffffcb3b
  01c3e:    	cmp    DWORD PTR [rip+0xca4],eax        # 0x28e8
  01c44:    	jne    0x3c851
  01c4a:    	mov    rax,QWORD PTR [rbx]
  01c4d:    	lea    rdi,[rsp-0x18]
  01c52:    	mov    QWORD PTR [rdi],rax
  01c55:    	mov    QWORD PTR [rbx],rdi
  01c58: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01c61:    	mov    QWORD PTR [rsp-0x38],rcx
  01c66: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01c6d:    	mov    QWORD PTR [rsp-0x38],rax
  01c72: 00 	mov    rdi,0x0
  01c79: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01c82: 00 	movabs rax,0x0
  01c8c:    	mov    QWORD PTR [rsp-0x28],rax
  01c91: 00 	movabs r13,0x0
  01c9b:    	call   0xffffa120
  01ca0:    	mov    rdi,QWORD PTR [rsp-0x18]
  01ca5:    	mov    QWORD PTR [rbx],rdi
  01ca8:    	movq   xmm2,QWORD PTR [rsp]
  01cad:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01cb3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01cb9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01cbf:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01cc5:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01ccb: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01cd2: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01cd9: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01ce0: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01ce7: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01cee:    	add    rsp,0x60
  01cf2:    	test   rax,rax
  01cf5:    	je     0x3c8c0
  01cfb: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00124 %17 = %13
  01d02: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01d09: ff 	mov    QWORD PTR [rbp-0xb0],rax
:00125 %16 = %17.call x()                   [<INVALID>]
:00126 
  01d10:    	sub    rsp,0x50
  01d14:    	movq   QWORD PTR [rsp],xmm2
  01d19:    	movq   QWORD PTR [rsp+0x8],xmm3
  01d1f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01d25:    	movq   QWORD PTR [rsp+0x18],xmm5
  01d2b:    	movq   QWORD PTR [rsp+0x20],xmm6
  01d31:    	movq   QWORD PTR [rsp+0x28],xmm7
  01d37: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01d3e: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01d45: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  01d4c: 48 	movq   QWORD PTR [rsp+0x48],xmm12
  01d53: ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  01d5a: d0 	movabs rax,0x55d0b27bf4f0
  01d64:    	call   rax
  01d66:    	mov    r15d,eax
  01d69: 00 	cmp    r15d,DWORD PTR [rip+0xb84]        # 0x28f4
  01d70:    	jne    0x3c8cf
  01d76:    	mov    eax,DWORD PTR [rip+0xffffffffffffadbf]        # 0xffffcb3b
  01d7c:    	cmp    DWORD PTR [rip+0xb6e],eax        # 0x28f0
  01d82:    	jne    0x3c8cf
  01d88:    	mov    rax,QWORD PTR [rbx]
  01d8b:    	lea    rdi,[rsp-0x18]
  01d90:    	mov    QWORD PTR [rdi],rax
  01d93:    	mov    QWORD PTR [rbx],rdi
  01d96: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01d9f:    	mov    QWORD PTR [rsp-0x38],rcx
  01da4: ff 	mov    rax,QWORD PTR [rbp-0xb0]
  01dab:    	mov    QWORD PTR [rsp-0x38],rax
  01db0: 00 	mov    rdi,0x0
  01db7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01dc0: 00 	movabs rax,0x0
  01dca:    	mov    QWORD PTR [rsp-0x28],rax
  01dcf: 00 	movabs r13,0x0
  01dd9:    	call   0xffffa120
  01dde:    	mov    rdi,QWORD PTR [rsp-0x18]
  01de3:    	mov    QWORD PTR [rbx],rdi
  01de6:    	movq   xmm2,QWORD PTR [rsp]
  01deb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01df1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01df7:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01dfd:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e03:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e09: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01e10: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01e17: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  01e1e: 48 	movq   xmm12,QWORD PTR [rsp+0x48]
  01e25:    	add    rsp,0x50
  01e29:    	test   rax,rax
  01e2c:    	je     0x3c93e
  01e32: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00128 %15 = %15 + %16                      [Integer][Integer]
  01e39: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01e40: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  01e47: 00 	test   rdi,0x1
  01e4e:    	je     0x3c94d
  01e54: 00 	test   rsi,0x1
  01e5b:    	je     0x3c94d
  01e61:    	sub    rdi,0x1
  01e65:    	add    rdi,rsi
  01e68:    	jo     0x3c94d
  01e6e: ff 	mov    QWORD PTR [rbp-0xa0],rdi
:00129 _ = %14.call x=(%15; 1)              [<INVALID>]
:00130 
  01e75:    	sub    rsp,0x50
  01e79:    	movq   QWORD PTR [rsp],xmm2
  01e7e:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e84:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e8a:    	movq   QWORD PTR [rsp+0x18],xmm5
  01e90:    	movq   QWORD PTR [rsp+0x20],xmm6
  01e96:    	movq   QWORD PTR [rsp+0x28],xmm7
  01e9c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01ea3: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  01eaa: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  01eb1: 48 	movq   QWORD PTR [rsp+0x48],xmm12
  01eb8: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01ebf: d0 	movabs rax,0x55d0b27bf4f0
  01ec9:    	call   rax
  01ecb:    	mov    r15d,eax
  01ece: 00 	cmp    r15d,DWORD PTR [rip+0xa27]        # 0x28fc
  01ed5:    	jne    0x3c977
  01edb:    	mov    eax,DWORD PTR [rip+0xffffffffffffac5a]        # 0xffffcb3b
  01ee1:    	cmp    DWORD PTR [rip+0xa11],eax        # 0x28f8
  01ee7:    	jne    0x3c977
  01eed:    	mov    rax,QWORD PTR [rbx]
  01ef0:    	lea    rdi,[rsp-0x18]
  01ef5:    	mov    QWORD PTR [rdi],rax
  01ef8:    	mov    QWORD PTR [rbx],rdi
  01efb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01f04:    	mov    QWORD PTR [rsp-0x38],rcx
  01f09: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01f10:    	mov    QWORD PTR [rsp-0x38],rax
  01f15: 00 	mov    rdi,0x1
  01f1c: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01f23:    	mov    QWORD PTR [rsp-0x40],rax
  01f28: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01f31: 00 	movabs rax,0x0
  01f3b:    	mov    QWORD PTR [rsp-0x28],rax
  01f40: 00 	movabs r13,0x0
  01f4a:    	call   0xffffa120
  01f4f:    	mov    rdi,QWORD PTR [rsp-0x18]
  01f54:    	mov    QWORD PTR [rbx],rdi
  01f57:    	movq   xmm2,QWORD PTR [rsp]
  01f5c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01f62:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01f68:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01f6e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01f74:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01f7a: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01f81: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01f88: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  01f8f: 48 	movq   xmm12,QWORD PTR [rsp+0x48]
  01f96:    	add    rsp,0x50
  01f9a:    	test   rax,rax
  01f9d:    	je     0x3c9e6
:00132 %14 = dynvar(2, %2)
  01fa3:    	mov    rax,QWORD PTR [rbp-0x10]
  01fa7:    	mov    rax,QWORD PTR [rax]
  01faa:    	lea    rax,[rax+0x10]
  01fae:    	mov    rax,QWORD PTR [rax-0x38]
  01fb2: ff 	mov    QWORD PTR [rbp-0x98],rax
:00133 %16 = dynvar(2, %2)
  01fb9:    	mov    rax,QWORD PTR [rbp-0x10]
  01fbd:    	mov    rax,QWORD PTR [rax]
  01fc0:    	lea    rax,[rax+0x10]
  01fc4:    	mov    rax,QWORD PTR [rax-0x38]
  01fc8: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00134 %15 = %16.call y()                   [<INVALID>]
:00135 
  01fcf:    	sub    rsp,0x50
  01fd3:    	movq   QWORD PTR [rsp],xmm2
  01fd8:    	movq   QWORD PTR [rsp+0x8],xmm3
  01fde:    	movq   QWORD PTR [rsp+0x10],xmm4
  01fe4:    	movq   QWORD PTR [rsp+0x18],xmm5
  01fea:    	movq   QWORD PTR [rsp+0x20],xmm6
  01ff0:    	movq   QWORD PTR [rsp+0x28],xmm7
  01ff6: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01ffd: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  02004: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  0200b: 48 	movq   QWORD PTR [rsp+0x48],xmm12
  02012: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  02019: d0 	movabs rax,0x55d0b27bf4f0
  02023:    	call   rax
  02025:    	mov    r15d,eax
  02028: 00 	cmp    r15d,DWORD PTR [rip+0x8d5]        # 0x2904
  0202f:    	jne    0x3c9f5
  02035:    	mov    eax,DWORD PTR [rip+0xffffffffffffab00]        # 0xffffcb3b
  0203b:    	cmp    DWORD PTR [rip+0x8bf],eax        # 0x2900
  02041:    	jne    0x3c9f5
  02047:    	mov    rax,QWORD PTR [rbx]
  0204a:    	lea    rdi,[rsp-0x18]
  0204f:    	mov    QWORD PTR [rdi],rax
  02052:    	mov    QWORD PTR [rbx],rdi
  02055: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0205e:    	mov    QWORD PTR [rsp-0x38],rcx
  02063: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  0206a:    	mov    QWORD PTR [rsp-0x38],rax
  0206f: 00 	mov    rdi,0x0
  02076: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0207f: 00 	movabs rax,0x0
  02089:    	mov    QWORD PTR [rsp-0x28],rax
  0208e: 00 	movabs r13,0x0
  02098:    	call   0xffffa120
  0209d:    	mov    rdi,QWORD PTR [rsp-0x18]
  020a2:    	mov    QWORD PTR [rbx],rdi
  020a5:    	movq   xmm2,QWORD PTR [rsp]
  020aa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  020b0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  020b6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  020bc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  020c2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  020c8: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  020cf: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  020d6: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  020dd: 48 	movq   xmm12,QWORD PTR [rsp+0x48]
  020e4:    	add    rsp,0x50
  020e8:    	test   rax,rax
  020eb:    	je     0x3ca64
  020f1: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00137 %17 = %13
  020f8: ff 	mov    rax,QWORD PTR [rbp-0x90]
  020ff: ff 	mov    QWORD PTR [rbp-0xb0],rax
:00138 %16 = %17.call y()                   [<INVALID>]
:00139 
  02106:    	sub    rsp,0x50
  0210a:    	movq   QWORD PTR [rsp],xmm2
  0210f:    	movq   QWORD PTR [rsp+0x8],xmm3
  02115:    	movq   QWORD PTR [rsp+0x10],xmm4
  0211b:    	movq   QWORD PTR [rsp+0x18],xmm5
  02121:    	movq   QWORD PTR [rsp+0x20],xmm6
  02127:    	movq   QWORD PTR [rsp+0x28],xmm7
  0212d: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  02134: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  0213b: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  02142: 48 	movq   QWORD PTR [rsp+0x48],xmm12
  02149: ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  02150: d0 	movabs rax,0x55d0b27bf4f0
  0215a:    	call   rax
  0215c:    	mov    r15d,eax
  0215f: 00 	cmp    r15d,DWORD PTR [rip+0x7a6]        # 0x290c
  02166:    	jne    0x3ca73
  0216c:    	mov    eax,DWORD PTR [rip+0xffffffffffffa9c9]        # 0xffffcb3b
  02172:    	cmp    DWORD PTR [rip+0x790],eax        # 0x2908
  02178:    	jne    0x3ca73
  0217e:    	mov    rax,QWORD PTR [rbx]
  02181:    	lea    rdi,[rsp-0x18]
  02186:    	mov    QWORD PTR [rdi],rax
  02189:    	mov    QWORD PTR [rbx],rdi
  0218c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02195:    	mov    QWORD PTR [rsp-0x38],rcx
  0219a: ff 	mov    rax,QWORD PTR [rbp-0xb0]
  021a1:    	mov    QWORD PTR [rsp-0x38],rax
  021a6: 00 	mov    rdi,0x0
  021ad: 00 	mov    QWORD PTR [rsp-0x30],0x0
  021b6: 00 	movabs rax,0x0
  021c0:    	mov    QWORD PTR [rsp-0x28],rax
  021c5: 00 	movabs r13,0x0
  021cf:    	call   0xffffa120
  021d4:    	mov    rdi,QWORD PTR [rsp-0x18]
  021d9:    	mov    QWORD PTR [rbx],rdi
  021dc:    	movq   xmm2,QWORD PTR [rsp]
  021e1:    	movq   xmm3,QWORD PTR [rsp+0x8]
  021e7:    	movq   xmm4,QWORD PTR [rsp+0x10]
  021ed:    	movq   xmm5,QWORD PTR [rsp+0x18]
  021f3:    	movq   xmm6,QWORD PTR [rsp+0x20]
  021f9:    	movq   xmm7,QWORD PTR [rsp+0x28]
  021ff: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  02206: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0220d: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  02214: 48 	movq   xmm12,QWORD PTR [rsp+0x48]
  0221b:    	add    rsp,0x50
  0221f:    	test   rax,rax
  02222:    	je     0x3cae2
  02228: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00141 %15 = %15 + %16                      [Integer][Integer]
  0222f: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  02236: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  0223d: 00 	test   rdi,0x1
  02244:    	je     0x3caf1
  0224a: 00 	test   rsi,0x1
  02251:    	je     0x3caf1
  02257:    	sub    rdi,0x1
  0225b:    	add    rdi,rsi
  0225e:    	jo     0x3caf1
  02264: ff 	mov    QWORD PTR [rbp-0xa0],rdi
:00142 _ = %14.call y=(%15; 1)              [<INVALID>]
:00143 
  0226b:    	sub    rsp,0x50
  0226f:    	movq   QWORD PTR [rsp],xmm2
  02274:    	movq   QWORD PTR [rsp+0x8],xmm3
  0227a:    	movq   QWORD PTR [rsp+0x10],xmm4
  02280:    	movq   QWORD PTR [rsp+0x18],xmm5
  02286:    	movq   QWORD PTR [rsp+0x20],xmm6
  0228c:    	movq   QWORD PTR [rsp+0x28],xmm7
  02292: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  02299: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  022a0: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  022a7: 48 	movq   QWORD PTR [rsp+0x48],xmm12
  022ae: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  022b5: d0 	movabs rax,0x55d0b27bf4f0
  022bf:    	call   rax
  022c1:    	mov    r15d,eax
  022c4: 00 	cmp    r15d,DWORD PTR [rip+0x649]        # 0x2914
  022cb:    	jne    0x3cb1b
  022d1:    	mov    eax,DWORD PTR [rip+0xffffffffffffa864]        # 0xffffcb3b
  022d7:    	cmp    DWORD PTR [rip+0x633],eax        # 0x2910
  022dd:    	jne    0x3cb1b
  022e3:    	mov    rax,QWORD PTR [rbx]
  022e6:    	lea    rdi,[rsp-0x18]
  022eb:    	mov    QWORD PTR [rdi],rax
  022ee:    	mov    QWORD PTR [rbx],rdi
  022f1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  022fa:    	mov    QWORD PTR [rsp-0x38],rcx
  022ff: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02306:    	mov    QWORD PTR [rsp-0x38],rax
  0230b: 00 	mov    rdi,0x1
  02312: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02319:    	mov    QWORD PTR [rsp-0x40],rax
  0231e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02327: 00 	movabs rax,0x0
  02331:    	mov    QWORD PTR [rsp-0x28],rax
  02336: 00 	movabs r13,0x0
  02340:    	call   0xffffa120
  02345:    	mov    rdi,QWORD PTR [rsp-0x18]
  0234a:    	mov    QWORD PTR [rbx],rdi
  0234d:    	movq   xmm2,QWORD PTR [rsp]
  02352:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02358:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0235e:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02364:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0236a:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02370: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  02377: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  0237e: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  02385: 48 	movq   xmm12,QWORD PTR [rsp+0x48]
  0238c:    	add    rsp,0x50
  02390:    	test   rax,rax
  02393:    	je     0x3cb8a
:00145 %14 = dynvar(2, %2)
  02399:    	mov    rax,QWORD PTR [rbp-0x10]
  0239d:    	mov    rax,QWORD PTR [rax]
  023a0:    	lea    rax,[rax+0x10]
  023a4:    	mov    rax,QWORD PTR [rax-0x38]
  023a8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00146 %16 = dynvar(2, %2)
  023af:    	mov    rax,QWORD PTR [rbp-0x10]
  023b3:    	mov    rax,QWORD PTR [rax]
  023b6:    	lea    rax,[rax+0x10]
  023ba:    	mov    rax,QWORD PTR [rax-0x38]
  023be: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00147 %15 = %16.call z()                   [<INVALID>]
:00148 
  023c5:    	sub    rsp,0x50
  023c9:    	movq   QWORD PTR [rsp],xmm2
  023ce:    	movq   QWORD PTR [rsp+0x8],xmm3
  023d4:    	movq   QWORD PTR [rsp+0x10],xmm4
  023da:    	movq   QWORD PTR [rsp+0x18],xmm5
  023e0:    	movq   QWORD PTR [rsp+0x20],xmm6
  023e6:    	movq   QWORD PTR [rsp+0x28],xmm7
  023ec: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  023f3: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  023fa: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  02401: 48 	movq   QWORD PTR [rsp+0x48],xmm12
  02408: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  0240f: d0 	movabs rax,0x55d0b27bf4f0
  02419:    	call   rax
  0241b:    	mov    r15d,eax
  0241e: 00 	cmp    r15d,DWORD PTR [rip+0x4f7]        # 0x291c
  02425:    	jne    0x3cb99
  0242b:    	mov    eax,DWORD PTR [rip+0xffffffffffffa70a]        # 0xffffcb3b
  02431:    	cmp    DWORD PTR [rip+0x4e1],eax        # 0x2918
  02437:    	jne    0x3cb99
  0243d:    	mov    rax,QWORD PTR [rbx]
  02440:    	lea    rdi,[rsp-0x18]
  02445:    	mov    QWORD PTR [rdi],rax
  02448:    	mov    QWORD PTR [rbx],rdi
  0244b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02454:    	mov    QWORD PTR [rsp-0x38],rcx
  02459: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  02460:    	mov    QWORD PTR [rsp-0x38],rax
  02465: 00 	mov    rdi,0x0
  0246c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02475: 00 	movabs rax,0x0
  0247f:    	mov    QWORD PTR [rsp-0x28],rax
  02484: 00 	movabs r13,0x0
  0248e:    	call   0xffffa120
  02493:    	mov    rdi,QWORD PTR [rsp-0x18]
  02498:    	mov    QWORD PTR [rbx],rdi
  0249b:    	movq   xmm2,QWORD PTR [rsp]
  024a0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  024a6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  024ac:    	movq   xmm5,QWORD PTR [rsp+0x18]
  024b2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  024b8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  024be: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  024c5: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  024cc: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  024d3: 48 	movq   xmm12,QWORD PTR [rsp+0x48]
  024da:    	add    rsp,0x50
  024de:    	test   rax,rax
  024e1:    	je     0x3cc08
  024e7: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00150 %17 = %13
  024ee: ff 	mov    rax,QWORD PTR [rbp-0x90]
  024f5: ff 	mov    QWORD PTR [rbp-0xb0],rax
:00151 %16 = %17.call z()                   [<INVALID>]
:00152 
  024fc:    	sub    rsp,0x50
  02500:    	movq   QWORD PTR [rsp],xmm2
  02505:    	movq   QWORD PTR [rsp+0x8],xmm3
  0250b:    	movq   QWORD PTR [rsp+0x10],xmm4
  02511:    	movq   QWORD PTR [rsp+0x18],xmm5
  02517:    	movq   QWORD PTR [rsp+0x20],xmm6
  0251d:    	movq   QWORD PTR [rsp+0x28],xmm7
  02523: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0252a: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  02531: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  02538: 48 	movq   QWORD PTR [rsp+0x48],xmm12
  0253f: ff 	mov    rdi,QWORD PTR [rbp-0xb0]
  02546: d0 	movabs rax,0x55d0b27bf4f0
  02550:    	call   rax
  02552:    	mov    r15d,eax
  02555: 00 	cmp    r15d,DWORD PTR [rip+0x3c8]        # 0x2924
  0255c:    	jne    0x3cc17
  02562:    	mov    eax,DWORD PTR [rip+0xffffffffffffa5d3]        # 0xffffcb3b
  02568:    	cmp    DWORD PTR [rip+0x3b2],eax        # 0x2920
  0256e:    	jne    0x3cc17
  02574:    	mov    rax,QWORD PTR [rbx]
  02577:    	lea    rdi,[rsp-0x18]
  0257c:    	mov    QWORD PTR [rdi],rax
  0257f:    	mov    QWORD PTR [rbx],rdi
  02582: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0258b:    	mov    QWORD PTR [rsp-0x38],rcx
  02590: ff 	mov    rax,QWORD PTR [rbp-0xb0]
  02597:    	mov    QWORD PTR [rsp-0x38],rax
  0259c: 00 	mov    rdi,0x0
  025a3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  025ac: 00 	movabs rax,0x0
  025b6:    	mov    QWORD PTR [rsp-0x28],rax
  025bb: 00 	movabs r13,0x0
  025c5:    	call   0xffffa120
  025ca:    	mov    rdi,QWORD PTR [rsp-0x18]
  025cf:    	mov    QWORD PTR [rbx],rdi
  025d2:    	movq   xmm2,QWORD PTR [rsp]
  025d7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  025dd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  025e3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  025e9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  025ef:    	movq   xmm7,QWORD PTR [rsp+0x28]
  025f5: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  025fc: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  02603: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  0260a: 48 	movq   xmm12,QWORD PTR [rsp+0x48]
  02611:    	add    rsp,0x50
  02615:    	test   rax,rax
  02618:    	je     0x3cc86
  0261e: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00154 %15 = %15 + %16                      [Integer][Integer]
  02625: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0262c: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  02633: 00 	test   rdi,0x1
  0263a:    	je     0x3cc95
  02640: 00 	test   rsi,0x1
  02647:    	je     0x3cc95
  0264d:    	sub    rdi,0x1
  02651:    	add    rdi,rsi
  02654:    	jo     0x3cc95
  0265a: ff 	mov    QWORD PTR [rbp-0xa0],rdi
:00155 _ = %14.call z=(%15; 1)              [<INVALID>]
:00156 
  02661:    	sub    rsp,0x50
  02665:    	movq   QWORD PTR [rsp],xmm2
  0266a:    	movq   QWORD PTR [rsp+0x8],xmm3
  02670:    	movq   QWORD PTR [rsp+0x10],xmm4
  02676:    	movq   QWORD PTR [rsp+0x18],xmm5
  0267c:    	movq   QWORD PTR [rsp+0x20],xmm6
  02682:    	movq   QWORD PTR [rsp+0x28],xmm7
  02688: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0268f: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  02696: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  0269d: 48 	movq   QWORD PTR [rsp+0x48],xmm12
  026a4: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  026ab: d0 	movabs rax,0x55d0b27bf4f0
  026b5:    	call   rax
  026b7:    	mov    r15d,eax
  026ba: 00 	cmp    r15d,DWORD PTR [rip+0x26b]        # 0x292c
  026c1:    	jne    0x3ccbf
  026c7:    	mov    eax,DWORD PTR [rip+0xffffffffffffa46e]        # 0xffffcb3b
  026cd:    	cmp    DWORD PTR [rip+0x255],eax        # 0x2928
  026d3:    	jne    0x3ccbf
  026d9:    	mov    rax,QWORD PTR [rbx]
  026dc:    	lea    rdi,[rsp-0x18]
  026e1:    	mov    QWORD PTR [rdi],rax
  026e4:    	mov    QWORD PTR [rbx],rdi
  026e7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  026f0:    	mov    QWORD PTR [rsp-0x38],rcx
  026f5: ff 	mov    rax,QWORD PTR [rbp-0x98]
  026fc:    	mov    QWORD PTR [rsp-0x38],rax
  02701: 00 	mov    rdi,0x1
  02708: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0270f:    	mov    QWORD PTR [rsp-0x40],rax
  02714: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0271d: 00 	movabs rax,0x0
  02727:    	mov    QWORD PTR [rsp-0x28],rax
  0272c: 00 	movabs r13,0x0
  02736:    	call   0xffffa120
  0273b:    	mov    rdi,QWORD PTR [rsp-0x18]
  02740:    	mov    QWORD PTR [rbx],rdi
  02743:    	movq   xmm2,QWORD PTR [rsp]
  02748:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0274e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02754:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0275a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02760:    	movq   xmm7,QWORD PTR [rsp+0x28]
  02766: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  0276d: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  02774: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  0277b: 48 	movq   xmm12,QWORD PTR [rsp+0x48]
  02782:    	add    rsp,0x50
  02786:    	test   rax,rax
  02789:    	je     0x3cd2e
:00158 %14 = %15
  0278f: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02796: ff 	mov    QWORD PTR [rbp-0x98],rax
:00159 ret %14
  0279d: ff 	mov    rax,QWORD PTR [rbp-0x98]
  027a4:    	leave  
  027a5:    	ret    
:00160 %14 = nil
  027a6: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00161 ret %14
  027b1: ff 	mov    rax,QWORD PTR [rbp-0x98]
  027b8:    	leave  
  027b9:    	ret    
==> start whole compile: vnormalize FuncId(59) self_class:Vec start:[00000] bytecode:0x55d0b321f9a0
<== finished compile. elapsed:103µs
offset:Pos(34832) code: 1857 bytes  data: 103 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    QWORD PTR [rbp-0x58],rax
  00027: mov    rdi,QWORD PTR [rbp-0x28]
  0002b: test   rdi,0x7
  00032: jne    0x3a40d
  00038: cmp    DWORD PTR [rdi+0x4],0x25
  0003c: jne    0x3a40d
:00000 %3 = %0.call vlength()               [Vec]
:00001 
  00042: mov    rdi,QWORD PTR [rbp-0x28]
  00046: cmp    DWORD PTR [rip+0xffffffffffffa1be],0x26        # 0xffffa20b
  0004d: jne    0x3a41c
  00053: mov    rax,QWORD PTR [rbx]
  00056: lea    rdi,[rsp-0x18]
  0005b: mov    QWORD PTR [rdi],rax
  0005e: mov    QWORD PTR [rbx],rdi
  00061: mov    QWORD PTR [rsp-0x20],0x0
  0006a: mov    QWORD PTR [rsp-0x38],rcx
  0006f: mov    rax,QWORD PTR [rbp-0x28]
  00073: mov    QWORD PTR [rsp-0x38],rax
  00078: mov    rdi,0x0
  0007f: mov    QWORD PTR [rsp-0x30],0x0
  00088: movabs rax,0x60000003a
  00092: mov    QWORD PTR [rsp-0x28],rax
  00097: movabs r13,0x55d0b325c3e0
  000a1: call   0xffffab33
  000a6: mov    rdi,QWORD PTR [rsp-0x18]
  000ab: mov    QWORD PTR [rbx],rdi
  000ae: movabs r13,0x55d0b321f9c0
  000b8: test   rax,rax
  000bb: je     0xffff782b
  000c1: mov    QWORD PTR [rbp-0x40],rax
:00003 %1 = %3
  000c5: mov    rax,QWORD PTR [rbp-0x40]
  000c9: mov    QWORD PTR [rbp-0x30],rax
:00004 %3 = const[Vec]                      [Vec]
  000cd: mov    rax,QWORD PTR [rip+0xffffffffffffa13c]        # 0xffffa210
  000d4: cmp    rax,QWORD PTR [rip+0x685]        # 0x760
  000db: jne    0x3a42b
  000e1: mov    rax,QWORD PTR [rip+0x668]        # 0x750
  000e8: mov    QWORD PTR [rbp-0x40],rax
:00005 %4 = @x: Vec[IvarId(0)]
  000ec: mov    rdi,QWORD PTR [rbp-0x28]
  000f0: xor    rax,rax
  000f3: mov    ax,WORD PTR [rdi+0x2]
  000f7: cmp    rax,0x3
  000fb: jne    0x3a471
  00101: mov    rax,QWORD PTR [rdi+0x10]
  00105: mov    QWORD PTR [rbp-0x48],rax
:00006 %5 = @y: Vec[IvarId(1)]
  00109: mov    rdi,QWORD PTR [rbp-0x28]
  0010d: xor    rax,rax
  00110: mov    ax,WORD PTR [rdi+0x2]
  00114: cmp    rax,0x3
  00118: jne    0x3a487
  0011e: mov    rax,QWORD PTR [rdi+0x18]
  00122: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = @z: Vec[IvarId(2)]
  00126: mov    rdi,QWORD PTR [rbp-0x28]
  0012a: xor    rax,rax
  0012d: mov    ax,WORD PTR [rdi+0x2]
  00131: cmp    rax,0x3
  00135: jne    0x3a49d
  0013b: mov    rax,QWORD PTR [rdi+0x20]
  0013f: mov    QWORD PTR [rbp-0x58],rax
:00008 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00009 
  00143: mov    rdi,QWORD PTR [rbp-0x40]
  00147: test   rdi,0x7
  0014e: jne    0x3a4b3
  00154: cmp    DWORD PTR [rdi+0x4],0x26
  00158: jne    0x3a4b3
  0015e: cmp    DWORD PTR [rip+0xffffffffffffa0a6],0x26        # 0xffffa20b
  00165: jne    0x3a4b3
  0016b: mov    r9,0x0
  00172: mov    rdx,rdi
  00175: mov    rax,QWORD PTR [rbx]
  00178: lea    rdi,[rsp-0x18]
  0017d: mov    QWORD PTR [rdi],rax
  00180: mov    QWORD PTR [rbx],rdi
  00183: mov    QWORD PTR [rsp-0x20],0x0
  0018c: mov    QWORD PTR [rsp-0x38],rcx
  00191: lea    rcx,[rbp-0x48]
  00195: mov    r8,0x3
  0019c: call   0x3a4c2
  001a1: mov    rdi,QWORD PTR [rsp-0x18]
  001a6: mov    QWORD PTR [rbx],rdi
  001a9: movabs r13,0x55d0b321fa40
  001b3: test   rax,rax
  001b6: je     0xffff782b
  001bc: mov    QWORD PTR [rbp-0x38],rax
:00011 %3 = literal[1e-17]
  001c0: movq   xmm2,QWORD PTR [rip+0x5a8]        # 0x770
:00012 _%3 = %1 > %3                        [Float][Float]
:00013 condnotbr _%3 =>:00039
  001c8: mov    rdi,QWORD PTR [rbp-0x30]
  001cc: test   rdi,0x1
  001d3: jne    0x3a4f0
  001d9: test   rdi,0x2
  001e0: je     0x21c
  001e6: xorps  xmm3,xmm3
  001e9: movabs rax,0x8000000000000002
  001f3: cmp    rdi,rax
  001f6: je     0x22e
  001fc: mov    rax,rdi
  001ff: sar    rax,0x3f
  00203: add    rax,0x2
  00207: and    rdi,0xfffffffffffffffc
  0020b: or     rdi,rax
  0020e: rol    rdi,0x3d
  00212: movq   xmm3,rdi
  00217: jmp    0x22e
  0021c: call   0xffff7864
  00221: test   rax,rax
  00224: je     0x3a4f0
  0022a: movq   xmm3,xmm0
  0022e: ucomisd xmm3,xmm2
  00232: jbe    0x3a72e
:00014 %4 = %2
  00238: mov    rax,QWORD PTR [rbp-0x38]
  0023c: mov    QWORD PTR [rbp-0x48],rax
:00015 %3 = %4.call x()                     [Vec]
:00016 
  00240: mov    rdi,QWORD PTR [rbp-0x48]
  00244: test   rdi,0x7
  0024b: jne    0x3a50c
  00251: cmp    DWORD PTR [rdi+0x4],0x25
  00255: jne    0x3a50c
  0025b: cmp    DWORD PTR [rip+0xffffffffffff9fa9],0x26        # 0xffffa20b
  00262: jne    0x3a50c
  00268: mov    esi,DWORD PTR [rip+0x50e]        # 0x77c
  0026e: cmp    esi,0xffffffff
  00271: je     0x3a51b
  00277: xor    rax,rax
  0027a: mov    ax,WORD PTR [rdi+0x2]
  0027e: cmp    rax,0x3
  00282: jne    0x29b
  00288: cmp    esi,0x6
  0028b: jge    0x29b
  00291: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00296: jmp    0x2b9
  0029b: sub    rsp,0x10
  0029f: movq   QWORD PTR [rsp],xmm3
  002a4: movabs rax,0x55d0b27c8be0
  002ae: call   rax
  002b0: movq   xmm3,QWORD PTR [rsp]
  002b5: add    rsp,0x10
  002b9: mov    QWORD PTR [rbp-0x40],rax
:00018 %3 = %3 / %1                         [Float][Float]
  002bd: mov    rdi,QWORD PTR [rbp-0x40]
  002c1: test   rdi,0x1
  002c8: jne    0x3a556
  002ce: test   rdi,0x2
  002d5: je     0x311
  002db: xorps  xmm2,xmm2
  002de: movabs rax,0x8000000000000002
  002e8: cmp    rdi,rax
  002eb: je     0x323
  002f1: mov    rax,rdi
  002f4: sar    rax,0x3f
  002f8: add    rax,0x2
  002fc: and    rdi,0xfffffffffffffffc
  00300: or     rdi,rax
  00303: rol    rdi,0x3d
  00307: movq   xmm2,rdi
  0030c: jmp    0x323
  00311: call   0xffff7864
  00316: test   rax,rax
  00319: je     0x3a556
  0031f: movq   xmm2,xmm0
  00323: movq   rax,xmm3
  00328: test   rax,rax
  0032b: je     0xffff7850
  00331: divsd  xmm2,xmm3
:00019 _ = %2.call x=(%3; 1)                [Vec]
:00020 
  00335: movq   xmm0,xmm2
  00339: call   0xffff7957
  0033e: mov    QWORD PTR [rbp-0x40],rax
  00342: mov    rdi,QWORD PTR [rbp-0x38]
  00346: test   rdi,0x7
  0034d: jne    0x3a565
  00353: cmp    DWORD PTR [rdi+0x4],0x25
  00357: jne    0x3a565
  0035d: cmp    DWORD PTR [rip+0xffffffffffff9ea7],0x26        # 0xffffa20b
  00364: jne    0x3a565
  0036a: mov    esi,DWORD PTR [rip+0x414]        # 0x784
  00370: cmp    esi,0xffffffff
  00373: je     0x3a574
  00379: xor    rax,rax
  0037c: mov    ax,WORD PTR [rdi+0x2]
  00380: cmp    rax,0x3
  00384: jne    0x3a1
  0038a: cmp    esi,0x6
  0038d: jge    0x3a1
  00393: mov    rax,QWORD PTR [rbp-0x40]
  00397: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  0039c: jmp    0x3e2
  003a1: sub    rsp,0x10
  003a5: movq   QWORD PTR [rsp],xmm2
  003aa: movq   QWORD PTR [rsp+0x8],xmm3
  003b0: mov    rdx,QWORD PTR [rbp-0x40]
  003b4: movabs rax,0x55d0b27c8e60
  003be: call   rax
  003c0: movq   xmm2,QWORD PTR [rsp]
  003c5: movq   xmm3,QWORD PTR [rsp+0x8]
  003cb: add    rsp,0x10
  003cf: movabs r13,0x55d0b321faf0
  003d9: test   rax,rax
  003dc: je     0xffff782b
:00022 %4 = %2
  003e2: mov    rax,QWORD PTR [rbp-0x38]
  003e6: mov    QWORD PTR [rbp-0x48],rax
:00023 %3 = %4.call y()                     [Vec]
:00024 
  003ea: mov    rdi,QWORD PTR [rbp-0x48]
  003ee: test   rdi,0x7
  003f5: jne    0x3a5c2
  003fb: cmp    DWORD PTR [rdi+0x4],0x25
  003ff: jne    0x3a5c2
  00405: cmp    DWORD PTR [rip+0xffffffffffff9dff],0x26        # 0xffffa20b
  0040c: jne    0x3a5c2
  00412: mov    esi,DWORD PTR [rip+0x374]        # 0x78c
  00418: cmp    esi,0xffffffff
  0041b: je     0x3a5d1
  00421: xor    rax,rax
  00424: mov    ax,WORD PTR [rdi+0x2]
  00428: cmp    rax,0x3
  0042c: jne    0x445
  00432: cmp    esi,0x6
  00435: jge    0x445
  0043b: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00440: jmp    0x463
  00445: sub    rsp,0x10
  00449: movq   QWORD PTR [rsp],xmm3
  0044e: movabs rax,0x55d0b27c8be0
  00458: call   rax
  0045a: movq   xmm3,QWORD PTR [rsp]
  0045f: add    rsp,0x10
  00463: mov    QWORD PTR [rbp-0x40],rax
:00026 %3 = %3 / %1                         [Float][Float]
  00467: mov    rdi,QWORD PTR [rbp-0x40]
  0046b: test   rdi,0x1
  00472: jne    0x3a60c
  00478: test   rdi,0x2
  0047f: je     0x4bb
  00485: xorps  xmm2,xmm2
  00488: movabs rax,0x8000000000000002
  00492: cmp    rdi,rax
  00495: je     0x4cd
  0049b: mov    rax,rdi
  0049e: sar    rax,0x3f
  004a2: add    rax,0x2
  004a6: and    rdi,0xfffffffffffffffc
  004aa: or     rdi,rax
  004ad: rol    rdi,0x3d
  004b1: movq   xmm2,rdi
  004b6: jmp    0x4cd
  004bb: call   0xffff7864
  004c0: test   rax,rax
  004c3: je     0x3a60c
  004c9: movq   xmm2,xmm0
  004cd: movq   rax,xmm3
  004d2: test   rax,rax
  004d5: je     0xffff7850
  004db: divsd  xmm2,xmm3
:00027 _ = %2.call y=(%3; 1)                [Vec]
:00028 
  004df: movq   xmm0,xmm2
  004e3: call   0xffff7957
  004e8: mov    QWORD PTR [rbp-0x40],rax
  004ec: mov    rdi,QWORD PTR [rbp-0x38]
  004f0: test   rdi,0x7
  004f7: jne    0x3a61b
  004fd: cmp    DWORD PTR [rdi+0x4],0x25
  00501: jne    0x3a61b
  00507: cmp    DWORD PTR [rip+0xffffffffffff9cfd],0x26        # 0xffffa20b
  0050e: jne    0x3a61b
  00514: mov    esi,DWORD PTR [rip+0x27a]        # 0x794
  0051a: cmp    esi,0xffffffff
  0051d: je     0x3a62a
  00523: xor    rax,rax
  00526: mov    ax,WORD PTR [rdi+0x2]
  0052a: cmp    rax,0x3
  0052e: jne    0x54b
  00534: cmp    esi,0x6
  00537: jge    0x54b
  0053d: mov    rax,QWORD PTR [rbp-0x40]
  00541: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00546: jmp    0x58c
  0054b: sub    rsp,0x10
  0054f: movq   QWORD PTR [rsp],xmm2
  00554: movq   QWORD PTR [rsp+0x8],xmm3
  0055a: mov    rdx,QWORD PTR [rbp-0x40]
  0055e: movabs rax,0x55d0b27c8e60
  00568: call   rax
  0056a: movq   xmm2,QWORD PTR [rsp]
  0056f: movq   xmm3,QWORD PTR [rsp+0x8]
  00575: add    rsp,0x10
  00579: movabs r13,0x55d0b321fb70
  00583: test   rax,rax
  00586: je     0xffff782b
:00030 %4 = %2
  0058c: mov    rax,QWORD PTR [rbp-0x38]
  00590: mov    QWORD PTR [rbp-0x48],rax
:00031 %3 = %4.call z()                     [Vec]
:00032 
  00594: mov    rdi,QWORD PTR [rbp-0x48]
  00598: test   rdi,0x7
  0059f: jne    0x3a678
  005a5: cmp    DWORD PTR [rdi+0x4],0x25
  005a9: jne    0x3a678
  005af: cmp    DWORD PTR [rip+0xffffffffffff9c55],0x26        # 0xffffa20b
  005b6: jne    0x3a678
  005bc: mov    esi,DWORD PTR [rip+0x1da]        # 0x79c
  005c2: cmp    esi,0xffffffff
  005c5: je     0x3a687
  005cb: xor    rax,rax
  005ce: mov    ax,WORD PTR [rdi+0x2]
  005d2: cmp    rax,0x3
  005d6: jne    0x5ef
  005dc: cmp    esi,0x6
  005df: jge    0x5ef
  005e5: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005ea: jmp    0x60d
  005ef: sub    rsp,0x10
  005f3: movq   QWORD PTR [rsp],xmm3
  005f8: movabs rax,0x55d0b27c8be0
  00602: call   rax
  00604: movq   xmm3,QWORD PTR [rsp]
  00609: add    rsp,0x10
  0060d: mov    QWORD PTR [rbp-0x40],rax
:00034 %3 = %3 / %1                         [Float][Float]
  00611: mov    rdi,QWORD PTR [rbp-0x40]
  00615: test   rdi,0x1
  0061c: jne    0x3a6c2
  00622: test   rdi,0x2
  00629: je     0x665
  0062f: xorps  xmm2,xmm2
  00632: movabs rax,0x8000000000000002
  0063c: cmp    rdi,rax
  0063f: je     0x677
  00645: mov    rax,rdi
  00648: sar    rax,0x3f
  0064c: add    rax,0x2
  00650: and    rdi,0xfffffffffffffffc
  00654: or     rdi,rax
  00657: rol    rdi,0x3d
  0065b: movq   xmm2,rdi
  00660: jmp    0x677
  00665: call   0xffff7864
  0066a: test   rax,rax
  0066d: je     0x3a6c2
  00673: movq   xmm2,xmm0
  00677: movq   rax,xmm3
  0067c: test   rax,rax
  0067f: je     0xffff7850
  00685: divsd  xmm2,xmm3
:00035 _ = %2.call z=(%3; 1)                [Vec]
:00036 
  00689: movq   xmm0,xmm2
  0068d: call   0xffff7957
  00692: mov    QWORD PTR [rbp-0x40],rax
  00696: mov    rdi,QWORD PTR [rbp-0x38]
  0069a: test   rdi,0x7
  006a1: jne    0x3a6d1
  006a7: cmp    DWORD PTR [rdi+0x4],0x25
  006ab: jne    0x3a6d1
  006b1: cmp    DWORD PTR [rip+0xffffffffffff9b53],0x26        # 0xffffa20b
  006b8: jne    0x3a6d1
  006be: mov    esi,DWORD PTR [rip+0xe0]        # 0x7a4
  006c4: cmp    esi,0xffffffff
  006c7: je     0x3a6e0
  006cd: xor    rax,rax
  006d0: mov    ax,WORD PTR [rdi+0x2]
  006d4: cmp    rax,0x3
  006d8: jne    0x6f5
  006de: cmp    esi,0x6
  006e1: jge    0x6f5
  006e7: mov    rax,QWORD PTR [rbp-0x40]
  006eb: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006f0: jmp    0x736
  006f5: sub    rsp,0x10
  006f9: movq   QWORD PTR [rsp],xmm2
  006fe: movq   QWORD PTR [rsp+0x8],xmm3
  00704: mov    rdx,QWORD PTR [rbp-0x40]
  00708: movabs rax,0x55d0b27c8e60
  00712: call   rax
  00714: movq   xmm2,QWORD PTR [rsp]
  00719: movq   xmm3,QWORD PTR [rsp+0x8]
  0071f: add    rsp,0x10
  00723: movabs r13,0x55d0b321fbf0
  0072d: test   rax,rax
  00730: je     0xffff782b
:00038 br =>:00039
  00736: jmp    0x3a754
:00039 ret %2
  0073b: mov    rax,QWORD PTR [rbp-0x38]
  0073f: leave  
  00740: ret    
==> start whole compile: vlength FuncId(58) self_class:Vec start:[00000] bytecode:0x55d0b325c3e0
<== finished compile. elapsed:51.3µs
offset:Pos(36792) code: 1085 bytes  data: 35 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    rdi,QWORD PTR [rbp-0x28]
  00027: test   rdi,0x7
  0002e: jne    0x39fc5
  00034: cmp    DWORD PTR [rdi+0x4],0x25
  00038: jne    0x39fc5
:00000 %2 = const[Math]                     [Math]
  0003e: mov    rax,QWORD PTR [rip+0xffffffffffff9a23]        # 0xffff9a68
  00045: cmp    rax,QWORD PTR [rip+0x40c]        # 0x458
  0004c: jne    0x39fd4
  00052: mov    rax,QWORD PTR [rip+0x3ef]        # 0x448
  00059: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = @x: Vec[IvarId(0)]
  0005d: mov    rdi,QWORD PTR [rbp-0x28]
  00061: xor    rax,rax
  00064: mov    ax,WORD PTR [rdi+0x2]
  00068: cmp    rax,0x3
  0006c: jne    0x3a01a
  00072: mov    rax,QWORD PTR [rdi+0x10]
  00076: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = @x: Vec[IvarId(0)]
  0007a: mov    rdi,QWORD PTR [rbp-0x28]
  0007e: xor    rax,rax
  00081: mov    ax,WORD PTR [rdi+0x2]
  00085: cmp    rax,0x3
  00089: jne    0x3a030
  0008f: mov    rax,QWORD PTR [rdi+0x10]
  00093: mov    QWORD PTR [rbp-0x48],rax
:00003 %3 = %3 * %4                         [Float][Float]
  00097: mov    rdi,QWORD PTR [rbp-0x40]
  0009b: test   rdi,0x1
  000a2: jne    0x3a046
  000a8: test   rdi,0x2
  000af: je     0xeb
  000b5: xorps  xmm2,xmm2
  000b8: movabs rax,0x8000000000000002
  000c2: cmp    rdi,rax
  000c5: je     0xfd
  000cb: mov    rax,rdi
  000ce: sar    rax,0x3f
  000d2: add    rax,0x2
  000d6: and    rdi,0xfffffffffffffffc
  000da: or     rdi,rax
  000dd: rol    rdi,0x3d
  000e1: movq   xmm2,rdi
  000e6: jmp    0xfd
  000eb: call   0xffff70bc
  000f0: test   rax,rax
  000f3: je     0x3a046
  000f9: movq   xmm2,xmm0
  000fd: mov    rdi,QWORD PTR [rbp-0x48]
  00101: test   rdi,0x1
  00108: jne    0x3a055
  0010e: test   rdi,0x2
  00115: je     0x151
  0011b: xorps  xmm3,xmm3
  0011e: movabs rax,0x8000000000000002
  00128: cmp    rdi,rax
  0012b: je     0x163
  00131: mov    rax,rdi
  00134: sar    rax,0x3f
  00138: add    rax,0x2
  0013c: and    rdi,0xfffffffffffffffc
  00140: or     rdi,rax
  00143: rol    rdi,0x3d
  00147: movq   xmm3,rdi
  0014c: jmp    0x163
  00151: call   0xffff70bc
  00156: test   rax,rax
  00159: je     0x3a055
  0015f: movq   xmm3,xmm0
  00163: mulsd  xmm2,xmm3
:00004 %4 = @y: Vec[IvarId(1)]
  00167: mov    rdi,QWORD PTR [rbp-0x28]
  0016b: xor    rax,rax
  0016e: mov    ax,WORD PTR [rdi+0x2]
  00172: cmp    rax,0x3
  00176: jne    0x3a064
  0017c: mov    rax,QWORD PTR [rdi+0x18]
  00180: mov    QWORD PTR [rbp-0x48],rax
:00005 %5 = @y: Vec[IvarId(1)]
  00184: mov    rdi,QWORD PTR [rbp-0x28]
  00188: xor    rax,rax
  0018b: mov    ax,WORD PTR [rdi+0x2]
  0018f: cmp    rax,0x3
  00193: jne    0x3a08c
  00199: mov    rax,QWORD PTR [rdi+0x18]
  0019d: mov    QWORD PTR [rbp-0x50],rax
:00006 %4 = %4 * %5                         [Float][Float]
  001a1: mov    rdi,QWORD PTR [rbp-0x48]
  001a5: test   rdi,0x1
  001ac: jne    0x3a0b4
  001b2: test   rdi,0x2
  001b9: je     0x1f5
  001bf: xorps  xmm3,xmm3
  001c2: movabs rax,0x8000000000000002
  001cc: cmp    rdi,rax
  001cf: je     0x207
  001d5: mov    rax,rdi
  001d8: sar    rax,0x3f
  001dc: add    rax,0x2
  001e0: and    rdi,0xfffffffffffffffc
  001e4: or     rdi,rax
  001e7: rol    rdi,0x3d
  001eb: movq   xmm3,rdi
  001f0: jmp    0x207
  001f5: call   0xffff70bc
  001fa: test   rax,rax
  001fd: je     0x3a0b4
  00203: movq   xmm3,xmm0
  00207: mov    rdi,QWORD PTR [rbp-0x50]
  0020b: test   rdi,0x1
  00212: jne    0x3a0d0
  00218: test   rdi,0x2
  0021f: je     0x25b
  00225: xorps  xmm4,xmm4
  00228: movabs rax,0x8000000000000002
  00232: cmp    rdi,rax
  00235: je     0x26d
  0023b: mov    rax,rdi
  0023e: sar    rax,0x3f
  00242: add    rax,0x2
  00246: and    rdi,0xfffffffffffffffc
  0024a: or     rdi,rax
  0024d: rol    rdi,0x3d
  00251: movq   xmm4,rdi
  00256: jmp    0x26d
  0025b: call   0xffff70bc
  00260: test   rax,rax
  00263: je     0x3a0d0
  00269: movq   xmm4,xmm0
  0026d: mulsd  xmm3,xmm4
:00007 %3 = %3 + %4                         [Float][Float]
  00271: addsd  xmm2,xmm3
:00008 %4 = @z: Vec[IvarId(2)]
  00275: mov    rdi,QWORD PTR [rbp-0x28]
  00279: xor    rax,rax
  0027c: mov    ax,WORD PTR [rdi+0x2]
  00280: cmp    rax,0x3
  00284: jne    0x3a0ec
  0028a: mov    rax,QWORD PTR [rdi+0x20]
  0028e: mov    QWORD PTR [rbp-0x48],rax
:00009 %5 = @z: Vec[IvarId(2)]
  00292: mov    rdi,QWORD PTR [rbp-0x28]
  00296: xor    rax,rax
  00299: mov    ax,WORD PTR [rdi+0x2]
  0029d: cmp    rax,0x3
  002a1: jne    0x3a120
  002a7: mov    rax,QWORD PTR [rdi+0x20]
  002ab: mov    QWORD PTR [rbp-0x50],rax
:00010 %4 = %4 * %5                         [Float][Float]
  002af: mov    rdi,QWORD PTR [rbp-0x48]
  002b3: test   rdi,0x1
  002ba: jne    0x3a148
  002c0: test   rdi,0x2
  002c7: je     0x303
  002cd: xorps  xmm3,xmm3
  002d0: movabs rax,0x8000000000000002
  002da: cmp    rdi,rax
  002dd: je     0x315
  002e3: mov    rax,rdi
  002e6: sar    rax,0x3f
  002ea: add    rax,0x2
  002ee: and    rdi,0xfffffffffffffffc
  002f2: or     rdi,rax
  002f5: rol    rdi,0x3d
  002f9: movq   xmm3,rdi
  002fe: jmp    0x315
  00303: call   0xffff70bc
  00308: test   rax,rax
  0030b: je     0x3a148
  00311: movq   xmm3,xmm0
  00315: mov    rdi,QWORD PTR [rbp-0x50]
  00319: test   rdi,0x1
  00320: jne    0x3a164
  00326: test   rdi,0x2
  0032d: je     0x369
  00333: xorps  xmm4,xmm4
  00336: movabs rax,0x8000000000000002
  00340: cmp    rdi,rax
  00343: je     0x37b
  00349: mov    rax,rdi
  0034c: sar    rax,0x3f
  00350: add    rax,0x2
  00354: and    rdi,0xfffffffffffffffc
  00358: or     rdi,rax
  0035b: rol    rdi,0x3d
  0035f: movq   xmm4,rdi
  00364: jmp    0x37b
  00369: call   0xffff70bc
  0036e: test   rax,rax
  00371: je     0x3a164
  00377: movq   xmm4,xmm0
  0037b: mulsd  xmm3,xmm4
:00011 %3 = %3 + %4                         [Float][Float]
  0037f: addsd  xmm2,xmm3
:00012 %1 = %2.call sqrt(%3; 1)             [#<Class:Math>]
:00013 
  00383: movq   xmm0,xmm2
  00387: call   0xffff71af
  0038c: mov    QWORD PTR [rbp-0x40],rax
  00390: mov    rdi,QWORD PTR [rbp-0x38]
  00394: test   rdi,0x7
  0039b: jne    0x3a180
  003a1: cmp    DWORD PTR [rdi+0x4],0x20
  003a5: jne    0x3a180
  003ab: cmp    DWORD PTR [rip+0xffffffffffff96b1],0x26        # 0xffff9a63
  003b2: jne    0x3a180
  003b8: mov    r9,0x0
  003bf: sub    rsp,0x20
  003c3: movq   QWORD PTR [rsp],xmm2
  003c8: movq   QWORD PTR [rsp+0x8],xmm3
  003ce: movq   QWORD PTR [rsp+0x10],xmm4
  003d4: mov    rdx,rdi
  003d7: mov    rax,QWORD PTR [rbx]
  003da: lea    rdi,[rsp-0x18]
  003df: mov    QWORD PTR [rdi],rax
  003e2: mov    QWORD PTR [rbx],rdi
  003e5: mov    QWORD PTR [rsp-0x20],0x0
  003ee: mov    QWORD PTR [rsp-0x38],rcx
  003f3: lea    rcx,[rbp-0x40]
  003f7: mov    r8,0x1
  003fe: call   0x3a19c
  00403: mov    rdi,QWORD PTR [rsp-0x18]
  00408: mov    QWORD PTR [rbx],rdi
  0040b: movq   xmm2,QWORD PTR [rsp]
  00410: movq   xmm3,QWORD PTR [rsp+0x8]
  00416: movq   xmm4,QWORD PTR [rsp+0x10]
  0041c: add    rsp,0x20
  00420: movabs r13,0x55d0b325c4c0
  0042a: test   rax,rax
  0042d: je     0xffff7083
  00433: mov    QWORD PTR [rbp-0x30],rax
:00015 ret %1
  00437: mov    rax,QWORD PTR [rbp-0x30]
  0043b: leave  
  0043c: ret    
==> start whole compile: initialize FuncId(64) self_class:Ray start:[00000] bytecode:0x55d0b31ec090
<== finished compile. elapsed:12µs
offset:Pos(37912) code: 115 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x40],0x4
  00010: mov    rdi,QWORD PTR [rbp-0x28]
  00014: test   rdi,0x7
  0001b: jne    0x39d6a
  00021: cmp    DWORD PTR [rdi+0x4],0x2b
  00025: jne    0x39d6a
:00000 @org: Ray[IvarId(0)] = %1
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: xor    rax,rax
  00032: mov    ax,WORD PTR [rdi+0x2]
  00036: cmp    rax,0x3
  0003a: jne    0x39d79
  00040: mov    rax,QWORD PTR [rbp-0x30]
  00044: mov    QWORD PTR [rdi+0x10],rax
:00001 @dir: Ray[IvarId(1)] = %2
  00048: mov    rdi,QWORD PTR [rbp-0x28]
  0004c: xor    rax,rax
  0004f: mov    ax,WORD PTR [rdi+0x2]
  00053: cmp    rax,0x3
  00057: jne    0x39d93
  0005d: mov    rax,QWORD PTR [rbp-0x38]
  00061: mov    QWORD PTR [rdi+0x18],rax
:00002 %3 = %2
  00065: mov    rax,QWORD PTR [rbp-0x38]
  00069: mov    QWORD PTR [rbp-0x40],rax
:00003 ret %3
  0006d: mov    rax,QWORD PTR [rbp-0x40]
  00071: leave  
  00072: ret    
==> start whole compile: initialize FuncId(65) self_class:Isect start:[00000] bytecode:0x55d0b320fe10
<== finished compile. elapsed:31.2µs
offset:Pos(38027) code: 738 bytes  data: 171 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    rdi,QWORD PTR [rbp-0x28]
  00027: test   rdi,0x7
  0002e: jne    0x39d3a
  00034: cmp    DWORD PTR [rdi+0x4],0x2d
  00038: jne    0x39d3a
:00000 %1 = literal[10000000.0]
  0003e: movq   xmm2,QWORD PTR [rip+0x29f]        # 0x2e5
:00001 @t: Isect[IvarId(0)] = %1
  00046: movq   xmm0,xmm2
  0004a: call   0xffff6cdc
  0004f: mov    QWORD PTR [rbp-0x30],rax
  00053: mov    rdi,QWORD PTR [rbp-0x28]
  00057: xor    rax,rax
  0005a: mov    ax,WORD PTR [rdi+0x2]
  0005e: cmp    rax,0x3
  00062: jne    0x39d49
  00068: mov    rax,QWORD PTR [rbp-0x30]
  0006c: mov    QWORD PTR [rdi+0x10],rax
:00002 %1 = literal[false]
  00070: mov    rax,0x14
  00077: mov    QWORD PTR [rbp-0x30],rax
:00003 @hit: Isect[IvarId(1)] = %1
  0007b: mov    rdi,QWORD PTR [rbp-0x28]
  0007f: xor    rax,rax
  00082: mov    ax,WORD PTR [rdi+0x2]
  00086: cmp    rax,0x3
  0008a: jne    0x39d75
  00090: mov    rax,QWORD PTR [rbp-0x30]
  00094: mov    QWORD PTR [rdi+0x18],rax
:00004 %2 = const[Vec]                      [Vec]
  00098: mov    rax,QWORD PTR [rip+0xffffffffffff94f6]        # 0xffff9595
  0009f: cmp    rax,QWORD PTR [rip+0x25f]        # 0x305
  000a6: jne    0x39d8f
  000ac: mov    rax,QWORD PTR [rip+0x242]        # 0x2f5
  000b3: mov    QWORD PTR [rbp-0x38],rax
:00005 %3 = literal[0.0]
  000b7: movq   xmm2,QWORD PTR [rip+0x256]        # 0x315
:00006 %4 = literal[0.0]
  000bf: movq   xmm3,QWORD PTR [rip+0x25e]        # 0x325
:00007 %5 = literal[0.0]
  000c7: movq   xmm4,QWORD PTR [rip+0x266]        # 0x335
:00008 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
:00009 
  000cf: movq   xmm0,xmm2
  000d3: call   0xffff6cdc
  000d8: mov    QWORD PTR [rbp-0x40],rax
  000dc: movq   xmm0,xmm3
  000e0: call   0xffff6cdc
  000e5: mov    QWORD PTR [rbp-0x48],rax
  000e9: movq   xmm0,xmm4
  000ed: call   0xffff6cdc
  000f2: mov    QWORD PTR [rbp-0x50],rax
  000f6: mov    rdi,QWORD PTR [rbp-0x38]
  000fa: test   rdi,0x7
  00101: jne    0x39dd5
  00107: cmp    DWORD PTR [rdi+0x4],0x26
  0010b: jne    0x39dd5
  00111: cmp    DWORD PTR [rip+0xffffffffffff9478],0x26        # 0xffff9590
  00118: jne    0x39dd5
  0011e: mov    r9,0x0
  00125: sub    rsp,0x20
  00129: movq   QWORD PTR [rsp],xmm2
  0012e: movq   QWORD PTR [rsp+0x8],xmm3
  00134: movq   QWORD PTR [rsp+0x10],xmm4
  0013a: mov    rdx,rdi
  0013d: mov    rax,QWORD PTR [rbx]
  00140: lea    rdi,[rsp-0x18]
  00145: mov    QWORD PTR [rdi],rax
  00148: mov    QWORD PTR [rbx],rdi
  0014b: mov    QWORD PTR [rsp-0x20],0x0
  00154: mov    QWORD PTR [rsp-0x38],rcx
  00159: lea    rcx,[rbp-0x40]
  0015d: mov    r8,0x3
  00164: call   0x39de4
  00169: mov    rdi,QWORD PTR [rsp-0x18]
  0016e: mov    QWORD PTR [rbx],rdi
  00171: movq   xmm2,QWORD PTR [rsp]
  00176: movq   xmm3,QWORD PTR [rsp+0x8]
  0017c: movq   xmm4,QWORD PTR [rsp+0x10]
  00182: add    rsp,0x20
  00186: movabs r13,0x55d0b320feb0
  00190: test   rax,rax
  00193: je     0xffff6bb0
  00199: mov    QWORD PTR [rbp-0x30],rax
:00011 @pl: Isect[IvarId(2)] = %1
  0019d: mov    rdi,QWORD PTR [rbp-0x28]
  001a1: xor    rax,rax
  001a4: mov    ax,WORD PTR [rdi+0x2]
  001a8: cmp    rax,0x3
  001ac: jne    0x39e12
  001b2: mov    rax,QWORD PTR [rbp-0x30]
  001b6: mov    QWORD PTR [rdi+0x20],rax
:00012 %2 = const[Vec]                      [Vec]
  001ba: mov    rax,QWORD PTR [rip+0xffffffffffff93d4]        # 0xffff9595
  001c1: cmp    rax,QWORD PTR [rip+0x18d]        # 0x355
  001c8: jne    0x39e56
  001ce: mov    rax,QWORD PTR [rip+0x170]        # 0x345
  001d5: mov    QWORD PTR [rbp-0x38],rax
:00013 %3 = literal[0.0]
  001d9: movq   xmm2,QWORD PTR [rip+0x184]        # 0x365
:00014 %4 = literal[0.0]
  001e1: movq   xmm3,QWORD PTR [rip+0x18c]        # 0x375
:00015 %5 = literal[0.0]
  001e9: movq   xmm4,QWORD PTR [rip+0x194]        # 0x385
:00016 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
:00017 
  001f1: movq   xmm0,xmm2
  001f5: call   0xffff6cdc
  001fa: mov    QWORD PTR [rbp-0x40],rax
  001fe: movq   xmm0,xmm3
  00202: call   0xffff6cdc
  00207: mov    QWORD PTR [rbp-0x48],rax
  0020b: movq   xmm0,xmm4
  0020f: call   0xffff6cdc
  00214: mov    QWORD PTR [rbp-0x50],rax
  00218: mov    rdi,QWORD PTR [rbp-0x38]
  0021c: test   rdi,0x7
  00223: jne    0x39ec6
  00229: cmp    DWORD PTR [rdi+0x4],0x26
  0022d: jne    0x39ec6
  00233: cmp    DWORD PTR [rip+0xffffffffffff9356],0x26        # 0xffff9590
  0023a: jne    0x39ec6
  00240: mov    r9,0x0
  00247: sub    rsp,0x20
  0024b: movq   QWORD PTR [rsp],xmm2
  00250: movq   QWORD PTR [rsp+0x8],xmm3
  00256: movq   QWORD PTR [rsp+0x10],xmm4
  0025c: mov    rdx,rdi
  0025f: mov    rax,QWORD PTR [rbx]
  00262: lea    rdi,[rsp-0x18]
  00267: mov    QWORD PTR [rdi],rax
  0026a: mov    QWORD PTR [rbx],rdi
  0026d: mov    QWORD PTR [rsp-0x20],0x0
  00276: mov    QWORD PTR [rsp-0x38],rcx
  0027b: lea    rcx,[rbp-0x40]
  0027f: mov    r8,0x3
  00286: call   0x39ed5
  0028b: mov    rdi,QWORD PTR [rsp-0x18]
  00290: mov    QWORD PTR [rbx],rdi
  00293: movq   xmm2,QWORD PTR [rsp]
  00298: movq   xmm3,QWORD PTR [rsp+0x8]
  0029e: movq   xmm4,QWORD PTR [rsp+0x10]
  002a4: add    rsp,0x20
  002a8: movabs r13,0x55d0b320ff30
  002b2: test   rax,rax
  002b5: je     0xffff6bb0
  002bb: mov    QWORD PTR [rbp-0x30],rax
:00019 @n: Isect[IvarId(3)] = %1
  002bf: mov    rdi,QWORD PTR [rbp-0x28]
  002c3: xor    rax,rax
  002c6: mov    ax,WORD PTR [rdi+0x2]
  002ca: cmp    rax,0x3
  002ce: jne    0x39f03
  002d4: mov    rax,QWORD PTR [rbp-0x30]
  002d8: mov    QWORD PTR [rdi+0x28],rax
:00020 ret %1
  002dc: mov    rax,QWORD PTR [rbp-0x30]
  002e0: leave  
  002e1: ret    
==> start whole compile: intersect FuncId(63) self_class:Plane start:[00000] bytecode:0x55d0b3204530
<== finished compile. elapsed:141.7µs
offset:Pos(38936) code: 6380 bytes  data: 260 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xa0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x40],rax
  00016:    	mov    QWORD PTR [rbp-0x48],rax
  0001a:    	mov    QWORD PTR [rbp-0x50],rax
  0001e:    	mov    QWORD PTR [rbp-0x58],rax
  00022:    	mov    QWORD PTR [rbp-0x60],rax
  00026:    	mov    QWORD PTR [rbp-0x68],rax
  0002a:    	mov    QWORD PTR [rbp-0x70],rax
  0002e:    	mov    QWORD PTR [rbp-0x78],rax
  00032:    	mov    QWORD PTR [rbp-0x80],rax
  00036: ff 	mov    QWORD PTR [rbp-0x88],rax
  0003d: ff 	mov    QWORD PTR [rbp-0x90],rax
  00044: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004b:    	mov    rdi,QWORD PTR [rbp-0x28]
  0004f: 00 	test   rdi,0x7
  00056:    	jne    0x39bba
  0005c:    	cmp    DWORD PTR [rdi+0x4],0x29
  00060:    	jne    0x39bba
:00000 %7 = @p: Plane[IvarId(0)]
  00066:    	mov    rdi,QWORD PTR [rbp-0x28]
  0006a:    	xor    rax,rax
  0006d:    	mov    ax,WORD PTR [rdi+0x2]
  00071:    	cmp    rax,0x3
  00075:    	jne    0x39bc9
  0007b:    	mov    rax,QWORD PTR [rdi+0x10]
  0007f:    	mov    QWORD PTR [rbp-0x60],rax
:00001 %8 = @n: Plane[IvarId(1)]
  00083:    	mov    rdi,QWORD PTR [rbp-0x28]
  00087:    	xor    rax,rax
  0008a:    	mov    ax,WORD PTR [rdi+0x2]
  0008e:    	cmp    rax,0x3
  00092:    	jne    0x39bdf
  00098:    	mov    rax,QWORD PTR [rdi+0x18]
  0009c:    	mov    QWORD PTR [rbp-0x68],rax
:00002 %3 = %7.call vdot(%8; 1)             [Vec]
:00003 
  000a0:    	mov    rdi,QWORD PTR [rbp-0x60]
  000a4: 00 	test   rdi,0x7
  000ab:    	jne    0x39bf5
  000b1:    	cmp    DWORD PTR [rdi+0x4],0x25
  000b5:    	jne    0x39bf5
  000bb: 26 	cmp    DWORD PTR [rip+0xffffffffffff9141],0x26        # 0xffff9203
  000c2:    	jne    0x39bf5
  000c8:    	mov    rax,QWORD PTR [rbx]
  000cb:    	lea    rdi,[rsp-0x18]
  000d0:    	mov    QWORD PTR [rdi],rax
  000d3:    	mov    QWORD PTR [rbx],rdi
  000d6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000df:    	mov    QWORD PTR [rsp-0x38],rcx
  000e4:    	mov    rax,QWORD PTR [rbp-0x60]
  000e8:    	mov    QWORD PTR [rsp-0x38],rax
  000ed: 00 	mov    rdi,0x1
  000f4:    	mov    rax,QWORD PTR [rbp-0x68]
  000f8:    	mov    QWORD PTR [rsp-0x40],rax
  000fd: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00106: 06 	movabs rax,0x1000600000039
  00110:    	mov    QWORD PTR [rsp-0x28],rax
  00115: d0 	movabs r13,0x55d0b3216f80
  0011f:    	call   0xffff9eff
  00124:    	mov    rdi,QWORD PTR [rsp-0x18]
  00129:    	mov    QWORD PTR [rbx],rdi
  0012c: d0 	movabs r13,0x55d0b3204570
  00136:    	test   rax,rax
  00139:    	je     0xffff6823
  0013f:    	mov    QWORD PTR [rbp-0x40],rax
:00005 %3 = neg %3                          [Float]
  00143:    	mov    rdi,QWORD PTR [rbp-0x40]
  00147: 00 	test   rdi,0x1
  0014e:    	jne    0x39c04
  00154: 00 	test   rdi,0x2
  0015b:    	je     0x197
  00161:    	xorps  xmm2,xmm2
  00164: 00 	movabs rax,0x8000000000000002
  0016e:    	cmp    rdi,rax
  00171:    	je     0x1a9
  00177:    	mov    rax,rdi
  0017a:    	sar    rax,0x3f
  0017e:    	add    rax,0x2
  00182:    	and    rdi,0xfffffffffffffffc
  00186:    	or     rdi,rax
  00189:    	rol    rdi,0x3d
  0018d:    	movq   xmm2,rdi
  00192:    	jmp    0x1a9
  00197:    	call   0xffff685c
  0019c:    	test   rax,rax
  0019f:    	je     0x39c04
  001a5:    	movq   xmm2,xmm0
  001a9: 00 	xorps  xmm2,XMMWORD PTR [rip+0x1748]        # 0x18f8
:00006 %8 = %1
  001b0:    	mov    rax,QWORD PTR [rbp-0x30]
  001b4:    	mov    QWORD PTR [rbp-0x68],rax
:00007 %7 = %8.call dir()                   [Ray]
:00008 
  001b8:    	mov    rdi,QWORD PTR [rbp-0x68]
  001bc: 00 	test   rdi,0x7
  001c3:    	jne    0x39c13
  001c9:    	cmp    DWORD PTR [rdi+0x4],0x2b
  001cd:    	jne    0x39c13
  001d3: 26 	cmp    DWORD PTR [rip+0xffffffffffff9029],0x26        # 0xffff9203
  001da:    	jne    0x39c13
  001e0:    	mov    esi,DWORD PTR [rip+0x171e]        # 0x1904
  001e6:    	cmp    esi,0xffffffff
  001e9:    	je     0x39c2f
  001ef:    	xor    rax,rax
  001f2:    	mov    ax,WORD PTR [rdi+0x2]
  001f6:    	cmp    rax,0x3
  001fa:    	jne    0x213
  00200:    	cmp    esi,0x6
  00203:    	jge    0x213
  00209:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0020e:    	jmp    0x231
  00213:    	sub    rsp,0x10
  00217:    	movq   QWORD PTR [rsp],xmm2
  0021c: d0 	movabs rax,0x55d0b27c8be0
  00226:    	call   rax
  00228:    	movq   xmm2,QWORD PTR [rsp]
  0022d:    	add    rsp,0x10
  00231:    	mov    QWORD PTR [rbp-0x60],rax
:00010 %8 = @n: Plane[IvarId(1)]
  00235:    	mov    rdi,QWORD PTR [rbp-0x28]
  00239:    	xor    rax,rax
  0023c:    	mov    ax,WORD PTR [rdi+0x2]
  00240:    	cmp    rax,0x3
  00244:    	jne    0x39c6a
  0024a:    	mov    rax,QWORD PTR [rdi+0x18]
  0024e:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %7.call vdot(%8; 1)             [Vec]
:00012 
  00252:    	mov    rdi,QWORD PTR [rbp-0x60]
  00256: 00 	test   rdi,0x7
  0025d:    	jne    0x39c92
  00263:    	cmp    DWORD PTR [rdi+0x4],0x25
  00267:    	jne    0x39c92
  0026d: 26 	cmp    DWORD PTR [rip+0xffffffffffff8f8f],0x26        # 0xffff9203
  00274:    	jne    0x39c92
  0027a:    	sub    rsp,0x10
  0027e:    	movq   QWORD PTR [rsp],xmm2
  00283:    	mov    rax,QWORD PTR [rbx]
  00286:    	lea    rdi,[rsp-0x18]
  0028b:    	mov    QWORD PTR [rdi],rax
  0028e:    	mov    QWORD PTR [rbx],rdi
  00291: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0029a:    	mov    QWORD PTR [rsp-0x38],rcx
  0029f:    	mov    rax,QWORD PTR [rbp-0x60]
  002a3:    	mov    QWORD PTR [rsp-0x38],rax
  002a8: 00 	mov    rdi,0x1
  002af:    	mov    rax,QWORD PTR [rbp-0x68]
  002b3:    	mov    QWORD PTR [rsp-0x40],rax
  002b8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002c1: 06 	movabs rax,0x1000600000039
  002cb:    	mov    QWORD PTR [rsp-0x28],rax
  002d0: d0 	movabs r13,0x55d0b3216f80
  002da:    	call   0xffff9eff
  002df:    	mov    rdi,QWORD PTR [rsp-0x18]
  002e4:    	mov    QWORD PTR [rbx],rdi
  002e7:    	movq   xmm2,QWORD PTR [rsp]
  002ec:    	add    rsp,0x10
  002f0: d0 	movabs r13,0x55d0b3204600
  002fa:    	test   rax,rax
  002fd:    	je     0xffff6823
  00303:    	mov    QWORD PTR [rbp-0x48],rax
:00014 %5 = %4
  00307:    	mov    rax,QWORD PTR [rbp-0x48]
  0030b:    	mov    QWORD PTR [rbp-0x50],rax
:00015 %7 = literal[0.0]
  0030f: 00 	movq   xmm3,QWORD PTR [rip+0x15f1]        # 0x1908
:00016 _%7 = %4 < %7                        [Float][Float]
:00017 condnotbr _%7 =>:00021
  00317:    	mov    rdi,QWORD PTR [rbp-0x48]
  0031b: 00 	test   rdi,0x1
  00322:    	jne    0x39cae
  00328: 00 	test   rdi,0x2
  0032f:    	je     0x36b
  00335:    	xorps  xmm4,xmm4
  00338: 00 	movabs rax,0x8000000000000002
  00342:    	cmp    rdi,rax
  00345:    	je     0x37d
  0034b:    	mov    rax,rdi
  0034e:    	sar    rax,0x3f
  00352:    	add    rax,0x2
  00356:    	and    rdi,0xfffffffffffffffc
  0035a:    	or     rdi,rax
  0035d:    	rol    rdi,0x3d
  00361:    	movq   xmm4,rdi
  00366:    	jmp    0x37d
  0036b:    	call   0xffff685c
  00370:    	test   rax,rax
  00373:    	je     0x39cae
  00379:    	movq   xmm4,xmm0
  0037d:    	ucomisd xmm4,xmm3
  00381:    	jae    0x39cd7
:00018 %5 = %4
:00019 %5 = neg %5                          [Integer]
  00387:    	movq   xmm0,xmm4
  0038b:    	call   0xffff694f
  00390:    	mov    QWORD PTR [rbp-0x50],rax
  00394:    	sub    rsp,0x20
  00398:    	movq   QWORD PTR [rsp],xmm2
  0039d:    	movq   QWORD PTR [rsp+0x8],xmm3
  003a3:    	movq   QWORD PTR [rsp+0x10],xmm4
  003a9:    	mov    rdi,QWORD PTR [rbp-0x50]
  003ad:    	mov    rdx,rdi
  003b0:    	mov    rdi,rbx
  003b3:    	mov    rsi,r12
  003b6: d0 	movabs rax,0x55d0b27f0130
  003c0:    	call   rax
  003c2:    	movq   xmm2,QWORD PTR [rsp]
  003c7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003cd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003d3:    	add    rsp,0x20
  003d7: d0 	movabs r13,0x55d0b3204670
  003e1:    	test   rax,rax
  003e4:    	je     0xffff6823
  003ea:    	mov    QWORD PTR [rbp-0x50],rax
:00020 br =>:00021
  003ee:    	jmp    0x39d0a
:00021 %7 = literal[1e-17]
  003f3: 00 	movq   xmm3,QWORD PTR [rip+0x151d]        # 0x1918
:00022 _%7 = %5 < %7                        [Float][Float]
:00023 condnotbr _%7 =>:00027
  003fb:    	mov    rdi,QWORD PTR [rbp-0x50]
  003ff: 00 	test   rdi,0x1
  00406:    	jne    0x39d3d
  0040c: 00 	test   rdi,0x2
  00413:    	je     0x44f
  00419:    	xorps  xmm5,xmm5
  0041c: 00 	movabs rax,0x8000000000000002
  00426:    	cmp    rdi,rax
  00429:    	je     0x461
  0042f:    	mov    rax,rdi
  00432:    	sar    rax,0x3f
  00436:    	add    rax,0x2
  0043a:    	and    rdi,0xfffffffffffffffc
  0043e:    	or     rdi,rax
  00441:    	rol    rdi,0x3d
  00445:    	movq   xmm5,rdi
  0044a:    	jmp    0x461
  0044f:    	call   0xffff685c
  00454:    	test   rax,rax
  00457:    	je     0x39d3d
  0045d:    	movq   xmm5,xmm0
  00461:    	ucomisd xmm5,xmm3
  00465:    	jae    0x479
:00024 %7 = nil
  0046b: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00025 ret %7
  00473:    	mov    rax,QWORD PTR [rbp-0x60]
  00477:    	leave  
  00478:    	ret    
:00027 %9 = %1
  00479:    	mov    rax,QWORD PTR [rbp-0x30]
  0047d:    	mov    QWORD PTR [rbp-0x70],rax
:00028 %8 = %9.call org()                   [Ray]
:00029 
  00481:    	mov    rdi,QWORD PTR [rbp-0x70]
  00485: 00 	test   rdi,0x7
  0048c:    	jne    0x39d66
  00492:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00496:    	jne    0x39d66
  0049c: 26 	cmp    DWORD PTR [rip+0xffffffffffff8d60],0x26        # 0xffff9203
  004a3:    	jne    0x39d66
  004a9:    	mov    esi,DWORD PTR [rip+0x1475]        # 0x1924
  004af:    	cmp    esi,0xffffffff
  004b2:    	je     0x39d8f
  004b8:    	xor    rax,rax
  004bb:    	mov    ax,WORD PTR [rdi+0x2]
  004bf:    	cmp    rax,0x3
  004c3:    	jne    0x4dc
  004c9:    	cmp    esi,0x6
  004cc:    	jge    0x4dc
  004d2:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004d7:    	jmp    0x51e
  004dc:    	sub    rsp,0x20
  004e0:    	movq   QWORD PTR [rsp],xmm2
  004e5:    	movq   QWORD PTR [rsp+0x8],xmm3
  004eb:    	movq   QWORD PTR [rsp+0x10],xmm4
  004f1:    	movq   QWORD PTR [rsp+0x18],xmm5
  004f7: d0 	movabs rax,0x55d0b27c8be0
  00501:    	call   rax
  00503:    	movq   xmm2,QWORD PTR [rsp]
  00508:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0050e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00514:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0051a:    	add    rsp,0x20
  0051e:    	mov    QWORD PTR [rbp-0x68],rax
:00031 %9 = @n: Plane[IvarId(1)]
  00522:    	mov    rdi,QWORD PTR [rbp-0x28]
  00526:    	xor    rax,rax
  00529:    	mov    ax,WORD PTR [rdi+0x2]
  0052d:    	cmp    rax,0x3
  00531:    	jne    0x39dee
  00537:    	mov    rax,QWORD PTR [rdi+0x18]
  0053b:    	mov    QWORD PTR [rbp-0x70],rax
:00032 %7 = %8.call vdot(%9; 1)             [Vec]
:00033 
  0053f:    	mov    rdi,QWORD PTR [rbp-0x68]
  00543: 00 	test   rdi,0x7
  0054a:    	jne    0x39e3a
  00550:    	cmp    DWORD PTR [rdi+0x4],0x25
  00554:    	jne    0x39e3a
  0055a: 26 	cmp    DWORD PTR [rip+0xffffffffffff8ca2],0x26        # 0xffff9203
  00561:    	jne    0x39e3a
  00567:    	sub    rsp,0x20
  0056b:    	movq   QWORD PTR [rsp],xmm2
  00570:    	movq   QWORD PTR [rsp+0x8],xmm4
  00576:    	movq   QWORD PTR [rsp+0x10],xmm5
  0057c:    	mov    rax,QWORD PTR [rbx]
  0057f:    	lea    rdi,[rsp-0x18]
  00584:    	mov    QWORD PTR [rdi],rax
  00587:    	mov    QWORD PTR [rbx],rdi
  0058a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00593:    	mov    QWORD PTR [rsp-0x38],rcx
  00598:    	mov    rax,QWORD PTR [rbp-0x68]
  0059c:    	mov    QWORD PTR [rsp-0x38],rax
  005a1: 00 	mov    rdi,0x1
  005a8:    	mov    rax,QWORD PTR [rbp-0x70]
  005ac:    	mov    QWORD PTR [rsp-0x40],rax
  005b1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  005ba: 06 	movabs rax,0x1000600000039
  005c4:    	mov    QWORD PTR [rsp-0x28],rax
  005c9: d0 	movabs r13,0x55d0b3216f80
  005d3:    	call   0xffff9eff
  005d8:    	mov    rdi,QWORD PTR [rsp-0x18]
  005dd:    	mov    QWORD PTR [rbx],rdi
  005e0:    	movq   xmm2,QWORD PTR [rsp]
  005e5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  005eb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005f1:    	add    rsp,0x20
  005f5: d0 	movabs r13,0x55d0b3204750
  005ff:    	test   rax,rax
  00602:    	je     0xffff6823
  00608:    	mov    QWORD PTR [rbp-0x60],rax
:00035 %7 = %7 + %3                         [Float][Float]
  0060c:    	mov    rdi,QWORD PTR [rbp-0x60]
  00610: 00 	test   rdi,0x1
  00617:    	jne    0x39e56
  0061d: 00 	test   rdi,0x2
  00624:    	je     0x660
  0062a:    	xorps  xmm3,xmm3
  0062d: 00 	movabs rax,0x8000000000000002
  00637:    	cmp    rdi,rax
  0063a:    	je     0x672
  00640:    	mov    rax,rdi
  00643:    	sar    rax,0x3f
  00647:    	add    rax,0x2
  0064b:    	and    rdi,0xfffffffffffffffc
  0064f:    	or     rdi,rax
  00652:    	rol    rdi,0x3d
  00656:    	movq   xmm3,rdi
  0065b:    	jmp    0x672
  00660:    	call   0xffff685c
  00665:    	test   rax,rax
  00668:    	je     0x39e56
  0066e:    	movq   xmm3,xmm0
  00672:    	addsd  xmm3,xmm2
:00036 %7 = neg %7                          [Float]
  00676: 00 	xorps  xmm3,XMMWORD PTR [rip+0x12ab]        # 0x1928
:00037 %6 = %7 / %4                         [Float][Float]
  0067d:    	movq   xmm6,xmm3
  00681:    	movq   rax,xmm4
  00686:    	test   rax,rax
  00689:    	je     0xffff6848
  0068f:    	divsd  xmm6,xmm4
:00038 %8 = literal[0.0]
  00693: 00 	movq   xmm7,QWORD PTR [rip+0x129d]        # 0x1938
:00039 %7 = %6 > %8                         [Float][Float]
  0069b:    	xor    rax,rax
  0069e:    	ucomisd xmm6,xmm7
  006a2:    	seta   al
  006a6:    	shl    rax,0x3
  006aa:    	or     rax,0x14
  006ae:    	mov    QWORD PTR [rbp-0x60],rax
:00040 condnotbr %7 =>:00046
  006b2:    	mov    rax,QWORD PTR [rbp-0x60]
  006b6:    	or     rax,0x10
  006ba:    	cmp    rax,0x14
  006be:    	je     0x39f34
:00041 %9 = %2
  006c4:    	mov    rax,QWORD PTR [rbp-0x38]
  006c8:    	mov    QWORD PTR [rbp-0x70],rax
:00042 %8 = %9.call t()                     [<INVALID>]
:00043 
  006cc:    	sub    rsp,0x20
  006d0:    	movq   QWORD PTR [rsp],xmm2
  006d5:    	movq   QWORD PTR [rsp+0x8],xmm4
  006db:    	movq   QWORD PTR [rsp+0x10],xmm5
  006e1:    	movq   QWORD PTR [rsp+0x18],xmm6
  006e7:    	mov    rdi,QWORD PTR [rbp-0x70]
  006eb: d0 	movabs rax,0x55d0b27bf4f0
  006f5:    	call   rax
  006f7:    	mov    r15d,eax
  006fa: 00 	cmp    r15d,DWORD PTR [rip+0x1243]        # 0x1944
  00701:    	jne    0x39e72
  00707:    	mov    eax,DWORD PTR [rip+0xffffffffffff8af6]        # 0xffff9203
  0070d:    	cmp    DWORD PTR [rip+0x122d],eax        # 0x1940
  00713:    	jne    0x39e72
  00719:    	mov    rax,QWORD PTR [rbx]
  0071c:    	lea    rdi,[rsp-0x18]
  00721:    	mov    QWORD PTR [rdi],rax
  00724:    	mov    QWORD PTR [rbx],rdi
  00727: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00730:    	mov    QWORD PTR [rsp-0x38],rcx
  00735:    	mov    rax,QWORD PTR [rbp-0x70]
  00739:    	mov    QWORD PTR [rsp-0x38],rax
  0073e: 00 	mov    rdi,0x0
  00745: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0074e: 00 	movabs rax,0x0
  00758:    	mov    QWORD PTR [rsp-0x28],rax
  0075d: 00 	movabs r13,0x0
  00767:    	call   0xffff67e8
  0076c:    	mov    rdi,QWORD PTR [rsp-0x18]
  00771:    	mov    QWORD PTR [rbx],rdi
  00774:    	movq   xmm2,QWORD PTR [rsp]
  00779:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0077f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00785:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0078b:    	add    rsp,0x20
  0078f:    	test   rax,rax
  00792:    	je     0x39ede
  00798:    	mov    QWORD PTR [rbp-0x68],rax
:00045 %7 = %6 < %8                         [Integer][Integer]
  0079c:    	movq   xmm0,xmm6
  007a0:    	call   0xffff694f
  007a5:    	mov    QWORD PTR [rbp-0x58],rax
  007a9:    	mov    rdi,QWORD PTR [rbp-0x58]
  007ad:    	mov    rsi,QWORD PTR [rbp-0x68]
  007b1: 00 	test   rdi,0x1
  007b8:    	je     0x39eed
  007be: 00 	test   rsi,0x1
  007c5:    	je     0x39eed
  007cb:    	xor    rax,rax
  007ce:    	cmp    rdi,rsi
  007d1:    	setl   al
  007d5:    	shl    rax,0x3
  007d9:    	or     rax,0x14
  007dd:    	mov    QWORD PTR [rbp-0x60],rax
  007e1:    	jmp    0x39f74
:00046 condnotbr %7 =>:00114
  007e6:    	mov    rax,QWORD PTR [rbp-0x60]
  007ea:    	or     rax,0x10
  007ee:    	cmp    rax,0x14
  007f2:    	je     0x3a901
:00047 %7 = literal[true]
  007f8: 00 	mov    rax,0x1c
  007ff:    	mov    QWORD PTR [rbp-0x60],rax
:00048 _ = %2.call hit=(%7; 1)              [<INVALID>]
:00049 
  00803:    	sub    rsp,0x20
  00807:    	movq   QWORD PTR [rsp],xmm2
  0080c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00812:    	movq   QWORD PTR [rsp+0x10],xmm5
  00818:    	movq   QWORD PTR [rsp+0x18],xmm6
  0081e:    	mov    rdi,QWORD PTR [rbp-0x38]
  00822: d0 	movabs rax,0x55d0b27bf4f0
  0082c:    	call   rax
  0082e:    	mov    r15d,eax
  00831: 00 	cmp    r15d,DWORD PTR [rip+0x1114]        # 0x194c
  00838:    	jne    0x39f9a
  0083e:    	mov    eax,DWORD PTR [rip+0xffffffffffff89bf]        # 0xffff9203
  00844:    	cmp    DWORD PTR [rip+0x10fe],eax        # 0x1948
  0084a:    	jne    0x39f9a
  00850:    	mov    rax,QWORD PTR [rbx]
  00853:    	lea    rdi,[rsp-0x18]
  00858:    	mov    QWORD PTR [rdi],rax
  0085b:    	mov    QWORD PTR [rbx],rdi
  0085e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00867:    	mov    QWORD PTR [rsp-0x38],rcx
  0086c:    	mov    rax,QWORD PTR [rbp-0x38]
  00870:    	mov    QWORD PTR [rsp-0x38],rax
  00875: 00 	mov    rdi,0x1
  0087c:    	mov    rax,QWORD PTR [rbp-0x60]
  00880:    	mov    QWORD PTR [rsp-0x40],rax
  00885: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0088e: 00 	movabs rax,0x0
  00898:    	mov    QWORD PTR [rsp-0x28],rax
  0089d: 00 	movabs r13,0x0
  008a7:    	call   0xffff67e8
  008ac:    	mov    rdi,QWORD PTR [rsp-0x18]
  008b1:    	mov    QWORD PTR [rbx],rdi
  008b4:    	movq   xmm2,QWORD PTR [rsp]
  008b9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  008bf:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008c5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008cb:    	add    rsp,0x20
  008cf:    	test   rax,rax
  008d2:    	je     0x3a006
:00051 _ = %2.call t=(%6; 1)                [<INVALID>]
:00052 
  008d8:    	sub    rsp,0x20
  008dc:    	movq   QWORD PTR [rsp],xmm2
  008e1:    	movq   QWORD PTR [rsp+0x8],xmm4
  008e7:    	movq   QWORD PTR [rsp+0x10],xmm5
  008ed:    	movq   QWORD PTR [rsp+0x18],xmm6
  008f3:    	mov    rdi,QWORD PTR [rbp-0x38]
  008f7: d0 	movabs rax,0x55d0b27bf4f0
  00901:    	call   rax
  00903:    	mov    r15d,eax
  00906: 00 	cmp    r15d,DWORD PTR [rip+0x1047]        # 0x1954
  0090d:    	jne    0x3a015
  00913:    	mov    eax,DWORD PTR [rip+0xffffffffffff88ea]        # 0xffff9203
  00919:    	cmp    DWORD PTR [rip+0x1031],eax        # 0x1950
  0091f:    	jne    0x3a015
  00925:    	mov    rax,QWORD PTR [rbx]
  00928:    	lea    rdi,[rsp-0x18]
  0092d:    	mov    QWORD PTR [rdi],rax
  00930:    	mov    QWORD PTR [rbx],rdi
  00933: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0093c:    	mov    QWORD PTR [rsp-0x38],rcx
  00941:    	mov    rax,QWORD PTR [rbp-0x38]
  00945:    	mov    QWORD PTR [rsp-0x38],rax
  0094a: 00 	mov    rdi,0x1
  00951:    	mov    rax,QWORD PTR [rbp-0x58]
  00955:    	mov    QWORD PTR [rsp-0x40],rax
  0095a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00963: 00 	movabs rax,0x0
  0096d:    	mov    QWORD PTR [rsp-0x28],rax
  00972: 00 	movabs r13,0x0
  0097c:    	call   0xffff67e8
  00981:    	mov    rdi,QWORD PTR [rsp-0x18]
  00986:    	mov    QWORD PTR [rbx],rdi
  00989:    	movq   xmm2,QWORD PTR [rsp]
  0098e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00994:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0099a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009a0:    	add    rsp,0x20
  009a4:    	test   rax,rax
  009a7:    	je     0x3a081
:00054 %7 = @n: <INVALID>[IvarId(0)]
  009ad:    	mov    rdi,QWORD PTR [rbp-0x28]
  009b1:    	sub    rsp,0x20
  009b5:    	movq   QWORD PTR [rsp],xmm2
  009ba:    	movq   QWORD PTR [rsp+0x8],xmm4
  009c0:    	movq   QWORD PTR [rsp+0x10],xmm5
  009c6:    	movq   QWORD PTR [rsp+0x18],xmm6
  009cc: 00 	mov    rsi,0x80
  009d3:    	mov    rdx,r12
  009d6: d0 	movabs rax,0x55d0b27af810
  009e0:    	call   rax
  009e2:    	movq   xmm2,QWORD PTR [rsp]
  009e7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009ed:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009f3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009f9:    	add    rsp,0x20
  009fd:    	mov    QWORD PTR [rbp-0x60],rax
:00055 _ = %2.call n=(%7; 1)                [<INVALID>]
:00056 
  00a01:    	sub    rsp,0x20
  00a05:    	movq   QWORD PTR [rsp],xmm2
  00a0a:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a10:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a16:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a1c:    	mov    rdi,QWORD PTR [rbp-0x38]
  00a20: d0 	movabs rax,0x55d0b27bf4f0
  00a2a:    	call   rax
  00a2c:    	mov    r15d,eax
  00a2f: 00 	cmp    r15d,DWORD PTR [rip+0xf26]        # 0x195c
  00a36:    	jne    0x3a090
  00a3c:    	mov    eax,DWORD PTR [rip+0xffffffffffff87c1]        # 0xffff9203
  00a42:    	cmp    DWORD PTR [rip+0xf10],eax        # 0x1958
  00a48:    	jne    0x3a090
  00a4e:    	mov    rax,QWORD PTR [rbx]
  00a51:    	lea    rdi,[rsp-0x18]
  00a56:    	mov    QWORD PTR [rdi],rax
  00a59:    	mov    QWORD PTR [rbx],rdi
  00a5c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a65:    	mov    QWORD PTR [rsp-0x38],rcx
  00a6a:    	mov    rax,QWORD PTR [rbp-0x38]
  00a6e:    	mov    QWORD PTR [rsp-0x38],rax
  00a73: 00 	mov    rdi,0x1
  00a7a:    	mov    rax,QWORD PTR [rbp-0x60]
  00a7e:    	mov    QWORD PTR [rsp-0x40],rax
  00a83: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a8c: 00 	movabs rax,0x0
  00a96:    	mov    QWORD PTR [rsp-0x28],rax
  00a9b: 00 	movabs r13,0x0
  00aa5:    	call   0xffff67e8
  00aaa:    	mov    rdi,QWORD PTR [rsp-0x18]
  00aaf:    	mov    QWORD PTR [rbx],rdi
  00ab2:    	movq   xmm2,QWORD PTR [rsp]
  00ab7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00abd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ac3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ac9:    	add    rsp,0x20
  00acd:    	test   rax,rax
  00ad0:    	je     0x3a0fc
:00058 %8 = const[Vec]                      [<invalid>]
  00ad6: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff872b]        # 0xffff9208
  00add: 00 	cmp    rax,QWORD PTR [rip+0xe94]        # 0x1978
  00ae4:    	jne    0x3a10b
  00aea: 00 	mov    rax,QWORD PTR [rip+0xe77]        # 0x1968
  00af1:    	mov    QWORD PTR [rbp-0x68],rax
:00059 %11 = %1
  00af5:    	mov    rax,QWORD PTR [rbp-0x30]
  00af9:    	mov    QWORD PTR [rbp-0x80],rax
:00060 %10 = %11.call org()                 [<INVALID>]
:00061 
  00afd:    	sub    rsp,0x20
  00b01:    	movq   QWORD PTR [rsp],xmm2
  00b06:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b0c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b12:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b18:    	mov    rdi,QWORD PTR [rbp-0x80]
  00b1c: d0 	movabs rax,0x55d0b27bf4f0
  00b26:    	call   rax
  00b28:    	mov    r15d,eax
  00b2b: 00 	cmp    r15d,DWORD PTR [rip+0xe52]        # 0x1984
  00b32:    	jne    0x3a187
  00b38:    	mov    eax,DWORD PTR [rip+0xffffffffffff86c5]        # 0xffff9203
  00b3e:    	cmp    DWORD PTR [rip+0xe3c],eax        # 0x1980
  00b44:    	jne    0x3a187
  00b4a:    	mov    rax,QWORD PTR [rbx]
  00b4d:    	lea    rdi,[rsp-0x18]
  00b52:    	mov    QWORD PTR [rdi],rax
  00b55:    	mov    QWORD PTR [rbx],rdi
  00b58: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b61:    	mov    QWORD PTR [rsp-0x38],rcx
  00b66:    	mov    rax,QWORD PTR [rbp-0x80]
  00b6a:    	mov    QWORD PTR [rsp-0x38],rax
  00b6f: 00 	mov    rdi,0x0
  00b76: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b7f: 00 	movabs rax,0x0
  00b89:    	mov    QWORD PTR [rsp-0x28],rax
  00b8e: 00 	movabs r13,0x0
  00b98:    	call   0xffff67e8
  00b9d:    	mov    rdi,QWORD PTR [rsp-0x18]
  00ba2:    	mov    QWORD PTR [rbx],rdi
  00ba5:    	movq   xmm2,QWORD PTR [rsp]
  00baa:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00bb0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00bb6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00bbc:    	add    rsp,0x20
  00bc0:    	test   rax,rax
  00bc3:    	je     0x3a1f3
  00bc9:    	mov    QWORD PTR [rbp-0x78],rax
:00063 %9 = %10.call x()                    [<INVALID>]
:00064 
  00bcd:    	sub    rsp,0x20
  00bd1:    	movq   QWORD PTR [rsp],xmm2
  00bd6:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bdc:    	movq   QWORD PTR [rsp+0x10],xmm5
  00be2:    	movq   QWORD PTR [rsp+0x18],xmm6
  00be8:    	mov    rdi,QWORD PTR [rbp-0x78]
  00bec: d0 	movabs rax,0x55d0b27bf4f0
  00bf6:    	call   rax
  00bf8:    	mov    r15d,eax
  00bfb: 00 	cmp    r15d,DWORD PTR [rip+0xd8a]        # 0x198c
  00c02:    	jne    0x3a202
  00c08:    	mov    eax,DWORD PTR [rip+0xffffffffffff85f5]        # 0xffff9203
  00c0e:    	cmp    DWORD PTR [rip+0xd74],eax        # 0x1988
  00c14:    	jne    0x3a202
  00c1a:    	mov    rax,QWORD PTR [rbx]
  00c1d:    	lea    rdi,[rsp-0x18]
  00c22:    	mov    QWORD PTR [rdi],rax
  00c25:    	mov    QWORD PTR [rbx],rdi
  00c28: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c31:    	mov    QWORD PTR [rsp-0x38],rcx
  00c36:    	mov    rax,QWORD PTR [rbp-0x78]
  00c3a:    	mov    QWORD PTR [rsp-0x38],rax
  00c3f: 00 	mov    rdi,0x0
  00c46: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c4f: 00 	movabs rax,0x0
  00c59:    	mov    QWORD PTR [rsp-0x28],rax
  00c5e: 00 	movabs r13,0x0
  00c68:    	call   0xffff67e8
  00c6d:    	mov    rdi,QWORD PTR [rsp-0x18]
  00c72:    	mov    QWORD PTR [rbx],rdi
  00c75:    	movq   xmm2,QWORD PTR [rsp]
  00c7a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c80:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c86:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c8c:    	add    rsp,0x20
  00c90:    	test   rax,rax
  00c93:    	je     0x3a26e
  00c99:    	mov    QWORD PTR [rbp-0x70],rax
:00066 %12 = %1
  00c9d:    	mov    rax,QWORD PTR [rbp-0x30]
  00ca1: ff 	mov    QWORD PTR [rbp-0x88],rax
:00067 %11 = %12.call dir()                 [<INVALID>]
:00068 
  00ca8:    	sub    rsp,0x20
  00cac:    	movq   QWORD PTR [rsp],xmm2
  00cb1:    	movq   QWORD PTR [rsp+0x8],xmm4
  00cb7:    	movq   QWORD PTR [rsp+0x10],xmm5
  00cbd:    	movq   QWORD PTR [rsp+0x18],xmm6
  00cc3: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00cca: d0 	movabs rax,0x55d0b27bf4f0
  00cd4:    	call   rax
  00cd6:    	mov    r15d,eax
  00cd9: 00 	cmp    r15d,DWORD PTR [rip+0xcb4]        # 0x1994
  00ce0:    	jne    0x3a27d
  00ce6:    	mov    eax,DWORD PTR [rip+0xffffffffffff8517]        # 0xffff9203
  00cec:    	cmp    DWORD PTR [rip+0xc9e],eax        # 0x1990
  00cf2:    	jne    0x3a27d
  00cf8:    	mov    rax,QWORD PTR [rbx]
  00cfb:    	lea    rdi,[rsp-0x18]
  00d00:    	mov    QWORD PTR [rdi],rax
  00d03:    	mov    QWORD PTR [rbx],rdi
  00d06: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00d0f:    	mov    QWORD PTR [rsp-0x38],rcx
  00d14: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00d1b:    	mov    QWORD PTR [rsp-0x38],rax
  00d20: 00 	mov    rdi,0x0
  00d27: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d30: 00 	movabs rax,0x0
  00d3a:    	mov    QWORD PTR [rsp-0x28],rax
  00d3f: 00 	movabs r13,0x0
  00d49:    	call   0xffff67e8
  00d4e:    	mov    rdi,QWORD PTR [rsp-0x18]
  00d53:    	mov    QWORD PTR [rbx],rdi
  00d56:    	movq   xmm2,QWORD PTR [rsp]
  00d5b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d61:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d67:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d6d:    	add    rsp,0x20
  00d71:    	test   rax,rax
  00d74:    	je     0x3a2ec
  00d7a:    	mov    QWORD PTR [rbp-0x80],rax
:00070 %10 = %11.call x()                   [<INVALID>]
:00071 
  00d7e:    	sub    rsp,0x20
  00d82:    	movq   QWORD PTR [rsp],xmm2
  00d87:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d8d:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d93:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d99:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d9d: d0 	movabs rax,0x55d0b27bf4f0
  00da7:    	call   rax
  00da9:    	mov    r15d,eax
  00dac: 00 	cmp    r15d,DWORD PTR [rip+0xbe9]        # 0x199c
  00db3:    	jne    0x3a2fb
  00db9:    	mov    eax,DWORD PTR [rip+0xffffffffffff8444]        # 0xffff9203
  00dbf:    	cmp    DWORD PTR [rip+0xbd3],eax        # 0x1998
  00dc5:    	jne    0x3a2fb
  00dcb:    	mov    rax,QWORD PTR [rbx]
  00dce:    	lea    rdi,[rsp-0x18]
  00dd3:    	mov    QWORD PTR [rdi],rax
  00dd6:    	mov    QWORD PTR [rbx],rdi
  00dd9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00de2:    	mov    QWORD PTR [rsp-0x38],rcx
  00de7:    	mov    rax,QWORD PTR [rbp-0x80]
  00deb:    	mov    QWORD PTR [rsp-0x38],rax
  00df0: 00 	mov    rdi,0x0
  00df7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00e00: 00 	movabs rax,0x0
  00e0a:    	mov    QWORD PTR [rsp-0x28],rax
  00e0f: 00 	movabs r13,0x0
  00e19:    	call   0xffff67e8
  00e1e:    	mov    rdi,QWORD PTR [rsp-0x18]
  00e23:    	mov    QWORD PTR [rbx],rdi
  00e26:    	movq   xmm2,QWORD PTR [rsp]
  00e2b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e31:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e37:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e3d:    	add    rsp,0x20
  00e41:    	test   rax,rax
  00e44:    	je     0x3a367
  00e4a:    	mov    QWORD PTR [rbp-0x78],rax
:00073 %10 = %6 * %10                       [Integer][Integer]
  00e4e:    	mov    rdi,QWORD PTR [rbp-0x58]
  00e52:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e56:    	sub    rsp,0x20
  00e5a:    	movq   QWORD PTR [rsp],xmm2
  00e5f:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e65:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e6b:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e71:    	mov    rdx,rdi
  00e74:    	mov    rcx,rsi
  00e77:    	mov    rdi,rbx
  00e7a:    	mov    rsi,r12
  00e7d: d0 	movabs rax,0x55d0b27f2b80
  00e87:    	call   rax
  00e89:    	movq   xmm2,QWORD PTR [rsp]
  00e8e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e94:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e9a:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00ea0:    	add    rsp,0x20
  00ea4: d0 	movabs r13,0x55d0b32049d0
  00eae:    	test   rax,rax
  00eb1:    	je     0xffff6823
  00eb7:    	mov    QWORD PTR [rbp-0x78],rax
:00074 %9 = %9 + %10                        [Integer][Integer]
  00ebb:    	mov    rdi,QWORD PTR [rbp-0x70]
  00ebf:    	mov    rsi,QWORD PTR [rbp-0x78]
  00ec3: 00 	test   rdi,0x1
  00eca:    	je     0x3a392
  00ed0: 00 	test   rsi,0x1
  00ed7:    	je     0x3a392
  00edd:    	sub    rdi,0x1
  00ee1:    	add    rdi,rsi
  00ee4:    	jo     0x3a392
  00eea:    	mov    QWORD PTR [rbp-0x70],rdi
:00075 %12 = %1
  00eee:    	mov    rax,QWORD PTR [rbp-0x30]
  00ef2: ff 	mov    QWORD PTR [rbp-0x88],rax
:00076 %11 = %12.call org()                 [<INVALID>]
:00077 
  00ef9:    	sub    rsp,0x20
  00efd:    	movq   QWORD PTR [rsp],xmm2
  00f02:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f08:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f0e:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f14: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00f1b: d0 	movabs rax,0x55d0b27bf4f0
  00f25:    	call   rax
  00f27:    	mov    r15d,eax
  00f2a: 00 	cmp    r15d,DWORD PTR [rip+0xa73]        # 0x19a4
  00f31:    	jne    0x3a3ae
  00f37:    	mov    eax,DWORD PTR [rip+0xffffffffffff82c6]        # 0xffff9203
  00f3d:    	cmp    DWORD PTR [rip+0xa5d],eax        # 0x19a0
  00f43:    	jne    0x3a3ae
  00f49:    	mov    rax,QWORD PTR [rbx]
  00f4c:    	lea    rdi,[rsp-0x18]
  00f51:    	mov    QWORD PTR [rdi],rax
  00f54:    	mov    QWORD PTR [rbx],rdi
  00f57: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f60:    	mov    QWORD PTR [rsp-0x38],rcx
  00f65: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00f6c:    	mov    QWORD PTR [rsp-0x38],rax
  00f71: 00 	mov    rdi,0x0
  00f78: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f81: 00 	movabs rax,0x0
  00f8b:    	mov    QWORD PTR [rsp-0x28],rax
  00f90: 00 	movabs r13,0x0
  00f9a:    	call   0xffff67e8
  00f9f:    	mov    rdi,QWORD PTR [rsp-0x18]
  00fa4:    	mov    QWORD PTR [rbx],rdi
  00fa7:    	movq   xmm2,QWORD PTR [rsp]
  00fac:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00fb2:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00fb8:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00fbe:    	add    rsp,0x20
  00fc2:    	test   rax,rax
  00fc5:    	je     0x3a41d
  00fcb:    	mov    QWORD PTR [rbp-0x80],rax
:00079 %10 = %11.call y()                   [<INVALID>]
:00080 
  00fcf:    	sub    rsp,0x20
  00fd3:    	movq   QWORD PTR [rsp],xmm2
  00fd8:    	movq   QWORD PTR [rsp+0x8],xmm4
  00fde:    	movq   QWORD PTR [rsp+0x10],xmm5
  00fe4:    	movq   QWORD PTR [rsp+0x18],xmm6
  00fea:    	mov    rdi,QWORD PTR [rbp-0x80]
  00fee: d0 	movabs rax,0x55d0b27bf4f0
  00ff8:    	call   rax
  00ffa:    	mov    r15d,eax
  00ffd: 00 	cmp    r15d,DWORD PTR [rip+0x9a8]        # 0x19ac
  01004:    	jne    0x3a42c
  0100a:    	mov    eax,DWORD PTR [rip+0xffffffffffff81f3]        # 0xffff9203
  01010:    	cmp    DWORD PTR [rip+0x992],eax        # 0x19a8
  01016:    	jne    0x3a42c
  0101c:    	mov    rax,QWORD PTR [rbx]
  0101f:    	lea    rdi,[rsp-0x18]
  01024:    	mov    QWORD PTR [rdi],rax
  01027:    	mov    QWORD PTR [rbx],rdi
  0102a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01033:    	mov    QWORD PTR [rsp-0x38],rcx
  01038:    	mov    rax,QWORD PTR [rbp-0x80]
  0103c:    	mov    QWORD PTR [rsp-0x38],rax
  01041: 00 	mov    rdi,0x0
  01048: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01051: 00 	movabs rax,0x0
  0105b:    	mov    QWORD PTR [rsp-0x28],rax
  01060: 00 	movabs r13,0x0
  0106a:    	call   0xffff67e8
  0106f:    	mov    rdi,QWORD PTR [rsp-0x18]
  01074:    	mov    QWORD PTR [rbx],rdi
  01077:    	movq   xmm2,QWORD PTR [rsp]
  0107c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01082:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01088:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0108e:    	add    rsp,0x20
  01092:    	test   rax,rax
  01095:    	je     0x3a498
  0109b:    	mov    QWORD PTR [rbp-0x78],rax
:00082 %13 = %1
  0109f:    	mov    rax,QWORD PTR [rbp-0x30]
  010a3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00083 %12 = %13.call dir()                 [<INVALID>]
:00084 
  010aa:    	sub    rsp,0x20
  010ae:    	movq   QWORD PTR [rsp],xmm2
  010b3:    	movq   QWORD PTR [rsp+0x8],xmm4
  010b9:    	movq   QWORD PTR [rsp+0x10],xmm5
  010bf:    	movq   QWORD PTR [rsp+0x18],xmm6
  010c5: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  010cc: d0 	movabs rax,0x55d0b27bf4f0
  010d6:    	call   rax
  010d8:    	mov    r15d,eax
  010db: 00 	cmp    r15d,DWORD PTR [rip+0x8d2]        # 0x19b4
  010e2:    	jne    0x3a4a7
  010e8:    	mov    eax,DWORD PTR [rip+0xffffffffffff8115]        # 0xffff9203
  010ee:    	cmp    DWORD PTR [rip+0x8bc],eax        # 0x19b0
  010f4:    	jne    0x3a4a7
  010fa:    	mov    rax,QWORD PTR [rbx]
  010fd:    	lea    rdi,[rsp-0x18]
  01102:    	mov    QWORD PTR [rdi],rax
  01105:    	mov    QWORD PTR [rbx],rdi
  01108: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01111:    	mov    QWORD PTR [rsp-0x38],rcx
  01116: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0111d:    	mov    QWORD PTR [rsp-0x38],rax
  01122: 00 	mov    rdi,0x0
  01129: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01132: 00 	movabs rax,0x0
  0113c:    	mov    QWORD PTR [rsp-0x28],rax
  01141: 00 	movabs r13,0x0
  0114b:    	call   0xffff67e8
  01150:    	mov    rdi,QWORD PTR [rsp-0x18]
  01155:    	mov    QWORD PTR [rbx],rdi
  01158:    	movq   xmm2,QWORD PTR [rsp]
  0115d:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01163:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01169:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0116f:    	add    rsp,0x20
  01173:    	test   rax,rax
  01176:    	je     0x3a516
  0117c: ff 	mov    QWORD PTR [rbp-0x88],rax
:00086 %11 = %12.call y()                   [<INVALID>]
:00087 
  01183:    	sub    rsp,0x20
  01187:    	movq   QWORD PTR [rsp],xmm2
  0118c:    	movq   QWORD PTR [rsp+0x8],xmm4
  01192:    	movq   QWORD PTR [rsp+0x10],xmm5
  01198:    	movq   QWORD PTR [rsp+0x18],xmm6
  0119e: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  011a5: d0 	movabs rax,0x55d0b27bf4f0
  011af:    	call   rax
  011b1:    	mov    r15d,eax
  011b4: 00 	cmp    r15d,DWORD PTR [rip+0x801]        # 0x19bc
  011bb:    	jne    0x3a525
  011c1:    	mov    eax,DWORD PTR [rip+0xffffffffffff803c]        # 0xffff9203
  011c7:    	cmp    DWORD PTR [rip+0x7eb],eax        # 0x19b8
  011cd:    	jne    0x3a525
  011d3:    	mov    rax,QWORD PTR [rbx]
  011d6:    	lea    rdi,[rsp-0x18]
  011db:    	mov    QWORD PTR [rdi],rax
  011de:    	mov    QWORD PTR [rbx],rdi
  011e1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011ea:    	mov    QWORD PTR [rsp-0x38],rcx
  011ef: ff 	mov    rax,QWORD PTR [rbp-0x88]
  011f6:    	mov    QWORD PTR [rsp-0x38],rax
  011fb: 00 	mov    rdi,0x0
  01202: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0120b: 00 	movabs rax,0x0
  01215:    	mov    QWORD PTR [rsp-0x28],rax
  0121a: 00 	movabs r13,0x0
  01224:    	call   0xffff67e8
  01229:    	mov    rdi,QWORD PTR [rsp-0x18]
  0122e:    	mov    QWORD PTR [rbx],rdi
  01231:    	movq   xmm2,QWORD PTR [rsp]
  01236:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0123c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01242:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01248:    	add    rsp,0x20
  0124c:    	test   rax,rax
  0124f:    	je     0x3a594
  01255:    	mov    QWORD PTR [rbp-0x80],rax
:00089 %11 = %6 * %11                       [Integer][Integer]
  01259:    	mov    rdi,QWORD PTR [rbp-0x58]
  0125d:    	mov    rsi,QWORD PTR [rbp-0x80]
  01261:    	sub    rsp,0x20
  01265:    	movq   QWORD PTR [rsp],xmm2
  0126a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01270:    	movq   QWORD PTR [rsp+0x10],xmm5
  01276:    	movq   QWORD PTR [rsp+0x18],xmm6
  0127c:    	mov    rdx,rdi
  0127f:    	mov    rcx,rsi
  01282:    	mov    rdi,rbx
  01285:    	mov    rsi,r12
  01288: d0 	movabs rax,0x55d0b27f2b80
  01292:    	call   rax
  01294:    	movq   xmm2,QWORD PTR [rsp]
  01299:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0129f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  012a5:    	movq   xmm6,QWORD PTR [rsp+0x18]
  012ab:    	add    rsp,0x20
  012af: d0 	movabs r13,0x55d0b3204ad0
  012b9:    	test   rax,rax
  012bc:    	je     0xffff6823
  012c2:    	mov    QWORD PTR [rbp-0x80],rax
:00090 %10 = %10 + %11                      [Integer][Integer]
  012c6:    	mov    rdi,QWORD PTR [rbp-0x78]
  012ca:    	mov    rsi,QWORD PTR [rbp-0x80]
  012ce: 00 	test   rdi,0x1
  012d5:    	je     0x3a5bf
  012db: 00 	test   rsi,0x1
  012e2:    	je     0x3a5bf
  012e8:    	sub    rdi,0x1
  012ec:    	add    rdi,rsi
  012ef:    	jo     0x3a5bf
  012f5:    	mov    QWORD PTR [rbp-0x78],rdi
:00091 %13 = %1
  012f9:    	mov    rax,QWORD PTR [rbp-0x30]
  012fd: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 %12 = %13.call org()                 [<INVALID>]
:00093 
  01304:    	sub    rsp,0x20
  01308:    	movq   QWORD PTR [rsp],xmm2
  0130d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01313:    	movq   QWORD PTR [rsp+0x10],xmm5
  01319:    	movq   QWORD PTR [rsp+0x18],xmm6
  0131f: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01326: d0 	movabs rax,0x55d0b27bf4f0
  01330:    	call   rax
  01332:    	mov    r15d,eax
  01335: 00 	cmp    r15d,DWORD PTR [rip+0x688]        # 0x19c4
  0133c:    	jne    0x3a5db
  01342:    	mov    eax,DWORD PTR [rip+0xffffffffffff7ebb]        # 0xffff9203
  01348:    	cmp    DWORD PTR [rip+0x672],eax        # 0x19c0
  0134e:    	jne    0x3a5db
  01354:    	mov    rax,QWORD PTR [rbx]
  01357:    	lea    rdi,[rsp-0x18]
  0135c:    	mov    QWORD PTR [rdi],rax
  0135f:    	mov    QWORD PTR [rbx],rdi
  01362: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0136b:    	mov    QWORD PTR [rsp-0x38],rcx
  01370: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01377:    	mov    QWORD PTR [rsp-0x38],rax
  0137c: 00 	mov    rdi,0x0
  01383: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0138c: 00 	movabs rax,0x0
  01396:    	mov    QWORD PTR [rsp-0x28],rax
  0139b: 00 	movabs r13,0x0
  013a5:    	call   0xffff67e8
  013aa:    	mov    rdi,QWORD PTR [rsp-0x18]
  013af:    	mov    QWORD PTR [rbx],rdi
  013b2:    	movq   xmm2,QWORD PTR [rsp]
  013b7:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013bd:    	movq   xmm5,QWORD PTR [rsp+0x10]
  013c3:    	movq   xmm6,QWORD PTR [rsp+0x18]
  013c9:    	add    rsp,0x20
  013cd:    	test   rax,rax
  013d0:    	je     0x3a64a
  013d6: ff 	mov    QWORD PTR [rbp-0x88],rax
:00095 %11 = %12.call z()                   [<INVALID>]
:00096 
  013dd:    	sub    rsp,0x20
  013e1:    	movq   QWORD PTR [rsp],xmm2
  013e6:    	movq   QWORD PTR [rsp+0x8],xmm4
  013ec:    	movq   QWORD PTR [rsp+0x10],xmm5
  013f2:    	movq   QWORD PTR [rsp+0x18],xmm6
  013f8: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  013ff: d0 	movabs rax,0x55d0b27bf4f0
  01409:    	call   rax
  0140b:    	mov    r15d,eax
  0140e: 00 	cmp    r15d,DWORD PTR [rip+0x5b7]        # 0x19cc
  01415:    	jne    0x3a659
  0141b:    	mov    eax,DWORD PTR [rip+0xffffffffffff7de2]        # 0xffff9203
  01421:    	cmp    DWORD PTR [rip+0x5a1],eax        # 0x19c8
  01427:    	jne    0x3a659
  0142d:    	mov    rax,QWORD PTR [rbx]
  01430:    	lea    rdi,[rsp-0x18]
  01435:    	mov    QWORD PTR [rdi],rax
  01438:    	mov    QWORD PTR [rbx],rdi
  0143b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01444:    	mov    QWORD PTR [rsp-0x38],rcx
  01449: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01450:    	mov    QWORD PTR [rsp-0x38],rax
  01455: 00 	mov    rdi,0x0
  0145c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01465: 00 	movabs rax,0x0
  0146f:    	mov    QWORD PTR [rsp-0x28],rax
  01474: 00 	movabs r13,0x0
  0147e:    	call   0xffff67e8
  01483:    	mov    rdi,QWORD PTR [rsp-0x18]
  01488:    	mov    QWORD PTR [rbx],rdi
  0148b:    	movq   xmm2,QWORD PTR [rsp]
  01490:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01496:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0149c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  014a2:    	add    rsp,0x20
  014a6:    	test   rax,rax
  014a9:    	je     0x3a6c8
  014af:    	mov    QWORD PTR [rbp-0x80],rax
:00098 %14 = %1
  014b3:    	mov    rax,QWORD PTR [rbp-0x30]
  014b7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00099 %13 = %14.call dir()                 [<INVALID>]
:00100 
  014be:    	sub    rsp,0x20
  014c2:    	movq   QWORD PTR [rsp],xmm2
  014c7:    	movq   QWORD PTR [rsp+0x8],xmm4
  014cd:    	movq   QWORD PTR [rsp+0x10],xmm5
  014d3:    	movq   QWORD PTR [rsp+0x18],xmm6
  014d9: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  014e0: d0 	movabs rax,0x55d0b27bf4f0
  014ea:    	call   rax
  014ec:    	mov    r15d,eax
  014ef: 00 	cmp    r15d,DWORD PTR [rip+0x4de]        # 0x19d4
  014f6:    	jne    0x3a6d7
  014fc:    	mov    eax,DWORD PTR [rip+0xffffffffffff7d01]        # 0xffff9203
  01502:    	cmp    DWORD PTR [rip+0x4c8],eax        # 0x19d0
  01508:    	jne    0x3a6d7
  0150e:    	mov    rax,QWORD PTR [rbx]
  01511:    	lea    rdi,[rsp-0x18]
  01516:    	mov    QWORD PTR [rdi],rax
  01519:    	mov    QWORD PTR [rbx],rdi
  0151c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01525:    	mov    QWORD PTR [rsp-0x38],rcx
  0152a: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01531:    	mov    QWORD PTR [rsp-0x38],rax
  01536: 00 	mov    rdi,0x0
  0153d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01546: 00 	movabs rax,0x0
  01550:    	mov    QWORD PTR [rsp-0x28],rax
  01555: 00 	movabs r13,0x0
  0155f:    	call   0xffff67e8
  01564:    	mov    rdi,QWORD PTR [rsp-0x18]
  01569:    	mov    QWORD PTR [rbx],rdi
  0156c:    	movq   xmm2,QWORD PTR [rsp]
  01571:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01577:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0157d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01583:    	add    rsp,0x20
  01587:    	test   rax,rax
  0158a:    	je     0x3a746
  01590: ff 	mov    QWORD PTR [rbp-0x90],rax
:00102 %12 = %13.call z()                   [<INVALID>]
:00103 
  01597:    	sub    rsp,0x20
  0159b:    	movq   QWORD PTR [rsp],xmm2
  015a0:    	movq   QWORD PTR [rsp+0x8],xmm4
  015a6:    	movq   QWORD PTR [rsp+0x10],xmm5
  015ac:    	movq   QWORD PTR [rsp+0x18],xmm6
  015b2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  015b9: d0 	movabs rax,0x55d0b27bf4f0
  015c3:    	call   rax
  015c5:    	mov    r15d,eax
  015c8: 00 	cmp    r15d,DWORD PTR [rip+0x40d]        # 0x19dc
  015cf:    	jne    0x3a755
  015d5:    	mov    eax,DWORD PTR [rip+0xffffffffffff7c28]        # 0xffff9203
  015db:    	cmp    DWORD PTR [rip+0x3f7],eax        # 0x19d8
  015e1:    	jne    0x3a755
  015e7:    	mov    rax,QWORD PTR [rbx]
  015ea:    	lea    rdi,[rsp-0x18]
  015ef:    	mov    QWORD PTR [rdi],rax
  015f2:    	mov    QWORD PTR [rbx],rdi
  015f5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015fe:    	mov    QWORD PTR [rsp-0x38],rcx
  01603: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0160a:    	mov    QWORD PTR [rsp-0x38],rax
  0160f: 00 	mov    rdi,0x0
  01616: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0161f: 00 	movabs rax,0x0
  01629:    	mov    QWORD PTR [rsp-0x28],rax
  0162e: 00 	movabs r13,0x0
  01638:    	call   0xffff67e8
  0163d:    	mov    rdi,QWORD PTR [rsp-0x18]
  01642:    	mov    QWORD PTR [rbx],rdi
  01645:    	movq   xmm2,QWORD PTR [rsp]
  0164a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01650:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01656:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0165c:    	add    rsp,0x20
  01660:    	test   rax,rax
  01663:    	je     0x3a7c4
  01669: ff 	mov    QWORD PTR [rbp-0x88],rax
:00105 %12 = %6 * %12                       [Integer][Integer]
  01670:    	mov    rdi,QWORD PTR [rbp-0x58]
  01674: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  0167b:    	sub    rsp,0x20
  0167f:    	movq   QWORD PTR [rsp],xmm2
  01684:    	movq   QWORD PTR [rsp+0x8],xmm4
  0168a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01690:    	movq   QWORD PTR [rsp+0x18],xmm6
  01696:    	mov    rdx,rdi
  01699:    	mov    rcx,rsi
  0169c:    	mov    rdi,rbx
  0169f:    	mov    rsi,r12
  016a2: d0 	movabs rax,0x55d0b27f2b80
  016ac:    	call   rax
  016ae:    	movq   xmm2,QWORD PTR [rsp]
  016b3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016b9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  016bf:    	movq   xmm6,QWORD PTR [rsp+0x18]
  016c5:    	add    rsp,0x20
  016c9: d0 	movabs r13,0x55d0b3204bd0
  016d3:    	test   rax,rax
  016d6:    	je     0xffff6823
  016dc: ff 	mov    QWORD PTR [rbp-0x88],rax
:00106 %11 = %11 + %12                      [Integer][Integer]
  016e3:    	mov    rdi,QWORD PTR [rbp-0x80]
  016e7: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  016ee: 00 	test   rdi,0x1
  016f5:    	je     0x3a7ef
  016fb: 00 	test   rsi,0x1
  01702:    	je     0x3a7ef
  01708:    	sub    rdi,0x1
  0170c:    	add    rdi,rsi
  0170f:    	jo     0x3a7ef
  01715:    	mov    QWORD PTR [rbp-0x80],rdi
:00107 %7 = %8.call new(%9; 3)              [<INVALID>]
:00108 
  01719:    	sub    rsp,0x20
  0171d:    	movq   QWORD PTR [rsp],xmm2
  01722:    	movq   QWORD PTR [rsp+0x8],xmm4
  01728:    	movq   QWORD PTR [rsp+0x10],xmm5
  0172e:    	movq   QWORD PTR [rsp+0x18],xmm6
  01734:    	mov    rdi,QWORD PTR [rbp-0x68]
  01738: d0 	movabs rax,0x55d0b27bf4f0
  01742:    	call   rax
  01744:    	mov    r15d,eax
  01747: 00 	cmp    r15d,DWORD PTR [rip+0x296]        # 0x19e4
  0174e:    	jne    0x3a80b
  01754:    	mov    eax,DWORD PTR [rip+0xffffffffffff7aa9]        # 0xffff9203
  0175a:    	cmp    DWORD PTR [rip+0x280],eax        # 0x19e0
  01760:    	jne    0x3a80b
  01766:    	mov    rax,QWORD PTR [rbx]
  01769:    	lea    rdi,[rsp-0x18]
  0176e:    	mov    QWORD PTR [rdi],rax
  01771:    	mov    QWORD PTR [rbx],rdi
  01774: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0177d:    	mov    QWORD PTR [rsp-0x38],rcx
  01782:    	mov    rax,QWORD PTR [rbp-0x68]
  01786:    	mov    QWORD PTR [rsp-0x38],rax
  0178b: 00 	mov    rdi,0x3
  01792:    	mov    rax,QWORD PTR [rbp-0x70]
  01796:    	mov    QWORD PTR [rsp-0x40],rax
  0179b:    	mov    rax,QWORD PTR [rbp-0x78]
  0179f:    	mov    QWORD PTR [rsp-0x48],rax
  017a4:    	mov    rax,QWORD PTR [rbp-0x80]
  017a8:    	mov    QWORD PTR [rsp-0x50],rax
  017ad: 00 	mov    QWORD PTR [rsp-0x30],0x0
  017b6: 00 	movabs rax,0x0
  017c0:    	mov    QWORD PTR [rsp-0x28],rax
  017c5: 00 	movabs r13,0x0
  017cf:    	call   0xffff67e8
  017d4:    	mov    rdi,QWORD PTR [rsp-0x18]
  017d9:    	mov    QWORD PTR [rbx],rdi
  017dc:    	movq   xmm2,QWORD PTR [rsp]
  017e1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017e7:    	movq   xmm5,QWORD PTR [rsp+0x10]
  017ed:    	movq   xmm6,QWORD PTR [rsp+0x18]
  017f3:    	add    rsp,0x20
  017f7:    	test   rax,rax
  017fa:    	je     0x3a877
  01800:    	mov    QWORD PTR [rbp-0x60],rax
:00110 _ = %2.call pl=(%7; 1)               [<INVALID>]
:00111 
  01804:    	sub    rsp,0x20
  01808:    	movq   QWORD PTR [rsp],xmm2
  0180d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01813:    	movq   QWORD PTR [rsp+0x10],xmm5
  01819:    	movq   QWORD PTR [rsp+0x18],xmm6
  0181f:    	mov    rdi,QWORD PTR [rbp-0x38]
  01823: d0 	movabs rax,0x55d0b27bf4f0
  0182d:    	call   rax
  0182f:    	mov    r15d,eax
  01832: 00 	cmp    r15d,DWORD PTR [rip+0x1b3]        # 0x19ec
  01839:    	jne    0x3a886
  0183f:    	mov    eax,DWORD PTR [rip+0xffffffffffff79be]        # 0xffff9203
  01845:    	cmp    DWORD PTR [rip+0x19d],eax        # 0x19e8
  0184b:    	jne    0x3a886
  01851:    	mov    rax,QWORD PTR [rbx]
  01854:    	lea    rdi,[rsp-0x18]
  01859:    	mov    QWORD PTR [rdi],rax
  0185c:    	mov    QWORD PTR [rbx],rdi
  0185f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01868:    	mov    QWORD PTR [rsp-0x38],rcx
  0186d:    	mov    rax,QWORD PTR [rbp-0x38]
  01871:    	mov    QWORD PTR [rsp-0x38],rax
  01876: 00 	mov    rdi,0x1
  0187d:    	mov    rax,QWORD PTR [rbp-0x60]
  01881:    	mov    QWORD PTR [rsp-0x40],rax
  01886: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0188f: 00 	movabs rax,0x0
  01899:    	mov    QWORD PTR [rsp-0x28],rax
  0189e: 00 	movabs r13,0x0
  018a8:    	call   0xffff67e8
  018ad:    	mov    rdi,QWORD PTR [rsp-0x18]
  018b2:    	mov    QWORD PTR [rbx],rdi
  018b5:    	movq   xmm2,QWORD PTR [rsp]
  018ba:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018c0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  018c6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  018cc:    	add    rsp,0x20
  018d0:    	test   rax,rax
  018d3:    	je     0x3a8f2
:00113 br =>:00114
  018d9:    	jmp    0x3a927
:00114 %7 = nil
  018de: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00115 ret %7
  018e6:    	mov    rax,QWORD PTR [rbp-0x60]
  018ea:    	leave  
  018eb:    	ret    
==> start whole compile: <unnamed> FuncId(73) self_class:Scene start:[00000] bytecode:0x55d0b31ea5d0
<== finished compile. elapsed:19.7µs
offset:Pos(45576) code: 228 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x38f5d
  0002c: cmp    DWORD PTR [rdi+0x4],0x2f
  00030: jne    0x38f5d
:00000 %3 = dynvar(3, %3)
  00036: mov    rax,QWORD PTR [rbp-0x10]
  0003a: mov    rax,QWORD PTR [rax]
  0003d: mov    rax,QWORD PTR [rax]
  00040: lea    rax,[rax+0x10]
  00044: mov    rax,QWORD PTR [rax-0x40]
  00048: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = literal[74]
  0004c: mov    rax,0x95
  00053: mov    QWORD PTR [rbp-0x48],rax
:00002 %2 = %3.call times(&%4)              [Integer]
:00003 
  00057: mov    rdi,QWORD PTR [rbp-0x40]
  0005b: test   rdi,0x1
  00062: jne    0x7f
  00068: test   rdi,0x7
  0006f: jne    0x38f6c
  00075: cmp    DWORD PTR [rdi+0x4],0x6
  00079: jne    0x38f6c
  0007f: cmp    DWORD PTR [rip+0xffffffffffff778d],0x26        # 0xffff7813
  00086: jne    0x38f6c
  0008c: mov    r9,QWORD PTR [rbp-0x48]
  00090: mov    rdx,rdi
  00093: mov    rax,QWORD PTR [rbx]
  00096: lea    rdi,[rsp-0x18]
  0009b: mov    QWORD PTR [rdi],rax
  0009e: mov    QWORD PTR [rbx],rdi
  000a1: mov    QWORD PTR [rsp-0x20],0x0
  000aa: mov    QWORD PTR [rsp-0x38],rcx
  000af: lea    rcx,[rbp-0x50]
  000b3: mov    r8,0x0
  000ba: call   0x38f7b
  000bf: mov    rdi,QWORD PTR [rsp-0x18]
  000c4: mov    QWORD PTR [rbx],rdi
  000c7: movabs r13,0x55d0b31ea610
  000d1: test   rax,rax
  000d4: je     0xffff4e33
  000da: mov    QWORD PTR [rbp-0x38],rax
:00005 ret %2
  000de: mov    rax,QWORD PTR [rbp-0x38]
  000e2: leave  
  000e3: ret    
==> start whole compile: <unnamed> FuncId(72) self_class:Scene start:[00000] bytecode:0x55d0b31ee8c0
<== finished compile. elapsed:62.6µs
offset:Pos(45804) code: 2132 bytes  data: 96 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x80
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x38],rax
  00016: mov    QWORD PTR [rbp-0x40],rax
  0001a: mov    QWORD PTR [rbp-0x48],rax
  0001e: mov    QWORD PTR [rbp-0x50],rax
  00022: mov    QWORD PTR [rbp-0x58],rax
  00026: mov    QWORD PTR [rbp-0x60],rax
  0002a: mov    QWORD PTR [rbp-0x68],rax
  0002e: mov    QWORD PTR [rbp-0x70],rax
  00032: mov    rdi,QWORD PTR [rbp-0x28]
  00036: test   rdi,0x7
  0003d: jne    0x38ec5
  00043: cmp    DWORD PTR [rdi+0x4],0x2f
  00047: jne    0x38ec5
:00000 %6 = const[Vec]                      [Vec]
  0004d: mov    rax,QWORD PTR [rip+0xffffffffffff76e0]        # 0xffff7734
  00054: cmp    rax,QWORD PTR [rip+0x809]        # 0x864
  0005b: jne    0x38ed4
  00061: mov    rax,QWORD PTR [rip+0x7ec]        # 0x854
  00068: mov    QWORD PTR [rbp-0x58],rax
:00001 %7 = literal[0.0]
  0006c: movq   xmm2,QWORD PTR [rip+0x800]        # 0x874
:00002 %8 = literal[0.0]
  00074: movq   xmm3,QWORD PTR [rip+0x808]        # 0x884
:00003 %9 = literal[0.0]
  0007c: movq   xmm4,QWORD PTR [rip+0x810]        # 0x894
:00004 %2 = %6.call new(%7; 3)              [#<Class:Vec>]
:00005 
  00084: movq   xmm0,xmm2
  00088: call   0xffff4e7b
  0008d: mov    QWORD PTR [rbp-0x60],rax
  00091: movq   xmm0,xmm3
  00095: call   0xffff4e7b
  0009a: mov    QWORD PTR [rbp-0x68],rax
  0009e: movq   xmm0,xmm4
  000a2: call   0xffff4e7b
  000a7: mov    QWORD PTR [rbp-0x70],rax
  000ab: mov    rdi,QWORD PTR [rbp-0x58]
  000af: test   rdi,0x7
  000b6: jne    0x38f1a
  000bc: cmp    DWORD PTR [rdi+0x4],0x26
  000c0: jne    0x38f1a
  000c6: cmp    DWORD PTR [rip+0xffffffffffff7662],0x26        # 0xffff772f
  000cd: jne    0x38f1a
  000d3: mov    r9,0x0
  000da: sub    rsp,0x20
  000de: movq   QWORD PTR [rsp],xmm2
  000e3: movq   QWORD PTR [rsp+0x8],xmm3
  000e9: movq   QWORD PTR [rsp+0x10],xmm4
  000ef: mov    rdx,rdi
  000f2: mov    rax,QWORD PTR [rbx]
  000f5: lea    rdi,[rsp-0x18]
  000fa: mov    QWORD PTR [rdi],rax
  000fd: mov    QWORD PTR [rbx],rdi
  00100: mov    QWORD PTR [rsp-0x20],0x0
  00109: mov    QWORD PTR [rsp-0x38],rcx
  0010e: lea    rcx,[rbp-0x60]
  00112: mov    r8,0x3
  00119: call   0x38f29
  0011e: mov    rdi,QWORD PTR [rsp-0x18]
  00123: mov    QWORD PTR [rbx],rdi
  00126: movq   xmm2,QWORD PTR [rsp]
  0012b: movq   xmm3,QWORD PTR [rsp+0x8]
  00131: movq   xmm4,QWORD PTR [rsp+0x10]
  00137: add    rsp,0x20
  0013b: movabs r13,0x55d0b31ee920
  00145: test   rax,rax
  00148: je     0xffff4d4f
  0014e: mov    QWORD PTR [rbp-0x38],rax
:00007 %6 = dynvar(2, %3)
  00152: mov    rax,QWORD PTR [rbp-0x10]
  00156: mov    rax,QWORD PTR [rax]
  00159: lea    rax,[rax+0x10]
  0015d: mov    rax,QWORD PTR [rax-0x40]
  00161: mov    QWORD PTR [rbp-0x58],rax
:00008 %7 = literal[73]
  00165: mov    rax,0x93
  0016c: mov    QWORD PTR [rbp-0x60],rax
:00009 _ = %6.call times(&%7)               [Integer]
:00010 
  00170: mov    rdi,QWORD PTR [rbp-0x58]
  00174: test   rdi,0x1
  0017b: jne    0x198
  00181: test   rdi,0x7
  00188: jne    0x38f57
  0018e: cmp    DWORD PTR [rdi+0x4],0x6
  00192: jne    0x38f57
  00198: cmp    DWORD PTR [rip+0xffffffffffff7590],0x26        # 0xffff772f
  0019f: jne    0x38f57
  001a5: mov    r9,QWORD PTR [rbp-0x60]
  001a9: sub    rsp,0x10
  001ad: movq   QWORD PTR [rsp],xmm3
  001b2: movq   QWORD PTR [rsp+0x8],xmm4
  001b8: mov    rdx,rdi
  001bb: mov    rax,QWORD PTR [rbx]
  001be: lea    rdi,[rsp-0x18]
  001c3: mov    QWORD PTR [rdi],rax
  001c6: mov    QWORD PTR [rbx],rdi
  001c9: mov    QWORD PTR [rsp-0x20],0x0
  001d2: mov    QWORD PTR [rsp-0x38],rcx
  001d7: lea    rcx,[rbp-0x68]
  001db: mov    r8,0x0
  001e2: call   0x38f66
  001e7: mov    rdi,QWORD PTR [rsp-0x18]
  001ec: mov    QWORD PTR [rbx],rdi
  001ef: movq   xmm3,QWORD PTR [rsp]
  001f4: movq   xmm4,QWORD PTR [rsp+0x8]
  001fa: add    rsp,0x10
  001fe: movabs r13,0x55d0b31ee970
  00208: test   rax,rax
  0020b: je     0xffff4d4f
:00012 %7 = %2
  00211: mov    rax,QWORD PTR [rbp-0x38]
  00215: mov    QWORD PTR [rbp-0x60],rax
:00013 %6 = %7.call x()                     [Vec]
:00014 
  00219: mov    rdi,QWORD PTR [rbp-0x60]
  0021d: test   rdi,0x7
  00224: jne    0x38f94
  0022a: cmp    DWORD PTR [rdi+0x4],0x25
  0022e: jne    0x38f94
  00234: cmp    DWORD PTR [rip+0xffffffffffff74f4],0x26        # 0xffff772f
  0023b: jne    0x38f94
  00241: mov    esi,DWORD PTR [rip+0x659]        # 0x8a0
  00247: cmp    esi,0xffffffff
  0024a: je     0x38fa3
  00250: xor    rax,rax
  00253: mov    ax,WORD PTR [rdi+0x2]
  00257: cmp    rax,0x3
  0025b: jne    0x274
  00261: cmp    esi,0x6
  00264: jge    0x274
  0026a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0026f: jmp    0x29e
  00274: sub    rsp,0x10
  00278: movq   QWORD PTR [rsp],xmm3
  0027d: movq   QWORD PTR [rsp+0x8],xmm4
  00283: movabs rax,0x55d0b27c8be0
  0028d: call   rax
  0028f: movq   xmm3,QWORD PTR [rsp]
  00294: movq   xmm4,QWORD PTR [rsp+0x8]
  0029a: add    rsp,0x10
  0029e: mov    QWORD PTR [rbp-0x58],rax
:00016 %7 = dynvar(2, %5)
  002a2: mov    rax,QWORD PTR [rbp-0x10]
  002a6: mov    rax,QWORD PTR [rax]
  002a9: lea    rax,[rax+0x10]
  002ad: mov    rax,QWORD PTR [rax-0x50]
  002b1: mov    QWORD PTR [rbp-0x60],rax
:00017 %8 = dynvar(2, %5)
  002b5: mov    rax,QWORD PTR [rbp-0x10]
  002b9: mov    rax,QWORD PTR [rax]
  002bc: lea    rax,[rax+0x10]
  002c0: mov    rax,QWORD PTR [rax-0x50]
  002c4: mov    QWORD PTR [rbp-0x68],rax
:00018 %7 = %7 * %8                         [Float][Float]
  002c8: mov    rdi,QWORD PTR [rbp-0x60]
  002cc: test   rdi,0x1
  002d3: jne    0x38fea
  002d9: test   rdi,0x2
  002e0: je     0x31c
  002e6: xorps  xmm2,xmm2
  002e9: movabs rax,0x8000000000000002
  002f3: cmp    rdi,rax
  002f6: je     0x32e
  002fc: mov    rax,rdi
  002ff: sar    rax,0x3f
  00303: add    rax,0x2
  00307: and    rdi,0xfffffffffffffffc
  0030b: or     rdi,rax
  0030e: rol    rdi,0x3d
  00312: movq   xmm2,rdi
  00317: jmp    0x32e
  0031c: call   0xffff4d88
  00321: test   rax,rax
  00324: je     0x38fea
  0032a: movq   xmm2,xmm0
  0032e: mov    rdi,QWORD PTR [rbp-0x68]
  00332: test   rdi,0x1
  00339: jne    0x38ff9
  0033f: test   rdi,0x2
  00346: je     0x382
  0034c: xorps  xmm3,xmm3
  0034f: movabs rax,0x8000000000000002
  00359: cmp    rdi,rax
  0035c: je     0x394
  00362: mov    rax,rdi
  00365: sar    rax,0x3f
  00369: add    rax,0x2
  0036d: and    rdi,0xfffffffffffffffc
  00371: or     rdi,rax
  00374: rol    rdi,0x3d
  00378: movq   xmm3,rdi
  0037d: jmp    0x394
  00382: call   0xffff4d88
  00387: test   rax,rax
  0038a: je     0x38ff9
  00390: movq   xmm3,xmm0
  00394: mulsd  xmm2,xmm3
:00019 %3 = %6 / %7                         [Float][Float]
  00398: mov    rdi,QWORD PTR [rbp-0x58]
  0039c: test   rdi,0x1
  003a3: jne    0x39008
  003a9: test   rdi,0x2
  003b0: je     0x3ec
  003b6: xorps  xmm5,xmm5
  003b9: movabs rax,0x8000000000000002
  003c3: cmp    rdi,rax
  003c6: je     0x3fe
  003cc: mov    rax,rdi
  003cf: sar    rax,0x3f
  003d3: add    rax,0x2
  003d7: and    rdi,0xfffffffffffffffc
  003db: or     rdi,rax
  003de: rol    rdi,0x3d
  003e2: movq   xmm5,rdi
  003e7: jmp    0x3fe
  003ec: call   0xffff4d88
  003f1: test   rax,rax
  003f4: je     0x39008
  003fa: movq   xmm5,xmm0
  003fe: movq   xmm6,xmm5
  00402: movq   rax,xmm2
  00407: test   rax,rax
  0040a: je     0xffff4d74
  00410: divsd  xmm6,xmm2
:00020 %7 = %2
  00414: mov    rax,QWORD PTR [rbp-0x38]
  00418: mov    QWORD PTR [rbp-0x60],rax
:00021 %6 = %7.call y()                     [Vec]
:00022 
  0041c: mov    rdi,QWORD PTR [rbp-0x60]
  00420: test   rdi,0x7
  00427: jne    0x39024
  0042d: cmp    DWORD PTR [rdi+0x4],0x25
  00431: jne    0x39024
  00437: cmp    DWORD PTR [rip+0xffffffffffff72f1],0x26        # 0xffff772f
  0043e: jne    0x39024
  00444: mov    esi,DWORD PTR [rip+0x45e]        # 0x8a8
  0044a: cmp    esi,0xffffffff
  0044d: je     0x39040
  00453: xor    rax,rax
  00456: mov    ax,WORD PTR [rdi+0x2]
  0045a: cmp    rax,0x3
  0045e: jne    0x477
  00464: cmp    esi,0x6
  00467: jge    0x477
  0046d: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00472: jmp    0x4ad
  00477: sub    rsp,0x20
  0047b: movq   QWORD PTR [rsp],xmm3
  00480: movq   QWORD PTR [rsp+0x8],xmm4
  00486: movq   QWORD PTR [rsp+0x10],xmm6
  0048c: movabs rax,0x55d0b27c8be0
  00496: call   rax
  00498: movq   xmm3,QWORD PTR [rsp]
  0049d: movq   xmm4,QWORD PTR [rsp+0x8]
  004a3: movq   xmm6,QWORD PTR [rsp+0x10]
  004a9: add    rsp,0x20
  004ad: mov    QWORD PTR [rbp-0x58],rax
:00024 %7 = dynvar(2, %5)
  004b1: mov    rax,QWORD PTR [rbp-0x10]
  004b5: mov    rax,QWORD PTR [rax]
  004b8: lea    rax,[rax+0x10]
  004bc: mov    rax,QWORD PTR [rax-0x50]
  004c0: mov    QWORD PTR [rbp-0x60],rax
:00025 %8 = dynvar(2, %5)
  004c4: mov    rax,QWORD PTR [rbp-0x10]
  004c8: mov    rax,QWORD PTR [rax]
  004cb: lea    rax,[rax+0x10]
  004cf: mov    rax,QWORD PTR [rax-0x50]
  004d3: mov    QWORD PTR [rbp-0x68],rax
:00026 %7 = %7 * %8                         [Float][Float]
  004d7: mov    rdi,QWORD PTR [rbp-0x60]
  004db: test   rdi,0x1
  004e2: jne    0x39093
  004e8: test   rdi,0x2
  004ef: je     0x52b
  004f5: xorps  xmm2,xmm2
  004f8: movabs rax,0x8000000000000002
  00502: cmp    rdi,rax
  00505: je     0x53d
  0050b: mov    rax,rdi
  0050e: sar    rax,0x3f
  00512: add    rax,0x2
  00516: and    rdi,0xfffffffffffffffc
  0051a: or     rdi,rax
  0051d: rol    rdi,0x3d
  00521: movq   xmm2,rdi
  00526: jmp    0x53d
  0052b: call   0xffff4d88
  00530: test   rax,rax
  00533: je     0x39093
  00539: movq   xmm2,xmm0
  0053d: mov    rdi,QWORD PTR [rbp-0x68]
  00541: test   rdi,0x1
  00548: jne    0x390af
  0054e: test   rdi,0x2
  00555: je     0x591
  0055b: xorps  xmm3,xmm3
  0055e: movabs rax,0x8000000000000002
  00568: cmp    rdi,rax
  0056b: je     0x5a3
  00571: mov    rax,rdi
  00574: sar    rax,0x3f
  00578: add    rax,0x2
  0057c: and    rdi,0xfffffffffffffffc
  00580: or     rdi,rax
  00583: rol    rdi,0x3d
  00587: movq   xmm3,rdi
  0058c: jmp    0x5a3
  00591: call   0xffff4d88
  00596: test   rax,rax
  00599: je     0x390af
  0059f: movq   xmm3,xmm0
  005a3: mulsd  xmm2,xmm3
:00027 %4 = %6 / %7                         [Float][Float]
  005a7: mov    rdi,QWORD PTR [rbp-0x58]
  005ab: test   rdi,0x1
  005b2: jne    0x390cb
  005b8: test   rdi,0x2
  005bf: je     0x5fb
  005c5: xorps  xmm5,xmm5
  005c8: movabs rax,0x8000000000000002
  005d2: cmp    rdi,rax
  005d5: je     0x60d
  005db: mov    rax,rdi
  005de: sar    rax,0x3f
  005e2: add    rax,0x2
  005e6: and    rdi,0xfffffffffffffffc
  005ea: or     rdi,rax
  005ed: rol    rdi,0x3d
  005f1: movq   xmm5,rdi
  005f6: jmp    0x60d
  005fb: call   0xffff4d88
  00600: test   rax,rax
  00603: je     0x390cb
  00609: movq   xmm5,xmm0
  0060d: movq   xmm7,xmm5
  00611: movq   rax,xmm2
  00616: test   rax,rax
  00619: je     0xffff4d74
  0061f: divsd  xmm7,xmm2
:00028 %7 = %2
  00623: mov    rax,QWORD PTR [rbp-0x38]
  00627: mov    QWORD PTR [rbp-0x60],rax
:00029 %6 = %7.call z()                     [Vec]
:00030 
  0062b: mov    rdi,QWORD PTR [rbp-0x60]
  0062f: test   rdi,0x7
  00636: jne    0x390f4
  0063c: cmp    DWORD PTR [rdi+0x4],0x25
  00640: jne    0x390f4
  00646: cmp    DWORD PTR [rip+0xffffffffffff70e2],0x26        # 0xffff772f
  0064d: jne    0x390f4
  00653: mov    esi,DWORD PTR [rip+0x257]        # 0x8b0
  00659: cmp    esi,0xffffffff
  0065c: je     0x3911d
  00662: xor    rax,rax
  00665: mov    ax,WORD PTR [rdi+0x2]
  00669: cmp    rax,0x3
  0066d: jne    0x686
  00673: cmp    esi,0x6
  00676: jge    0x686
  0067c: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00681: jmp    0x6c8
  00686: sub    rsp,0x20
  0068a: movq   QWORD PTR [rsp],xmm3
  0068f: movq   QWORD PTR [rsp+0x8],xmm4
  00695: movq   QWORD PTR [rsp+0x10],xmm6
  0069b: movq   QWORD PTR [rsp+0x18],xmm7
  006a1: movabs rax,0x55d0b27c8be0
  006ab: call   rax
  006ad: movq   xmm3,QWORD PTR [rsp]
  006b2: movq   xmm4,QWORD PTR [rsp+0x8]
  006b8: movq   xmm6,QWORD PTR [rsp+0x10]
  006be: movq   xmm7,QWORD PTR [rsp+0x18]
  006c4: add    rsp,0x20
  006c8: mov    QWORD PTR [rbp-0x58],rax
:00032 %7 = dynvar(2, %5)
  006cc: mov    rax,QWORD PTR [rbp-0x10]
  006d0: mov    rax,QWORD PTR [rax]
  006d3: lea    rax,[rax+0x10]
  006d7: mov    rax,QWORD PTR [rax-0x50]
  006db: mov    QWORD PTR [rbp-0x60],rax
:00033 %8 = dynvar(2, %5)
  006df: mov    rax,QWORD PTR [rbp-0x10]
  006e3: mov    rax,QWORD PTR [rax]
  006e6: lea    rax,[rax+0x10]
  006ea: mov    rax,QWORD PTR [rax-0x50]
  006ee: mov    QWORD PTR [rbp-0x68],rax
:00034 %7 = %7 * %8                         [Float][Float]
  006f2: mov    rdi,QWORD PTR [rbp-0x60]
  006f6: test   rdi,0x1
  006fd: jne    0x3917c
  00703: test   rdi,0x2
  0070a: je     0x746
  00710: xorps  xmm2,xmm2
  00713: movabs rax,0x8000000000000002
  0071d: cmp    rdi,rax
  00720: je     0x758
  00726: mov    rax,rdi
  00729: sar    rax,0x3f
  0072d: add    rax,0x2
  00731: and    rdi,0xfffffffffffffffc
  00735: or     rdi,rax
  00738: rol    rdi,0x3d
  0073c: movq   xmm2,rdi
  00741: jmp    0x758
  00746: call   0xffff4d88
  0074b: test   rax,rax
  0074e: je     0x3917c
  00754: movq   xmm2,xmm0
  00758: mov    rdi,QWORD PTR [rbp-0x68]
  0075c: test   rdi,0x1
  00763: jne    0x391a5
  00769: test   rdi,0x2
  00770: je     0x7ac
  00776: xorps  xmm3,xmm3
  00779: movabs rax,0x8000000000000002
  00783: cmp    rdi,rax
  00786: je     0x7be
  0078c: mov    rax,rdi
  0078f: sar    rax,0x3f
  00793: add    rax,0x2
  00797: and    rdi,0xfffffffffffffffc
  0079b: or     rdi,rax
  0079e: rol    rdi,0x3d
  007a2: movq   xmm3,rdi
  007a7: jmp    0x7be
  007ac: call   0xffff4d88
  007b1: test   rax,rax
  007b4: je     0x391a5
  007ba: movq   xmm3,xmm0
  007be: mulsd  xmm2,xmm3
:00035 %5 = %6 / %7                         [Float][Float]
  007c2: mov    rdi,QWORD PTR [rbp-0x58]
  007c6: test   rdi,0x1
  007cd: jne    0x391ce
  007d3: test   rdi,0x2
  007da: je     0x816
  007e0: xorps  xmm5,xmm5
  007e3: movabs rax,0x8000000000000002
  007ed: cmp    rdi,rax
  007f0: je     0x828
  007f6: mov    rax,rdi
  007f9: sar    rax,0x3f
  007fd: add    rax,0x2
  00801: and    rdi,0xfffffffffffffffc
  00805: or     rdi,rax
  00808: rol    rdi,0x3d
  0080c: movq   xmm5,rdi
  00811: jmp    0x828
  00816: call   0xffff4d88
  0081b: test   rax,rax
  0081e: je     0x391ce
  00824: movq   xmm5,xmm0
  00828: movq   xmm8,xmm5
  0082d: movq   rax,xmm2
  00832: test   rax,rax
  00835: je     0xffff4d74
  0083b: divsd  xmm8,xmm2
:00036 ret %5
  00840: movq   xmm0,xmm8
  00845: call   0xffff4e7b
  0084a: mov    QWORD PTR [rbp-0x50],rax
  0084e: mov    rax,QWORD PTR [rbp-0x50]
  00852: leave  
  00853: ret    
==> start whole compile: <unnamed> FuncId(70) self_class:Scene start:[00000] bytecode:0x55d0b31e9480
<== finished compile. elapsed:20.5µs
offset:Pos(48032) code: 223 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x38],0x4
  00010: mov    QWORD PTR [rbp-0x40],0x4
  00018: mov    rdi,QWORD PTR [rbp-0x28]
  0001c: test   rdi,0x7
  00023: jne    0x38950
  00029: cmp    DWORD PTR [rdi+0x4],0x2f
  0002d: jne    0x38950
:00000 %2 = dynvar(1, %1)
  00033: mov    rax,QWORD PTR [rbp-0x10]
  00037: lea    rax,[rax+0x10]
  0003b: mov    rax,QWORD PTR [rax-0x30]
  0003f: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = literal[72]
  00043: mov    rax,0x91
  0004a: mov    QWORD PTR [rbp-0x40],rax
:00002 _ = %2.call times(&%3)               [Integer]
:00003 
  0004e: mov    rdi,QWORD PTR [rbp-0x38]
  00052: test   rdi,0x1
  00059: jne    0x76
  0005f: test   rdi,0x7
  00066: jne    0x3895f
  0006c: cmp    DWORD PTR [rdi+0x4],0x6
  00070: jne    0x3895f
  00076: cmp    DWORD PTR [rip+0xffffffffffff6dfe],0x26        # 0xffff6e7b
  0007d: jne    0x3895f
  00083: mov    r9,QWORD PTR [rbp-0x40]
  00087: mov    rdx,rdi
  0008a: mov    rax,QWORD PTR [rbx]
  0008d: lea    rdi,[rsp-0x18]
  00092: mov    QWORD PTR [rdi],rax
  00095: mov    QWORD PTR [rbx],rdi
  00098: mov    QWORD PTR [rsp-0x20],0x0
  000a1: mov    QWORD PTR [rsp-0x38],rcx
  000a6: lea    rcx,[rbp-0x48]
  000aa: mov    r8,0x0
  000b1: call   0x3896e
  000b6: mov    rdi,QWORD PTR [rsp-0x18]
  000bb: mov    QWORD PTR [rbx],rdi
  000be: movabs r13,0x55d0b31e94c0
  000c8: test   rax,rax
  000cb: je     0xffff449b
:00005 %2 = nil
  000d1: mov    QWORD PTR [rbp-0x38],0x4
:00006 ret %2
  000d9: mov    rax,QWORD PTR [rbp-0x38]
  000dd: leave  
  000de: ret    
thread 'main' panicked at 'internal error: entered unreachable code: Illegal packed value. 0x0100000025c308c4', src/value.rs:254:22
stack backtrace:
   0: rust_begin_unwind
             at /rustc/215e3cd218b83b8a3152d84d92f17109253c25e1/library/std/src/panicking.rs:575:5
   1: core::panicking::panic_fmt
             at /rustc/215e3cd218b83b8a3152d84d92f17109253c25e1/library/core/src/panicking.rs:65:14
   2: monoruby::value::Value::unpack
   3: monoruby::executor::globals::Globals::val_tobytes
   4: monoruby::executor::builtins::object::puts
   5: <unknown>
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
fatal runtime error: failed to initiate panic, error 5
