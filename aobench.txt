    Finished dev [optimized + debuginfo] target(s) in 0.10s
     Running `target/debug/monoruby benchmark/app_aobench.rb`
==> start whole compile: initialize FuncId(55) self_class:Vec start:[00000] bytecode:0x5576cd674500
<== finished compile. elapsed:25.5µs
offset:Pos(12241) code: 144 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x48],0x4
  00010: mov    rdi,QWORD PTR [rbp-0x28]
  00014: test   rdi,0x7
  0001b: jne    0x3d59b
  00021: cmp    DWORD PTR [rdi+0x4],0x25
  00025: jne    0x3d59b
:00000 @x: Vec[IvarId(0)] = %1
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: xor    rax,rax
  00032: mov    ax,WORD PTR [rdi+0x2]
  00036: cmp    rax,0x3
  0003a: jne    0x3d5aa
  00040: mov    rax,QWORD PTR [rbp-0x30]
  00044: mov    QWORD PTR [rdi+0x10],rax
:00001 @y: Vec[IvarId(1)] = %2
  00048: mov    rdi,QWORD PTR [rbp-0x28]
  0004c: xor    rax,rax
  0004f: mov    ax,WORD PTR [rdi+0x2]
  00053: cmp    rax,0x3
  00057: jne    0x3d5c4
  0005d: mov    rax,QWORD PTR [rbp-0x38]
  00061: mov    QWORD PTR [rdi+0x18],rax
:00002 @z: Vec[IvarId(2)] = %3
  00065: mov    rdi,QWORD PTR [rbp-0x28]
  00069: xor    rax,rax
  0006c: mov    ax,WORD PTR [rdi+0x2]
  00070: cmp    rax,0x3
  00074: jne    0x3d5de
  0007a: mov    rax,QWORD PTR [rbp-0x40]
  0007e: mov    QWORD PTR [rdi+0x20],rax
:00003 %4 = %3
  00082: mov    rax,QWORD PTR [rbp-0x40]
  00086: mov    QWORD PTR [rbp-0x48],rax
:00004 ret %4
  0008a: mov    rax,QWORD PTR [rbp-0x48]
  0008e: leave  
  0008f: ret    
==> start whole compile: vdot FuncId(59) self_class:Vec start:[00000] bytecode:0x5576cd6dfc10
<== finished compile. elapsed:32.7µs
offset:Pos(14191) code: 1149 bytes  data: 24 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x3ce5a
  0002c: cmp    DWORD PTR [rdi+0x4],0x25
  00030: jne    0x3ce5a
:00000 %2 = @x: Vec[IvarId(0)]
  00036: mov    rdi,QWORD PTR [rbp-0x28]
  0003a: xor    rax,rax
  0003d: mov    ax,WORD PTR [rdi+0x2]
  00041: cmp    rax,0x3
  00045: jne    0x3ce69
  0004b: mov    rax,QWORD PTR [rdi+0x10]
  0004f: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = %1.call x()                     [Vec]
:00002 
  00053: mov    rdi,QWORD PTR [rbp-0x30]
  00057: test   rdi,0x7
  0005e: jne    0x3ce7f
  00064: cmp    DWORD PTR [rdi+0x4],0x25
  00068: jne    0x3ce7f
  0006e: cmp    DWORD PTR [rip+0xfffffffffffff234],0x26        # 0xfffff2a9
  00075: jne    0x3ce7f
  0007b: mov    esi,DWORD PTR [rip+0x400]        # 0x481
  00081: cmp    esi,0xffffffff
  00084: je     0x3ce8e
  0008a: xor    rax,rax
  0008d: mov    ax,WORD PTR [rdi+0x2]
  00091: cmp    rax,0x3
  00095: jne    0xae
  0009b: cmp    esi,0x6
  0009e: jge    0xae
  000a4: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000a9: jmp    0xba
  000ae: movabs rax,0x5576cccb62a0
  000b8: call   rax
  000ba: mov    QWORD PTR [rbp-0x40],rax
:00004 %2 = %2 * %3                         [Float][Float]
  000be: mov    rdi,QWORD PTR [rbp-0x38]
  000c2: test   rdi,0x1
  000c9: jne    0x3ceb7
  000cf: test   rdi,0x2
  000d6: je     0x112
  000dc: xorps  xmm2,xmm2
  000df: movabs rax,0x8000000000000002
  000e9: cmp    rdi,rax
  000ec: je     0x124
  000f2: mov    rax,rdi
  000f5: sar    rax,0x3f
  000f9: add    rax,0x2
  000fd: and    rdi,0xfffffffffffffffc
  00101: or     rdi,rax
  00104: rol    rdi,0x3d
  00108: movq   xmm2,rdi
  0010d: jmp    0x124
  00112: call   0xffffc905
  00117: test   rax,rax
  0011a: je     0x3ceb7
  00120: movq   xmm2,xmm0
  00124: mov    rdi,QWORD PTR [rbp-0x40]
  00128: test   rdi,0x1
  0012f: jne    0x3cec6
  00135: test   rdi,0x2
  0013c: je     0x178
  00142: xorps  xmm3,xmm3
  00145: movabs rax,0x8000000000000002
  0014f: cmp    rdi,rax
  00152: je     0x18a
  00158: mov    rax,rdi
  0015b: sar    rax,0x3f
  0015f: add    rax,0x2
  00163: and    rdi,0xfffffffffffffffc
  00167: or     rdi,rax
  0016a: rol    rdi,0x3d
  0016e: movq   xmm3,rdi
  00173: jmp    0x18a
  00178: call   0xffffc905
  0017d: test   rax,rax
  00180: je     0x3cec6
  00186: movq   xmm3,xmm0
  0018a: mulsd  xmm2,xmm3
:00005 %3 = @y: Vec[IvarId(1)]
  0018e: mov    rdi,QWORD PTR [rbp-0x28]
  00192: xor    rax,rax
  00195: mov    ax,WORD PTR [rdi+0x2]
  00199: cmp    rax,0x3
  0019d: jne    0x3ced5
  001a3: mov    rax,QWORD PTR [rdi+0x18]
  001a7: mov    QWORD PTR [rbp-0x40],rax
:00006 %4 = %1.call y()                     [Vec]
:00007 
  001ab: mov    rdi,QWORD PTR [rbp-0x30]
  001af: test   rdi,0x7
  001b6: jne    0x3cefd
  001bc: cmp    DWORD PTR [rdi+0x4],0x25
  001c0: jne    0x3cefd
  001c6: cmp    DWORD PTR [rip+0xfffffffffffff0dc],0x26        # 0xfffff2a9
  001cd: jne    0x3cefd
  001d3: mov    esi,DWORD PTR [rip+0x2b0]        # 0x489
  001d9: cmp    esi,0xffffffff
  001dc: je     0x3cf19
  001e2: xor    rax,rax
  001e5: mov    ax,WORD PTR [rdi+0x2]
  001e9: cmp    rax,0x3
  001ed: jne    0x206
  001f3: cmp    esi,0x6
  001f6: jge    0x206
  001fc: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00201: jmp    0x224
  00206: sub    rsp,0x10
  0020a: movq   QWORD PTR [rsp],xmm2
  0020f: movabs rax,0x5576cccb62a0
  00219: call   rax
  0021b: movq   xmm2,QWORD PTR [rsp]
  00220: add    rsp,0x10
  00224: mov    QWORD PTR [rbp-0x48],rax
:00009 %3 = %3 * %4                         [Float][Float]
  00228: mov    rdi,QWORD PTR [rbp-0x40]
  0022c: test   rdi,0x1
  00233: jne    0x3cf54
  00239: test   rdi,0x2
  00240: je     0x27c
  00246: xorps  xmm3,xmm3
  00249: movabs rax,0x8000000000000002
  00253: cmp    rdi,rax
  00256: je     0x28e
  0025c: mov    rax,rdi
  0025f: sar    rax,0x3f
  00263: add    rax,0x2
  00267: and    rdi,0xfffffffffffffffc
  0026b: or     rdi,rax
  0026e: rol    rdi,0x3d
  00272: movq   xmm3,rdi
  00277: jmp    0x28e
  0027c: call   0xffffc905
  00281: test   rax,rax
  00284: je     0x3cf54
  0028a: movq   xmm3,xmm0
  0028e: mov    rdi,QWORD PTR [rbp-0x48]
  00292: test   rdi,0x1
  00299: jne    0x3cf70
  0029f: test   rdi,0x2
  002a6: je     0x2e2
  002ac: xorps  xmm4,xmm4
  002af: movabs rax,0x8000000000000002
  002b9: cmp    rdi,rax
  002bc: je     0x2f4
  002c2: mov    rax,rdi
  002c5: sar    rax,0x3f
  002c9: add    rax,0x2
  002cd: and    rdi,0xfffffffffffffffc
  002d1: or     rdi,rax
  002d4: rol    rdi,0x3d
  002d8: movq   xmm4,rdi
  002dd: jmp    0x2f4
  002e2: call   0xffffc905
  002e7: test   rax,rax
  002ea: je     0x3cf70
  002f0: movq   xmm4,xmm0
  002f4: mulsd  xmm3,xmm4
:00010 %2 = %2 + %3                         [Float][Float]
  002f8: addsd  xmm2,xmm3
:00011 %3 = @z: Vec[IvarId(2)]
  002fc: mov    rdi,QWORD PTR [rbp-0x28]
  00300: xor    rax,rax
  00303: mov    ax,WORD PTR [rdi+0x2]
  00307: cmp    rax,0x3
  0030b: jne    0x3cf8c
  00311: mov    rax,QWORD PTR [rdi+0x20]
  00315: mov    QWORD PTR [rbp-0x40],rax
:00012 %4 = %1.call z()                     [Vec]
:00013 
  00319: mov    rdi,QWORD PTR [rbp-0x30]
  0031d: test   rdi,0x7
  00324: jne    0x3cfc0
  0032a: cmp    DWORD PTR [rdi+0x4],0x25
  0032e: jne    0x3cfc0
  00334: cmp    DWORD PTR [rip+0xffffffffffffef6e],0x26        # 0xfffff2a9
  0033b: jne    0x3cfc0
  00341: mov    esi,DWORD PTR [rip+0x14a]        # 0x491
  00347: cmp    esi,0xffffffff
  0034a: je     0x3cfdc
  00350: xor    rax,rax
  00353: mov    ax,WORD PTR [rdi+0x2]
  00357: cmp    rax,0x3
  0035b: jne    0x374
  00361: cmp    esi,0x6
  00364: jge    0x374
  0036a: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0036f: jmp    0x392
  00374: sub    rsp,0x10
  00378: movq   QWORD PTR [rsp],xmm2
  0037d: movabs rax,0x5576cccb62a0
  00387: call   rax
  00389: movq   xmm2,QWORD PTR [rsp]
  0038e: add    rsp,0x10
  00392: mov    QWORD PTR [rbp-0x48],rax
:00015 %3 = %3 * %4                         [Float][Float]
  00396: mov    rdi,QWORD PTR [rbp-0x40]
  0039a: test   rdi,0x1
  003a1: jne    0x3d017
  003a7: test   rdi,0x2
  003ae: je     0x3ea
  003b4: xorps  xmm3,xmm3
  003b7: movabs rax,0x8000000000000002
  003c1: cmp    rdi,rax
  003c4: je     0x3fc
  003ca: mov    rax,rdi
  003cd: sar    rax,0x3f
  003d1: add    rax,0x2
  003d5: and    rdi,0xfffffffffffffffc
  003d9: or     rdi,rax
  003dc: rol    rdi,0x3d
  003e0: movq   xmm3,rdi
  003e5: jmp    0x3fc
  003ea: call   0xffffc905
  003ef: test   rax,rax
  003f2: je     0x3d017
  003f8: movq   xmm3,xmm0
  003fc: mov    rdi,QWORD PTR [rbp-0x48]
  00400: test   rdi,0x1
  00407: jne    0x3d033
  0040d: test   rdi,0x2
  00414: je     0x450
  0041a: xorps  xmm4,xmm4
  0041d: movabs rax,0x8000000000000002
  00427: cmp    rdi,rax
  0042a: je     0x462
  00430: mov    rax,rdi
  00433: sar    rax,0x3f
  00437: add    rax,0x2
  0043b: and    rdi,0xfffffffffffffffc
  0043f: or     rdi,rax
  00442: rol    rdi,0x3d
  00446: movq   xmm4,rdi
  0044b: jmp    0x462
  00450: call   0xffffc905
  00455: test   rax,rax
  00458: je     0x3d033
  0045e: movq   xmm4,xmm0
  00462: mulsd  xmm3,xmm4
:00016 %2 = %2 + %3                         [Float][Float]
  00466: addsd  xmm2,xmm3
:00017 ret %2
  0046a: movq   xmm0,xmm2
  0046e: call   0xffffc9f8
  00473: mov    QWORD PTR [rbp-0x38],rax
  00477: mov    rax,QWORD PTR [rbp-0x38]
  0047b: leave  
  0047c: ret    
  
==> start whole compile: intersect FuncId(63) self_class:Sphere start:[00000] bytecode:0x5576cd697c40
<== finished compile. elapsed:169.1µs
offset:Pos(15510) code: 6811 bytes  data: 279 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xb0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x40],rax
  00016:    	mov    QWORD PTR [rbp-0x48],rax
  0001a:    	mov    QWORD PTR [rbp-0x50],rax
  0001e:    	mov    QWORD PTR [rbp-0x58],rax
  00022:    	mov    QWORD PTR [rbp-0x60],rax
  00026:    	mov    QWORD PTR [rbp-0x68],rax
  0002a:    	mov    QWORD PTR [rbp-0x70],rax
  0002e:    	mov    QWORD PTR [rbp-0x78],rax
  00032:    	mov    QWORD PTR [rbp-0x80],rax
  00036: ff 	mov    QWORD PTR [rbp-0x88],rax
  0003d: ff 	mov    QWORD PTR [rbp-0x90],rax
  00044: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004b: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00052:    	mov    rdi,QWORD PTR [rbp-0x28]
  00056: 00 	test   rdi,0x7
  0005d:    	jne    0x3cb28
  00063:    	cmp    DWORD PTR [rdi+0x4],0x27
  00067:    	jne    0x3cb28
:00000 %9 = %1.call org()                   [Ray]
:00001 
  0006d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00071: 00 	test   rdi,0x7
  00078:    	jne    0x3cb37
  0007e:    	cmp    DWORD PTR [rdi+0x4],0x2b
  00082:    	jne    0x3cb37
  00088: 26 	cmp    DWORD PTR [rip+0xffffffffffffecf3],0x26        # 0xffffed82
  0008f:    	jne    0x3cb37
  00095:    	mov    esi,DWORD PTR [rip+0x1a04]        # 0x1a9f
  0009b:    	cmp    esi,0xffffffff
  0009e:    	je     0x3cb46
  000a4:    	xor    rax,rax
  000a7:    	mov    ax,WORD PTR [rdi+0x2]
  000ab:    	cmp    rax,0x3
  000af:    	jne    0xc8
  000b5:    	cmp    esi,0x6
  000b8:    	jge    0xc8
  000be:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000c3:    	jmp    0xd4
  000c8: 76 	movabs rax,0x5576cccb62a0
  000d2:    	call   rax
  000d4:    	mov    QWORD PTR [rbp-0x70],rax
:00003 %10 = @center: Sphere[IvarId(0)]
  000d8:    	mov    rdi,QWORD PTR [rbp-0x28]
  000dc:    	xor    rax,rax
  000df:    	mov    ax,WORD PTR [rdi+0x2]
  000e3:    	cmp    rax,0x3
  000e7:    	jne    0x3cb6f
  000ed:    	mov    rax,QWORD PTR [rdi+0x10]
  000f1:    	mov    QWORD PTR [rbp-0x78],rax
:00004 %3 = %9.call vsub(%10; 1)            [Vec]
:00005 
  000f5:    	mov    rdi,QWORD PTR [rbp-0x70]
  000f9: 00 	test   rdi,0x7
  00100:    	jne    0x3cb85
  00106:    	cmp    DWORD PTR [rdi+0x4],0x25
  0010a:    	jne    0x3cb85
  00110: 26 	cmp    DWORD PTR [rip+0xffffffffffffec6b],0x26        # 0xffffed82
  00117:    	jne    0x3cb85
  0011d:    	mov    rax,QWORD PTR [rbx]
  00120:    	lea    rdi,[rsp-0x18]
  00125:    	mov    QWORD PTR [rdi],rax
  00128:    	mov    QWORD PTR [rbx],rdi
  0012b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00134:    	mov    QWORD PTR [rsp-0x38],rcx
  00139:    	mov    rax,QWORD PTR [rbp-0x70]
  0013d:    	mov    QWORD PTR [rsp-0x38],rax
  00142: 00 	mov    rdi,0x1
  00149:    	mov    rax,QWORD PTR [rbp-0x78]
  0014d:    	mov    QWORD PTR [rsp-0x40],rax
  00152: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0015b: 08 	movabs rax,0x800000039
  00165:    	mov    QWORD PTR [rsp-0x28],rax
  0016a: 76 	movabs r13,0x5576cd69f550
  00174:    	call   0xfffff9ef
  00179:    	lea    rdi,[rbp-0x8]
  0017d:    	mov    QWORD PTR [rbx],rdi
  00180: 76 	movabs r13,0x5576cd697ca0
  0018a:    	test   rax,rax
  0018d:    	je     0xffffc3a5
  00193:    	mov    QWORD PTR [rbp-0x40],rax
:00007 %9 = %1.call dir()                   [Ray]
:00008 
  00197:    	mov    rdi,QWORD PTR [rbp-0x30]
  0019b: 00 	test   rdi,0x7
  001a2:    	jne    0x3cb94
  001a8:    	cmp    DWORD PTR [rdi+0x4],0x2b
  001ac:    	jne    0x3cb94
  001b2: 26 	cmp    DWORD PTR [rip+0xffffffffffffebc9],0x26        # 0xffffed82
  001b9:    	jne    0x3cb94
  001bf:    	mov    esi,DWORD PTR [rip+0x18e2]        # 0x1aa7
  001c5:    	cmp    esi,0xffffffff
  001c8:    	je     0x3cba3
  001ce:    	xor    rax,rax
  001d1:    	mov    ax,WORD PTR [rdi+0x2]
  001d5:    	cmp    rax,0x3
  001d9:    	jne    0x1f2
  001df:    	cmp    esi,0x6
  001e2:    	jge    0x1f2
  001e8:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001ed:    	jmp    0x1fe
  001f2: 76 	movabs rax,0x5576cccb62a0
  001fc:    	call   rax
  001fe:    	mov    QWORD PTR [rbp-0x70],rax
:00010 %4 = %3.call vdot(%9; 1)             [Vec]
:00011 
  00202:    	mov    rdi,QWORD PTR [rbp-0x40]
  00206: 00 	test   rdi,0x7
  0020d:    	jne    0x3cbcc
  00213:    	cmp    DWORD PTR [rdi+0x4],0x25
  00217:    	jne    0x3cbcc
  0021d: 26 	cmp    DWORD PTR [rip+0xffffffffffffeb5e],0x26        # 0xffffed82
  00224:    	jne    0x3cbcc
  0022a:    	mov    rax,QWORD PTR [rbx]
  0022d:    	lea    rdi,[rsp-0x18]
  00232:    	mov    QWORD PTR [rdi],rax
  00235:    	mov    QWORD PTR [rbx],rdi
  00238: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00241:    	mov    QWORD PTR [rsp-0x38],rcx
  00246:    	mov    rax,QWORD PTR [rbp-0x40]
  0024a:    	mov    QWORD PTR [rsp-0x38],rax
  0024f: 00 	mov    rdi,0x1
  00256:    	mov    rax,QWORD PTR [rbp-0x70]
  0025a:    	mov    QWORD PTR [rsp-0x40],rax
  0025f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00268: 05 	movabs rax,0x50000003b
  00272:    	mov    QWORD PTR [rsp-0x28],rax
  00277: 76 	movabs r13,0x5576cd6dfc10
  00281:    	call   0xfffffa81
  00286:    	lea    rdi,[rbp-0x8]
  0028a:    	mov    QWORD PTR [rbx],rdi
  0028d: 76 	movabs r13,0x5576cd697d00
  00297:    	test   rax,rax
  0029a:    	je     0xffffc3a5
  002a0:    	mov    QWORD PTR [rbp-0x48],rax
:00013 %10 = %3
  002a4:    	mov    rax,QWORD PTR [rbp-0x40]
  002a8:    	mov    QWORD PTR [rbp-0x78],rax
:00014 %9 = %3.call vdot(%10; 1)            [Vec]
:00015 
  002ac:    	mov    rdi,QWORD PTR [rbp-0x40]
  002b0: 00 	test   rdi,0x7
  002b7:    	jne    0x3cbdb
  002bd:    	cmp    DWORD PTR [rdi+0x4],0x25
  002c1:    	jne    0x3cbdb
  002c7: 26 	cmp    DWORD PTR [rip+0xffffffffffffeab4],0x26        # 0xffffed82
  002ce:    	jne    0x3cbdb
  002d4:    	mov    rax,QWORD PTR [rbx]
  002d7:    	lea    rdi,[rsp-0x18]
  002dc:    	mov    QWORD PTR [rdi],rax
  002df:    	mov    QWORD PTR [rbx],rdi
  002e2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  002eb:    	mov    QWORD PTR [rsp-0x38],rcx
  002f0:    	mov    rax,QWORD PTR [rbp-0x40]
  002f4:    	mov    QWORD PTR [rsp-0x38],rax
  002f9: 00 	mov    rdi,0x1
  00300:    	mov    rax,QWORD PTR [rbp-0x78]
  00304:    	mov    QWORD PTR [rsp-0x40],rax
  00309: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00312: 05 	movabs rax,0x50000003b
  0031c:    	mov    QWORD PTR [rsp-0x28],rax
  00321: 76 	movabs r13,0x5576cd6dfc10
  0032b:    	call   0xfffffa81
  00330:    	lea    rdi,[rbp-0x8]
  00334:    	mov    QWORD PTR [rbx],rdi
  00337: 76 	movabs r13,0x5576cd697d40
  00341:    	test   rax,rax
  00344:    	je     0xffffc3a5
  0034a:    	mov    QWORD PTR [rbp-0x70],rax
:00017 %10 = @radius: Sphere[IvarId(1)]
  0034e:    	mov    rdi,QWORD PTR [rbp-0x28]
  00352:    	xor    rax,rax
  00355:    	mov    ax,WORD PTR [rdi+0x2]
  00359:    	cmp    rax,0x3
  0035d:    	jne    0x3cbea
  00363:    	mov    rax,QWORD PTR [rdi+0x18]
  00367:    	mov    QWORD PTR [rbp-0x78],rax
:00018 %11 = @radius: Sphere[IvarId(1)]
  0036b:    	mov    rdi,QWORD PTR [rbp-0x28]
  0036f:    	xor    rax,rax
  00372:    	mov    ax,WORD PTR [rdi+0x2]
  00376:    	cmp    rax,0x3
  0037a:    	jne    0x3cc00
  00380:    	mov    rax,QWORD PTR [rdi+0x18]
  00384:    	mov    QWORD PTR [rbp-0x80],rax
:00019 %10 = %10 * %11                      [Float][Float]
  00388:    	mov    rdi,QWORD PTR [rbp-0x78]
  0038c: 00 	test   rdi,0x1
  00393:    	jne    0x3cc16
  00399: 00 	test   rdi,0x2
  003a0:    	je     0x3dc
  003a6:    	xorps  xmm2,xmm2
  003a9: 00 	movabs rax,0x8000000000000002
  003b3:    	cmp    rdi,rax
  003b6:    	je     0x3ee
  003bc:    	mov    rax,rdi
  003bf:    	sar    rax,0x3f
  003c3:    	add    rax,0x2
  003c7:    	and    rdi,0xfffffffffffffffc
  003cb:    	or     rdi,rax
  003ce:    	rol    rdi,0x3d
  003d2:    	movq   xmm2,rdi
  003d7:    	jmp    0x3ee
  003dc:    	call   0xffffc3de
  003e1:    	test   rax,rax
  003e4:    	je     0x3cc16
  003ea:    	movq   xmm2,xmm0
  003ee:    	mov    rdi,QWORD PTR [rbp-0x80]
  003f2: 00 	test   rdi,0x1
  003f9:    	jne    0x3cc25
  003ff: 00 	test   rdi,0x2
  00406:    	je     0x442
  0040c:    	xorps  xmm3,xmm3
  0040f: 00 	movabs rax,0x8000000000000002
  00419:    	cmp    rdi,rax
  0041c:    	je     0x454
  00422:    	mov    rax,rdi
  00425:    	sar    rax,0x3f
  00429:    	add    rax,0x2
  0042d:    	and    rdi,0xfffffffffffffffc
  00431:    	or     rdi,rax
  00434:    	rol    rdi,0x3d
  00438:    	movq   xmm3,rdi
  0043d:    	jmp    0x454
  00442:    	call   0xffffc3de
  00447:    	test   rax,rax
  0044a:    	je     0x3cc25
  00450:    	movq   xmm3,xmm0
  00454:    	mulsd  xmm2,xmm3
:00020 %5 = %9 - %10                        [Float][Float]
  00458:    	mov    rdi,QWORD PTR [rbp-0x70]
  0045c: 00 	test   rdi,0x1
  00463:    	jne    0x3cc34
  00469: 00 	test   rdi,0x2
  00470:    	je     0x4ac
  00476:    	xorps  xmm4,xmm4
  00479: 00 	movabs rax,0x8000000000000002
  00483:    	cmp    rdi,rax
  00486:    	je     0x4be
  0048c:    	mov    rax,rdi
  0048f:    	sar    rax,0x3f
  00493:    	add    rax,0x2
  00497:    	and    rdi,0xfffffffffffffffc
  0049b:    	or     rdi,rax
  0049e:    	rol    rdi,0x3d
  004a2:    	movq   xmm4,rdi
  004a7:    	jmp    0x4be
  004ac:    	call   0xffffc3de
  004b1:    	test   rax,rax
  004b4:    	je     0x3cc34
  004ba:    	movq   xmm4,xmm0
  004be:    	movq   xmm5,xmm4
  004c2:    	subsd  xmm5,xmm2
:00021 %9 = %4 * %4                         [Float][Float]
  004c6:    	mov    rdi,QWORD PTR [rbp-0x48]
  004ca: 00 	test   rdi,0x1
  004d1:    	jne    0x3cc50
  004d7: 00 	test   rdi,0x2
  004de:    	je     0x51a
  004e4:    	xorps  xmm6,xmm6
  004e7: 00 	movabs rax,0x8000000000000002
  004f1:    	cmp    rdi,rax
  004f4:    	je     0x52c
  004fa:    	mov    rax,rdi
  004fd:    	sar    rax,0x3f
  00501:    	add    rax,0x2
  00505:    	and    rdi,0xfffffffffffffffc
  00509:    	or     rdi,rax
  0050c:    	rol    rdi,0x3d
  00510:    	movq   xmm6,rdi
  00515:    	jmp    0x52c
  0051a:    	call   0xffffc3de
  0051f:    	test   rax,rax
  00522:    	je     0x3cc50
  00528:    	movq   xmm6,xmm0
  0052c:    	movq   xmm4,xmm6
  00530:    	mulsd  xmm4,xmm6
:00022 %6 = %9 - %5                         [Float][Float]
  00534:    	movq   xmm7,xmm4
  00538:    	subsd  xmm7,xmm5
:00023 %9 = literal[0.0]
  0053c: 00 	movq   xmm4,QWORD PTR [rip+0x1576]        # 0x1aba
:00024 _%9 = %6 > %9                        [Float][Float]
:00025 condnotbr _%9 =>:00113
  00544:    	ucomisd xmm7,xmm4
  00548:    	jbe    0x3da76
:00026 %9 = %4
:00027 %9 = neg %9                          [Integer]
  0054e:    	movq   xmm0,xmm6
  00552:    	call   0xffffc4d1
  00557:    	mov    QWORD PTR [rbp-0x70],rax
  0055b:    	sub    rsp,0x30
  0055f:    	movq   QWORD PTR [rsp],xmm2
  00564:    	movq   QWORD PTR [rsp+0x8],xmm3
  0056a:    	movq   QWORD PTR [rsp+0x10],xmm5
  00570:    	movq   QWORD PTR [rsp+0x18],xmm6
  00576:    	movq   QWORD PTR [rsp+0x20],xmm7
  0057c:    	mov    rdi,QWORD PTR [rbp-0x70]
  00580:    	mov    rdx,rdi
  00583:    	mov    rdi,rbx
  00586:    	mov    rsi,r12
  00589: 76 	movabs rax,0x5576cccf2210
  00593:    	call   rax
  00595:    	movq   xmm2,QWORD PTR [rsp]
  0059a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005a0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005a6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  005ac:    	movq   xmm7,QWORD PTR [rsp+0x20]
  005b2:    	add    rsp,0x30
  005b6: 76 	movabs r13,0x5576cd697e00
  005c0:    	test   rax,rax
  005c3:    	je     0xffffc3a5
  005c9:    	mov    QWORD PTR [rbp-0x70],rax
:00028 %11 = const[Math]                    [<invalid>]
  005cd: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe7b6]        # 0xffffed8a
  005d4: 00 	cmp    rax,QWORD PTR [rip+0x14ff]        # 0x1ada
  005db:    	jne    0x3cc79
  005e1: 00 	mov    rax,QWORD PTR [rip+0x14e2]        # 0x1aca
  005e8:    	mov    QWORD PTR [rbp-0x80],rax
:00029 %12 = %6
:00030 %10 = %11.call sqrt(%12; 1)          [<INVALID>]
:00031 
  005ec:    	movq   xmm0,xmm7
  005f0:    	call   0xffffc4d1
  005f5: ff 	mov    QWORD PTR [rbp-0x88],rax
  005fc:    	sub    rsp,0x20
  00600:    	movq   QWORD PTR [rsp],xmm5
  00605:    	movq   QWORD PTR [rsp+0x8],xmm6
  0060b:    	movq   QWORD PTR [rsp+0x10],xmm7
  00611:    	mov    rdi,QWORD PTR [rbp-0x80]
  00615: 76 	movabs rax,0x5576ccd01d00
  0061f:    	call   rax
  00621:    	mov    r15d,eax
  00624: 00 	cmp    r15d,DWORD PTR [rip+0x14bb]        # 0x1ae6
  0062b:    	jne    0x3ccf5
  00631:    	mov    eax,DWORD PTR [rip+0xffffffffffffe74b]        # 0xffffed82
  00637:    	cmp    DWORD PTR [rip+0x14a5],eax        # 0x1ae2
  0063d:    	jne    0x3ccf5
  00643:    	mov    rax,QWORD PTR [rbx]
  00646:    	lea    rdi,[rsp-0x18]
  0064b:    	mov    QWORD PTR [rdi],rax
  0064e:    	mov    QWORD PTR [rbx],rdi
  00651: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0065a:    	mov    QWORD PTR [rsp-0x38],rcx
  0065f:    	mov    rax,QWORD PTR [rbp-0x80]
  00663:    	mov    QWORD PTR [rsp-0x38],rax
  00668: 00 	mov    rdi,0x1
  0066f: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00676:    	mov    QWORD PTR [rsp-0x40],rax
  0067b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00684: 00 	movabs rax,0x0
  0068e:    	mov    QWORD PTR [rsp-0x28],rax
  00693: 00 	movabs r13,0x0
  0069d:    	call   0xffffc36a
  006a2:    	lea    rdi,[rbp-0x8]
  006a6:    	mov    QWORD PTR [rbx],rdi
  006a9:    	movq   xmm5,QWORD PTR [rsp]
  006ae:    	movq   xmm6,QWORD PTR [rsp+0x8]
  006b4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  006ba:    	add    rsp,0x20
  006be:    	test   rax,rax
  006c1:    	je     0x3cd61
  006c7:    	mov    QWORD PTR [rbp-0x78],rax
:00033 %7 = %9 - %10                        [Integer][Integer]
  006cb:    	mov    rdi,QWORD PTR [rbp-0x70]
  006cf:    	mov    rsi,QWORD PTR [rbp-0x78]
  006d3: 00 	test   rdi,0x1
  006da:    	je     0x3cd70
  006e0: 00 	test   rsi,0x1
  006e7:    	je     0x3cd70
  006ed:    	sub    rdi,rsi
  006f0:    	jo     0x3cd70
  006f6:    	add    rdi,0x1
  006fa:    	mov    QWORD PTR [rbp-0x60],rdi
:00034 %10 = literal[0.0]
  006fe: 00 	movq   xmm2,QWORD PTR [rip+0x13e4]        # 0x1aea
:00035 %9 = %7 > %10                        [Integer][Integer]
  00706:    	movq   xmm0,xmm2
  0070a:    	call   0xffffc4d1
  0070f:    	mov    QWORD PTR [rbp-0x78],rax
  00713:    	mov    rdi,QWORD PTR [rbp-0x60]
  00717:    	mov    rsi,QWORD PTR [rbp-0x78]
  0071b: 00 	test   rdi,0x1
  00722:    	je     0x3cd99
  00728: 00 	test   rsi,0x1
  0072f:    	je     0x3cd99
  00735:    	xor    rax,rax
  00738:    	cmp    rdi,rsi
  0073b:    	setg   al
  0073f:    	shl    rax,0x3
  00743:    	or     rax,0x14
  00747:    	mov    QWORD PTR [rbp-0x70],rax
:00036 condnotbr %9 =>:00041
  0074b:    	mov    rax,QWORD PTR [rbp-0x70]
  0074f:    	or     rax,0x10
  00753:    	cmp    rax,0x14
  00757:    	je     0x3ce96
:00037 %10 = %2.call t()                    [<INVALID>]
:00038 
  0075d:    	sub    rsp,0x20
  00761:    	movq   QWORD PTR [rsp],xmm5
  00766:    	movq   QWORD PTR [rsp+0x8],xmm6
  0076c:    	movq   QWORD PTR [rsp+0x10],xmm7
  00772:    	mov    rdi,QWORD PTR [rbp-0x38]
  00776: 76 	movabs rax,0x5576ccd01d00
  00780:    	call   rax
  00782:    	mov    r15d,eax
  00785: 00 	cmp    r15d,DWORD PTR [rip+0x136a]        # 0x1af6
  0078c:    	jne    0x3cde0
  00792:    	mov    eax,DWORD PTR [rip+0xffffffffffffe5ea]        # 0xffffed82
  00798:    	cmp    DWORD PTR [rip+0x1354],eax        # 0x1af2
  0079e:    	jne    0x3cde0
  007a4:    	mov    rax,QWORD PTR [rbx]
  007a7:    	lea    rdi,[rsp-0x18]
  007ac:    	mov    QWORD PTR [rdi],rax
  007af:    	mov    QWORD PTR [rbx],rdi
  007b2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007bb:    	mov    QWORD PTR [rsp-0x38],rcx
  007c0:    	mov    rax,QWORD PTR [rbp-0x38]
  007c4:    	mov    QWORD PTR [rsp-0x38],rax
  007c9: 00 	mov    rdi,0x0
  007d0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  007d9: 00 	movabs rax,0x0
  007e3:    	mov    QWORD PTR [rsp-0x28],rax
  007e8: 00 	movabs r13,0x0
  007f2:    	call   0xffffc36a
  007f7:    	lea    rdi,[rbp-0x8]
  007fb:    	mov    QWORD PTR [rbx],rdi
  007fe:    	movq   xmm5,QWORD PTR [rsp]
  00803:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00809:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0080f:    	add    rsp,0x20
  00813:    	test   rax,rax
  00816:    	je     0x3ce4c
  0081c:    	mov    QWORD PTR [rbp-0x78],rax
:00040 %9 = %7 < %10                        [Integer][Integer]
  00820:    	mov    rdi,QWORD PTR [rbp-0x60]
  00824:    	mov    rsi,QWORD PTR [rbp-0x78]
  00828: 00 	test   rdi,0x1
  0082f:    	je     0x3ce5b
  00835: 00 	test   rsi,0x1
  0083c:    	je     0x3ce5b
  00842:    	xor    rax,rax
  00845:    	cmp    rdi,rsi
  00848:    	setl   al
  0084c:    	shl    rax,0x3
  00850:    	or     rax,0x14
  00854:    	mov    QWORD PTR [rbp-0x70],rax
  00858:    	jmp    0x3cec9
:00041 condnotbr %9 =>:00112
  0085d:    	mov    rax,QWORD PTR [rbp-0x70]
  00861:    	or     rax,0x10
  00865:    	cmp    rax,0x14
  00869:    	je     0x3da10
:00042 _ = %2.call t=(%7; 1)                [<INVALID>]
:00043 
  0086f:    	sub    rsp,0x20
  00873:    	movq   QWORD PTR [rsp],xmm5
  00878:    	movq   QWORD PTR [rsp+0x8],xmm6
  0087e:    	movq   QWORD PTR [rsp+0x10],xmm7
  00884:    	mov    rdi,QWORD PTR [rbp-0x38]
  00888: 76 	movabs rax,0x5576ccd01d00
  00892:    	call   rax
  00894:    	mov    r15d,eax
  00897: 00 	cmp    r15d,DWORD PTR [rip+0x1260]        # 0x1afe
  0089e:    	jne    0x3cefc
  008a4:    	mov    eax,DWORD PTR [rip+0xffffffffffffe4d8]        # 0xffffed82
  008aa:    	cmp    DWORD PTR [rip+0x124a],eax        # 0x1afa
  008b0:    	jne    0x3cefc
  008b6:    	mov    rax,QWORD PTR [rbx]
  008b9:    	lea    rdi,[rsp-0x18]
  008be:    	mov    QWORD PTR [rdi],rax
  008c1:    	mov    QWORD PTR [rbx],rdi
  008c4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  008cd:    	mov    QWORD PTR [rsp-0x38],rcx
  008d2:    	mov    rax,QWORD PTR [rbp-0x38]
  008d6:    	mov    QWORD PTR [rsp-0x38],rax
  008db: 00 	mov    rdi,0x1
  008e2:    	mov    rax,QWORD PTR [rbp-0x60]
  008e6:    	mov    QWORD PTR [rsp-0x40],rax
  008eb: 00 	mov    QWORD PTR [rsp-0x30],0x0
  008f4: 00 	movabs rax,0x0
  008fe:    	mov    QWORD PTR [rsp-0x28],rax
  00903: 00 	movabs r13,0x0
  0090d:    	call   0xffffc36a
  00912:    	lea    rdi,[rbp-0x8]
  00916:    	mov    QWORD PTR [rbx],rdi
  00919:    	movq   xmm5,QWORD PTR [rsp]
  0091e:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00924:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0092a:    	add    rsp,0x20
  0092e:    	test   rax,rax
  00931:    	je     0x3cf68
:00045 %9 = literal[true]
  00937: 00 	mov    rax,0x1c
  0093e:    	mov    QWORD PTR [rbp-0x70],rax
:00046 _ = %2.call hit=(%9; 1)              [<INVALID>]
:00047 
  00942:    	sub    rsp,0x20
  00946:    	movq   QWORD PTR [rsp],xmm5
  0094b:    	movq   QWORD PTR [rsp+0x8],xmm6
  00951:    	movq   QWORD PTR [rsp+0x10],xmm7
  00957:    	mov    rdi,QWORD PTR [rbp-0x38]
  0095b: 76 	movabs rax,0x5576ccd01d00
  00965:    	call   rax
  00967:    	mov    r15d,eax
  0096a: 00 	cmp    r15d,DWORD PTR [rip+0x1195]        # 0x1b06
  00971:    	jne    0x3cf77
  00977:    	mov    eax,DWORD PTR [rip+0xffffffffffffe405]        # 0xffffed82
  0097d:    	cmp    DWORD PTR [rip+0x117f],eax        # 0x1b02
  00983:    	jne    0x3cf77
  00989:    	mov    rax,QWORD PTR [rbx]
  0098c:    	lea    rdi,[rsp-0x18]
  00991:    	mov    QWORD PTR [rdi],rax
  00994:    	mov    QWORD PTR [rbx],rdi
  00997: 00 	mov    QWORD PTR [rsp-0x20],0x0
  009a0:    	mov    QWORD PTR [rsp-0x38],rcx
  009a5:    	mov    rax,QWORD PTR [rbp-0x38]
  009a9:    	mov    QWORD PTR [rsp-0x38],rax
  009ae: 00 	mov    rdi,0x1
  009b5:    	mov    rax,QWORD PTR [rbp-0x70]
  009b9:    	mov    QWORD PTR [rsp-0x40],rax
  009be: 00 	mov    QWORD PTR [rsp-0x30],0x0
  009c7: 00 	movabs rax,0x0
  009d1:    	mov    QWORD PTR [rsp-0x28],rax
  009d6: 00 	movabs r13,0x0
  009e0:    	call   0xffffc36a
  009e5:    	lea    rdi,[rbp-0x8]
  009e9:    	mov    QWORD PTR [rbx],rdi
  009ec:    	movq   xmm5,QWORD PTR [rsp]
  009f1:    	movq   xmm6,QWORD PTR [rsp+0x8]
  009f7:    	movq   xmm7,QWORD PTR [rsp+0x10]
  009fd:    	add    rsp,0x20
  00a01:    	test   rax,rax
  00a04:    	je     0x3cfe3
:00049 %10 = const[Vec]                     [<invalid>]
  00a0a: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffe379]        # 0xffffed8a
  00a11: 00 	cmp    rax,QWORD PTR [rip+0x1102]        # 0x1b1a
  00a18:    	jne    0x3cff2
  00a1e: 00 	mov    rax,QWORD PTR [rip+0x10e5]        # 0x1b0a
  00a25:    	mov    QWORD PTR [rbp-0x78],rax
:00050 %12 = %1.call org()                  [<INVALID>]
:00051 
  00a29:    	sub    rsp,0x20
  00a2d:    	movq   QWORD PTR [rsp],xmm5
  00a32:    	movq   QWORD PTR [rsp+0x8],xmm6
  00a38:    	movq   QWORD PTR [rsp+0x10],xmm7
  00a3e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00a42: 76 	movabs rax,0x5576ccd01d00
  00a4c:    	call   rax
  00a4e:    	mov    r15d,eax
  00a51: 00 	cmp    r15d,DWORD PTR [rip+0x10ce]        # 0x1b26
  00a58:    	jne    0x3d062
  00a5e:    	mov    eax,DWORD PTR [rip+0xffffffffffffe31e]        # 0xffffed82
  00a64:    	cmp    DWORD PTR [rip+0x10b8],eax        # 0x1b22
  00a6a:    	jne    0x3d062
  00a70:    	mov    rax,QWORD PTR [rbx]
  00a73:    	lea    rdi,[rsp-0x18]
  00a78:    	mov    QWORD PTR [rdi],rax
  00a7b:    	mov    QWORD PTR [rbx],rdi
  00a7e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a87:    	mov    QWORD PTR [rsp-0x38],rcx
  00a8c:    	mov    rax,QWORD PTR [rbp-0x30]
  00a90:    	mov    QWORD PTR [rsp-0x38],rax
  00a95: 00 	mov    rdi,0x0
  00a9c: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00aa5: 00 	movabs rax,0x0
  00aaf:    	mov    QWORD PTR [rsp-0x28],rax
  00ab4: 00 	movabs r13,0x0
  00abe:    	call   0xffffc36a
  00ac3:    	lea    rdi,[rbp-0x8]
  00ac7:    	mov    QWORD PTR [rbx],rdi
  00aca:    	movq   xmm5,QWORD PTR [rsp]
  00acf:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00ad5:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00adb:    	add    rsp,0x20
  00adf:    	test   rax,rax
  00ae2:    	je     0x3d0ce
  00ae8: ff 	mov    QWORD PTR [rbp-0x88],rax
:00053 %11 = %12.call x()                   [<INVALID>]
:00054 
  00aef:    	sub    rsp,0x20
  00af3:    	movq   QWORD PTR [rsp],xmm5
  00af8:    	movq   QWORD PTR [rsp+0x8],xmm6
  00afe:    	movq   QWORD PTR [rsp+0x10],xmm7
  00b04: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00b0b: 76 	movabs rax,0x5576ccd01d00
  00b15:    	call   rax
  00b17:    	mov    r15d,eax
  00b1a: 00 	cmp    r15d,DWORD PTR [rip+0x100d]        # 0x1b2e
  00b21:    	jne    0x3d0dd
  00b27:    	mov    eax,DWORD PTR [rip+0xffffffffffffe255]        # 0xffffed82
  00b2d:    	cmp    DWORD PTR [rip+0xff7],eax        # 0x1b2a
  00b33:    	jne    0x3d0dd
  00b39:    	mov    rax,QWORD PTR [rbx]
  00b3c:    	lea    rdi,[rsp-0x18]
  00b41:    	mov    QWORD PTR [rdi],rax
  00b44:    	mov    QWORD PTR [rbx],rdi
  00b47: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b50:    	mov    QWORD PTR [rsp-0x38],rcx
  00b55: ff 	mov    rax,QWORD PTR [rbp-0x88]
  00b5c:    	mov    QWORD PTR [rsp-0x38],rax
  00b61: 00 	mov    rdi,0x0
  00b68: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b71: 00 	movabs rax,0x0
  00b7b:    	mov    QWORD PTR [rsp-0x28],rax
  00b80: 00 	movabs r13,0x0
  00b8a:    	call   0xffffc36a
  00b8f:    	lea    rdi,[rbp-0x8]
  00b93:    	mov    QWORD PTR [rbx],rdi
  00b96:    	movq   xmm5,QWORD PTR [rsp]
  00b9b:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00ba1:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00ba7:    	add    rsp,0x20
  00bab:    	test   rax,rax
  00bae:    	je     0x3d14c
  00bb4:    	mov    QWORD PTR [rbp-0x80],rax
:00056 %13 = %1.call dir()                  [<INVALID>]
:00057 
  00bb8:    	sub    rsp,0x20
  00bbc:    	movq   QWORD PTR [rsp],xmm5
  00bc1:    	movq   QWORD PTR [rsp+0x8],xmm6
  00bc7:    	movq   QWORD PTR [rsp+0x10],xmm7
  00bcd:    	mov    rdi,QWORD PTR [rbp-0x30]
  00bd1: 76 	movabs rax,0x5576ccd01d00
  00bdb:    	call   rax
  00bdd:    	mov    r15d,eax
  00be0: 00 	cmp    r15d,DWORD PTR [rip+0xf4f]        # 0x1b36
  00be7:    	jne    0x3d15b
  00bed:    	mov    eax,DWORD PTR [rip+0xffffffffffffe18f]        # 0xffffed82
  00bf3:    	cmp    DWORD PTR [rip+0xf39],eax        # 0x1b32
  00bf9:    	jne    0x3d15b
  00bff:    	mov    rax,QWORD PTR [rbx]
  00c02:    	lea    rdi,[rsp-0x18]
  00c07:    	mov    QWORD PTR [rdi],rax
  00c0a:    	mov    QWORD PTR [rbx],rdi
  00c0d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c16:    	mov    QWORD PTR [rsp-0x38],rcx
  00c1b:    	mov    rax,QWORD PTR [rbp-0x30]
  00c1f:    	mov    QWORD PTR [rsp-0x38],rax
  00c24: 00 	mov    rdi,0x0
  00c2b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c34: 00 	movabs rax,0x0
  00c3e:    	mov    QWORD PTR [rsp-0x28],rax
  00c43: 00 	movabs r13,0x0
  00c4d:    	call   0xffffc36a
  00c52:    	lea    rdi,[rbp-0x8]
  00c56:    	mov    QWORD PTR [rbx],rdi
  00c59:    	movq   xmm5,QWORD PTR [rsp]
  00c5e:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00c64:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00c6a:    	add    rsp,0x20
  00c6e:    	test   rax,rax
  00c71:    	je     0x3d1c7
  00c77: ff 	mov    QWORD PTR [rbp-0x90],rax
:00059 %12 = %13.call x()                   [<INVALID>]
:00060 
  00c7e:    	sub    rsp,0x20
  00c82:    	movq   QWORD PTR [rsp],xmm5
  00c87:    	movq   QWORD PTR [rsp+0x8],xmm6
  00c8d:    	movq   QWORD PTR [rsp+0x10],xmm7
  00c93: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00c9a: 76 	movabs rax,0x5576ccd01d00
  00ca4:    	call   rax
  00ca6:    	mov    r15d,eax
  00ca9: 00 	cmp    r15d,DWORD PTR [rip+0xe8e]        # 0x1b3e
  00cb0:    	jne    0x3d1d6
  00cb6:    	mov    eax,DWORD PTR [rip+0xffffffffffffe0c6]        # 0xffffed82
  00cbc:    	cmp    DWORD PTR [rip+0xe78],eax        # 0x1b3a
  00cc2:    	jne    0x3d1d6
  00cc8:    	mov    rax,QWORD PTR [rbx]
  00ccb:    	lea    rdi,[rsp-0x18]
  00cd0:    	mov    QWORD PTR [rdi],rax
  00cd3:    	mov    QWORD PTR [rbx],rdi
  00cd6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cdf:    	mov    QWORD PTR [rsp-0x38],rcx
  00ce4: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00ceb:    	mov    QWORD PTR [rsp-0x38],rax
  00cf0: 00 	mov    rdi,0x0
  00cf7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00d00: 00 	movabs rax,0x0
  00d0a:    	mov    QWORD PTR [rsp-0x28],rax
  00d0f: 00 	movabs r13,0x0
  00d19:    	call   0xffffc36a
  00d1e:    	lea    rdi,[rbp-0x8]
  00d22:    	mov    QWORD PTR [rbx],rdi
  00d25:    	movq   xmm5,QWORD PTR [rsp]
  00d2a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00d30:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00d36:    	add    rsp,0x20
  00d3a:    	test   rax,rax
  00d3d:    	je     0x3d245
  00d43: ff 	mov    QWORD PTR [rbp-0x88],rax
:00062 %12 = %12 * %7                       [Integer][Integer]
  00d4a: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00d51:    	mov    rsi,QWORD PTR [rbp-0x60]
  00d55:    	sub    rsp,0x20
  00d59:    	movq   QWORD PTR [rsp],xmm5
  00d5e:    	movq   QWORD PTR [rsp+0x8],xmm6
  00d64:    	movq   QWORD PTR [rsp+0x10],xmm7
  00d6a:    	mov    rdx,rdi
  00d6d:    	mov    rcx,rsi
  00d70:    	mov    rdi,rbx
  00d73:    	mov    rsi,r12
  00d76: 76 	movabs rax,0x5576cccf4710
  00d80:    	call   rax
  00d82:    	movq   xmm5,QWORD PTR [rsp]
  00d87:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00d8d:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00d93:    	add    rsp,0x20
  00d97: 76 	movabs r13,0x5576cd698030
  00da1:    	test   rax,rax
  00da4:    	je     0xffffc3a5
  00daa: ff 	mov    QWORD PTR [rbp-0x88],rax
:00063 %11 = %11 + %12                      [Integer][Integer]
  00db1:    	mov    rdi,QWORD PTR [rbp-0x80]
  00db5: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  00dbc: 00 	test   rdi,0x1
  00dc3:    	je     0x3d27d
  00dc9: 00 	test   rsi,0x1
  00dd0:    	je     0x3d27d
  00dd6:    	sub    rdi,0x1
  00dda:    	add    rdi,rsi
  00ddd:    	jo     0x3d27d
  00de3:    	mov    QWORD PTR [rbp-0x80],rdi
:00064 %13 = %1.call org()                  [<INVALID>]
:00065 
  00de7:    	sub    rsp,0x20
  00deb:    	movq   QWORD PTR [rsp],xmm5
  00df0:    	movq   QWORD PTR [rsp+0x8],xmm6
  00df6:    	movq   QWORD PTR [rsp+0x10],xmm7
  00dfc:    	mov    rdi,QWORD PTR [rbp-0x30]
  00e00: 76 	movabs rax,0x5576ccd01d00
  00e0a:    	call   rax
  00e0c:    	mov    r15d,eax
  00e0f: 00 	cmp    r15d,DWORD PTR [rip+0xd30]        # 0x1b46
  00e16:    	jne    0x3d2a6
  00e1c:    	mov    eax,DWORD PTR [rip+0xffffffffffffdf60]        # 0xffffed82
  00e22:    	cmp    DWORD PTR [rip+0xd1a],eax        # 0x1b42
  00e28:    	jne    0x3d2a6
  00e2e:    	mov    rax,QWORD PTR [rbx]
  00e31:    	lea    rdi,[rsp-0x18]
  00e36:    	mov    QWORD PTR [rdi],rax
  00e39:    	mov    QWORD PTR [rbx],rdi
  00e3c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e45:    	mov    QWORD PTR [rsp-0x38],rcx
  00e4a:    	mov    rax,QWORD PTR [rbp-0x30]
  00e4e:    	mov    QWORD PTR [rsp-0x38],rax
  00e53: 00 	mov    rdi,0x0
  00e5a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00e63: 00 	movabs rax,0x0
  00e6d:    	mov    QWORD PTR [rsp-0x28],rax
  00e72: 00 	movabs r13,0x0
  00e7c:    	call   0xffffc36a
  00e81:    	lea    rdi,[rbp-0x8]
  00e85:    	mov    QWORD PTR [rbx],rdi
  00e88:    	movq   xmm5,QWORD PTR [rsp]
  00e8d:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00e93:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00e99:    	add    rsp,0x20
  00e9d:    	test   rax,rax
  00ea0:    	je     0x3d312
  00ea6: ff 	mov    QWORD PTR [rbp-0x90],rax
:00067 %12 = %13.call y()                   [<INVALID>]
:00068 
  00ead:    	sub    rsp,0x20
  00eb1:    	movq   QWORD PTR [rsp],xmm5
  00eb6:    	movq   QWORD PTR [rsp+0x8],xmm6
  00ebc:    	movq   QWORD PTR [rsp+0x10],xmm7
  00ec2: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00ec9: 76 	movabs rax,0x5576ccd01d00
  00ed3:    	call   rax
  00ed5:    	mov    r15d,eax
  00ed8: 00 	cmp    r15d,DWORD PTR [rip+0xc6f]        # 0x1b4e
  00edf:    	jne    0x3d321
  00ee5:    	mov    eax,DWORD PTR [rip+0xffffffffffffde97]        # 0xffffed82
  00eeb:    	cmp    DWORD PTR [rip+0xc59],eax        # 0x1b4a
  00ef1:    	jne    0x3d321
  00ef7:    	mov    rax,QWORD PTR [rbx]
  00efa:    	lea    rdi,[rsp-0x18]
  00eff:    	mov    QWORD PTR [rdi],rax
  00f02:    	mov    QWORD PTR [rbx],rdi
  00f05: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f0e:    	mov    QWORD PTR [rsp-0x38],rcx
  00f13: ff 	mov    rax,QWORD PTR [rbp-0x90]
  00f1a:    	mov    QWORD PTR [rsp-0x38],rax
  00f1f: 00 	mov    rdi,0x0
  00f26: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f2f: 00 	movabs rax,0x0
  00f39:    	mov    QWORD PTR [rsp-0x28],rax
  00f3e: 00 	movabs r13,0x0
  00f48:    	call   0xffffc36a
  00f4d:    	lea    rdi,[rbp-0x8]
  00f51:    	mov    QWORD PTR [rbx],rdi
  00f54:    	movq   xmm5,QWORD PTR [rsp]
  00f59:    	movq   xmm6,QWORD PTR [rsp+0x8]
  00f5f:    	movq   xmm7,QWORD PTR [rsp+0x10]
  00f65:    	add    rsp,0x20
  00f69:    	test   rax,rax
  00f6c:    	je     0x3d390
  00f72: ff 	mov    QWORD PTR [rbp-0x88],rax
:00070 %14 = %1.call dir()                  [<INVALID>]
:00071 
  00f79:    	sub    rsp,0x20
  00f7d:    	movq   QWORD PTR [rsp],xmm5
  00f82:    	movq   QWORD PTR [rsp+0x8],xmm6
  00f88:    	movq   QWORD PTR [rsp+0x10],xmm7
  00f8e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00f92: 76 	movabs rax,0x5576ccd01d00
  00f9c:    	call   rax
  00f9e:    	mov    r15d,eax
  00fa1: 00 	cmp    r15d,DWORD PTR [rip+0xbae]        # 0x1b56
  00fa8:    	jne    0x3d39f
  00fae:    	mov    eax,DWORD PTR [rip+0xffffffffffffddce]        # 0xffffed82
  00fb4:    	cmp    DWORD PTR [rip+0xb98],eax        # 0x1b52
  00fba:    	jne    0x3d39f
  00fc0:    	mov    rax,QWORD PTR [rbx]
  00fc3:    	lea    rdi,[rsp-0x18]
  00fc8:    	mov    QWORD PTR [rdi],rax
  00fcb:    	mov    QWORD PTR [rbx],rdi
  00fce: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fd7:    	mov    QWORD PTR [rsp-0x38],rcx
  00fdc:    	mov    rax,QWORD PTR [rbp-0x30]
  00fe0:    	mov    QWORD PTR [rsp-0x38],rax
  00fe5: 00 	mov    rdi,0x0
  00fec: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ff5: 00 	movabs rax,0x0
  00fff:    	mov    QWORD PTR [rsp-0x28],rax
  01004: 00 	movabs r13,0x0
  0100e:    	call   0xffffc36a
  01013:    	lea    rdi,[rbp-0x8]
  01017:    	mov    QWORD PTR [rbx],rdi
  0101a:    	movq   xmm5,QWORD PTR [rsp]
  0101f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01025:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0102b:    	add    rsp,0x20
  0102f:    	test   rax,rax
  01032:    	je     0x3d40b
  01038: ff 	mov    QWORD PTR [rbp-0x98],rax
:00073 %13 = %14.call y()                   [<INVALID>]
:00074 
  0103f:    	sub    rsp,0x20
  01043:    	movq   QWORD PTR [rsp],xmm5
  01048:    	movq   QWORD PTR [rsp+0x8],xmm6
  0104e:    	movq   QWORD PTR [rsp+0x10],xmm7
  01054: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0105b: 76 	movabs rax,0x5576ccd01d00
  01065:    	call   rax
  01067:    	mov    r15d,eax
  0106a: 00 	cmp    r15d,DWORD PTR [rip+0xaed]        # 0x1b5e
  01071:    	jne    0x3d41a
  01077:    	mov    eax,DWORD PTR [rip+0xffffffffffffdd05]        # 0xffffed82
  0107d:    	cmp    DWORD PTR [rip+0xad7],eax        # 0x1b5a
  01083:    	jne    0x3d41a
  01089:    	mov    rax,QWORD PTR [rbx]
  0108c:    	lea    rdi,[rsp-0x18]
  01091:    	mov    QWORD PTR [rdi],rax
  01094:    	mov    QWORD PTR [rbx],rdi
  01097: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010a0:    	mov    QWORD PTR [rsp-0x38],rcx
  010a5: ff 	mov    rax,QWORD PTR [rbp-0x98]
  010ac:    	mov    QWORD PTR [rsp-0x38],rax
  010b1: 00 	mov    rdi,0x0
  010b8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010c1: 00 	movabs rax,0x0
  010cb:    	mov    QWORD PTR [rsp-0x28],rax
  010d0: 00 	movabs r13,0x0
  010da:    	call   0xffffc36a
  010df:    	lea    rdi,[rbp-0x8]
  010e3:    	mov    QWORD PTR [rbx],rdi
  010e6:    	movq   xmm5,QWORD PTR [rsp]
  010eb:    	movq   xmm6,QWORD PTR [rsp+0x8]
  010f1:    	movq   xmm7,QWORD PTR [rsp+0x10]
  010f7:    	add    rsp,0x20
  010fb:    	test   rax,rax
  010fe:    	je     0x3d489
  01104: ff 	mov    QWORD PTR [rbp-0x90],rax
:00076 %13 = %13 * %7                       [Integer][Integer]
  0110b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01112:    	mov    rsi,QWORD PTR [rbp-0x60]
  01116:    	sub    rsp,0x20
  0111a:    	movq   QWORD PTR [rsp],xmm5
  0111f:    	movq   QWORD PTR [rsp+0x8],xmm6
  01125:    	movq   QWORD PTR [rsp+0x10],xmm7
  0112b:    	mov    rdx,rdi
  0112e:    	mov    rcx,rsi
  01131:    	mov    rdi,rbx
  01134:    	mov    rsi,r12
  01137: 76 	movabs rax,0x5576cccf4710
  01141:    	call   rax
  01143:    	movq   xmm5,QWORD PTR [rsp]
  01148:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0114e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01154:    	add    rsp,0x20
  01158: 76 	movabs r13,0x5576cd698110
  01162:    	test   rax,rax
  01165:    	je     0xffffc3a5
  0116b: ff 	mov    QWORD PTR [rbp-0x90],rax
:00077 %12 = %12 + %13                      [Integer][Integer]
  01172: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01179: ff 	mov    rsi,QWORD PTR [rbp-0x90]
  01180: 00 	test   rdi,0x1
  01187:    	je     0x3d4c1
  0118d: 00 	test   rsi,0x1
  01194:    	je     0x3d4c1
  0119a:    	sub    rdi,0x1
  0119e:    	add    rdi,rsi
  011a1:    	jo     0x3d4c1
  011a7: ff 	mov    QWORD PTR [rbp-0x88],rdi
:00078 %14 = %1.call org()                  [<INVALID>]
:00079 
  011ae:    	sub    rsp,0x20
  011b2:    	movq   QWORD PTR [rsp],xmm5
  011b7:    	movq   QWORD PTR [rsp+0x8],xmm6
  011bd:    	movq   QWORD PTR [rsp+0x10],xmm7
  011c3:    	mov    rdi,QWORD PTR [rbp-0x30]
  011c7: 76 	movabs rax,0x5576ccd01d00
  011d1:    	call   rax
  011d3:    	mov    r15d,eax
  011d6: 00 	cmp    r15d,DWORD PTR [rip+0x989]        # 0x1b66
  011dd:    	jne    0x3d4ea
  011e3:    	mov    eax,DWORD PTR [rip+0xffffffffffffdb99]        # 0xffffed82
  011e9:    	cmp    DWORD PTR [rip+0x973],eax        # 0x1b62
  011ef:    	jne    0x3d4ea
  011f5:    	mov    rax,QWORD PTR [rbx]
  011f8:    	lea    rdi,[rsp-0x18]
  011fd:    	mov    QWORD PTR [rdi],rax
  01200:    	mov    QWORD PTR [rbx],rdi
  01203: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0120c:    	mov    QWORD PTR [rsp-0x38],rcx
  01211:    	mov    rax,QWORD PTR [rbp-0x30]
  01215:    	mov    QWORD PTR [rsp-0x38],rax
  0121a: 00 	mov    rdi,0x0
  01221: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0122a: 00 	movabs rax,0x0
  01234:    	mov    QWORD PTR [rsp-0x28],rax
  01239: 00 	movabs r13,0x0
  01243:    	call   0xffffc36a
  01248:    	lea    rdi,[rbp-0x8]
  0124c:    	mov    QWORD PTR [rbx],rdi
  0124f:    	movq   xmm5,QWORD PTR [rsp]
  01254:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0125a:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01260:    	add    rsp,0x20
  01264:    	test   rax,rax
  01267:    	je     0x3d556
  0126d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00081 %13 = %14.call z()                   [<INVALID>]
:00082 
  01274:    	sub    rsp,0x20
  01278:    	movq   QWORD PTR [rsp],xmm5
  0127d:    	movq   QWORD PTR [rsp+0x8],xmm6
  01283:    	movq   QWORD PTR [rsp+0x10],xmm7
  01289: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01290: 76 	movabs rax,0x5576ccd01d00
  0129a:    	call   rax
  0129c:    	mov    r15d,eax
  0129f: 00 	cmp    r15d,DWORD PTR [rip+0x8c8]        # 0x1b6e
  012a6:    	jne    0x3d565
  012ac:    	mov    eax,DWORD PTR [rip+0xffffffffffffdad0]        # 0xffffed82
  012b2:    	cmp    DWORD PTR [rip+0x8b2],eax        # 0x1b6a
  012b8:    	jne    0x3d565
  012be:    	mov    rax,QWORD PTR [rbx]
  012c1:    	lea    rdi,[rsp-0x18]
  012c6:    	mov    QWORD PTR [rdi],rax
  012c9:    	mov    QWORD PTR [rbx],rdi
  012cc: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012d5:    	mov    QWORD PTR [rsp-0x38],rcx
  012da: ff 	mov    rax,QWORD PTR [rbp-0x98]
  012e1:    	mov    QWORD PTR [rsp-0x38],rax
  012e6: 00 	mov    rdi,0x0
  012ed: 00 	mov    QWORD PTR [rsp-0x30],0x0
  012f6: 00 	movabs rax,0x0
  01300:    	mov    QWORD PTR [rsp-0x28],rax
  01305: 00 	movabs r13,0x0
  0130f:    	call   0xffffc36a
  01314:    	lea    rdi,[rbp-0x8]
  01318:    	mov    QWORD PTR [rbx],rdi
  0131b:    	movq   xmm5,QWORD PTR [rsp]
  01320:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01326:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0132c:    	add    rsp,0x20
  01330:    	test   rax,rax
  01333:    	je     0x3d5d4
  01339: ff 	mov    QWORD PTR [rbp-0x90],rax
:00084 %15 = %1.call dir()                  [<INVALID>]
:00085 
  01340:    	sub    rsp,0x20
  01344:    	movq   QWORD PTR [rsp],xmm5
  01349:    	movq   QWORD PTR [rsp+0x8],xmm6
  0134f:    	movq   QWORD PTR [rsp+0x10],xmm7
  01355:    	mov    rdi,QWORD PTR [rbp-0x30]
  01359: 76 	movabs rax,0x5576ccd01d00
  01363:    	call   rax
  01365:    	mov    r15d,eax
  01368: 00 	cmp    r15d,DWORD PTR [rip+0x807]        # 0x1b76
  0136f:    	jne    0x3d5e3
  01375:    	mov    eax,DWORD PTR [rip+0xffffffffffffda07]        # 0xffffed82
  0137b:    	cmp    DWORD PTR [rip+0x7f1],eax        # 0x1b72
  01381:    	jne    0x3d5e3
  01387:    	mov    rax,QWORD PTR [rbx]
  0138a:    	lea    rdi,[rsp-0x18]
  0138f:    	mov    QWORD PTR [rdi],rax
  01392:    	mov    QWORD PTR [rbx],rdi
  01395: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0139e:    	mov    QWORD PTR [rsp-0x38],rcx
  013a3:    	mov    rax,QWORD PTR [rbp-0x30]
  013a7:    	mov    QWORD PTR [rsp-0x38],rax
  013ac: 00 	mov    rdi,0x0
  013b3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  013bc: 00 	movabs rax,0x0
  013c6:    	mov    QWORD PTR [rsp-0x28],rax
  013cb: 00 	movabs r13,0x0
  013d5:    	call   0xffffc36a
  013da:    	lea    rdi,[rbp-0x8]
  013de:    	mov    QWORD PTR [rbx],rdi
  013e1:    	movq   xmm5,QWORD PTR [rsp]
  013e6:    	movq   xmm6,QWORD PTR [rsp+0x8]
  013ec:    	movq   xmm7,QWORD PTR [rsp+0x10]
  013f2:    	add    rsp,0x20
  013f6:    	test   rax,rax
  013f9:    	je     0x3d64f
  013ff: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00087 %14 = %15.call z()                   [<INVALID>]
:00088 
  01406:    	sub    rsp,0x20
  0140a:    	movq   QWORD PTR [rsp],xmm5
  0140f:    	movq   QWORD PTR [rsp+0x8],xmm6
  01415:    	movq   QWORD PTR [rsp+0x10],xmm7
  0141b: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01422: 76 	movabs rax,0x5576ccd01d00
  0142c:    	call   rax
  0142e:    	mov    r15d,eax
  01431: 00 	cmp    r15d,DWORD PTR [rip+0x746]        # 0x1b7e
  01438:    	jne    0x3d65e
  0143e:    	mov    eax,DWORD PTR [rip+0xffffffffffffd93e]        # 0xffffed82
  01444:    	cmp    DWORD PTR [rip+0x730],eax        # 0x1b7a
  0144a:    	jne    0x3d65e
  01450:    	mov    rax,QWORD PTR [rbx]
  01453:    	lea    rdi,[rsp-0x18]
  01458:    	mov    QWORD PTR [rdi],rax
  0145b:    	mov    QWORD PTR [rbx],rdi
  0145e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01467:    	mov    QWORD PTR [rsp-0x38],rcx
  0146c: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01473:    	mov    QWORD PTR [rsp-0x38],rax
  01478: 00 	mov    rdi,0x0
  0147f: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01488: 00 	movabs rax,0x0
  01492:    	mov    QWORD PTR [rsp-0x28],rax
  01497: 00 	movabs r13,0x0
  014a1:    	call   0xffffc36a
  014a6:    	lea    rdi,[rbp-0x8]
  014aa:    	mov    QWORD PTR [rbx],rdi
  014ad:    	movq   xmm5,QWORD PTR [rsp]
  014b2:    	movq   xmm6,QWORD PTR [rsp+0x8]
  014b8:    	movq   xmm7,QWORD PTR [rsp+0x10]
  014be:    	add    rsp,0x20
  014c2:    	test   rax,rax
  014c5:    	je     0x3d6cd
  014cb: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %14 = %14 * %7                       [Integer][Integer]
  014d2: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  014d9:    	mov    rsi,QWORD PTR [rbp-0x60]
  014dd:    	sub    rsp,0x20
  014e1:    	movq   QWORD PTR [rsp],xmm5
  014e6:    	movq   QWORD PTR [rsp+0x8],xmm6
  014ec:    	movq   QWORD PTR [rsp+0x10],xmm7
  014f2:    	mov    rdx,rdi
  014f5:    	mov    rcx,rsi
  014f8:    	mov    rdi,rbx
  014fb:    	mov    rsi,r12
  014fe: 76 	movabs rax,0x5576cccf4710
  01508:    	call   rax
  0150a:    	movq   xmm5,QWORD PTR [rsp]
  0150f:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01515:    	movq   xmm7,QWORD PTR [rsp+0x10]
  0151b:    	add    rsp,0x20
  0151f: 76 	movabs r13,0x5576cd6981f0
  01529:    	test   rax,rax
  0152c:    	je     0xffffc3a5
  01532: ff 	mov    QWORD PTR [rbp-0x98],rax
:00091 %13 = %13 + %14                      [Integer][Integer]
  01539: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01540: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  01547: 00 	test   rdi,0x1
  0154e:    	je     0x3d705
  01554: 00 	test   rsi,0x1
  0155b:    	je     0x3d705
  01561:    	sub    rdi,0x1
  01565:    	add    rdi,rsi
  01568:    	jo     0x3d705
  0156e: ff 	mov    QWORD PTR [rbp-0x90],rdi
:00092 %9 = %10.call new(%11; 3)            [<INVALID>]
:00093 
  01575:    	sub    rsp,0x20
  01579:    	movq   QWORD PTR [rsp],xmm5
  0157e:    	movq   QWORD PTR [rsp+0x8],xmm6
  01584:    	movq   QWORD PTR [rsp+0x10],xmm7
  0158a:    	mov    rdi,QWORD PTR [rbp-0x78]
  0158e: 76 	movabs rax,0x5576ccd01d00
  01598:    	call   rax
  0159a:    	mov    r15d,eax
  0159d: 00 	cmp    r15d,DWORD PTR [rip+0x5e2]        # 0x1b86
  015a4:    	jne    0x3d72e
  015aa:    	mov    eax,DWORD PTR [rip+0xffffffffffffd7d2]        # 0xffffed82
  015b0:    	cmp    DWORD PTR [rip+0x5cc],eax        # 0x1b82
  015b6:    	jne    0x3d72e
  015bc:    	mov    rax,QWORD PTR [rbx]
  015bf:    	lea    rdi,[rsp-0x18]
  015c4:    	mov    QWORD PTR [rdi],rax
  015c7:    	mov    QWORD PTR [rbx],rdi
  015ca: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015d3:    	mov    QWORD PTR [rsp-0x38],rcx
  015d8:    	mov    rax,QWORD PTR [rbp-0x78]
  015dc:    	mov    QWORD PTR [rsp-0x38],rax
  015e1: 00 	mov    rdi,0x3
  015e8:    	mov    rax,QWORD PTR [rbp-0x80]
  015ec:    	mov    QWORD PTR [rsp-0x40],rax
  015f1: ff 	mov    rax,QWORD PTR [rbp-0x88]
  015f8:    	mov    QWORD PTR [rsp-0x48],rax
  015fd: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01604:    	mov    QWORD PTR [rsp-0x50],rax
  01609: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01612: 00 	movabs rax,0x0
  0161c:    	mov    QWORD PTR [rsp-0x28],rax
  01621: 00 	movabs r13,0x0
  0162b:    	call   0xffffc36a
  01630:    	lea    rdi,[rbp-0x8]
  01634:    	mov    QWORD PTR [rbx],rdi
  01637:    	movq   xmm5,QWORD PTR [rsp]
  0163c:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01642:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01648:    	add    rsp,0x20
  0164c:    	test   rax,rax
  0164f:    	je     0x3d79a
  01655:    	mov    QWORD PTR [rbp-0x70],rax
:00095 _ = %2.call pl=(%9; 1)               [<INVALID>]
:00096 
  01659:    	sub    rsp,0x20
  0165d:    	movq   QWORD PTR [rsp],xmm5
  01662:    	movq   QWORD PTR [rsp+0x8],xmm6
  01668:    	movq   QWORD PTR [rsp+0x10],xmm7
  0166e:    	mov    rdi,QWORD PTR [rbp-0x38]
  01672: 76 	movabs rax,0x5576ccd01d00
  0167c:    	call   rax
  0167e:    	mov    r15d,eax
  01681: 00 	cmp    r15d,DWORD PTR [rip+0x506]        # 0x1b8e
  01688:    	jne    0x3d7a9
  0168e:    	mov    eax,DWORD PTR [rip+0xffffffffffffd6ee]        # 0xffffed82
  01694:    	cmp    DWORD PTR [rip+0x4f0],eax        # 0x1b8a
  0169a:    	jne    0x3d7a9
  016a0:    	mov    rax,QWORD PTR [rbx]
  016a3:    	lea    rdi,[rsp-0x18]
  016a8:    	mov    QWORD PTR [rdi],rax
  016ab:    	mov    QWORD PTR [rbx],rdi
  016ae: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016b7:    	mov    QWORD PTR [rsp-0x38],rcx
  016bc:    	mov    rax,QWORD PTR [rbp-0x38]
  016c0:    	mov    QWORD PTR [rsp-0x38],rax
  016c5: 00 	mov    rdi,0x1
  016cc:    	mov    rax,QWORD PTR [rbp-0x70]
  016d0:    	mov    QWORD PTR [rsp-0x40],rax
  016d5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  016de: 00 	movabs rax,0x0
  016e8:    	mov    QWORD PTR [rsp-0x28],rax
  016ed: 00 	movabs r13,0x0
  016f7:    	call   0xffffc36a
  016fc:    	lea    rdi,[rbp-0x8]
  01700:    	mov    QWORD PTR [rbx],rdi
  01703:    	movq   xmm5,QWORD PTR [rsp]
  01708:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0170e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01714:    	add    rsp,0x20
  01718:    	test   rax,rax
  0171b:    	je     0x3d815
:00098 %9 = %2.call pl()                    [<INVALID>]
:00099 
  01721:    	sub    rsp,0x20
  01725:    	movq   QWORD PTR [rsp],xmm5
  0172a:    	movq   QWORD PTR [rsp+0x8],xmm6
  01730:    	movq   QWORD PTR [rsp+0x10],xmm7
  01736:    	mov    rdi,QWORD PTR [rbp-0x38]
  0173a: 76 	movabs rax,0x5576ccd01d00
  01744:    	call   rax
  01746:    	mov    r15d,eax
  01749: 00 	cmp    r15d,DWORD PTR [rip+0x446]        # 0x1b96
  01750:    	jne    0x3d824
  01756:    	mov    eax,DWORD PTR [rip+0xffffffffffffd626]        # 0xffffed82
  0175c:    	cmp    DWORD PTR [rip+0x430],eax        # 0x1b92
  01762:    	jne    0x3d824
  01768:    	mov    rax,QWORD PTR [rbx]
  0176b:    	lea    rdi,[rsp-0x18]
  01770:    	mov    QWORD PTR [rdi],rax
  01773:    	mov    QWORD PTR [rbx],rdi
  01776: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0177f:    	mov    QWORD PTR [rsp-0x38],rcx
  01784:    	mov    rax,QWORD PTR [rbp-0x38]
  01788:    	mov    QWORD PTR [rsp-0x38],rax
  0178d: 00 	mov    rdi,0x0
  01794: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0179d: 00 	movabs rax,0x0
  017a7:    	mov    QWORD PTR [rsp-0x28],rax
  017ac: 00 	movabs r13,0x0
  017b6:    	call   0xffffc36a
  017bb:    	lea    rdi,[rbp-0x8]
  017bf:    	mov    QWORD PTR [rbx],rdi
  017c2:    	movq   xmm5,QWORD PTR [rsp]
  017c7:    	movq   xmm6,QWORD PTR [rsp+0x8]
  017cd:    	movq   xmm7,QWORD PTR [rsp+0x10]
  017d3:    	add    rsp,0x20
  017d7:    	test   rax,rax
  017da:    	je     0x3d890
  017e0:    	mov    QWORD PTR [rbp-0x70],rax
:00101 %10 = @center: <INVALID>[IvarId(0)]
  017e4:    	mov    rdi,QWORD PTR [rbp-0x28]
  017e8:    	sub    rsp,0x20
  017ec:    	movq   QWORD PTR [rsp],xmm5
  017f1:    	movq   QWORD PTR [rsp+0x8],xmm6
  017f7:    	movq   QWORD PTR [rsp+0x10],xmm7
  017fd: 00 	mov    rsi,0x7b
  01804:    	mov    rdx,r12
  01807: 76 	movabs rax,0x5576cccd6650
  01811:    	call   rax
  01813:    	movq   xmm5,QWORD PTR [rsp]
  01818:    	movq   xmm6,QWORD PTR [rsp+0x8]
  0181e:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01824:    	add    rsp,0x20
  01828:    	mov    QWORD PTR [rbp-0x78],rax
:00102 %8 = %9.call vsub(%10; 1)            [<INVALID>]
:00103 
  0182c:    	sub    rsp,0x20
  01830:    	movq   QWORD PTR [rsp],xmm5
  01835:    	movq   QWORD PTR [rsp+0x8],xmm6
  0183b:    	movq   QWORD PTR [rsp+0x10],xmm7
  01841:    	mov    rdi,QWORD PTR [rbp-0x70]
  01845: 76 	movabs rax,0x5576ccd01d00
  0184f:    	call   rax
  01851:    	mov    r15d,eax
  01854: 00 	cmp    r15d,DWORD PTR [rip+0x343]        # 0x1b9e
  0185b:    	jne    0x3d89f
  01861:    	mov    eax,DWORD PTR [rip+0xffffffffffffd51b]        # 0xffffed82
  01867:    	cmp    DWORD PTR [rip+0x32d],eax        # 0x1b9a
  0186d:    	jne    0x3d89f
  01873:    	mov    rax,QWORD PTR [rbx]
  01876:    	lea    rdi,[rsp-0x18]
  0187b:    	mov    QWORD PTR [rdi],rax
  0187e:    	mov    QWORD PTR [rbx],rdi
  01881: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0188a:    	mov    QWORD PTR [rsp-0x38],rcx
  0188f:    	mov    rax,QWORD PTR [rbp-0x70]
  01893:    	mov    QWORD PTR [rsp-0x38],rax
  01898: 00 	mov    rdi,0x1
  0189f:    	mov    rax,QWORD PTR [rbp-0x78]
  018a3:    	mov    QWORD PTR [rsp-0x40],rax
  018a8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  018b1: 00 	movabs rax,0x0
  018bb:    	mov    QWORD PTR [rsp-0x28],rax
  018c0: 00 	movabs r13,0x0
  018ca:    	call   0xffffc36a
  018cf:    	lea    rdi,[rbp-0x8]
  018d3:    	mov    QWORD PTR [rbx],rdi
  018d6:    	movq   xmm5,QWORD PTR [rsp]
  018db:    	movq   xmm6,QWORD PTR [rsp+0x8]
  018e1:    	movq   xmm7,QWORD PTR [rsp+0x10]
  018e7:    	add    rsp,0x20
  018eb:    	test   rax,rax
  018ee:    	je     0x3d90b
  018f4:    	mov    QWORD PTR [rbp-0x68],rax
:00105 %9 = %8.call vnormalize()            [<INVALID>]
:00106 
  018f8:    	sub    rsp,0x20
  018fc:    	movq   QWORD PTR [rsp],xmm5
  01901:    	movq   QWORD PTR [rsp+0x8],xmm6
  01907:    	movq   QWORD PTR [rsp+0x10],xmm7
  0190d:    	mov    rdi,QWORD PTR [rbp-0x68]
  01911: 76 	movabs rax,0x5576ccd01d00
  0191b:    	call   rax
  0191d:    	mov    r15d,eax
  01920: 00 	cmp    r15d,DWORD PTR [rip+0x27f]        # 0x1ba6
  01927:    	jne    0x3d91a
  0192d:    	mov    eax,DWORD PTR [rip+0xffffffffffffd44f]        # 0xffffed82
  01933:    	cmp    DWORD PTR [rip+0x269],eax        # 0x1ba2
  01939:    	jne    0x3d91a
  0193f:    	mov    rax,QWORD PTR [rbx]
  01942:    	lea    rdi,[rsp-0x18]
  01947:    	mov    QWORD PTR [rdi],rax
  0194a:    	mov    QWORD PTR [rbx],rdi
  0194d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01956:    	mov    QWORD PTR [rsp-0x38],rcx
  0195b:    	mov    rax,QWORD PTR [rbp-0x68]
  0195f:    	mov    QWORD PTR [rsp-0x38],rax
  01964: 00 	mov    rdi,0x0
  0196b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01974: 00 	movabs rax,0x0
  0197e:    	mov    QWORD PTR [rsp-0x28],rax
  01983: 00 	movabs r13,0x0
  0198d:    	call   0xffffc36a
  01992:    	lea    rdi,[rbp-0x8]
  01996:    	mov    QWORD PTR [rbx],rdi
  01999:    	movq   xmm5,QWORD PTR [rsp]
  0199e:    	movq   xmm6,QWORD PTR [rsp+0x8]
  019a4:    	movq   xmm7,QWORD PTR [rsp+0x10]
  019aa:    	add    rsp,0x20
  019ae:    	test   rax,rax
  019b1:    	je     0x3d986
  019b7:    	mov    QWORD PTR [rbp-0x70],rax
:00108 _ = %2.call n=(%9; 1)                [<INVALID>]
:00109 
  019bb:    	sub    rsp,0x20
  019bf:    	movq   QWORD PTR [rsp],xmm5
  019c4:    	movq   QWORD PTR [rsp+0x8],xmm6
  019ca:    	movq   QWORD PTR [rsp+0x10],xmm7
  019d0:    	mov    rdi,QWORD PTR [rbp-0x38]
  019d4: 76 	movabs rax,0x5576ccd01d00
  019de:    	call   rax
  019e0:    	mov    r15d,eax
  019e3: 00 	cmp    r15d,DWORD PTR [rip+0x1c4]        # 0x1bae
  019ea:    	jne    0x3d995
  019f0:    	mov    eax,DWORD PTR [rip+0xffffffffffffd38c]        # 0xffffed82
  019f6:    	cmp    DWORD PTR [rip+0x1ae],eax        # 0x1baa
  019fc:    	jne    0x3d995
  01a02:    	mov    rax,QWORD PTR [rbx]
  01a05:    	lea    rdi,[rsp-0x18]
  01a0a:    	mov    QWORD PTR [rdi],rax
  01a0d:    	mov    QWORD PTR [rbx],rdi
  01a10: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01a19:    	mov    QWORD PTR [rsp-0x38],rcx
  01a1e:    	mov    rax,QWORD PTR [rbp-0x38]
  01a22:    	mov    QWORD PTR [rsp-0x38],rax
  01a27: 00 	mov    rdi,0x1
  01a2e:    	mov    rax,QWORD PTR [rbp-0x70]
  01a32:    	mov    QWORD PTR [rsp-0x40],rax
  01a37: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a40: 00 	movabs rax,0x0
  01a4a:    	mov    QWORD PTR [rsp-0x28],rax
  01a4f: 00 	movabs r13,0x0
  01a59:    	call   0xffffc36a
  01a5e:    	lea    rdi,[rbp-0x8]
  01a62:    	mov    QWORD PTR [rbx],rdi
  01a65:    	movq   xmm5,QWORD PTR [rsp]
  01a6a:    	movq   xmm6,QWORD PTR [rsp+0x8]
  01a70:    	movq   xmm7,QWORD PTR [rsp+0x10]
  01a76:    	add    rsp,0x20
  01a7a:    	test   rax,rax
  01a7d:    	je     0x3da01
:00111 br =>:00112
  01a83:    	jmp    0x3da43
:00112 br =>:00113
  01a88:    	jmp    0x3dac3
:00113 %9 = nil
  01a8d: 00 	mov    QWORD PTR [rbp-0x70],0x4
:00114 ret %9
  01a95:    	mov    rax,QWORD PTR [rbp-0x70]
  01a99:    	leave  
  01a9a:    	ret    
==> start whole compile: vsub FuncId(57) self_class:Vec start:[00000] bytecode:0x5576cd69f550
<== finished compile. elapsed:63.8µs
offset:Pos(22600) code: 1400 bytes  data: 48 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x70
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    QWORD PTR [rbp-0x50],rax
  0001f: mov    QWORD PTR [rbp-0x58],rax
  00023: mov    QWORD PTR [rbp-0x60],rax
  00027: mov    rdi,QWORD PTR [rbp-0x28]
  0002b: test   rdi,0x7
  00032: jne    0x3bf44
  00038: cmp    DWORD PTR [rdi+0x4],0x25
  0003c: jne    0x3bf44
:00000 %3 = const[Vec]                      [Vec]
  00042: mov    rax,QWORD PTR [rip+0xffffffffffffd18f]        # 0xffffd1d8
  00049: cmp    rax,QWORD PTR [rip+0x538]        # 0x588
  00050: jne    0x3bf53
  00056: mov    rax,QWORD PTR [rip+0x51b]        # 0x578
  0005d: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = @x: Vec[IvarId(0)]
  00061: mov    rdi,QWORD PTR [rbp-0x28]
  00065: xor    rax,rax
  00068: mov    ax,WORD PTR [rdi+0x2]
  0006c: cmp    rax,0x3
  00070: jne    0x3bf99
  00076: mov    rax,QWORD PTR [rdi+0x10]
  0007a: mov    QWORD PTR [rbp-0x48],rax
:00002 %5 = %1.call x()                     [Vec]
:00003 
  0007e: mov    rdi,QWORD PTR [rbp-0x30]
  00082: test   rdi,0x7
  00089: jne    0x3bfaf
  0008f: cmp    DWORD PTR [rdi+0x4],0x25
  00093: jne    0x3bfaf
  00099: cmp    DWORD PTR [rip+0xffffffffffffd130],0x26        # 0xffffd1d0
  000a0: jne    0x3bfaf
  000a6: mov    esi,DWORD PTR [rip+0x4e8]        # 0x594
  000ac: cmp    esi,0xffffffff
  000af: je     0x3bfbe
  000b5: xor    rax,rax
  000b8: mov    ax,WORD PTR [rdi+0x2]
  000bc: cmp    rax,0x3
  000c0: jne    0xd9
  000c6: cmp    esi,0x6
  000c9: jge    0xd9
  000cf: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000d4: jmp    0xe5
  000d9: movabs rax,0x5576cccb62a0
  000e3: call   rax
  000e5: mov    QWORD PTR [rbp-0x50],rax
:00005 %4 = %4 - %5                         [Float][Float]
  000e9: mov    rdi,QWORD PTR [rbp-0x48]
  000ed: test   rdi,0x1
  000f4: jne    0x3bfe7
  000fa: test   rdi,0x2
  00101: je     0x13d
  00107: xorps  xmm2,xmm2
  0010a: movabs rax,0x8000000000000002
  00114: cmp    rdi,rax
  00117: je     0x14f
  0011d: mov    rax,rdi
  00120: sar    rax,0x3f
  00124: add    rax,0x2
  00128: and    rdi,0xfffffffffffffffc
  0012c: or     rdi,rax
  0012f: rol    rdi,0x3d
  00133: movq   xmm2,rdi
  00138: jmp    0x14f
  0013d: call   0xffffa82c
  00142: test   rax,rax
  00145: je     0x3bfe7
  0014b: movq   xmm2,xmm0
  0014f: mov    rdi,QWORD PTR [rbp-0x50]
  00153: test   rdi,0x1
  0015a: jne    0x3bff6
  00160: test   rdi,0x2
  00167: je     0x1a3
  0016d: xorps  xmm3,xmm3
  00170: movabs rax,0x8000000000000002
  0017a: cmp    rdi,rax
  0017d: je     0x1b5
  00183: mov    rax,rdi
  00186: sar    rax,0x3f
  0018a: add    rax,0x2
  0018e: and    rdi,0xfffffffffffffffc
  00192: or     rdi,rax
  00195: rol    rdi,0x3d
  00199: movq   xmm3,rdi
  0019e: jmp    0x1b5
  001a3: call   0xffffa82c
  001a8: test   rax,rax
  001ab: je     0x3bff6
  001b1: movq   xmm3,xmm0
  001b5: subsd  xmm2,xmm3
:00006 %5 = @y: Vec[IvarId(1)]
  001b9: mov    rdi,QWORD PTR [rbp-0x28]
  001bd: xor    rax,rax
  001c0: mov    ax,WORD PTR [rdi+0x2]
  001c4: cmp    rax,0x3
  001c8: jne    0x3c005
  001ce: mov    rax,QWORD PTR [rdi+0x18]
  001d2: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = %1.call y()                     [Vec]
:00008 
  001d6: mov    rdi,QWORD PTR [rbp-0x30]
  001da: test   rdi,0x7
  001e1: jne    0x3c02d
  001e7: cmp    DWORD PTR [rdi+0x4],0x25
  001eb: jne    0x3c02d
  001f1: cmp    DWORD PTR [rip+0xffffffffffffcfd8],0x26        # 0xffffd1d0
  001f8: jne    0x3c02d
  001fe: mov    esi,DWORD PTR [rip+0x398]        # 0x59c
  00204: cmp    esi,0xffffffff
  00207: je     0x3c049
  0020d: xor    rax,rax
  00210: mov    ax,WORD PTR [rdi+0x2]
  00214: cmp    rax,0x3
  00218: jne    0x231
  0021e: cmp    esi,0x6
  00221: jge    0x231
  00227: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0022c: jmp    0x24f
  00231: sub    rsp,0x10
  00235: movq   QWORD PTR [rsp],xmm2
  0023a: movabs rax,0x5576cccb62a0
  00244: call   rax
  00246: movq   xmm2,QWORD PTR [rsp]
  0024b: add    rsp,0x10
  0024f: mov    QWORD PTR [rbp-0x58],rax
:00010 %5 = %5 - %6                         [Float][Float]
  00253: mov    rdi,QWORD PTR [rbp-0x50]
  00257: test   rdi,0x1
  0025e: jne    0x3c084
  00264: test   rdi,0x2
  0026b: je     0x2a7
  00271: xorps  xmm3,xmm3
  00274: movabs rax,0x8000000000000002
  0027e: cmp    rdi,rax
  00281: je     0x2b9
  00287: mov    rax,rdi
  0028a: sar    rax,0x3f
  0028e: add    rax,0x2
  00292: and    rdi,0xfffffffffffffffc
  00296: or     rdi,rax
  00299: rol    rdi,0x3d
  0029d: movq   xmm3,rdi
  002a2: jmp    0x2b9
  002a7: call   0xffffa82c
  002ac: test   rax,rax
  002af: je     0x3c084
  002b5: movq   xmm3,xmm0
  002b9: mov    rdi,QWORD PTR [rbp-0x58]
  002bd: test   rdi,0x1
  002c4: jne    0x3c0a0
  002ca: test   rdi,0x2
  002d1: je     0x30d
  002d7: xorps  xmm4,xmm4
  002da: movabs rax,0x8000000000000002
  002e4: cmp    rdi,rax
  002e7: je     0x31f
  002ed: mov    rax,rdi
  002f0: sar    rax,0x3f
  002f4: add    rax,0x2
  002f8: and    rdi,0xfffffffffffffffc
  002fc: or     rdi,rax
  002ff: rol    rdi,0x3d
  00303: movq   xmm4,rdi
  00308: jmp    0x31f
  0030d: call   0xffffa82c
  00312: test   rax,rax
  00315: je     0x3c0a0
  0031b: movq   xmm4,xmm0
  0031f: subsd  xmm3,xmm4
:00011 %6 = @z: Vec[IvarId(2)]
  00323: mov    rdi,QWORD PTR [rbp-0x28]
  00327: xor    rax,rax
  0032a: mov    ax,WORD PTR [rdi+0x2]
  0032e: cmp    rax,0x3
  00332: jne    0x3c0bc
  00338: mov    rax,QWORD PTR [rdi+0x20]
  0033c: mov    QWORD PTR [rbp-0x58],rax
:00012 %7 = %1.call z()                     [Vec]
:00013 
  00340: mov    rdi,QWORD PTR [rbp-0x30]
  00344: test   rdi,0x7
  0034b: jne    0x3c0f0
  00351: cmp    DWORD PTR [rdi+0x4],0x25
  00355: jne    0x3c0f0
  0035b: cmp    DWORD PTR [rip+0xffffffffffffce6e],0x26        # 0xffffd1d0
  00362: jne    0x3c0f0
  00368: mov    esi,DWORD PTR [rip+0x236]        # 0x5a4
  0036e: cmp    esi,0xffffffff
  00371: je     0x3c119
  00377: xor    rax,rax
  0037a: mov    ax,WORD PTR [rdi+0x2]
  0037e: cmp    rax,0x3
  00382: jne    0x39b
  00388: cmp    esi,0x6
  0038b: jge    0x39b
  00391: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00396: jmp    0x3c5
  0039b: sub    rsp,0x10
  0039f: movq   QWORD PTR [rsp],xmm2
  003a4: movq   QWORD PTR [rsp+0x8],xmm3
  003aa: movabs rax,0x5576cccb62a0
  003b4: call   rax
  003b6: movq   xmm2,QWORD PTR [rsp]
  003bb: movq   xmm3,QWORD PTR [rsp+0x8]
  003c1: add    rsp,0x10
  003c5: mov    QWORD PTR [rbp-0x60],rax
:00015 %6 = %6 - %7                         [Float][Float]
  003c9: mov    rdi,QWORD PTR [rbp-0x58]
  003cd: test   rdi,0x1
  003d4: jne    0x3c160
  003da: test   rdi,0x2
  003e1: je     0x41d
  003e7: xorps  xmm4,xmm4
  003ea: movabs rax,0x8000000000000002
  003f4: cmp    rdi,rax
  003f7: je     0x42f
  003fd: mov    rax,rdi
  00400: sar    rax,0x3f
  00404: add    rax,0x2
  00408: and    rdi,0xfffffffffffffffc
  0040c: or     rdi,rax
  0040f: rol    rdi,0x3d
  00413: movq   xmm4,rdi
  00418: jmp    0x42f
  0041d: call   0xffffa82c
  00422: test   rax,rax
  00425: je     0x3c160
  0042b: movq   xmm4,xmm0
  0042f: mov    rdi,QWORD PTR [rbp-0x60]
  00433: test   rdi,0x1
  0043a: jne    0x3c189
  00440: test   rdi,0x2
  00447: je     0x483
  0044d: xorps  xmm5,xmm5
  00450: movabs rax,0x8000000000000002
  0045a: cmp    rdi,rax
  0045d: je     0x495
  00463: mov    rax,rdi
  00466: sar    rax,0x3f
  0046a: add    rax,0x2
  0046e: and    rdi,0xfffffffffffffffc
  00472: or     rdi,rax
  00475: rol    rdi,0x3d
  00479: movq   xmm5,rdi
  0047e: jmp    0x495
  00483: call   0xffffa82c
  00488: test   rax,rax
  0048b: je     0x3c189
  00491: movq   xmm5,xmm0
  00495: subsd  xmm4,xmm5
:00016 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00017 
  00499: movq   xmm0,xmm2
  0049d: call   0xffffa91f
  004a2: mov    QWORD PTR [rbp-0x48],rax
  004a6: movq   xmm0,xmm3
  004aa: call   0xffffa91f
  004af: mov    QWORD PTR [rbp-0x50],rax
  004b3: movq   xmm0,xmm4
  004b7: call   0xffffa91f
  004bc: mov    QWORD PTR [rbp-0x58],rax
  004c0: mov    rdi,QWORD PTR [rbp-0x40]
  004c4: test   rdi,0x7
  004cb: jne    0x3c1b2
  004d1: cmp    DWORD PTR [rdi+0x4],0x26
  004d5: jne    0x3c1b2
  004db: cmp    DWORD PTR [rip+0xffffffffffffccee],0x26        # 0xffffd1d0
  004e2: jne    0x3c1b2
  004e8: mov    r9,0x0
  004ef: sub    rsp,0x20
  004f3: movq   QWORD PTR [rsp],xmm2
  004f8: movq   QWORD PTR [rsp+0x8],xmm3
  004fe: movq   QWORD PTR [rsp+0x10],xmm4
  00504: movq   QWORD PTR [rsp+0x18],xmm5
  0050a: mov    rdx,rdi
  0050d: mov    rax,QWORD PTR [rbx]
  00510: lea    rdi,[rsp-0x18]
  00515: mov    QWORD PTR [rdi],rax
  00518: mov    QWORD PTR [rbx],rdi
  0051b: mov    QWORD PTR [rsp-0x20],0x0
  00524: mov    QWORD PTR [rsp-0x38],rcx
  00529: lea    rcx,[rbp-0x48]
  0052d: mov    r8,0x3
  00534: call   0x3c1c1
  00539: lea    rdi,[rbp-0x8]
  0053d: mov    QWORD PTR [rbx],rdi
  00540: movq   xmm2,QWORD PTR [rsp]
  00545: movq   xmm3,QWORD PTR [rsp+0x8]
  0054b: movq   xmm4,QWORD PTR [rsp+0x10]
  00551: movq   xmm5,QWORD PTR [rsp+0x18]
  00557: add    rsp,0x20
  0055b: movabs r13,0x5576cd69f670
  00565: test   rax,rax
  00568: je     0xffffa7f3
  0056e: mov    QWORD PTR [rbp-0x38],rax
:00019 ret %2
  00572: mov    rax,QWORD PTR [rbp-0x38]
  00576: leave  
  00577: ret    
==> start whole compile: <unnamed> FuncId(76) self_class:Scene start:[00000] bytecode:0x5576cd68c870
<== finished compile. elapsed:184.7µs
offset:Pos(24048) code: 9957 bytes  data: 363 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xd0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00064: ff 	mov    QWORD PTR [rbp-0xb8],rax
  0006b: ff 	mov    QWORD PTR [rbp-0xc0],rax
  00072:    	mov    rdi,QWORD PTR [rbp-0x28]
  00076: 00 	test   rdi,0x7
  0007d:    	jne    0x3bc4b
  00083:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00087:    	jne    0x3bc4b
:00000 %14 = dynvar(4, %4)
  0008d:    	mov    rax,QWORD PTR [rbp-0x10]
  00091:    	mov    rax,QWORD PTR [rax]
  00094:    	mov    rax,QWORD PTR [rax]
  00097:    	mov    rax,QWORD PTR [rax]
  0009a:    	lea    rax,[rax+0x10]
  0009e:    	mov    rax,QWORD PTR [rax-0x48]
  000a2: ff 	mov    QWORD PTR [rbp-0x98],rax
:00001 %14 = %14 + 1: i16                   [Integer][Integer]
  000a9: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000b0: 00 	test   rdi,0x1
  000b7:    	je     0x3bc5a
  000bd:    	add    rdi,0x2
  000c1:    	jo     0x3bc5a
  000c7: ff 	mov    QWORD PTR [rbp-0x98],rdi
:00002 dynvar(4, %4) = %14
  000ce:    	mov    rax,QWORD PTR [rbp-0x10]
  000d2:    	mov    rax,QWORD PTR [rax]
  000d5:    	mov    rax,QWORD PTR [rax]
  000d8:    	mov    rax,QWORD PTR [rax]
  000db:    	lea    rax,[rax+0x10]
  000df: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  000e6:    	mov    QWORD PTR [rax-0x48],rdi
:00003 %14 = dynvar(4, %1)
  000ea:    	mov    rax,QWORD PTR [rbp-0x10]
  000ee:    	mov    rax,QWORD PTR [rax]
  000f1:    	mov    rax,QWORD PTR [rax]
  000f4:    	mov    rax,QWORD PTR [rax]
  000f7:    	lea    rax,[rax+0x10]
  000fb:    	mov    rax,QWORD PTR [rax-0x30]
  000ff: ff 	mov    QWORD PTR [rbp-0x98],rax
:00004 %2 = %14.call to_f()                 [Integer]
:00005 
  00106: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0010d: 00 	test   rdi,0x1
  00114:    	jne    0x131
  0011a: 00 	test   rdi,0x7
  00121:    	jne    0x3bc69
  00127:    	cmp    DWORD PTR [rdi+0x4],0x6
  0012b:    	jne    0x3bc69
  00131: 26 	cmp    DWORD PTR [rip+0xffffffffffffcaf0],0x26        # 0xffffcc28
  00138:    	jne    0x3bc69
  0013e: 00 	mov    r9,0x0
  00145:    	mov    rdx,rdi
  00148:    	mov    rax,QWORD PTR [rbx]
  0014b:    	lea    rdi,[rsp-0x18]
  00150:    	mov    QWORD PTR [rdi],rax
  00153:    	mov    QWORD PTR [rbx],rdi
  00156: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0015f:    	mov    QWORD PTR [rsp-0x38],rcx
  00164: ff 	lea    rcx,[rbp-0xa0]
  0016b: 00 	mov    r8,0x0
  00172:    	call   0x3bc78
  00177:    	lea    rdi,[rbp-0x8]
  0017b:    	mov    QWORD PTR [rbx],rdi
  0017e: 76 	movabs r13,0x5576cd68c8d0
  00188:    	test   rax,rax
  0018b:    	je     0xffffa24b
  00191:    	mov    QWORD PTR [rbp-0x38],rax
:00007 %14 = dynvar(4, %2)
  00195:    	mov    rax,QWORD PTR [rbp-0x10]
  00199:    	mov    rax,QWORD PTR [rax]
  0019c:    	mov    rax,QWORD PTR [rax]
  0019f:    	mov    rax,QWORD PTR [rax]
  001a2:    	lea    rax,[rax+0x10]
  001a6:    	mov    rax,QWORD PTR [rax-0x38]
  001aa: ff 	mov    QWORD PTR [rbp-0x98],rax
:00008 %3 = %14.call to_f()                 [Integer]
:00009 
  001b1: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  001b8: 00 	test   rdi,0x1
  001bf:    	jne    0x1dc
  001c5: 00 	test   rdi,0x7
  001cc:    	jne    0x3bcaa
  001d2:    	cmp    DWORD PTR [rdi+0x4],0x6
  001d6:    	jne    0x3bcaa
  001dc: 26 	cmp    DWORD PTR [rip+0xffffffffffffca45],0x26        # 0xffffcc28
  001e3:    	jne    0x3bcaa
  001e9: 00 	mov    r9,0x0
  001f0:    	mov    rdx,rdi
  001f3:    	mov    rax,QWORD PTR [rbx]
  001f6:    	lea    rdi,[rsp-0x18]
  001fb:    	mov    QWORD PTR [rdi],rax
  001fe:    	mov    QWORD PTR [rbx],rdi
  00201: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0020a:    	mov    QWORD PTR [rsp-0x38],rcx
  0020f: ff 	lea    rcx,[rbp-0xa0]
  00216: 00 	mov    r8,0x0
  0021d:    	call   0x3bcb9
  00222:    	lea    rdi,[rbp-0x8]
  00226:    	mov    QWORD PTR [rbx],rdi
  00229: 76 	movabs r13,0x5576cd68c910
  00233:    	test   rax,rax
  00236:    	je     0xffffa24b
  0023c:    	mov    QWORD PTR [rbp-0x40],rax
:00011 %14 = dynvar(2, %1)
  00240:    	mov    rax,QWORD PTR [rbp-0x10]
  00244:    	mov    rax,QWORD PTR [rax]
  00247:    	lea    rax,[rax+0x10]
  0024b:    	mov    rax,QWORD PTR [rax-0x30]
  0024f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %4 = %14.call to_f()                 [Integer]
:00013 
  00256: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0025d: 00 	test   rdi,0x1
  00264:    	jne    0x281
  0026a: 00 	test   rdi,0x7
  00271:    	jne    0x3bceb
  00277:    	cmp    DWORD PTR [rdi+0x4],0x6
  0027b:    	jne    0x3bceb
  00281: 26 	cmp    DWORD PTR [rip+0xffffffffffffc9a0],0x26        # 0xffffcc28
  00288:    	jne    0x3bceb
  0028e: 00 	mov    r9,0x0
  00295:    	mov    rdx,rdi
  00298:    	mov    rax,QWORD PTR [rbx]
  0029b:    	lea    rdi,[rsp-0x18]
  002a0:    	mov    QWORD PTR [rdi],rax
  002a3:    	mov    QWORD PTR [rbx],rdi
  002a6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  002af:    	mov    QWORD PTR [rsp-0x38],rcx
  002b4: ff 	lea    rcx,[rbp-0xa0]
  002bb: 00 	mov    r8,0x0
  002c2:    	call   0x3bcfa
  002c7:    	lea    rdi,[rbp-0x8]
  002cb:    	mov    QWORD PTR [rbx],rdi
  002ce: 76 	movabs r13,0x5576cd68c950
  002d8:    	test   rax,rax
  002db:    	je     0xffffa24b
  002e1:    	mov    QWORD PTR [rbp-0x48],rax
:00015 %14 = dynvar(3, %1)
  002e5:    	mov    rax,QWORD PTR [rbp-0x10]
  002e9:    	mov    rax,QWORD PTR [rax]
  002ec:    	mov    rax,QWORD PTR [rax]
  002ef:    	lea    rax,[rax+0x10]
  002f3:    	mov    rax,QWORD PTR [rax-0x30]
  002f7: ff 	mov    QWORD PTR [rbp-0x98],rax
:00016 %5 = %14.call to_f()                 [Integer]
:00017 
  002fe: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00305: 00 	test   rdi,0x1
  0030c:    	jne    0x329
  00312: 00 	test   rdi,0x7
  00319:    	jne    0x3bd2c
  0031f:    	cmp    DWORD PTR [rdi+0x4],0x6
  00323:    	jne    0x3bd2c
  00329: 26 	cmp    DWORD PTR [rip+0xffffffffffffc8f8],0x26        # 0xffffcc28
  00330:    	jne    0x3bd2c
  00336: 00 	mov    r9,0x0
  0033d:    	mov    rdx,rdi
  00340:    	mov    rax,QWORD PTR [rbx]
  00343:    	lea    rdi,[rsp-0x18]
  00348:    	mov    QWORD PTR [rdi],rax
  0034b:    	mov    QWORD PTR [rbx],rdi
  0034e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00357:    	mov    QWORD PTR [rsp-0x38],rcx
  0035c: ff 	lea    rcx,[rbp-0xa0]
  00363: 00 	mov    r8,0x0
  0036a:    	call   0x3bd3b
  0036f:    	lea    rdi,[rbp-0x8]
  00373:    	mov    QWORD PTR [rbx],rdi
  00376: 76 	movabs r13,0x5576cd68c990
  00380:    	test   rax,rax
  00383:    	je     0xffffa24b
  00389:    	mov    QWORD PTR [rbp-0x50],rax
:00019 %6 = %1.call to_f()                  [Integer]
:00020 
  0038d:    	mov    rdi,QWORD PTR [rbp-0x30]
  00391: 00 	test   rdi,0x1
  00398:    	jne    0x3b5
  0039e: 00 	test   rdi,0x7
  003a5:    	jne    0x3bd6d
  003ab:    	cmp    DWORD PTR [rdi+0x4],0x6
  003af:    	jne    0x3bd6d
  003b5: 26 	cmp    DWORD PTR [rip+0xffffffffffffc86c],0x26        # 0xffffcc28
  003bc:    	jne    0x3bd6d
  003c2: 00 	mov    r9,0x0
  003c9:    	mov    rdx,rdi
  003cc:    	mov    rax,QWORD PTR [rbx]
  003cf:    	lea    rdi,[rsp-0x18]
  003d4:    	mov    QWORD PTR [rdi],rax
  003d7:    	mov    QWORD PTR [rbx],rdi
  003da: 00 	mov    QWORD PTR [rsp-0x20],0x0
  003e3:    	mov    QWORD PTR [rsp-0x38],rcx
  003e8: ff 	lea    rcx,[rbp-0x98]
  003ef: 00 	mov    r8,0x0
  003f6:    	call   0x3bd7c
  003fb:    	lea    rdi,[rbp-0x8]
  003ff:    	mov    QWORD PTR [rbx],rdi
  00402: 76 	movabs r13,0x5576cd68c9c0
  0040c:    	test   rax,rax
  0040f:    	je     0xffffa24b
  00415:    	mov    QWORD PTR [rbp-0x58],rax
:00022 %14 = dynvar(1, %1)
  00419:    	mov    rax,QWORD PTR [rbp-0x10]
  0041d:    	lea    rax,[rax+0x10]
  00421:    	mov    rax,QWORD PTR [rax-0x30]
  00425: ff 	mov    QWORD PTR [rbp-0x98],rax
:00023 %7 = %14.call to_f()                 [Integer]
:00024 
  0042c: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00433: 00 	test   rdi,0x1
  0043a:    	jne    0x457
  00440: 00 	test   rdi,0x7
  00447:    	jne    0x3bdae
  0044d:    	cmp    DWORD PTR [rdi+0x4],0x6
  00451:    	jne    0x3bdae
  00457: 26 	cmp    DWORD PTR [rip+0xffffffffffffc7ca],0x26        # 0xffffcc28
  0045e:    	jne    0x3bdae
  00464: 00 	mov    r9,0x0
  0046b:    	mov    rdx,rdi
  0046e:    	mov    rax,QWORD PTR [rbx]
  00471:    	lea    rdi,[rsp-0x18]
  00476:    	mov    QWORD PTR [rdi],rax
  00479:    	mov    QWORD PTR [rbx],rdi
  0047c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00485:    	mov    QWORD PTR [rsp-0x38],rcx
  0048a: ff 	lea    rcx,[rbp-0xa0]
  00491: 00 	mov    r8,0x0
  00498:    	call   0x3bdbd
  0049d:    	lea    rdi,[rbp-0x8]
  004a1:    	mov    QWORD PTR [rbx],rdi
  004a4: 76 	movabs r13,0x5576cd68ca00
  004ae:    	test   rax,rax
  004b1:    	je     0xffffa24b
  004b7:    	mov    QWORD PTR [rbp-0x60],rax
:00026 %14 = dynvar(4, %5)
  004bb:    	mov    rax,QWORD PTR [rbp-0x10]
  004bf:    	mov    rax,QWORD PTR [rax]
  004c2:    	mov    rax,QWORD PTR [rax]
  004c5:    	mov    rax,QWORD PTR [rax]
  004c8:    	lea    rax,[rax+0x10]
  004cc:    	mov    rax,QWORD PTR [rax-0x50]
  004d0: ff 	mov    QWORD PTR [rbp-0x98],rax
:00027 %14 = %6 / %14                       [Float][Float]
  004d7:    	mov    rdi,QWORD PTR [rbp-0x58]
  004db: 00 	test   rdi,0x1
  004e2:    	jne    0x3bdef
  004e8: 00 	test   rdi,0x2
  004ef:    	je     0x52b
  004f5:    	xorps  xmm2,xmm2
  004f8: 00 	movabs rax,0x8000000000000002
  00502:    	cmp    rdi,rax
  00505:    	je     0x53d
  0050b:    	mov    rax,rdi
  0050e:    	sar    rax,0x3f
  00512:    	add    rax,0x2
  00516:    	and    rdi,0xfffffffffffffffc
  0051a:    	or     rdi,rax
  0051d:    	rol    rdi,0x3d
  00521:    	movq   xmm2,rdi
  00526:    	jmp    0x53d
  0052b:    	call   0xffffa284
  00530:    	test   rax,rax
  00533:    	je     0x3bdef
  00539:    	movq   xmm2,xmm0
  0053d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00544: 00 	test   rdi,0x1
  0054b:    	jne    0x3bdfe
  00551: 00 	test   rdi,0x2
  00558:    	je     0x594
  0055e:    	xorps  xmm3,xmm3
  00561: 00 	movabs rax,0x8000000000000002
  0056b:    	cmp    rdi,rax
  0056e:    	je     0x5a6
  00574:    	mov    rax,rdi
  00577:    	sar    rax,0x3f
  0057b:    	add    rax,0x2
  0057f:    	and    rdi,0xfffffffffffffffc
  00583:    	or     rdi,rax
  00586:    	rol    rdi,0x3d
  0058a:    	movq   xmm3,rdi
  0058f:    	jmp    0x5a6
  00594:    	call   0xffffa284
  00599:    	test   rax,rax
  0059c:    	je     0x3bdfe
  005a2:    	movq   xmm3,xmm0
  005a6:    	movq   rax,xmm3
  005ab:    	test   rax,rax
  005ae:    	je     0xffffa270
  005b4:    	movq   xmm0,xmm2
  005b8:    	divsd  xmm0,xmm3
  005bc:    	movq   xmm3,xmm0
:00028 %14 = %4 + %14                       [Float][Float]
  005c0:    	mov    rdi,QWORD PTR [rbp-0x48]
  005c4: 00 	test   rdi,0x1
  005cb:    	jne    0x3be0d
  005d1: 00 	test   rdi,0x2
  005d8:    	je     0x614
  005de:    	xorps  xmm4,xmm4
  005e1: 00 	movabs rax,0x8000000000000002
  005eb:    	cmp    rdi,rax
  005ee:    	je     0x626
  005f4:    	mov    rax,rdi
  005f7:    	sar    rax,0x3f
  005fb:    	add    rax,0x2
  005ff:    	and    rdi,0xfffffffffffffffc
  00603:    	or     rdi,rax
  00606:    	rol    rdi,0x3d
  0060a:    	movq   xmm4,rdi
  0060f:    	jmp    0x626
  00614:    	call   0xffffa284
  00619:    	test   rax,rax
  0061c:    	je     0x3be0d
  00622:    	movq   xmm4,xmm0
  00626:    	addsd  xmm3,xmm4
:00029 %15 = literal[2.0]
  0062a: 00 	movq   xmm5,QWORD PTR [rip+0x20be]        # 0x26f0
:00030 %15 = %2 / %15                       [Float][Float]
  00632:    	mov    rdi,QWORD PTR [rbp-0x38]
  00636: 00 	test   rdi,0x1
  0063d:    	jne    0x3be2c
  00643: 00 	test   rdi,0x2
  0064a:    	je     0x686
  00650:    	xorps  xmm6,xmm6
  00653: 00 	movabs rax,0x8000000000000002
  0065d:    	cmp    rdi,rax
  00660:    	je     0x698
  00666:    	mov    rax,rdi
  00669:    	sar    rax,0x3f
  0066d:    	add    rax,0x2
  00671:    	and    rdi,0xfffffffffffffffc
  00675:    	or     rdi,rax
  00678:    	rol    rdi,0x3d
  0067c:    	movq   xmm6,rdi
  00681:    	jmp    0x698
  00686:    	call   0xffffa284
  0068b:    	test   rax,rax
  0068e:    	je     0x3be2c
  00694:    	movq   xmm6,xmm0
  00698:    	movq   rax,xmm5
  0069d:    	test   rax,rax
  006a0:    	je     0xffffa270
  006a6:    	movq   xmm0,xmm6
  006aa:    	divsd  xmm0,xmm5
  006ae:    	movq   xmm5,xmm0
:00031 %14 = %14 - %15                      [Float][Float]
  006b2:    	subsd  xmm3,xmm5
:00032 %15 = literal[2.0]
  006b6: 00 	movq   xmm5,QWORD PTR [rip+0x2042]        # 0x2700
:00033 %15 = %2 / %15                       [Float][Float]
  006be:    	movq   rax,xmm5
  006c3:    	test   rax,rax
  006c6:    	je     0xffffa270
  006cc:    	movq   xmm0,xmm6
  006d0:    	divsd  xmm0,xmm5
  006d4:    	movq   xmm5,xmm0
:00034 %8 = %14 / %15                       [Float][Float]
  006d8:    	movq   xmm7,xmm3
  006dc:    	movq   rax,xmm5
  006e1:    	test   rax,rax
  006e4:    	je     0xffffa270
  006ea:    	divsd  xmm7,xmm5
:00035 %14 = dynvar(4, %5)
  006ee:    	mov    rax,QWORD PTR [rbp-0x10]
  006f2:    	mov    rax,QWORD PTR [rax]
  006f5:    	mov    rax,QWORD PTR [rax]
  006f8:    	mov    rax,QWORD PTR [rax]
  006fb:    	lea    rax,[rax+0x10]
  006ff:    	mov    rax,QWORD PTR [rax-0x50]
  00703: ff 	mov    QWORD PTR [rbp-0x98],rax
:00036 %14 = %7 / %14                       [Float][Float]
  0070a:    	mov    rdi,QWORD PTR [rbp-0x60]
  0070e: 00 	test   rdi,0x1
  00715:    	jne    0x3be5b
  0071b: 00 	test   rdi,0x2
  00722:    	je     0x75e
  00728:    	xorps  xmm3,xmm3
  0072b: 00 	movabs rax,0x8000000000000002
  00735:    	cmp    rdi,rax
  00738:    	je     0x770
  0073e:    	mov    rax,rdi
  00741:    	sar    rax,0x3f
  00745:    	add    rax,0x2
  00749:    	and    rdi,0xfffffffffffffffc
  0074d:    	or     rdi,rax
  00750:    	rol    rdi,0x3d
  00754:    	movq   xmm3,rdi
  00759:    	jmp    0x770
  0075e:    	call   0xffffa284
  00763:    	test   rax,rax
  00766:    	je     0x3be5b
  0076c:    	movq   xmm3,xmm0
  00770: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00777: 00 	test   rdi,0x1
  0077e:    	jne    0x3be87
  00784: 00 	test   rdi,0x2
  0078b:    	je     0x7c8
  00791:    	xorps  xmm8,xmm8
  00795: 00 	movabs rax,0x8000000000000002
  0079f:    	cmp    rdi,rax
  007a2:    	je     0x7db
  007a8:    	mov    rax,rdi
  007ab:    	sar    rax,0x3f
  007af:    	add    rax,0x2
  007b3:    	and    rdi,0xfffffffffffffffc
  007b7:    	or     rdi,rax
  007ba:    	rol    rdi,0x3d
  007be:    	movq   xmm8,rdi
  007c3:    	jmp    0x7db
  007c8:    	call   0xffffa284
  007cd:    	test   rax,rax
  007d0:    	je     0x3be87
  007d6:    	movq   xmm8,xmm0
  007db:    	movq   rax,xmm8
  007e0:    	test   rax,rax
  007e3:    	je     0xffffa270
  007e9:    	movq   xmm0,xmm3
  007ed:    	divsd  xmm0,xmm8
  007f2:    	movq   xmm8,xmm0
:00037 %14 = %5 + %14                       [Float][Float]
  007f7:    	mov    rdi,QWORD PTR [rbp-0x50]
  007fb: 00 	test   rdi,0x1
  00802:    	jne    0x3beb3
  00808: 00 	test   rdi,0x2
  0080f:    	je     0x84c
  00815:    	xorps  xmm9,xmm9
  00819: 00 	movabs rax,0x8000000000000002
  00823:    	cmp    rdi,rax
  00826:    	je     0x85f
  0082c:    	mov    rax,rdi
  0082f:    	sar    rax,0x3f
  00833:    	add    rax,0x2
  00837:    	and    rdi,0xfffffffffffffffc
  0083b:    	or     rdi,rax
  0083e:    	rol    rdi,0x3d
  00842:    	movq   xmm9,rdi
  00847:    	jmp    0x85f
  0084c:    	call   0xffffa284
  00851:    	test   rax,rax
  00854:    	je     0x3beb3
  0085a:    	movq   xmm9,xmm0
  0085f:    	addsd  xmm8,xmm9
:00038 %15 = literal[2.0]
  00864: 00 	movq   xmm5,QWORD PTR [rip+0x1ea4]        # 0x2710
:00039 %15 = %3 / %15                       [Float][Float]
  0086c:    	mov    rdi,QWORD PTR [rbp-0x40]
  00870: 00 	test   rdi,0x1
  00877:    	jne    0x3bef0
  0087d: 00 	test   rdi,0x2
  00884:    	je     0x8c1
  0088a:    	xorps  xmm10,xmm10
  0088e: 00 	movabs rax,0x8000000000000002
  00898:    	cmp    rdi,rax
  0089b:    	je     0x8d4
  008a1:    	mov    rax,rdi
  008a4:    	sar    rax,0x3f
  008a8:    	add    rax,0x2
  008ac:    	and    rdi,0xfffffffffffffffc
  008b0:    	or     rdi,rax
  008b3:    	rol    rdi,0x3d
  008b7:    	movq   xmm10,rdi
  008bc:    	jmp    0x8d4
  008c1:    	call   0xffffa284
  008c6:    	test   rax,rax
  008c9:    	je     0x3bef0
  008cf:    	movq   xmm10,xmm0
  008d4:    	movq   rax,xmm5
  008d9:    	test   rax,rax
  008dc:    	je     0xffffa270
  008e2:    	movq   xmm0,xmm10
  008e7:    	divsd  xmm0,xmm5
  008eb:    	movq   xmm5,xmm0
:00040 %14 = %14 - %15                      [Float][Float]
  008ef:    	subsd  xmm8,xmm5
:00041 %14 = neg %14                        [Float]
  008f4: 00 	xorps  xmm8,XMMWORD PTR [rip+0x1e24]        # 0x2720
:00042 %15 = literal[2.0]
  008fc: 00 	movq   xmm5,QWORD PTR [rip+0x1e2c]        # 0x2730
:00043 %15 = %3 / %15                       [Float][Float]
  00904:    	movq   rax,xmm5
  00909:    	test   rax,rax
  0090c:    	je     0xffffa270
  00912:    	movq   xmm0,xmm10
  00917:    	divsd  xmm0,xmm5
  0091b:    	movq   xmm5,xmm0
:00044 %9 = %14 / %15                       [Float][Float]
  0091f:    	movq   xmm11,xmm8
  00924:    	movq   rax,xmm5
  00929:    	test   rax,rax
  0092c:    	je     0xffffa270
  00932:    	divsd  xmm11,xmm5
:00045 %15 = const[Vec]                     [Vec]
  00937: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc2f2]        # 0xffffcc30
  0093e: 00 	cmp    rax,QWORD PTR [rip+0x1e0b]        # 0x2750
  00945:    	jne    0x3bf2d
  0094b: 00 	mov    rax,QWORD PTR [rip+0x1dee]        # 0x2740
  00952: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00046 %16 = %8
:00047 %17 = %9
:00048 %18 = literal[-1.0]
  00959: 00 	movq   xmm5,QWORD PTR [rip+0x1dff]        # 0x2760
:00049 %14 = %15.call new(%16; 3)           [#<Class:Vec>]
:00050 
  00961:    	movq   xmm0,xmm7
  00965:    	call   0xffffa377
  0096a: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00971:    	movq   xmm0,xmm11
  00976:    	call   0xffffa377
  0097b: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00982:    	movq   xmm0,xmm5
  00986:    	call   0xffffa377
  0098b: ff 	mov    QWORD PTR [rbp-0xb8],rax
  00992: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00999: 00 	test   rdi,0x7
  009a0:    	jne    0x3bfed
  009a6:    	cmp    DWORD PTR [rdi+0x4],0x26
  009aa:    	jne    0x3bfed
  009b0: 26 	cmp    DWORD PTR [rip+0xffffffffffffc271],0x26        # 0xffffcc28
  009b7:    	jne    0x3bfed
  009bd: 00 	mov    r9,0x0
  009c4:    	sub    rsp,0x50
  009c8:    	movq   QWORD PTR [rsp],xmm2
  009cd:    	movq   QWORD PTR [rsp+0x8],xmm3
  009d3:    	movq   QWORD PTR [rsp+0x10],xmm4
  009d9:    	movq   QWORD PTR [rsp+0x18],xmm5
  009df:    	movq   QWORD PTR [rsp+0x20],xmm6
  009e5:    	movq   QWORD PTR [rsp+0x28],xmm7
  009eb: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  009f2: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  009f9: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00a00:    	mov    rdx,rdi
  00a03:    	mov    rax,QWORD PTR [rbx]
  00a06:    	lea    rdi,[rsp-0x18]
  00a0b:    	mov    QWORD PTR [rdi],rax
  00a0e:    	mov    QWORD PTR [rbx],rdi
  00a11: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a1a:    	mov    QWORD PTR [rsp-0x38],rcx
  00a1f: ff 	lea    rcx,[rbp-0xa8]
  00a26: 00 	mov    r8,0x3
  00a2d:    	call   0x3c017
  00a32:    	lea    rdi,[rbp-0x8]
  00a36:    	mov    QWORD PTR [rbx],rdi
  00a39:    	movq   xmm2,QWORD PTR [rsp]
  00a3e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a44:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a4a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a50:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00a56:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00a5c: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00a63: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00a6a: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00a71:    	add    rsp,0x50
  00a75: 76 	movabs r13,0x5576cd68cba0
  00a7f:    	test   rax,rax
  00a82:    	je     0xffffa24b
  00a88: ff 	mov    QWORD PTR [rbp-0x98],rax
:00052 %10 = %14.call vnormalize()          [Vec]
:00053 
  00a8f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00a96: 00 	test   rdi,0x7
  00a9d:    	jne    0x3c049
  00aa3:    	cmp    DWORD PTR [rdi+0x4],0x25
  00aa7:    	jne    0x3c049
  00aad: 26 	cmp    DWORD PTR [rip+0xffffffffffffc174],0x26        # 0xffffcc28
  00ab4:    	jne    0x3c049
  00aba:    	sub    rsp,0x50
  00abe:    	movq   QWORD PTR [rsp],xmm2
  00ac3:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ac9:    	movq   QWORD PTR [rsp+0x10],xmm4
  00acf:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ad5:    	movq   QWORD PTR [rsp+0x20],xmm6
  00adb:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ae1: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00ae8: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  00aef: 40 	movq   QWORD PTR [rsp+0x40],xmm11
  00af6:    	mov    rax,QWORD PTR [rbx]
  00af9:    	lea    rdi,[rsp-0x18]
  00afe:    	mov    QWORD PTR [rdi],rax
  00b01:    	mov    QWORD PTR [rbx],rdi
  00b04: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b0d:    	mov    QWORD PTR [rsp-0x38],rcx
  00b12: ff 	mov    rax,QWORD PTR [rbp-0x98]
  00b19:    	mov    QWORD PTR [rsp-0x38],rax
  00b1e: 00 	mov    rdi,0x0
  00b25: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b2e: 07 	movabs rax,0x70000003d
  00b38:    	mov    QWORD PTR [rsp-0x28],rax
  00b3d: 76 	movabs r13,0x5576cd6a7f70
  00b47:    	call   0xffffd4fb
  00b4c:    	lea    rdi,[rbp-0x8]
  00b50:    	mov    QWORD PTR [rbx],rdi
  00b53:    	movq   xmm2,QWORD PTR [rsp]
  00b58:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b5e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b64:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b6a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b70:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00b76: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00b7d: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  00b84: 40 	movq   xmm11,QWORD PTR [rsp+0x40]
  00b8b:    	add    rsp,0x50
  00b8f: 76 	movabs r13,0x5576cd68cbd0
  00b99:    	test   rax,rax
  00b9c:    	je     0xffffa24b
  00ba2:    	mov    QWORD PTR [rbp-0x78],rax
:00055 %14 = const[Ray]                     [Ray]
  00ba6: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc083]        # 0xffffcc30
  00bad: 00 	cmp    rax,QWORD PTR [rip+0x1bcc]        # 0x2780
  00bb4:    	jne    0x3c073
  00bba: 00 	mov    rax,QWORD PTR [rip+0x1baf]        # 0x2770
  00bc1: ff 	mov    QWORD PTR [rbp-0x98],rax
:00056 %16 = const[Vec]                     [Vec]
  00bc8: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffc061]        # 0xffffcc30
  00bcf: 00 	cmp    rax,QWORD PTR [rip+0x1bca]        # 0x27a0
  00bd6:    	jne    0x3c131
  00bdc: 00 	mov    rax,QWORD PTR [rip+0x1bad]        # 0x2790
  00be3: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00057 %17 = literal[0.0]
  00bea: 1b 	movq   xmm8,QWORD PTR [rip+0x1bbd]        # 0x27b0
:00058 %18 = literal[0.0]
  00bf3: 00 	movq   xmm5,QWORD PTR [rip+0x1bc5]        # 0x27c0
:00059 %19 = literal[0.0]
  00bfb: 1b 	movq   xmm12,QWORD PTR [rip+0x1bcc]        # 0x27d0
:00060 %15 = %16.call new(%17; 3)           [#<Class:Vec>]
:00061 
  00c04:    	movq   xmm0,xmm8
  00c09:    	call   0xffffa377
  00c0e: ff 	mov    QWORD PTR [rbp-0xb0],rax
  00c15:    	movq   xmm0,xmm5
  00c19:    	call   0xffffa377
  00c1e: ff 	mov    QWORD PTR [rbp-0xb8],rax
  00c25:    	movq   xmm0,xmm12
  00c2a:    	call   0xffffa377
  00c2f: ff 	mov    QWORD PTR [rbp-0xc0],rax
  00c36: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  00c3d: 00 	test   rdi,0x7
  00c44:    	jne    0x3c1ef
  00c4a:    	cmp    DWORD PTR [rdi+0x4],0x26
  00c4e:    	jne    0x3c1ef
  00c54: 26 	cmp    DWORD PTR [rip+0xffffffffffffbfcd],0x26        # 0xffffcc28
  00c5b:    	jne    0x3c1ef
  00c61: 00 	mov    r9,0x0
  00c68:    	sub    rsp,0x60
  00c6c:    	movq   QWORD PTR [rsp],xmm2
  00c71:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c77:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c7d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c83:    	movq   QWORD PTR [rsp+0x20],xmm6
  00c89:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c8f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00c96: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00c9d: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00ca4: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00cab: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00cb2:    	mov    rdx,rdi
  00cb5:    	mov    rax,QWORD PTR [rbx]
  00cb8:    	lea    rdi,[rsp-0x18]
  00cbd:    	mov    QWORD PTR [rdi],rax
  00cc0:    	mov    QWORD PTR [rbx],rdi
  00cc3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00ccc:    	mov    QWORD PTR [rsp-0x38],rcx
  00cd1: ff 	lea    rcx,[rbp-0xb0]
  00cd8: 00 	mov    r8,0x3
  00cdf:    	call   0x3c219
  00ce4:    	lea    rdi,[rbp-0x8]
  00ce8:    	mov    QWORD PTR [rbx],rdi
  00ceb:    	movq   xmm2,QWORD PTR [rsp]
  00cf0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cf6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cfc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d02:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00d08:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00d0e: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00d15: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00d1c: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00d23: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00d2a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00d31:    	add    rsp,0x60
  00d35: 76 	movabs r13,0x5576cd68cc50
  00d3f:    	test   rax,rax
  00d42:    	je     0xffffa24b
  00d48: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00063 %16 = %10
  00d4f:    	mov    rax,QWORD PTR [rbp-0x78]
  00d53: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00064 %11 = %14.call new(%15; 2)           [#<Class:Ray>]
:00065 
  00d5a: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00d61: 00 	test   rdi,0x7
  00d68:    	jne    0x3c24b
  00d6e:    	cmp    DWORD PTR [rdi+0x4],0x2c
  00d72:    	jne    0x3c24b
  00d78: 26 	cmp    DWORD PTR [rip+0xffffffffffffbea9],0x26        # 0xffffcc28
  00d7f:    	jne    0x3c24b
  00d85: 00 	mov    r9,0x0
  00d8c:    	sub    rsp,0x60
  00d90:    	movq   QWORD PTR [rsp],xmm2
  00d95:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d9b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00da1:    	movq   QWORD PTR [rsp+0x18],xmm5
  00da7:    	movq   QWORD PTR [rsp+0x20],xmm6
  00dad:    	movq   QWORD PTR [rsp+0x28],xmm7
  00db3: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00dba: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00dc1: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00dc8: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00dcf: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00dd6:    	mov    rdx,rdi
  00dd9:    	mov    rax,QWORD PTR [rbx]
  00ddc:    	lea    rdi,[rsp-0x18]
  00de1:    	mov    QWORD PTR [rdi],rax
  00de4:    	mov    QWORD PTR [rbx],rdi
  00de7: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00df0:    	mov    QWORD PTR [rsp-0x38],rcx
  00df5: ff 	lea    rcx,[rbp-0xa0]
  00dfc: 00 	mov    r8,0x2
  00e03:    	call   0x3c275
  00e08:    	lea    rdi,[rbp-0x8]
  00e0c:    	mov    QWORD PTR [rbx],rdi
  00e0f:    	movq   xmm2,QWORD PTR [rsp]
  00e14:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00e1a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00e20:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00e26:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00e2c:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00e32: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00e39: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00e40: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00e47: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00e4e: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00e55:    	add    rsp,0x60
  00e59: 76 	movabs r13,0x5576cd68cc90
  00e63:    	test   rax,rax
  00e66:    	je     0xffffa24b
  00e6c:    	mov    QWORD PTR [rbp-0x80],rax
:00067 %14 = const[Isect]                   [Isect]
  00e70: ff 	mov    rax,QWORD PTR [rip+0xffffffffffffbdb9]        # 0xffffcc30
  00e77: 00 	cmp    rax,QWORD PTR [rip+0x1972]        # 0x27f0
  00e7e:    	jne    0x3c2a7
  00e84: 00 	mov    rax,QWORD PTR [rip+0x1955]        # 0x27e0
  00e8b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00068 %12 = %14.call new()                 [#<Class:Isect>]
:00069 
  00e92: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00e99: 00 	test   rdi,0x7
  00ea0:    	jne    0x3c381
  00ea6:    	cmp    DWORD PTR [rdi+0x4],0x2e
  00eaa:    	jne    0x3c381
  00eb0: 26 	cmp    DWORD PTR [rip+0xffffffffffffbd71],0x26        # 0xffffcc28
  00eb7:    	jne    0x3c381
  00ebd: 00 	mov    r9,0x0
  00ec4:    	sub    rsp,0x60
  00ec8:    	movq   QWORD PTR [rsp],xmm2
  00ecd:    	movq   QWORD PTR [rsp+0x8],xmm3
  00ed3:    	movq   QWORD PTR [rsp+0x10],xmm4
  00ed9:    	movq   QWORD PTR [rsp+0x18],xmm5
  00edf:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ee5:    	movq   QWORD PTR [rsp+0x28],xmm7
  00eeb: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  00ef2: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  00ef9: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  00f00: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  00f07: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  00f0e:    	mov    rdx,rdi
  00f11:    	mov    rax,QWORD PTR [rbx]
  00f14:    	lea    rdi,[rsp-0x18]
  00f19:    	mov    QWORD PTR [rdi],rax
  00f1c:    	mov    QWORD PTR [rbx],rdi
  00f1f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f28:    	mov    QWORD PTR [rsp-0x38],rcx
  00f2d: ff 	lea    rcx,[rbp-0xa0]
  00f34: 00 	mov    r8,0x0
  00f3b:    	call   0x3c3ab
  00f40:    	lea    rdi,[rbp-0x8]
  00f44:    	mov    QWORD PTR [rbx],rdi
  00f47:    	movq   xmm2,QWORD PTR [rsp]
  00f4c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f52:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f58:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f5e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f64:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00f6a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  00f71: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  00f78: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  00f7f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  00f86: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  00f8d:    	add    rsp,0x60
  00f91: 76 	movabs r13,0x5576cd68ccd0
  00f9b:    	test   rax,rax
  00f9e:    	je     0xffffa24b
  00fa4: ff 	mov    QWORD PTR [rbp-0x88],rax
:00071 %14 = @spheres: Scene[IvarId(0)]
  00fab:    	mov    rdi,QWORD PTR [rbp-0x28]
  00faf:    	xor    rax,rax
  00fb2:    	mov    ax,WORD PTR [rdi+0x2]
  00fb6:    	cmp    rax,0x3
  00fba:    	jne    0x3c3dd
  00fc0:    	mov    rax,QWORD PTR [rdi+0x10]
  00fc4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00072 %15 = 0: i32
  00fcb: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00073 %14 = %14.[%15]
  00fd6:    	sub    rsp,0x60
  00fda:    	movq   QWORD PTR [rsp],xmm2
  00fdf:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fe5:    	movq   QWORD PTR [rsp+0x10],xmm4
  00feb:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ff1:    	movq   QWORD PTR [rsp+0x20],xmm6
  00ff7:    	movq   QWORD PTR [rsp+0x28],xmm7
  00ffd: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01004: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0100b: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01012: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01019: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01020: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01027: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  0102e:    	mov    rdi,rbx
  01031:    	mov    rsi,r12
  01034: 76 	movabs rax,0x5576cccd60e0
  0103e:    	call   rax
  01040:    	movq   xmm2,QWORD PTR [rsp]
  01045:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0104b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01051:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01057:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0105d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01063: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0106a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01071: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01078: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0107f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01086:    	add    rsp,0x60
  0108a: 76 	movabs r13,0x5576cd68cd10
  01094:    	test   rax,rax
  01097:    	je     0xffffa24b
  0109d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00074 %15 = %11
  010a4:    	mov    rax,QWORD PTR [rbp-0x80]
  010a8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00075 %16 = %12
  010af: ff 	mov    rax,QWORD PTR [rbp-0x88]
  010b6: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00076 _ = %14.call intersect(%15; 2)       [Sphere]
:00077 
  010bd: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  010c4: 00 	test   rdi,0x7
  010cb:    	jne    0x3c487
  010d1:    	cmp    DWORD PTR [rdi+0x4],0x27
  010d5:    	jne    0x3c487
  010db: 26 	cmp    DWORD PTR [rip+0xffffffffffffbb46],0x26        # 0xffffcc28
  010e2:    	jne    0x3c487
  010e8:    	sub    rsp,0x60
  010ec:    	movq   QWORD PTR [rsp],xmm2
  010f1:    	movq   QWORD PTR [rsp+0x8],xmm3
  010f7:    	movq   QWORD PTR [rsp+0x10],xmm4
  010fd:    	movq   QWORD PTR [rsp+0x18],xmm5
  01103:    	movq   QWORD PTR [rsp+0x20],xmm6
  01109:    	movq   QWORD PTR [rsp+0x28],xmm7
  0110f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01116: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0111d: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01124: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0112b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01132:    	mov    rax,QWORD PTR [rbx]
  01135:    	lea    rdi,[rsp-0x18]
  0113a:    	mov    QWORD PTR [rdi],rax
  0113d:    	mov    QWORD PTR [rbx],rdi
  01140: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01149:    	mov    QWORD PTR [rsp-0x38],rcx
  0114e: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01155:    	mov    QWORD PTR [rsp-0x38],rax
  0115a: 00 	mov    rdi,0x2
  01161: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01168:    	mov    QWORD PTR [rsp-0x40],rax
  0116d: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01174:    	mov    QWORD PTR [rsp-0x48],rax
  01179: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01182: 10 	movabs rax,0x100000003f
  0118c:    	mov    QWORD PTR [rsp-0x28],rax
  01191: 76 	movabs r13,0x5576cd697c40
  0119b:    	call   0xffffd803
  011a0:    	lea    rdi,[rbp-0x8]
  011a4:    	mov    QWORD PTR [rbx],rdi
  011a7:    	movq   xmm2,QWORD PTR [rsp]
  011ac:    	movq   xmm3,QWORD PTR [rsp+0x8]
  011b2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  011b8:    	movq   xmm5,QWORD PTR [rsp+0x18]
  011be:    	movq   xmm6,QWORD PTR [rsp+0x20]
  011c4:    	movq   xmm7,QWORD PTR [rsp+0x28]
  011ca: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  011d1: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  011d8: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  011df: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  011e6: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  011ed:    	add    rsp,0x60
  011f1: 76 	movabs r13,0x5576cd68cd50
  011fb:    	test   rax,rax
  011fe:    	je     0xffffa24b
:00079 %14 = @spheres: Scene[IvarId(0)]
  01204:    	mov    rdi,QWORD PTR [rbp-0x28]
  01208:    	xor    rax,rax
  0120b:    	mov    ax,WORD PTR [rdi+0x2]
  0120f:    	cmp    rax,0x3
  01213:    	jne    0x3c4b1
  01219:    	mov    rax,QWORD PTR [rdi+0x10]
  0121d: ff 	mov    QWORD PTR [rbp-0x98],rax
:00080 %15 = 1: i32
  01224: ff 	mov    QWORD PTR [rbp-0xa0],0x3
:00081 %14 = %14.[%15]
  0122f:    	sub    rsp,0x60
  01233:    	movq   QWORD PTR [rsp],xmm2
  01238:    	movq   QWORD PTR [rsp+0x8],xmm3
  0123e:    	movq   QWORD PTR [rsp+0x10],xmm4
  01244:    	movq   QWORD PTR [rsp+0x18],xmm5
  0124a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01250:    	movq   QWORD PTR [rsp+0x28],xmm7
  01256: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0125d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01264: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0126b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01272: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01279: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  01280: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  01287:    	mov    rdi,rbx
  0128a:    	mov    rsi,r12
  0128d: 76 	movabs rax,0x5576cccd60e0
  01297:    	call   rax
  01299:    	movq   xmm2,QWORD PTR [rsp]
  0129e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  012a4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  012aa:    	movq   xmm5,QWORD PTR [rsp+0x18]
  012b0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  012b6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  012bc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  012c3: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  012ca: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  012d1: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  012d8: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  012df:    	add    rsp,0x60
  012e3: 76 	movabs r13,0x5576cd68cd90
  012ed:    	test   rax,rax
  012f0:    	je     0xffffa24b
  012f6: ff 	mov    QWORD PTR [rbp-0x98],rax
:00082 %15 = %11
  012fd:    	mov    rax,QWORD PTR [rbp-0x80]
  01301: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00083 %16 = %12
  01308: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0130f: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00084 _ = %14.call intersect(%15; 2)       [Sphere]
:00085 
  01316: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0131d: 00 	test   rdi,0x7
  01324:    	jne    0x3c55b
  0132a:    	cmp    DWORD PTR [rdi+0x4],0x27
  0132e:    	jne    0x3c55b
  01334: 26 	cmp    DWORD PTR [rip+0xffffffffffffb8ed],0x26        # 0xffffcc28
  0133b:    	jne    0x3c55b
  01341:    	sub    rsp,0x60
  01345:    	movq   QWORD PTR [rsp],xmm2
  0134a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01350:    	movq   QWORD PTR [rsp+0x10],xmm4
  01356:    	movq   QWORD PTR [rsp+0x18],xmm5
  0135c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01362:    	movq   QWORD PTR [rsp+0x28],xmm7
  01368: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0136f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01376: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0137d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01384: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  0138b:    	mov    rax,QWORD PTR [rbx]
  0138e:    	lea    rdi,[rsp-0x18]
  01393:    	mov    QWORD PTR [rdi],rax
  01396:    	mov    QWORD PTR [rbx],rdi
  01399: 00 	mov    QWORD PTR [rsp-0x20],0x0
  013a2:    	mov    QWORD PTR [rsp-0x38],rcx
  013a7: ff 	mov    rax,QWORD PTR [rbp-0x98]
  013ae:    	mov    QWORD PTR [rsp-0x38],rax
  013b3: 00 	mov    rdi,0x2
  013ba: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  013c1:    	mov    QWORD PTR [rsp-0x40],rax
  013c6: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  013cd:    	mov    QWORD PTR [rsp-0x48],rax
  013d2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  013db: 10 	movabs rax,0x100000003f
  013e5:    	mov    QWORD PTR [rsp-0x28],rax
  013ea: 76 	movabs r13,0x5576cd697c40
  013f4:    	call   0xffffd803
  013f9:    	lea    rdi,[rbp-0x8]
  013fd:    	mov    QWORD PTR [rbx],rdi
  01400:    	movq   xmm2,QWORD PTR [rsp]
  01405:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0140b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01411:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01417:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0141d:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01423: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0142a: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01431: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01438: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  0143f: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01446:    	add    rsp,0x60
  0144a: 76 	movabs r13,0x5576cd68cdd0
  01454:    	test   rax,rax
  01457:    	je     0xffffa24b
:00087 %14 = @spheres: Scene[IvarId(0)]
  0145d:    	mov    rdi,QWORD PTR [rbp-0x28]
  01461:    	xor    rax,rax
  01464:    	mov    ax,WORD PTR [rdi+0x2]
  01468:    	cmp    rax,0x3
  0146c:    	jne    0x3c585
  01472:    	mov    rax,QWORD PTR [rdi+0x10]
  01476: ff 	mov    QWORD PTR [rbp-0x98],rax
:00088 %15 = 2: i32
  0147d: ff 	mov    QWORD PTR [rbp-0xa0],0x5
:00089 %14 = %14.[%15]
  01488:    	sub    rsp,0x60
  0148c:    	movq   QWORD PTR [rsp],xmm2
  01491:    	movq   QWORD PTR [rsp+0x8],xmm3
  01497:    	movq   QWORD PTR [rsp+0x10],xmm4
  0149d:    	movq   QWORD PTR [rsp+0x18],xmm5
  014a3:    	movq   QWORD PTR [rsp+0x20],xmm6
  014a9:    	movq   QWORD PTR [rsp+0x28],xmm7
  014af: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  014b6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  014bd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  014c4: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  014cb: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  014d2: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  014d9: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  014e0:    	mov    rdi,rbx
  014e3:    	mov    rsi,r12
  014e6: 76 	movabs rax,0x5576cccd60e0
  014f0:    	call   rax
  014f2:    	movq   xmm2,QWORD PTR [rsp]
  014f7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014fd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01503:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01509:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0150f:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01515: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  0151c: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01523: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0152a: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01531: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01538:    	add    rsp,0x60
  0153c: 76 	movabs r13,0x5576cd68ce10
  01546:    	test   rax,rax
  01549:    	je     0xffffa24b
  0154f: ff 	mov    QWORD PTR [rbp-0x98],rax
:00090 %15 = %11
  01556:    	mov    rax,QWORD PTR [rbp-0x80]
  0155a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00091 %16 = %12
  01561: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01568: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00092 _ = %14.call intersect(%15; 2)       [Sphere]
:00093 
  0156f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01576: 00 	test   rdi,0x7
  0157d:    	jne    0x3c62f
  01583:    	cmp    DWORD PTR [rdi+0x4],0x27
  01587:    	jne    0x3c62f
  0158d: 26 	cmp    DWORD PTR [rip+0xffffffffffffb694],0x26        # 0xffffcc28
  01594:    	jne    0x3c62f
  0159a:    	sub    rsp,0x60
  0159e:    	movq   QWORD PTR [rsp],xmm2
  015a3:    	movq   QWORD PTR [rsp+0x8],xmm3
  015a9:    	movq   QWORD PTR [rsp+0x10],xmm4
  015af:    	movq   QWORD PTR [rsp+0x18],xmm5
  015b5:    	movq   QWORD PTR [rsp+0x20],xmm6
  015bb:    	movq   QWORD PTR [rsp+0x28],xmm7
  015c1: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  015c8: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  015cf: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  015d6: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  015dd: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  015e4:    	mov    rax,QWORD PTR [rbx]
  015e7:    	lea    rdi,[rsp-0x18]
  015ec:    	mov    QWORD PTR [rdi],rax
  015ef:    	mov    QWORD PTR [rbx],rdi
  015f2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  015fb:    	mov    QWORD PTR [rsp-0x38],rcx
  01600: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01607:    	mov    QWORD PTR [rsp-0x38],rax
  0160c: 00 	mov    rdi,0x2
  01613: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0161a:    	mov    QWORD PTR [rsp-0x40],rax
  0161f: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01626:    	mov    QWORD PTR [rsp-0x48],rax
  0162b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01634: 10 	movabs rax,0x100000003f
  0163e:    	mov    QWORD PTR [rsp-0x28],rax
  01643: 76 	movabs r13,0x5576cd697c40
  0164d:    	call   0xffffd803
  01652:    	lea    rdi,[rbp-0x8]
  01656:    	mov    QWORD PTR [rbx],rdi
  01659:    	movq   xmm2,QWORD PTR [rsp]
  0165e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01664:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0166a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01670:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01676:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0167c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01683: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0168a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01691: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01698: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0169f:    	add    rsp,0x60
  016a3: 76 	movabs r13,0x5576cd68ce50
  016ad:    	test   rax,rax
  016b0:    	je     0xffffa24b
:00095 %14 = @plane: Scene[IvarId(1)]
  016b6:    	mov    rdi,QWORD PTR [rbp-0x28]
  016ba:    	xor    rax,rax
  016bd:    	mov    ax,WORD PTR [rdi+0x2]
  016c1:    	cmp    rax,0x3
  016c5:    	jne    0x3c659
  016cb:    	mov    rax,QWORD PTR [rdi+0x18]
  016cf: ff 	mov    QWORD PTR [rbp-0x98],rax
:00096 %15 = %11
  016d6:    	mov    rax,QWORD PTR [rbp-0x80]
  016da: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00097 %16 = %12
  016e1: ff 	mov    rax,QWORD PTR [rbp-0x88]
  016e8: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00098 _ = %14.call intersect(%15; 2)       [Plane]
:00099 
  016ef: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  016f6: 00 	test   rdi,0x7
  016fd:    	jne    0x3c703
  01703:    	cmp    DWORD PTR [rdi+0x4],0x29
  01707:    	jne    0x3c703
  0170d: 26 	cmp    DWORD PTR [rip+0xffffffffffffb514],0x26        # 0xffffcc28
  01714:    	jne    0x3c703
  0171a:    	sub    rsp,0x60
  0171e:    	movq   QWORD PTR [rsp],xmm2
  01723:    	movq   QWORD PTR [rsp+0x8],xmm3
  01729:    	movq   QWORD PTR [rsp+0x10],xmm4
  0172f:    	movq   QWORD PTR [rsp+0x18],xmm5
  01735:    	movq   QWORD PTR [rsp+0x20],xmm6
  0173b:    	movq   QWORD PTR [rsp+0x28],xmm7
  01741: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01748: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0174f: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01756: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0175d: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01764:    	mov    rax,QWORD PTR [rbx]
  01767:    	lea    rdi,[rsp-0x18]
  0176c:    	mov    QWORD PTR [rdi],rax
  0176f:    	mov    QWORD PTR [rbx],rdi
  01772: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0177b:    	mov    QWORD PTR [rsp-0x38],rcx
  01780: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01787:    	mov    QWORD PTR [rsp-0x38],rax
  0178c: 00 	mov    rdi,0x2
  01793: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  0179a:    	mov    QWORD PTR [rsp-0x40],rax
  0179f: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  017a6:    	mov    QWORD PTR [rsp-0x48],rax
  017ab: 00 	mov    QWORD PTR [rsp-0x30],0x0
  017b4: 0e 	movabs rax,0xe00000041
  017be:    	mov    QWORD PTR [rsp-0x28],rax
  017c3: 76 	movabs r13,0x5576cd699ae0
  017cd:    	call   0xffffde14
  017d2:    	lea    rdi,[rbp-0x8]
  017d6:    	mov    QWORD PTR [rbx],rdi
  017d9:    	movq   xmm2,QWORD PTR [rsp]
  017de:    	movq   xmm3,QWORD PTR [rsp+0x8]
  017e4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  017ea:    	movq   xmm5,QWORD PTR [rsp+0x18]
  017f0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  017f6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  017fc: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01803: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0180a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01811: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01818: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0181f:    	add    rsp,0x60
  01823: 76 	movabs r13,0x5576cd68ceb0
  0182d:    	test   rax,rax
  01830:    	je     0xffffa24b
:00101 %14 = %12.call hit()                 [Isect]
:00102 
  01836: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0183d: 00 	test   rdi,0x7
  01844:    	jne    0x3c72d
  0184a:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0184e:    	jne    0x3c72d
  01854: 26 	cmp    DWORD PTR [rip+0xffffffffffffb3cd],0x26        # 0xffffcc28
  0185b:    	jne    0x3c72d
  01861:    	mov    esi,DWORD PTR [rip+0xf95]        # 0x27fc
  01867:    	cmp    esi,0xffffffff
  0186a:    	je     0x3c757
  01870:    	xor    rax,rax
  01873:    	mov    ax,WORD PTR [rdi+0x2]
  01877:    	cmp    rax,0x3
  0187b:    	jne    0x1894
  01881:    	cmp    esi,0x6
  01884:    	jge    0x1894
  0188a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0188f:    	jmp    0x1934
  01894:    	sub    rsp,0x60
  01898:    	movq   QWORD PTR [rsp],xmm2
  0189d:    	movq   QWORD PTR [rsp+0x8],xmm3
  018a3:    	movq   QWORD PTR [rsp+0x10],xmm4
  018a9:    	movq   QWORD PTR [rsp+0x18],xmm5
  018af:    	movq   QWORD PTR [rsp+0x20],xmm6
  018b5:    	movq   QWORD PTR [rsp+0x28],xmm7
  018bb: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  018c2: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  018c9: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  018d0: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  018d7: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  018de: 76 	movabs rax,0x5576cccb62a0
  018e8:    	call   rax
  018ea:    	movq   xmm2,QWORD PTR [rsp]
  018ef:    	movq   xmm3,QWORD PTR [rsp+0x8]
  018f5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  018fb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01901:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01907:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0190d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01914: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0191b: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01922: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01929: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01930:    	add    rsp,0x60
  01934: ff 	mov    QWORD PTR [rbp-0x98],rax
:00104 condnotbr %14 =>:00147
  0193b: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01942:    	or     rax,0x10
  01946:    	cmp    rax,0x14
  0194a:    	je     0x26d1
:00105 %14 = %12
  01950: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01957: ff 	mov    QWORD PTR [rbp-0x98],rax
:00106 %13 = %0.call ambient_occlusion(%14; 1) [<INVALID>]
:00107 
  0195e:    	sub    rsp,0x60
  01962:    	movq   QWORD PTR [rsp],xmm2
  01967:    	movq   QWORD PTR [rsp+0x8],xmm3
  0196d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01973:    	movq   QWORD PTR [rsp+0x18],xmm5
  01979:    	movq   QWORD PTR [rsp+0x20],xmm6
  0197f:    	movq   QWORD PTR [rsp+0x28],xmm7
  01985: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0198c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01993: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0199a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  019a1: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  019a8:    	mov    r15d,0x2f
  019ae: 00 	cmp    r15d,DWORD PTR [rip+0xe4f]        # 0x2804
  019b5:    	jne    0x3c814
  019bb:    	mov    eax,DWORD PTR [rip+0xffffffffffffb267]        # 0xffffcc28
  019c1:    	cmp    DWORD PTR [rip+0xe39],eax        # 0x2800
  019c7:    	jne    0x3c814
  019cd:    	mov    rax,QWORD PTR [rbx]
  019d0:    	lea    rdi,[rsp-0x18]
  019d5:    	mov    QWORD PTR [rdi],rax
  019d8:    	mov    QWORD PTR [rbx],rdi
  019db: 00 	mov    QWORD PTR [rsp-0x20],0x0
  019e4:    	mov    QWORD PTR [rsp-0x38],rcx
  019e9:    	mov    rax,QWORD PTR [rbp-0x28]
  019ed:    	mov    QWORD PTR [rsp-0x38],rax
  019f2: 00 	mov    rdi,0x1
  019f9: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01a00:    	mov    QWORD PTR [rsp-0x40],rax
  01a05: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01a0e: 00 	movabs rax,0x0
  01a18:    	mov    QWORD PTR [rsp-0x28],rax
  01a1d: 00 	movabs r13,0x0
  01a27:    	call   0xffffa210
  01a2c:    	lea    rdi,[rbp-0x8]
  01a30:    	mov    QWORD PTR [rbx],rdi
  01a33:    	movq   xmm2,QWORD PTR [rsp]
  01a38:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01a3e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01a44:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01a4a:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01a50:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01a56: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01a5d: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01a64: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01a6b: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01a72: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01a79:    	add    rsp,0x60
  01a7d:    	test   rax,rax
  01a80:    	je     0x3c880
  01a86: ff 	mov    QWORD PTR [rbp-0x90],rax
:00109 %14 = dynvar(2, %2)
  01a8d:    	mov    rax,QWORD PTR [rbp-0x10]
  01a91:    	mov    rax,QWORD PTR [rax]
  01a94:    	lea    rax,[rax+0x10]
  01a98:    	mov    rax,QWORD PTR [rax-0x38]
  01a9c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00110 %16 = dynvar(2, %2)
  01aa3:    	mov    rax,QWORD PTR [rbp-0x10]
  01aa7:    	mov    rax,QWORD PTR [rax]
  01aaa:    	lea    rax,[rax+0x10]
  01aae:    	mov    rax,QWORD PTR [rax-0x38]
  01ab2: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00111 %15 = %16.call x()                   [<INVALID>]
:00112 
  01ab9:    	sub    rsp,0x60
  01abd:    	movq   QWORD PTR [rsp],xmm2
  01ac2:    	movq   QWORD PTR [rsp+0x8],xmm3
  01ac8:    	movq   QWORD PTR [rsp+0x10],xmm4
  01ace:    	movq   QWORD PTR [rsp+0x18],xmm5
  01ad4:    	movq   QWORD PTR [rsp+0x20],xmm6
  01ada:    	movq   QWORD PTR [rsp+0x28],xmm7
  01ae0: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01ae7: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01aee: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01af5: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01afc: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01b03: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01b0a: 76 	movabs rax,0x5576ccd01d00
  01b14:    	call   rax
  01b16:    	mov    r15d,eax
  01b19: 00 	cmp    r15d,DWORD PTR [rip+0xcec]        # 0x280c
  01b20:    	jne    0x3c88f
  01b26:    	mov    eax,DWORD PTR [rip+0xffffffffffffb0fc]        # 0xffffcc28
  01b2c:    	cmp    DWORD PTR [rip+0xcd6],eax        # 0x2808
  01b32:    	jne    0x3c88f
  01b38:    	mov    rax,QWORD PTR [rbx]
  01b3b:    	lea    rdi,[rsp-0x18]
  01b40:    	mov    QWORD PTR [rdi],rax
  01b43:    	mov    QWORD PTR [rbx],rdi
  01b46: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b4f:    	mov    QWORD PTR [rsp-0x38],rcx
  01b54: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01b5b:    	mov    QWORD PTR [rsp-0x38],rax
  01b60: 00 	mov    rdi,0x0
  01b67: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b70: 00 	movabs rax,0x0
  01b7a:    	mov    QWORD PTR [rsp-0x28],rax
  01b7f: 00 	movabs r13,0x0
  01b89:    	call   0xffffa210
  01b8e:    	lea    rdi,[rbp-0x8]
  01b92:    	mov    QWORD PTR [rbx],rdi
  01b95:    	movq   xmm2,QWORD PTR [rsp]
  01b9a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01ba0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01ba6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01bac:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01bb2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01bb8: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01bbf: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01bc6: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01bcd: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01bd4: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01bdb:    	add    rsp,0x60
  01bdf:    	test   rax,rax
  01be2:    	je     0x3c8fe
  01be8: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00114 %16 = %13.call x()                   [<INVALID>]
:00115 
  01bef:    	sub    rsp,0x60
  01bf3:    	movq   QWORD PTR [rsp],xmm2
  01bf8:    	movq   QWORD PTR [rsp+0x8],xmm3
  01bfe:    	movq   QWORD PTR [rsp+0x10],xmm4
  01c04:    	movq   QWORD PTR [rsp+0x18],xmm5
  01c0a:    	movq   QWORD PTR [rsp+0x20],xmm6
  01c10:    	movq   QWORD PTR [rsp+0x28],xmm7
  01c16: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01c1d: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01c24: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01c2b: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01c32: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01c39: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01c40: 76 	movabs rax,0x5576ccd01d00
  01c4a:    	call   rax
  01c4c:    	mov    r15d,eax
  01c4f: 00 	cmp    r15d,DWORD PTR [rip+0xbbe]        # 0x2814
  01c56:    	jne    0x3c90d
  01c5c:    	mov    eax,DWORD PTR [rip+0xffffffffffffafc6]        # 0xffffcc28
  01c62:    	cmp    DWORD PTR [rip+0xba8],eax        # 0x2810
  01c68:    	jne    0x3c90d
  01c6e:    	mov    rax,QWORD PTR [rbx]
  01c71:    	lea    rdi,[rsp-0x18]
  01c76:    	mov    QWORD PTR [rdi],rax
  01c79:    	mov    QWORD PTR [rbx],rdi
  01c7c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01c85:    	mov    QWORD PTR [rsp-0x38],rcx
  01c8a: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01c91:    	mov    QWORD PTR [rsp-0x38],rax
  01c96: 00 	mov    rdi,0x0
  01c9d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01ca6: 00 	movabs rax,0x0
  01cb0:    	mov    QWORD PTR [rsp-0x28],rax
  01cb5: 00 	movabs r13,0x0
  01cbf:    	call   0xffffa210
  01cc4:    	lea    rdi,[rbp-0x8]
  01cc8:    	mov    QWORD PTR [rbx],rdi
  01ccb:    	movq   xmm2,QWORD PTR [rsp]
  01cd0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01cd6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01cdc:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01ce2:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01ce8:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01cee: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01cf5: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01cfc: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01d03: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01d0a: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01d11:    	add    rsp,0x60
  01d15:    	test   rax,rax
  01d18:    	je     0x3c97c
  01d1e: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00117 %15 = %15 + %16                      [Integer][Integer]
  01d25: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01d2c: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  01d33: 00 	test   rdi,0x1
  01d3a:    	je     0x3c98b
  01d40: 00 	test   rsi,0x1
  01d47:    	je     0x3c98b
  01d4d:    	sub    rdi,0x1
  01d51:    	add    rdi,rsi
  01d54:    	jo     0x3c98b
  01d5a: ff 	mov    QWORD PTR [rbp-0xa0],rdi
:00118 _ = %14.call x=(%15; 1)              [<INVALID>]
:00119 
  01d61:    	sub    rsp,0x60
  01d65:    	movq   QWORD PTR [rsp],xmm2
  01d6a:    	movq   QWORD PTR [rsp+0x8],xmm3
  01d70:    	movq   QWORD PTR [rsp+0x10],xmm4
  01d76:    	movq   QWORD PTR [rsp+0x18],xmm5
  01d7c:    	movq   QWORD PTR [rsp+0x20],xmm6
  01d82:    	movq   QWORD PTR [rsp+0x28],xmm7
  01d88: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01d8f: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01d96: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01d9d: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01da4: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01dab: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01db2: 76 	movabs rax,0x5576ccd01d00
  01dbc:    	call   rax
  01dbe:    	mov    r15d,eax
  01dc1: 00 	cmp    r15d,DWORD PTR [rip+0xa54]        # 0x281c
  01dc8:    	jne    0x3c9b5
  01dce:    	mov    eax,DWORD PTR [rip+0xffffffffffffae54]        # 0xffffcc28
  01dd4:    	cmp    DWORD PTR [rip+0xa3e],eax        # 0x2818
  01dda:    	jne    0x3c9b5
  01de0:    	mov    rax,QWORD PTR [rbx]
  01de3:    	lea    rdi,[rsp-0x18]
  01de8:    	mov    QWORD PTR [rdi],rax
  01deb:    	mov    QWORD PTR [rbx],rdi
  01dee: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01df7:    	mov    QWORD PTR [rsp-0x38],rcx
  01dfc: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01e03:    	mov    QWORD PTR [rsp-0x38],rax
  01e08: 00 	mov    rdi,0x1
  01e0f: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01e16:    	mov    QWORD PTR [rsp-0x40],rax
  01e1b: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01e24: 00 	movabs rax,0x0
  01e2e:    	mov    QWORD PTR [rsp-0x28],rax
  01e33: 00 	movabs r13,0x0
  01e3d:    	call   0xffffa210
  01e42:    	lea    rdi,[rbp-0x8]
  01e46:    	mov    QWORD PTR [rbx],rdi
  01e49:    	movq   xmm2,QWORD PTR [rsp]
  01e4e:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01e54:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01e5a:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01e60:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01e66:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01e6c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01e73: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01e7a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01e81: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01e88: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01e8f:    	add    rsp,0x60
  01e93:    	test   rax,rax
  01e96:    	je     0x3ca24
:00121 %14 = dynvar(2, %2)
  01e9c:    	mov    rax,QWORD PTR [rbp-0x10]
  01ea0:    	mov    rax,QWORD PTR [rax]
  01ea3:    	lea    rax,[rax+0x10]
  01ea7:    	mov    rax,QWORD PTR [rax-0x38]
  01eab: ff 	mov    QWORD PTR [rbp-0x98],rax
:00122 %16 = dynvar(2, %2)
  01eb2:    	mov    rax,QWORD PTR [rbp-0x10]
  01eb6:    	mov    rax,QWORD PTR [rax]
  01eb9:    	lea    rax,[rax+0x10]
  01ebd:    	mov    rax,QWORD PTR [rax-0x38]
  01ec1: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00123 %15 = %16.call y()                   [<INVALID>]
:00124 
  01ec8:    	sub    rsp,0x60
  01ecc:    	movq   QWORD PTR [rsp],xmm2
  01ed1:    	movq   QWORD PTR [rsp+0x8],xmm3
  01ed7:    	movq   QWORD PTR [rsp+0x10],xmm4
  01edd:    	movq   QWORD PTR [rsp+0x18],xmm5
  01ee3:    	movq   QWORD PTR [rsp+0x20],xmm6
  01ee9:    	movq   QWORD PTR [rsp+0x28],xmm7
  01eef: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01ef6: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  01efd: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  01f04: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  01f0b: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  01f12: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  01f19: 76 	movabs rax,0x5576ccd01d00
  01f23:    	call   rax
  01f25:    	mov    r15d,eax
  01f28: 00 	cmp    r15d,DWORD PTR [rip+0x8f5]        # 0x2824
  01f2f:    	jne    0x3ca33
  01f35:    	mov    eax,DWORD PTR [rip+0xffffffffffffaced]        # 0xffffcc28
  01f3b:    	cmp    DWORD PTR [rip+0x8df],eax        # 0x2820
  01f41:    	jne    0x3ca33
  01f47:    	mov    rax,QWORD PTR [rbx]
  01f4a:    	lea    rdi,[rsp-0x18]
  01f4f:    	mov    QWORD PTR [rdi],rax
  01f52:    	mov    QWORD PTR [rbx],rdi
  01f55: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01f5e:    	mov    QWORD PTR [rsp-0x38],rcx
  01f63: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  01f6a:    	mov    QWORD PTR [rsp-0x38],rax
  01f6f: 00 	mov    rdi,0x0
  01f76: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01f7f: 00 	movabs rax,0x0
  01f89:    	mov    QWORD PTR [rsp-0x28],rax
  01f8e: 00 	movabs r13,0x0
  01f98:    	call   0xffffa210
  01f9d:    	lea    rdi,[rbp-0x8]
  01fa1:    	mov    QWORD PTR [rbx],rdi
  01fa4:    	movq   xmm2,QWORD PTR [rsp]
  01fa9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01faf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01fb5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01fbb:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01fc1:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01fc7: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01fce: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  01fd5: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01fdc: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  01fe3: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  01fea:    	add    rsp,0x60
  01fee:    	test   rax,rax
  01ff1:    	je     0x3caa2
  01ff7: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00126 %16 = %13.call y()                   [<INVALID>]
:00127 
  01ffe:    	sub    rsp,0x60
  02002:    	movq   QWORD PTR [rsp],xmm2
  02007:    	movq   QWORD PTR [rsp+0x8],xmm3
  0200d:    	movq   QWORD PTR [rsp+0x10],xmm4
  02013:    	movq   QWORD PTR [rsp+0x18],xmm5
  02019:    	movq   QWORD PTR [rsp+0x20],xmm6
  0201f:    	movq   QWORD PTR [rsp+0x28],xmm7
  02025: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0202c: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02033: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  0203a: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02041: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02048: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0204f: 76 	movabs rax,0x5576ccd01d00
  02059:    	call   rax
  0205b:    	mov    r15d,eax
  0205e: 00 	cmp    r15d,DWORD PTR [rip+0x7c7]        # 0x282c
  02065:    	jne    0x3cab1
  0206b:    	mov    eax,DWORD PTR [rip+0xffffffffffffabb7]        # 0xffffcc28
  02071:    	cmp    DWORD PTR [rip+0x7b1],eax        # 0x2828
  02077:    	jne    0x3cab1
  0207d:    	mov    rax,QWORD PTR [rbx]
  02080:    	lea    rdi,[rsp-0x18]
  02085:    	mov    QWORD PTR [rdi],rax
  02088:    	mov    QWORD PTR [rbx],rdi
  0208b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02094:    	mov    QWORD PTR [rsp-0x38],rcx
  02099: ff 	mov    rax,QWORD PTR [rbp-0x90]
  020a0:    	mov    QWORD PTR [rsp-0x38],rax
  020a5: 00 	mov    rdi,0x0
  020ac: 00 	mov    QWORD PTR [rsp-0x30],0x0
  020b5: 00 	movabs rax,0x0
  020bf:    	mov    QWORD PTR [rsp-0x28],rax
  020c4: 00 	movabs r13,0x0
  020ce:    	call   0xffffa210
  020d3:    	lea    rdi,[rbp-0x8]
  020d7:    	mov    QWORD PTR [rbx],rdi
  020da:    	movq   xmm2,QWORD PTR [rsp]
  020df:    	movq   xmm3,QWORD PTR [rsp+0x8]
  020e5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  020eb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  020f1:    	movq   xmm6,QWORD PTR [rsp+0x20]
  020f7:    	movq   xmm7,QWORD PTR [rsp+0x28]
  020fd: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02104: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0210b: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02112: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02119: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  02120:    	add    rsp,0x60
  02124:    	test   rax,rax
  02127:    	je     0x3cb20
  0212d: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00129 %15 = %15 + %16                      [Integer][Integer]
  02134: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0213b: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  02142: 00 	test   rdi,0x1
  02149:    	je     0x3cb2f
  0214f: 00 	test   rsi,0x1
  02156:    	je     0x3cb2f
  0215c:    	sub    rdi,0x1
  02160:    	add    rdi,rsi
  02163:    	jo     0x3cb2f
  02169: ff 	mov    QWORD PTR [rbp-0xa0],rdi
:00130 _ = %14.call y=(%15; 1)              [<INVALID>]
:00131 
  02170:    	sub    rsp,0x60
  02174:    	movq   QWORD PTR [rsp],xmm2
  02179:    	movq   QWORD PTR [rsp+0x8],xmm3
  0217f:    	movq   QWORD PTR [rsp+0x10],xmm4
  02185:    	movq   QWORD PTR [rsp+0x18],xmm5
  0218b:    	movq   QWORD PTR [rsp+0x20],xmm6
  02191:    	movq   QWORD PTR [rsp+0x28],xmm7
  02197: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0219e: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  021a5: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  021ac: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  021b3: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  021ba: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  021c1: 76 	movabs rax,0x5576ccd01d00
  021cb:    	call   rax
  021cd:    	mov    r15d,eax
  021d0: 00 	cmp    r15d,DWORD PTR [rip+0x65d]        # 0x2834
  021d7:    	jne    0x3cb59
  021dd:    	mov    eax,DWORD PTR [rip+0xffffffffffffaa45]        # 0xffffcc28
  021e3:    	cmp    DWORD PTR [rip+0x647],eax        # 0x2830
  021e9:    	jne    0x3cb59
  021ef:    	mov    rax,QWORD PTR [rbx]
  021f2:    	lea    rdi,[rsp-0x18]
  021f7:    	mov    QWORD PTR [rdi],rax
  021fa:    	mov    QWORD PTR [rbx],rdi
  021fd: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02206:    	mov    QWORD PTR [rsp-0x38],rcx
  0220b: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02212:    	mov    QWORD PTR [rsp-0x38],rax
  02217: 00 	mov    rdi,0x1
  0221e: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02225:    	mov    QWORD PTR [rsp-0x40],rax
  0222a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02233: 00 	movabs rax,0x0
  0223d:    	mov    QWORD PTR [rsp-0x28],rax
  02242: 00 	movabs r13,0x0
  0224c:    	call   0xffffa210
  02251:    	lea    rdi,[rbp-0x8]
  02255:    	mov    QWORD PTR [rbx],rdi
  02258:    	movq   xmm2,QWORD PTR [rsp]
  0225d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02263:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02269:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0226f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02275:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0227b: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02282: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02289: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02290: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02297: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0229e:    	add    rsp,0x60
  022a2:    	test   rax,rax
  022a5:    	je     0x3cbc8
:00133 %14 = dynvar(2, %2)
  022ab:    	mov    rax,QWORD PTR [rbp-0x10]
  022af:    	mov    rax,QWORD PTR [rax]
  022b2:    	lea    rax,[rax+0x10]
  022b6:    	mov    rax,QWORD PTR [rax-0x38]
  022ba: ff 	mov    QWORD PTR [rbp-0x98],rax
:00134 %16 = dynvar(2, %2)
  022c1:    	mov    rax,QWORD PTR [rbp-0x10]
  022c5:    	mov    rax,QWORD PTR [rax]
  022c8:    	lea    rax,[rax+0x10]
  022cc:    	mov    rax,QWORD PTR [rax-0x38]
  022d0: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00135 %15 = %16.call z()                   [<INVALID>]
:00136 
  022d7:    	sub    rsp,0x60
  022db:    	movq   QWORD PTR [rsp],xmm2
  022e0:    	movq   QWORD PTR [rsp+0x8],xmm3
  022e6:    	movq   QWORD PTR [rsp+0x10],xmm4
  022ec:    	movq   QWORD PTR [rsp+0x18],xmm5
  022f2:    	movq   QWORD PTR [rsp+0x20],xmm6
  022f8:    	movq   QWORD PTR [rsp+0x28],xmm7
  022fe: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  02305: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0230c: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02313: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  0231a: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02321: ff 	mov    rdi,QWORD PTR [rbp-0xa8]
  02328: 76 	movabs rax,0x5576ccd01d00
  02332:    	call   rax
  02334:    	mov    r15d,eax
  02337: 00 	cmp    r15d,DWORD PTR [rip+0x4fe]        # 0x283c
  0233e:    	jne    0x3cbd7
  02344:    	mov    eax,DWORD PTR [rip+0xffffffffffffa8de]        # 0xffffcc28
  0234a:    	cmp    DWORD PTR [rip+0x4e8],eax        # 0x2838
  02350:    	jne    0x3cbd7
  02356:    	mov    rax,QWORD PTR [rbx]
  02359:    	lea    rdi,[rsp-0x18]
  0235e:    	mov    QWORD PTR [rdi],rax
  02361:    	mov    QWORD PTR [rbx],rdi
  02364: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0236d:    	mov    QWORD PTR [rsp-0x38],rcx
  02372: ff 	mov    rax,QWORD PTR [rbp-0xa8]
  02379:    	mov    QWORD PTR [rsp-0x38],rax
  0237e: 00 	mov    rdi,0x0
  02385: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0238e: 00 	movabs rax,0x0
  02398:    	mov    QWORD PTR [rsp-0x28],rax
  0239d: 00 	movabs r13,0x0
  023a7:    	call   0xffffa210
  023ac:    	lea    rdi,[rbp-0x8]
  023b0:    	mov    QWORD PTR [rbx],rdi
  023b3:    	movq   xmm2,QWORD PTR [rsp]
  023b8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  023be:    	movq   xmm4,QWORD PTR [rsp+0x10]
  023c4:    	movq   xmm5,QWORD PTR [rsp+0x18]
  023ca:    	movq   xmm6,QWORD PTR [rsp+0x20]
  023d0:    	movq   xmm7,QWORD PTR [rsp+0x28]
  023d6: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  023dd: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  023e4: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  023eb: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  023f2: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  023f9:    	add    rsp,0x60
  023fd:    	test   rax,rax
  02400:    	je     0x3cc46
  02406: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00138 %16 = %13.call z()                   [<INVALID>]
:00139 
  0240d:    	sub    rsp,0x60
  02411:    	movq   QWORD PTR [rsp],xmm2
  02416:    	movq   QWORD PTR [rsp+0x8],xmm3
  0241c:    	movq   QWORD PTR [rsp+0x10],xmm4
  02422:    	movq   QWORD PTR [rsp+0x18],xmm5
  02428:    	movq   QWORD PTR [rsp+0x20],xmm6
  0242e:    	movq   QWORD PTR [rsp+0x28],xmm7
  02434: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  0243b: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  02442: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  02449: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  02450: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  02457: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0245e: 76 	movabs rax,0x5576ccd01d00
  02468:    	call   rax
  0246a:    	mov    r15d,eax
  0246d: 00 	cmp    r15d,DWORD PTR [rip+0x3d0]        # 0x2844
  02474:    	jne    0x3cc55
  0247a:    	mov    eax,DWORD PTR [rip+0xffffffffffffa7a8]        # 0xffffcc28
  02480:    	cmp    DWORD PTR [rip+0x3ba],eax        # 0x2840
  02486:    	jne    0x3cc55
  0248c:    	mov    rax,QWORD PTR [rbx]
  0248f:    	lea    rdi,[rsp-0x18]
  02494:    	mov    QWORD PTR [rdi],rax
  02497:    	mov    QWORD PTR [rbx],rdi
  0249a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  024a3:    	mov    QWORD PTR [rsp-0x38],rcx
  024a8: ff 	mov    rax,QWORD PTR [rbp-0x90]
  024af:    	mov    QWORD PTR [rsp-0x38],rax
  024b4: 00 	mov    rdi,0x0
  024bb: 00 	mov    QWORD PTR [rsp-0x30],0x0
  024c4: 00 	movabs rax,0x0
  024ce:    	mov    QWORD PTR [rsp-0x28],rax
  024d3: 00 	movabs r13,0x0
  024dd:    	call   0xffffa210
  024e2:    	lea    rdi,[rbp-0x8]
  024e6:    	mov    QWORD PTR [rbx],rdi
  024e9:    	movq   xmm2,QWORD PTR [rsp]
  024ee:    	movq   xmm3,QWORD PTR [rsp+0x8]
  024f4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  024fa:    	movq   xmm5,QWORD PTR [rsp+0x18]
  02500:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02506:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0250c: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02513: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0251a: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  02521: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  02528: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  0252f:    	add    rsp,0x60
  02533:    	test   rax,rax
  02536:    	je     0x3ccc4
  0253c: ff 	mov    QWORD PTR [rbp-0xa8],rax
:00141 %15 = %15 + %16                      [Integer][Integer]
  02543: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0254a: ff 	mov    rsi,QWORD PTR [rbp-0xa8]
  02551: 00 	test   rdi,0x1
  02558:    	je     0x3ccd3
  0255e: 00 	test   rsi,0x1
  02565:    	je     0x3ccd3
  0256b:    	sub    rdi,0x1
  0256f:    	add    rdi,rsi
  02572:    	jo     0x3ccd3
  02578: ff 	mov    QWORD PTR [rbp-0xa0],rdi
:00142 _ = %14.call z=(%15; 1)              [<INVALID>]
:00143 
  0257f:    	sub    rsp,0x60
  02583:    	movq   QWORD PTR [rsp],xmm2
  02588:    	movq   QWORD PTR [rsp+0x8],xmm3
  0258e:    	movq   QWORD PTR [rsp+0x10],xmm4
  02594:    	movq   QWORD PTR [rsp+0x18],xmm5
  0259a:    	movq   QWORD PTR [rsp+0x20],xmm6
  025a0:    	movq   QWORD PTR [rsp+0x28],xmm7
  025a6: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  025ad: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  025b4: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  025bb: 48 	movq   QWORD PTR [rsp+0x48],xmm11
  025c2: 50 	movq   QWORD PTR [rsp+0x50],xmm12
  025c9: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  025d0: 76 	movabs rax,0x5576ccd01d00
  025da:    	call   rax
  025dc:    	mov    r15d,eax
  025df: 00 	cmp    r15d,DWORD PTR [rip+0x266]        # 0x284c
  025e6:    	jne    0x3ccfd
  025ec:    	mov    eax,DWORD PTR [rip+0xffffffffffffa636]        # 0xffffcc28
  025f2:    	cmp    DWORD PTR [rip+0x250],eax        # 0x2848
  025f8:    	jne    0x3ccfd
  025fe:    	mov    rax,QWORD PTR [rbx]
  02601:    	lea    rdi,[rsp-0x18]
  02606:    	mov    QWORD PTR [rdi],rax
  02609:    	mov    QWORD PTR [rbx],rdi
  0260c: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02615:    	mov    QWORD PTR [rsp-0x38],rcx
  0261a: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02621:    	mov    QWORD PTR [rsp-0x38],rax
  02626: 00 	mov    rdi,0x1
  0262d: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02634:    	mov    QWORD PTR [rsp-0x40],rax
  02639: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02642: 00 	movabs rax,0x0
  0264c:    	mov    QWORD PTR [rsp-0x28],rax
  02651: 00 	movabs r13,0x0
  0265b:    	call   0xffffa210
  02660:    	lea    rdi,[rbp-0x8]
  02664:    	mov    QWORD PTR [rbx],rdi
  02667:    	movq   xmm2,QWORD PTR [rsp]
  0266c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02672:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02678:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0267e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  02684:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0268a: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  02691: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  02698: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  0269f: 48 	movq   xmm11,QWORD PTR [rsp+0x48]
  026a6: 50 	movq   xmm12,QWORD PTR [rsp+0x50]
  026ad:    	add    rsp,0x60
  026b1:    	test   rax,rax
  026b4:    	je     0x3cd6c
:00145 %14 = %15
  026ba: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  026c1: ff 	mov    QWORD PTR [rbp-0x98],rax
:00146 ret %14
  026c8: ff 	mov    rax,QWORD PTR [rbp-0x98]
  026cf:    	leave  
  026d0:    	ret    
:00147 %14 = nil
  026d1: ff 	mov    QWORD PTR [rbp-0x98],0x4
:00148 ret %14
  026dc: ff 	mov    rax,QWORD PTR [rbp-0x98]
  026e3:    	leave  
  026e4:    	ret    
==> start whole compile: vnormalize FuncId(61) self_class:Vec start:[00000] bytecode:0x5576cd6a7f70
<== finished compile. elapsed:70.3µs
offset:Pos(34368) code: 1831 bytes  data: 97 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    QWORD PTR [rbp-0x58],rax
  00027: mov    rdi,QWORD PTR [rbp-0x28]
  0002b: test   rdi,0x7
  00032: jne    0x3a52b
  00038: cmp    DWORD PTR [rdi+0x4],0x25
  0003c: jne    0x3a52b
:00000 %3 = %0.call vlength()               [Vec]
:00001 
  00042: mov    rdi,QWORD PTR [rbp-0x28]
  00046: cmp    DWORD PTR [rip+0xffffffffffffa38b],0x26        # 0xffffa3d8
  0004d: jne    0x3a53a
  00053: mov    rax,QWORD PTR [rbx]
  00056: lea    rdi,[rsp-0x18]
  0005b: mov    QWORD PTR [rdi],rax
  0005e: mov    QWORD PTR [rbx],rdi
  00061: mov    QWORD PTR [rsp-0x20],0x0
  0006a: mov    QWORD PTR [rsp-0x38],rcx
  0006f: mov    rax,QWORD PTR [rbp-0x28]
  00073: mov    QWORD PTR [rsp-0x38],rax
  00078: mov    rdi,0x0
  0007f: mov    QWORD PTR [rsp-0x30],0x0
  00088: movabs rax,0x60000003c
  00092: mov    QWORD PTR [rsp-0x28],rax
  00097: movabs r13,0x5576cd6942d0
  000a1: call   0xffffad03
  000a6: lea    rdi,[rbp-0x8]
  000aa: mov    QWORD PTR [rbx],rdi
  000ad: movabs r13,0x5576cd6a7f90
  000b7: test   rax,rax
  000ba: je     0xffff79fb
  000c0: mov    QWORD PTR [rbp-0x40],rax
:00003 %1 = %3
  000c4: mov    rax,QWORD PTR [rbp-0x40]
  000c8: mov    QWORD PTR [rbp-0x30],rax
:00004 %3 = const[Vec]                      [Vec]
  000cc: mov    rax,QWORD PTR [rip+0xffffffffffffa30d]        # 0xffffa3e0
  000d3: cmp    rax,QWORD PTR [rip+0x666]        # 0x740
  000da: jne    0x3a549
  000e0: mov    rax,QWORD PTR [rip+0x649]        # 0x730
  000e7: mov    QWORD PTR [rbp-0x40],rax
:00005 %4 = @x: Vec[IvarId(0)]
  000eb: mov    rdi,QWORD PTR [rbp-0x28]
  000ef: xor    rax,rax
  000f2: mov    ax,WORD PTR [rdi+0x2]
  000f6: cmp    rax,0x3
  000fa: jne    0x3a58f
  00100: mov    rax,QWORD PTR [rdi+0x10]
  00104: mov    QWORD PTR [rbp-0x48],rax
:00006 %5 = @y: Vec[IvarId(1)]
  00108: mov    rdi,QWORD PTR [rbp-0x28]
  0010c: xor    rax,rax
  0010f: mov    ax,WORD PTR [rdi+0x2]
  00113: cmp    rax,0x3
  00117: jne    0x3a5a5
  0011d: mov    rax,QWORD PTR [rdi+0x18]
  00121: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = @z: Vec[IvarId(2)]
  00125: mov    rdi,QWORD PTR [rbp-0x28]
  00129: xor    rax,rax
  0012c: mov    ax,WORD PTR [rdi+0x2]
  00130: cmp    rax,0x3
  00134: jne    0x3a5bb
  0013a: mov    rax,QWORD PTR [rdi+0x20]
  0013e: mov    QWORD PTR [rbp-0x58],rax
:00008 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00009 
  00142: mov    rdi,QWORD PTR [rbp-0x40]
  00146: test   rdi,0x7
  0014d: jne    0x3a5d1
  00153: cmp    DWORD PTR [rdi+0x4],0x26
  00157: jne    0x3a5d1
  0015d: cmp    DWORD PTR [rip+0xffffffffffffa274],0x26        # 0xffffa3d8
  00164: jne    0x3a5d1
  0016a: mov    r9,0x0
  00171: mov    rdx,rdi
  00174: mov    rax,QWORD PTR [rbx]
  00177: lea    rdi,[rsp-0x18]
  0017c: mov    QWORD PTR [rdi],rax
  0017f: mov    QWORD PTR [rbx],rdi
  00182: mov    QWORD PTR [rsp-0x20],0x0
  0018b: mov    QWORD PTR [rsp-0x38],rcx
  00190: lea    rcx,[rbp-0x48]
  00194: mov    r8,0x3
  0019b: call   0x3a5e0
  001a0: lea    rdi,[rbp-0x8]
  001a4: mov    QWORD PTR [rbx],rdi
  001a7: movabs r13,0x5576cd6a8010
  001b1: test   rax,rax
  001b4: je     0xffff79fb
  001ba: mov    QWORD PTR [rbp-0x38],rax
:00011 %3 = literal[1e-17]
  001be: movq   xmm2,QWORD PTR [rip+0x58a]        # 0x750
:00012 _%3 = %1 > %3                        [Float][Float]
:00013 condnotbr _%3 =>:00036
  001c6: mov    rdi,QWORD PTR [rbp-0x30]
  001ca: test   rdi,0x1
  001d1: jne    0x3a612
  001d7: test   rdi,0x2
  001de: je     0x21a
  001e4: xorps  xmm3,xmm3
  001e7: movabs rax,0x8000000000000002
  001f1: cmp    rdi,rax
  001f4: je     0x22c
  001fa: mov    rax,rdi
  001fd: sar    rax,0x3f
  00201: add    rax,0x2
  00205: and    rdi,0xfffffffffffffffc
  00209: or     rdi,rax
  0020c: rol    rdi,0x3d
  00210: movq   xmm3,rdi
  00215: jmp    0x22c
  0021a: call   0xffff7a34
  0021f: test   rax,rax
  00222: je     0x3a612
  00228: movq   xmm3,xmm0
  0022c: ucomisd xmm3,xmm2
  00230: jbe    0x3a850
:00014 %3 = %2.call x()                     [Vec]
:00015 
  00236: mov    rdi,QWORD PTR [rbp-0x38]
  0023a: test   rdi,0x7
  00241: jne    0x3a62e
  00247: cmp    DWORD PTR [rdi+0x4],0x25
  0024b: jne    0x3a62e
  00251: cmp    DWORD PTR [rip+0xffffffffffffa180],0x26        # 0xffffa3d8
  00258: jne    0x3a62e
  0025e: mov    esi,DWORD PTR [rip+0x4f8]        # 0x75c
  00264: cmp    esi,0xffffffff
  00267: je     0x3a63d
  0026d: xor    rax,rax
  00270: mov    ax,WORD PTR [rdi+0x2]
  00274: cmp    rax,0x3
  00278: jne    0x291
  0027e: cmp    esi,0x6
  00281: jge    0x291
  00287: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0028c: jmp    0x2af
  00291: sub    rsp,0x10
  00295: movq   QWORD PTR [rsp],xmm3
  0029a: movabs rax,0x5576cccb62a0
  002a4: call   rax
  002a6: movq   xmm3,QWORD PTR [rsp]
  002ab: add    rsp,0x10
  002af: mov    QWORD PTR [rbp-0x40],rax
:00017 %3 = %3 / %1                         [Float][Float]
  002b3: mov    rdi,QWORD PTR [rbp-0x40]
  002b7: test   rdi,0x1
  002be: jne    0x3a678
  002c4: test   rdi,0x2
  002cb: je     0x307
  002d1: xorps  xmm2,xmm2
  002d4: movabs rax,0x8000000000000002
  002de: cmp    rdi,rax
  002e1: je     0x319
  002e7: mov    rax,rdi
  002ea: sar    rax,0x3f
  002ee: add    rax,0x2
  002f2: and    rdi,0xfffffffffffffffc
  002f6: or     rdi,rax
  002f9: rol    rdi,0x3d
  002fd: movq   xmm2,rdi
  00302: jmp    0x319
  00307: call   0xffff7a34
  0030c: test   rax,rax
  0030f: je     0x3a678
  00315: movq   xmm2,xmm0
  00319: movq   rax,xmm3
  0031e: test   rax,rax
  00321: je     0xffff7a20
  00327: divsd  xmm2,xmm3
:00018 _ = %2.call x=(%3; 1)                [Vec]
:00019 
  0032b: movq   xmm0,xmm2
  0032f: call   0xffff7b27
  00334: mov    QWORD PTR [rbp-0x40],rax
  00338: mov    rdi,QWORD PTR [rbp-0x38]
  0033c: test   rdi,0x7
  00343: jne    0x3a687
  00349: cmp    DWORD PTR [rdi+0x4],0x25
  0034d: jne    0x3a687
  00353: cmp    DWORD PTR [rip+0xffffffffffffa07e],0x26        # 0xffffa3d8
  0035a: jne    0x3a687
  00360: mov    esi,DWORD PTR [rip+0x3fe]        # 0x764
  00366: cmp    esi,0xffffffff
  00369: je     0x3a696
  0036f: xor    rax,rax
  00372: mov    ax,WORD PTR [rdi+0x2]
  00376: cmp    rax,0x3
  0037a: jne    0x397
  00380: cmp    esi,0x6
  00383: jge    0x397
  00389: mov    rax,QWORD PTR [rbp-0x40]
  0038d: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00392: jmp    0x3d8
  00397: sub    rsp,0x10
  0039b: movq   QWORD PTR [rsp],xmm2
  003a0: movq   QWORD PTR [rsp+0x8],xmm3
  003a6: mov    rdx,QWORD PTR [rbp-0x40]
  003aa: movabs rax,0x5576cccb6510
  003b4: call   rax
  003b6: movq   xmm2,QWORD PTR [rsp]
  003bb: movq   xmm3,QWORD PTR [rsp+0x8]
  003c1: add    rsp,0x10
  003c5: movabs r13,0x5576cd6a80b0
  003cf: test   rax,rax
  003d2: je     0xffff79fb
:00021 %3 = %2.call y()                     [Vec]
:00022 
  003d8: mov    rdi,QWORD PTR [rbp-0x38]
  003dc: test   rdi,0x7
  003e3: jne    0x3a6e4
  003e9: cmp    DWORD PTR [rdi+0x4],0x25
  003ed: jne    0x3a6e4
  003f3: cmp    DWORD PTR [rip+0xffffffffffff9fde],0x26        # 0xffffa3d8
  003fa: jne    0x3a6e4
  00400: mov    esi,DWORD PTR [rip+0x366]        # 0x76c
  00406: cmp    esi,0xffffffff
  00409: je     0x3a6f3
  0040f: xor    rax,rax
  00412: mov    ax,WORD PTR [rdi+0x2]
  00416: cmp    rax,0x3
  0041a: jne    0x433
  00420: cmp    esi,0x6
  00423: jge    0x433
  00429: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0042e: jmp    0x451
  00433: sub    rsp,0x10
  00437: movq   QWORD PTR [rsp],xmm3
  0043c: movabs rax,0x5576cccb62a0
  00446: call   rax
  00448: movq   xmm3,QWORD PTR [rsp]
  0044d: add    rsp,0x10
  00451: mov    QWORD PTR [rbp-0x40],rax
:00024 %3 = %3 / %1                         [Float][Float]
  00455: mov    rdi,QWORD PTR [rbp-0x40]
  00459: test   rdi,0x1
  00460: jne    0x3a72e
  00466: test   rdi,0x2
  0046d: je     0x4a9
  00473: xorps  xmm2,xmm2
  00476: movabs rax,0x8000000000000002
  00480: cmp    rdi,rax
  00483: je     0x4bb
  00489: mov    rax,rdi
  0048c: sar    rax,0x3f
  00490: add    rax,0x2
  00494: and    rdi,0xfffffffffffffffc
  00498: or     rdi,rax
  0049b: rol    rdi,0x3d
  0049f: movq   xmm2,rdi
  004a4: jmp    0x4bb
  004a9: call   0xffff7a34
  004ae: test   rax,rax
  004b1: je     0x3a72e
  004b7: movq   xmm2,xmm0
  004bb: movq   rax,xmm3
  004c0: test   rax,rax
  004c3: je     0xffff7a20
  004c9: divsd  xmm2,xmm3
:00025 _ = %2.call y=(%3; 1)                [Vec]
:00026 
  004cd: movq   xmm0,xmm2
  004d1: call   0xffff7b27
  004d6: mov    QWORD PTR [rbp-0x40],rax
  004da: mov    rdi,QWORD PTR [rbp-0x38]
  004de: test   rdi,0x7
  004e5: jne    0x3a73d
  004eb: cmp    DWORD PTR [rdi+0x4],0x25
  004ef: jne    0x3a73d
  004f5: cmp    DWORD PTR [rip+0xffffffffffff9edc],0x26        # 0xffffa3d8
  004fc: jne    0x3a73d
  00502: mov    esi,DWORD PTR [rip+0x26c]        # 0x774
  00508: cmp    esi,0xffffffff
  0050b: je     0x3a74c
  00511: xor    rax,rax
  00514: mov    ax,WORD PTR [rdi+0x2]
  00518: cmp    rax,0x3
  0051c: jne    0x539
  00522: cmp    esi,0x6
  00525: jge    0x539
  0052b: mov    rax,QWORD PTR [rbp-0x40]
  0052f: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00534: jmp    0x57a
  00539: sub    rsp,0x10
  0053d: movq   QWORD PTR [rsp],xmm2
  00542: movq   QWORD PTR [rsp+0x8],xmm3
  00548: mov    rdx,QWORD PTR [rbp-0x40]
  0054c: movabs rax,0x5576cccb6510
  00556: call   rax
  00558: movq   xmm2,QWORD PTR [rsp]
  0055d: movq   xmm3,QWORD PTR [rsp+0x8]
  00563: add    rsp,0x10
  00567: movabs r13,0x5576cd6a8120
  00571: test   rax,rax
  00574: je     0xffff79fb
:00028 %3 = %2.call z()                     [Vec]
:00029 
  0057a: mov    rdi,QWORD PTR [rbp-0x38]
  0057e: test   rdi,0x7
  00585: jne    0x3a79a
  0058b: cmp    DWORD PTR [rdi+0x4],0x25
  0058f: jne    0x3a79a
  00595: cmp    DWORD PTR [rip+0xffffffffffff9e3c],0x26        # 0xffffa3d8
  0059c: jne    0x3a79a
  005a2: mov    esi,DWORD PTR [rip+0x1d4]        # 0x77c
  005a8: cmp    esi,0xffffffff
  005ab: je     0x3a7a9
  005b1: xor    rax,rax
  005b4: mov    ax,WORD PTR [rdi+0x2]
  005b8: cmp    rax,0x3
  005bc: jne    0x5d5
  005c2: cmp    esi,0x6
  005c5: jge    0x5d5
  005cb: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005d0: jmp    0x5f3
  005d5: sub    rsp,0x10
  005d9: movq   QWORD PTR [rsp],xmm3
  005de: movabs rax,0x5576cccb62a0
  005e8: call   rax
  005ea: movq   xmm3,QWORD PTR [rsp]
  005ef: add    rsp,0x10
  005f3: mov    QWORD PTR [rbp-0x40],rax
:00031 %3 = %3 / %1                         [Float][Float]
  005f7: mov    rdi,QWORD PTR [rbp-0x40]
  005fb: test   rdi,0x1
  00602: jne    0x3a7e4
  00608: test   rdi,0x2
  0060f: je     0x64b
  00615: xorps  xmm2,xmm2
  00618: movabs rax,0x8000000000000002
  00622: cmp    rdi,rax
  00625: je     0x65d
  0062b: mov    rax,rdi
  0062e: sar    rax,0x3f
  00632: add    rax,0x2
  00636: and    rdi,0xfffffffffffffffc
  0063a: or     rdi,rax
  0063d: rol    rdi,0x3d
  00641: movq   xmm2,rdi
  00646: jmp    0x65d
  0064b: call   0xffff7a34
  00650: test   rax,rax
  00653: je     0x3a7e4
  00659: movq   xmm2,xmm0
  0065d: movq   rax,xmm3
  00662: test   rax,rax
  00665: je     0xffff7a20
  0066b: divsd  xmm2,xmm3
:00032 _ = %2.call z=(%3; 1)                [Vec]
:00033 
  0066f: movq   xmm0,xmm2
  00673: call   0xffff7b27
  00678: mov    QWORD PTR [rbp-0x40],rax
  0067c: mov    rdi,QWORD PTR [rbp-0x38]
  00680: test   rdi,0x7
  00687: jne    0x3a7f3
  0068d: cmp    DWORD PTR [rdi+0x4],0x25
  00691: jne    0x3a7f3
  00697: cmp    DWORD PTR [rip+0xffffffffffff9d3a],0x26        # 0xffffa3d8
  0069e: jne    0x3a7f3
  006a4: mov    esi,DWORD PTR [rip+0xda]        # 0x784
  006aa: cmp    esi,0xffffffff
  006ad: je     0x3a802
  006b3: xor    rax,rax
  006b6: mov    ax,WORD PTR [rdi+0x2]
  006ba: cmp    rax,0x3
  006be: jne    0x6db
  006c4: cmp    esi,0x6
  006c7: jge    0x6db
  006cd: mov    rax,QWORD PTR [rbp-0x40]
  006d1: mov    QWORD PTR [rdi+rsi*8+0x10],rax
  006d6: jmp    0x71c
  006db: sub    rsp,0x10
  006df: movq   QWORD PTR [rsp],xmm2
  006e4: movq   QWORD PTR [rsp+0x8],xmm3
  006ea: mov    rdx,QWORD PTR [rbp-0x40]
  006ee: movabs rax,0x5576cccb6510
  006f8: call   rax
  006fa: movq   xmm2,QWORD PTR [rsp]
  006ff: movq   xmm3,QWORD PTR [rsp+0x8]
  00705: add    rsp,0x10
  00709: movabs r13,0x5576cd6a8190
  00713: test   rax,rax
  00716: je     0xffff79fb
:00035 br =>:00036
  0071c: jmp    0x3a876
:00036 ret %2
  00721: mov    rax,QWORD PTR [rbp-0x38]
  00725: leave  
  00726: ret    
==> start whole compile: vlength FuncId(60) self_class:Vec start:[00000] bytecode:0x5576cd6942d0
<== finished compile. elapsed:80.1µs
offset:Pos(36296) code: 1084 bytes  data: 36 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    rdi,QWORD PTR [rbp-0x28]
  00027: test   rdi,0x7
  0002e: jne    0x3a107
  00034: cmp    DWORD PTR [rdi+0x4],0x25
  00038: jne    0x3a107
:00000 %2 = const[Math]                     [Math]
  0003e: mov    rax,QWORD PTR [rip+0xffffffffffff9c13]        # 0xffff9c58
  00045: cmp    rax,QWORD PTR [rip+0x40c]        # 0x458
  0004c: jne    0x3a116
  00052: mov    rax,QWORD PTR [rip+0x3ef]        # 0x448
  00059: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = @x: Vec[IvarId(0)]
  0005d: mov    rdi,QWORD PTR [rbp-0x28]
  00061: xor    rax,rax
  00064: mov    ax,WORD PTR [rdi+0x2]
  00068: cmp    rax,0x3
  0006c: jne    0x3a15c
  00072: mov    rax,QWORD PTR [rdi+0x10]
  00076: mov    QWORD PTR [rbp-0x40],rax
:00002 %4 = @x: Vec[IvarId(0)]
  0007a: mov    rdi,QWORD PTR [rbp-0x28]
  0007e: xor    rax,rax
  00081: mov    ax,WORD PTR [rdi+0x2]
  00085: cmp    rax,0x3
  00089: jne    0x3a172
  0008f: mov    rax,QWORD PTR [rdi+0x10]
  00093: mov    QWORD PTR [rbp-0x48],rax
:00003 %3 = %3 * %4                         [Float][Float]
  00097: mov    rdi,QWORD PTR [rbp-0x40]
  0009b: test   rdi,0x1
  000a2: jne    0x3a188
  000a8: test   rdi,0x2
  000af: je     0xeb
  000b5: xorps  xmm2,xmm2
  000b8: movabs rax,0x8000000000000002
  000c2: cmp    rdi,rax
  000c5: je     0xfd
  000cb: mov    rax,rdi
  000ce: sar    rax,0x3f
  000d2: add    rax,0x2
  000d6: and    rdi,0xfffffffffffffffc
  000da: or     rdi,rax
  000dd: rol    rdi,0x3d
  000e1: movq   xmm2,rdi
  000e6: jmp    0xfd
  000eb: call   0xffff72ac
  000f0: test   rax,rax
  000f3: je     0x3a188
  000f9: movq   xmm2,xmm0
  000fd: mov    rdi,QWORD PTR [rbp-0x48]
  00101: test   rdi,0x1
  00108: jne    0x3a197
  0010e: test   rdi,0x2
  00115: je     0x151
  0011b: xorps  xmm3,xmm3
  0011e: movabs rax,0x8000000000000002
  00128: cmp    rdi,rax
  0012b: je     0x163
  00131: mov    rax,rdi
  00134: sar    rax,0x3f
  00138: add    rax,0x2
  0013c: and    rdi,0xfffffffffffffffc
  00140: or     rdi,rax
  00143: rol    rdi,0x3d
  00147: movq   xmm3,rdi
  0014c: jmp    0x163
  00151: call   0xffff72ac
  00156: test   rax,rax
  00159: je     0x3a197
  0015f: movq   xmm3,xmm0
  00163: mulsd  xmm2,xmm3
:00004 %4 = @y: Vec[IvarId(1)]
  00167: mov    rdi,QWORD PTR [rbp-0x28]
  0016b: xor    rax,rax
  0016e: mov    ax,WORD PTR [rdi+0x2]
  00172: cmp    rax,0x3
  00176: jne    0x3a1a6
  0017c: mov    rax,QWORD PTR [rdi+0x18]
  00180: mov    QWORD PTR [rbp-0x48],rax
:00005 %5 = @y: Vec[IvarId(1)]
  00184: mov    rdi,QWORD PTR [rbp-0x28]
  00188: xor    rax,rax
  0018b: mov    ax,WORD PTR [rdi+0x2]
  0018f: cmp    rax,0x3
  00193: jne    0x3a1ce
  00199: mov    rax,QWORD PTR [rdi+0x18]
  0019d: mov    QWORD PTR [rbp-0x50],rax
:00006 %4 = %4 * %5                         [Float][Float]
  001a1: mov    rdi,QWORD PTR [rbp-0x48]
  001a5: test   rdi,0x1
  001ac: jne    0x3a1f6
  001b2: test   rdi,0x2
  001b9: je     0x1f5
  001bf: xorps  xmm3,xmm3
  001c2: movabs rax,0x8000000000000002
  001cc: cmp    rdi,rax
  001cf: je     0x207
  001d5: mov    rax,rdi
  001d8: sar    rax,0x3f
  001dc: add    rax,0x2
  001e0: and    rdi,0xfffffffffffffffc
  001e4: or     rdi,rax
  001e7: rol    rdi,0x3d
  001eb: movq   xmm3,rdi
  001f0: jmp    0x207
  001f5: call   0xffff72ac
  001fa: test   rax,rax
  001fd: je     0x3a1f6
  00203: movq   xmm3,xmm0
  00207: mov    rdi,QWORD PTR [rbp-0x50]
  0020b: test   rdi,0x1
  00212: jne    0x3a212
  00218: test   rdi,0x2
  0021f: je     0x25b
  00225: xorps  xmm4,xmm4
  00228: movabs rax,0x8000000000000002
  00232: cmp    rdi,rax
  00235: je     0x26d
  0023b: mov    rax,rdi
  0023e: sar    rax,0x3f
  00242: add    rax,0x2
  00246: and    rdi,0xfffffffffffffffc
  0024a: or     rdi,rax
  0024d: rol    rdi,0x3d
  00251: movq   xmm4,rdi
  00256: jmp    0x26d
  0025b: call   0xffff72ac
  00260: test   rax,rax
  00263: je     0x3a212
  00269: movq   xmm4,xmm0
  0026d: mulsd  xmm3,xmm4
:00007 %3 = %3 + %4                         [Float][Float]
  00271: addsd  xmm2,xmm3
:00008 %4 = @z: Vec[IvarId(2)]
  00275: mov    rdi,QWORD PTR [rbp-0x28]
  00279: xor    rax,rax
  0027c: mov    ax,WORD PTR [rdi+0x2]
  00280: cmp    rax,0x3
  00284: jne    0x3a22e
  0028a: mov    rax,QWORD PTR [rdi+0x20]
  0028e: mov    QWORD PTR [rbp-0x48],rax
:00009 %5 = @z: Vec[IvarId(2)]
  00292: mov    rdi,QWORD PTR [rbp-0x28]
  00296: xor    rax,rax
  00299: mov    ax,WORD PTR [rdi+0x2]
  0029d: cmp    rax,0x3
  002a1: jne    0x3a262
  002a7: mov    rax,QWORD PTR [rdi+0x20]
  002ab: mov    QWORD PTR [rbp-0x50],rax
:00010 %4 = %4 * %5                         [Float][Float]
  002af: mov    rdi,QWORD PTR [rbp-0x48]
  002b3: test   rdi,0x1
  002ba: jne    0x3a28a
  002c0: test   rdi,0x2
  002c7: je     0x303
  002cd: xorps  xmm3,xmm3
  002d0: movabs rax,0x8000000000000002
  002da: cmp    rdi,rax
  002dd: je     0x315
  002e3: mov    rax,rdi
  002e6: sar    rax,0x3f
  002ea: add    rax,0x2
  002ee: and    rdi,0xfffffffffffffffc
  002f2: or     rdi,rax
  002f5: rol    rdi,0x3d
  002f9: movq   xmm3,rdi
  002fe: jmp    0x315
  00303: call   0xffff72ac
  00308: test   rax,rax
  0030b: je     0x3a28a
  00311: movq   xmm3,xmm0
  00315: mov    rdi,QWORD PTR [rbp-0x50]
  00319: test   rdi,0x1
  00320: jne    0x3a2a6
  00326: test   rdi,0x2
  0032d: je     0x369
  00333: xorps  xmm4,xmm4
  00336: movabs rax,0x8000000000000002
  00340: cmp    rdi,rax
  00343: je     0x37b
  00349: mov    rax,rdi
  0034c: sar    rax,0x3f
  00350: add    rax,0x2
  00354: and    rdi,0xfffffffffffffffc
  00358: or     rdi,rax
  0035b: rol    rdi,0x3d
  0035f: movq   xmm4,rdi
  00364: jmp    0x37b
  00369: call   0xffff72ac
  0036e: test   rax,rax
  00371: je     0x3a2a6
  00377: movq   xmm4,xmm0
  0037b: mulsd  xmm3,xmm4
:00011 %3 = %3 + %4                         [Float][Float]
  0037f: addsd  xmm2,xmm3
:00012 %1 = %2.call sqrt(%3; 1)             [#<Class:Math>]
:00013 
  00383: movq   xmm0,xmm2
  00387: call   0xffff739f
  0038c: mov    QWORD PTR [rbp-0x40],rax
  00390: mov    rdi,QWORD PTR [rbp-0x38]
  00394: test   rdi,0x7
  0039b: jne    0x3a2c2
  003a1: cmp    DWORD PTR [rdi+0x4],0x20
  003a5: jne    0x3a2c2
  003ab: cmp    DWORD PTR [rip+0xffffffffffff989e],0x26        # 0xffff9c50
  003b2: jne    0x3a2c2
  003b8: mov    r9,0x0
  003bf: sub    rsp,0x20
  003c3: movq   QWORD PTR [rsp],xmm2
  003c8: movq   QWORD PTR [rsp+0x8],xmm3
  003ce: movq   QWORD PTR [rsp+0x10],xmm4
  003d4: mov    rdx,rdi
  003d7: mov    rax,QWORD PTR [rbx]
  003da: lea    rdi,[rsp-0x18]
  003df: mov    QWORD PTR [rdi],rax
  003e2: mov    QWORD PTR [rbx],rdi
  003e5: mov    QWORD PTR [rsp-0x20],0x0
  003ee: mov    QWORD PTR [rsp-0x38],rcx
  003f3: lea    rcx,[rbp-0x40]
  003f7: mov    r8,0x1
  003fe: call   0x3a2de
  00403: lea    rdi,[rbp-0x8]
  00407: mov    QWORD PTR [rbx],rdi
  0040a: movq   xmm2,QWORD PTR [rsp]
  0040f: movq   xmm3,QWORD PTR [rsp+0x8]
  00415: movq   xmm4,QWORD PTR [rsp+0x10]
  0041b: add    rsp,0x20
  0041f: movabs r13,0x5576cd6943b0
  00429: test   rax,rax
  0042c: je     0xffff7273
  00432: mov    QWORD PTR [rbp-0x30],rax
:00015 ret %1
  00436: mov    rax,QWORD PTR [rbp-0x30]
  0043a: leave  
  0043b: ret    
==> start whole compile: initialize FuncId(66) self_class:Ray start:[00000] bytecode:0x5576cd6dfd40
<== finished compile. elapsed:14.9µs
offset:Pos(37416) code: 115 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x40],0x4
  00010: mov    rdi,QWORD PTR [rbp-0x28]
  00014: test   rdi,0x7
  0001b: jne    0x39eb0
  00021: cmp    DWORD PTR [rdi+0x4],0x2b
  00025: jne    0x39eb0
:00000 @org: Ray[IvarId(0)] = %1
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: xor    rax,rax
  00032: mov    ax,WORD PTR [rdi+0x2]
  00036: cmp    rax,0x3
  0003a: jne    0x39ebf
  00040: mov    rax,QWORD PTR [rbp-0x30]
  00044: mov    QWORD PTR [rdi+0x10],rax
:00001 @dir: Ray[IvarId(1)] = %2
  00048: mov    rdi,QWORD PTR [rbp-0x28]
  0004c: xor    rax,rax
  0004f: mov    ax,WORD PTR [rdi+0x2]
  00053: cmp    rax,0x3
  00057: jne    0x39ed9
  0005d: mov    rax,QWORD PTR [rbp-0x38]
  00061: mov    QWORD PTR [rdi+0x18],rax
:00002 %3 = %2
  00065: mov    rax,QWORD PTR [rbp-0x38]
  00069: mov    QWORD PTR [rbp-0x40],rax
:00003 ret %3
  0006d: mov    rax,QWORD PTR [rbp-0x40]
  00071: leave  
  00072: ret    
==> start whole compile: initialize FuncId(67) self_class:Isect start:[00000] bytecode:0x5576cd6983e0
<== finished compile. elapsed:44.6µs
offset:Pos(37531) code: 736 bytes  data: 173 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x60
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x30],rax
  00013: mov    QWORD PTR [rbp-0x38],rax
  00017: mov    QWORD PTR [rbp-0x40],rax
  0001b: mov    QWORD PTR [rbp-0x48],rax
  0001f: mov    QWORD PTR [rbp-0x50],rax
  00023: mov    rdi,QWORD PTR [rbp-0x28]
  00027: test   rdi,0x7
  0002e: jne    0x39e80
  00034: cmp    DWORD PTR [rdi+0x4],0x2d
  00038: jne    0x39e80
:00000 %1 = literal[10000000.0]
  0003e: movq   xmm2,QWORD PTR [rip+0x29f]        # 0x2e5
:00001 @t: Isect[IvarId(0)] = %1
  00046: movq   xmm0,xmm2
  0004a: call   0xffff6ecc
  0004f: mov    QWORD PTR [rbp-0x30],rax
  00053: mov    rdi,QWORD PTR [rbp-0x28]
  00057: xor    rax,rax
  0005a: mov    ax,WORD PTR [rdi+0x2]
  0005e: cmp    rax,0x3
  00062: jne    0x39e8f
  00068: mov    rax,QWORD PTR [rbp-0x30]
  0006c: mov    QWORD PTR [rdi+0x10],rax
:00002 %1 = literal[false]
  00070: mov    rax,0x14
  00077: mov    QWORD PTR [rbp-0x30],rax
:00003 @hit: Isect[IvarId(1)] = %1
  0007b: mov    rdi,QWORD PTR [rbp-0x28]
  0007f: xor    rax,rax
  00082: mov    ax,WORD PTR [rdi+0x2]
  00086: cmp    rax,0x3
  0008a: jne    0x39ebb
  00090: mov    rax,QWORD PTR [rbp-0x30]
  00094: mov    QWORD PTR [rdi+0x18],rax
:00004 %2 = const[Vec]                      [Vec]
  00098: mov    rax,QWORD PTR [rip+0xffffffffffff96e6]        # 0xffff9785
  0009f: cmp    rax,QWORD PTR [rip+0x25f]        # 0x305
  000a6: jne    0x39ed5
  000ac: mov    rax,QWORD PTR [rip+0x242]        # 0x2f5
  000b3: mov    QWORD PTR [rbp-0x38],rax
:00005 %3 = literal[0.0]
  000b7: movq   xmm2,QWORD PTR [rip+0x256]        # 0x315
:00006 %4 = literal[0.0]
  000bf: movq   xmm3,QWORD PTR [rip+0x25e]        # 0x325
:00007 %5 = literal[0.0]
  000c7: movq   xmm4,QWORD PTR [rip+0x266]        # 0x335
:00008 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
:00009 
  000cf: movq   xmm0,xmm2
  000d3: call   0xffff6ecc
  000d8: mov    QWORD PTR [rbp-0x40],rax
  000dc: movq   xmm0,xmm3
  000e0: call   0xffff6ecc
  000e5: mov    QWORD PTR [rbp-0x48],rax
  000e9: movq   xmm0,xmm4
  000ed: call   0xffff6ecc
  000f2: mov    QWORD PTR [rbp-0x50],rax
  000f6: mov    rdi,QWORD PTR [rbp-0x38]
  000fa: test   rdi,0x7
  00101: jne    0x39f1b
  00107: cmp    DWORD PTR [rdi+0x4],0x26
  0010b: jne    0x39f1b
  00111: cmp    DWORD PTR [rip+0xffffffffffff9665],0x26        # 0xffff977d
  00118: jne    0x39f1b
  0011e: mov    r9,0x0
  00125: sub    rsp,0x20
  00129: movq   QWORD PTR [rsp],xmm2
  0012e: movq   QWORD PTR [rsp+0x8],xmm3
  00134: movq   QWORD PTR [rsp+0x10],xmm4
  0013a: mov    rdx,rdi
  0013d: mov    rax,QWORD PTR [rbx]
  00140: lea    rdi,[rsp-0x18]
  00145: mov    QWORD PTR [rdi],rax
  00148: mov    QWORD PTR [rbx],rdi
  0014b: mov    QWORD PTR [rsp-0x20],0x0
  00154: mov    QWORD PTR [rsp-0x38],rcx
  00159: lea    rcx,[rbp-0x40]
  0015d: mov    r8,0x3
  00164: call   0x39f2a
  00169: lea    rdi,[rbp-0x8]
  0016d: mov    QWORD PTR [rbx],rdi
  00170: movq   xmm2,QWORD PTR [rsp]
  00175: movq   xmm3,QWORD PTR [rsp+0x8]
  0017b: movq   xmm4,QWORD PTR [rsp+0x10]
  00181: add    rsp,0x20
  00185: movabs r13,0x5576cd698480
  0018f: test   rax,rax
  00192: je     0xffff6da0
  00198: mov    QWORD PTR [rbp-0x30],rax
:00011 @pl: Isect[IvarId(2)] = %1
  0019c: mov    rdi,QWORD PTR [rbp-0x28]
  001a0: xor    rax,rax
  001a3: mov    ax,WORD PTR [rdi+0x2]
  001a7: cmp    rax,0x3
  001ab: jne    0x39f5c
  001b1: mov    rax,QWORD PTR [rbp-0x30]
  001b5: mov    QWORD PTR [rdi+0x20],rax
:00012 %2 = const[Vec]                      [Vec]
  001b9: mov    rax,QWORD PTR [rip+0xffffffffffff95c5]        # 0xffff9785
  001c0: cmp    rax,QWORD PTR [rip+0x18e]        # 0x355
  001c7: jne    0x39fa0
  001cd: mov    rax,QWORD PTR [rip+0x171]        # 0x345
  001d4: mov    QWORD PTR [rbp-0x38],rax
:00013 %3 = literal[0.0]
  001d8: movq   xmm2,QWORD PTR [rip+0x185]        # 0x365
:00014 %4 = literal[0.0]
  001e0: movq   xmm3,QWORD PTR [rip+0x18d]        # 0x375
:00015 %5 = literal[0.0]
  001e8: movq   xmm4,QWORD PTR [rip+0x195]        # 0x385
:00016 %1 = %2.call new(%3; 3)              [#<Class:Vec>]
:00017 
  001f0: movq   xmm0,xmm2
  001f4: call   0xffff6ecc
  001f9: mov    QWORD PTR [rbp-0x40],rax
  001fd: movq   xmm0,xmm3
  00201: call   0xffff6ecc
  00206: mov    QWORD PTR [rbp-0x48],rax
  0020a: movq   xmm0,xmm4
  0020e: call   0xffff6ecc
  00213: mov    QWORD PTR [rbp-0x50],rax
  00217: mov    rdi,QWORD PTR [rbp-0x38]
  0021b: test   rdi,0x7
  00222: jne    0x3a010
  00228: cmp    DWORD PTR [rdi+0x4],0x26
  0022c: jne    0x3a010
  00232: cmp    DWORD PTR [rip+0xffffffffffff9544],0x26        # 0xffff977d
  00239: jne    0x3a010
  0023f: mov    r9,0x0
  00246: sub    rsp,0x20
  0024a: movq   QWORD PTR [rsp],xmm2
  0024f: movq   QWORD PTR [rsp+0x8],xmm3
  00255: movq   QWORD PTR [rsp+0x10],xmm4
  0025b: mov    rdx,rdi
  0025e: mov    rax,QWORD PTR [rbx]
  00261: lea    rdi,[rsp-0x18]
  00266: mov    QWORD PTR [rdi],rax
  00269: mov    QWORD PTR [rbx],rdi
  0026c: mov    QWORD PTR [rsp-0x20],0x0
  00275: mov    QWORD PTR [rsp-0x38],rcx
  0027a: lea    rcx,[rbp-0x40]
  0027e: mov    r8,0x3
  00285: call   0x3a01f
  0028a: lea    rdi,[rbp-0x8]
  0028e: mov    QWORD PTR [rbx],rdi
  00291: movq   xmm2,QWORD PTR [rsp]
  00296: movq   xmm3,QWORD PTR [rsp+0x8]
  0029c: movq   xmm4,QWORD PTR [rsp+0x10]
  002a2: add    rsp,0x20
  002a6: movabs r13,0x5576cd698500
  002b0: test   rax,rax
  002b3: je     0xffff6da0
  002b9: mov    QWORD PTR [rbp-0x30],rax
:00019 @n: Isect[IvarId(3)] = %1
  002bd: mov    rdi,QWORD PTR [rbp-0x28]
  002c1: xor    rax,rax
  002c4: mov    ax,WORD PTR [rdi+0x2]
  002c8: cmp    rax,0x3
  002cc: jne    0x3a051
  002d2: mov    rax,QWORD PTR [rbp-0x30]
  002d6: mov    QWORD PTR [rdi+0x28],rax
:00020 ret %1
  002da: mov    rax,QWORD PTR [rbp-0x30]
  002de: leave  
  002df: ret    
==> start whole compile: intersect FuncId(65) self_class:Plane start:[00000] bytecode:0x5576cd699ae0
<== finished compile. elapsed:264.9µs
offset:Pos(38440) code: 6235 bytes  data: 261 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xa0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x40],rax
  00016:    	mov    QWORD PTR [rbp-0x48],rax
  0001a:    	mov    QWORD PTR [rbp-0x50],rax
  0001e:    	mov    QWORD PTR [rbp-0x58],rax
  00022:    	mov    QWORD PTR [rbp-0x60],rax
  00026:    	mov    QWORD PTR [rbp-0x68],rax
  0002a:    	mov    QWORD PTR [rbp-0x70],rax
  0002e:    	mov    QWORD PTR [rbp-0x78],rax
  00032:    	mov    QWORD PTR [rbp-0x80],rax
  00036: ff 	mov    QWORD PTR [rbp-0x88],rax
  0003d: ff 	mov    QWORD PTR [rbp-0x90],rax
  00044:    	mov    rdi,QWORD PTR [rbp-0x28]
  00048: 00 	test   rdi,0x7
  0004f:    	jne    0x39d08
  00055:    	cmp    DWORD PTR [rdi+0x4],0x29
  00059:    	jne    0x39d08
:00000 %7 = @p: Plane[IvarId(0)]
  0005f:    	mov    rdi,QWORD PTR [rbp-0x28]
  00063:    	xor    rax,rax
  00066:    	mov    ax,WORD PTR [rdi+0x2]
  0006a:    	cmp    rax,0x3
  0006e:    	jne    0x39d17
  00074:    	mov    rax,QWORD PTR [rdi+0x10]
  00078:    	mov    QWORD PTR [rbp-0x60],rax
:00001 %8 = @n: Plane[IvarId(1)]
  0007c:    	mov    rdi,QWORD PTR [rbp-0x28]
  00080:    	xor    rax,rax
  00083:    	mov    ax,WORD PTR [rdi+0x2]
  00087:    	cmp    rax,0x3
  0008b:    	jne    0x39d2d
  00091:    	mov    rax,QWORD PTR [rdi+0x18]
  00095:    	mov    QWORD PTR [rbp-0x68],rax
:00002 %3 = %7.call vdot(%8; 1)             [Vec]
:00003 
  00099:    	mov    rdi,QWORD PTR [rbp-0x60]
  0009d: 00 	test   rdi,0x7
  000a4:    	jne    0x39d43
  000aa:    	cmp    DWORD PTR [rdi+0x4],0x25
  000ae:    	jne    0x39d43
  000b4: 26 	cmp    DWORD PTR [rip+0xffffffffffff9335],0x26        # 0xffff93f0
  000bb:    	jne    0x39d43
  000c1:    	mov    rax,QWORD PTR [rbx]
  000c4:    	lea    rdi,[rsp-0x18]
  000c9:    	mov    QWORD PTR [rdi],rax
  000cc:    	mov    QWORD PTR [rbx],rdi
  000cf: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000d8:    	mov    QWORD PTR [rsp-0x38],rcx
  000dd:    	mov    rax,QWORD PTR [rbp-0x60]
  000e1:    	mov    QWORD PTR [rsp-0x38],rax
  000e6: 00 	mov    rdi,0x1
  000ed:    	mov    rax,QWORD PTR [rbp-0x68]
  000f1:    	mov    QWORD PTR [rsp-0x40],rax
  000f6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  000ff: 05 	movabs rax,0x100050000003b
  00109:    	mov    QWORD PTR [rsp-0x28],rax
  0010e: 76 	movabs r13,0x5576cd6dfc10
  00118:    	call   0xffffa0ef
  0011d:    	lea    rdi,[rbp-0x8]
  00121:    	mov    QWORD PTR [rbx],rdi
  00124: 76 	movabs r13,0x5576cd699b20
  0012e:    	test   rax,rax
  00131:    	je     0xffff6a13
  00137:    	mov    QWORD PTR [rbp-0x40],rax
:00005 %3 = neg %3                          [Float]
  0013b:    	mov    rdi,QWORD PTR [rbp-0x40]
  0013f: 00 	test   rdi,0x1
  00146:    	jne    0x39d52
  0014c: 00 	test   rdi,0x2
  00153:    	je     0x18f
  00159:    	xorps  xmm2,xmm2
  0015c: 00 	movabs rax,0x8000000000000002
  00166:    	cmp    rdi,rax
  00169:    	je     0x1a1
  0016f:    	mov    rax,rdi
  00172:    	sar    rax,0x3f
  00176:    	add    rax,0x2
  0017a:    	and    rdi,0xfffffffffffffffc
  0017e:    	or     rdi,rax
  00181:    	rol    rdi,0x3d
  00185:    	movq   xmm2,rdi
  0018a:    	jmp    0x1a1
  0018f:    	call   0xffff6a4c
  00194:    	test   rax,rax
  00197:    	je     0x39d52
  0019d:    	movq   xmm2,xmm0
  001a1: 00 	xorps  xmm2,XMMWORD PTR [rip+0x16c0]        # 0x1868
:00006 %7 = %1.call dir()                   [Ray]
:00007 
  001a8:    	mov    rdi,QWORD PTR [rbp-0x30]
  001ac: 00 	test   rdi,0x7
  001b3:    	jne    0x39d61
  001b9:    	cmp    DWORD PTR [rdi+0x4],0x2b
  001bd:    	jne    0x39d61
  001c3: 26 	cmp    DWORD PTR [rip+0xffffffffffff9226],0x26        # 0xffff93f0
  001ca:    	jne    0x39d61
  001d0:    	mov    esi,DWORD PTR [rip+0x169e]        # 0x1874
  001d6:    	cmp    esi,0xffffffff
  001d9:    	je     0x39d7d
  001df:    	xor    rax,rax
  001e2:    	mov    ax,WORD PTR [rdi+0x2]
  001e6:    	cmp    rax,0x3
  001ea:    	jne    0x203
  001f0:    	cmp    esi,0x6
  001f3:    	jge    0x203
  001f9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  001fe:    	jmp    0x221
  00203:    	sub    rsp,0x10
  00207:    	movq   QWORD PTR [rsp],xmm2
  0020c: 76 	movabs rax,0x5576cccb62a0
  00216:    	call   rax
  00218:    	movq   xmm2,QWORD PTR [rsp]
  0021d:    	add    rsp,0x10
  00221:    	mov    QWORD PTR [rbp-0x60],rax
:00009 %8 = @n: Plane[IvarId(1)]
  00225:    	mov    rdi,QWORD PTR [rbp-0x28]
  00229:    	xor    rax,rax
  0022c:    	mov    ax,WORD PTR [rdi+0x2]
  00230:    	cmp    rax,0x3
  00234:    	jne    0x39db8
  0023a:    	mov    rax,QWORD PTR [rdi+0x18]
  0023e:    	mov    QWORD PTR [rbp-0x68],rax
:00010 %4 = %7.call vdot(%8; 1)             [Vec]
:00011 
  00242:    	mov    rdi,QWORD PTR [rbp-0x60]
  00246: 00 	test   rdi,0x7
  0024d:    	jne    0x39de0
  00253:    	cmp    DWORD PTR [rdi+0x4],0x25
  00257:    	jne    0x39de0
  0025d: 26 	cmp    DWORD PTR [rip+0xffffffffffff918c],0x26        # 0xffff93f0
  00264:    	jne    0x39de0
  0026a:    	sub    rsp,0x10
  0026e:    	movq   QWORD PTR [rsp],xmm2
  00273:    	mov    rax,QWORD PTR [rbx]
  00276:    	lea    rdi,[rsp-0x18]
  0027b:    	mov    QWORD PTR [rdi],rax
  0027e:    	mov    QWORD PTR [rbx],rdi
  00281: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0028a:    	mov    QWORD PTR [rsp-0x38],rcx
  0028f:    	mov    rax,QWORD PTR [rbp-0x60]
  00293:    	mov    QWORD PTR [rsp-0x38],rax
  00298: 00 	mov    rdi,0x1
  0029f:    	mov    rax,QWORD PTR [rbp-0x68]
  002a3:    	mov    QWORD PTR [rsp-0x40],rax
  002a8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  002b1: 05 	movabs rax,0x100050000003b
  002bb:    	mov    QWORD PTR [rsp-0x28],rax
  002c0: 76 	movabs r13,0x5576cd6dfc10
  002ca:    	call   0xffffa0ef
  002cf:    	lea    rdi,[rbp-0x8]
  002d3:    	mov    QWORD PTR [rbx],rdi
  002d6:    	movq   xmm2,QWORD PTR [rsp]
  002db:    	add    rsp,0x10
  002df: 76 	movabs r13,0x5576cd699ba0
  002e9:    	test   rax,rax
  002ec:    	je     0xffff6a13
  002f2:    	mov    QWORD PTR [rbp-0x48],rax
:00013 %5 = %4
  002f6:    	mov    rax,QWORD PTR [rbp-0x48]
  002fa:    	mov    QWORD PTR [rbp-0x50],rax
:00014 %7 = literal[0.0]
  002fe: 00 	movq   xmm3,QWORD PTR [rip+0x1572]        # 0x1878
:00015 _%7 = %4 < %7                        [Float][Float]
:00016 condnotbr _%7 =>:00020
  00306:    	mov    rdi,QWORD PTR [rbp-0x48]
  0030a: 00 	test   rdi,0x1
  00311:    	jne    0x39dfc
  00317: 00 	test   rdi,0x2
  0031e:    	je     0x35a
  00324:    	xorps  xmm4,xmm4
  00327: 00 	movabs rax,0x8000000000000002
  00331:    	cmp    rdi,rax
  00334:    	je     0x36c
  0033a:    	mov    rax,rdi
  0033d:    	sar    rax,0x3f
  00341:    	add    rax,0x2
  00345:    	and    rdi,0xfffffffffffffffc
  00349:    	or     rdi,rax
  0034c:    	rol    rdi,0x3d
  00350:    	movq   xmm4,rdi
  00355:    	jmp    0x36c
  0035a:    	call   0xffff6a4c
  0035f:    	test   rax,rax
  00362:    	je     0x39dfc
  00368:    	movq   xmm4,xmm0
  0036c:    	ucomisd xmm4,xmm3
  00370:    	jae    0x39e25
:00017 %5 = %4
:00018 %5 = neg %5                          [Integer]
  00376:    	movq   xmm0,xmm4
  0037a:    	call   0xffff6b3f
  0037f:    	mov    QWORD PTR [rbp-0x50],rax
  00383:    	sub    rsp,0x20
  00387:    	movq   QWORD PTR [rsp],xmm2
  0038c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00392:    	movq   QWORD PTR [rsp+0x10],xmm4
  00398:    	mov    rdi,QWORD PTR [rbp-0x50]
  0039c:    	mov    rdx,rdi
  0039f:    	mov    rdi,rbx
  003a2:    	mov    rsi,r12
  003a5: 76 	movabs rax,0x5576cccf2210
  003af:    	call   rax
  003b1:    	movq   xmm2,QWORD PTR [rsp]
  003b6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003bc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003c2:    	add    rsp,0x20
  003c6: 76 	movabs r13,0x5576cd699c10
  003d0:    	test   rax,rax
  003d3:    	je     0xffff6a13
  003d9:    	mov    QWORD PTR [rbp-0x50],rax
:00019 br =>:00020
  003dd:    	jmp    0x39e58
:00020 %7 = literal[1e-17]
  003e2: 00 	movq   xmm3,QWORD PTR [rip+0x149e]        # 0x1888
:00021 _%7 = %5 < %7                        [Float][Float]
:00022 condnotbr _%7 =>:00026
  003ea:    	mov    rdi,QWORD PTR [rbp-0x50]
  003ee: 00 	test   rdi,0x1
  003f5:    	jne    0x39e8b
  003fb: 00 	test   rdi,0x2
  00402:    	je     0x43e
  00408:    	xorps  xmm5,xmm5
  0040b: 00 	movabs rax,0x8000000000000002
  00415:    	cmp    rdi,rax
  00418:    	je     0x450
  0041e:    	mov    rax,rdi
  00421:    	sar    rax,0x3f
  00425:    	add    rax,0x2
  00429:    	and    rdi,0xfffffffffffffffc
  0042d:    	or     rdi,rax
  00430:    	rol    rdi,0x3d
  00434:    	movq   xmm5,rdi
  00439:    	jmp    0x450
  0043e:    	call   0xffff6a4c
  00443:    	test   rax,rax
  00446:    	je     0x39e8b
  0044c:    	movq   xmm5,xmm0
  00450:    	ucomisd xmm5,xmm3
  00454:    	jae    0x468
:00023 %7 = nil
  0045a: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00024 ret %7
  00462:    	mov    rax,QWORD PTR [rbp-0x60]
  00466:    	leave  
  00467:    	ret    
:00026 %8 = %1.call org()                   [Ray]
:00027 
  00468:    	mov    rdi,QWORD PTR [rbp-0x30]
  0046c: 00 	test   rdi,0x7
  00473:    	jne    0x39eb4
  00479:    	cmp    DWORD PTR [rdi+0x4],0x2b
  0047d:    	jne    0x39eb4
  00483: 26 	cmp    DWORD PTR [rip+0xffffffffffff8f66],0x26        # 0xffff93f0
  0048a:    	jne    0x39eb4
  00490:    	mov    esi,DWORD PTR [rip+0x13fe]        # 0x1894
  00496:    	cmp    esi,0xffffffff
  00499:    	je     0x39edd
  0049f:    	xor    rax,rax
  004a2:    	mov    ax,WORD PTR [rdi+0x2]
  004a6:    	cmp    rax,0x3
  004aa:    	jne    0x4c3
  004b0:    	cmp    esi,0x6
  004b3:    	jge    0x4c3
  004b9:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  004be:    	jmp    0x505
  004c3:    	sub    rsp,0x20
  004c7:    	movq   QWORD PTR [rsp],xmm2
  004cc:    	movq   QWORD PTR [rsp+0x8],xmm3
  004d2:    	movq   QWORD PTR [rsp+0x10],xmm4
  004d8:    	movq   QWORD PTR [rsp+0x18],xmm5
  004de: 76 	movabs rax,0x5576cccb62a0
  004e8:    	call   rax
  004ea:    	movq   xmm2,QWORD PTR [rsp]
  004ef:    	movq   xmm3,QWORD PTR [rsp+0x8]
  004f5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  004fb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00501:    	add    rsp,0x20
  00505:    	mov    QWORD PTR [rbp-0x68],rax
:00029 %9 = @n: Plane[IvarId(1)]
  00509:    	mov    rdi,QWORD PTR [rbp-0x28]
  0050d:    	xor    rax,rax
  00510:    	mov    ax,WORD PTR [rdi+0x2]
  00514:    	cmp    rax,0x3
  00518:    	jne    0x39f3c
  0051e:    	mov    rax,QWORD PTR [rdi+0x18]
  00522:    	mov    QWORD PTR [rbp-0x70],rax
:00030 %7 = %8.call vdot(%9; 1)             [Vec]
:00031 
  00526:    	mov    rdi,QWORD PTR [rbp-0x68]
  0052a: 00 	test   rdi,0x7
  00531:    	jne    0x39f88
  00537:    	cmp    DWORD PTR [rdi+0x4],0x25
  0053b:    	jne    0x39f88
  00541: 26 	cmp    DWORD PTR [rip+0xffffffffffff8ea8],0x26        # 0xffff93f0
  00548:    	jne    0x39f88
  0054e:    	sub    rsp,0x20
  00552:    	movq   QWORD PTR [rsp],xmm2
  00557:    	movq   QWORD PTR [rsp+0x8],xmm4
  0055d:    	movq   QWORD PTR [rsp+0x10],xmm5
  00563:    	mov    rax,QWORD PTR [rbx]
  00566:    	lea    rdi,[rsp-0x18]
  0056b:    	mov    QWORD PTR [rdi],rax
  0056e:    	mov    QWORD PTR [rbx],rdi
  00571: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0057a:    	mov    QWORD PTR [rsp-0x38],rcx
  0057f:    	mov    rax,QWORD PTR [rbp-0x68]
  00583:    	mov    QWORD PTR [rsp-0x38],rax
  00588: 00 	mov    rdi,0x1
  0058f:    	mov    rax,QWORD PTR [rbp-0x70]
  00593:    	mov    QWORD PTR [rsp-0x40],rax
  00598: 00 	mov    QWORD PTR [rsp-0x30],0x0
  005a1: 05 	movabs rax,0x100050000003b
  005ab:    	mov    QWORD PTR [rsp-0x28],rax
  005b0: 76 	movabs r13,0x5576cd6dfc10
  005ba:    	call   0xffffa0ef
  005bf:    	lea    rdi,[rbp-0x8]
  005c3:    	mov    QWORD PTR [rbx],rdi
  005c6:    	movq   xmm2,QWORD PTR [rsp]
  005cb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  005d1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  005d7:    	add    rsp,0x20
  005db: 76 	movabs r13,0x5576cd699ce0
  005e5:    	test   rax,rax
  005e8:    	je     0xffff6a13
  005ee:    	mov    QWORD PTR [rbp-0x60],rax
:00033 %7 = %7 + %3                         [Float][Float]
  005f2:    	mov    rdi,QWORD PTR [rbp-0x60]
  005f6: 00 	test   rdi,0x1
  005fd:    	jne    0x39fa4
  00603: 00 	test   rdi,0x2
  0060a:    	je     0x646
  00610:    	xorps  xmm3,xmm3
  00613: 00 	movabs rax,0x8000000000000002
  0061d:    	cmp    rdi,rax
  00620:    	je     0x658
  00626:    	mov    rax,rdi
  00629:    	sar    rax,0x3f
  0062d:    	add    rax,0x2
  00631:    	and    rdi,0xfffffffffffffffc
  00635:    	or     rdi,rax
  00638:    	rol    rdi,0x3d
  0063c:    	movq   xmm3,rdi
  00641:    	jmp    0x658
  00646:    	call   0xffff6a4c
  0064b:    	test   rax,rax
  0064e:    	je     0x39fa4
  00654:    	movq   xmm3,xmm0
  00658:    	addsd  xmm3,xmm2
:00034 %7 = neg %7                          [Float]
  0065c: 00 	xorps  xmm3,XMMWORD PTR [rip+0x1235]        # 0x1898
:00035 %6 = %7 / %4                         [Float][Float]
  00663:    	movq   xmm6,xmm3
  00667:    	movq   rax,xmm4
  0066c:    	test   rax,rax
  0066f:    	je     0xffff6a38
  00675:    	divsd  xmm6,xmm4
:00036 %8 = literal[0.0]
  00679: 00 	movq   xmm7,QWORD PTR [rip+0x1227]        # 0x18a8
:00037 %7 = %6 > %8                         [Float][Float]
  00681:    	xor    rax,rax
  00684:    	ucomisd xmm6,xmm7
  00688:    	seta   al
  0068c:    	shl    rax,0x3
  00690:    	or     rax,0x14
  00694:    	mov    QWORD PTR [rbp-0x60],rax
:00038 condnotbr %7 =>:00043
  00698:    	mov    rax,QWORD PTR [rbp-0x60]
  0069c:    	or     rax,0x10
  006a0:    	cmp    rax,0x14
  006a4:    	je     0x3a082
:00039 %8 = %2.call t()                     [<INVALID>]
:00040 
  006aa:    	sub    rsp,0x20
  006ae:    	movq   QWORD PTR [rsp],xmm2
  006b3:    	movq   QWORD PTR [rsp+0x8],xmm4
  006b9:    	movq   QWORD PTR [rsp+0x10],xmm5
  006bf:    	movq   QWORD PTR [rsp+0x18],xmm6
  006c5:    	mov    rdi,QWORD PTR [rbp-0x38]
  006c9: 76 	movabs rax,0x5576ccd01d00
  006d3:    	call   rax
  006d5:    	mov    r15d,eax
  006d8: 00 	cmp    r15d,DWORD PTR [rip+0x11d5]        # 0x18b4
  006df:    	jne    0x39fc0
  006e5:    	mov    eax,DWORD PTR [rip+0xffffffffffff8d05]        # 0xffff93f0
  006eb:    	cmp    DWORD PTR [rip+0x11bf],eax        # 0x18b0
  006f1:    	jne    0x39fc0
  006f7:    	mov    rax,QWORD PTR [rbx]
  006fa:    	lea    rdi,[rsp-0x18]
  006ff:    	mov    QWORD PTR [rdi],rax
  00702:    	mov    QWORD PTR [rbx],rdi
  00705: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0070e:    	mov    QWORD PTR [rsp-0x38],rcx
  00713:    	mov    rax,QWORD PTR [rbp-0x38]
  00717:    	mov    QWORD PTR [rsp-0x38],rax
  0071c: 00 	mov    rdi,0x0
  00723: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0072c: 00 	movabs rax,0x0
  00736:    	mov    QWORD PTR [rsp-0x28],rax
  0073b: 00 	movabs r13,0x0
  00745:    	call   0xffff69d8
  0074a:    	lea    rdi,[rbp-0x8]
  0074e:    	mov    QWORD PTR [rbx],rdi
  00751:    	movq   xmm2,QWORD PTR [rsp]
  00756:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0075c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00762:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00768:    	add    rsp,0x20
  0076c:    	test   rax,rax
  0076f:    	je     0x3a02c
  00775:    	mov    QWORD PTR [rbp-0x68],rax
:00042 %7 = %6 < %8                         [Integer][Integer]
  00779:    	movq   xmm0,xmm6
  0077d:    	call   0xffff6b3f
  00782:    	mov    QWORD PTR [rbp-0x58],rax
  00786:    	mov    rdi,QWORD PTR [rbp-0x58]
  0078a:    	mov    rsi,QWORD PTR [rbp-0x68]
  0078e: 00 	test   rdi,0x1
  00795:    	je     0x3a03b
  0079b: 00 	test   rsi,0x1
  007a2:    	je     0x3a03b
  007a8:    	xor    rax,rax
  007ab:    	cmp    rdi,rsi
  007ae:    	setl   al
  007b2:    	shl    rax,0x3
  007b6:    	or     rax,0x14
  007ba:    	mov    QWORD PTR [rbp-0x60],rax
  007be:    	jmp    0x3a0c2
:00043 condnotbr %7 =>:00105
  007c3:    	mov    rax,QWORD PTR [rbp-0x60]
  007c7:    	or     rax,0x10
  007cb:    	cmp    rax,0x14
  007cf:    	je     0x3aa40
:00044 %7 = literal[true]
  007d5: 00 	mov    rax,0x1c
  007dc:    	mov    QWORD PTR [rbp-0x60],rax
:00045 _ = %2.call hit=(%7; 1)              [<INVALID>]
:00046 
  007e0:    	sub    rsp,0x20
  007e4:    	movq   QWORD PTR [rsp],xmm2
  007e9:    	movq   QWORD PTR [rsp+0x8],xmm4
  007ef:    	movq   QWORD PTR [rsp+0x10],xmm5
  007f5:    	movq   QWORD PTR [rsp+0x18],xmm6
  007fb:    	mov    rdi,QWORD PTR [rbp-0x38]
  007ff: 76 	movabs rax,0x5576ccd01d00
  00809:    	call   rax
  0080b:    	mov    r15d,eax
  0080e: 00 	cmp    r15d,DWORD PTR [rip+0x10a7]        # 0x18bc
  00815:    	jne    0x3a0e8
  0081b:    	mov    eax,DWORD PTR [rip+0xffffffffffff8bcf]        # 0xffff93f0
  00821:    	cmp    DWORD PTR [rip+0x1091],eax        # 0x18b8
  00827:    	jne    0x3a0e8
  0082d:    	mov    rax,QWORD PTR [rbx]
  00830:    	lea    rdi,[rsp-0x18]
  00835:    	mov    QWORD PTR [rdi],rax
  00838:    	mov    QWORD PTR [rbx],rdi
  0083b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00844:    	mov    QWORD PTR [rsp-0x38],rcx
  00849:    	mov    rax,QWORD PTR [rbp-0x38]
  0084d:    	mov    QWORD PTR [rsp-0x38],rax
  00852: 00 	mov    rdi,0x1
  00859:    	mov    rax,QWORD PTR [rbp-0x60]
  0085d:    	mov    QWORD PTR [rsp-0x40],rax
  00862: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0086b: 00 	movabs rax,0x0
  00875:    	mov    QWORD PTR [rsp-0x28],rax
  0087a: 00 	movabs r13,0x0
  00884:    	call   0xffff69d8
  00889:    	lea    rdi,[rbp-0x8]
  0088d:    	mov    QWORD PTR [rbx],rdi
  00890:    	movq   xmm2,QWORD PTR [rsp]
  00895:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0089b:    	movq   xmm5,QWORD PTR [rsp+0x10]
  008a1:    	movq   xmm6,QWORD PTR [rsp+0x18]
  008a7:    	add    rsp,0x20
  008ab:    	test   rax,rax
  008ae:    	je     0x3a154
:00048 _ = %2.call t=(%6; 1)                [<INVALID>]
:00049 
  008b4:    	sub    rsp,0x20
  008b8:    	movq   QWORD PTR [rsp],xmm2
  008bd:    	movq   QWORD PTR [rsp+0x8],xmm4
  008c3:    	movq   QWORD PTR [rsp+0x10],xmm5
  008c9:    	movq   QWORD PTR [rsp+0x18],xmm6
  008cf:    	mov    rdi,QWORD PTR [rbp-0x38]
  008d3: 76 	movabs rax,0x5576ccd01d00
  008dd:    	call   rax
  008df:    	mov    r15d,eax
  008e2: 00 	cmp    r15d,DWORD PTR [rip+0xfdb]        # 0x18c4
  008e9:    	jne    0x3a163
  008ef:    	mov    eax,DWORD PTR [rip+0xffffffffffff8afb]        # 0xffff93f0
  008f5:    	cmp    DWORD PTR [rip+0xfc5],eax        # 0x18c0
  008fb:    	jne    0x3a163
  00901:    	mov    rax,QWORD PTR [rbx]
  00904:    	lea    rdi,[rsp-0x18]
  00909:    	mov    QWORD PTR [rdi],rax
  0090c:    	mov    QWORD PTR [rbx],rdi
  0090f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00918:    	mov    QWORD PTR [rsp-0x38],rcx
  0091d:    	mov    rax,QWORD PTR [rbp-0x38]
  00921:    	mov    QWORD PTR [rsp-0x38],rax
  00926: 00 	mov    rdi,0x1
  0092d:    	mov    rax,QWORD PTR [rbp-0x58]
  00931:    	mov    QWORD PTR [rsp-0x40],rax
  00936: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0093f: 00 	movabs rax,0x0
  00949:    	mov    QWORD PTR [rsp-0x28],rax
  0094e: 00 	movabs r13,0x0
  00958:    	call   0xffff69d8
  0095d:    	lea    rdi,[rbp-0x8]
  00961:    	mov    QWORD PTR [rbx],rdi
  00964:    	movq   xmm2,QWORD PTR [rsp]
  00969:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0096f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00975:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0097b:    	add    rsp,0x20
  0097f:    	test   rax,rax
  00982:    	je     0x3a1cf
:00051 %7 = @n: <INVALID>[IvarId(0)]
  00988:    	mov    rdi,QWORD PTR [rbp-0x28]
  0098c:    	sub    rsp,0x20
  00990:    	movq   QWORD PTR [rsp],xmm2
  00995:    	movq   QWORD PTR [rsp+0x8],xmm4
  0099b:    	movq   QWORD PTR [rsp+0x10],xmm5
  009a1:    	movq   QWORD PTR [rsp+0x18],xmm6
  009a7: 00 	mov    rsi,0x82
  009ae:    	mov    rdx,r12
  009b1: 76 	movabs rax,0x5576cccd6650
  009bb:    	call   rax
  009bd:    	movq   xmm2,QWORD PTR [rsp]
  009c2:    	movq   xmm4,QWORD PTR [rsp+0x8]
  009c8:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009ce:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009d4:    	add    rsp,0x20
  009d8:    	mov    QWORD PTR [rbp-0x60],rax
:00052 _ = %2.call n=(%7; 1)                [<INVALID>]
:00053 
  009dc:    	sub    rsp,0x20
  009e0:    	movq   QWORD PTR [rsp],xmm2
  009e5:    	movq   QWORD PTR [rsp+0x8],xmm4
  009eb:    	movq   QWORD PTR [rsp+0x10],xmm5
  009f1:    	movq   QWORD PTR [rsp+0x18],xmm6
  009f7:    	mov    rdi,QWORD PTR [rbp-0x38]
  009fb: 76 	movabs rax,0x5576ccd01d00
  00a05:    	call   rax
  00a07:    	mov    r15d,eax
  00a0a: 00 	cmp    r15d,DWORD PTR [rip+0xebb]        # 0x18cc
  00a11:    	jne    0x3a1de
  00a17:    	mov    eax,DWORD PTR [rip+0xffffffffffff89d3]        # 0xffff93f0
  00a1d:    	cmp    DWORD PTR [rip+0xea5],eax        # 0x18c8
  00a23:    	jne    0x3a1de
  00a29:    	mov    rax,QWORD PTR [rbx]
  00a2c:    	lea    rdi,[rsp-0x18]
  00a31:    	mov    QWORD PTR [rdi],rax
  00a34:    	mov    QWORD PTR [rbx],rdi
  00a37: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00a40:    	mov    QWORD PTR [rsp-0x38],rcx
  00a45:    	mov    rax,QWORD PTR [rbp-0x38]
  00a49:    	mov    QWORD PTR [rsp-0x38],rax
  00a4e: 00 	mov    rdi,0x1
  00a55:    	mov    rax,QWORD PTR [rbp-0x60]
  00a59:    	mov    QWORD PTR [rsp-0x40],rax
  00a5e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00a67: 00 	movabs rax,0x0
  00a71:    	mov    QWORD PTR [rsp-0x28],rax
  00a76: 00 	movabs r13,0x0
  00a80:    	call   0xffff69d8
  00a85:    	lea    rdi,[rbp-0x8]
  00a89:    	mov    QWORD PTR [rbx],rdi
  00a8c:    	movq   xmm2,QWORD PTR [rsp]
  00a91:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00a97:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a9d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00aa3:    	add    rsp,0x20
  00aa7:    	test   rax,rax
  00aaa:    	je     0x3a24a
:00055 %8 = const[Vec]                      [<invalid>]
  00ab0: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff8941]        # 0xffff93f8
  00ab7: 00 	cmp    rax,QWORD PTR [rip+0xe2a]        # 0x18e8
  00abe:    	jne    0x3a259
  00ac4: 00 	mov    rax,QWORD PTR [rip+0xe0d]        # 0x18d8
  00acb:    	mov    QWORD PTR [rbp-0x68],rax
:00056 %10 = %1.call org()                  [<INVALID>]
:00057 
  00acf:    	sub    rsp,0x20
  00ad3:    	movq   QWORD PTR [rsp],xmm2
  00ad8:    	movq   QWORD PTR [rsp+0x8],xmm4
  00ade:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ae4:    	movq   QWORD PTR [rsp+0x18],xmm6
  00aea:    	mov    rdi,QWORD PTR [rbp-0x30]
  00aee: 76 	movabs rax,0x5576ccd01d00
  00af8:    	call   rax
  00afa:    	mov    r15d,eax
  00afd: 00 	cmp    r15d,DWORD PTR [rip+0xdf0]        # 0x18f4
  00b04:    	jne    0x3a2d5
  00b0a:    	mov    eax,DWORD PTR [rip+0xffffffffffff88e0]        # 0xffff93f0
  00b10:    	cmp    DWORD PTR [rip+0xdda],eax        # 0x18f0
  00b16:    	jne    0x3a2d5
  00b1c:    	mov    rax,QWORD PTR [rbx]
  00b1f:    	lea    rdi,[rsp-0x18]
  00b24:    	mov    QWORD PTR [rdi],rax
  00b27:    	mov    QWORD PTR [rbx],rdi
  00b2a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00b33:    	mov    QWORD PTR [rsp-0x38],rcx
  00b38:    	mov    rax,QWORD PTR [rbp-0x30]
  00b3c:    	mov    QWORD PTR [rsp-0x38],rax
  00b41: 00 	mov    rdi,0x0
  00b48: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00b51: 00 	movabs rax,0x0
  00b5b:    	mov    QWORD PTR [rsp-0x28],rax
  00b60: 00 	movabs r13,0x0
  00b6a:    	call   0xffff69d8
  00b6f:    	lea    rdi,[rbp-0x8]
  00b73:    	mov    QWORD PTR [rbx],rdi
  00b76:    	movq   xmm2,QWORD PTR [rsp]
  00b7b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b81:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b87:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b8d:    	add    rsp,0x20
  00b91:    	test   rax,rax
  00b94:    	je     0x3a341
  00b9a:    	mov    QWORD PTR [rbp-0x78],rax
:00059 %9 = %10.call x()                    [<INVALID>]
:00060 
  00b9e:    	sub    rsp,0x20
  00ba2:    	movq   QWORD PTR [rsp],xmm2
  00ba7:    	movq   QWORD PTR [rsp+0x8],xmm4
  00bad:    	movq   QWORD PTR [rsp+0x10],xmm5
  00bb3:    	movq   QWORD PTR [rsp+0x18],xmm6
  00bb9:    	mov    rdi,QWORD PTR [rbp-0x78]
  00bbd: 76 	movabs rax,0x5576ccd01d00
  00bc7:    	call   rax
  00bc9:    	mov    r15d,eax
  00bcc: 00 	cmp    r15d,DWORD PTR [rip+0xd29]        # 0x18fc
  00bd3:    	jne    0x3a350
  00bd9:    	mov    eax,DWORD PTR [rip+0xffffffffffff8811]        # 0xffff93f0
  00bdf:    	cmp    DWORD PTR [rip+0xd13],eax        # 0x18f8
  00be5:    	jne    0x3a350
  00beb:    	mov    rax,QWORD PTR [rbx]
  00bee:    	lea    rdi,[rsp-0x18]
  00bf3:    	mov    QWORD PTR [rdi],rax
  00bf6:    	mov    QWORD PTR [rbx],rdi
  00bf9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00c02:    	mov    QWORD PTR [rsp-0x38],rcx
  00c07:    	mov    rax,QWORD PTR [rbp-0x78]
  00c0b:    	mov    QWORD PTR [rsp-0x38],rax
  00c10: 00 	mov    rdi,0x0
  00c17: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00c20: 00 	movabs rax,0x0
  00c2a:    	mov    QWORD PTR [rsp-0x28],rax
  00c2f: 00 	movabs r13,0x0
  00c39:    	call   0xffff69d8
  00c3e:    	lea    rdi,[rbp-0x8]
  00c42:    	mov    QWORD PTR [rbx],rdi
  00c45:    	movq   xmm2,QWORD PTR [rsp]
  00c4a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00c50:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00c56:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00c5c:    	add    rsp,0x20
  00c60:    	test   rax,rax
  00c63:    	je     0x3a3bc
  00c69:    	mov    QWORD PTR [rbp-0x70],rax
:00062 %11 = %1.call dir()                  [<INVALID>]
:00063 
  00c6d:    	sub    rsp,0x20
  00c71:    	movq   QWORD PTR [rsp],xmm2
  00c76:    	movq   QWORD PTR [rsp+0x8],xmm4
  00c7c:    	movq   QWORD PTR [rsp+0x10],xmm5
  00c82:    	movq   QWORD PTR [rsp+0x18],xmm6
  00c88:    	mov    rdi,QWORD PTR [rbp-0x30]
  00c8c: 76 	movabs rax,0x5576ccd01d00
  00c96:    	call   rax
  00c98:    	mov    r15d,eax
  00c9b: 00 	cmp    r15d,DWORD PTR [rip+0xc62]        # 0x1904
  00ca2:    	jne    0x3a3cb
  00ca8:    	mov    eax,DWORD PTR [rip+0xffffffffffff8742]        # 0xffff93f0
  00cae:    	cmp    DWORD PTR [rip+0xc4c],eax        # 0x1900
  00cb4:    	jne    0x3a3cb
  00cba:    	mov    rax,QWORD PTR [rbx]
  00cbd:    	lea    rdi,[rsp-0x18]
  00cc2:    	mov    QWORD PTR [rdi],rax
  00cc5:    	mov    QWORD PTR [rbx],rdi
  00cc8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cd1:    	mov    QWORD PTR [rsp-0x38],rcx
  00cd6:    	mov    rax,QWORD PTR [rbp-0x30]
  00cda:    	mov    QWORD PTR [rsp-0x38],rax
  00cdf: 00 	mov    rdi,0x0
  00ce6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00cef: 00 	movabs rax,0x0
  00cf9:    	mov    QWORD PTR [rsp-0x28],rax
  00cfe: 00 	movabs r13,0x0
  00d08:    	call   0xffff69d8
  00d0d:    	lea    rdi,[rbp-0x8]
  00d11:    	mov    QWORD PTR [rbx],rdi
  00d14:    	movq   xmm2,QWORD PTR [rsp]
  00d19:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d1f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d25:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00d2b:    	add    rsp,0x20
  00d2f:    	test   rax,rax
  00d32:    	je     0x3a437
  00d38:    	mov    QWORD PTR [rbp-0x80],rax
:00065 %10 = %11.call x()                   [<INVALID>]
:00066 
  00d3c:    	sub    rsp,0x20
  00d40:    	movq   QWORD PTR [rsp],xmm2
  00d45:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d4b:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d51:    	movq   QWORD PTR [rsp+0x18],xmm6
  00d57:    	mov    rdi,QWORD PTR [rbp-0x80]
  00d5b: 76 	movabs rax,0x5576ccd01d00
  00d65:    	call   rax
  00d67:    	mov    r15d,eax
  00d6a: 00 	cmp    r15d,DWORD PTR [rip+0xb9b]        # 0x190c
  00d71:    	jne    0x3a446
  00d77:    	mov    eax,DWORD PTR [rip+0xffffffffffff8673]        # 0xffff93f0
  00d7d:    	cmp    DWORD PTR [rip+0xb85],eax        # 0x1908
  00d83:    	jne    0x3a446
  00d89:    	mov    rax,QWORD PTR [rbx]
  00d8c:    	lea    rdi,[rsp-0x18]
  00d91:    	mov    QWORD PTR [rdi],rax
  00d94:    	mov    QWORD PTR [rbx],rdi
  00d97: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00da0:    	mov    QWORD PTR [rsp-0x38],rcx
  00da5:    	mov    rax,QWORD PTR [rbp-0x80]
  00da9:    	mov    QWORD PTR [rsp-0x38],rax
  00dae: 00 	mov    rdi,0x0
  00db5: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00dbe: 00 	movabs rax,0x0
  00dc8:    	mov    QWORD PTR [rsp-0x28],rax
  00dcd: 00 	movabs r13,0x0
  00dd7:    	call   0xffff69d8
  00ddc:    	lea    rdi,[rbp-0x8]
  00de0:    	mov    QWORD PTR [rbx],rdi
  00de3:    	movq   xmm2,QWORD PTR [rsp]
  00de8:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00dee:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00df4:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00dfa:    	add    rsp,0x20
  00dfe:    	test   rax,rax
  00e01:    	je     0x3a4b2
  00e07:    	mov    QWORD PTR [rbp-0x78],rax
:00068 %10 = %6 * %10                       [Integer][Integer]
  00e0b:    	mov    rdi,QWORD PTR [rbp-0x58]
  00e0f:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e13:    	sub    rsp,0x20
  00e17:    	movq   QWORD PTR [rsp],xmm2
  00e1c:    	movq   QWORD PTR [rsp+0x8],xmm4
  00e22:    	movq   QWORD PTR [rsp+0x10],xmm5
  00e28:    	movq   QWORD PTR [rsp+0x18],xmm6
  00e2e:    	mov    rdx,rdi
  00e31:    	mov    rcx,rsi
  00e34:    	mov    rdi,rbx
  00e37:    	mov    rsi,r12
  00e3a: 76 	movabs rax,0x5576cccf4710
  00e44:    	call   rax
  00e46:    	movq   xmm2,QWORD PTR [rsp]
  00e4b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00e51:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00e57:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00e5d:    	add    rsp,0x20
  00e61: 76 	movabs r13,0x5576cd699f30
  00e6b:    	test   rax,rax
  00e6e:    	je     0xffff6a13
  00e74:    	mov    QWORD PTR [rbp-0x78],rax
:00069 %9 = %9 + %10                        [Integer][Integer]
  00e78:    	mov    rdi,QWORD PTR [rbp-0x70]
  00e7c:    	mov    rsi,QWORD PTR [rbp-0x78]
  00e80: 00 	test   rdi,0x1
  00e87:    	je     0x3a4dd
  00e8d: 00 	test   rsi,0x1
  00e94:    	je     0x3a4dd
  00e9a:    	sub    rdi,0x1
  00e9e:    	add    rdi,rsi
  00ea1:    	jo     0x3a4dd
  00ea7:    	mov    QWORD PTR [rbp-0x70],rdi
:00070 %11 = %1.call org()                  [<INVALID>]
:00071 
  00eab:    	sub    rsp,0x20
  00eaf:    	movq   QWORD PTR [rsp],xmm2
  00eb4:    	movq   QWORD PTR [rsp+0x8],xmm4
  00eba:    	movq   QWORD PTR [rsp+0x10],xmm5
  00ec0:    	movq   QWORD PTR [rsp+0x18],xmm6
  00ec6:    	mov    rdi,QWORD PTR [rbp-0x30]
  00eca: 76 	movabs rax,0x5576ccd01d00
  00ed4:    	call   rax
  00ed6:    	mov    r15d,eax
  00ed9: 00 	cmp    r15d,DWORD PTR [rip+0xa34]        # 0x1914
  00ee0:    	jne    0x3a4f9
  00ee6:    	mov    eax,DWORD PTR [rip+0xffffffffffff8504]        # 0xffff93f0
  00eec:    	cmp    DWORD PTR [rip+0xa1e],eax        # 0x1910
  00ef2:    	jne    0x3a4f9
  00ef8:    	mov    rax,QWORD PTR [rbx]
  00efb:    	lea    rdi,[rsp-0x18]
  00f00:    	mov    QWORD PTR [rdi],rax
  00f03:    	mov    QWORD PTR [rbx],rdi
  00f06: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f0f:    	mov    QWORD PTR [rsp-0x38],rcx
  00f14:    	mov    rax,QWORD PTR [rbp-0x30]
  00f18:    	mov    QWORD PTR [rsp-0x38],rax
  00f1d: 00 	mov    rdi,0x0
  00f24: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00f2d: 00 	movabs rax,0x0
  00f37:    	mov    QWORD PTR [rsp-0x28],rax
  00f3c: 00 	movabs r13,0x0
  00f46:    	call   0xffff69d8
  00f4b:    	lea    rdi,[rbp-0x8]
  00f4f:    	mov    QWORD PTR [rbx],rdi
  00f52:    	movq   xmm2,QWORD PTR [rsp]
  00f57:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00f5d:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00f63:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f69:    	add    rsp,0x20
  00f6d:    	test   rax,rax
  00f70:    	je     0x3a565
  00f76:    	mov    QWORD PTR [rbp-0x80],rax
:00073 %10 = %11.call y()                   [<INVALID>]
:00074 
  00f7a:    	sub    rsp,0x20
  00f7e:    	movq   QWORD PTR [rsp],xmm2
  00f83:    	movq   QWORD PTR [rsp+0x8],xmm4
  00f89:    	movq   QWORD PTR [rsp+0x10],xmm5
  00f8f:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f95:    	mov    rdi,QWORD PTR [rbp-0x80]
  00f99: 76 	movabs rax,0x5576ccd01d00
  00fa3:    	call   rax
  00fa5:    	mov    r15d,eax
  00fa8: 00 	cmp    r15d,DWORD PTR [rip+0x96d]        # 0x191c
  00faf:    	jne    0x3a574
  00fb5:    	mov    eax,DWORD PTR [rip+0xffffffffffff8435]        # 0xffff93f0
  00fbb:    	cmp    DWORD PTR [rip+0x957],eax        # 0x1918
  00fc1:    	jne    0x3a574
  00fc7:    	mov    rax,QWORD PTR [rbx]
  00fca:    	lea    rdi,[rsp-0x18]
  00fcf:    	mov    QWORD PTR [rdi],rax
  00fd2:    	mov    QWORD PTR [rbx],rdi
  00fd5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00fde:    	mov    QWORD PTR [rsp-0x38],rcx
  00fe3:    	mov    rax,QWORD PTR [rbp-0x80]
  00fe7:    	mov    QWORD PTR [rsp-0x38],rax
  00fec: 00 	mov    rdi,0x0
  00ff3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ffc: 00 	movabs rax,0x0
  01006:    	mov    QWORD PTR [rsp-0x28],rax
  0100b: 00 	movabs r13,0x0
  01015:    	call   0xffff69d8
  0101a:    	lea    rdi,[rbp-0x8]
  0101e:    	mov    QWORD PTR [rbx],rdi
  01021:    	movq   xmm2,QWORD PTR [rsp]
  01026:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0102c:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01032:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01038:    	add    rsp,0x20
  0103c:    	test   rax,rax
  0103f:    	je     0x3a5e0
  01045:    	mov    QWORD PTR [rbp-0x78],rax
:00076 %12 = %1.call dir()                  [<INVALID>]
:00077 
  01049:    	sub    rsp,0x20
  0104d:    	movq   QWORD PTR [rsp],xmm2
  01052:    	movq   QWORD PTR [rsp+0x8],xmm4
  01058:    	movq   QWORD PTR [rsp+0x10],xmm5
  0105e:    	movq   QWORD PTR [rsp+0x18],xmm6
  01064:    	mov    rdi,QWORD PTR [rbp-0x30]
  01068: 76 	movabs rax,0x5576ccd01d00
  01072:    	call   rax
  01074:    	mov    r15d,eax
  01077: 00 	cmp    r15d,DWORD PTR [rip+0x8a6]        # 0x1924
  0107e:    	jne    0x3a5ef
  01084:    	mov    eax,DWORD PTR [rip+0xffffffffffff8366]        # 0xffff93f0
  0108a:    	cmp    DWORD PTR [rip+0x890],eax        # 0x1920
  01090:    	jne    0x3a5ef
  01096:    	mov    rax,QWORD PTR [rbx]
  01099:    	lea    rdi,[rsp-0x18]
  0109e:    	mov    QWORD PTR [rdi],rax
  010a1:    	mov    QWORD PTR [rbx],rdi
  010a4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  010ad:    	mov    QWORD PTR [rsp-0x38],rcx
  010b2:    	mov    rax,QWORD PTR [rbp-0x30]
  010b6:    	mov    QWORD PTR [rsp-0x38],rax
  010bb: 00 	mov    rdi,0x0
  010c2: 00 	mov    QWORD PTR [rsp-0x30],0x0
  010cb: 00 	movabs rax,0x0
  010d5:    	mov    QWORD PTR [rsp-0x28],rax
  010da: 00 	movabs r13,0x0
  010e4:    	call   0xffff69d8
  010e9:    	lea    rdi,[rbp-0x8]
  010ed:    	mov    QWORD PTR [rbx],rdi
  010f0:    	movq   xmm2,QWORD PTR [rsp]
  010f5:    	movq   xmm4,QWORD PTR [rsp+0x8]
  010fb:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01101:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01107:    	add    rsp,0x20
  0110b:    	test   rax,rax
  0110e:    	je     0x3a65b
  01114: ff 	mov    QWORD PTR [rbp-0x88],rax
:00079 %11 = %12.call y()                   [<INVALID>]
:00080 
  0111b:    	sub    rsp,0x20
  0111f:    	movq   QWORD PTR [rsp],xmm2
  01124:    	movq   QWORD PTR [rsp+0x8],xmm4
  0112a:    	movq   QWORD PTR [rsp+0x10],xmm5
  01130:    	movq   QWORD PTR [rsp+0x18],xmm6
  01136: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0113d: 76 	movabs rax,0x5576ccd01d00
  01147:    	call   rax
  01149:    	mov    r15d,eax
  0114c: 00 	cmp    r15d,DWORD PTR [rip+0x7d9]        # 0x192c
  01153:    	jne    0x3a66a
  01159:    	mov    eax,DWORD PTR [rip+0xffffffffffff8291]        # 0xffff93f0
  0115f:    	cmp    DWORD PTR [rip+0x7c3],eax        # 0x1928
  01165:    	jne    0x3a66a
  0116b:    	mov    rax,QWORD PTR [rbx]
  0116e:    	lea    rdi,[rsp-0x18]
  01173:    	mov    QWORD PTR [rdi],rax
  01176:    	mov    QWORD PTR [rbx],rdi
  01179: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01182:    	mov    QWORD PTR [rsp-0x38],rcx
  01187: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0118e:    	mov    QWORD PTR [rsp-0x38],rax
  01193: 00 	mov    rdi,0x0
  0119a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011a3: 00 	movabs rax,0x0
  011ad:    	mov    QWORD PTR [rsp-0x28],rax
  011b2: 00 	movabs r13,0x0
  011bc:    	call   0xffff69d8
  011c1:    	lea    rdi,[rbp-0x8]
  011c5:    	mov    QWORD PTR [rbx],rdi
  011c8:    	movq   xmm2,QWORD PTR [rsp]
  011cd:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011d3:    	movq   xmm5,QWORD PTR [rsp+0x10]
  011d9:    	movq   xmm6,QWORD PTR [rsp+0x18]
  011df:    	add    rsp,0x20
  011e3:    	test   rax,rax
  011e6:    	je     0x3a6d9
  011ec:    	mov    QWORD PTR [rbp-0x80],rax
:00082 %11 = %6 * %11                       [Integer][Integer]
  011f0:    	mov    rdi,QWORD PTR [rbp-0x58]
  011f4:    	mov    rsi,QWORD PTR [rbp-0x80]
  011f8:    	sub    rsp,0x20
  011fc:    	movq   QWORD PTR [rsp],xmm2
  01201:    	movq   QWORD PTR [rsp+0x8],xmm4
  01207:    	movq   QWORD PTR [rsp+0x10],xmm5
  0120d:    	movq   QWORD PTR [rsp+0x18],xmm6
  01213:    	mov    rdx,rdi
  01216:    	mov    rcx,rsi
  01219:    	mov    rdi,rbx
  0121c:    	mov    rsi,r12
  0121f: 76 	movabs rax,0x5576cccf4710
  01229:    	call   rax
  0122b:    	movq   xmm2,QWORD PTR [rsp]
  01230:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01236:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0123c:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01242:    	add    rsp,0x20
  01246: 76 	movabs r13,0x5576cd69a010
  01250:    	test   rax,rax
  01253:    	je     0xffff6a13
  01259:    	mov    QWORD PTR [rbp-0x80],rax
:00083 %10 = %10 + %11                      [Integer][Integer]
  0125d:    	mov    rdi,QWORD PTR [rbp-0x78]
  01261:    	mov    rsi,QWORD PTR [rbp-0x80]
  01265: 00 	test   rdi,0x1
  0126c:    	je     0x3a704
  01272: 00 	test   rsi,0x1
  01279:    	je     0x3a704
  0127f:    	sub    rdi,0x1
  01283:    	add    rdi,rsi
  01286:    	jo     0x3a704
  0128c:    	mov    QWORD PTR [rbp-0x78],rdi
:00084 %12 = %1.call org()                  [<INVALID>]
:00085 
  01290:    	sub    rsp,0x20
  01294:    	movq   QWORD PTR [rsp],xmm2
  01299:    	movq   QWORD PTR [rsp+0x8],xmm4
  0129f:    	movq   QWORD PTR [rsp+0x10],xmm5
  012a5:    	movq   QWORD PTR [rsp+0x18],xmm6
  012ab:    	mov    rdi,QWORD PTR [rbp-0x30]
  012af: 76 	movabs rax,0x5576ccd01d00
  012b9:    	call   rax
  012bb:    	mov    r15d,eax
  012be: 00 	cmp    r15d,DWORD PTR [rip+0x66f]        # 0x1934
  012c5:    	jne    0x3a720
  012cb:    	mov    eax,DWORD PTR [rip+0xffffffffffff811f]        # 0xffff93f0
  012d1:    	cmp    DWORD PTR [rip+0x659],eax        # 0x1930
  012d7:    	jne    0x3a720
  012dd:    	mov    rax,QWORD PTR [rbx]
  012e0:    	lea    rdi,[rsp-0x18]
  012e5:    	mov    QWORD PTR [rdi],rax
  012e8:    	mov    QWORD PTR [rbx],rdi
  012eb: 00 	mov    QWORD PTR [rsp-0x20],0x0
  012f4:    	mov    QWORD PTR [rsp-0x38],rcx
  012f9:    	mov    rax,QWORD PTR [rbp-0x30]
  012fd:    	mov    QWORD PTR [rsp-0x38],rax
  01302: 00 	mov    rdi,0x0
  01309: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01312: 00 	movabs rax,0x0
  0131c:    	mov    QWORD PTR [rsp-0x28],rax
  01321: 00 	movabs r13,0x0
  0132b:    	call   0xffff69d8
  01330:    	lea    rdi,[rbp-0x8]
  01334:    	mov    QWORD PTR [rbx],rdi
  01337:    	movq   xmm2,QWORD PTR [rsp]
  0133c:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01342:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01348:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0134e:    	add    rsp,0x20
  01352:    	test   rax,rax
  01355:    	je     0x3a78c
  0135b: ff 	mov    QWORD PTR [rbp-0x88],rax
:00087 %11 = %12.call z()                   [<INVALID>]
:00088 
  01362:    	sub    rsp,0x20
  01366:    	movq   QWORD PTR [rsp],xmm2
  0136b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01371:    	movq   QWORD PTR [rsp+0x10],xmm5
  01377:    	movq   QWORD PTR [rsp+0x18],xmm6
  0137d: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  01384: 76 	movabs rax,0x5576ccd01d00
  0138e:    	call   rax
  01390:    	mov    r15d,eax
  01393: 00 	cmp    r15d,DWORD PTR [rip+0x5a2]        # 0x193c
  0139a:    	jne    0x3a79b
  013a0:    	mov    eax,DWORD PTR [rip+0xffffffffffff804a]        # 0xffff93f0
  013a6:    	cmp    DWORD PTR [rip+0x58c],eax        # 0x1938
  013ac:    	jne    0x3a79b
  013b2:    	mov    rax,QWORD PTR [rbx]
  013b5:    	lea    rdi,[rsp-0x18]
  013ba:    	mov    QWORD PTR [rdi],rax
  013bd:    	mov    QWORD PTR [rbx],rdi
  013c0: 00 	mov    QWORD PTR [rsp-0x20],0x0
  013c9:    	mov    QWORD PTR [rsp-0x38],rcx
  013ce: ff 	mov    rax,QWORD PTR [rbp-0x88]
  013d5:    	mov    QWORD PTR [rsp-0x38],rax
  013da: 00 	mov    rdi,0x0
  013e1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  013ea: 00 	movabs rax,0x0
  013f4:    	mov    QWORD PTR [rsp-0x28],rax
  013f9: 00 	movabs r13,0x0
  01403:    	call   0xffff69d8
  01408:    	lea    rdi,[rbp-0x8]
  0140c:    	mov    QWORD PTR [rbx],rdi
  0140f:    	movq   xmm2,QWORD PTR [rsp]
  01414:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0141a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01420:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01426:    	add    rsp,0x20
  0142a:    	test   rax,rax
  0142d:    	je     0x3a80a
  01433:    	mov    QWORD PTR [rbp-0x80],rax
:00090 %13 = %1.call dir()                  [<INVALID>]
:00091 
  01437:    	sub    rsp,0x20
  0143b:    	movq   QWORD PTR [rsp],xmm2
  01440:    	movq   QWORD PTR [rsp+0x8],xmm4
  01446:    	movq   QWORD PTR [rsp+0x10],xmm5
  0144c:    	movq   QWORD PTR [rsp+0x18],xmm6
  01452:    	mov    rdi,QWORD PTR [rbp-0x30]
  01456: 76 	movabs rax,0x5576ccd01d00
  01460:    	call   rax
  01462:    	mov    r15d,eax
  01465: 00 	cmp    r15d,DWORD PTR [rip+0x4d8]        # 0x1944
  0146c:    	jne    0x3a819
  01472:    	mov    eax,DWORD PTR [rip+0xffffffffffff7f78]        # 0xffff93f0
  01478:    	cmp    DWORD PTR [rip+0x4c2],eax        # 0x1940
  0147e:    	jne    0x3a819
  01484:    	mov    rax,QWORD PTR [rbx]
  01487:    	lea    rdi,[rsp-0x18]
  0148c:    	mov    QWORD PTR [rdi],rax
  0148f:    	mov    QWORD PTR [rbx],rdi
  01492: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0149b:    	mov    QWORD PTR [rsp-0x38],rcx
  014a0:    	mov    rax,QWORD PTR [rbp-0x30]
  014a4:    	mov    QWORD PTR [rsp-0x38],rax
  014a9: 00 	mov    rdi,0x0
  014b0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014b9: 00 	movabs rax,0x0
  014c3:    	mov    QWORD PTR [rsp-0x28],rax
  014c8: 00 	movabs r13,0x0
  014d2:    	call   0xffff69d8
  014d7:    	lea    rdi,[rbp-0x8]
  014db:    	mov    QWORD PTR [rbx],rdi
  014de:    	movq   xmm2,QWORD PTR [rsp]
  014e3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  014e9:    	movq   xmm5,QWORD PTR [rsp+0x10]
  014ef:    	movq   xmm6,QWORD PTR [rsp+0x18]
  014f5:    	add    rsp,0x20
  014f9:    	test   rax,rax
  014fc:    	je     0x3a885
  01502: ff 	mov    QWORD PTR [rbp-0x90],rax
:00093 %12 = %13.call z()                   [<INVALID>]
:00094 
  01509:    	sub    rsp,0x20
  0150d:    	movq   QWORD PTR [rsp],xmm2
  01512:    	movq   QWORD PTR [rsp+0x8],xmm4
  01518:    	movq   QWORD PTR [rsp+0x10],xmm5
  0151e:    	movq   QWORD PTR [rsp+0x18],xmm6
  01524: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0152b: 76 	movabs rax,0x5576ccd01d00
  01535:    	call   rax
  01537:    	mov    r15d,eax
  0153a: 00 	cmp    r15d,DWORD PTR [rip+0x40b]        # 0x194c
  01541:    	jne    0x3a894
  01547:    	mov    eax,DWORD PTR [rip+0xffffffffffff7ea3]        # 0xffff93f0
  0154d:    	cmp    DWORD PTR [rip+0x3f5],eax        # 0x1948
  01553:    	jne    0x3a894
  01559:    	mov    rax,QWORD PTR [rbx]
  0155c:    	lea    rdi,[rsp-0x18]
  01561:    	mov    QWORD PTR [rdi],rax
  01564:    	mov    QWORD PTR [rbx],rdi
  01567: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01570:    	mov    QWORD PTR [rsp-0x38],rcx
  01575: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0157c:    	mov    QWORD PTR [rsp-0x38],rax
  01581: 00 	mov    rdi,0x0
  01588: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01591: 00 	movabs rax,0x0
  0159b:    	mov    QWORD PTR [rsp-0x28],rax
  015a0: 00 	movabs r13,0x0
  015aa:    	call   0xffff69d8
  015af:    	lea    rdi,[rbp-0x8]
  015b3:    	mov    QWORD PTR [rbx],rdi
  015b6:    	movq   xmm2,QWORD PTR [rsp]
  015bb:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015c1:    	movq   xmm5,QWORD PTR [rsp+0x10]
  015c7:    	movq   xmm6,QWORD PTR [rsp+0x18]
  015cd:    	add    rsp,0x20
  015d1:    	test   rax,rax
  015d4:    	je     0x3a903
  015da: ff 	mov    QWORD PTR [rbp-0x88],rax
:00096 %12 = %6 * %12                       [Integer][Integer]
  015e1:    	mov    rdi,QWORD PTR [rbp-0x58]
  015e5: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  015ec:    	sub    rsp,0x20
  015f0:    	movq   QWORD PTR [rsp],xmm2
  015f5:    	movq   QWORD PTR [rsp+0x8],xmm4
  015fb:    	movq   QWORD PTR [rsp+0x10],xmm5
  01601:    	movq   QWORD PTR [rsp+0x18],xmm6
  01607:    	mov    rdx,rdi
  0160a:    	mov    rcx,rsi
  0160d:    	mov    rdi,rbx
  01610:    	mov    rsi,r12
  01613: 76 	movabs rax,0x5576cccf4710
  0161d:    	call   rax
  0161f:    	movq   xmm2,QWORD PTR [rsp]
  01624:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0162a:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01630:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01636:    	add    rsp,0x20
  0163a: 76 	movabs r13,0x5576cd69a0f0
  01644:    	test   rax,rax
  01647:    	je     0xffff6a13
  0164d: ff 	mov    QWORD PTR [rbp-0x88],rax
:00097 %11 = %11 + %12                      [Integer][Integer]
  01654:    	mov    rdi,QWORD PTR [rbp-0x80]
  01658: ff 	mov    rsi,QWORD PTR [rbp-0x88]
  0165f: 00 	test   rdi,0x1
  01666:    	je     0x3a92e
  0166c: 00 	test   rsi,0x1
  01673:    	je     0x3a92e
  01679:    	sub    rdi,0x1
  0167d:    	add    rdi,rsi
  01680:    	jo     0x3a92e
  01686:    	mov    QWORD PTR [rbp-0x80],rdi
:00098 %7 = %8.call new(%9; 3)              [<INVALID>]
:00099 
  0168a:    	sub    rsp,0x20
  0168e:    	movq   QWORD PTR [rsp],xmm2
  01693:    	movq   QWORD PTR [rsp+0x8],xmm4
  01699:    	movq   QWORD PTR [rsp+0x10],xmm5
  0169f:    	movq   QWORD PTR [rsp+0x18],xmm6
  016a5:    	mov    rdi,QWORD PTR [rbp-0x68]
  016a9: 76 	movabs rax,0x5576ccd01d00
  016b3:    	call   rax
  016b5:    	mov    r15d,eax
  016b8: 00 	cmp    r15d,DWORD PTR [rip+0x295]        # 0x1954
  016bf:    	jne    0x3a94a
  016c5:    	mov    eax,DWORD PTR [rip+0xffffffffffff7d25]        # 0xffff93f0
  016cb:    	cmp    DWORD PTR [rip+0x27f],eax        # 0x1950
  016d1:    	jne    0x3a94a
  016d7:    	mov    rax,QWORD PTR [rbx]
  016da:    	lea    rdi,[rsp-0x18]
  016df:    	mov    QWORD PTR [rdi],rax
  016e2:    	mov    QWORD PTR [rbx],rdi
  016e5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  016ee:    	mov    QWORD PTR [rsp-0x38],rcx
  016f3:    	mov    rax,QWORD PTR [rbp-0x68]
  016f7:    	mov    QWORD PTR [rsp-0x38],rax
  016fc: 00 	mov    rdi,0x3
  01703:    	mov    rax,QWORD PTR [rbp-0x70]
  01707:    	mov    QWORD PTR [rsp-0x40],rax
  0170c:    	mov    rax,QWORD PTR [rbp-0x78]
  01710:    	mov    QWORD PTR [rsp-0x48],rax
  01715:    	mov    rax,QWORD PTR [rbp-0x80]
  01719:    	mov    QWORD PTR [rsp-0x50],rax
  0171e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01727: 00 	movabs rax,0x0
  01731:    	mov    QWORD PTR [rsp-0x28],rax
  01736: 00 	movabs r13,0x0
  01740:    	call   0xffff69d8
  01745:    	lea    rdi,[rbp-0x8]
  01749:    	mov    QWORD PTR [rbx],rdi
  0174c:    	movq   xmm2,QWORD PTR [rsp]
  01751:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01757:    	movq   xmm5,QWORD PTR [rsp+0x10]
  0175d:    	movq   xmm6,QWORD PTR [rsp+0x18]
  01763:    	add    rsp,0x20
  01767:    	test   rax,rax
  0176a:    	je     0x3a9b6
  01770:    	mov    QWORD PTR [rbp-0x60],rax
:00101 _ = %2.call pl=(%7; 1)               [<INVALID>]
:00102 
  01774:    	sub    rsp,0x20
  01778:    	movq   QWORD PTR [rsp],xmm2
  0177d:    	movq   QWORD PTR [rsp+0x8],xmm4
  01783:    	movq   QWORD PTR [rsp+0x10],xmm5
  01789:    	movq   QWORD PTR [rsp+0x18],xmm6
  0178f:    	mov    rdi,QWORD PTR [rbp-0x38]
  01793: 76 	movabs rax,0x5576ccd01d00
  0179d:    	call   rax
  0179f:    	mov    r15d,eax
  017a2: 00 	cmp    r15d,DWORD PTR [rip+0x1b3]        # 0x195c
  017a9:    	jne    0x3a9c5
  017af:    	mov    eax,DWORD PTR [rip+0xffffffffffff7c3b]        # 0xffff93f0
  017b5:    	cmp    DWORD PTR [rip+0x19d],eax        # 0x1958
  017bb:    	jne    0x3a9c5
  017c1:    	mov    rax,QWORD PTR [rbx]
  017c4:    	lea    rdi,[rsp-0x18]
  017c9:    	mov    QWORD PTR [rdi],rax
  017cc:    	mov    QWORD PTR [rbx],rdi
  017cf: 00 	mov    QWORD PTR [rsp-0x20],0x0
  017d8:    	mov    QWORD PTR [rsp-0x38],rcx
  017dd:    	mov    rax,QWORD PTR [rbp-0x38]
  017e1:    	mov    QWORD PTR [rsp-0x38],rax
  017e6: 00 	mov    rdi,0x1
  017ed:    	mov    rax,QWORD PTR [rbp-0x60]
  017f1:    	mov    QWORD PTR [rsp-0x40],rax
  017f6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  017ff: 00 	movabs rax,0x0
  01809:    	mov    QWORD PTR [rsp-0x28],rax
  0180e: 00 	movabs r13,0x0
  01818:    	call   0xffff69d8
  0181d:    	lea    rdi,[rbp-0x8]
  01821:    	mov    QWORD PTR [rbx],rdi
  01824:    	movq   xmm2,QWORD PTR [rsp]
  01829:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0182f:    	movq   xmm5,QWORD PTR [rsp+0x10]
  01835:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0183b:    	add    rsp,0x20
  0183f:    	test   rax,rax
  01842:    	je     0x3aa31
:00104 br =>:00105
  01848:    	jmp    0x3aa66
:00105 %7 = nil
  0184d: 00 	mov    QWORD PTR [rbp-0x60],0x4
:00106 ret %7
  01855:    	mov    rax,QWORD PTR [rbp-0x60]
  01859:    	leave  
  0185a:    	ret    
==> start whole compile: <unnamed> FuncId(75) self_class:Scene start:[00000] bytecode:0x5576cd6d12f0
<== finished compile. elapsed:23.9µs
offset:Pos(44936) code: 227 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x3912c
  0002c: cmp    DWORD PTR [rdi+0x4],0x2f
  00030: jne    0x3912c
:00000 %3 = dynvar(3, %3)
  00036: mov    rax,QWORD PTR [rbp-0x10]
  0003a: mov    rax,QWORD PTR [rax]
  0003d: mov    rax,QWORD PTR [rax]
  00040: lea    rax,[rax+0x10]
  00044: mov    rax,QWORD PTR [rax-0x40]
  00048: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = literal[76]
  0004c: mov    rax,0x99
  00053: mov    QWORD PTR [rbp-0x48],rax
:00002 %2 = %3.call times(&%4)              [Integer]
:00003 
  00057: mov    rdi,QWORD PTR [rbp-0x40]
  0005b: test   rdi,0x1
  00062: jne    0x7f
  00068: test   rdi,0x7
  0006f: jne    0x3913b
  00075: cmp    DWORD PTR [rdi+0x4],0x6
  00079: jne    0x3913b
  0007f: cmp    DWORD PTR [rip+0xffffffffffff7a0a],0x26        # 0xffff7a90
  00086: jne    0x3913b
  0008c: mov    r9,QWORD PTR [rbp-0x48]
  00090: mov    rdx,rdi
  00093: mov    rax,QWORD PTR [rbx]
  00096: lea    rdi,[rsp-0x18]
  0009b: mov    QWORD PTR [rdi],rax
  0009e: mov    QWORD PTR [rbx],rdi
  000a1: mov    QWORD PTR [rsp-0x20],0x0
  000aa: mov    QWORD PTR [rsp-0x38],rcx
  000af: lea    rcx,[rbp-0x50]
  000b3: mov    r8,0x0
  000ba: call   0x3914a
  000bf: lea    rdi,[rbp-0x8]
  000c3: mov    QWORD PTR [rbx],rdi
  000c6: movabs r13,0x5576cd6d1330
  000d0: test   rax,rax
  000d3: je     0xffff50b3
  000d9: mov    QWORD PTR [rbp-0x38],rax
:00005 ret %2
  000dd: mov    rax,QWORD PTR [rbp-0x38]
  000e1: leave  
  000e2: ret    
==> start whole compile: <unnamed> FuncId(74) self_class:Scene start:[00000] bytecode:0x5576cd6d6780
<== finished compile. elapsed:70.9µs
offset:Pos(45163) code: 2130 bytes  data: 99 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x80
  0000b: mov    rax,0x4
  00012: mov    QWORD PTR [rbp-0x38],rax
  00016: mov    QWORD PTR [rbp-0x40],rax
  0001a: mov    QWORD PTR [rbp-0x48],rax
  0001e: mov    QWORD PTR [rbp-0x50],rax
  00022: mov    QWORD PTR [rbp-0x58],rax
  00026: mov    QWORD PTR [rbp-0x60],rax
  0002a: mov    QWORD PTR [rbp-0x68],rax
  0002e: mov    QWORD PTR [rbp-0x70],rax
  00032: mov    rdi,QWORD PTR [rbp-0x28]
  00036: test   rdi,0x7
  0003d: jne    0x39099
  00043: cmp    DWORD PTR [rdi+0x4],0x2f
  00047: jne    0x39099
:00000 %6 = const[Vec]                      [Vec]
  0004d: mov    rax,QWORD PTR [rip+0xffffffffffff7961]        # 0xffff79b5
  00054: cmp    rax,QWORD PTR [rip+0x80a]        # 0x865
  0005b: jne    0x390a8
  00061: mov    rax,QWORD PTR [rip+0x7ed]        # 0x855
  00068: mov    QWORD PTR [rbp-0x58],rax
:00001 %7 = literal[0.0]
  0006c: movq   xmm2,QWORD PTR [rip+0x801]        # 0x875
:00002 %8 = literal[0.0]
  00074: movq   xmm3,QWORD PTR [rip+0x809]        # 0x885
:00003 %9 = literal[0.0]
  0007c: movq   xmm4,QWORD PTR [rip+0x811]        # 0x895
:00004 %2 = %6.call new(%7; 3)              [#<Class:Vec>]
:00005 
  00084: movq   xmm0,xmm2
  00088: call   0xffff50fc
  0008d: mov    QWORD PTR [rbp-0x60],rax
  00091: movq   xmm0,xmm3
  00095: call   0xffff50fc
  0009a: mov    QWORD PTR [rbp-0x68],rax
  0009e: movq   xmm0,xmm4
  000a2: call   0xffff50fc
  000a7: mov    QWORD PTR [rbp-0x70],rax
  000ab: mov    rdi,QWORD PTR [rbp-0x58]
  000af: test   rdi,0x7
  000b6: jne    0x390ee
  000bc: cmp    DWORD PTR [rdi+0x4],0x26
  000c0: jne    0x390ee
  000c6: cmp    DWORD PTR [rip+0xffffffffffff78e0],0x26        # 0xffff79ad
  000cd: jne    0x390ee
  000d3: mov    r9,0x0
  000da: sub    rsp,0x20
  000de: movq   QWORD PTR [rsp],xmm2
  000e3: movq   QWORD PTR [rsp+0x8],xmm3
  000e9: movq   QWORD PTR [rsp+0x10],xmm4
  000ef: mov    rdx,rdi
  000f2: mov    rax,QWORD PTR [rbx]
  000f5: lea    rdi,[rsp-0x18]
  000fa: mov    QWORD PTR [rdi],rax
  000fd: mov    QWORD PTR [rbx],rdi
  00100: mov    QWORD PTR [rsp-0x20],0x0
  00109: mov    QWORD PTR [rsp-0x38],rcx
  0010e: lea    rcx,[rbp-0x60]
  00112: mov    r8,0x3
  00119: call   0x390fd
  0011e: lea    rdi,[rbp-0x8]
  00122: mov    QWORD PTR [rbx],rdi
  00125: movq   xmm2,QWORD PTR [rsp]
  0012a: movq   xmm3,QWORD PTR [rsp+0x8]
  00130: movq   xmm4,QWORD PTR [rsp+0x10]
  00136: add    rsp,0x20
  0013a: movabs r13,0x5576cd6d67e0
  00144: test   rax,rax
  00147: je     0xffff4fd0
  0014d: mov    QWORD PTR [rbp-0x38],rax
:00007 %6 = dynvar(2, %3)
  00151: mov    rax,QWORD PTR [rbp-0x10]
  00155: mov    rax,QWORD PTR [rax]
  00158: lea    rax,[rax+0x10]
  0015c: mov    rax,QWORD PTR [rax-0x40]
  00160: mov    QWORD PTR [rbp-0x58],rax
:00008 %7 = literal[75]
  00164: mov    rax,0x97
  0016b: mov    QWORD PTR [rbp-0x60],rax
:00009 _ = %6.call times(&%7)               [Integer]
:00010 
  0016f: mov    rdi,QWORD PTR [rbp-0x58]
  00173: test   rdi,0x1
  0017a: jne    0x197
  00180: test   rdi,0x7
  00187: jne    0x3912f
  0018d: cmp    DWORD PTR [rdi+0x4],0x6
  00191: jne    0x3912f
  00197: cmp    DWORD PTR [rip+0xffffffffffff780f],0x26        # 0xffff79ad
  0019e: jne    0x3912f
  001a4: mov    r9,QWORD PTR [rbp-0x60]
  001a8: sub    rsp,0x10
  001ac: movq   QWORD PTR [rsp],xmm3
  001b1: movq   QWORD PTR [rsp+0x8],xmm4
  001b7: mov    rdx,rdi
  001ba: mov    rax,QWORD PTR [rbx]
  001bd: lea    rdi,[rsp-0x18]
  001c2: mov    QWORD PTR [rdi],rax
  001c5: mov    QWORD PTR [rbx],rdi
  001c8: mov    QWORD PTR [rsp-0x20],0x0
  001d1: mov    QWORD PTR [rsp-0x38],rcx
  001d6: lea    rcx,[rbp-0x68]
  001da: mov    r8,0x0
  001e1: call   0x3913e
  001e6: lea    rdi,[rbp-0x8]
  001ea: mov    QWORD PTR [rbx],rdi
  001ed: movq   xmm3,QWORD PTR [rsp]
  001f2: movq   xmm4,QWORD PTR [rsp+0x8]
  001f8: add    rsp,0x10
  001fc: movabs r13,0x5576cd6d6830
  00206: test   rax,rax
  00209: je     0xffff4fd0
:00012 %6 = %2.call x()                     [Vec]
:00013 
  0020f: mov    rdi,QWORD PTR [rbp-0x38]
  00213: test   rdi,0x7
  0021a: jne    0x39170
  00220: cmp    DWORD PTR [rdi+0x4],0x25
  00224: jne    0x39170
  0022a: cmp    DWORD PTR [rip+0xffffffffffff777c],0x26        # 0xffff79ad
  00231: jne    0x39170
  00237: mov    esi,DWORD PTR [rip+0x664]        # 0x8a1
  0023d: cmp    esi,0xffffffff
  00240: je     0x3917f
  00246: xor    rax,rax
  00249: mov    ax,WORD PTR [rdi+0x2]
  0024d: cmp    rax,0x3
  00251: jne    0x26a
  00257: cmp    esi,0x6
  0025a: jge    0x26a
  00260: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00265: jmp    0x294
  0026a: sub    rsp,0x10
  0026e: movq   QWORD PTR [rsp],xmm3
  00273: movq   QWORD PTR [rsp+0x8],xmm4
  00279: movabs rax,0x5576cccb62a0
  00283: call   rax
  00285: movq   xmm3,QWORD PTR [rsp]
  0028a: movq   xmm4,QWORD PTR [rsp+0x8]
  00290: add    rsp,0x10
  00294: mov    QWORD PTR [rbp-0x58],rax
:00015 %7 = dynvar(2, %5)
  00298: mov    rax,QWORD PTR [rbp-0x10]
  0029c: mov    rax,QWORD PTR [rax]
  0029f: lea    rax,[rax+0x10]
  002a3: mov    rax,QWORD PTR [rax-0x50]
  002a7: mov    QWORD PTR [rbp-0x60],rax
:00016 %8 = dynvar(2, %5)
  002ab: mov    rax,QWORD PTR [rbp-0x10]
  002af: mov    rax,QWORD PTR [rax]
  002b2: lea    rax,[rax+0x10]
  002b6: mov    rax,QWORD PTR [rax-0x50]
  002ba: mov    QWORD PTR [rbp-0x68],rax
:00017 %7 = %7 * %8                         [Float][Float]
  002be: mov    rdi,QWORD PTR [rbp-0x60]
  002c2: test   rdi,0x1
  002c9: jne    0x391c6
  002cf: test   rdi,0x2
  002d6: je     0x312
  002dc: xorps  xmm2,xmm2
  002df: movabs rax,0x8000000000000002
  002e9: cmp    rdi,rax
  002ec: je     0x324
  002f2: mov    rax,rdi
  002f5: sar    rax,0x3f
  002f9: add    rax,0x2
  002fd: and    rdi,0xfffffffffffffffc
  00301: or     rdi,rax
  00304: rol    rdi,0x3d
  00308: movq   xmm2,rdi
  0030d: jmp    0x324
  00312: call   0xffff5009
  00317: test   rax,rax
  0031a: je     0x391c6
  00320: movq   xmm2,xmm0
  00324: mov    rdi,QWORD PTR [rbp-0x68]
  00328: test   rdi,0x1
  0032f: jne    0x391d5
  00335: test   rdi,0x2
  0033c: je     0x378
  00342: xorps  xmm3,xmm3
  00345: movabs rax,0x8000000000000002
  0034f: cmp    rdi,rax
  00352: je     0x38a
  00358: mov    rax,rdi
  0035b: sar    rax,0x3f
  0035f: add    rax,0x2
  00363: and    rdi,0xfffffffffffffffc
  00367: or     rdi,rax
  0036a: rol    rdi,0x3d
  0036e: movq   xmm3,rdi
  00373: jmp    0x38a
  00378: call   0xffff5009
  0037d: test   rax,rax
  00380: je     0x391d5
  00386: movq   xmm3,xmm0
  0038a: mulsd  xmm2,xmm3
:00018 %3 = %6 / %7                         [Float][Float]
  0038e: mov    rdi,QWORD PTR [rbp-0x58]
  00392: test   rdi,0x1
  00399: jne    0x391e4
  0039f: test   rdi,0x2
  003a6: je     0x3e2
  003ac: xorps  xmm5,xmm5
  003af: movabs rax,0x8000000000000002
  003b9: cmp    rdi,rax
  003bc: je     0x3f4
  003c2: mov    rax,rdi
  003c5: sar    rax,0x3f
  003c9: add    rax,0x2
  003cd: and    rdi,0xfffffffffffffffc
  003d1: or     rdi,rax
  003d4: rol    rdi,0x3d
  003d8: movq   xmm5,rdi
  003dd: jmp    0x3f4
  003e2: call   0xffff5009
  003e7: test   rax,rax
  003ea: je     0x391e4
  003f0: movq   xmm5,xmm0
  003f4: movq   xmm6,xmm5
  003f8: movq   rax,xmm2
  003fd: test   rax,rax
  00400: je     0xffff4ff5
  00406: divsd  xmm6,xmm2
:00019 %6 = %2.call y()                     [Vec]
:00020 
  0040a: mov    rdi,QWORD PTR [rbp-0x38]
  0040e: test   rdi,0x7
  00415: jne    0x39200
  0041b: cmp    DWORD PTR [rdi+0x4],0x25
  0041f: jne    0x39200
  00425: cmp    DWORD PTR [rip+0xffffffffffff7581],0x26        # 0xffff79ad
  0042c: jne    0x39200
  00432: mov    esi,DWORD PTR [rip+0x471]        # 0x8a9
  00438: cmp    esi,0xffffffff
  0043b: je     0x39229
  00441: xor    rax,rax
  00444: mov    ax,WORD PTR [rdi+0x2]
  00448: cmp    rax,0x3
  0044c: jne    0x465
  00452: cmp    esi,0x6
  00455: jge    0x465
  0045b: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00460: jmp    0x4a7
  00465: sub    rsp,0x20
  00469: movq   QWORD PTR [rsp],xmm2
  0046e: movq   QWORD PTR [rsp+0x8],xmm3
  00474: movq   QWORD PTR [rsp+0x10],xmm4
  0047a: movq   QWORD PTR [rsp+0x18],xmm6
  00480: movabs rax,0x5576cccb62a0
  0048a: call   rax
  0048c: movq   xmm2,QWORD PTR [rsp]
  00491: movq   xmm3,QWORD PTR [rsp+0x8]
  00497: movq   xmm4,QWORD PTR [rsp+0x10]
  0049d: movq   xmm6,QWORD PTR [rsp+0x18]
  004a3: add    rsp,0x20
  004a7: mov    QWORD PTR [rbp-0x58],rax
:00022 %7 = dynvar(2, %5)
  004ab: mov    rax,QWORD PTR [rbp-0x10]
  004af: mov    rax,QWORD PTR [rax]
  004b2: lea    rax,[rax+0x10]
  004b6: mov    rax,QWORD PTR [rax-0x50]
  004ba: mov    QWORD PTR [rbp-0x60],rax
:00023 %8 = dynvar(2, %5)
  004be: mov    rax,QWORD PTR [rbp-0x10]
  004c2: mov    rax,QWORD PTR [rax]
  004c5: lea    rax,[rax+0x10]
  004c9: mov    rax,QWORD PTR [rax-0x50]
  004cd: mov    QWORD PTR [rbp-0x68],rax
:00024 %7 = %7 * %8                         [Float][Float]
  004d1: mov    rdi,QWORD PTR [rbp-0x60]
  004d5: test   rdi,0x1
  004dc: jne    0x39288
  004e2: test   rdi,0x2
  004e9: je     0x525
  004ef: xorps  xmm2,xmm2
  004f2: movabs rax,0x8000000000000002
  004fc: cmp    rdi,rax
  004ff: je     0x537
  00505: mov    rax,rdi
  00508: sar    rax,0x3f
  0050c: add    rax,0x2
  00510: and    rdi,0xfffffffffffffffc
  00514: or     rdi,rax
  00517: rol    rdi,0x3d
  0051b: movq   xmm2,rdi
  00520: jmp    0x537
  00525: call   0xffff5009
  0052a: test   rax,rax
  0052d: je     0x39288
  00533: movq   xmm2,xmm0
  00537: mov    rdi,QWORD PTR [rbp-0x68]
  0053b: test   rdi,0x1
  00542: jne    0x392a4
  00548: test   rdi,0x2
  0054f: je     0x58b
  00555: xorps  xmm3,xmm3
  00558: movabs rax,0x8000000000000002
  00562: cmp    rdi,rax
  00565: je     0x59d
  0056b: mov    rax,rdi
  0056e: sar    rax,0x3f
  00572: add    rax,0x2
  00576: and    rdi,0xfffffffffffffffc
  0057a: or     rdi,rax
  0057d: rol    rdi,0x3d
  00581: movq   xmm3,rdi
  00586: jmp    0x59d
  0058b: call   0xffff5009
  00590: test   rax,rax
  00593: je     0x392a4
  00599: movq   xmm3,xmm0
  0059d: mulsd  xmm2,xmm3
:00025 %4 = %6 / %7                         [Float][Float]
  005a1: mov    rdi,QWORD PTR [rbp-0x58]
  005a5: test   rdi,0x1
  005ac: jne    0x392c0
  005b2: test   rdi,0x2
  005b9: je     0x5f5
  005bf: xorps  xmm5,xmm5
  005c2: movabs rax,0x8000000000000002
  005cc: cmp    rdi,rax
  005cf: je     0x607
  005d5: mov    rax,rdi
  005d8: sar    rax,0x3f
  005dc: add    rax,0x2
  005e0: and    rdi,0xfffffffffffffffc
  005e4: or     rdi,rax
  005e7: rol    rdi,0x3d
  005eb: movq   xmm5,rdi
  005f0: jmp    0x607
  005f5: call   0xffff5009
  005fa: test   rax,rax
  005fd: je     0x392c0
  00603: movq   xmm5,xmm0
  00607: movq   xmm7,xmm5
  0060b: movq   rax,xmm2
  00610: test   rax,rax
  00613: je     0xffff4ff5
  00619: divsd  xmm7,xmm2
:00026 %6 = %2.call z()                     [Vec]
:00027 
  0061d: mov    rdi,QWORD PTR [rbp-0x38]
  00621: test   rdi,0x7
  00628: jne    0x392e9
  0062e: cmp    DWORD PTR [rdi+0x4],0x25
  00632: jne    0x392e9
  00638: cmp    DWORD PTR [rip+0xffffffffffff736e],0x26        # 0xffff79ad
  0063f: jne    0x392e9
  00645: mov    esi,DWORD PTR [rip+0x266]        # 0x8b1
  0064b: cmp    esi,0xffffffff
  0064e: je     0x3931f
  00654: xor    rax,rax
  00657: mov    ax,WORD PTR [rdi+0x2]
  0065b: cmp    rax,0x3
  0065f: jne    0x678
  00665: cmp    esi,0x6
  00668: jge    0x678
  0066e: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00673: jmp    0x6c6
  00678: sub    rsp,0x30
  0067c: movq   QWORD PTR [rsp],xmm2
  00681: movq   QWORD PTR [rsp+0x8],xmm3
  00687: movq   QWORD PTR [rsp+0x10],xmm4
  0068d: movq   QWORD PTR [rsp+0x18],xmm6
  00693: movq   QWORD PTR [rsp+0x20],xmm7
  00699: movabs rax,0x5576cccb62a0
  006a3: call   rax
  006a5: movq   xmm2,QWORD PTR [rsp]
  006aa: movq   xmm3,QWORD PTR [rsp+0x8]
  006b0: movq   xmm4,QWORD PTR [rsp+0x10]
  006b6: movq   xmm6,QWORD PTR [rsp+0x18]
  006bc: movq   xmm7,QWORD PTR [rsp+0x20]
  006c2: add    rsp,0x30
  006c6: mov    QWORD PTR [rbp-0x58],rax
:00029 %7 = dynvar(2, %5)
  006ca: mov    rax,QWORD PTR [rbp-0x10]
  006ce: mov    rax,QWORD PTR [rax]
  006d1: lea    rax,[rax+0x10]
  006d5: mov    rax,QWORD PTR [rax-0x50]
  006d9: mov    QWORD PTR [rbp-0x60],rax
:00030 %8 = dynvar(2, %5)
  006dd: mov    rax,QWORD PTR [rbp-0x10]
  006e1: mov    rax,QWORD PTR [rax]
  006e4: lea    rax,[rax+0x10]
  006e8: mov    rax,QWORD PTR [rax-0x50]
  006ec: mov    QWORD PTR [rbp-0x68],rax
:00031 %7 = %7 * %8                         [Float][Float]
  006f0: mov    rdi,QWORD PTR [rbp-0x60]
  006f4: test   rdi,0x1
  006fb: jne    0x3938a
  00701: test   rdi,0x2
  00708: je     0x744
  0070e: xorps  xmm2,xmm2
  00711: movabs rax,0x8000000000000002
  0071b: cmp    rdi,rax
  0071e: je     0x756
  00724: mov    rax,rdi
  00727: sar    rax,0x3f
  0072b: add    rax,0x2
  0072f: and    rdi,0xfffffffffffffffc
  00733: or     rdi,rax
  00736: rol    rdi,0x3d
  0073a: movq   xmm2,rdi
  0073f: jmp    0x756
  00744: call   0xffff5009
  00749: test   rax,rax
  0074c: je     0x3938a
  00752: movq   xmm2,xmm0
  00756: mov    rdi,QWORD PTR [rbp-0x68]
  0075a: test   rdi,0x1
  00761: jne    0x393b3
  00767: test   rdi,0x2
  0076e: je     0x7aa
  00774: xorps  xmm3,xmm3
  00777: movabs rax,0x8000000000000002
  00781: cmp    rdi,rax
  00784: je     0x7bc
  0078a: mov    rax,rdi
  0078d: sar    rax,0x3f
  00791: add    rax,0x2
  00795: and    rdi,0xfffffffffffffffc
  00799: or     rdi,rax
  0079c: rol    rdi,0x3d
  007a0: movq   xmm3,rdi
  007a5: jmp    0x7bc
  007aa: call   0xffff5009
  007af: test   rax,rax
  007b2: je     0x393b3
  007b8: movq   xmm3,xmm0
  007bc: mulsd  xmm2,xmm3
:00032 %5 = %6 / %7                         [Float][Float]
  007c0: mov    rdi,QWORD PTR [rbp-0x58]
  007c4: test   rdi,0x1
  007cb: jne    0x393dc
  007d1: test   rdi,0x2
  007d8: je     0x814
  007de: xorps  xmm5,xmm5
  007e1: movabs rax,0x8000000000000002
  007eb: cmp    rdi,rax
  007ee: je     0x826
  007f4: mov    rax,rdi
  007f7: sar    rax,0x3f
  007fb: add    rax,0x2
  007ff: and    rdi,0xfffffffffffffffc
  00803: or     rdi,rax
  00806: rol    rdi,0x3d
  0080a: movq   xmm5,rdi
  0080f: jmp    0x826
  00814: call   0xffff5009
  00819: test   rax,rax
  0081c: je     0x393dc
  00822: movq   xmm5,xmm0
  00826: movq   xmm8,xmm5
  0082b: movq   rax,xmm2
  00830: test   rax,rax
  00833: je     0xffff4ff5
  00839: divsd  xmm8,xmm2
:00033 ret %5
  0083e: movq   xmm0,xmm8
  00843: call   0xffff50fc
  00848: mov    QWORD PTR [rbp-0x50],rax
  0084c: mov    rax,QWORD PTR [rbp-0x50]
  00850: leave  
  00851: ret    
==> start whole compile: <unnamed> FuncId(72) self_class:Scene start:[00000] bytecode:0x5576cd671480
<== finished compile. elapsed:24.4µs
offset:Pos(47392) code: 222 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    QWORD PTR [rbp-0x38],0x4
  00010: mov    QWORD PTR [rbp-0x40],0x4
  00018: mov    rdi,QWORD PTR [rbp-0x28]
  0001c: test   rdi,0x7
  00023: jne    0x38b5d
  00029: cmp    DWORD PTR [rdi+0x4],0x2f
  0002d: jne    0x38b5d
:00000 %2 = dynvar(1, %1)
  00033: mov    rax,QWORD PTR [rbp-0x10]
  00037: lea    rax,[rax+0x10]
  0003b: mov    rax,QWORD PTR [rax-0x30]
  0003f: mov    QWORD PTR [rbp-0x38],rax
:00001 %3 = literal[74]
  00043: mov    rax,0x95
  0004a: mov    QWORD PTR [rbp-0x40],rax
:00002 _ = %2.call times(&%3)               [Integer]
:00003 
  0004e: mov    rdi,QWORD PTR [rbp-0x38]
  00052: test   rdi,0x1
  00059: jne    0x76
  0005f: test   rdi,0x7
  00066: jne    0x38b6c
  0006c: cmp    DWORD PTR [rdi+0x4],0x6
  00070: jne    0x38b6c
  00076: cmp    DWORD PTR [rip+0xffffffffffff707b],0x26        # 0xffff70f8
  0007d: jne    0x38b6c
  00083: mov    r9,QWORD PTR [rbp-0x40]
  00087: mov    rdx,rdi
  0008a: mov    rax,QWORD PTR [rbx]
  0008d: lea    rdi,[rsp-0x18]
  00092: mov    QWORD PTR [rdi],rax
  00095: mov    QWORD PTR [rbx],rdi
  00098: mov    QWORD PTR [rsp-0x20],0x0
  000a1: mov    QWORD PTR [rsp-0x38],rcx
  000a6: lea    rcx,[rbp-0x48]
  000aa: mov    r8,0x0
  000b1: call   0x38b7b
  000b6: lea    rdi,[rbp-0x8]
  000ba: mov    QWORD PTR [rbx],rdi
  000bd: movabs r13,0x5576cd6714c0
  000c7: test   rax,rax
  000ca: je     0xffff471b
:00005 %2 = nil
  000d0: mov    QWORD PTR [rbp-0x38],0x4
:00006 ret %2
  000d8: mov    rax,QWORD PTR [rbp-0x38]
  000dc: leave  
  000dd: ret    
==> start whole compile: <unnamed> FuncId(73) self_class:Scene start:[00000] bytecode:0x5576cd690510
<== finished compile. elapsed:186.5µs
offset:Pos(48663) code: 10048 bytes  data: 417 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xb0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048: ff 	mov    QWORD PTR [rbp-0x98],rax
  0004f: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00056: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0005d:    	mov    rdi,QWORD PTR [rbp-0x28]
  00061: 00 	test   rdi,0x7
  00068:    	jne    0x386b6
  0006e:    	cmp    DWORD PTR [rdi+0x4],0x2f
  00072:    	jne    0x386b6
:00000 %13 = %0.call rand()                 [Scene]
:00001 
  00078:    	mov    rdi,QWORD PTR [rbp-0x28]
  0007c: 26 	cmp    DWORD PTR [rip+0xffffffffffff6b7e],0x26        # 0xffff6c01
  00083:    	jne    0x386c5
  00089: 00 	mov    r9,0x0
  00090:    	mov    rdx,rdi
  00093:    	mov    rax,QWORD PTR [rbx]
  00096:    	lea    rdi,[rsp-0x18]
  0009b:    	mov    QWORD PTR [rdi],rax
  0009e:    	mov    QWORD PTR [rbx],rdi
  000a1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000aa:    	mov    QWORD PTR [rsp-0x38],rcx
  000af: ff 	lea    rcx,[rbp-0x98]
  000b6: 00 	mov    r8,0x0
  000bd:    	call   0x386d4
  000c2:    	lea    rdi,[rbp-0x8]
  000c6:    	mov    QWORD PTR [rbx],rdi
  000c9: 76 	movabs r13,0x5576cd690530
  000d3:    	test   rax,rax
  000d6:    	je     0xffff4224
  000dc: ff 	mov    QWORD PTR [rbp-0x90],rax
:00003 %2 = %13
  000e3: ff 	mov    rax,QWORD PTR [rbp-0x90]
  000ea:    	mov    QWORD PTR [rbp-0x38],rax
:00004 %13 = literal[2.0]
  000ee: 00 	movq   xmm2,QWORD PTR [rip+0x2653]        # 0x2749
:00005 %14 = literal[3.14159265]
  000f6: 00 	movq   xmm3,QWORD PTR [rip+0x265b]        # 0x2759
:00006 %13 = %13 * %14                      [Float][Float]
  000fe:    	mulsd  xmm2,xmm3
:00007 %14 = %0.call rand()                 [Scene]
:00008 
  00102:    	mov    rdi,QWORD PTR [rbp-0x28]
  00106: 26 	cmp    DWORD PTR [rip+0xffffffffffff6af4],0x26        # 0xffff6c01
  0010d:    	jne    0x38706
  00113: 00 	mov    r9,0x0
  0011a:    	sub    rsp,0x10
  0011e:    	movq   QWORD PTR [rsp],xmm2
  00123:    	mov    rdx,rdi
  00126:    	mov    rax,QWORD PTR [rbx]
  00129:    	lea    rdi,[rsp-0x18]
  0012e:    	mov    QWORD PTR [rdi],rax
  00131:    	mov    QWORD PTR [rbx],rdi
  00134: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0013d:    	mov    QWORD PTR [rsp-0x38],rcx
  00142: ff 	lea    rcx,[rbp-0xa0]
  00149: 00 	mov    r8,0x0
  00150:    	call   0x38725
  00155:    	lea    rdi,[rbp-0x8]
  00159:    	mov    QWORD PTR [rbx],rdi
  0015c:    	movq   xmm2,QWORD PTR [rsp]
  00161:    	add    rsp,0x10
  00165: 76 	movabs r13,0x5576cd6905a0
  0016f:    	test   rax,rax
  00172:    	je     0xffff4224
  00178: ff 	mov    QWORD PTR [rbp-0x98],rax
:00010 %3 = %13 * %14                       [Float][Float]
  0017f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00186: 00 	test   rdi,0x1
  0018d:    	jne    0x38757
  00193: 00 	test   rdi,0x2
  0019a:    	je     0x1d6
  001a0:    	xorps  xmm3,xmm3
  001a3: 00 	movabs rax,0x8000000000000002
  001ad:    	cmp    rdi,rax
  001b0:    	je     0x1e8
  001b6:    	mov    rax,rdi
  001b9:    	sar    rax,0x3f
  001bd:    	add    rax,0x2
  001c1:    	and    rdi,0xfffffffffffffffc
  001c5:    	or     rdi,rax
  001c8:    	rol    rdi,0x3d
  001cc:    	movq   xmm3,rdi
  001d1:    	jmp    0x1e8
  001d6:    	call   0xffff425d
  001db:    	test   rax,rax
  001de:    	je     0x38757
  001e4:    	movq   xmm3,xmm0
  001e8:    	movq   xmm4,xmm2
  001ec:    	mulsd  xmm4,xmm3
:00011 %14 = const[Math]                    [Math]
  001f0: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff6a12]        # 0xffff6c09
  001f7: 00 	cmp    rax,QWORD PTR [rip+0x257b]        # 0x2779
  001fe:    	jne    0x38776
  00204: 00 	mov    rax,QWORD PTR [rip+0x255e]        # 0x2769
  0020b: ff 	mov    QWORD PTR [rbp-0x98],rax
:00012 %15 = %3
:00013 %13 = %14.call cos(%15; 1)           [#<Class:Math>]
:00014 
  00212:    	movq   xmm0,xmm4
  00216:    	call   0xffff4350
  0021b: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00222: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00229: 00 	test   rdi,0x7
  00230:    	jne    0x387da
  00236:    	cmp    DWORD PTR [rdi+0x4],0x20
  0023a:    	jne    0x387da
  00240: 26 	cmp    DWORD PTR [rip+0xffffffffffff69ba],0x26        # 0xffff6c01
  00247:    	jne    0x387da
  0024d: 00 	mov    r9,0x0
  00254:    	sub    rsp,0x10
  00258:    	movq   QWORD PTR [rsp],xmm4
  0025d:    	mov    rdx,rdi
  00260:    	mov    rax,QWORD PTR [rbx]
  00263:    	lea    rdi,[rsp-0x18]
  00268:    	mov    QWORD PTR [rdi],rax
  0026b:    	mov    QWORD PTR [rbx],rdi
  0026e: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00277:    	mov    QWORD PTR [rsp-0x38],rcx
  0027c: ff 	lea    rcx,[rbp-0xa0]
  00283: 00 	mov    r8,0x1
  0028a:    	call   0x387f6
  0028f:    	lea    rdi,[rbp-0x8]
  00293:    	mov    QWORD PTR [rbx],rdi
  00296:    	movq   xmm4,QWORD PTR [rsp]
  0029b:    	add    rsp,0x10
  0029f: 76 	movabs r13,0x5576cd690600
  002a9:    	test   rax,rax
  002ac:    	je     0xffff4224
  002b2: ff 	mov    QWORD PTR [rbp-0x90],rax
:00016 %15 = const[Math]                    [Math]
  002b9: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff6949]        # 0xffff6c09
  002c0: 00 	cmp    rax,QWORD PTR [rip+0x24d2]        # 0x2799
  002c7:    	jne    0x38828
  002cd: 00 	mov    rax,QWORD PTR [rip+0x24b5]        # 0x2789
  002d4: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00017 %16 = literal[1.0]
  002db: 00 	movq   xmm2,QWORD PTR [rip+0x24c6]        # 0x27a9
:00018 %16 = %16 - %2                       [Float][Float]
  002e3:    	mov    rdi,QWORD PTR [rbp-0x38]
  002e7: 00 	test   rdi,0x1
  002ee:    	jne    0x38880
  002f4: 00 	test   rdi,0x2
  002fb:    	je     0x337
  00301:    	xorps  xmm3,xmm3
  00304: 00 	movabs rax,0x8000000000000002
  0030e:    	cmp    rdi,rax
  00311:    	je     0x349
  00317:    	mov    rax,rdi
  0031a:    	sar    rax,0x3f
  0031e:    	add    rax,0x2
  00322:    	and    rdi,0xfffffffffffffffc
  00326:    	or     rdi,rax
  00329:    	rol    rdi,0x3d
  0032d:    	movq   xmm3,rdi
  00332:    	jmp    0x349
  00337:    	call   0xffff425d
  0033c:    	test   rax,rax
  0033f:    	je     0x38880
  00345:    	movq   xmm3,xmm0
  00349:    	subsd  xmm2,xmm3
:00019 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
:00020 
  0034d:    	movq   xmm0,xmm2
  00351:    	call   0xffff4350
  00356: ff 	mov    QWORD PTR [rbp-0xa8],rax
  0035d: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00364: 00 	test   rdi,0x7
  0036b:    	jne    0x388ac
  00371:    	cmp    DWORD PTR [rdi+0x4],0x20
  00375:    	jne    0x388ac
  0037b: 26 	cmp    DWORD PTR [rip+0xffffffffffff687f],0x26        # 0xffff6c01
  00382:    	jne    0x388ac
  00388: 00 	mov    r9,0x0
  0038f:    	sub    rsp,0x20
  00393:    	movq   QWORD PTR [rsp],xmm2
  00398:    	movq   QWORD PTR [rsp+0x8],xmm3
  0039e:    	movq   QWORD PTR [rsp+0x10],xmm4
  003a4:    	mov    rdx,rdi
  003a7:    	mov    rax,QWORD PTR [rbx]
  003aa:    	lea    rdi,[rsp-0x18]
  003af:    	mov    QWORD PTR [rdi],rax
  003b2:    	mov    QWORD PTR [rbx],rdi
  003b5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  003be:    	mov    QWORD PTR [rsp-0x38],rcx
  003c3: ff 	lea    rcx,[rbp-0xa8]
  003ca: 00 	mov    r8,0x1
  003d1:    	call   0x388c8
  003d6:    	lea    rdi,[rbp-0x8]
  003da:    	mov    QWORD PTR [rbx],rdi
  003dd:    	movq   xmm2,QWORD PTR [rsp]
  003e2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003e8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003ee:    	add    rsp,0x20
  003f2: 76 	movabs r13,0x5576cd690660
  003fc:    	test   rax,rax
  003ff:    	je     0xffff4224
  00405: ff 	mov    QWORD PTR [rbp-0x98],rax
:00022 %4 = %13 * %14                       [Float][Float]
  0040c: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00413: 00 	test   rdi,0x1
  0041a:    	jne    0x388fa
  00420: 00 	test   rdi,0x2
  00427:    	je     0x463
  0042d:    	xorps  xmm5,xmm5
  00430: 00 	movabs rax,0x8000000000000002
  0043a:    	cmp    rdi,rax
  0043d:    	je     0x475
  00443:    	mov    rax,rdi
  00446:    	sar    rax,0x3f
  0044a:    	add    rax,0x2
  0044e:    	and    rdi,0xfffffffffffffffc
  00452:    	or     rdi,rax
  00455:    	rol    rdi,0x3d
  00459:    	movq   xmm5,rdi
  0045e:    	jmp    0x475
  00463:    	call   0xffff425d
  00468:    	test   rax,rax
  0046b:    	je     0x388fa
  00471:    	movq   xmm5,xmm0
  00475: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0047c: 00 	test   rdi,0x1
  00483:    	jne    0x38916
  00489: 00 	test   rdi,0x2
  00490:    	je     0x4cc
  00496:    	xorps  xmm6,xmm6
  00499: 00 	movabs rax,0x8000000000000002
  004a3:    	cmp    rdi,rax
  004a6:    	je     0x4de
  004ac:    	mov    rax,rdi
  004af:    	sar    rax,0x3f
  004b3:    	add    rax,0x2
  004b7:    	and    rdi,0xfffffffffffffffc
  004bb:    	or     rdi,rax
  004be:    	rol    rdi,0x3d
  004c2:    	movq   xmm6,rdi
  004c7:    	jmp    0x4de
  004cc:    	call   0xffff425d
  004d1:    	test   rax,rax
  004d4:    	je     0x38916
  004da:    	movq   xmm6,xmm0
  004de:    	movq   xmm7,xmm5
  004e2:    	mulsd  xmm7,xmm6
:00023 %14 = const[Math]                    [Math]
  004e6: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff671c]        # 0xffff6c09
  004ed: 00 	cmp    rax,QWORD PTR [rip+0x22d5]        # 0x27c9
  004f4:    	jne    0x38932
  004fa: 00 	mov    rax,QWORD PTR [rip+0x22b8]        # 0x27b9
  00501: ff 	mov    QWORD PTR [rbp-0x98],rax
:00024 %15 = %3
:00025 %13 = %14.call sin(%15; 1)           [#<Class:Math>]
:00026 
  00508:    	movq   xmm0,xmm4
  0050c:    	call   0xffff4350
  00511: ff 	mov    QWORD PTR [rbp-0xa0],rax
  00518: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0051f: 00 	test   rdi,0x7
  00526:    	jne    0x389ba
  0052c:    	cmp    DWORD PTR [rdi+0x4],0x20
  00530:    	jne    0x389ba
  00536: 26 	cmp    DWORD PTR [rip+0xffffffffffff66c4],0x26        # 0xffff6c01
  0053d:    	jne    0x389ba
  00543: 00 	mov    r9,0x0
  0054a:    	sub    rsp,0x20
  0054e:    	movq   QWORD PTR [rsp],xmm2
  00553:    	movq   QWORD PTR [rsp+0x8],xmm3
  00559:    	movq   QWORD PTR [rsp+0x10],xmm4
  0055f:    	movq   QWORD PTR [rsp+0x18],xmm7
  00565:    	mov    rdx,rdi
  00568:    	mov    rax,QWORD PTR [rbx]
  0056b:    	lea    rdi,[rsp-0x18]
  00570:    	mov    QWORD PTR [rdi],rax
  00573:    	mov    QWORD PTR [rbx],rdi
  00576: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0057f:    	mov    QWORD PTR [rsp-0x38],rcx
  00584: ff 	lea    rcx,[rbp-0xa0]
  0058b: 00 	mov    r8,0x1
  00592:    	call   0x389e3
  00597:    	lea    rdi,[rbp-0x8]
  0059b:    	mov    QWORD PTR [rbx],rdi
  0059e:    	movq   xmm2,QWORD PTR [rsp]
  005a3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005a9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005af:    	movq   xmm7,QWORD PTR [rsp+0x18]
  005b5:    	add    rsp,0x20
  005b9: 76 	movabs r13,0x5576cd6906c0
  005c3:    	test   rax,rax
  005c6:    	je     0xffff4224
  005cc: ff 	mov    QWORD PTR [rbp-0x90],rax
:00028 %15 = const[Math]                    [Math]
  005d3: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff662f]        # 0xffff6c09
  005da: 00 	cmp    rax,QWORD PTR [rip+0x2208]        # 0x27e9
  005e1:    	jne    0x38a15
  005e7: 00 	mov    rax,QWORD PTR [rip+0x21eb]        # 0x27d9
  005ee: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00029 %16 = literal[1.0]
  005f5: 00 	movq   xmm2,QWORD PTR [rip+0x21fc]        # 0x27f9
:00030 %16 = %16 - %2                       [Float][Float]
  005fd:    	subsd  xmm2,xmm3
:00031 %14 = %15.call sqrt(%16; 1)          [#<Class:Math>]
:00032 
  00601:    	movq   xmm0,xmm2
  00605:    	call   0xffff4350
  0060a: ff 	mov    QWORD PTR [rbp-0xa8],rax
  00611: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00618: 00 	test   rdi,0x7
  0061f:    	jne    0x38a91
  00625:    	cmp    DWORD PTR [rdi+0x4],0x20
  00629:    	jne    0x38a91
  0062f: 26 	cmp    DWORD PTR [rip+0xffffffffffff65cb],0x26        # 0xffff6c01
  00636:    	jne    0x38a91
  0063c: 00 	mov    r9,0x0
  00643:    	sub    rsp,0x20
  00647:    	movq   QWORD PTR [rsp],xmm2
  0064c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00652:    	movq   QWORD PTR [rsp+0x10],xmm4
  00658:    	movq   QWORD PTR [rsp+0x18],xmm7
  0065e:    	mov    rdx,rdi
  00661:    	mov    rax,QWORD PTR [rbx]
  00664:    	lea    rdi,[rsp-0x18]
  00669:    	mov    QWORD PTR [rdi],rax
  0066c:    	mov    QWORD PTR [rbx],rdi
  0066f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00678:    	mov    QWORD PTR [rsp-0x38],rcx
  0067d: ff 	lea    rcx,[rbp-0xa8]
  00684: 00 	mov    r8,0x1
  0068b:    	call   0x38aba
  00690:    	lea    rdi,[rbp-0x8]
  00694:    	mov    QWORD PTR [rbx],rdi
  00697:    	movq   xmm2,QWORD PTR [rsp]
  0069c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  006a2:    	movq   xmm4,QWORD PTR [rsp+0x10]
  006a8:    	movq   xmm7,QWORD PTR [rsp+0x18]
  006ae:    	add    rsp,0x20
  006b2: 76 	movabs r13,0x5576cd690720
  006bc:    	test   rax,rax
  006bf:    	je     0xffff4224
  006c5: ff 	mov    QWORD PTR [rbp-0x98],rax
:00034 %5 = %13 * %14                       [Float][Float]
  006cc: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  006d3: 00 	test   rdi,0x1
  006da:    	jne    0x38aec
  006e0: 00 	test   rdi,0x2
  006e7:    	je     0x723
  006ed:    	xorps  xmm5,xmm5
  006f0: 00 	movabs rax,0x8000000000000002
  006fa:    	cmp    rdi,rax
  006fd:    	je     0x735
  00703:    	mov    rax,rdi
  00706:    	sar    rax,0x3f
  0070a:    	add    rax,0x2
  0070e:    	and    rdi,0xfffffffffffffffc
  00712:    	or     rdi,rax
  00715:    	rol    rdi,0x3d
  00719:    	movq   xmm5,rdi
  0071e:    	jmp    0x735
  00723:    	call   0xffff425d
  00728:    	test   rax,rax
  0072b:    	je     0x38aec
  00731:    	movq   xmm5,xmm0
  00735: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  0073c: 00 	test   rdi,0x1
  00743:    	jne    0x38b15
  00749: 00 	test   rdi,0x2
  00750:    	je     0x78c
  00756:    	xorps  xmm6,xmm6
  00759: 00 	movabs rax,0x8000000000000002
  00763:    	cmp    rdi,rax
  00766:    	je     0x79e
  0076c:    	mov    rax,rdi
  0076f:    	sar    rax,0x3f
  00773:    	add    rax,0x2
  00777:    	and    rdi,0xfffffffffffffffc
  0077b:    	or     rdi,rax
  0077e:    	rol    rdi,0x3d
  00782:    	movq   xmm6,rdi
  00787:    	jmp    0x79e
  0078c:    	call   0xffff425d
  00791:    	test   rax,rax
  00794:    	je     0x38b15
  0079a:    	movq   xmm6,xmm0
  0079e:    	movq   xmm8,xmm5
  007a3:    	mulsd  xmm8,xmm6
:00035 %13 = const[Math]                    [Math]
  007a8: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff645a]        # 0xffff6c09
  007af: 00 	cmp    rax,QWORD PTR [rip+0x2063]        # 0x2819
  007b6:    	jne    0x38b3e
  007bc: 00 	mov    rax,QWORD PTR [rip+0x2046]        # 0x2809
  007c3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00036 %14 = %2
:00037 %6 = %13.call sqrt(%14; 1)           [#<Class:Math>]
:00038 
  007ca:    	movq   xmm0,xmm3
  007ce:    	call   0xffff4350
  007d3: ff 	mov    QWORD PTR [rbp-0x98],rax
  007da: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  007e1: 00 	test   rdi,0x7
  007e8:    	jne    0x38bd4
  007ee:    	cmp    DWORD PTR [rdi+0x4],0x20
  007f2:    	jne    0x38bd4
  007f8: 26 	cmp    DWORD PTR [rip+0xffffffffffff6402],0x26        # 0xffff6c01
  007ff:    	jne    0x38bd4
  00805: 00 	mov    r9,0x0
  0080c:    	sub    rsp,0x30
  00810:    	movq   QWORD PTR [rsp],xmm2
  00815:    	movq   QWORD PTR [rsp+0x8],xmm3
  0081b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00821:    	movq   QWORD PTR [rsp+0x18],xmm7
  00827: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0082e:    	mov    rdx,rdi
  00831:    	mov    rax,QWORD PTR [rbx]
  00834:    	lea    rdi,[rsp-0x18]
  00839:    	mov    QWORD PTR [rdi],rax
  0083c:    	mov    QWORD PTR [rbx],rdi
  0083f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00848:    	mov    QWORD PTR [rsp-0x38],rcx
  0084d: ff 	lea    rcx,[rbp-0x98]
  00854: 00 	mov    r8,0x1
  0085b:    	call   0x38c0b
  00860:    	lea    rdi,[rbp-0x8]
  00864:    	mov    QWORD PTR [rbx],rdi
  00867:    	movq   xmm2,QWORD PTR [rsp]
  0086c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00872:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00878:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0087e: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00885:    	add    rsp,0x30
  00889: 76 	movabs r13,0x5576cd690780
  00893:    	test   rax,rax
  00896:    	je     0xffff4224
  0089c:    	mov    QWORD PTR [rbp-0x58],rax
:00040 %14 = dynvar(2, %2)
  008a0:    	mov    rax,QWORD PTR [rbp-0x10]
  008a4:    	mov    rax,QWORD PTR [rax]
  008a7:    	lea    rax,[rax+0x10]
  008ab:    	mov    rax,QWORD PTR [rax-0x38]
  008af: ff 	mov    QWORD PTR [rbp-0x98],rax
:00041 %15 = 0: i32
  008b6: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00042 %14 = %14.[%15]
  008c1:    	sub    rsp,0x30
  008c5:    	movq   QWORD PTR [rsp],xmm2
  008ca:    	movq   QWORD PTR [rsp+0x8],xmm3
  008d0:    	movq   QWORD PTR [rsp+0x10],xmm4
  008d6:    	movq   QWORD PTR [rsp+0x18],xmm7
  008dc: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  008e3: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  008ea: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  008f1:    	mov    rdi,rbx
  008f4:    	mov    rsi,r12
  008f7: 76 	movabs rax,0x5576cccd60e0
  00901:    	call   rax
  00903:    	movq   xmm2,QWORD PTR [rsp]
  00908:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0090e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00914:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0091a: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00921:    	add    rsp,0x30
  00925: 76 	movabs r13,0x5576cd6907c0
  0092f:    	test   rax,rax
  00932:    	je     0xffff4224
  00938: ff 	mov    QWORD PTR [rbp-0x98],rax
:00043 %13 = %14.call x()                   [Vec]
:00044 
  0093f: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00946: 00 	test   rdi,0x7
  0094d:    	jne    0x38c3d
  00953:    	cmp    DWORD PTR [rdi+0x4],0x25
  00957:    	jne    0x38c3d
  0095d: 26 	cmp    DWORD PTR [rip+0xffffffffffff629d],0x26        # 0xffff6c01
  00964:    	jne    0x38c3d
  0096a:    	mov    esi,DWORD PTR [rip+0x1eb5]        # 0x2825
  00970:    	cmp    esi,0xffffffff
  00973:    	je     0x38c74
  00979:    	xor    rax,rax
  0097c:    	mov    ax,WORD PTR [rdi+0x2]
  00980:    	cmp    rax,0x3
  00984:    	jne    0x99d
  0098a:    	cmp    esi,0x6
  0098d:    	jge    0x99d
  00993:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00998:    	jmp    0x9ed
  0099d:    	sub    rsp,0x30
  009a1:    	movq   QWORD PTR [rsp],xmm2
  009a6:    	movq   QWORD PTR [rsp+0x8],xmm3
  009ac:    	movq   QWORD PTR [rsp+0x10],xmm4
  009b2:    	movq   QWORD PTR [rsp+0x18],xmm7
  009b8: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  009bf: 76 	movabs rax,0x5576cccb62a0
  009c9:    	call   rax
  009cb:    	movq   xmm2,QWORD PTR [rsp]
  009d0:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009d6:    	movq   xmm4,QWORD PTR [rsp+0x10]
  009dc:    	movq   xmm7,QWORD PTR [rsp+0x18]
  009e2: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  009e9:    	add    rsp,0x30
  009ed: ff 	mov    QWORD PTR [rbp-0x90],rax
:00046 %13 = %4 * %13                       [Float][Float]
  009f4: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  009fb: 00 	test   rdi,0x1
  00a02:    	jne    0x38ce1
  00a08: 00 	test   rdi,0x2
  00a0f:    	je     0xa4b
  00a15:    	xorps  xmm5,xmm5
  00a18: 00 	movabs rax,0x8000000000000002
  00a22:    	cmp    rdi,rax
  00a25:    	je     0xa5d
  00a2b:    	mov    rax,rdi
  00a2e:    	sar    rax,0x3f
  00a32:    	add    rax,0x2
  00a36:    	and    rdi,0xfffffffffffffffc
  00a3a:    	or     rdi,rax
  00a3d:    	rol    rdi,0x3d
  00a41:    	movq   xmm5,rdi
  00a46:    	jmp    0xa5d
  00a4b:    	call   0xffff425d
  00a50:    	test   rax,rax
  00a53:    	je     0x38ce1
  00a59:    	movq   xmm5,xmm0
  00a5d:    	mulsd  xmm5,xmm7
:00047 %15 = dynvar(2, %2)
  00a61:    	mov    rax,QWORD PTR [rbp-0x10]
  00a65:    	mov    rax,QWORD PTR [rax]
  00a68:    	lea    rax,[rax+0x10]
  00a6c:    	mov    rax,QWORD PTR [rax-0x38]
  00a70: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00048 %16 = 1: i32
  00a77: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00049 %15 = %15.[%16]
  00a82:    	sub    rsp,0x30
  00a86:    	movq   QWORD PTR [rsp],xmm3
  00a8b:    	movq   QWORD PTR [rsp+0x8],xmm4
  00a91:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a97:    	movq   QWORD PTR [rsp+0x18],xmm7
  00a9d: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00aa4: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00aab: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00ab2:    	mov    rdi,rbx
  00ab5:    	mov    rsi,r12
  00ab8: 76 	movabs rax,0x5576cccd60e0
  00ac2:    	call   rax
  00ac4:    	movq   xmm3,QWORD PTR [rsp]
  00ac9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00acf:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00ad5:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00adb: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00ae2:    	add    rsp,0x30
  00ae6: 76 	movabs r13,0x5576cd690830
  00af0:    	test   rax,rax
  00af3:    	je     0xffff4224
  00af9: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00050 %14 = %15.call x()                   [Vec]
:00051 
  00b00: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00b07: 00 	test   rdi,0x7
  00b0e:    	jne    0x38d18
  00b14:    	cmp    DWORD PTR [rdi+0x4],0x25
  00b18:    	jne    0x38d18
  00b1e: 26 	cmp    DWORD PTR [rip+0xffffffffffff60dc],0x26        # 0xffff6c01
  00b25:    	jne    0x38d18
  00b2b:    	mov    esi,DWORD PTR [rip+0x1cfc]        # 0x282d
  00b31:    	cmp    esi,0xffffffff
  00b34:    	je     0x38d5f
  00b3a:    	xor    rax,rax
  00b3d:    	mov    ax,WORD PTR [rdi+0x2]
  00b41:    	cmp    rax,0x3
  00b45:    	jne    0xb5e
  00b4b:    	cmp    esi,0x6
  00b4e:    	jge    0xb5e
  00b54:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00b59:    	jmp    0xbae
  00b5e:    	sub    rsp,0x30
  00b62:    	movq   QWORD PTR [rsp],xmm3
  00b67:    	movq   QWORD PTR [rsp+0x8],xmm4
  00b6d:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b73:    	movq   QWORD PTR [rsp+0x18],xmm7
  00b79: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00b80: 76 	movabs rax,0x5576cccb62a0
  00b8a:    	call   rax
  00b8c:    	movq   xmm3,QWORD PTR [rsp]
  00b91:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00b97:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b9d:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00ba3: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00baa:    	add    rsp,0x30
  00bae: ff 	mov    QWORD PTR [rbp-0x98],rax
:00053 %14 = %5 * %14                       [Float][Float]
  00bb5: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00bbc: 00 	test   rdi,0x1
  00bc3:    	jne    0x38dcc
  00bc9: 00 	test   rdi,0x2
  00bd0:    	je     0xc0c
  00bd6:    	xorps  xmm2,xmm2
  00bd9: 00 	movabs rax,0x8000000000000002
  00be3:    	cmp    rdi,rax
  00be6:    	je     0xc1e
  00bec:    	mov    rax,rdi
  00bef:    	sar    rax,0x3f
  00bf3:    	add    rax,0x2
  00bf7:    	and    rdi,0xfffffffffffffffc
  00bfb:    	or     rdi,rax
  00bfe:    	rol    rdi,0x3d
  00c02:    	movq   xmm2,rdi
  00c07:    	jmp    0xc1e
  00c0c:    	call   0xffff425d
  00c11:    	test   rax,rax
  00c14:    	je     0x38dcc
  00c1a:    	movq   xmm2,xmm0
  00c1e:    	mulsd  xmm2,xmm8
:00054 %13 = %13 + %14                      [Float][Float]
  00c23:    	addsd  xmm5,xmm2
:00055 %15 = dynvar(2, %2)
  00c27:    	mov    rax,QWORD PTR [rbp-0x10]
  00c2b:    	mov    rax,QWORD PTR [rax]
  00c2e:    	lea    rax,[rax+0x10]
  00c32:    	mov    rax,QWORD PTR [rax-0x38]
  00c36: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00056 %16 = 2: i32
  00c3d: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00057 %15 = %15.[%16]
  00c48:    	sub    rsp,0x30
  00c4c:    	movq   QWORD PTR [rsp],xmm2
  00c51:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c57:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c5d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c63:    	movq   QWORD PTR [rsp+0x20],xmm7
  00c69: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00c70: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  00c77: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  00c7e:    	mov    rdi,rbx
  00c81:    	mov    rsi,r12
  00c84: 76 	movabs rax,0x5576cccd60e0
  00c8e:    	call   rax
  00c90:    	movq   xmm2,QWORD PTR [rsp]
  00c95:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00c9b:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ca1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ca7:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00cad: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00cb4:    	add    rsp,0x30
  00cb8: 76 	movabs r13,0x5576cd6908b0
  00cc2:    	test   rax,rax
  00cc5:    	je     0xffff4224
  00ccb: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00058 %14 = %15.call x()                   [Vec]
:00059 
  00cd2: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  00cd9: 00 	test   rdi,0x7
  00ce0:    	jne    0x38e13
  00ce6:    	cmp    DWORD PTR [rdi+0x4],0x25
  00cea:    	jne    0x38e13
  00cf0: 26 	cmp    DWORD PTR [rip+0xffffffffffff5f0a],0x26        # 0xffff6c01
  00cf7:    	jne    0x38e13
  00cfd:    	mov    esi,DWORD PTR [rip+0x1b32]        # 0x2835
  00d03:    	cmp    esi,0xffffffff
  00d06:    	je     0x38e5a
  00d0c:    	xor    rax,rax
  00d0f:    	mov    ax,WORD PTR [rdi+0x2]
  00d13:    	cmp    rax,0x3
  00d17:    	jne    0xd30
  00d1d:    	cmp    esi,0x6
  00d20:    	jge    0xd30
  00d26:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00d2b:    	jmp    0xd80
  00d30:    	sub    rsp,0x30
  00d34:    	movq   QWORD PTR [rsp],xmm3
  00d39:    	movq   QWORD PTR [rsp+0x8],xmm4
  00d3f:    	movq   QWORD PTR [rsp+0x10],xmm5
  00d45:    	movq   QWORD PTR [rsp+0x18],xmm7
  00d4b: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00d52: 76 	movabs rax,0x5576cccb62a0
  00d5c:    	call   rax
  00d5e:    	movq   xmm3,QWORD PTR [rsp]
  00d63:    	movq   xmm4,QWORD PTR [rsp+0x8]
  00d69:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00d6f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00d75: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00d7c:    	add    rsp,0x30
  00d80: ff 	mov    QWORD PTR [rbp-0x98],rax
:00061 %14 = %6 * %14                       [Float][Float]
  00d87:    	mov    rdi,QWORD PTR [rbp-0x58]
  00d8b: 00 	test   rdi,0x1
  00d92:    	jne    0x38ec7
  00d98: 00 	test   rdi,0x2
  00d9f:    	je     0xddb
  00da5:    	xorps  xmm2,xmm2
  00da8: 00 	movabs rax,0x8000000000000002
  00db2:    	cmp    rdi,rax
  00db5:    	je     0xded
  00dbb:    	mov    rax,rdi
  00dbe:    	sar    rax,0x3f
  00dc2:    	add    rax,0x2
  00dc6:    	and    rdi,0xfffffffffffffffc
  00dca:    	or     rdi,rax
  00dcd:    	rol    rdi,0x3d
  00dd1:    	movq   xmm2,rdi
  00dd6:    	jmp    0xded
  00ddb:    	call   0xffff425d
  00de0:    	test   rax,rax
  00de3:    	je     0x38ec7
  00de9:    	movq   xmm2,xmm0
  00ded: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00df4: 00 	test   rdi,0x1
  00dfb:    	jne    0x38f0e
  00e01: 00 	test   rdi,0x2
  00e08:    	je     0xe44
  00e0e:    	xorps  xmm6,xmm6
  00e11: 00 	movabs rax,0x8000000000000002
  00e1b:    	cmp    rdi,rax
  00e1e:    	je     0xe56
  00e24:    	mov    rax,rdi
  00e27:    	sar    rax,0x3f
  00e2b:    	add    rax,0x2
  00e2f:    	and    rdi,0xfffffffffffffffc
  00e33:    	or     rdi,rax
  00e36:    	rol    rdi,0x3d
  00e3a:    	movq   xmm6,rdi
  00e3f:    	jmp    0xe56
  00e44:    	call   0xffff425d
  00e49:    	test   rax,rax
  00e4c:    	je     0x38f0e
  00e52:    	movq   xmm6,xmm0
  00e56:    	mulsd  xmm6,xmm2
:00062 %7 = %13 + %14                       [Float][Float]
  00e5a:    	movq   xmm9,xmm5
  00e5f:    	addsd  xmm9,xmm6
:00063 %14 = dynvar(2, %2)
  00e64:    	mov    rax,QWORD PTR [rbp-0x10]
  00e68:    	mov    rax,QWORD PTR [rax]
  00e6b:    	lea    rax,[rax+0x10]
  00e6f:    	mov    rax,QWORD PTR [rax-0x38]
  00e73: ff 	mov    QWORD PTR [rbp-0x98],rax
:00064 %15 = 0: i32
  00e7a: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00065 %14 = %14.[%15]
  00e85:    	sub    rsp,0x40
  00e89:    	movq   QWORD PTR [rsp],xmm2
  00e8e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e94:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e9a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00ea0:    	movq   QWORD PTR [rsp+0x20],xmm7
  00ea6: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  00ead: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  00eb4: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  00ebb: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  00ec2:    	mov    rdi,rbx
  00ec5:    	mov    rsi,r12
  00ec8: 76 	movabs rax,0x5576cccd60e0
  00ed2:    	call   rax
  00ed4:    	movq   xmm2,QWORD PTR [rsp]
  00ed9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00edf:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ee5:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00eeb:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00ef1: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  00ef8: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  00eff:    	add    rsp,0x40
  00f03: 76 	movabs r13,0x5576cd690930
  00f0d:    	test   rax,rax
  00f10:    	je     0xffff4224
  00f16: ff 	mov    QWORD PTR [rbp-0x98],rax
:00066 %13 = %14.call y()                   [Vec]
:00067 
  00f1d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  00f24: 00 	test   rdi,0x7
  00f2b:    	jne    0x38f55
  00f31:    	cmp    DWORD PTR [rdi+0x4],0x25
  00f35:    	jne    0x38f55
  00f3b: 26 	cmp    DWORD PTR [rip+0xffffffffffff5cbf],0x26        # 0xffff6c01
  00f42:    	jne    0x38f55
  00f48:    	mov    esi,DWORD PTR [rip+0x18ef]        # 0x283d
  00f4e:    	cmp    esi,0xffffffff
  00f51:    	je     0x38f9a
  00f57:    	xor    rax,rax
  00f5a:    	mov    ax,WORD PTR [rdi+0x2]
  00f5e:    	cmp    rax,0x3
  00f62:    	jne    0xf7b
  00f68:    	cmp    esi,0x6
  00f6b:    	jge    0xf7b
  00f71:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00f76:    	jmp    0xfd9
  00f7b:    	sub    rsp,0x30
  00f7f:    	movq   QWORD PTR [rsp],xmm2
  00f84:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f8a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f90:    	movq   QWORD PTR [rsp+0x18],xmm7
  00f96: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  00f9d: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  00fa4: 76 	movabs rax,0x5576cccb62a0
  00fae:    	call   rax
  00fb0:    	movq   xmm2,QWORD PTR [rsp]
  00fb5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00fbb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00fc1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  00fc7: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  00fce: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  00fd5:    	add    rsp,0x30
  00fd9: ff 	mov    QWORD PTR [rbp-0x90],rax
:00069 %13 = %4 * %13                       [Float][Float]
  00fe0: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00fe7: 00 	test   rdi,0x1
  00fee:    	jne    0x39015
  00ff4: 00 	test   rdi,0x2
  00ffb:    	je     0x1037
  01001:    	xorps  xmm5,xmm5
  01004: 00 	movabs rax,0x8000000000000002
  0100e:    	cmp    rdi,rax
  01011:    	je     0x1049
  01017:    	mov    rax,rdi
  0101a:    	sar    rax,0x3f
  0101e:    	add    rax,0x2
  01022:    	and    rdi,0xfffffffffffffffc
  01026:    	or     rdi,rax
  01029:    	rol    rdi,0x3d
  0102d:    	movq   xmm5,rdi
  01032:    	jmp    0x1049
  01037:    	call   0xffff425d
  0103c:    	test   rax,rax
  0103f:    	je     0x39015
  01045:    	movq   xmm5,xmm0
  01049:    	mulsd  xmm5,xmm7
:00070 %15 = dynvar(2, %2)
  0104d:    	mov    rax,QWORD PTR [rbp-0x10]
  01051:    	mov    rax,QWORD PTR [rax]
  01054:    	lea    rax,[rax+0x10]
  01058:    	mov    rax,QWORD PTR [rax-0x38]
  0105c: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00071 %16 = 1: i32
  01063: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00072 %15 = %15.[%16]
  0106e:    	sub    rsp,0x40
  01072:    	movq   QWORD PTR [rsp],xmm2
  01077:    	movq   QWORD PTR [rsp+0x8],xmm3
  0107d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01083:    	movq   QWORD PTR [rsp+0x18],xmm5
  01089:    	movq   QWORD PTR [rsp+0x20],xmm7
  0108f: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01096: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  0109d: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  010a4: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  010ab:    	mov    rdi,rbx
  010ae:    	mov    rsi,r12
  010b1: 76 	movabs rax,0x5576cccd60e0
  010bb:    	call   rax
  010bd:    	movq   xmm2,QWORD PTR [rsp]
  010c2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010c8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010ce:    	movq   xmm5,QWORD PTR [rsp+0x18]
  010d4:    	movq   xmm7,QWORD PTR [rsp+0x20]
  010da: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  010e1: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  010e8:    	add    rsp,0x40
  010ec: 76 	movabs r13,0x5576cd6909a0
  010f6:    	test   rax,rax
  010f9:    	je     0xffff4224
  010ff: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00073 %14 = %15.call y()                   [Vec]
:00074 
  01106: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  0110d: 00 	test   rdi,0x7
  01114:    	jne    0x3905a
  0111a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0111e:    	jne    0x3905a
  01124: 26 	cmp    DWORD PTR [rip+0xffffffffffff5ad6],0x26        # 0xffff6c01
  0112b:    	jne    0x3905a
  01131:    	mov    esi,DWORD PTR [rip+0x170e]        # 0x2845
  01137:    	cmp    esi,0xffffffff
  0113a:    	je     0x390af
  01140:    	xor    rax,rax
  01143:    	mov    ax,WORD PTR [rdi+0x2]
  01147:    	cmp    rax,0x3
  0114b:    	jne    0x1164
  01151:    	cmp    esi,0x6
  01154:    	jge    0x1164
  0115a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0115f:    	jmp    0x11ce
  01164:    	sub    rsp,0x40
  01168:    	movq   QWORD PTR [rsp],xmm2
  0116d:    	movq   QWORD PTR [rsp+0x8],xmm3
  01173:    	movq   QWORD PTR [rsp+0x10],xmm4
  01179:    	movq   QWORD PTR [rsp+0x18],xmm5
  0117f:    	movq   QWORD PTR [rsp+0x20],xmm7
  01185: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0118c: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01193: 76 	movabs rax,0x5576cccb62a0
  0119d:    	call   rax
  0119f:    	movq   xmm2,QWORD PTR [rsp]
  011a4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  011aa:    	movq   xmm4,QWORD PTR [rsp+0x10]
  011b0:    	movq   xmm5,QWORD PTR [rsp+0x18]
  011b6:    	movq   xmm7,QWORD PTR [rsp+0x20]
  011bc: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  011c3: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  011ca:    	add    rsp,0x40
  011ce: ff 	mov    QWORD PTR [rbp-0x98],rax
:00076 %14 = %5 * %14                       [Float][Float]
  011d5: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  011dc: 00 	test   rdi,0x1
  011e3:    	jne    0x39136
  011e9: 00 	test   rdi,0x2
  011f0:    	je     0x122c
  011f6:    	xorps  xmm6,xmm6
  011f9: 00 	movabs rax,0x8000000000000002
  01203:    	cmp    rdi,rax
  01206:    	je     0x123e
  0120c:    	mov    rax,rdi
  0120f:    	sar    rax,0x3f
  01213:    	add    rax,0x2
  01217:    	and    rdi,0xfffffffffffffffc
  0121b:    	or     rdi,rax
  0121e:    	rol    rdi,0x3d
  01222:    	movq   xmm6,rdi
  01227:    	jmp    0x123e
  0122c:    	call   0xffff425d
  01231:    	test   rax,rax
  01234:    	je     0x39136
  0123a:    	movq   xmm6,xmm0
  0123e:    	mulsd  xmm6,xmm8
:00077 %13 = %13 + %14                      [Float][Float]
  01243:    	addsd  xmm5,xmm6
:00078 %15 = dynvar(2, %2)
  01247:    	mov    rax,QWORD PTR [rbp-0x10]
  0124b:    	mov    rax,QWORD PTR [rax]
  0124e:    	lea    rax,[rax+0x10]
  01252:    	mov    rax,QWORD PTR [rax-0x38]
  01256: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00079 %16 = 2: i32
  0125d: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00080 %15 = %15.[%16]
  01268:    	sub    rsp,0x40
  0126c:    	movq   QWORD PTR [rsp],xmm2
  01271:    	movq   QWORD PTR [rsp+0x8],xmm3
  01277:    	movq   QWORD PTR [rsp+0x10],xmm4
  0127d:    	movq   QWORD PTR [rsp+0x18],xmm5
  01283:    	movq   QWORD PTR [rsp+0x20],xmm6
  01289:    	movq   QWORD PTR [rsp+0x28],xmm7
  0128f: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  01296: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  0129d: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  012a4: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  012ab:    	mov    rdi,rbx
  012ae:    	mov    rsi,r12
  012b1: 76 	movabs rax,0x5576cccd60e0
  012bb:    	call   rax
  012bd:    	movq   xmm2,QWORD PTR [rsp]
  012c2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  012c8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  012ce:    	movq   xmm5,QWORD PTR [rsp+0x18]
  012d4:    	movq   xmm6,QWORD PTR [rsp+0x20]
  012da:    	movq   xmm7,QWORD PTR [rsp+0x28]
  012e0: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  012e7: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  012ee:    	add    rsp,0x40
  012f2: 76 	movabs r13,0x5576cd690a20
  012fc:    	test   rax,rax
  012ff:    	je     0xffff4224
  01305: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00081 %14 = %15.call y()                   [Vec]
:00082 
  0130c: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01313: 00 	test   rdi,0x7
  0131a:    	jne    0x3918b
  01320:    	cmp    DWORD PTR [rdi+0x4],0x25
  01324:    	jne    0x3918b
  0132a: 26 	cmp    DWORD PTR [rip+0xffffffffffff58d0],0x26        # 0xffff6c01
  01331:    	jne    0x3918b
  01337:    	mov    esi,DWORD PTR [rip+0x1510]        # 0x284d
  0133d:    	cmp    esi,0xffffffff
  01340:    	je     0x391e0
  01346:    	xor    rax,rax
  01349:    	mov    ax,WORD PTR [rdi+0x2]
  0134d:    	cmp    rax,0x3
  01351:    	jne    0x136a
  01357:    	cmp    esi,0x6
  0135a:    	jge    0x136a
  01360:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01365:    	jmp    0x13d4
  0136a:    	sub    rsp,0x40
  0136e:    	movq   QWORD PTR [rsp],xmm2
  01373:    	movq   QWORD PTR [rsp+0x8],xmm3
  01379:    	movq   QWORD PTR [rsp+0x10],xmm4
  0137f:    	movq   QWORD PTR [rsp+0x18],xmm5
  01385:    	movq   QWORD PTR [rsp+0x20],xmm7
  0138b: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  01392: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  01399: 76 	movabs rax,0x5576cccb62a0
  013a3:    	call   rax
  013a5:    	movq   xmm2,QWORD PTR [rsp]
  013aa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013b0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  013b6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  013bc:    	movq   xmm7,QWORD PTR [rsp+0x20]
  013c2: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  013c9: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  013d0:    	add    rsp,0x40
  013d4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00084 %14 = %6 * %14                       [Float][Float]
  013db: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  013e2: 00 	test   rdi,0x1
  013e9:    	jne    0x39267
  013ef: 00 	test   rdi,0x2
  013f6:    	je     0x1432
  013fc:    	xorps  xmm6,xmm6
  013ff: 00 	movabs rax,0x8000000000000002
  01409:    	cmp    rdi,rax
  0140c:    	je     0x1444
  01412:    	mov    rax,rdi
  01415:    	sar    rax,0x3f
  01419:    	add    rax,0x2
  0141d:    	and    rdi,0xfffffffffffffffc
  01421:    	or     rdi,rax
  01424:    	rol    rdi,0x3d
  01428:    	movq   xmm6,rdi
  0142d:    	jmp    0x1444
  01432:    	call   0xffff425d
  01437:    	test   rax,rax
  0143a:    	je     0x39267
  01440:    	movq   xmm6,xmm0
  01444:    	mulsd  xmm6,xmm2
:00085 %8 = %13 + %14                       [Float][Float]
  01448:    	movq   xmm10,xmm5
  0144d:    	addsd  xmm10,xmm6
:00086 %14 = dynvar(2, %2)
  01452:    	mov    rax,QWORD PTR [rbp-0x10]
  01456:    	mov    rax,QWORD PTR [rax]
  01459:    	lea    rax,[rax+0x10]
  0145d:    	mov    rax,QWORD PTR [rax-0x38]
  01461: ff 	mov    QWORD PTR [rbp-0x98],rax
:00087 %15 = 0: i32
  01468: ff 	mov    QWORD PTR [rbp-0xa0],0x1
:00088 %14 = %14.[%15]
  01473:    	sub    rsp,0x40
  01477:    	movq   QWORD PTR [rsp],xmm2
  0147c:    	movq   QWORD PTR [rsp+0x8],xmm3
  01482:    	movq   QWORD PTR [rsp+0x10],xmm4
  01488:    	movq   QWORD PTR [rsp+0x18],xmm5
  0148e:    	movq   QWORD PTR [rsp+0x20],xmm7
  01494: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  0149b: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  014a2: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  014a9: ff 	mov    rdx,QWORD PTR [rbp-0x98]
  014b0: ff 	mov    rcx,QWORD PTR [rbp-0xa0]
  014b7:    	mov    rdi,rbx
  014ba:    	mov    rsi,r12
  014bd: 76 	movabs rax,0x5576cccd60e0
  014c7:    	call   rax
  014c9:    	movq   xmm2,QWORD PTR [rsp]
  014ce:    	movq   xmm3,QWORD PTR [rsp+0x8]
  014d4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  014da:    	movq   xmm5,QWORD PTR [rsp+0x18]
  014e0:    	movq   xmm7,QWORD PTR [rsp+0x20]
  014e6: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  014ed: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  014f4: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  014fb:    	add    rsp,0x40
  014ff: 76 	movabs r13,0x5576cd690aa0
  01509:    	test   rax,rax
  0150c:    	je     0xffff4224
  01512: ff 	mov    QWORD PTR [rbp-0x98],rax
:00089 %13 = %14.call z()                   [Vec]
:00090 
  01519: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01520: 00 	test   rdi,0x7
  01527:    	jne    0x392bc
  0152d:    	cmp    DWORD PTR [rdi+0x4],0x25
  01531:    	jne    0x392bc
  01537: 26 	cmp    DWORD PTR [rip+0xffffffffffff56c3],0x26        # 0xffff6c01
  0153e:    	jne    0x392bc
  01544:    	mov    esi,DWORD PTR [rip+0x130b]        # 0x2855
  0154a:    	cmp    esi,0xffffffff
  0154d:    	je     0x3930f
  01553:    	xor    rax,rax
  01556:    	mov    ax,WORD PTR [rdi+0x2]
  0155a:    	cmp    rax,0x3
  0155e:    	jne    0x1577
  01564:    	cmp    esi,0x6
  01567:    	jge    0x1577
  0156d:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01572:    	jmp    0x15e3
  01577:    	sub    rsp,0x40
  0157b:    	movq   QWORD PTR [rsp],xmm2
  01580:    	movq   QWORD PTR [rsp+0x8],xmm3
  01586:    	movq   QWORD PTR [rsp+0x10],xmm4
  0158c:    	movq   QWORD PTR [rsp+0x18],xmm7
  01592: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01599: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  015a0: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  015a7: 76 	movabs rax,0x5576cccb62a0
  015b1:    	call   rax
  015b3:    	movq   xmm2,QWORD PTR [rsp]
  015b8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  015be:    	movq   xmm4,QWORD PTR [rsp+0x10]
  015c4:    	movq   xmm7,QWORD PTR [rsp+0x18]
  015ca: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  015d1: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  015d8: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  015df:    	add    rsp,0x40
  015e3: ff 	mov    QWORD PTR [rbp-0x90],rax
:00092 %13 = %4 * %13                       [Float][Float]
  015ea: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  015f1: 00 	test   rdi,0x1
  015f8:    	jne    0x39398
  015fe: 00 	test   rdi,0x2
  01605:    	je     0x1641
  0160b:    	xorps  xmm5,xmm5
  0160e: 00 	movabs rax,0x8000000000000002
  01618:    	cmp    rdi,rax
  0161b:    	je     0x1653
  01621:    	mov    rax,rdi
  01624:    	sar    rax,0x3f
  01628:    	add    rax,0x2
  0162c:    	and    rdi,0xfffffffffffffffc
  01630:    	or     rdi,rax
  01633:    	rol    rdi,0x3d
  01637:    	movq   xmm5,rdi
  0163c:    	jmp    0x1653
  01641:    	call   0xffff425d
  01646:    	test   rax,rax
  01649:    	je     0x39398
  0164f:    	movq   xmm5,xmm0
  01653:    	mulsd  xmm5,xmm7
:00093 %15 = dynvar(2, %2)
  01657:    	mov    rax,QWORD PTR [rbp-0x10]
  0165b:    	mov    rax,QWORD PTR [rax]
  0165e:    	lea    rax,[rax+0x10]
  01662:    	mov    rax,QWORD PTR [rax-0x38]
  01666: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00094 %16 = 1: i32
  0166d: ff 	mov    QWORD PTR [rbp-0xa8],0x3
:00095 %15 = %15.[%16]
  01678:    	sub    rsp,0x40
  0167c:    	movq   QWORD PTR [rsp],xmm2
  01681:    	movq   QWORD PTR [rsp+0x8],xmm3
  01687:    	movq   QWORD PTR [rsp+0x10],xmm4
  0168d:    	movq   QWORD PTR [rsp+0x18],xmm5
  01693:    	movq   QWORD PTR [rsp+0x20],xmm7
  01699: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  016a0: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  016a7: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  016ae: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  016b5: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  016bc:    	mov    rdi,rbx
  016bf:    	mov    rsi,r12
  016c2: 76 	movabs rax,0x5576cccd60e0
  016cc:    	call   rax
  016ce:    	movq   xmm2,QWORD PTR [rsp]
  016d3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  016d9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  016df:    	movq   xmm5,QWORD PTR [rsp+0x18]
  016e5:    	movq   xmm7,QWORD PTR [rsp+0x20]
  016eb: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  016f2: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  016f9: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01700:    	add    rsp,0x40
  01704: 76 	movabs r13,0x5576cd690b10
  0170e:    	test   rax,rax
  01711:    	je     0xffff4224
  01717: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00096 %14 = %15.call z()                   [Vec]
:00097 
  0171e: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01725: 00 	test   rdi,0x7
  0172c:    	jne    0x393eb
  01732:    	cmp    DWORD PTR [rdi+0x4],0x25
  01736:    	jne    0x393eb
  0173c: 26 	cmp    DWORD PTR [rip+0xffffffffffff54be],0x26        # 0xffff6c01
  01743:    	jne    0x393eb
  01749:    	mov    esi,DWORD PTR [rip+0x110e]        # 0x285d
  0174f:    	cmp    esi,0xffffffff
  01752:    	je     0x3944e
  01758:    	xor    rax,rax
  0175b:    	mov    ax,WORD PTR [rdi+0x2]
  0175f:    	cmp    rax,0x3
  01763:    	jne    0x177c
  01769:    	cmp    esi,0x6
  0176c:    	jge    0x177c
  01772:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01777:    	jmp    0x17f4
  0177c:    	sub    rsp,0x40
  01780:    	movq   QWORD PTR [rsp],xmm2
  01785:    	movq   QWORD PTR [rsp+0x8],xmm3
  0178b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01791:    	movq   QWORD PTR [rsp+0x18],xmm5
  01797:    	movq   QWORD PTR [rsp+0x20],xmm7
  0179d: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  017a4: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  017ab: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  017b2: 76 	movabs rax,0x5576cccb62a0
  017bc:    	call   rax
  017be:    	movq   xmm2,QWORD PTR [rsp]
  017c3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  017c9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  017cf:    	movq   xmm5,QWORD PTR [rsp+0x18]
  017d5:    	movq   xmm7,QWORD PTR [rsp+0x20]
  017db: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  017e2: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  017e9: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  017f0:    	add    rsp,0x40
  017f4: ff 	mov    QWORD PTR [rbp-0x98],rax
:00099 %14 = %5 * %14                       [Float][Float]
  017fb: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01802: 00 	test   rdi,0x1
  01809:    	jne    0x394e3
  0180f: 00 	test   rdi,0x2
  01816:    	je     0x1852
  0181c:    	xorps  xmm6,xmm6
  0181f: 00 	movabs rax,0x8000000000000002
  01829:    	cmp    rdi,rax
  0182c:    	je     0x1864
  01832:    	mov    rax,rdi
  01835:    	sar    rax,0x3f
  01839:    	add    rax,0x2
  0183d:    	and    rdi,0xfffffffffffffffc
  01841:    	or     rdi,rax
  01844:    	rol    rdi,0x3d
  01848:    	movq   xmm6,rdi
  0184d:    	jmp    0x1864
  01852:    	call   0xffff425d
  01857:    	test   rax,rax
  0185a:    	je     0x394e3
  01860:    	movq   xmm6,xmm0
  01864:    	mulsd  xmm6,xmm8
:00100 %13 = %13 + %14                      [Float][Float]
  01869:    	addsd  xmm5,xmm6
:00101 %15 = dynvar(2, %2)
  0186d:    	mov    rax,QWORD PTR [rbp-0x10]
  01871:    	mov    rax,QWORD PTR [rax]
  01874:    	lea    rax,[rax+0x10]
  01878:    	mov    rax,QWORD PTR [rax-0x38]
  0187c: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00102 %16 = 2: i32
  01883: ff 	mov    QWORD PTR [rbp-0xa8],0x5
:00103 %15 = %15.[%16]
  0188e:    	sub    rsp,0x50
  01892:    	movq   QWORD PTR [rsp],xmm2
  01897:    	movq   QWORD PTR [rsp+0x8],xmm3
  0189d:    	movq   QWORD PTR [rsp+0x10],xmm4
  018a3:    	movq   QWORD PTR [rsp+0x18],xmm5
  018a9:    	movq   QWORD PTR [rsp+0x20],xmm6
  018af:    	movq   QWORD PTR [rsp+0x28],xmm7
  018b5: 30 	movq   QWORD PTR [rsp+0x30],xmm8
  018bc: 38 	movq   QWORD PTR [rsp+0x38],xmm9
  018c3: 40 	movq   QWORD PTR [rsp+0x40],xmm10
  018ca: ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  018d1: ff 	mov    rcx,QWORD PTR [rbp-0xa8]
  018d8:    	mov    rdi,rbx
  018db:    	mov    rsi,r12
  018de: 76 	movabs rax,0x5576cccd60e0
  018e8:    	call   rax
  018ea:    	movq   xmm2,QWORD PTR [rsp]
  018ef:    	movq   xmm3,QWORD PTR [rsp+0x8]
  018f5:    	movq   xmm4,QWORD PTR [rsp+0x10]
  018fb:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01901:    	movq   xmm6,QWORD PTR [rsp+0x20]
  01907:    	movq   xmm7,QWORD PTR [rsp+0x28]
  0190d: 30 	movq   xmm8,QWORD PTR [rsp+0x30]
  01914: 38 	movq   xmm9,QWORD PTR [rsp+0x38]
  0191b: 40 	movq   xmm10,QWORD PTR [rsp+0x40]
  01922:    	add    rsp,0x50
  01926: 76 	movabs r13,0x5576cd690b90
  01930:    	test   rax,rax
  01933:    	je     0xffff4224
  01939: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00104 %14 = %15.call z()                   [Vec]
:00105 
  01940: ff 	mov    rdi,QWORD PTR [rbp-0xa0]
  01947: 00 	test   rdi,0x7
  0194e:    	jne    0x39546
  01954:    	cmp    DWORD PTR [rdi+0x4],0x25
  01958:    	jne    0x39546
  0195e: 26 	cmp    DWORD PTR [rip+0xffffffffffff529c],0x26        # 0xffff6c01
  01965:    	jne    0x39546
  0196b:    	mov    esi,DWORD PTR [rip+0xef4]        # 0x2865
  01971:    	cmp    esi,0xffffffff
  01974:    	je     0x395a9
  0197a:    	xor    rax,rax
  0197d:    	mov    ax,WORD PTR [rdi+0x2]
  01981:    	cmp    rax,0x3
  01985:    	jne    0x199e
  0198b:    	cmp    esi,0x6
  0198e:    	jge    0x199e
  01994:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  01999:    	jmp    0x1a16
  0199e:    	sub    rsp,0x40
  019a2:    	movq   QWORD PTR [rsp],xmm2
  019a7:    	movq   QWORD PTR [rsp+0x8],xmm3
  019ad:    	movq   QWORD PTR [rsp+0x10],xmm4
  019b3:    	movq   QWORD PTR [rsp+0x18],xmm5
  019b9:    	movq   QWORD PTR [rsp+0x20],xmm7
  019bf: 28 	movq   QWORD PTR [rsp+0x28],xmm8
  019c6: 30 	movq   QWORD PTR [rsp+0x30],xmm9
  019cd: 38 	movq   QWORD PTR [rsp+0x38],xmm10
  019d4: 76 	movabs rax,0x5576cccb62a0
  019de:    	call   rax
  019e0:    	movq   xmm2,QWORD PTR [rsp]
  019e5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  019eb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  019f1:    	movq   xmm5,QWORD PTR [rsp+0x18]
  019f7:    	movq   xmm7,QWORD PTR [rsp+0x20]
  019fd: 28 	movq   xmm8,QWORD PTR [rsp+0x28]
  01a04: 30 	movq   xmm9,QWORD PTR [rsp+0x30]
  01a0b: 38 	movq   xmm10,QWORD PTR [rsp+0x38]
  01a12:    	add    rsp,0x40
  01a16: ff 	mov    QWORD PTR [rbp-0x98],rax
:00107 %14 = %6 * %14                       [Float][Float]
  01a1d: ff 	mov    rdi,QWORD PTR [rbp-0x98]
  01a24: 00 	test   rdi,0x1
  01a2b:    	jne    0x3963e
  01a31: 00 	test   rdi,0x2
  01a38:    	je     0x1a74
  01a3e:    	xorps  xmm6,xmm6
  01a41: 00 	movabs rax,0x8000000000000002
  01a4b:    	cmp    rdi,rax
  01a4e:    	je     0x1a86
  01a54:    	mov    rax,rdi
  01a57:    	sar    rax,0x3f
  01a5b:    	add    rax,0x2
  01a5f:    	and    rdi,0xfffffffffffffffc
  01a63:    	or     rdi,rax
  01a66:    	rol    rdi,0x3d
  01a6a:    	movq   xmm6,rdi
  01a6f:    	jmp    0x1a86
  01a74:    	call   0xffff425d
  01a79:    	test   rax,rax
  01a7c:    	je     0x3963e
  01a82:    	movq   xmm6,xmm0
  01a86:    	mulsd  xmm6,xmm2
:00108 %9 = %13 + %14                       [Float][Float]
  01a8a:    	movq   xmm11,xmm5
  01a8f:    	addsd  xmm11,xmm6
:00109 %13 = const[Vec]                     [Vec]
  01a94: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff516e]        # 0xffff6c09
  01a9b: 00 	cmp    rax,QWORD PTR [rip+0xdd7]        # 0x2879
  01aa2:    	jne    0x396a1
  01aa8: 00 	mov    rax,QWORD PTR [rip+0xdba]        # 0x2869
  01aaf: ff 	mov    QWORD PTR [rbp-0x90],rax
:00110 %14 = %7
:00111 %15 = %8
:00112 %16 = %9
:00113 %10 = %13.call new(%14; 3)           [#<Class:Vec>]
:00114 
  01ab6:    	movq   xmm0,xmm9
  01abb:    	call   0xffff4350
  01ac0: ff 	mov    QWORD PTR [rbp-0x98],rax
  01ac7:    	movq   xmm0,xmm10
  01acc:    	call   0xffff4350
  01ad1: ff 	mov    QWORD PTR [rbp-0xa0],rax
  01ad8:    	movq   xmm0,xmm11
  01add:    	call   0xffff4350
  01ae2: ff 	mov    QWORD PTR [rbp-0xa8],rax
  01ae9: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01af0: 00 	test   rdi,0x7
  01af7:    	jne    0x39761
  01afd:    	cmp    DWORD PTR [rdi+0x4],0x26
  01b01:    	jne    0x39761
  01b07: 26 	cmp    DWORD PTR [rip+0xffffffffffff50f3],0x26        # 0xffff6c01
  01b0e:    	jne    0x39761
  01b14: 00 	mov    r9,0x0
  01b1b:    	sub    rsp,0x40
  01b1f:    	movq   QWORD PTR [rsp],xmm2
  01b24:    	movq   QWORD PTR [rsp+0x8],xmm3
  01b2a:    	movq   QWORD PTR [rsp+0x10],xmm4
  01b30:    	movq   QWORD PTR [rsp+0x18],xmm7
  01b36: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01b3d: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01b44: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01b4b: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01b52:    	mov    rdx,rdi
  01b55:    	mov    rax,QWORD PTR [rbx]
  01b58:    	lea    rdi,[rsp-0x18]
  01b5d:    	mov    QWORD PTR [rdi],rax
  01b60:    	mov    QWORD PTR [rbx],rdi
  01b63: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b6c:    	mov    QWORD PTR [rsp-0x38],rcx
  01b71: ff 	lea    rcx,[rbp-0x98]
  01b78: 00 	mov    r8,0x3
  01b7f:    	call   0x397c2
  01b84:    	lea    rdi,[rbp-0x8]
  01b88:    	mov    QWORD PTR [rbx],rdi
  01b8b:    	movq   xmm2,QWORD PTR [rsp]
  01b90:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01b96:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01b9c:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01ba2: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01ba9: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01bb0: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01bb7: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01bbe:    	add    rsp,0x40
  01bc2: 76 	movabs r13,0x5576cd690c40
  01bcc:    	test   rax,rax
  01bcf:    	je     0xffff4224
  01bd5:    	mov    QWORD PTR [rbp-0x78],rax
:00116 %13 = const[Ray]                     [Ray]
  01bd9: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff5029]        # 0xffff6c09
  01be0: 00 	cmp    rax,QWORD PTR [rip+0xcb2]        # 0x2899
  01be7:    	jne    0x397f4
  01bed: 00 	mov    rax,QWORD PTR [rip+0xc95]        # 0x2889
  01bf4: ff 	mov    QWORD PTR [rbp-0x90],rax
:00117 %14 = dynvar(2, %7)
  01bfb:    	mov    rax,QWORD PTR [rbp-0x10]
  01bff:    	mov    rax,QWORD PTR [rax]
  01c02:    	lea    rax,[rax+0x10]
  01c06:    	mov    rax,QWORD PTR [rax-0x60]
  01c0a: ff 	mov    QWORD PTR [rbp-0x98],rax
:00118 %15 = %10
  01c11:    	mov    rax,QWORD PTR [rbp-0x78]
  01c15: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00119 %11 = %13.call new(%14; 2)           [#<Class:Ray>]
:00120 
  01c1c: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01c23: 00 	test   rdi,0x7
  01c2a:    	jne    0x398a8
  01c30:    	cmp    DWORD PTR [rdi+0x4],0x2c
  01c34:    	jne    0x398a8
  01c3a: 26 	cmp    DWORD PTR [rip+0xffffffffffff4fc0],0x26        # 0xffff6c01
  01c41:    	jne    0x398a8
  01c47: 00 	mov    r9,0x0
  01c4e:    	sub    rsp,0x40
  01c52:    	movq   QWORD PTR [rsp],xmm2
  01c57:    	movq   QWORD PTR [rsp+0x8],xmm3
  01c5d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01c63:    	movq   QWORD PTR [rsp+0x18],xmm7
  01c69: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01c70: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01c77: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01c7e: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01c85:    	mov    rdx,rdi
  01c88:    	mov    rax,QWORD PTR [rbx]
  01c8b:    	lea    rdi,[rsp-0x18]
  01c90:    	mov    QWORD PTR [rdi],rax
  01c93:    	mov    QWORD PTR [rbx],rdi
  01c96: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01c9f:    	mov    QWORD PTR [rsp-0x38],rcx
  01ca4: ff 	lea    rcx,[rbp-0x98]
  01cab: 00 	mov    r8,0x2
  01cb2:    	call   0x39909
  01cb7:    	lea    rdi,[rbp-0x8]
  01cbb:    	mov    QWORD PTR [rbx],rdi
  01cbe:    	movq   xmm2,QWORD PTR [rsp]
  01cc3:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01cc9:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01ccf:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01cd5: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01cdc: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01ce3: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01cea: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01cf1:    	add    rsp,0x40
  01cf5: 76 	movabs r13,0x5576cd690ca0
  01cff:    	test   rax,rax
  01d02:    	je     0xffff4224
  01d08:    	mov    QWORD PTR [rbp-0x80],rax
:00122 %13 = const[Isect]                   [Isect]
  01d0c: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff4ef6]        # 0xffff6c09
  01d13: 00 	cmp    rax,QWORD PTR [rip+0xb9f]        # 0x28b9
  01d1a:    	jne    0x3993b
  01d20: 00 	mov    rax,QWORD PTR [rip+0xb82]        # 0x28a9
  01d27: ff 	mov    QWORD PTR [rbp-0x90],rax
:00123 %12 = %13.call new()                 [#<Class:Isect>]
:00124 
  01d2e: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01d35: 00 	test   rdi,0x7
  01d3c:    	jne    0x399ef
  01d42:    	cmp    DWORD PTR [rdi+0x4],0x2e
  01d46:    	jne    0x399ef
  01d4c: 26 	cmp    DWORD PTR [rip+0xffffffffffff4eae],0x26        # 0xffff6c01
  01d53:    	jne    0x399ef
  01d59: 00 	mov    r9,0x0
  01d60:    	sub    rsp,0x40
  01d64:    	movq   QWORD PTR [rsp],xmm2
  01d69:    	movq   QWORD PTR [rsp+0x8],xmm3
  01d6f:    	movq   QWORD PTR [rsp+0x10],xmm4
  01d75:    	movq   QWORD PTR [rsp+0x18],xmm7
  01d7b: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01d82: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01d89: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01d90: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01d97:    	mov    rdx,rdi
  01d9a:    	mov    rax,QWORD PTR [rbx]
  01d9d:    	lea    rdi,[rsp-0x18]
  01da2:    	mov    QWORD PTR [rdi],rax
  01da5:    	mov    QWORD PTR [rbx],rdi
  01da8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01db1:    	mov    QWORD PTR [rsp-0x38],rcx
  01db6: ff 	lea    rcx,[rbp-0x98]
  01dbd: 00 	mov    r8,0x0
  01dc4:    	call   0x39a50
  01dc9:    	lea    rdi,[rbp-0x8]
  01dcd:    	mov    QWORD PTR [rbx],rdi
  01dd0:    	movq   xmm2,QWORD PTR [rsp]
  01dd5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01ddb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01de1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01de7: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01dee: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01df5: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01dfc: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01e03:    	add    rsp,0x40
  01e07: 76 	movabs r13,0x5576cd690ce0
  01e11:    	test   rax,rax
  01e14:    	je     0xffff4224
  01e1a: ff 	mov    QWORD PTR [rbp-0x88],rax
:00126 %13 = @spheres: Scene[IvarId(0)]
  01e21:    	mov    rdi,QWORD PTR [rbp-0x28]
  01e25:    	xor    rax,rax
  01e28:    	mov    ax,WORD PTR [rdi+0x2]
  01e2c:    	cmp    rax,0x3
  01e30:    	jne    0x39a82
  01e36:    	mov    rax,QWORD PTR [rdi+0x10]
  01e3a: ff 	mov    QWORD PTR [rbp-0x90],rax
:00127 %14 = 0: i32
  01e41: ff 	mov    QWORD PTR [rbp-0x98],0x1
:00128 %13 = %13.[%14]
  01e4c:    	sub    rsp,0x40
  01e50:    	movq   QWORD PTR [rsp],xmm2
  01e55:    	movq   QWORD PTR [rsp+0x8],xmm3
  01e5b:    	movq   QWORD PTR [rsp+0x10],xmm4
  01e61:    	movq   QWORD PTR [rsp+0x18],xmm7
  01e67: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01e6e: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01e75: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01e7c: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01e83: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  01e8a: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  01e91:    	mov    rdi,rbx
  01e94:    	mov    rsi,r12
  01e97: 76 	movabs rax,0x5576cccd60e0
  01ea1:    	call   rax
  01ea3:    	movq   xmm2,QWORD PTR [rsp]
  01ea8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01eae:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01eb4:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01eba: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  01ec1: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  01ec8: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  01ecf: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  01ed6:    	add    rsp,0x40
  01eda: 76 	movabs r13,0x5576cd690d20
  01ee4:    	test   rax,rax
  01ee7:    	je     0xffff4224
  01eed: ff 	mov    QWORD PTR [rbp-0x90],rax
:00129 %14 = %11
  01ef4:    	mov    rax,QWORD PTR [rbp-0x80]
  01ef8: ff 	mov    QWORD PTR [rbp-0x98],rax
:00130 %15 = %12
  01eff: ff 	mov    rax,QWORD PTR [rbp-0x88]
  01f06: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00131 _ = %13.call intersect(%14; 2)       [Sphere]
:00132 
  01f0d: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  01f14: 00 	test   rdi,0x7
  01f1b:    	jne    0x39b06
  01f21:    	cmp    DWORD PTR [rdi+0x4],0x27
  01f25:    	jne    0x39b06
  01f2b: 26 	cmp    DWORD PTR [rip+0xffffffffffff4ccf],0x26        # 0xffff6c01
  01f32:    	jne    0x39b06
  01f38:    	sub    rsp,0x40
  01f3c:    	movq   QWORD PTR [rsp],xmm2
  01f41:    	movq   QWORD PTR [rsp+0x8],xmm3
  01f47:    	movq   QWORD PTR [rsp+0x10],xmm4
  01f4d:    	movq   QWORD PTR [rsp+0x18],xmm7
  01f53: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  01f5a: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  01f61: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  01f68: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  01f6f:    	mov    rax,QWORD PTR [rbx]
  01f72:    	lea    rdi,[rsp-0x18]
  01f77:    	mov    QWORD PTR [rdi],rax
  01f7a:    	mov    QWORD PTR [rbx],rdi
  01f7d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01f86:    	mov    QWORD PTR [rsp-0x38],rcx
  01f8b: ff 	mov    rax,QWORD PTR [rbp-0x90]
  01f92:    	mov    QWORD PTR [rsp-0x38],rax
  01f97: 00 	mov    rdi,0x2
  01f9e: ff 	mov    rax,QWORD PTR [rbp-0x98]
  01fa5:    	mov    QWORD PTR [rsp-0x40],rax
  01faa: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  01fb1:    	mov    QWORD PTR [rsp-0x48],rax
  01fb6: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01fbf: 10 	movabs rax,0x100100000003f
  01fc9:    	mov    QWORD PTR [rsp-0x28],rax
  01fce: 76 	movabs r13,0x5576cd697c40
  01fd8:    	call   0xffff77dc
  01fdd:    	lea    rdi,[rbp-0x8]
  01fe1:    	mov    QWORD PTR [rbx],rdi
  01fe4:    	movq   xmm2,QWORD PTR [rsp]
  01fe9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01fef:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01ff5:    	movq   xmm7,QWORD PTR [rsp+0x18]
  01ffb: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02002: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02009: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  02010: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02017:    	add    rsp,0x40
  0201b: 76 	movabs r13,0x5576cd690d60
  02025:    	test   rax,rax
  02028:    	je     0xffff4224
:00134 %13 = @spheres: Scene[IvarId(0)]
  0202e:    	mov    rdi,QWORD PTR [rbp-0x28]
  02032:    	xor    rax,rax
  02035:    	mov    ax,WORD PTR [rdi+0x2]
  02039:    	cmp    rax,0x3
  0203d:    	jne    0x39b67
  02043:    	mov    rax,QWORD PTR [rdi+0x10]
  02047: ff 	mov    QWORD PTR [rbp-0x90],rax
:00135 %14 = 1: i32
  0204e: ff 	mov    QWORD PTR [rbp-0x98],0x3
:00136 %13 = %13.[%14]
  02059:    	sub    rsp,0x40
  0205d:    	movq   QWORD PTR [rsp],xmm2
  02062:    	movq   QWORD PTR [rsp+0x8],xmm3
  02068:    	movq   QWORD PTR [rsp+0x10],xmm4
  0206e:    	movq   QWORD PTR [rsp+0x18],xmm7
  02074: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  0207b: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02082: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  02089: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02090: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  02097: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  0209e:    	mov    rdi,rbx
  020a1:    	mov    rsi,r12
  020a4: 76 	movabs rax,0x5576cccd60e0
  020ae:    	call   rax
  020b0:    	movq   xmm2,QWORD PTR [rsp]
  020b5:    	movq   xmm3,QWORD PTR [rsp+0x8]
  020bb:    	movq   xmm4,QWORD PTR [rsp+0x10]
  020c1:    	movq   xmm7,QWORD PTR [rsp+0x18]
  020c7: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  020ce: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  020d5: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  020dc: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  020e3:    	add    rsp,0x40
  020e7: 76 	movabs r13,0x5576cd690da0
  020f1:    	test   rax,rax
  020f4:    	je     0xffff4224
  020fa: ff 	mov    QWORD PTR [rbp-0x90],rax
:00137 %14 = %11
  02101:    	mov    rax,QWORD PTR [rbp-0x80]
  02105: ff 	mov    QWORD PTR [rbp-0x98],rax
:00138 %15 = %12
  0210c: ff 	mov    rax,QWORD PTR [rbp-0x88]
  02113: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00139 _ = %13.call intersect(%14; 2)       [Sphere]
:00140 
  0211a: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  02121: 00 	test   rdi,0x7
  02128:    	jne    0x39beb
  0212e:    	cmp    DWORD PTR [rdi+0x4],0x27
  02132:    	jne    0x39beb
  02138: 26 	cmp    DWORD PTR [rip+0xffffffffffff4ac2],0x26        # 0xffff6c01
  0213f:    	jne    0x39beb
  02145:    	sub    rsp,0x40
  02149:    	movq   QWORD PTR [rsp],xmm2
  0214e:    	movq   QWORD PTR [rsp+0x8],xmm3
  02154:    	movq   QWORD PTR [rsp+0x10],xmm4
  0215a:    	movq   QWORD PTR [rsp+0x18],xmm7
  02160: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02167: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0216e: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  02175: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  0217c:    	mov    rax,QWORD PTR [rbx]
  0217f:    	lea    rdi,[rsp-0x18]
  02184:    	mov    QWORD PTR [rdi],rax
  02187:    	mov    QWORD PTR [rbx],rdi
  0218a: 00 	mov    QWORD PTR [rsp-0x20],0x0
  02193:    	mov    QWORD PTR [rsp-0x38],rcx
  02198: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0219f:    	mov    QWORD PTR [rsp-0x38],rax
  021a4: 00 	mov    rdi,0x2
  021ab: ff 	mov    rax,QWORD PTR [rbp-0x98]
  021b2:    	mov    QWORD PTR [rsp-0x40],rax
  021b7: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  021be:    	mov    QWORD PTR [rsp-0x48],rax
  021c3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  021cc: 10 	movabs rax,0x100100000003f
  021d6:    	mov    QWORD PTR [rsp-0x28],rax
  021db: 76 	movabs r13,0x5576cd697c40
  021e5:    	call   0xffff77dc
  021ea:    	lea    rdi,[rbp-0x8]
  021ee:    	mov    QWORD PTR [rbx],rdi
  021f1:    	movq   xmm2,QWORD PTR [rsp]
  021f6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  021fc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02202:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02208: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0220f: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02216: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0221d: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02224:    	add    rsp,0x40
  02228: 76 	movabs r13,0x5576cd690de0
  02232:    	test   rax,rax
  02235:    	je     0xffff4224
:00142 %13 = @spheres: Scene[IvarId(0)]
  0223b:    	mov    rdi,QWORD PTR [rbp-0x28]
  0223f:    	xor    rax,rax
  02242:    	mov    ax,WORD PTR [rdi+0x2]
  02246:    	cmp    rax,0x3
  0224a:    	jne    0x39c4c
  02250:    	mov    rax,QWORD PTR [rdi+0x10]
  02254: ff 	mov    QWORD PTR [rbp-0x90],rax
:00143 %14 = 2: i32
  0225b: ff 	mov    QWORD PTR [rbp-0x98],0x5
:00144 %13 = %13.[%14]
  02266:    	sub    rsp,0x40
  0226a:    	movq   QWORD PTR [rsp],xmm2
  0226f:    	movq   QWORD PTR [rsp+0x8],xmm3
  02275:    	movq   QWORD PTR [rsp+0x10],xmm4
  0227b:    	movq   QWORD PTR [rsp+0x18],xmm7
  02281: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02288: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0228f: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  02296: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  0229d: ff 	mov    rdx,QWORD PTR [rbp-0x90]
  022a4: ff 	mov    rcx,QWORD PTR [rbp-0x98]
  022ab:    	mov    rdi,rbx
  022ae:    	mov    rsi,r12
  022b1: 76 	movabs rax,0x5576cccd60e0
  022bb:    	call   rax
  022bd:    	movq   xmm2,QWORD PTR [rsp]
  022c2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  022c8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  022ce:    	movq   xmm7,QWORD PTR [rsp+0x18]
  022d4: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  022db: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  022e2: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  022e9: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  022f0:    	add    rsp,0x40
  022f4: 76 	movabs r13,0x5576cd690e20
  022fe:    	test   rax,rax
  02301:    	je     0xffff4224
  02307: ff 	mov    QWORD PTR [rbp-0x90],rax
:00145 %14 = %11
  0230e:    	mov    rax,QWORD PTR [rbp-0x80]
  02312: ff 	mov    QWORD PTR [rbp-0x98],rax
:00146 %15 = %12
  02319: ff 	mov    rax,QWORD PTR [rbp-0x88]
  02320: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00147 _ = %13.call intersect(%14; 2)       [Sphere]
:00148 
  02327: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  0232e: 00 	test   rdi,0x7
  02335:    	jne    0x39cd0
  0233b:    	cmp    DWORD PTR [rdi+0x4],0x27
  0233f:    	jne    0x39cd0
  02345: 26 	cmp    DWORD PTR [rip+0xffffffffffff48b5],0x26        # 0xffff6c01
  0234c:    	jne    0x39cd0
  02352:    	sub    rsp,0x40
  02356:    	movq   QWORD PTR [rsp],xmm2
  0235b:    	movq   QWORD PTR [rsp+0x8],xmm3
  02361:    	movq   QWORD PTR [rsp+0x10],xmm4
  02367:    	movq   QWORD PTR [rsp+0x18],xmm7
  0236d: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02374: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  0237b: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  02382: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02389:    	mov    rax,QWORD PTR [rbx]
  0238c:    	lea    rdi,[rsp-0x18]
  02391:    	mov    QWORD PTR [rdi],rax
  02394:    	mov    QWORD PTR [rbx],rdi
  02397: 00 	mov    QWORD PTR [rsp-0x20],0x0
  023a0:    	mov    QWORD PTR [rsp-0x38],rcx
  023a5: ff 	mov    rax,QWORD PTR [rbp-0x90]
  023ac:    	mov    QWORD PTR [rsp-0x38],rax
  023b1: 00 	mov    rdi,0x2
  023b8: ff 	mov    rax,QWORD PTR [rbp-0x98]
  023bf:    	mov    QWORD PTR [rsp-0x40],rax
  023c4: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  023cb:    	mov    QWORD PTR [rsp-0x48],rax
  023d0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  023d9: 10 	movabs rax,0x100100000003f
  023e3:    	mov    QWORD PTR [rsp-0x28],rax
  023e8: 76 	movabs r13,0x5576cd697c40
  023f2:    	call   0xffff77dc
  023f7:    	lea    rdi,[rbp-0x8]
  023fb:    	mov    QWORD PTR [rbx],rdi
  023fe:    	movq   xmm2,QWORD PTR [rsp]
  02403:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02409:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0240f:    	movq   xmm7,QWORD PTR [rsp+0x18]
  02415: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  0241c: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02423: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0242a: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02431:    	add    rsp,0x40
  02435: 76 	movabs r13,0x5576cd690e60
  0243f:    	test   rax,rax
  02442:    	je     0xffff4224
:00150 %13 = @plane: Scene[IvarId(1)]
  02448:    	mov    rdi,QWORD PTR [rbp-0x28]
  0244c:    	xor    rax,rax
  0244f:    	mov    ax,WORD PTR [rdi+0x2]
  02453:    	cmp    rax,0x3
  02457:    	jne    0x39d31
  0245d:    	mov    rax,QWORD PTR [rdi+0x18]
  02461: ff 	mov    QWORD PTR [rbp-0x90],rax
:00151 %14 = %11
  02468:    	mov    rax,QWORD PTR [rbp-0x80]
  0246c: ff 	mov    QWORD PTR [rbp-0x98],rax
:00152 %15 = %12
  02473: ff 	mov    rax,QWORD PTR [rbp-0x88]
  0247a: ff 	mov    QWORD PTR [rbp-0xa0],rax
:00153 _ = %13.call intersect(%14; 2)       [Plane]
:00154 
  02481: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  02488: 00 	test   rdi,0x7
  0248f:    	jne    0x39db5
  02495:    	cmp    DWORD PTR [rdi+0x4],0x29
  02499:    	jne    0x39db5
  0249f: 26 	cmp    DWORD PTR [rip+0xffffffffffff475b],0x26        # 0xffff6c01
  024a6:    	jne    0x39db5
  024ac:    	sub    rsp,0x40
  024b0:    	movq   QWORD PTR [rsp],xmm2
  024b5:    	movq   QWORD PTR [rsp+0x8],xmm3
  024bb:    	movq   QWORD PTR [rsp+0x10],xmm4
  024c1:    	movq   QWORD PTR [rsp+0x18],xmm7
  024c7: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  024ce: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  024d5: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  024dc: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  024e3:    	mov    rax,QWORD PTR [rbx]
  024e6:    	lea    rdi,[rsp-0x18]
  024eb:    	mov    QWORD PTR [rdi],rax
  024ee:    	mov    QWORD PTR [rbx],rdi
  024f1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  024fa:    	mov    QWORD PTR [rsp-0x38],rcx
  024ff: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02506:    	mov    QWORD PTR [rsp-0x38],rax
  0250b: 00 	mov    rdi,0x2
  02512: ff 	mov    rax,QWORD PTR [rbp-0x98]
  02519:    	mov    QWORD PTR [rsp-0x40],rax
  0251e: ff 	mov    rax,QWORD PTR [rbp-0xa0]
  02525:    	mov    QWORD PTR [rsp-0x48],rax
  0252a: 00 	mov    QWORD PTR [rsp-0x30],0x0
  02533: 0e 	movabs rax,0x1000e00000041
  0253d:    	mov    QWORD PTR [rsp-0x28],rax
  02542: 76 	movabs r13,0x5576cd699ae0
  0254c:    	call   0xffff7ded
  02551:    	lea    rdi,[rbp-0x8]
  02555:    	mov    QWORD PTR [rbx],rdi
  02558:    	movq   xmm2,QWORD PTR [rsp]
  0255d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  02563:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02569:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0256f: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02576: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  0257d: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  02584: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  0258b:    	add    rsp,0x40
  0258f: 76 	movabs r13,0x5576cd690ec0
  02599:    	test   rax,rax
  0259c:    	je     0xffff4224
:00156 %13 = %12.call hit()                 [Isect]
:00157 
  025a2: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  025a9: 00 	test   rdi,0x7
  025b0:    	jne    0x39e16
  025b6:    	cmp    DWORD PTR [rdi+0x4],0x2d
  025ba:    	jne    0x39e16
  025c0: 26 	cmp    DWORD PTR [rip+0xffffffffffff463a],0x26        # 0xffff6c01
  025c7:    	jne    0x39e16
  025cd:    	mov    esi,DWORD PTR [rip+0x2f2]        # 0x28c5
  025d3:    	cmp    esi,0xffffffff
  025d6:    	je     0x39e77
  025dc:    	xor    rax,rax
  025df:    	mov    ax,WORD PTR [rdi+0x2]
  025e3:    	cmp    rax,0x3
  025e7:    	jne    0x2600
  025ed:    	cmp    esi,0x6
  025f0:    	jge    0x2600
  025f6:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  025fb:    	jmp    0x267a
  02600:    	sub    rsp,0x40
  02604:    	movq   QWORD PTR [rsp],xmm2
  02609:    	movq   QWORD PTR [rsp+0x8],xmm3
  0260f:    	movq   QWORD PTR [rsp+0x10],xmm4
  02615:    	movq   QWORD PTR [rsp+0x18],xmm7
  0261b: 20 	movq   QWORD PTR [rsp+0x20],xmm8
  02622: 28 	movq   QWORD PTR [rsp+0x28],xmm9
  02629: 30 	movq   QWORD PTR [rsp+0x30],xmm10
  02630: 38 	movq   QWORD PTR [rsp+0x38],xmm11
  02637: 76 	movabs rax,0x5576cccb62a0
  02641:    	call   rax
  02643:    	movq   xmm2,QWORD PTR [rsp]
  02648:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0264e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  02654:    	movq   xmm7,QWORD PTR [rsp+0x18]
  0265a: 20 	movq   xmm8,QWORD PTR [rsp+0x20]
  02661: 28 	movq   xmm9,QWORD PTR [rsp+0x28]
  02668: 30 	movq   xmm10,QWORD PTR [rsp+0x30]
  0266f: 38 	movq   xmm11,QWORD PTR [rsp+0x38]
  02676:    	add    rsp,0x40
  0267a: ff 	mov    QWORD PTR [rbp-0x90],rax
:00159 condnotbr %13 =>:00165
  02681: ff 	mov    rax,QWORD PTR [rbp-0x90]
  02688:    	or     rax,0x10
  0268c:    	cmp    rax,0x14
  02690:    	je     0x271f
:00160 %13 = dynvar(2, %6)
  02696:    	mov    rax,QWORD PTR [rbp-0x10]
  0269a:    	mov    rax,QWORD PTR [rax]
  0269d:    	lea    rax,[rax+0x10]
  026a1:    	mov    rax,QWORD PTR [rax-0x58]
  026a5: ff 	mov    QWORD PTR [rbp-0x90],rax
:00161 %14 = literal[1.0]
  026ac: 00 	movq   xmm5,QWORD PTR [rip+0x215]        # 0x28c9
:00162 %13 = %13 + %14                      [Integer][Integer]
  026b4:    	movq   xmm0,xmm5
  026b8:    	call   0xffff4350
  026bd: ff 	mov    QWORD PTR [rbp-0x98],rax
  026c4: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  026cb: ff 	mov    rsi,QWORD PTR [rbp-0x98]
  026d2: 00 	test   rdi,0x1
  026d9:    	je     0x39f0e
  026df: 00 	test   rsi,0x1
  026e6:    	je     0x39f0e
  026ec:    	sub    rdi,0x1
  026f0:    	add    rdi,rsi
  026f3:    	jo     0x39f0e
  026f9: ff 	mov    QWORD PTR [rbp-0x90],rdi
:00163 dynvar(2, %6) = %13
  02700:    	mov    rax,QWORD PTR [rbp-0x10]
  02704:    	mov    rax,QWORD PTR [rax]
  02707:    	lea    rax,[rax+0x10]
  0270b: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  02712:    	mov    QWORD PTR [rax-0x58],rdi
:00164 ret %13
  02716: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0271d:    	leave  
  0271e:    	ret    
:00165 %13 = literal[0.0]
  0271f: 00 	movq   xmm5,QWORD PTR [rip+0x1b2]        # 0x28d9
:00166 ret %13
  02727:    	movq   xmm0,xmm5
  0272b:    	call   0xffff4350
  02730: ff 	mov    QWORD PTR [rbp-0x90],rax
  02737: ff 	mov    rax,QWORD PTR [rbp-0x90]
  0273e:    	leave  
  0273f:    	ret    
==> start whole compile: <unnamed> FuncId(71) self_class:Scene start:[00000] bytecode:0x5576cd673e50
<== finished compile. elapsed:25.4µs
offset:Pos(59128) code: 221 bytes  data: 0 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x50
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    rdi,QWORD PTR [rbp-0x28]
  0001f: test   rdi,0x7
  00026: jne    0x3768e
  0002c: cmp    DWORD PTR [rdi+0x4],0x2f
  00030: jne    0x3768e
:00000 %3 = dynvar(1, %3)
  00036: mov    rax,QWORD PTR [rbp-0x10]
  0003a: lea    rax,[rax+0x10]
  0003e: mov    rax,QWORD PTR [rax-0x40]
  00042: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = literal[73]
  00046: mov    rax,0x93
  0004d: mov    QWORD PTR [rbp-0x48],rax
:00002 %2 = %3.call times(&%4)              [Integer]
:00003 
  00051: mov    rdi,QWORD PTR [rbp-0x40]
  00055: test   rdi,0x1
  0005c: jne    0x79
  00062: test   rdi,0x7
  00069: jne    0x3769d
  0006f: cmp    DWORD PTR [rdi+0x4],0x6
  00073: jne    0x3769d
  00079: cmp    DWORD PTR [rip+0xffffffffffff42a0],0x26        # 0xffff4320
  00080: jne    0x3769d
  00086: mov    r9,QWORD PTR [rbp-0x48]
  0008a: mov    rdx,rdi
  0008d: mov    rax,QWORD PTR [rbx]
  00090: lea    rdi,[rsp-0x18]
  00095: mov    QWORD PTR [rdi],rax
  00098: mov    QWORD PTR [rbx],rdi
  0009b: mov    QWORD PTR [rsp-0x20],0x0
  000a4: mov    QWORD PTR [rsp-0x38],rcx
  000a9: lea    rcx,[rbp-0x50]
  000ad: mov    r8,0x0
  000b4: call   0x376ac
  000b9: lea    rdi,[rbp-0x8]
  000bd: mov    QWORD PTR [rbx],rdi
  000c0: movabs r13,0x5576cd673e90
  000ca: test   rax,rax
  000cd: je     0xffff1943
  000d3: mov    QWORD PTR [rbp-0x38],rax
:00005 ret %2
  000d7: mov    rax,QWORD PTR [rbp-0x38]
  000db: leave  
  000dc: ret    
==> start whole compile: vcross FuncId(58) self_class:Vec start:[00000] bytecode:0x5576cd695450
<== finished compile. elapsed:81.2µs
offset:Pos(59349) code: 2550 bytes  data: 77 bytes
  00000: push   rbp
  00001: mov    rbp,rsp
  00004: sub    rsp,0x70
  00008: mov    rax,0x4
  0000f: mov    QWORD PTR [rbp-0x38],rax
  00013: mov    QWORD PTR [rbp-0x40],rax
  00017: mov    QWORD PTR [rbp-0x48],rax
  0001b: mov    QWORD PTR [rbp-0x50],rax
  0001f: mov    QWORD PTR [rbp-0x58],rax
  00023: mov    QWORD PTR [rbp-0x60],rax
  00027: mov    QWORD PTR [rbp-0x68],rax
  0002b: mov    rdi,QWORD PTR [rbp-0x28]
  0002f: test   rdi,0x7
  00036: jne    0x37601
  0003c: cmp    DWORD PTR [rdi+0x4],0x25
  00040: jne    0x37601
:00000 %3 = const[Vec]                      [Vec]
  00046: mov    rax,QWORD PTR [rip+0xffffffffffff41fe]        # 0xffff424b
  0004d: cmp    rax,QWORD PTR [rip+0x9b7]        # 0xa0b
  00054: jne    0x37610
  0005a: mov    rax,QWORD PTR [rip+0x99a]        # 0x9fb
  00061: mov    QWORD PTR [rbp-0x40],rax
:00001 %4 = @y: Vec[IvarId(1)]
  00065: mov    rdi,QWORD PTR [rbp-0x28]
  00069: xor    rax,rax
  0006c: mov    ax,WORD PTR [rdi+0x2]
  00070: cmp    rax,0x3
  00074: jne    0x37656
  0007a: mov    rax,QWORD PTR [rdi+0x18]
  0007e: mov    QWORD PTR [rbp-0x48],rax
:00002 %5 = %1.call z()                     [Vec]
:00003 
  00082: mov    rdi,QWORD PTR [rbp-0x30]
  00086: test   rdi,0x7
  0008d: jne    0x3766c
  00093: cmp    DWORD PTR [rdi+0x4],0x25
  00097: jne    0x3766c
  0009d: cmp    DWORD PTR [rip+0xffffffffffff419f],0x26        # 0xffff4243
  000a4: jne    0x3766c
  000aa: mov    esi,DWORD PTR [rip+0x967]        # 0xa17
  000b0: cmp    esi,0xffffffff
  000b3: je     0x3767b
  000b9: xor    rax,rax
  000bc: mov    ax,WORD PTR [rdi+0x2]
  000c0: cmp    rax,0x3
  000c4: jne    0xdd
  000ca: cmp    esi,0x6
  000cd: jge    0xdd
  000d3: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000d8: jmp    0xe9
  000dd: movabs rax,0x5576cccb62a0
  000e7: call   rax
  000e9: mov    QWORD PTR [rbp-0x50],rax
:00005 %4 = %4 * %5                         [Float][Float]
  000ed: mov    rdi,QWORD PTR [rbp-0x48]
  000f1: test   rdi,0x1
  000f8: jne    0x376a4
  000fe: test   rdi,0x2
  00105: je     0x141
  0010b: xorps  xmm2,xmm2
  0010e: movabs rax,0x8000000000000002
  00118: cmp    rdi,rax
  0011b: je     0x153
  00121: mov    rax,rdi
  00124: sar    rax,0x3f
  00128: add    rax,0x2
  0012c: and    rdi,0xfffffffffffffffc
  00130: or     rdi,rax
  00133: rol    rdi,0x3d
  00137: movq   xmm2,rdi
  0013c: jmp    0x153
  00141: call   0xffff189f
  00146: test   rax,rax
  00149: je     0x376a4
  0014f: movq   xmm2,xmm0
  00153: mov    rdi,QWORD PTR [rbp-0x50]
  00157: test   rdi,0x1
  0015e: jne    0x376b3
  00164: test   rdi,0x2
  0016b: je     0x1a7
  00171: xorps  xmm3,xmm3
  00174: movabs rax,0x8000000000000002
  0017e: cmp    rdi,rax
  00181: je     0x1b9
  00187: mov    rax,rdi
  0018a: sar    rax,0x3f
  0018e: add    rax,0x2
  00192: and    rdi,0xfffffffffffffffc
  00196: or     rdi,rax
  00199: rol    rdi,0x3d
  0019d: movq   xmm3,rdi
  001a2: jmp    0x1b9
  001a7: call   0xffff189f
  001ac: test   rax,rax
  001af: je     0x376b3
  001b5: movq   xmm3,xmm0
  001b9: mulsd  xmm2,xmm3
:00006 %5 = @z: Vec[IvarId(2)]
  001bd: mov    rdi,QWORD PTR [rbp-0x28]
  001c1: xor    rax,rax
  001c4: mov    ax,WORD PTR [rdi+0x2]
  001c8: cmp    rax,0x3
  001cc: jne    0x376c2
  001d2: mov    rax,QWORD PTR [rdi+0x20]
  001d6: mov    QWORD PTR [rbp-0x50],rax
:00007 %6 = %1.call y()                     [Vec]
:00008 
  001da: mov    rdi,QWORD PTR [rbp-0x30]
  001de: test   rdi,0x7
  001e5: jne    0x376ea
  001eb: cmp    DWORD PTR [rdi+0x4],0x25
  001ef: jne    0x376ea
  001f5: cmp    DWORD PTR [rip+0xffffffffffff4047],0x26        # 0xffff4243
  001fc: jne    0x376ea
  00202: mov    esi,DWORD PTR [rip+0x817]        # 0xa1f
  00208: cmp    esi,0xffffffff
  0020b: je     0x37706
  00211: xor    rax,rax
  00214: mov    ax,WORD PTR [rdi+0x2]
  00218: cmp    rax,0x3
  0021c: jne    0x235
  00222: cmp    esi,0x6
  00225: jge    0x235
  0022b: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00230: jmp    0x253
  00235: sub    rsp,0x10
  00239: movq   QWORD PTR [rsp],xmm2
  0023e: movabs rax,0x5576cccb62a0
  00248: call   rax
  0024a: movq   xmm2,QWORD PTR [rsp]
  0024f: add    rsp,0x10
  00253: mov    QWORD PTR [rbp-0x58],rax
:00010 %5 = %5 * %6                         [Float][Float]
  00257: mov    rdi,QWORD PTR [rbp-0x50]
  0025b: test   rdi,0x1
  00262: jne    0x37741
  00268: test   rdi,0x2
  0026f: je     0x2ab
  00275: xorps  xmm3,xmm3
  00278: movabs rax,0x8000000000000002
  00282: cmp    rdi,rax
  00285: je     0x2bd
  0028b: mov    rax,rdi
  0028e: sar    rax,0x3f
  00292: add    rax,0x2
  00296: and    rdi,0xfffffffffffffffc
  0029a: or     rdi,rax
  0029d: rol    rdi,0x3d
  002a1: movq   xmm3,rdi
  002a6: jmp    0x2bd
  002ab: call   0xffff189f
  002b0: test   rax,rax
  002b3: je     0x37741
  002b9: movq   xmm3,xmm0
  002bd: mov    rdi,QWORD PTR [rbp-0x58]
  002c1: test   rdi,0x1
  002c8: jne    0x3775d
  002ce: test   rdi,0x2
  002d5: je     0x311
  002db: xorps  xmm4,xmm4
  002de: movabs rax,0x8000000000000002
  002e8: cmp    rdi,rax
  002eb: je     0x323
  002f1: mov    rax,rdi
  002f4: sar    rax,0x3f
  002f8: add    rax,0x2
  002fc: and    rdi,0xfffffffffffffffc
  00300: or     rdi,rax
  00303: rol    rdi,0x3d
  00307: movq   xmm4,rdi
  0030c: jmp    0x323
  00311: call   0xffff189f
  00316: test   rax,rax
  00319: je     0x3775d
  0031f: movq   xmm4,xmm0
  00323: mulsd  xmm3,xmm4
:00011 %4 = %4 - %5                         [Float][Float]
  00327: subsd  xmm2,xmm3
:00012 %5 = @z: Vec[IvarId(2)]
  0032b: mov    rdi,QWORD PTR [rbp-0x28]
  0032f: xor    rax,rax
  00332: mov    ax,WORD PTR [rdi+0x2]
  00336: cmp    rax,0x3
  0033a: jne    0x37779
  00340: mov    rax,QWORD PTR [rdi+0x20]
  00344: mov    QWORD PTR [rbp-0x50],rax
:00013 %6 = %1.call x()                     [Vec]
:00014 
  00348: mov    rdi,QWORD PTR [rbp-0x30]
  0034c: test   rdi,0x7
  00353: jne    0x377ad
  00359: cmp    DWORD PTR [rdi+0x4],0x25
  0035d: jne    0x377ad
  00363: cmp    DWORD PTR [rip+0xffffffffffff3ed9],0x26        # 0xffff4243
  0036a: jne    0x377ad
  00370: mov    esi,DWORD PTR [rip+0x6b1]        # 0xa27
  00376: cmp    esi,0xffffffff
  00379: je     0x377c9
  0037f: xor    rax,rax
  00382: mov    ax,WORD PTR [rdi+0x2]
  00386: cmp    rax,0x3
  0038a: jne    0x3a3
  00390: cmp    esi,0x6
  00393: jge    0x3a3
  00399: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0039e: jmp    0x3c1
  003a3: sub    rsp,0x10
  003a7: movq   QWORD PTR [rsp],xmm2
  003ac: movabs rax,0x5576cccb62a0
  003b6: call   rax
  003b8: movq   xmm2,QWORD PTR [rsp]
  003bd: add    rsp,0x10
  003c1: mov    QWORD PTR [rbp-0x58],rax
:00016 %5 = %5 * %6                         [Float][Float]
  003c5: mov    rdi,QWORD PTR [rbp-0x50]
  003c9: test   rdi,0x1
  003d0: jne    0x37804
  003d6: test   rdi,0x2
  003dd: je     0x419
  003e3: xorps  xmm3,xmm3
  003e6: movabs rax,0x8000000000000002
  003f0: cmp    rdi,rax
  003f3: je     0x42b
  003f9: mov    rax,rdi
  003fc: sar    rax,0x3f
  00400: add    rax,0x2
  00404: and    rdi,0xfffffffffffffffc
  00408: or     rdi,rax
  0040b: rol    rdi,0x3d
  0040f: movq   xmm3,rdi
  00414: jmp    0x42b
  00419: call   0xffff189f
  0041e: test   rax,rax
  00421: je     0x37804
  00427: movq   xmm3,xmm0
  0042b: mov    rdi,QWORD PTR [rbp-0x58]
  0042f: test   rdi,0x1
  00436: jne    0x37820
  0043c: test   rdi,0x2
  00443: je     0x47f
  00449: xorps  xmm4,xmm4
  0044c: movabs rax,0x8000000000000002
  00456: cmp    rdi,rax
  00459: je     0x491
  0045f: mov    rax,rdi
  00462: sar    rax,0x3f
  00466: add    rax,0x2
  0046a: and    rdi,0xfffffffffffffffc
  0046e: or     rdi,rax
  00471: rol    rdi,0x3d
  00475: movq   xmm4,rdi
  0047a: jmp    0x491
  0047f: call   0xffff189f
  00484: test   rax,rax
  00487: je     0x37820
  0048d: movq   xmm4,xmm0
  00491: mulsd  xmm3,xmm4
:00017 %6 = @x: Vec[IvarId(0)]
  00495: mov    rdi,QWORD PTR [rbp-0x28]
  00499: xor    rax,rax
  0049c: mov    ax,WORD PTR [rdi+0x2]
  004a0: cmp    rax,0x3
  004a4: jne    0x3783c
  004aa: mov    rax,QWORD PTR [rdi+0x10]
  004ae: mov    QWORD PTR [rbp-0x58],rax
:00018 %7 = %1.call z()                     [Vec]
:00019 
  004b2: mov    rdi,QWORD PTR [rbp-0x30]
  004b6: test   rdi,0x7
  004bd: jne    0x37870
  004c3: cmp    DWORD PTR [rdi+0x4],0x25
  004c7: jne    0x37870
  004cd: cmp    DWORD PTR [rip+0xffffffffffff3d6f],0x26        # 0xffff4243
  004d4: jne    0x37870
  004da: mov    esi,DWORD PTR [rip+0x54f]        # 0xa2f
  004e0: cmp    esi,0xffffffff
  004e3: je     0x37899
  004e9: xor    rax,rax
  004ec: mov    ax,WORD PTR [rdi+0x2]
  004f0: cmp    rax,0x3
  004f4: jne    0x50d
  004fa: cmp    esi,0x6
  004fd: jge    0x50d
  00503: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00508: jmp    0x537
  0050d: sub    rsp,0x10
  00511: movq   QWORD PTR [rsp],xmm2
  00516: movq   QWORD PTR [rsp+0x8],xmm3
  0051c: movabs rax,0x5576cccb62a0
  00526: call   rax
  00528: movq   xmm2,QWORD PTR [rsp]
  0052d: movq   xmm3,QWORD PTR [rsp+0x8]
  00533: add    rsp,0x10
  00537: mov    QWORD PTR [rbp-0x60],rax
:00021 %6 = %6 * %7                         [Float][Float]
  0053b: mov    rdi,QWORD PTR [rbp-0x58]
  0053f: test   rdi,0x1
  00546: jne    0x378e0
  0054c: test   rdi,0x2
  00553: je     0x58f
  00559: xorps  xmm4,xmm4
  0055c: movabs rax,0x8000000000000002
  00566: cmp    rdi,rax
  00569: je     0x5a1
  0056f: mov    rax,rdi
  00572: sar    rax,0x3f
  00576: add    rax,0x2
  0057a: and    rdi,0xfffffffffffffffc
  0057e: or     rdi,rax
  00581: rol    rdi,0x3d
  00585: movq   xmm4,rdi
  0058a: jmp    0x5a1
  0058f: call   0xffff189f
  00594: test   rax,rax
  00597: je     0x378e0
  0059d: movq   xmm4,xmm0
  005a1: mov    rdi,QWORD PTR [rbp-0x60]
  005a5: test   rdi,0x1
  005ac: jne    0x37909
  005b2: test   rdi,0x2
  005b9: je     0x5f5
  005bf: xorps  xmm5,xmm5
  005c2: movabs rax,0x8000000000000002
  005cc: cmp    rdi,rax
  005cf: je     0x607
  005d5: mov    rax,rdi
  005d8: sar    rax,0x3f
  005dc: add    rax,0x2
  005e0: and    rdi,0xfffffffffffffffc
  005e4: or     rdi,rax
  005e7: rol    rdi,0x3d
  005eb: movq   xmm5,rdi
  005f0: jmp    0x607
  005f5: call   0xffff189f
  005fa: test   rax,rax
  005fd: je     0x37909
  00603: movq   xmm5,xmm0
  00607: mulsd  xmm4,xmm5
:00022 %5 = %5 - %6                         [Float][Float]
  0060b: subsd  xmm3,xmm4
:00023 %6 = @x: Vec[IvarId(0)]
  0060f: mov    rdi,QWORD PTR [rbp-0x28]
  00613: xor    rax,rax
  00616: mov    ax,WORD PTR [rdi+0x2]
  0061a: cmp    rax,0x3
  0061e: jne    0x37932
  00624: mov    rax,QWORD PTR [rdi+0x10]
  00628: mov    QWORD PTR [rbp-0x58],rax
:00024 %7 = %1.call y()                     [Vec]
:00025 
  0062c: mov    rdi,QWORD PTR [rbp-0x30]
  00630: test   rdi,0x7
  00637: jne    0x37972
  0063d: cmp    DWORD PTR [rdi+0x4],0x25
  00641: jne    0x37972
  00647: cmp    DWORD PTR [rip+0xffffffffffff3bf5],0x26        # 0xffff4243
  0064e: jne    0x37972
  00654: mov    esi,DWORD PTR [rip+0x3dd]        # 0xa37
  0065a: cmp    esi,0xffffffff
  0065d: je     0x3799b
  00663: xor    rax,rax
  00666: mov    ax,WORD PTR [rdi+0x2]
  0066a: cmp    rax,0x3
  0066e: jne    0x687
  00674: cmp    esi,0x6
  00677: jge    0x687
  0067d: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00682: jmp    0x6b1
  00687: sub    rsp,0x10
  0068b: movq   QWORD PTR [rsp],xmm2
  00690: movq   QWORD PTR [rsp+0x8],xmm3
  00696: movabs rax,0x5576cccb62a0
  006a0: call   rax
  006a2: movq   xmm2,QWORD PTR [rsp]
  006a7: movq   xmm3,QWORD PTR [rsp+0x8]
  006ad: add    rsp,0x10
  006b1: mov    QWORD PTR [rbp-0x60],rax
:00027 %6 = %6 * %7                         [Float][Float]
  006b5: mov    rdi,QWORD PTR [rbp-0x58]
  006b9: test   rdi,0x1
  006c0: jne    0x379e2
  006c6: test   rdi,0x2
  006cd: je     0x709
  006d3: xorps  xmm4,xmm4
  006d6: movabs rax,0x8000000000000002
  006e0: cmp    rdi,rax
  006e3: je     0x71b
  006e9: mov    rax,rdi
  006ec: sar    rax,0x3f
  006f0: add    rax,0x2
  006f4: and    rdi,0xfffffffffffffffc
  006f8: or     rdi,rax
  006fb: rol    rdi,0x3d
  006ff: movq   xmm4,rdi
  00704: jmp    0x71b
  00709: call   0xffff189f
  0070e: test   rax,rax
  00711: je     0x379e2
  00717: movq   xmm4,xmm0
  0071b: mov    rdi,QWORD PTR [rbp-0x60]
  0071f: test   rdi,0x1
  00726: jne    0x37a0b
  0072c: test   rdi,0x2
  00733: je     0x76f
  00739: xorps  xmm5,xmm5
  0073c: movabs rax,0x8000000000000002
  00746: cmp    rdi,rax
  00749: je     0x781
  0074f: mov    rax,rdi
  00752: sar    rax,0x3f
  00756: add    rax,0x2
  0075a: and    rdi,0xfffffffffffffffc
  0075e: or     rdi,rax
  00761: rol    rdi,0x3d
  00765: movq   xmm5,rdi
  0076a: jmp    0x781
  0076f: call   0xffff189f
  00774: test   rax,rax
  00777: je     0x37a0b
  0077d: movq   xmm5,xmm0
  00781: mulsd  xmm4,xmm5
:00028 %7 = @y: Vec[IvarId(1)]
  00785: mov    rdi,QWORD PTR [rbp-0x28]
  00789: xor    rax,rax
  0078c: mov    ax,WORD PTR [rdi+0x2]
  00790: cmp    rax,0x3
  00794: jne    0x37a34
  0079a: mov    rax,QWORD PTR [rdi+0x18]
  0079e: mov    QWORD PTR [rbp-0x60],rax
:00029 %8 = %1.call x()                     [Vec]
:00030 
  007a2: mov    rdi,QWORD PTR [rbp-0x30]
  007a6: test   rdi,0x7
  007ad: jne    0x37a74
  007b3: cmp    DWORD PTR [rdi+0x4],0x25
  007b7: jne    0x37a74
  007bd: cmp    DWORD PTR [rip+0xffffffffffff3a7f],0x26        # 0xffff4243
  007c4: jne    0x37a74
  007ca: mov    esi,DWORD PTR [rip+0x26f]        # 0xa3f
  007d0: cmp    esi,0xffffffff
  007d3: je     0x37aaa
  007d9: xor    rax,rax
  007dc: mov    ax,WORD PTR [rdi+0x2]
  007e0: cmp    rax,0x3
  007e4: jne    0x7fd
  007ea: cmp    esi,0x6
  007ed: jge    0x7fd
  007f3: mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  007f8: jmp    0x833
  007fd: sub    rsp,0x20
  00801: movq   QWORD PTR [rsp],xmm2
  00806: movq   QWORD PTR [rsp+0x8],xmm3
  0080c: movq   QWORD PTR [rsp+0x10],xmm4
  00812: movabs rax,0x5576cccb62a0
  0081c: call   rax
  0081e: movq   xmm2,QWORD PTR [rsp]
  00823: movq   xmm3,QWORD PTR [rsp+0x8]
  00829: movq   xmm4,QWORD PTR [rsp+0x10]
  0082f: add    rsp,0x20
  00833: mov    QWORD PTR [rbp-0x68],rax
:00032 %7 = %7 * %8                         [Float][Float]
  00837: mov    rdi,QWORD PTR [rbp-0x60]
  0083b: test   rdi,0x1
  00842: jne    0x37afd
  00848: test   rdi,0x2
  0084f: je     0x88b
  00855: xorps  xmm5,xmm5
  00858: movabs rax,0x8000000000000002
  00862: cmp    rdi,rax
  00865: je     0x89d
  0086b: mov    rax,rdi
  0086e: sar    rax,0x3f
  00872: add    rax,0x2
  00876: and    rdi,0xfffffffffffffffc
  0087a: or     rdi,rax
  0087d: rol    rdi,0x3d
  00881: movq   xmm5,rdi
  00886: jmp    0x89d
  0088b: call   0xffff189f
  00890: test   rax,rax
  00893: je     0x37afd
  00899: movq   xmm5,xmm0
  0089d: mov    rdi,QWORD PTR [rbp-0x68]
  008a1: test   rdi,0x1
  008a8: jne    0x37b33
  008ae: test   rdi,0x2
  008b5: je     0x8f1
  008bb: xorps  xmm6,xmm6
  008be: movabs rax,0x8000000000000002
  008c8: cmp    rdi,rax
  008cb: je     0x903
  008d1: mov    rax,rdi
  008d4: sar    rax,0x3f
  008d8: add    rax,0x2
  008dc: and    rdi,0xfffffffffffffffc
  008e0: or     rdi,rax
  008e3: rol    rdi,0x3d
  008e7: movq   xmm6,rdi
  008ec: jmp    0x903
  008f1: call   0xffff189f
  008f6: test   rax,rax
  008f9: je     0x37b33
  008ff: movq   xmm6,xmm0
  00903: mulsd  xmm5,xmm6
:00033 %6 = %6 - %7                         [Float][Float]
  00907: subsd  xmm4,xmm5
:00034 %2 = %3.call new(%4; 3)              [#<Class:Vec>]
:00035 
  0090b: movq   xmm0,xmm2
  0090f: call   0xffff1992
  00914: mov    QWORD PTR [rbp-0x48],rax
  00918: movq   xmm0,xmm3
  0091c: call   0xffff1992
  00921: mov    QWORD PTR [rbp-0x50],rax
  00925: movq   xmm0,xmm4
  00929: call   0xffff1992
  0092e: mov    QWORD PTR [rbp-0x58],rax
  00932: mov    rdi,QWORD PTR [rbp-0x40]
  00936: test   rdi,0x7
  0093d: jne    0x37b69
  00943: cmp    DWORD PTR [rdi+0x4],0x26
  00947: jne    0x37b69
  0094d: cmp    DWORD PTR [rip+0xffffffffffff38ef],0x26        # 0xffff4243
  00954: jne    0x37b69
  0095a: mov    r9,0x0
  00961: sub    rsp,0x30
  00965: movq   QWORD PTR [rsp],xmm2
  0096a: movq   QWORD PTR [rsp+0x8],xmm3
  00970: movq   QWORD PTR [rsp+0x10],xmm4
  00976: movq   QWORD PTR [rsp+0x18],xmm5
  0097c: movq   QWORD PTR [rsp+0x20],xmm6
  00982: mov    rdx,rdi
  00985: mov    rax,QWORD PTR [rbx]
  00988: lea    rdi,[rsp-0x18]
  0098d: mov    QWORD PTR [rdi],rax
  00990: mov    QWORD PTR [rbx],rdi
  00993: mov    QWORD PTR [rsp-0x20],0x0
  0099c: mov    QWORD PTR [rsp-0x38],rcx
  009a1: lea    rcx,[rbp-0x48]
  009a5: mov    r8,0x3
  009ac: call   0x37b85
  009b1: lea    rdi,[rbp-0x8]
  009b5: mov    QWORD PTR [rbx],rdi
  009b8: movq   xmm2,QWORD PTR [rsp]
  009bd: movq   xmm3,QWORD PTR [rsp+0x8]
  009c3: movq   xmm4,QWORD PTR [rsp+0x10]
  009c9: movq   xmm5,QWORD PTR [rsp+0x18]
  009cf: movq   xmm6,QWORD PTR [rsp+0x20]
  009d5: add    rsp,0x30
  009d9: movabs r13,0x5576cd695690
  009e3: test   rax,rax
  009e6: je     0xffff1866
  009ec: mov    QWORD PTR [rbp-0x38],rax
:00037 ret %2
  009f0: mov    rax,QWORD PTR [rbp-0x38]
  009f4: leave  
  009f5: ret    


==> start whole compile: ambient_occlusion FuncId(69) self_class:Scene start:[00000] bytecode:0x5576cd69a1f0
<== finished compile. elapsed:121.2µs
offset:Pos(61976) code: 5113 bytes  data: 295 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004: 00 	sub    rsp,0xa0
  0000b: 00 	mov    rax,0x4
  00012:    	mov    QWORD PTR [rbp-0x38],rax
  00016:    	mov    QWORD PTR [rbp-0x40],rax
  0001a:    	mov    QWORD PTR [rbp-0x48],rax
  0001e:    	mov    QWORD PTR [rbp-0x50],rax
  00022:    	mov    QWORD PTR [rbp-0x58],rax
  00026:    	mov    QWORD PTR [rbp-0x60],rax
  0002a:    	mov    QWORD PTR [rbp-0x68],rax
  0002e:    	mov    QWORD PTR [rbp-0x70],rax
  00032:    	mov    QWORD PTR [rbp-0x78],rax
  00036:    	mov    QWORD PTR [rbp-0x80],rax
  0003a: ff 	mov    QWORD PTR [rbp-0x88],rax
  00041: ff 	mov    QWORD PTR [rbp-0x90],rax
  00048:    	mov    rdi,QWORD PTR [rbp-0x28]
  0004c: 00 	test   rdi,0x7
  00053:    	jne    0x37174
  00059:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0005d:    	jne    0x37174
:00000 %8 = const[Array]                    [Array]
  00063: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff379e]        # 0xffff3808
  0006a: 00 	cmp    rax,QWORD PTR [rip+0x13a7]        # 0x1418
  00071:    	jne    0x37183
  00077: 00 	mov    rax,QWORD PTR [rip+0x138a]        # 0x1408
  0007e:    	mov    QWORD PTR [rbp-0x68],rax
:00001 %2 = %8.call new()                   [#<Class:Array>]
:00002 
  00082:    	mov    rdi,QWORD PTR [rbp-0x68]
  00086: 00 	test   rdi,0x7
  0008d:    	jne    0x371c9
  00093:    	cmp    DWORD PTR [rdi+0x4],0x1e
  00097:    	jne    0x371c9
  0009d: 26 	cmp    DWORD PTR [rip+0xffffffffffff375c],0x26        # 0xffff3800
  000a4:    	jne    0x371c9
  000aa: 00 	mov    r9,0x0
  000b1:    	mov    rdx,rdi
  000b4:    	mov    rax,QWORD PTR [rbx]
  000b7:    	lea    rdi,[rsp-0x18]
  000bc:    	mov    QWORD PTR [rdi],rax
  000bf:    	mov    QWORD PTR [rbx],rdi
  000c2: 00 	mov    QWORD PTR [rsp-0x20],0x0
  000cb:    	mov    QWORD PTR [rsp-0x38],rcx
  000d0:    	lea    rcx,[rbp-0x70]
  000d4: 00 	mov    r8,0x0
  000db:    	call   0x371d8
  000e0:    	lea    rdi,[rbp-0x8]
  000e4:    	mov    QWORD PTR [rbx],rdi
  000e7: 76 	movabs r13,0x5576cd69a220
  000f1:    	test   rax,rax
  000f4:    	je     0xffff0e23
  000fa:    	mov    QWORD PTR [rbp-0x38],rax
:00004 %8 = %2
  000fe:    	mov    rax,QWORD PTR [rbp-0x38]
  00102:    	mov    QWORD PTR [rbp-0x68],rax
:00005 %9 = %1.call n()                     [Isect]
:00006 
  00106:    	mov    rdi,QWORD PTR [rbp-0x30]
  0010a: 00 	test   rdi,0x7
  00111:    	jne    0x3720a
  00117:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0011b:    	jne    0x3720a
  00121: 26 	cmp    DWORD PTR [rip+0xffffffffffff36d8],0x26        # 0xffff3800
  00128:    	jne    0x3720a
  0012e:    	mov    esi,DWORD PTR [rip+0x12f0]        # 0x1424
  00134:    	cmp    esi,0xffffffff
  00137:    	je     0x37219
  0013d:    	xor    rax,rax
  00140:    	mov    ax,WORD PTR [rdi+0x2]
  00144:    	cmp    rax,0x3
  00148:    	jne    0x161
  0014e:    	cmp    esi,0x6
  00151:    	jge    0x161
  00157:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0015c:    	jmp    0x16d
  00161: 76 	movabs rax,0x5576cccb62a0
  0016b:    	call   rax
  0016d:    	mov    QWORD PTR [rbp-0x70],rax
:00008 _ = %0.call otherBasis(%8; 2)        [Scene]
:00009 
  00171:    	mov    rdi,QWORD PTR [rbp-0x28]
  00175: 26 	cmp    DWORD PTR [rip+0xffffffffffff3684],0x26        # 0xffff3800
  0017c:    	jne    0x37242
  00182:    	mov    rax,QWORD PTR [rbx]
  00185:    	lea    rdi,[rsp-0x18]
  0018a:    	mov    QWORD PTR [rdi],rax
  0018d:    	mov    QWORD PTR [rbx],rdi
  00190: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00199:    	mov    QWORD PTR [rsp-0x38],rcx
  0019e:    	mov    rax,QWORD PTR [rbp-0x28]
  001a2:    	mov    QWORD PTR [rsp-0x38],rax
  001a7: 00 	mov    rdi,0x2
  001ae:    	mov    rax,QWORD PTR [rbp-0x68]
  001b2:    	mov    QWORD PTR [rsp-0x40],rax
  001b7:    	mov    rax,QWORD PTR [rbp-0x70]
  001bb:    	mov    QWORD PTR [rsp-0x48],rax
  001c0: 00 	mov    QWORD PTR [rsp-0x30],0x0
  001c9: 09 	movabs rax,0x900000035
  001d3:    	mov    QWORD PTR [rsp-0x28],rax
  001d8: 76 	movabs r13,0x5576cd6b0820
  001e2:    	call   0xffffc9e8
  001e7:    	lea    rdi,[rbp-0x8]
  001eb:    	mov    QWORD PTR [rbx],rdi
  001ee: 76 	movabs r13,0x5576cd69a290
  001f8:    	test   rax,rax
  001fb:    	je     0xffff0e23
:00011 %3 = const[NAO_SAMPLES]              [8]
  00201: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff3600]        # 0xffff3808
  00208: 00 	cmp    rax,QWORD PTR [rip+0x1229]        # 0x1438
  0020f:    	jne    0x37251
  00215: 00 	mov    rax,QWORD PTR [rip+0x120c]        # 0x1428
  0021c:    	mov    QWORD PTR [rbp-0x40],rax
:00012 %4 = const[NAO_SAMPLES]              [8]
  00220: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff35e1]        # 0xffff3808
  00227: 00 	cmp    rax,QWORD PTR [rip+0x122a]        # 0x1458
  0022e:    	jne    0x37297
  00234: 00 	mov    rax,QWORD PTR [rip+0x120d]        # 0x1448
  0023b:    	mov    QWORD PTR [rbp-0x48],rax
:00013 %5 = literal[0.0001]
  0023f: 00 	movq   xmm2,QWORD PTR [rip+0x1221]        # 0x1468
:00014 %6 = literal[0.0]
  00247: 00 	movq   xmm3,QWORD PTR [rip+0x1229]        # 0x1478
:00015 %8 = const[Vec]                      [Vec]
  0024f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff35b2]        # 0xffff3808
  00256: 00 	cmp    rax,QWORD PTR [rip+0x123b]        # 0x1498
  0025d:    	jne    0x372dd
  00263: 00 	mov    rax,QWORD PTR [rip+0x121e]        # 0x1488
  0026a:    	mov    QWORD PTR [rbp-0x68],rax
:00016 %10 = %1.call pl()                   [Isect]
:00017 
  0026e:    	mov    rdi,QWORD PTR [rbp-0x30]
  00272: 00 	test   rdi,0x7
  00279:    	jne    0x37341
  0027f:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00283:    	jne    0x37341
  00289: 26 	cmp    DWORD PTR [rip+0xffffffffffff3570],0x26        # 0xffff3800
  00290:    	jne    0x37341
  00296:    	mov    esi,DWORD PTR [rip+0x1208]        # 0x14a4
  0029c:    	cmp    esi,0xffffffff
  0029f:    	je     0x3736a
  002a5:    	xor    rax,rax
  002a8:    	mov    ax,WORD PTR [rdi+0x2]
  002ac:    	cmp    rax,0x3
  002b0:    	jne    0x2c9
  002b6:    	cmp    esi,0x6
  002b9:    	jge    0x2c9
  002bf:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  002c4:    	jmp    0x2f3
  002c9:    	sub    rsp,0x10
  002cd:    	movq   QWORD PTR [rsp],xmm2
  002d2:    	movq   QWORD PTR [rsp+0x8],xmm3
  002d8: 76 	movabs rax,0x5576cccb62a0
  002e2:    	call   rax
  002e4:    	movq   xmm2,QWORD PTR [rsp]
  002e9:    	movq   xmm3,QWORD PTR [rsp+0x8]
  002ef:    	add    rsp,0x10
  002f3:    	mov    QWORD PTR [rbp-0x78],rax
:00019 %9 = %10.call x()                    [Vec]
:00020 
  002f7:    	mov    rdi,QWORD PTR [rbp-0x78]
  002fb: 00 	test   rdi,0x7
  00302:    	jne    0x373b1
  00308:    	cmp    DWORD PTR [rdi+0x4],0x25
  0030c:    	jne    0x373b1
  00312: 26 	cmp    DWORD PTR [rip+0xffffffffffff34e7],0x26        # 0xffff3800
  00319:    	jne    0x373b1
  0031f:    	mov    esi,DWORD PTR [rip+0x1187]        # 0x14ac
  00325:    	cmp    esi,0xffffffff
  00328:    	je     0x373da
  0032e:    	xor    rax,rax
  00331:    	mov    ax,WORD PTR [rdi+0x2]
  00335:    	cmp    rax,0x3
  00339:    	jne    0x352
  0033f:    	cmp    esi,0x6
  00342:    	jge    0x352
  00348:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0034d:    	jmp    0x37c
  00352:    	sub    rsp,0x10
  00356:    	movq   QWORD PTR [rsp],xmm2
  0035b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00361: 76 	movabs rax,0x5576cccb62a0
  0036b:    	call   rax
  0036d:    	movq   xmm2,QWORD PTR [rsp]
  00372:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00378:    	add    rsp,0x10
  0037c:    	mov    QWORD PTR [rbp-0x70],rax
:00022 %11 = %1.call n()                    [Isect]
:00023 
  00380:    	mov    rdi,QWORD PTR [rbp-0x30]
  00384: 00 	test   rdi,0x7
  0038b:    	jne    0x37421
  00391:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00395:    	jne    0x37421
  0039b: 26 	cmp    DWORD PTR [rip+0xffffffffffff345e],0x26        # 0xffff3800
  003a2:    	jne    0x37421
  003a8:    	mov    esi,DWORD PTR [rip+0x1106]        # 0x14b4
  003ae:    	cmp    esi,0xffffffff
  003b1:    	je     0x3744a
  003b7:    	xor    rax,rax
  003ba:    	mov    ax,WORD PTR [rdi+0x2]
  003be:    	cmp    rax,0x3
  003c2:    	jne    0x3db
  003c8:    	cmp    esi,0x6
  003cb:    	jge    0x3db
  003d1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  003d6:    	jmp    0x405
  003db:    	sub    rsp,0x10
  003df:    	movq   QWORD PTR [rsp],xmm2
  003e4:    	movq   QWORD PTR [rsp+0x8],xmm3
  003ea: 76 	movabs rax,0x5576cccb62a0
  003f4:    	call   rax
  003f6:    	movq   xmm2,QWORD PTR [rsp]
  003fb:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00401:    	add    rsp,0x10
  00405:    	mov    QWORD PTR [rbp-0x80],rax
:00025 %10 = %11.call x()                   [Vec]
:00026 
  00409:    	mov    rdi,QWORD PTR [rbp-0x80]
  0040d: 00 	test   rdi,0x7
  00414:    	jne    0x37491
  0041a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0041e:    	jne    0x37491
  00424: 26 	cmp    DWORD PTR [rip+0xffffffffffff33d5],0x26        # 0xffff3800
  0042b:    	jne    0x37491
  00431:    	mov    esi,DWORD PTR [rip+0x1085]        # 0x14bc
  00437:    	cmp    esi,0xffffffff
  0043a:    	je     0x374ba
  00440:    	xor    rax,rax
  00443:    	mov    ax,WORD PTR [rdi+0x2]
  00447:    	cmp    rax,0x3
  0044b:    	jne    0x464
  00451:    	cmp    esi,0x6
  00454:    	jge    0x464
  0045a:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0045f:    	jmp    0x48e
  00464:    	sub    rsp,0x10
  00468:    	movq   QWORD PTR [rsp],xmm2
  0046d:    	movq   QWORD PTR [rsp+0x8],xmm3
  00473: 76 	movabs rax,0x5576cccb62a0
  0047d:    	call   rax
  0047f:    	movq   xmm2,QWORD PTR [rsp]
  00484:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0048a:    	add    rsp,0x10
  0048e:    	mov    QWORD PTR [rbp-0x78],rax
:00028 %10 = %5 * %10                       [Float][Float]
  00492:    	mov    rdi,QWORD PTR [rbp-0x78]
  00496: 00 	test   rdi,0x1
  0049d:    	jne    0x37501
  004a3: 00 	test   rdi,0x2
  004aa:    	je     0x4e6
  004b0:    	xorps  xmm4,xmm4
  004b3: 00 	movabs rax,0x8000000000000002
  004bd:    	cmp    rdi,rax
  004c0:    	je     0x4f8
  004c6:    	mov    rax,rdi
  004c9:    	sar    rax,0x3f
  004cd:    	add    rax,0x2
  004d1:    	and    rdi,0xfffffffffffffffc
  004d5:    	or     rdi,rax
  004d8:    	rol    rdi,0x3d
  004dc:    	movq   xmm4,rdi
  004e1:    	jmp    0x4f8
  004e6:    	call   0xffff0e5c
  004eb:    	test   rax,rax
  004ee:    	je     0x37501
  004f4:    	movq   xmm4,xmm0
  004f8:    	mulsd  xmm4,xmm2
:00029 %9 = %9 + %10                        [Float][Float]
  004fc:    	mov    rdi,QWORD PTR [rbp-0x70]
  00500: 00 	test   rdi,0x1
  00507:    	jne    0x3752a
  0050d: 00 	test   rdi,0x2
  00514:    	je     0x550
  0051a:    	xorps  xmm5,xmm5
  0051d: 00 	movabs rax,0x8000000000000002
  00527:    	cmp    rdi,rax
  0052a:    	je     0x562
  00530:    	mov    rax,rdi
  00533:    	sar    rax,0x3f
  00537:    	add    rax,0x2
  0053b:    	and    rdi,0xfffffffffffffffc
  0053f:    	or     rdi,rax
  00542:    	rol    rdi,0x3d
  00546:    	movq   xmm5,rdi
  0054b:    	jmp    0x562
  00550:    	call   0xffff0e5c
  00555:    	test   rax,rax
  00558:    	je     0x3752a
  0055e:    	movq   xmm5,xmm0
  00562:    	addsd  xmm5,xmm4
:00030 %11 = %1.call pl()                   [Isect]
:00031 
  00566:    	mov    rdi,QWORD PTR [rbp-0x30]
  0056a: 00 	test   rdi,0x7
  00571:    	jne    0x37560
  00577:    	cmp    DWORD PTR [rdi+0x4],0x2d
  0057b:    	jne    0x37560
  00581: 26 	cmp    DWORD PTR [rip+0xffffffffffff3278],0x26        # 0xffff3800
  00588:    	jne    0x37560
  0058e:    	mov    esi,DWORD PTR [rip+0xf30]        # 0x14c4
  00594:    	cmp    esi,0xffffffff
  00597:    	je     0x375a3
  0059d:    	xor    rax,rax
  005a0:    	mov    ax,WORD PTR [rdi+0x2]
  005a4:    	cmp    rax,0x3
  005a8:    	jne    0x5c1
  005ae:    	cmp    esi,0x6
  005b1:    	jge    0x5c1
  005b7:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  005bc:    	jmp    0x603
  005c1:    	sub    rsp,0x20
  005c5:    	movq   QWORD PTR [rsp],xmm2
  005ca:    	movq   QWORD PTR [rsp+0x8],xmm3
  005d0:    	movq   QWORD PTR [rsp+0x10],xmm4
  005d6:    	movq   QWORD PTR [rsp+0x18],xmm5
  005dc: 76 	movabs rax,0x5576cccb62a0
  005e6:    	call   rax
  005e8:    	movq   xmm2,QWORD PTR [rsp]
  005ed:    	movq   xmm3,QWORD PTR [rsp+0x8]
  005f3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  005f9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  005ff:    	add    rsp,0x20
  00603:    	mov    QWORD PTR [rbp-0x80],rax
:00033 %10 = %11.call y()                   [Vec]
:00034 
  00607:    	mov    rdi,QWORD PTR [rbp-0x80]
  0060b: 00 	test   rdi,0x7
  00612:    	jne    0x37602
  00618:    	cmp    DWORD PTR [rdi+0x4],0x25
  0061c:    	jne    0x37602
  00622: 26 	cmp    DWORD PTR [rip+0xffffffffffff31d7],0x26        # 0xffff3800
  00629:    	jne    0x37602
  0062f:    	mov    esi,DWORD PTR [rip+0xe97]        # 0x14cc
  00635:    	cmp    esi,0xffffffff
  00638:    	je     0x37638
  0063e:    	xor    rax,rax
  00641:    	mov    ax,WORD PTR [rdi+0x2]
  00645:    	cmp    rax,0x3
  00649:    	jne    0x662
  0064f:    	cmp    esi,0x6
  00652:    	jge    0x662
  00658:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0065d:    	jmp    0x698
  00662:    	sub    rsp,0x20
  00666:    	movq   QWORD PTR [rsp],xmm2
  0066b:    	movq   QWORD PTR [rsp+0x8],xmm3
  00671:    	movq   QWORD PTR [rsp+0x10],xmm5
  00677: 76 	movabs rax,0x5576cccb62a0
  00681:    	call   rax
  00683:    	movq   xmm2,QWORD PTR [rsp]
  00688:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0068e:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00694:    	add    rsp,0x20
  00698:    	mov    QWORD PTR [rbp-0x78],rax
:00036 %12 = %1.call n()                    [Isect]
:00037 
  0069c:    	mov    rdi,QWORD PTR [rbp-0x30]
  006a0: 00 	test   rdi,0x7
  006a7:    	jne    0x3768b
  006ad:    	cmp    DWORD PTR [rdi+0x4],0x2d
  006b1:    	jne    0x3768b
  006b7: 26 	cmp    DWORD PTR [rip+0xffffffffffff3142],0x26        # 0xffff3800
  006be:    	jne    0x3768b
  006c4:    	mov    esi,DWORD PTR [rip+0xe0a]        # 0x14d4
  006ca:    	cmp    esi,0xffffffff
  006cd:    	je     0x376c1
  006d3:    	xor    rax,rax
  006d6:    	mov    ax,WORD PTR [rdi+0x2]
  006da:    	cmp    rax,0x3
  006de:    	jne    0x6f7
  006e4:    	cmp    esi,0x6
  006e7:    	jge    0x6f7
  006ed:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  006f2:    	jmp    0x72d
  006f7:    	sub    rsp,0x20
  006fb:    	movq   QWORD PTR [rsp],xmm2
  00700:    	movq   QWORD PTR [rsp+0x8],xmm3
  00706:    	movq   QWORD PTR [rsp+0x10],xmm5
  0070c: 76 	movabs rax,0x5576cccb62a0
  00716:    	call   rax
  00718:    	movq   xmm2,QWORD PTR [rsp]
  0071d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00723:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00729:    	add    rsp,0x20
  0072d: ff 	mov    QWORD PTR [rbp-0x88],rax
:00039 %11 = %12.call y()                   [Vec]
:00040 
  00734: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  0073b: 00 	test   rdi,0x7
  00742:    	jne    0x37714
  00748:    	cmp    DWORD PTR [rdi+0x4],0x25
  0074c:    	jne    0x37714
  00752: 26 	cmp    DWORD PTR [rip+0xffffffffffff30a7],0x26        # 0xffff3800
  00759:    	jne    0x37714
  0075f:    	mov    esi,DWORD PTR [rip+0xd77]        # 0x14dc
  00765:    	cmp    esi,0xffffffff
  00768:    	je     0x3774a
  0076e:    	xor    rax,rax
  00771:    	mov    ax,WORD PTR [rdi+0x2]
  00775:    	cmp    rax,0x3
  00779:    	jne    0x792
  0077f:    	cmp    esi,0x6
  00782:    	jge    0x792
  00788:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0078d:    	jmp    0x7c8
  00792:    	sub    rsp,0x20
  00796:    	movq   QWORD PTR [rsp],xmm2
  0079b:    	movq   QWORD PTR [rsp+0x8],xmm3
  007a1:    	movq   QWORD PTR [rsp+0x10],xmm5
  007a7: 76 	movabs rax,0x5576cccb62a0
  007b1:    	call   rax
  007b3:    	movq   xmm2,QWORD PTR [rsp]
  007b8:    	movq   xmm3,QWORD PTR [rsp+0x8]
  007be:    	movq   xmm5,QWORD PTR [rsp+0x10]
  007c4:    	add    rsp,0x20
  007c8:    	mov    QWORD PTR [rbp-0x80],rax
:00042 %11 = %5 * %11                       [Float][Float]
  007cc:    	mov    rdi,QWORD PTR [rbp-0x80]
  007d0: 00 	test   rdi,0x1
  007d7:    	jne    0x3779d
  007dd: 00 	test   rdi,0x2
  007e4:    	je     0x820
  007ea:    	xorps  xmm4,xmm4
  007ed: 00 	movabs rax,0x8000000000000002
  007f7:    	cmp    rdi,rax
  007fa:    	je     0x832
  00800:    	mov    rax,rdi
  00803:    	sar    rax,0x3f
  00807:    	add    rax,0x2
  0080b:    	and    rdi,0xfffffffffffffffc
  0080f:    	or     rdi,rax
  00812:    	rol    rdi,0x3d
  00816:    	movq   xmm4,rdi
  0081b:    	jmp    0x832
  00820:    	call   0xffff0e5c
  00825:    	test   rax,rax
  00828:    	je     0x3779d
  0082e:    	movq   xmm4,xmm0
  00832:    	mulsd  xmm4,xmm2
:00043 %10 = %10 + %11                      [Float][Float]
  00836:    	mov    rdi,QWORD PTR [rbp-0x78]
  0083a: 00 	test   rdi,0x1
  00841:    	jne    0x377d3
  00847: 00 	test   rdi,0x2
  0084e:    	je     0x88a
  00854:    	xorps  xmm6,xmm6
  00857: 00 	movabs rax,0x8000000000000002
  00861:    	cmp    rdi,rax
  00864:    	je     0x89c
  0086a:    	mov    rax,rdi
  0086d:    	sar    rax,0x3f
  00871:    	add    rax,0x2
  00875:    	and    rdi,0xfffffffffffffffc
  00879:    	or     rdi,rax
  0087c:    	rol    rdi,0x3d
  00880:    	movq   xmm6,rdi
  00885:    	jmp    0x89c
  0088a:    	call   0xffff0e5c
  0088f:    	test   rax,rax
  00892:    	je     0x377d3
  00898:    	movq   xmm6,xmm0
  0089c:    	addsd  xmm6,xmm4
:00044 %12 = %1.call pl()                   [Isect]
:00045 
  008a0:    	mov    rdi,QWORD PTR [rbp-0x30]
  008a4: 00 	test   rdi,0x7
  008ab:    	jne    0x37816
  008b1:    	cmp    DWORD PTR [rdi+0x4],0x2d
  008b5:    	jne    0x37816
  008bb: 26 	cmp    DWORD PTR [rip+0xffffffffffff2f3e],0x26        # 0xffff3800
  008c2:    	jne    0x37816
  008c8:    	mov    esi,DWORD PTR [rip+0xc16]        # 0x14e4
  008ce:    	cmp    esi,0xffffffff
  008d1:    	je     0x37866
  008d7:    	xor    rax,rax
  008da:    	mov    ax,WORD PTR [rdi+0x2]
  008de:    	cmp    rax,0x3
  008e2:    	jne    0x8fb
  008e8:    	cmp    esi,0x6
  008eb:    	jge    0x8fb
  008f1:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  008f6:    	jmp    0x949
  008fb:    	sub    rsp,0x30
  008ff:    	movq   QWORD PTR [rsp],xmm2
  00904:    	movq   QWORD PTR [rsp+0x8],xmm3
  0090a:    	movq   QWORD PTR [rsp+0x10],xmm4
  00910:    	movq   QWORD PTR [rsp+0x18],xmm5
  00916:    	movq   QWORD PTR [rsp+0x20],xmm6
  0091c: 76 	movabs rax,0x5576cccb62a0
  00926:    	call   rax
  00928:    	movq   xmm2,QWORD PTR [rsp]
  0092d:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00933:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00939:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0093f:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00945:    	add    rsp,0x30
  00949: ff 	mov    QWORD PTR [rbp-0x88],rax
:00047 %11 = %12.call z()                   [Vec]
:00048 
  00950: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00957: 00 	test   rdi,0x7
  0095e:    	jne    0x378d1
  00964:    	cmp    DWORD PTR [rdi+0x4],0x25
  00968:    	jne    0x378d1
  0096e: 26 	cmp    DWORD PTR [rip+0xffffffffffff2e8b],0x26        # 0xffff3800
  00975:    	jne    0x378d1
  0097b:    	mov    esi,DWORD PTR [rip+0xb6b]        # 0x14ec
  00981:    	cmp    esi,0xffffffff
  00984:    	je     0x37914
  0098a:    	xor    rax,rax
  0098d:    	mov    ax,WORD PTR [rdi+0x2]
  00991:    	cmp    rax,0x3
  00995:    	jne    0x9ae
  0099b:    	cmp    esi,0x6
  0099e:    	jge    0x9ae
  009a4:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  009a9:    	jmp    0x9f0
  009ae:    	sub    rsp,0x20
  009b2:    	movq   QWORD PTR [rsp],xmm2
  009b7:    	movq   QWORD PTR [rsp+0x8],xmm3
  009bd:    	movq   QWORD PTR [rsp+0x10],xmm5
  009c3:    	movq   QWORD PTR [rsp+0x18],xmm6
  009c9: 76 	movabs rax,0x5576cccb62a0
  009d3:    	call   rax
  009d5:    	movq   xmm2,QWORD PTR [rsp]
  009da:    	movq   xmm3,QWORD PTR [rsp+0x8]
  009e0:    	movq   xmm5,QWORD PTR [rsp+0x10]
  009e6:    	movq   xmm6,QWORD PTR [rsp+0x18]
  009ec:    	add    rsp,0x20
  009f0:    	mov    QWORD PTR [rbp-0x80],rax
:00050 %13 = %1.call n()                    [Isect]
:00051 
  009f4:    	mov    rdi,QWORD PTR [rbp-0x30]
  009f8: 00 	test   rdi,0x7
  009ff:    	jne    0x37973
  00a05:    	cmp    DWORD PTR [rdi+0x4],0x2d
  00a09:    	jne    0x37973
  00a0f: 26 	cmp    DWORD PTR [rip+0xffffffffffff2dea],0x26        # 0xffff3800
  00a16:    	jne    0x37973
  00a1c:    	mov    esi,DWORD PTR [rip+0xad2]        # 0x14f4
  00a22:    	cmp    esi,0xffffffff
  00a25:    	je     0x379b6
  00a2b:    	xor    rax,rax
  00a2e:    	mov    ax,WORD PTR [rdi+0x2]
  00a32:    	cmp    rax,0x3
  00a36:    	jne    0xa4f
  00a3c:    	cmp    esi,0x6
  00a3f:    	jge    0xa4f
  00a45:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00a4a:    	jmp    0xa91
  00a4f:    	sub    rsp,0x20
  00a53:    	movq   QWORD PTR [rsp],xmm2
  00a58:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a5e:    	movq   QWORD PTR [rsp+0x10],xmm5
  00a64:    	movq   QWORD PTR [rsp+0x18],xmm6
  00a6a: 76 	movabs rax,0x5576cccb62a0
  00a74:    	call   rax
  00a76:    	movq   xmm2,QWORD PTR [rsp]
  00a7b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a81:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00a87:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00a8d:    	add    rsp,0x20
  00a91: ff 	mov    QWORD PTR [rbp-0x90],rax
:00053 %12 = %13.call z()                   [Vec]
:00054 
  00a98: ff 	mov    rdi,QWORD PTR [rbp-0x90]
  00a9f: 00 	test   rdi,0x7
  00aa6:    	jne    0x37a15
  00aac:    	cmp    DWORD PTR [rdi+0x4],0x25
  00ab0:    	jne    0x37a15
  00ab6: 26 	cmp    DWORD PTR [rip+0xffffffffffff2d43],0x26        # 0xffff3800
  00abd:    	jne    0x37a15
  00ac3:    	mov    esi,DWORD PTR [rip+0xa33]        # 0x14fc
  00ac9:    	cmp    esi,0xffffffff
  00acc:    	je     0x37a58
  00ad2:    	xor    rax,rax
  00ad5:    	mov    ax,WORD PTR [rdi+0x2]
  00ad9:    	cmp    rax,0x3
  00add:    	jne    0xaf6
  00ae3:    	cmp    esi,0x6
  00ae6:    	jge    0xaf6
  00aec:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00af1:    	jmp    0xb38
  00af6:    	sub    rsp,0x20
  00afa:    	movq   QWORD PTR [rsp],xmm2
  00aff:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b05:    	movq   QWORD PTR [rsp+0x10],xmm5
  00b0b:    	movq   QWORD PTR [rsp+0x18],xmm6
  00b11: 76 	movabs rax,0x5576cccb62a0
  00b1b:    	call   rax
  00b1d:    	movq   xmm2,QWORD PTR [rsp]
  00b22:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b28:    	movq   xmm5,QWORD PTR [rsp+0x10]
  00b2e:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00b34:    	add    rsp,0x20
  00b38: ff 	mov    QWORD PTR [rbp-0x88],rax
:00056 %12 = %5 * %12                       [Float][Float]
  00b3f: ff 	mov    rdi,QWORD PTR [rbp-0x88]
  00b46: 00 	test   rdi,0x1
  00b4d:    	jne    0x37ab7
  00b53: 00 	test   rdi,0x2
  00b5a:    	je     0xb96
  00b60:    	xorps  xmm4,xmm4
  00b63: 00 	movabs rax,0x8000000000000002
  00b6d:    	cmp    rdi,rax
  00b70:    	je     0xba8
  00b76:    	mov    rax,rdi
  00b79:    	sar    rax,0x3f
  00b7d:    	add    rax,0x2
  00b81:    	and    rdi,0xfffffffffffffffc
  00b85:    	or     rdi,rax
  00b88:    	rol    rdi,0x3d
  00b8c:    	movq   xmm4,rdi
  00b91:    	jmp    0xba8
  00b96:    	call   0xffff0e5c
  00b9b:    	test   rax,rax
  00b9e:    	je     0x37ab7
  00ba4:    	movq   xmm4,xmm0
  00ba8:    	mulsd  xmm4,xmm2
:00057 %11 = %11 + %12                      [Float][Float]
  00bac:    	mov    rdi,QWORD PTR [rbp-0x80]
  00bb0: 00 	test   rdi,0x1
  00bb7:    	jne    0x37afa
  00bbd: 00 	test   rdi,0x2
  00bc4:    	je     0xc00
  00bca:    	xorps  xmm7,xmm7
  00bcd: 00 	movabs rax,0x8000000000000002
  00bd7:    	cmp    rdi,rax
  00bda:    	je     0xc12
  00be0:    	mov    rax,rdi
  00be3:    	sar    rax,0x3f
  00be7:    	add    rax,0x2
  00beb:    	and    rdi,0xfffffffffffffffc
  00bef:    	or     rdi,rax
  00bf2:    	rol    rdi,0x3d
  00bf6:    	movq   xmm7,rdi
  00bfb:    	jmp    0xc12
  00c00:    	call   0xffff0e5c
  00c05:    	test   rax,rax
  00c08:    	je     0x37afa
  00c0e:    	movq   xmm7,xmm0
  00c12:    	addsd  xmm7,xmm4
:00058 %7 = %8.call new(%9; 3)              [#<Class:Vec>]
:00059 
  00c16:    	movq   xmm0,xmm5
  00c1a:    	call   0xffff0f4f
  00c1f:    	mov    QWORD PTR [rbp-0x70],rax
  00c23:    	movq   xmm0,xmm6
  00c27:    	call   0xffff0f4f
  00c2c:    	mov    QWORD PTR [rbp-0x78],rax
  00c30:    	movq   xmm0,xmm7
  00c34:    	call   0xffff0f4f
  00c39:    	mov    QWORD PTR [rbp-0x80],rax
  00c3d:    	mov    rdi,QWORD PTR [rbp-0x68]
  00c41: 00 	test   rdi,0x7
  00c48:    	jne    0x37b4d
  00c4e:    	cmp    DWORD PTR [rdi+0x4],0x26
  00c52:    	jne    0x37b4d
  00c58: 26 	cmp    DWORD PTR [rip+0xffffffffffff2ba1],0x26        # 0xffff3800
  00c5f:    	jne    0x37b4d
  00c65: 00 	mov    r9,0x0
  00c6c:    	sub    rsp,0x30
  00c70:    	movq   QWORD PTR [rsp],xmm2
  00c75:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c7b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c81:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c87:    	movq   QWORD PTR [rsp+0x20],xmm6
  00c8d:    	movq   QWORD PTR [rsp+0x28],xmm7
  00c93:    	mov    rdx,rdi
  00c96:    	mov    rax,QWORD PTR [rbx]
  00c99:    	lea    rdi,[rsp-0x18]
  00c9e:    	mov    QWORD PTR [rdi],rax
  00ca1:    	mov    QWORD PTR [rbx],rdi
  00ca4: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cad:    	mov    QWORD PTR [rsp-0x38],rcx
  00cb2:    	lea    rcx,[rbp-0x70]
  00cb6: 00 	mov    r8,0x3
  00cbd:    	call   0x37b86
  00cc2:    	lea    rdi,[rbp-0x8]
  00cc6:    	mov    QWORD PTR [rbx],rdi
  00cc9:    	movq   xmm2,QWORD PTR [rsp]
  00cce:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00cd4:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00cda:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ce0:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ce6:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00cec:    	add    rsp,0x30
  00cf0: 76 	movabs r13,0x5576cd69a5b0
  00cfa:    	test   rax,rax
  00cfd:    	je     0xffff0e23
  00d03:    	mov    QWORD PTR [rbp-0x60],rax
:00061 %8 = literal[71]
  00d07: 00 	mov    rax,0x8f
  00d0e:    	mov    QWORD PTR [rbp-0x68],rax
:00062 _ = %4.call times(&%8)               [Integer]
:00063 
  00d12:    	movq   xmm0,xmm2
  00d16:    	call   0xffff0f4f
  00d1b:    	mov    QWORD PTR [rbp-0x50],rax
  00d1f:    	movq   xmm0,xmm3
  00d23:    	call   0xffff0f4f
  00d28:    	mov    QWORD PTR [rbp-0x58],rax
  00d2c:    	movq   xmm0,xmm4
  00d30:    	call   0xffff0f4f
  00d35: ff 	mov    QWORD PTR [rbp-0x88],rax
  00d3c:    	mov    rdi,QWORD PTR [rbp-0x48]
  00d40: 00 	test   rdi,0x1
  00d47:    	jne    0xd64
  00d4d: 00 	test   rdi,0x7
  00d54:    	jne    0x37bb8
  00d5a:    	cmp    DWORD PTR [rdi+0x4],0x6
  00d5e:    	jne    0x37bb8
  00d64: 26 	cmp    DWORD PTR [rip+0xffffffffffff2a95],0x26        # 0xffff3800
  00d6b:    	jne    0x37bb8
  00d71:    	mov    r9,QWORD PTR [rbp-0x68]
  00d75:    	sub    rsp,0x30
  00d79:    	movq   QWORD PTR [rsp],xmm2
  00d7e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00d84:    	movq   QWORD PTR [rsp+0x10],xmm4
  00d8a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00d90:    	movq   QWORD PTR [rsp+0x20],xmm6
  00d96:    	movq   QWORD PTR [rsp+0x28],xmm7
  00d9c:    	mov    rdx,rdi
  00d9f:    	mov    rax,QWORD PTR [rbx]
  00da2:    	lea    rdi,[rsp-0x18]
  00da7:    	mov    QWORD PTR [rdi],rax
  00daa:    	mov    QWORD PTR [rbx],rdi
  00dad: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00db6:    	mov    QWORD PTR [rsp-0x38],rcx
  00dbb:    	lea    rcx,[rbp-0x70]
  00dbf: 00 	mov    r8,0x0
  00dc6:    	call   0x37bf1
  00dcb:    	lea    rdi,[rbp-0x8]
  00dcf:    	mov    QWORD PTR [rbx],rdi
  00dd2:    	movq   xmm2,QWORD PTR [rsp]
  00dd7:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ddd:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00de3:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00de9:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00def:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00df5:    	add    rsp,0x30
  00df9: 76 	movabs r13,0x5576cd69a5f0
  00e03:    	test   rax,rax
  00e06:    	je     0xffff0e23
:00065 %8 = %3.call to_f()                  [Integer]
:00066 
  00e0c:    	mov    rdi,QWORD PTR [rbp-0x40]
  00e10: 00 	test   rdi,0x1
  00e17:    	jne    0xe34
  00e1d: 00 	test   rdi,0x7
  00e24:    	jne    0x37c23
  00e2a:    	cmp    DWORD PTR [rdi+0x4],0x6
  00e2e:    	jne    0x37c23
  00e34: 26 	cmp    DWORD PTR [rip+0xffffffffffff29c5],0x26        # 0xffff3800
  00e3b:    	jne    0x37c23
  00e41: 00 	mov    r9,0x0
  00e48:    	sub    rsp,0x30
  00e4c:    	movq   QWORD PTR [rsp],xmm2
  00e51:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e57:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e5d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e63:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e69:    	movq   QWORD PTR [rsp+0x28],xmm7
  00e6f:    	mov    rdx,rdi
  00e72:    	mov    rax,QWORD PTR [rbx]
  00e75:    	lea    rdi,[rsp-0x18]
  00e7a:    	mov    QWORD PTR [rdi],rax
  00e7d:    	mov    QWORD PTR [rbx],rdi
  00e80: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e89:    	mov    QWORD PTR [rsp-0x38],rcx
  00e8e:    	lea    rcx,[rbp-0x70]
  00e92: 00 	mov    r8,0x0
  00e99:    	call   0x37c5c
  00e9e:    	lea    rdi,[rbp-0x8]
  00ea2:    	mov    QWORD PTR [rbx],rdi
  00ea5:    	movq   xmm2,QWORD PTR [rsp]
  00eaa:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00eb0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00eb6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00ebc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00ec2:    	movq   xmm7,QWORD PTR [rsp+0x28]
  00ec8:    	add    rsp,0x30
  00ecc: 76 	movabs r13,0x5576cd69a620
  00ed6:    	test   rax,rax
  00ed9:    	je     0xffff0e23
  00edf:    	mov    QWORD PTR [rbp-0x68],rax
:00068 %9 = %4.call to_f()                  [Integer]
:00069 
  00ee3:    	mov    rdi,QWORD PTR [rbp-0x48]
  00ee7: 00 	test   rdi,0x1
  00eee:    	jne    0xf0b
  00ef4: 00 	test   rdi,0x7
  00efb:    	jne    0x37c8e
  00f01:    	cmp    DWORD PTR [rdi+0x4],0x6
  00f05:    	jne    0x37c8e
  00f0b: 26 	cmp    DWORD PTR [rip+0xffffffffffff28ee],0x26        # 0xffff3800
  00f12:    	jne    0x37c8e
  00f18: 00 	mov    r9,0x0
  00f1f:    	sub    rsp,0x30
  00f23:    	movq   QWORD PTR [rsp],xmm2
  00f28:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f2e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f34:    	movq   QWORD PTR [rsp+0x18],xmm6
  00f3a:    	movq   QWORD PTR [rsp+0x20],xmm7
  00f40:    	mov    rdx,rdi
  00f43:    	mov    rax,QWORD PTR [rbx]
  00f46:    	lea    rdi,[rsp-0x18]
  00f4b:    	mov    QWORD PTR [rdi],rax
  00f4e:    	mov    QWORD PTR [rbx],rdi
  00f51: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00f5a:    	mov    QWORD PTR [rsp-0x38],rcx
  00f5f:    	lea    rcx,[rbp-0x78]
  00f63: 00 	mov    r8,0x0
  00f6a:    	call   0x37cc7
  00f6f:    	lea    rdi,[rbp-0x8]
  00f73:    	mov    QWORD PTR [rbx],rdi
  00f76:    	movq   xmm2,QWORD PTR [rsp]
  00f7b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f81:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f87:    	movq   xmm6,QWORD PTR [rsp+0x18]
  00f8d:    	movq   xmm7,QWORD PTR [rsp+0x20]
  00f93:    	add    rsp,0x30
  00f97: 76 	movabs r13,0x5576cd69a650
  00fa1:    	test   rax,rax
  00fa4:    	je     0xffff0e23
  00faa:    	mov    QWORD PTR [rbp-0x70],rax
:00071 %8 = %8 * %9                         [Float][Float]
  00fae:    	mov    rdi,QWORD PTR [rbp-0x68]
  00fb2: 00 	test   rdi,0x1
  00fb9:    	jne    0x37cf9
  00fbf: 00 	test   rdi,0x2
  00fc6:    	je     0x1002
  00fcc:    	xorps  xmm5,xmm5
  00fcf: 00 	movabs rax,0x8000000000000002
  00fd9:    	cmp    rdi,rax
  00fdc:    	je     0x1014
  00fe2:    	mov    rax,rdi
  00fe5:    	sar    rax,0x3f
  00fe9:    	add    rax,0x2
  00fed:    	and    rdi,0xfffffffffffffffc
  00ff1:    	or     rdi,rax
  00ff4:    	rol    rdi,0x3d
  00ff8:    	movq   xmm5,rdi
  00ffd:    	jmp    0x1014
  01002:    	call   0xffff0e5c
  01007:    	test   rax,rax
  0100a:    	je     0x37cf9
  01010:    	movq   xmm5,xmm0
  01014:    	mov    rdi,QWORD PTR [rbp-0x70]
  01018: 00 	test   rdi,0x1
  0101f:    	jne    0x37d32
  01025: 00 	test   rdi,0x2
  0102c:    	je     0x1069
  01032:    	xorps  xmm8,xmm8
  01036: 00 	movabs rax,0x8000000000000002
  01040:    	cmp    rdi,rax
  01043:    	je     0x107c
  01049:    	mov    rax,rdi
  0104c:    	sar    rax,0x3f
  01050:    	add    rax,0x2
  01054:    	and    rdi,0xfffffffffffffffc
  01058:    	or     rdi,rax
  0105b:    	rol    rdi,0x3d
  0105f:    	movq   xmm8,rdi
  01064:    	jmp    0x107c
  01069:    	call   0xffff0e5c
  0106e:    	test   rax,rax
  01071:    	je     0x37d32
  01077:    	movq   xmm8,xmm0
  0107c:    	mulsd  xmm5,xmm8
:00072 %8 = %8 - %6                         [Float][Float]
  01081:    	subsd  xmm5,xmm3
:00073 %9 = %3.call to_f()                  [Integer]
:00074 
  01085:    	mov    rdi,QWORD PTR [rbp-0x40]
  01089: 00 	test   rdi,0x1
  01090:    	jne    0x10ad
  01096: 00 	test   rdi,0x7
  0109d:    	jne    0x37d6b
  010a3:    	cmp    DWORD PTR [rdi+0x4],0x6
  010a7:    	jne    0x37d6b
  010ad: 26 	cmp    DWORD PTR [rip+0xffffffffffff274c],0x26        # 0xffff3800
  010b4:    	jne    0x37d6b
  010ba: 00 	mov    r9,0x0
  010c1:    	sub    rsp,0x30
  010c5:    	movq   QWORD PTR [rsp],xmm2
  010ca:    	movq   QWORD PTR [rsp+0x8],xmm3
  010d0:    	movq   QWORD PTR [rsp+0x10],xmm4
  010d6:    	movq   QWORD PTR [rsp+0x18],xmm5
  010dc:    	movq   QWORD PTR [rsp+0x20],xmm6
  010e2:    	movq   QWORD PTR [rsp+0x28],xmm7
  010e8:    	mov    rdx,rdi
  010eb:    	mov    rax,QWORD PTR [rbx]
  010ee:    	lea    rdi,[rsp-0x18]
  010f3:    	mov    QWORD PTR [rdi],rax
  010f6:    	mov    QWORD PTR [rbx],rdi
  010f9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01102:    	mov    QWORD PTR [rsp-0x38],rcx
  01107:    	lea    rcx,[rbp-0x78]
  0110b: 00 	mov    r8,0x0
  01112:    	call   0x37db1
  01117:    	lea    rdi,[rbp-0x8]
  0111b:    	mov    QWORD PTR [rbx],rdi
  0111e:    	movq   xmm2,QWORD PTR [rsp]
  01123:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01129:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0112f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01135:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0113b:    	movq   xmm7,QWORD PTR [rsp+0x28]
  01141:    	add    rsp,0x30
  01145: 76 	movabs r13,0x5576cd69a6a0
  0114f:    	test   rax,rax
  01152:    	je     0xffff0e23
  01158:    	mov    QWORD PTR [rbp-0x70],rax
:00076 %10 = %4.call to_f()                 [Integer]
:00077 
  0115c:    	mov    rdi,QWORD PTR [rbp-0x48]
  01160: 00 	test   rdi,0x1
  01167:    	jne    0x1184
  0116d: 00 	test   rdi,0x7
  01174:    	jne    0x37de3
  0117a:    	cmp    DWORD PTR [rdi+0x4],0x6
  0117e:    	jne    0x37de3
  01184: 26 	cmp    DWORD PTR [rip+0xffffffffffff2675],0x26        # 0xffff3800
  0118b:    	jne    0x37de3
  01191: 00 	mov    r9,0x0
  01198:    	sub    rsp,0x30
  0119c:    	movq   QWORD PTR [rsp],xmm2
  011a1:    	movq   QWORD PTR [rsp+0x8],xmm3
  011a7:    	movq   QWORD PTR [rsp+0x10],xmm4
  011ad:    	movq   QWORD PTR [rsp+0x18],xmm5
  011b3:    	movq   QWORD PTR [rsp+0x20],xmm7
  011b9:    	mov    rdx,rdi
  011bc:    	mov    rax,QWORD PTR [rbx]
  011bf:    	lea    rdi,[rsp-0x18]
  011c4:    	mov    QWORD PTR [rdi],rax
  011c7:    	mov    QWORD PTR [rbx],rdi
  011ca: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011d3:    	mov    QWORD PTR [rsp-0x38],rcx
  011d8:    	lea    rcx,[rbp-0x80]
  011dc: 00 	mov    r8,0x0
  011e3:    	call   0x37e29
  011e8:    	lea    rdi,[rbp-0x8]
  011ec:    	mov    QWORD PTR [rbx],rdi
  011ef:    	movq   xmm2,QWORD PTR [rsp]
  011f4:    	movq   xmm3,QWORD PTR [rsp+0x8]
  011fa:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01200:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01206:    	movq   xmm7,QWORD PTR [rsp+0x20]
  0120c:    	add    rsp,0x30
  01210: 76 	movabs r13,0x5576cd69a6d0
  0121a:    	test   rax,rax
  0121d:    	je     0xffff0e23
  01223:    	mov    QWORD PTR [rbp-0x78],rax
:00079 %9 = %9 * %10                        [Float][Float]
  01227:    	mov    rdi,QWORD PTR [rbp-0x70]
  0122b: 00 	test   rdi,0x1
  01232:    	jne    0x37e5b
  01238: 00 	test   rdi,0x2
  0123f:    	je     0x127b
  01245:    	xorps  xmm6,xmm6
  01248: 00 	movabs rax,0x8000000000000002
  01252:    	cmp    rdi,rax
  01255:    	je     0x128d
  0125b:    	mov    rax,rdi
  0125e:    	sar    rax,0x3f
  01262:    	add    rax,0x2
  01266:    	and    rdi,0xfffffffffffffffc
  0126a:    	or     rdi,rax
  0126d:    	rol    rdi,0x3d
  01271:    	movq   xmm6,rdi
  01276:    	jmp    0x128d
  0127b:    	call   0xffff0e5c
  01280:    	test   rax,rax
  01283:    	je     0x37e5b
  01289:    	movq   xmm6,xmm0
  0128d:    	mov    rdi,QWORD PTR [rbp-0x78]
  01291: 00 	test   rdi,0x1
  01298:    	jne    0x37ea1
  0129e: 00 	test   rdi,0x2
  012a5:    	je     0x12e2
  012ab:    	xorps  xmm8,xmm8
  012af: 00 	movabs rax,0x8000000000000002
  012b9:    	cmp    rdi,rax
  012bc:    	je     0x12f5
  012c2:    	mov    rax,rdi
  012c5:    	sar    rax,0x3f
  012c9:    	add    rax,0x2
  012cd:    	and    rdi,0xfffffffffffffffc
  012d1:    	or     rdi,rax
  012d4:    	rol    rdi,0x3d
  012d8:    	movq   xmm8,rdi
  012dd:    	jmp    0x12f5
  012e2:    	call   0xffff0e5c
  012e7:    	test   rax,rax
  012ea:    	je     0x37ea1
  012f0:    	movq   xmm8,xmm0
  012f5:    	mulsd  xmm6,xmm8
:00080 %6 = %8 / %9                         [Float][Float]
  012fa:    	movq   xmm3,xmm5
  012fe:    	movq   rax,xmm6
  01303:    	test   rax,rax
  01306:    	je     0xffff0e48
  0130c:    	divsd  xmm3,xmm6
:00081 %9 = const[Vec]                      [Vec]
  01310: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff24f1]        # 0xffff3808
  01317: 00 	cmp    rax,QWORD PTR [rip+0x1fa]        # 0x1518
  0131e:    	jne    0x37ee7
  01324: 00 	mov    rax,QWORD PTR [rip+0x1dd]        # 0x1508
  0132b:    	mov    QWORD PTR [rbp-0x70],rax
:00082 %10 = %6
:00083 %11 = %6
:00084 %12 = %6
:00085 %8 = %9.call new(%10; 3)             [#<Class:Vec>]
:00086 
  0132f:    	movq   xmm0,xmm3
  01333:    	call   0xffff0f4f
  01338:    	mov    QWORD PTR [rbp-0x78],rax
  0133c:    	movq   xmm0,xmm3
  01340:    	call   0xffff0f4f
  01345:    	mov    QWORD PTR [rbp-0x80],rax
  01349:    	movq   xmm0,xmm3
  0134d:    	call   0xffff0f4f
  01352: ff 	mov    QWORD PTR [rbp-0x88],rax
  01359:    	mov    rdi,QWORD PTR [rbp-0x70]
  0135d: 00 	test   rdi,0x7
  01364:    	jne    0x37f7d
  0136a:    	cmp    DWORD PTR [rdi+0x4],0x26
  0136e:    	jne    0x37f7d
  01374: 26 	cmp    DWORD PTR [rip+0xffffffffffff2485],0x26        # 0xffff3800
  0137b:    	jne    0x37f7d
  01381: 00 	mov    r9,0x0
  01388:    	sub    rsp,0x10
  0138c:    	movq   QWORD PTR [rsp],xmm2
  01391:    	movq   QWORD PTR [rsp+0x8],xmm3
  01397:    	mov    rdx,rdi
  0139a:    	mov    rax,QWORD PTR [rbx]
  0139d:    	lea    rdi,[rsp-0x18]
  013a2:    	mov    QWORD PTR [rdi],rax
  013a5:    	mov    QWORD PTR [rbx],rdi
  013a8: 00 	mov    QWORD PTR [rsp-0x20],0x0
  013b1:    	mov    QWORD PTR [rsp-0x38],rcx
  013b6:    	lea    rcx,[rbp-0x78]
  013ba: 00 	mov    r8,0x3
  013c1:    	call   0x37fa6
  013c6:    	lea    rdi,[rbp-0x8]
  013ca:    	mov    QWORD PTR [rbx],rdi
  013cd:    	movq   xmm2,QWORD PTR [rsp]
  013d2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  013d8:    	add    rsp,0x10
  013dc: 76 	movabs r13,0x5576cd69a760
  013e6:    	test   rax,rax
  013e9:    	je     0xffff0e23
  013ef:    	mov    QWORD PTR [rbp-0x68],rax
:00088 ret %8
  013f3:    	mov    rax,QWORD PTR [rbp-0x68]
  013f7:    	leave  
  013f8:    	ret    
==> start whole compile: otherBasis FuncId(53) self_class:Scene start:[00000] bytecode:0x5576cd6b0820
<== finished compile. elapsed:442.2µs
offset:Pos(67384) code: 7556 bytes  data: 324 bytes
  00000:    	push   rbp
  00001:    	mov    rbp,rsp
  00004:    	sub    rsp,0x70
  00008: 00 	mov    rax,0x4
  0000f:    	mov    QWORD PTR [rbp-0x40],rax
  00013:    	mov    QWORD PTR [rbp-0x48],rax
  00017:    	mov    QWORD PTR [rbp-0x50],rax
  0001b:    	mov    QWORD PTR [rbp-0x58],rax
  0001f:    	mov    QWORD PTR [rbp-0x60],rax
  00023:    	mov    QWORD PTR [rbp-0x68],rax
  00027:    	mov    rdi,QWORD PTR [rbp-0x28]
  0002b: 00 	test   rdi,0x7
  00032:    	jne    0x36ab8
  00038:    	cmp    DWORD PTR [rdi+0x4],0x2f
  0003c:    	jne    0x36ab8
:00000 %3 = 2: i32
  00042: 00 	mov    QWORD PTR [rbp-0x40],0x5
:00001 %5 = const[Vec]                      [Vec]
  0004a: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2297]        # 0xffff22e8
  00051: 00 	cmp    rax,QWORD PTR [rip+0x1d40]        # 0x1d98
  00058:    	jne    0x36ac7
  0005e: 00 	mov    rax,QWORD PTR [rip+0x1d23]        # 0x1d88
  00065:    	mov    QWORD PTR [rbp-0x50],rax
:00002 %6 = %2.call x()                     [Vec]
:00003 
  00069:    	mov    rdi,QWORD PTR [rbp-0x38]
  0006d: 00 	test   rdi,0x7
  00074:    	jne    0x36b0d
  0007a:    	cmp    DWORD PTR [rdi+0x4],0x25
  0007e:    	jne    0x36b0d
  00084: 26 	cmp    DWORD PTR [rip+0xffffffffffff2255],0x26        # 0xffff22e0
  0008b:    	jne    0x36b0d
  00091:    	mov    esi,DWORD PTR [rip+0x1d0d]        # 0x1da4
  00097:    	cmp    esi,0xffffffff
  0009a:    	je     0x36b1c
  000a0:    	xor    rax,rax
  000a3:    	mov    ax,WORD PTR [rdi+0x2]
  000a7:    	cmp    rax,0x3
  000ab:    	jne    0xc4
  000b1:    	cmp    esi,0x6
  000b4:    	jge    0xc4
  000ba:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  000bf:    	jmp    0xd0
  000c4: 76 	movabs rax,0x5576cccb62a0
  000ce:    	call   rax
  000d0:    	mov    QWORD PTR [rbp-0x58],rax
:00005 %7 = %2.call y()                     [Vec]
:00006 
  000d4:    	mov    rdi,QWORD PTR [rbp-0x38]
  000d8: 00 	test   rdi,0x7
  000df:    	jne    0x36b45
  000e5:    	cmp    DWORD PTR [rdi+0x4],0x25
  000e9:    	jne    0x36b45
  000ef: 26 	cmp    DWORD PTR [rip+0xffffffffffff21ea],0x26        # 0xffff22e0
  000f6:    	jne    0x36b45
  000fc:    	mov    esi,DWORD PTR [rip+0x1caa]        # 0x1dac
  00102:    	cmp    esi,0xffffffff
  00105:    	je     0x36b54
  0010b:    	xor    rax,rax
  0010e:    	mov    ax,WORD PTR [rdi+0x2]
  00112:    	cmp    rax,0x3
  00116:    	jne    0x12f
  0011c:    	cmp    esi,0x6
  0011f:    	jge    0x12f
  00125:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  0012a:    	jmp    0x13b
  0012f: 76 	movabs rax,0x5576cccb62a0
  00139:    	call   rax
  0013b:    	mov    QWORD PTR [rbp-0x60],rax
:00008 %8 = %2.call z()                     [Vec]
:00009 
  0013f:    	mov    rdi,QWORD PTR [rbp-0x38]
  00143: 00 	test   rdi,0x7
  0014a:    	jne    0x36b7d
  00150:    	cmp    DWORD PTR [rdi+0x4],0x25
  00154:    	jne    0x36b7d
  0015a: 26 	cmp    DWORD PTR [rip+0xffffffffffff217f],0x26        # 0xffff22e0
  00161:    	jne    0x36b7d
  00167:    	mov    esi,DWORD PTR [rip+0x1c47]        # 0x1db4
  0016d:    	cmp    esi,0xffffffff
  00170:    	je     0x36b8c
  00176:    	xor    rax,rax
  00179:    	mov    ax,WORD PTR [rdi+0x2]
  0017d:    	cmp    rax,0x3
  00181:    	jne    0x19a
  00187:    	cmp    esi,0x6
  0018a:    	jge    0x19a
  00190:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00195:    	jmp    0x1a6
  0019a: 76 	movabs rax,0x5576cccb62a0
  001a4:    	call   rax
  001a6:    	mov    QWORD PTR [rbp-0x68],rax
:00011 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00012 
  001aa:    	mov    rdi,QWORD PTR [rbp-0x50]
  001ae: 00 	test   rdi,0x7
  001b5:    	jne    0x36bb5
  001bb:    	cmp    DWORD PTR [rdi+0x4],0x26
  001bf:    	jne    0x36bb5
  001c5: 26 	cmp    DWORD PTR [rip+0xffffffffffff2114],0x26        # 0xffff22e0
  001cc:    	jne    0x36bb5
  001d2: 00 	mov    r9,0x0
  001d9:    	mov    rdx,rdi
  001dc:    	mov    rax,QWORD PTR [rbx]
  001df:    	lea    rdi,[rsp-0x18]
  001e4:    	mov    QWORD PTR [rdi],rax
  001e7:    	mov    QWORD PTR [rbx],rdi
  001ea: 00 	mov    QWORD PTR [rsp-0x20],0x0
  001f3:    	mov    QWORD PTR [rsp-0x38],rcx
  001f8:    	lea    rcx,[rbp-0x58]
  001fc: 00 	mov    r8,0x3
  00203:    	call   0x36bc4
  00208:    	lea    rdi,[rbp-0x8]
  0020c:    	mov    QWORD PTR [rbx],rdi
  0020f: 76 	movabs r13,0x5576cd6b08f0
  00219:    	test   rax,rax
  0021c:    	je     0xfffef903
  00222:    	mov    QWORD PTR [rbp-0x48],rax
:00014 %1.[%3] = %4
  00226:    	mov    rdx,QWORD PTR [rbp-0x30]
  0022a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0022e:    	mov    r8,QWORD PTR [rbp-0x48]
  00232:    	mov    rdi,rbx
  00235:    	mov    rsi,r12
  00238: 76 	movabs rax,0x5576cccd6210
  00242:    	call   rax
  00244: 76 	movabs r13,0x5576cd6b0910
  0024e:    	test   rax,rax
  00251:    	je     0xfffef903
:00015 %3 = 1: i32
  00257: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00016 %5 = const[Vec]                      [Vec]
  0025f: ff 	mov    rax,QWORD PTR [rip+0xffffffffffff2082]        # 0xffff22e8
  00266: 00 	cmp    rax,QWORD PTR [rip+0x1b5b]        # 0x1dc8
  0026d:    	jne    0x36bf6
  00273: 00 	mov    rax,QWORD PTR [rip+0x1b3e]        # 0x1db8
  0027a:    	mov    QWORD PTR [rbp-0x50],rax
:00017 %6 = literal[0.0]
  0027e: 00 	movq   xmm2,QWORD PTR [rip+0x1b52]        # 0x1dd8
:00018 %7 = literal[0.0]
  00286: 00 	movq   xmm3,QWORD PTR [rip+0x1b5a]        # 0x1de8
:00019 %8 = literal[0.0]
  0028e: 00 	movq   xmm4,QWORD PTR [rip+0x1b62]        # 0x1df8
:00020 %4 = %5.call new(%6; 3)              [#<Class:Vec>]
:00021 
  00296:    	movq   xmm0,xmm2
  0029a:    	call   0xfffefa2f
  0029f:    	mov    QWORD PTR [rbp-0x58],rax
  002a3:    	movq   xmm0,xmm3
  002a7:    	call   0xfffefa2f
  002ac:    	mov    QWORD PTR [rbp-0x60],rax
  002b0:    	movq   xmm0,xmm4
  002b4:    	call   0xfffefa2f
  002b9:    	mov    QWORD PTR [rbp-0x68],rax
  002bd:    	mov    rdi,QWORD PTR [rbp-0x50]
  002c1: 00 	test   rdi,0x7
  002c8:    	jne    0x36c3c
  002ce:    	cmp    DWORD PTR [rdi+0x4],0x26
  002d2:    	jne    0x36c3c
  002d8: 26 	cmp    DWORD PTR [rip+0xffffffffffff2001],0x26        # 0xffff22e0
  002df:    	jne    0x36c3c
  002e5: 00 	mov    r9,0x0
  002ec:    	sub    rsp,0x20
  002f0:    	movq   QWORD PTR [rsp],xmm2
  002f5:    	movq   QWORD PTR [rsp+0x8],xmm3
  002fb:    	movq   QWORD PTR [rsp+0x10],xmm4
  00301:    	mov    rdx,rdi
  00304:    	mov    rax,QWORD PTR [rbx]
  00307:    	lea    rdi,[rsp-0x18]
  0030c:    	mov    QWORD PTR [rdi],rax
  0030f:    	mov    QWORD PTR [rbx],rdi
  00312: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0031b:    	mov    QWORD PTR [rsp-0x38],rcx
  00320:    	lea    rcx,[rbp-0x58]
  00324: 00 	mov    r8,0x3
  0032b:    	call   0x36c4b
  00330:    	lea    rdi,[rbp-0x8]
  00334:    	mov    QWORD PTR [rbx],rdi
  00337:    	movq   xmm2,QWORD PTR [rsp]
  0033c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00342:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00348:    	add    rsp,0x20
  0034c: 76 	movabs r13,0x5576cd6b0980
  00356:    	test   rax,rax
  00359:    	je     0xfffef903
  0035f:    	mov    QWORD PTR [rbp-0x48],rax
:00023 %1.[%3] = %4
  00363:    	sub    rsp,0x20
  00367:    	movq   QWORD PTR [rsp],xmm2
  0036c:    	movq   QWORD PTR [rsp+0x8],xmm3
  00372:    	movq   QWORD PTR [rsp+0x10],xmm4
  00378:    	mov    rdx,QWORD PTR [rbp-0x30]
  0037c:    	mov    rcx,QWORD PTR [rbp-0x40]
  00380:    	mov    r8,QWORD PTR [rbp-0x48]
  00384:    	mov    rdi,rbx
  00387:    	mov    rsi,r12
  0038a: 76 	movabs rax,0x5576cccd6210
  00394:    	call   rax
  00396:    	movq   xmm2,QWORD PTR [rsp]
  0039b:    	movq   xmm3,QWORD PTR [rsp+0x8]
  003a1:    	movq   xmm4,QWORD PTR [rsp+0x10]
  003a7:    	add    rsp,0x20
  003ab: 76 	movabs r13,0x5576cd6b09a0
  003b5:    	test   rax,rax
  003b8:    	je     0xfffef903
:00024 %4 = %2.call x()                     [Vec]
:00025 
  003be:    	mov    rdi,QWORD PTR [rbp-0x38]
  003c2: 00 	test   rdi,0x7
  003c9:    	jne    0x36c7d
  003cf:    	cmp    DWORD PTR [rdi+0x4],0x25
  003d3:    	jne    0x36c7d
  003d9: 26 	cmp    DWORD PTR [rip+0xffffffffffff1f00],0x26        # 0xffff22e0
  003e0:    	jne    0x36c7d
  003e6:    	mov    esi,DWORD PTR [rip+0x1a18]        # 0x1e04
  003ec:    	cmp    esi,0xffffffff
  003ef:    	je     0x36c8c
  003f5:    	xor    rax,rax
  003f8:    	mov    ax,WORD PTR [rdi+0x2]
  003fc:    	cmp    rax,0x3
  00400:    	jne    0x419
  00406:    	cmp    esi,0x6
  00409:    	jge    0x419
  0040f:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00414:    	jmp    0x44f
  00419:    	sub    rsp,0x20
  0041d:    	movq   QWORD PTR [rsp],xmm2
  00422:    	movq   QWORD PTR [rsp+0x8],xmm3
  00428:    	movq   QWORD PTR [rsp+0x10],xmm4
  0042e: 76 	movabs rax,0x5576cccb62a0
  00438:    	call   rax
  0043a:    	movq   xmm2,QWORD PTR [rsp]
  0043f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00445:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0044b:    	add    rsp,0x20
  0044f:    	mov    QWORD PTR [rbp-0x48],rax
:00027 %5 = literal[0.6]
  00453: 00 	movq   xmm5,QWORD PTR [rip+0x19ad]        # 0x1e08
:00028 %3 = %4 < %5                         [Float][Float]
  0045b:    	mov    rdi,QWORD PTR [rbp-0x48]
  0045f: 00 	test   rdi,0x1
  00466:    	jne    0x36cdf
  0046c: 00 	test   rdi,0x2
  00473:    	je     0x4af
  00479:    	xorps  xmm6,xmm6
  0047c: 00 	movabs rax,0x8000000000000002
  00486:    	cmp    rdi,rax
  00489:    	je     0x4c1
  0048f:    	mov    rax,rdi
  00492:    	sar    rax,0x3f
  00496:    	add    rax,0x2
  0049a:    	and    rdi,0xfffffffffffffffc
  0049e:    	or     rdi,rax
  004a1:    	rol    rdi,0x3d
  004a5:    	movq   xmm6,rdi
  004aa:    	jmp    0x4c1
  004af:    	call   0xfffef93c
  004b4:    	test   rax,rax
  004b7:    	je     0x36cdf
  004bd:    	movq   xmm6,xmm0
  004c1:    	xor    rax,rax
  004c4:    	ucomisd xmm6,xmm5
  004c8:    	setb   al
  004cc:    	shl    rax,0x3
  004d0:    	or     rax,0x14
  004d4:    	mov    QWORD PTR [rbp-0x40],rax
:00029 condnotbr %3 =>:00035
  004d8:    	mov    rax,QWORD PTR [rbp-0x40]
  004dc:    	or     rax,0x10
  004e0:    	cmp    rax,0x14
  004e4:    	je     0x36d92
:00030 %4 = %2.call x()                     [Vec]
:00031 
  004ea:    	mov    rdi,QWORD PTR [rbp-0x38]
  004ee: 00 	test   rdi,0x7
  004f5:    	jne    0x36cfb
  004fb:    	cmp    DWORD PTR [rdi+0x4],0x25
  004ff:    	jne    0x36cfb
  00505: 26 	cmp    DWORD PTR [rip+0xffffffffffff1dd4],0x26        # 0xffff22e0
  0050c:    	jne    0x36cfb
  00512:    	mov    esi,DWORD PTR [rip+0x18fc]        # 0x1e14
  00518:    	cmp    esi,0xffffffff
  0051b:    	je     0x36d17
  00521:    	xor    rax,rax
  00524:    	mov    ax,WORD PTR [rdi+0x2]
  00528:    	cmp    rax,0x3
  0052c:    	jne    0x545
  00532:    	cmp    esi,0x6
  00535:    	jge    0x545
  0053b:    	mov    rax,QWORD PTR [rdi+rsi*8+0x10]
  00540:    	jmp    0x587
  00545:    	sub    rsp,0x20
  00549:    	movq   QWORD PTR [rsp],xmm2
  0054e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00554:    	movq   QWORD PTR [rsp+0x10],xmm4
  0055a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00560: 76 	movabs rax,0x5576cccb62a0
  0056a:    	call   rax
  0056c:    	movq   xmm2,QWORD PTR [rsp]
  00571:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00577:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0057d:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00583:    	add    rsp,0x20
  00587:    	mov    QWORD PTR [rbp-0x48],rax
:00033 %5 = literal[-0.6]
  0058b: 00 	movq   xmm5,QWORD PTR [rip+0x1885]        # 0x1e18
:00034 %3 = %4 > %5                         [Float][Float]
  00593:    	mov    rdi,QWORD PTR [rbp-0x48]
  00597: 00 	test   rdi,0x1
  0059e:    	jne    0x36d76
  005a4: 00 	test   rdi,0x2
  005ab:    	je     0x5e7
  005b1:    	xorps  xmm6,xmm6
  005b4: 00 	movabs rax,0x8000000000000002
  005be:    	cmp    rdi,rax
  005c1:    	je     0x5f9
  005c7:    	mov    rax,rdi
  005ca:    	sar    rax,0x3f
  005ce:    	add    rax,0x2
  005d2:    	and    rdi,0xfffffffffffffffc
  005d6:    	or     rdi,rax
  005d9:    	rol    rdi,0x3d
  005dd:    	movq   xmm6,rdi
  005e2:    	jmp    0x5f9
  005e7:    	call   0xfffef93c
  005ec:    	test   rax,rax
  005ef:    	je     0x36d76
  005f5:    	movq   xmm6,xmm0
  005f9:    	xor    rax,rax
  005fc:    	ucomisd xmm6,xmm5
  00600:    	seta   al
  00604:    	shl    rax,0x3
  00608:    	or     rax,0x14
  0060c:    	mov    QWORD PTR [rbp-0x40],rax
  00610:    	jmp    0x36db8
:00035 condnotbr %3 =>:00043
  00615:    	mov    rax,QWORD PTR [rbp-0x40]
  00619:    	or     rax,0x10
  0061d:    	cmp    rax,0x14
  00621:    	je     0x780
:00036 %3 = 1: i32
  00627: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00037 %3 = %1.[%3]
  0062f:    	sub    rsp,0x30
  00633:    	movq   QWORD PTR [rsp],xmm2
  00638:    	movq   QWORD PTR [rsp+0x8],xmm3
  0063e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00644:    	movq   QWORD PTR [rsp+0x18],xmm5
  0064a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00650:    	mov    rdx,QWORD PTR [rbp-0x30]
  00654:    	mov    rcx,QWORD PTR [rbp-0x40]
  00658:    	mov    rdi,rbx
  0065b:    	mov    rsi,r12
  0065e: 76 	movabs rax,0x5576cccd60e0
  00668:    	call   rax
  0066a:    	movq   xmm2,QWORD PTR [rsp]
  0066f:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00675:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0067b:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00681:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00687:    	add    rsp,0x30
  0068b: 76 	movabs r13,0x5576cd6b0a80
  00695:    	test   rax,rax
  00698:    	je     0xfffef903
  0069e:    	mov    QWORD PTR [rbp-0x40],rax
:00038 %4 = literal[1.0]
  006a2: 00 	movq   xmm6,QWORD PTR [rip+0x177e]        # 0x1e28
:00039 _ = %3.call x=(%4; 1)                [Vec]
:00040 
  006aa:    	movq   xmm0,xmm6
  006ae:    	call   0xfffefa2f
  006b3:    	mov    QWORD PTR [rbp-0x48],rax
  006b7:    	mov    rdi,QWORD PTR [rbp-0x40]
  006bb: 00 	test   rdi,0x7
  006c2:    	jne    0x36dde
  006c8:    	cmp    DWORD PTR [rdi+0x4],0x25
  006cc:    	jne    0x36dde
  006d2: 26 	cmp    DWORD PTR [rip+0xffffffffffff1c07],0x26        # 0xffff22e0
  006d9:    	jne    0x36dde
  006df:    	mov    esi,DWORD PTR [rip+0x174f]        # 0x1e34
  006e5:    	cmp    esi,0xffffffff
  006e8:    	je     0x36dfa
  006ee:    	xor    rax,rax
  006f1:    	mov    ax,WORD PTR [rdi+0x2]
  006f5:    	cmp    rax,0x3
  006f9:    	jne    0x716
  006ff:    	cmp    esi,0x6
  00702:    	jge    0x716
  00708:    	mov    rax,QWORD PTR [rbp-0x48]
  0070c:    	mov    QWORD PTR [rdi+rsi*8+0x10],rax
  00711:    	jmp    0x77b
  00716:    	sub    rsp,0x30
  0071a:    	movq   QWORD PTR [rsp],xmm2
  0071f:    	movq   QWORD PTR [rsp+0x8],xmm3
  00725:    	movq   QWORD PTR [rsp+0x10],xmm4
  0072b:    	movq   QWORD PTR [rsp+0x18],xmm5
  00731:    	movq   QWORD PTR [rsp+0x20],xmm6
  00737:    	mov    rdx,QWORD PTR [rbp-0x48]
  0073b: 76 	movabs rax,0x5576cccb6510
  00745:    	call   rax
  00747:    	movq   xmm2,QWORD PTR [rsp]
  0074c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00752:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00758:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0075e:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00764:    	add    rsp,0x30
  00768: 76 	movabs r13,0x5576cd6b0ab0
  00772:    	test   rax,rax
  00775:    	je     0xfffef903
:00042 br =>:00087
  0077b:    	jmp    0x37385
:00043 %4 = %2.call y()                     [<INVALID>]
:00044 
  00780:    	sub    rsp,0x20
  00784:    	movq   QWORD PTR [rsp],xmm2
  00789:    	movq   QWORD PTR [rsp+0x8],xmm3
  0078f:    	movq   QWORD PTR [rsp+0x10],xmm4
  00795:    	movq   QWORD PTR [rsp+0x18],xmm5
  0079b:    	mov    rdi,QWORD PTR [rbp-0x38]
  0079f: 76 	movabs rax,0x5576ccd01d00
  007a9:    	call   rax
  007ab:    	mov    r15d,eax
  007ae: 00 	cmp    r15d,DWORD PTR [rip+0x1687]        # 0x1e3c
  007b5:    	jne    0x36e6c
  007bb:    	mov    eax,DWORD PTR [rip+0xffffffffffff1b1f]        # 0xffff22e0
  007c1:    	cmp    DWORD PTR [rip+0x1671],eax        # 0x1e38
  007c7:    	jne    0x36e6c
  007cd:    	mov    rax,QWORD PTR [rbx]
  007d0:    	lea    rdi,[rsp-0x18]
  007d5:    	mov    QWORD PTR [rdi],rax
  007d8:    	mov    QWORD PTR [rbx],rdi
  007db: 00 	mov    QWORD PTR [rsp-0x20],0x0
  007e4:    	mov    QWORD PTR [rsp-0x38],rcx
  007e9:    	mov    rax,QWORD PTR [rbp-0x38]
  007ed:    	mov    QWORD PTR [rsp-0x38],rax
  007f2: 00 	mov    rdi,0x0
  007f9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00802: 00 	movabs rax,0x0
  0080c:    	mov    QWORD PTR [rsp-0x28],rax
  00811: 00 	movabs r13,0x0
  0081b:    	call   0xfffef8c8
  00820:    	lea    rdi,[rbp-0x8]
  00824:    	mov    QWORD PTR [rbx],rdi
  00827:    	movq   xmm2,QWORD PTR [rsp]
  0082c:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00832:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00838:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0083e:    	add    rsp,0x20
  00842:    	test   rax,rax
  00845:    	je     0x36ed8
  0084b:    	mov    QWORD PTR [rbp-0x48],rax
:00046 %5 = literal[0.6]
  0084f: 00 	movq   xmm5,QWORD PTR [rip+0x15f1]        # 0x1e48
:00047 %3 = %4 < %5                         [Integer][Integer]
  00857:    	movq   xmm0,xmm5
  0085b:    	call   0xfffefa2f
  00860:    	mov    QWORD PTR [rbp-0x50],rax
  00864:    	mov    rdi,QWORD PTR [rbp-0x48]
  00868:    	mov    rsi,QWORD PTR [rbp-0x50]
  0086c: 00 	test   rdi,0x1
  00873:    	je     0x36ee7
  00879: 00 	test   rsi,0x1
  00880:    	je     0x36ee7
  00886:    	xor    rax,rax
  00889:    	cmp    rdi,rsi
  0088c:    	setl   al
  00890:    	shl    rax,0x3
  00894:    	or     rax,0x14
  00898:    	mov    QWORD PTR [rbp-0x40],rax
:00048 condnotbr %3 =>:00054
  0089c:    	mov    rax,QWORD PTR [rbp-0x40]
  008a0:    	or     rax,0x10
  008a4:    	cmp    rax,0x14
  008a8:    	je     0x36ff0
:00049 %4 = %2.call y()                     [<INVALID>]
:00050 
  008ae:    	sub    rsp,0x20
  008b2:    	movq   QWORD PTR [rsp],xmm2
  008b7:    	movq   QWORD PTR [rsp+0x8],xmm3
  008bd:    	movq   QWORD PTR [rsp+0x10],xmm4
  008c3:    	movq   QWORD PTR [rsp+0x18],xmm5
  008c9:    	mov    rdi,QWORD PTR [rbp-0x38]
  008cd: 76 	movabs rax,0x5576ccd01d00
  008d7:    	call   rax
  008d9:    	mov    r15d,eax
  008dc: 00 	cmp    r15d,DWORD PTR [rip+0x1571]        # 0x1e54
  008e3:    	jne    0x36f2e
  008e9:    	mov    eax,DWORD PTR [rip+0xffffffffffff19f1]        # 0xffff22e0
  008ef:    	cmp    DWORD PTR [rip+0x155b],eax        # 0x1e50
  008f5:    	jne    0x36f2e
  008fb:    	mov    rax,QWORD PTR [rbx]
  008fe:    	lea    rdi,[rsp-0x18]
  00903:    	mov    QWORD PTR [rdi],rax
  00906:    	mov    QWORD PTR [rbx],rdi
  00909: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00912:    	mov    QWORD PTR [rsp-0x38],rcx
  00917:    	mov    rax,QWORD PTR [rbp-0x38]
  0091b:    	mov    QWORD PTR [rsp-0x38],rax
  00920: 00 	mov    rdi,0x0
  00927: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00930: 00 	movabs rax,0x0
  0093a:    	mov    QWORD PTR [rsp-0x28],rax
  0093f: 00 	movabs r13,0x0
  00949:    	call   0xfffef8c8
  0094e:    	lea    rdi,[rbp-0x8]
  00952:    	mov    QWORD PTR [rbx],rdi
  00955:    	movq   xmm2,QWORD PTR [rsp]
  0095a:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00960:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00966:    	movq   xmm5,QWORD PTR [rsp+0x18]
  0096c:    	add    rsp,0x20
  00970:    	test   rax,rax
  00973:    	je     0x36f9a
  00979:    	mov    QWORD PTR [rbp-0x48],rax
:00052 %5 = literal[-0.6]
  0097d: 00 	movq   xmm5,QWORD PTR [rip+0x14d3]        # 0x1e58
:00053 %3 = %4 > %5                         [Integer][Integer]
  00985:    	movq   xmm0,xmm5
  00989:    	call   0xfffefa2f
  0098e:    	mov    QWORD PTR [rbp-0x50],rax
  00992:    	mov    rdi,QWORD PTR [rbp-0x48]
  00996:    	mov    rsi,QWORD PTR [rbp-0x50]
  0099a: 00 	test   rdi,0x1
  009a1:    	je     0x36fa9
  009a7: 00 	test   rsi,0x1
  009ae:    	je     0x36fa9
  009b4:    	xor    rax,rax
  009b7:    	cmp    rdi,rsi
  009ba:    	setg   al
  009be:    	shl    rax,0x3
  009c2:    	or     rax,0x14
  009c6:    	mov    QWORD PTR [rbp-0x40],rax
  009ca:    	jmp    0x37009
:00054 condnotbr %3 =>:00062
  009cf:    	mov    rax,QWORD PTR [rbp-0x40]
  009d3:    	or     rax,0x10
  009d7:    	cmp    rax,0x14
  009db:    	je     0xb4a
:00055 %3 = 1: i32
  009e1: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00056 %3 = %1.[%3]
  009e9:    	sub    rsp,0x20
  009ed:    	movq   QWORD PTR [rsp],xmm2
  009f2:    	movq   QWORD PTR [rsp+0x8],xmm3
  009f8:    	movq   QWORD PTR [rsp+0x10],xmm4
  009fe:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a04:    	mov    rdx,QWORD PTR [rbp-0x30]
  00a08:    	mov    rcx,QWORD PTR [rbp-0x40]
  00a0c:    	mov    rdi,rbx
  00a0f:    	mov    rsi,r12
  00a12: 76 	movabs rax,0x5576cccd60e0
  00a1c:    	call   rax
  00a1e:    	movq   xmm2,QWORD PTR [rsp]
  00a23:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00a29:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00a2f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00a35:    	add    rsp,0x20
  00a39: 76 	movabs r13,0x5576cd6b0bb0
  00a43:    	test   rax,rax
  00a46:    	je     0xfffef903
  00a4c:    	mov    QWORD PTR [rbp-0x40],rax
:00057 %4 = literal[1.0]
  00a50: 00 	movq   xmm6,QWORD PTR [rip+0x1410]        # 0x1e68
:00058 _ = %3.call y=(%4; 1)                [<INVALID>]
:00059 
  00a58:    	movq   xmm0,xmm6
  00a5c:    	call   0xfffefa2f
  00a61:    	mov    QWORD PTR [rbp-0x48],rax
  00a65:    	sub    rsp,0x30
  00a69:    	movq   QWORD PTR [rsp],xmm2
  00a6e:    	movq   QWORD PTR [rsp+0x8],xmm3
  00a74:    	movq   QWORD PTR [rsp+0x10],xmm4
  00a7a:    	movq   QWORD PTR [rsp+0x18],xmm5
  00a80:    	movq   QWORD PTR [rsp+0x20],xmm6
  00a86:    	mov    rdi,QWORD PTR [rbp-0x40]
  00a8a: 76 	movabs rax,0x5576ccd01d00
  00a94:    	call   rax
  00a96:    	mov    r15d,eax
  00a99: 00 	cmp    r15d,DWORD PTR [rip+0x13d4]        # 0x1e74
  00aa0:    	jne    0x37022
  00aa6:    	mov    eax,DWORD PTR [rip+0xffffffffffff1834]        # 0xffff22e0
  00aac:    	cmp    DWORD PTR [rip+0x13be],eax        # 0x1e70
  00ab2:    	jne    0x37022
  00ab8:    	mov    rax,QWORD PTR [rbx]
  00abb:    	lea    rdi,[rsp-0x18]
  00ac0:    	mov    QWORD PTR [rdi],rax
  00ac3:    	mov    QWORD PTR [rbx],rdi
  00ac6: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00acf:    	mov    QWORD PTR [rsp-0x38],rcx
  00ad4:    	mov    rax,QWORD PTR [rbp-0x40]
  00ad8:    	mov    QWORD PTR [rsp-0x38],rax
  00add: 00 	mov    rdi,0x1
  00ae4:    	mov    rax,QWORD PTR [rbp-0x48]
  00ae8:    	mov    QWORD PTR [rsp-0x40],rax
  00aed: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00af6: 00 	movabs rax,0x0
  00b00:    	mov    QWORD PTR [rsp-0x28],rax
  00b05: 00 	movabs r13,0x0
  00b0f:    	call   0xfffef8c8
  00b14:    	lea    rdi,[rbp-0x8]
  00b18:    	mov    QWORD PTR [rbx],rdi
  00b1b:    	movq   xmm2,QWORD PTR [rsp]
  00b20:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00b26:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00b2c:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00b32:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00b38:    	add    rsp,0x30
  00b3c:    	test   rax,rax
  00b3f:    	je     0x3708e
:00061 br =>:00087
  00b45:    	jmp    0x373ab
:00062 %4 = %2.call z()                     [<INVALID>]
:00063 
  00b4a:    	sub    rsp,0x20
  00b4e:    	movq   QWORD PTR [rsp],xmm2
  00b53:    	movq   QWORD PTR [rsp+0x8],xmm3
  00b59:    	movq   QWORD PTR [rsp+0x10],xmm4
  00b5f:    	movq   QWORD PTR [rsp+0x18],xmm5
  00b65:    	mov    rdi,QWORD PTR [rbp-0x38]
  00b69: 76 	movabs rax,0x5576ccd01d00
  00b73:    	call   rax
  00b75:    	mov    r15d,eax
  00b78: 00 	cmp    r15d,DWORD PTR [rip+0x12fd]        # 0x1e7c
  00b7f:    	jne    0x3709d
  00b85:    	mov    eax,DWORD PTR [rip+0xffffffffffff1755]        # 0xffff22e0
  00b8b:    	cmp    DWORD PTR [rip+0x12e7],eax        # 0x1e78
  00b91:    	jne    0x3709d
  00b97:    	mov    rax,QWORD PTR [rbx]
  00b9a:    	lea    rdi,[rsp-0x18]
  00b9f:    	mov    QWORD PTR [rdi],rax
  00ba2:    	mov    QWORD PTR [rbx],rdi
  00ba5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00bae:    	mov    QWORD PTR [rsp-0x38],rcx
  00bb3:    	mov    rax,QWORD PTR [rbp-0x38]
  00bb7:    	mov    QWORD PTR [rsp-0x38],rax
  00bbc: 00 	mov    rdi,0x0
  00bc3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00bcc: 00 	movabs rax,0x0
  00bd6:    	mov    QWORD PTR [rsp-0x28],rax
  00bdb: 00 	movabs r13,0x0
  00be5:    	call   0xfffef8c8
  00bea:    	lea    rdi,[rbp-0x8]
  00bee:    	mov    QWORD PTR [rbx],rdi
  00bf1:    	movq   xmm2,QWORD PTR [rsp]
  00bf6:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00bfc:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00c02:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00c08:    	add    rsp,0x20
  00c0c:    	test   rax,rax
  00c0f:    	je     0x37109
  00c15:    	mov    QWORD PTR [rbp-0x48],rax
:00065 %5 = literal[0.6]
  00c19: 00 	movq   xmm5,QWORD PTR [rip+0x1267]        # 0x1e88
:00066 %3 = %4 < %5                         [Integer][Integer]
  00c21:    	movq   xmm0,xmm5
  00c25:    	call   0xfffefa2f
  00c2a:    	mov    QWORD PTR [rbp-0x50],rax
  00c2e:    	mov    rdi,QWORD PTR [rbp-0x48]
  00c32:    	mov    rsi,QWORD PTR [rbp-0x50]
  00c36: 00 	test   rdi,0x1
  00c3d:    	je     0x37118
  00c43: 00 	test   rsi,0x1
  00c4a:    	je     0x37118
  00c50:    	xor    rax,rax
  00c53:    	cmp    rdi,rsi
  00c56:    	setl   al
  00c5a:    	shl    rax,0x3
  00c5e:    	or     rax,0x14
  00c62:    	mov    QWORD PTR [rbp-0x40],rax
:00067 condnotbr %3 =>:00073
  00c66:    	mov    rax,QWORD PTR [rbp-0x40]
  00c6a:    	or     rax,0x10
  00c6e:    	cmp    rax,0x14
  00c72:    	je     0x37221
:00068 %4 = %2.call z()                     [<INVALID>]
:00069 
  00c78:    	sub    rsp,0x20
  00c7c:    	movq   QWORD PTR [rsp],xmm2
  00c81:    	movq   QWORD PTR [rsp+0x8],xmm3
  00c87:    	movq   QWORD PTR [rsp+0x10],xmm4
  00c8d:    	movq   QWORD PTR [rsp+0x18],xmm5
  00c93:    	mov    rdi,QWORD PTR [rbp-0x38]
  00c97: 76 	movabs rax,0x5576ccd01d00
  00ca1:    	call   rax
  00ca3:    	mov    r15d,eax
  00ca6: 00 	cmp    r15d,DWORD PTR [rip+0x11e7]        # 0x1e94
  00cad:    	jne    0x3715f
  00cb3:    	mov    eax,DWORD PTR [rip+0xffffffffffff1627]        # 0xffff22e0
  00cb9:    	cmp    DWORD PTR [rip+0x11d1],eax        # 0x1e90
  00cbf:    	jne    0x3715f
  00cc5:    	mov    rax,QWORD PTR [rbx]
  00cc8:    	lea    rdi,[rsp-0x18]
  00ccd:    	mov    QWORD PTR [rdi],rax
  00cd0:    	mov    QWORD PTR [rbx],rdi
  00cd3: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00cdc:    	mov    QWORD PTR [rsp-0x38],rcx
  00ce1:    	mov    rax,QWORD PTR [rbp-0x38]
  00ce5:    	mov    QWORD PTR [rsp-0x38],rax
  00cea: 00 	mov    rdi,0x0
  00cf1: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00cfa: 00 	movabs rax,0x0
  00d04:    	mov    QWORD PTR [rsp-0x28],rax
  00d09: 00 	movabs r13,0x0
  00d13:    	call   0xfffef8c8
  00d18:    	lea    rdi,[rbp-0x8]
  00d1c:    	mov    QWORD PTR [rbx],rdi
  00d1f:    	movq   xmm2,QWORD PTR [rsp]
  00d24:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00d2a:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00d30:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00d36:    	add    rsp,0x20
  00d3a:    	test   rax,rax
  00d3d:    	je     0x371cb
  00d43:    	mov    QWORD PTR [rbp-0x48],rax
:00071 %5 = literal[-0.6]
  00d47: 00 	movq   xmm5,QWORD PTR [rip+0x1149]        # 0x1e98
:00072 %3 = %4 > %5                         [Integer][Integer]
  00d4f:    	movq   xmm0,xmm5
  00d53:    	call   0xfffefa2f
  00d58:    	mov    QWORD PTR [rbp-0x50],rax
  00d5c:    	mov    rdi,QWORD PTR [rbp-0x48]
  00d60:    	mov    rsi,QWORD PTR [rbp-0x50]
  00d64: 00 	test   rdi,0x1
  00d6b:    	je     0x371da
  00d71: 00 	test   rsi,0x1
  00d78:    	je     0x371da
  00d7e:    	xor    rax,rax
  00d81:    	cmp    rdi,rsi
  00d84:    	setg   al
  00d88:    	shl    rax,0x3
  00d8c:    	or     rax,0x14
  00d90:    	mov    QWORD PTR [rbp-0x40],rax
  00d94:    	jmp    0x3723a
:00073 condnotbr %3 =>:00081
  00d99:    	mov    rax,QWORD PTR [rbp-0x40]
  00d9d:    	or     rax,0x10
  00da1:    	cmp    rax,0x14
  00da5:    	je     0xf14
:00074 %3 = 1: i32
  00dab: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00075 %3 = %1.[%3]
  00db3:    	sub    rsp,0x20
  00db7:    	movq   QWORD PTR [rsp],xmm2
  00dbc:    	movq   QWORD PTR [rsp+0x8],xmm3
  00dc2:    	movq   QWORD PTR [rsp+0x10],xmm4
  00dc8:    	movq   QWORD PTR [rsp+0x18],xmm5
  00dce:    	mov    rdx,QWORD PTR [rbp-0x30]
  00dd2:    	mov    rcx,QWORD PTR [rbp-0x40]
  00dd6:    	mov    rdi,rbx
  00dd9:    	mov    rsi,r12
  00ddc: 76 	movabs rax,0x5576cccd60e0
  00de6:    	call   rax
  00de8:    	movq   xmm2,QWORD PTR [rsp]
  00ded:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00df3:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00df9:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00dff:    	add    rsp,0x20
  00e03: 76 	movabs r13,0x5576cd6b0ce0
  00e0d:    	test   rax,rax
  00e10:    	je     0xfffef903
  00e16:    	mov    QWORD PTR [rbp-0x40],rax
:00076 %4 = literal[1.0]
  00e1a: 00 	movq   xmm6,QWORD PTR [rip+0x1086]        # 0x1ea8
:00077 _ = %3.call z=(%4; 1)                [<INVALID>]
:00078 
  00e22:    	movq   xmm0,xmm6
  00e26:    	call   0xfffefa2f
  00e2b:    	mov    QWORD PTR [rbp-0x48],rax
  00e2f:    	sub    rsp,0x30
  00e33:    	movq   QWORD PTR [rsp],xmm2
  00e38:    	movq   QWORD PTR [rsp+0x8],xmm3
  00e3e:    	movq   QWORD PTR [rsp+0x10],xmm4
  00e44:    	movq   QWORD PTR [rsp+0x18],xmm5
  00e4a:    	movq   QWORD PTR [rsp+0x20],xmm6
  00e50:    	mov    rdi,QWORD PTR [rbp-0x40]
  00e54: 76 	movabs rax,0x5576ccd01d00
  00e5e:    	call   rax
  00e60:    	mov    r15d,eax
  00e63: 00 	cmp    r15d,DWORD PTR [rip+0x104a]        # 0x1eb4
  00e6a:    	jne    0x37253
  00e70:    	mov    eax,DWORD PTR [rip+0xffffffffffff146a]        # 0xffff22e0
  00e76:    	cmp    DWORD PTR [rip+0x1034],eax        # 0x1eb0
  00e7c:    	jne    0x37253
  00e82:    	mov    rax,QWORD PTR [rbx]
  00e85:    	lea    rdi,[rsp-0x18]
  00e8a:    	mov    QWORD PTR [rdi],rax
  00e8d:    	mov    QWORD PTR [rbx],rdi
  00e90: 00 	mov    QWORD PTR [rsp-0x20],0x0
  00e99:    	mov    QWORD PTR [rsp-0x38],rcx
  00e9e:    	mov    rax,QWORD PTR [rbp-0x40]
  00ea2:    	mov    QWORD PTR [rsp-0x38],rax
  00ea7: 00 	mov    rdi,0x1
  00eae:    	mov    rax,QWORD PTR [rbp-0x48]
  00eb2:    	mov    QWORD PTR [rsp-0x40],rax
  00eb7: 00 	mov    QWORD PTR [rsp-0x30],0x0
  00ec0: 00 	movabs rax,0x0
  00eca:    	mov    QWORD PTR [rsp-0x28],rax
  00ecf: 00 	movabs r13,0x0
  00ed9:    	call   0xfffef8c8
  00ede:    	lea    rdi,[rbp-0x8]
  00ee2:    	mov    QWORD PTR [rbx],rdi
  00ee5:    	movq   xmm2,QWORD PTR [rsp]
  00eea:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00ef0:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00ef6:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00efc:    	movq   xmm6,QWORD PTR [rsp+0x20]
  00f02:    	add    rsp,0x30
  00f06:    	test   rax,rax
  00f09:    	je     0x372bf
:00080 br =>:00087
  00f0f:    	jmp    0x373c4
:00081 %3 = 1: i32
  00f14: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00082 %3 = %1.[%3]
  00f1c:    	sub    rsp,0x20
  00f20:    	movq   QWORD PTR [rsp],xmm2
  00f25:    	movq   QWORD PTR [rsp+0x8],xmm3
  00f2b:    	movq   QWORD PTR [rsp+0x10],xmm4
  00f31:    	movq   QWORD PTR [rsp+0x18],xmm5
  00f37:    	mov    rdx,QWORD PTR [rbp-0x30]
  00f3b:    	mov    rcx,QWORD PTR [rbp-0x40]
  00f3f:    	mov    rdi,rbx
  00f42:    	mov    rsi,r12
  00f45: 76 	movabs rax,0x5576cccd60e0
  00f4f:    	call   rax
  00f51:    	movq   xmm2,QWORD PTR [rsp]
  00f56:    	movq   xmm3,QWORD PTR [rsp+0x8]
  00f5c:    	movq   xmm4,QWORD PTR [rsp+0x10]
  00f62:    	movq   xmm5,QWORD PTR [rsp+0x18]
  00f68:    	add    rsp,0x20
  00f6c: 76 	movabs r13,0x5576cd6b0d50
  00f76:    	test   rax,rax
  00f79:    	je     0xfffef903
  00f7f:    	mov    QWORD PTR [rbp-0x40],rax
:00083 %4 = literal[1.0]
  00f83: 00 	movq   xmm6,QWORD PTR [rip+0xf2d]        # 0x1eb8
:00084 _ = %3.call x=(%4; 1)                [<INVALID>]
:00085 
  00f8b:    	movq   xmm0,xmm6
  00f8f:    	call   0xfffefa2f
  00f94:    	mov    QWORD PTR [rbp-0x48],rax
  00f98:    	sub    rsp,0x30
  00f9c:    	movq   QWORD PTR [rsp],xmm2
  00fa1:    	movq   QWORD PTR [rsp+0x8],xmm3
  00fa7:    	movq   QWORD PTR [rsp+0x10],xmm4
  00fad:    	movq   QWORD PTR [rsp+0x18],xmm5
  00fb3:    	movq   QWORD PTR [rsp+0x20],xmm6
  00fb9:    	mov    rdi,QWORD PTR [rbp-0x40]
  00fbd: 76 	movabs rax,0x5576ccd01d00
  00fc7:    	call   rax
  00fc9:    	mov    r15d,eax
  00fcc: 00 	cmp    r15d,DWORD PTR [rip+0xef1]        # 0x1ec4
  00fd3:    	jne    0x372ce
  00fd9:    	mov    eax,DWORD PTR [rip+0xffffffffffff1301]        # 0xffff22e0
  00fdf:    	cmp    DWORD PTR [rip+0xedb],eax        # 0x1ec0
  00fe5:    	jne    0x372ce
  00feb:    	mov    rax,QWORD PTR [rbx]
  00fee:    	lea    rdi,[rsp-0x18]
  00ff3:    	mov    QWORD PTR [rdi],rax
  00ff6:    	mov    QWORD PTR [rbx],rdi
  00ff9: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01002:    	mov    QWORD PTR [rsp-0x38],rcx
  01007:    	mov    rax,QWORD PTR [rbp-0x40]
  0100b:    	mov    QWORD PTR [rsp-0x38],rax
  01010: 00 	mov    rdi,0x1
  01017:    	mov    rax,QWORD PTR [rbp-0x48]
  0101b:    	mov    QWORD PTR [rsp-0x40],rax
  01020: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01029: 00 	movabs rax,0x0
  01033:    	mov    QWORD PTR [rsp-0x28],rax
  01038: 00 	movabs r13,0x0
  01042:    	call   0xfffef8c8
  01047:    	lea    rdi,[rbp-0x8]
  0104b:    	mov    QWORD PTR [rbx],rdi
  0104e:    	movq   xmm2,QWORD PTR [rsp]
  01053:    	movq   xmm3,QWORD PTR [rsp+0x8]
  01059:    	movq   xmm4,QWORD PTR [rsp+0x10]
  0105f:    	movq   xmm5,QWORD PTR [rsp+0x18]
  01065:    	movq   xmm6,QWORD PTR [rsp+0x20]
  0106b:    	add    rsp,0x30
  0106f:    	test   rax,rax
  01072:    	je     0x3733a
:00087 %3 = 0: i32
  01078: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  01080: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  01088:    	sub    rsp,0x20
  0108c:    	movq   QWORD PTR [rsp],xmm2
  01091:    	movq   QWORD PTR [rsp+0x8],xmm3
  01097:    	movq   QWORD PTR [rsp+0x10],xmm4
  0109d:    	movq   QWORD PTR [rsp+0x18],xmm6
  010a3:    	mov    rdx,QWORD PTR [rbp-0x30]
  010a7:    	mov    rcx,QWORD PTR [rbp-0x50]
  010ab:    	mov    rdi,rbx
  010ae:    	mov    rsi,r12
  010b1: 76 	movabs rax,0x5576cccd60e0
  010bb:    	call   rax
  010bd:    	movq   xmm2,QWORD PTR [rsp]
  010c2:    	movq   xmm3,QWORD PTR [rsp+0x8]
  010c8:    	movq   xmm4,QWORD PTR [rsp+0x10]
  010ce:    	movq   xmm6,QWORD PTR [rsp+0x18]
  010d4:    	add    rsp,0x20
  010d8: 76 	movabs r13,0x5576cd6b0dc0
  010e2:    	test   rax,rax
  010e5:    	je     0xfffef903
  010eb:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  010ef: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  010f7:    	sub    rsp,0x20
  010fb:    	movq   QWORD PTR [rsp],xmm3
  01100:    	movq   QWORD PTR [rsp+0x8],xmm4
  01106:    	movq   QWORD PTR [rsp+0x10],xmm6
  0110c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01110:    	mov    rcx,QWORD PTR [rbp-0x58]
  01114:    	mov    rdi,rbx
  01117:    	mov    rsi,r12
  0111a: 76 	movabs rax,0x5576cccd60e0
  01124:    	call   rax
  01126:    	movq   xmm3,QWORD PTR [rsp]
  0112b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01131:    	movq   xmm6,QWORD PTR [rsp+0x10]
  01137:    	add    rsp,0x20
  0113b: 76 	movabs r13,0x5576cd6b0de0
  01145:    	test   rax,rax
  01148:    	je     0xfffef903
  0114e:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  01152:    	mov    rdi,QWORD PTR [rbp-0x50]
  01156: 00 	test   rdi,0x7
  0115d:    	jne    0x37349
  01163:    	cmp    DWORD PTR [rdi+0x4],0x25
  01167:    	jne    0x37349
  0116d: 26 	cmp    DWORD PTR [rip+0xffffffffffff116c],0x26        # 0xffff22e0
  01174:    	jne    0x37349
  0117a:    	sub    rsp,0x10
  0117e:    	movq   QWORD PTR [rsp],xmm3
  01183:    	movq   QWORD PTR [rsp+0x8],xmm4
  01189:    	mov    rax,QWORD PTR [rbx]
  0118c:    	lea    rdi,[rsp-0x18]
  01191:    	mov    QWORD PTR [rdi],rax
  01194:    	mov    QWORD PTR [rbx],rdi
  01197: 00 	mov    QWORD PTR [rsp-0x20],0x0
  011a0:    	mov    QWORD PTR [rsp-0x38],rcx
  011a5:    	mov    rax,QWORD PTR [rbp-0x50]
  011a9:    	mov    QWORD PTR [rsp-0x38],rax
  011ae: 00 	mov    rdi,0x1
  011b5:    	mov    rax,QWORD PTR [rbp-0x58]
  011b9:    	mov    QWORD PTR [rsp-0x40],rax
  011be: 00 	mov    QWORD PTR [rsp-0x30],0x0
  011c7: 09 	movabs rax,0x90000003a
  011d1:    	mov    QWORD PTR [rsp-0x28],rax
  011d6: 76 	movabs r13,0x5576cd695450
  011e0:    	call   0xffffb520
  011e5:    	lea    rdi,[rbp-0x8]
  011e9:    	mov    QWORD PTR [rbx],rdi
  011ec:    	movq   xmm3,QWORD PTR [rsp]
  011f1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  011f7:    	add    rsp,0x10
  011fb: 76 	movabs r13,0x5576cd6b0e00
  01205:    	test   rax,rax
  01208:    	je     0xfffef903
  0120e:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  01212:    	sub    rsp,0x10
  01216:    	movq   QWORD PTR [rsp],xmm3
  0121b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01221:    	mov    rdx,QWORD PTR [rbp-0x30]
  01225:    	mov    rcx,QWORD PTR [rbp-0x40]
  01229:    	mov    r8,QWORD PTR [rbp-0x48]
  0122d:    	mov    rdi,rbx
  01230:    	mov    rsi,r12
  01233: 76 	movabs rax,0x5576cccd6210
  0123d:    	call   rax
  0123f:    	movq   xmm3,QWORD PTR [rsp]
  01244:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0124a:    	add    rsp,0x10
  0124e: 76 	movabs r13,0x5576cd6b0e20
  01258:    	test   rax,rax
  0125b:    	je     0xfffef903
:00096 %3 = 0: i32
  01261: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  01269: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  01271:    	sub    rsp,0x10
  01275:    	movq   QWORD PTR [rsp],xmm3
  0127a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01280:    	mov    rdx,QWORD PTR [rbp-0x30]
  01284:    	mov    rcx,QWORD PTR [rbp-0x50]
  01288:    	mov    rdi,rbx
  0128b:    	mov    rsi,r12
  0128e: 76 	movabs rax,0x5576cccd60e0
  01298:    	call   rax
  0129a:    	movq   xmm3,QWORD PTR [rsp]
  0129f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  012a5:    	add    rsp,0x10
  012a9: 76 	movabs r13,0x5576cd6b0e50
  012b3:    	test   rax,rax
  012b6:    	je     0xfffef903
  012bc:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  012c0:    	mov    rdi,QWORD PTR [rbp-0x50]
  012c4: 00 	test   rdi,0x7
  012cb:    	jne    0x37358
  012d1:    	cmp    DWORD PTR [rdi+0x4],0x25
  012d5:    	jne    0x37358
  012db: 26 	cmp    DWORD PTR [rip+0xffffffffffff0ffe],0x26        # 0xffff22e0
  012e2:    	jne    0x37358
  012e8:    	sub    rsp,0x10
  012ec:    	movq   QWORD PTR [rsp],xmm3
  012f1:    	movq   QWORD PTR [rsp+0x8],xmm4
  012f7:    	mov    rax,QWORD PTR [rbx]
  012fa:    	lea    rdi,[rsp-0x18]
  012ff:    	mov    QWORD PTR [rdi],rax
  01302:    	mov    QWORD PTR [rbx],rdi
  01305: 00 	mov    QWORD PTR [rsp-0x20],0x0
  0130e:    	mov    QWORD PTR [rsp-0x38],rcx
  01313:    	mov    rax,QWORD PTR [rbp-0x50]
  01317:    	mov    QWORD PTR [rsp-0x38],rax
  0131c: 00 	mov    rdi,0x0
  01323: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0132c: 07 	movabs rax,0x100070000003d
  01336:    	mov    QWORD PTR [rsp-0x28],rax
  0133b: 76 	movabs r13,0x5576cd6a7f70
  01345:    	call   0xffff2bb3
  0134a:    	lea    rdi,[rbp-0x8]
  0134e:    	mov    QWORD PTR [rbx],rdi
  01351:    	movq   xmm3,QWORD PTR [rsp]
  01356:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0135c:    	add    rsp,0x10
  01360: 76 	movabs r13,0x5576cd6b0e70
  0136a:    	test   rax,rax
  0136d:    	je     0xfffef903
  01373:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  01377:    	sub    rsp,0x10
  0137b:    	movq   QWORD PTR [rsp],xmm3
  01380:    	movq   QWORD PTR [rsp+0x8],xmm4
  01386:    	mov    rdx,QWORD PTR [rbp-0x30]
  0138a:    	mov    rcx,QWORD PTR [rbp-0x40]
  0138e:    	mov    r8,QWORD PTR [rbp-0x48]
  01392:    	mov    rdi,rbx
  01395:    	mov    rsi,r12
  01398: 76 	movabs rax,0x5576cccd6210
  013a2:    	call   rax
  013a4:    	movq   xmm3,QWORD PTR [rsp]
  013a9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  013af:    	add    rsp,0x10
  013b3: 76 	movabs r13,0x5576cd6b0e90
  013bd:    	test   rax,rax
  013c0:    	je     0xfffef903
:00103 %3 = 1: i32
  013c6: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  013ce: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  013d6:    	sub    rsp,0x10
  013da:    	movq   QWORD PTR [rsp],xmm3
  013df:    	movq   QWORD PTR [rsp+0x8],xmm4
  013e5:    	mov    rdx,QWORD PTR [rbp-0x30]
  013e9:    	mov    rcx,QWORD PTR [rbp-0x50]
  013ed:    	mov    rdi,rbx
  013f0:    	mov    rsi,r12
  013f3: 76 	movabs rax,0x5576cccd60e0
  013fd:    	call   rax
  013ff:    	movq   xmm3,QWORD PTR [rsp]
  01404:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0140a:    	add    rsp,0x10
  0140e: 76 	movabs r13,0x5576cd6b0ec0
  01418:    	test   rax,rax
  0141b:    	je     0xfffef903
  01421:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  01425: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  0142d:    	sub    rsp,0x10
  01431:    	movq   QWORD PTR [rsp],xmm3
  01436:    	movq   QWORD PTR [rsp+0x8],xmm4
  0143c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01440:    	mov    rcx,QWORD PTR [rbp-0x58]
  01444:    	mov    rdi,rbx
  01447:    	mov    rsi,r12
  0144a: 76 	movabs rax,0x5576cccd60e0
  01454:    	call   rax
  01456:    	movq   xmm3,QWORD PTR [rsp]
  0145b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01461:    	add    rsp,0x10
  01465: 76 	movabs r13,0x5576cd6b0ee0
  0146f:    	test   rax,rax
  01472:    	je     0xfffef903
  01478:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  0147c:    	mov    rdi,QWORD PTR [rbp-0x50]
  01480: 00 	test   rdi,0x7
  01487:    	jne    0x37367
  0148d:    	cmp    DWORD PTR [rdi+0x4],0x25
  01491:    	jne    0x37367
  01497: 26 	cmp    DWORD PTR [rip+0xffffffffffff0e42],0x26        # 0xffff22e0
  0149e:    	jne    0x37367
  014a4:    	sub    rsp,0x10
  014a8:    	movq   QWORD PTR [rsp],xmm3
  014ad:    	movq   QWORD PTR [rsp+0x8],xmm4
  014b3:    	mov    rax,QWORD PTR [rbx]
  014b6:    	lea    rdi,[rsp-0x18]
  014bb:    	mov    QWORD PTR [rdi],rax
  014be:    	mov    QWORD PTR [rbx],rdi
  014c1: 00 	mov    QWORD PTR [rsp-0x20],0x0
  014ca:    	mov    QWORD PTR [rsp-0x38],rcx
  014cf:    	mov    rax,QWORD PTR [rbp-0x50]
  014d3:    	mov    QWORD PTR [rsp-0x38],rax
  014d8: 00 	mov    rdi,0x1
  014df:    	mov    rax,QWORD PTR [rbp-0x58]
  014e3:    	mov    QWORD PTR [rsp-0x40],rax
  014e8: 00 	mov    QWORD PTR [rsp-0x30],0x0
  014f1: 09 	movabs rax,0x90000003a
  014fb:    	mov    QWORD PTR [rsp-0x28],rax
  01500: 76 	movabs r13,0x5576cd695450
  0150a:    	call   0xffffb520
  0150f:    	lea    rdi,[rbp-0x8]
  01513:    	mov    QWORD PTR [rbx],rdi
  01516:    	movq   xmm3,QWORD PTR [rsp]
  0151b:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01521:    	add    rsp,0x10
  01525: 76 	movabs r13,0x5576cd6b0f00
  0152f:    	test   rax,rax
  01532:    	je     0xfffef903
  01538:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  0153c:    	sub    rsp,0x10
  01540:    	movq   QWORD PTR [rsp],xmm3
  01545:    	movq   QWORD PTR [rsp+0x8],xmm4
  0154b:    	mov    rdx,QWORD PTR [rbp-0x30]
  0154f:    	mov    rcx,QWORD PTR [rbp-0x40]
  01553:    	mov    r8,QWORD PTR [rbp-0x48]
  01557:    	mov    rdi,rbx
  0155a:    	mov    rsi,r12
  0155d: 76 	movabs rax,0x5576cccd6210
  01567:    	call   rax
  01569:    	movq   xmm3,QWORD PTR [rsp]
  0156e:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01574:    	add    rsp,0x10
  01578: 76 	movabs r13,0x5576cd6b0f20
  01582:    	test   rax,rax
  01585:    	je     0xfffef903
:00112 %3 = 1: i32
  0158b: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  01593: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  0159b:    	sub    rsp,0x10
  0159f:    	movq   QWORD PTR [rsp],xmm3
  015a4:    	movq   QWORD PTR [rsp+0x8],xmm4
  015aa:    	mov    rdx,QWORD PTR [rbp-0x30]
  015ae:    	mov    rcx,QWORD PTR [rbp-0x50]
  015b2:    	mov    rdi,rbx
  015b5:    	mov    rsi,r12
  015b8: 76 	movabs rax,0x5576cccd60e0
  015c2:    	call   rax
  015c4:    	movq   xmm3,QWORD PTR [rsp]
  015c9:    	movq   xmm4,QWORD PTR [rsp+0x8]
  015cf:    	add    rsp,0x10
  015d3: 76 	movabs r13,0x5576cd6b0f50
  015dd:    	test   rax,rax
  015e0:    	je     0xfffef903
  015e6:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  015ea:    	mov    rdi,QWORD PTR [rbp-0x50]
  015ee: 00 	test   rdi,0x7
  015f5:    	jne    0x37376
  015fb:    	cmp    DWORD PTR [rdi+0x4],0x25
  015ff:    	jne    0x37376
  01605: 26 	cmp    DWORD PTR [rip+0xffffffffffff0cd4],0x26        # 0xffff22e0
  0160c:    	jne    0x37376
  01612:    	sub    rsp,0x10
  01616:    	movq   QWORD PTR [rsp],xmm3
  0161b:    	movq   QWORD PTR [rsp+0x8],xmm4
  01621:    	mov    rax,QWORD PTR [rbx]
  01624:    	lea    rdi,[rsp-0x18]
  01629:    	mov    QWORD PTR [rdi],rax
  0162c:    	mov    QWORD PTR [rbx],rdi
  0162f: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01638:    	mov    QWORD PTR [rsp-0x38],rcx
  0163d:    	mov    rax,QWORD PTR [rbp-0x50]
  01641:    	mov    QWORD PTR [rsp-0x38],rax
  01646: 00 	mov    rdi,0x0
  0164d: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01656: 07 	movabs rax,0x100070000003d
  01660:    	mov    QWORD PTR [rsp-0x28],rax
  01665: 76 	movabs r13,0x5576cd6a7f70
  0166f:    	call   0xffff2bb3
  01674:    	lea    rdi,[rbp-0x8]
  01678:    	mov    QWORD PTR [rbx],rdi
  0167b:    	movq   xmm3,QWORD PTR [rsp]
  01680:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01686:    	add    rsp,0x10
  0168a: 76 	movabs r13,0x5576cd6b0f70
  01694:    	test   rax,rax
  01697:    	je     0xfffef903
  0169d:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  016a1:    	sub    rsp,0x10
  016a5:    	movq   QWORD PTR [rsp],xmm3
  016aa:    	movq   QWORD PTR [rsp+0x8],xmm4
  016b0:    	mov    rdx,QWORD PTR [rbp-0x30]
  016b4:    	mov    rcx,QWORD PTR [rbp-0x40]
  016b8:    	mov    r8,QWORD PTR [rbp-0x48]
  016bc:    	mov    rdi,rbx
  016bf:    	mov    rsi,r12
  016c2: 76 	movabs rax,0x5576cccd6210
  016cc:    	call   rax
  016ce:    	movq   xmm3,QWORD PTR [rsp]
  016d3:    	movq   xmm4,QWORD PTR [rsp+0x8]
  016d9:    	add    rsp,0x10
  016dd: 76 	movabs r13,0x5576cd6b0f90
  016e7:    	test   rax,rax
  016ea:    	je     0xfffef903
:00119 %3 = %4
  016f0:    	mov    rax,QWORD PTR [rbp-0x48]
  016f4:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  016f8:    	mov    rax,QWORD PTR [rbp-0x40]
  016fc:    	leave  
  016fd:    	ret    
:00087 %3 = 0: i32
  016fe: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00088 %5 = 1: i32
  01706: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00089 %5 = %1.[%5]
  0170e:    	sub    rsp,0x20
  01712:    	movq   QWORD PTR [rsp],xmm2
  01717:    	movq   QWORD PTR [rsp+0x8],xmm3
  0171d:    	movq   QWORD PTR [rsp+0x10],xmm4
  01723:    	movq   QWORD PTR [rsp+0x18],xmm6
  01729:    	mov    rdx,QWORD PTR [rbp-0x30]
  0172d:    	mov    rcx,QWORD PTR [rbp-0x50]
  01731:    	mov    rdi,rbx
  01734:    	mov    rsi,r12
  01737: 76 	movabs rax,0x5576cccd60e0
  01741:    	call   rax
  01743:    	movq   xmm2,QWORD PTR [rsp]
  01748:    	movq   xmm3,QWORD PTR [rsp+0x8]
  0174e:    	movq   xmm4,QWORD PTR [rsp+0x10]
  01754:    	movq   xmm6,QWORD PTR [rsp+0x18]
  0175a:    	add    rsp,0x20
  0175e: 76 	movabs r13,0x5576cd6b0dc0
  01768:    	test   rax,rax
  0176b:    	je     0xfffef903
  01771:    	mov    QWORD PTR [rbp-0x50],rax
:00090 %6 = 2: i32
  01775: 00 	mov    QWORD PTR [rbp-0x58],0x5
:00091 %6 = %1.[%6]
  0177d:    	sub    rsp,0x20
  01781:    	movq   QWORD PTR [rsp],xmm3
  01786:    	movq   QWORD PTR [rsp+0x8],xmm4
  0178c:    	movq   QWORD PTR [rsp+0x10],xmm6
  01792:    	mov    rdx,QWORD PTR [rbp-0x30]
  01796:    	mov    rcx,QWORD PTR [rbp-0x58]
  0179a:    	mov    rdi,rbx
  0179d:    	mov    rsi,r12
  017a0: 76 	movabs rax,0x5576cccd60e0
  017aa:    	call   rax
  017ac:    	movq   xmm3,QWORD PTR [rsp]
  017b1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  017b7:    	movq   xmm6,QWORD PTR [rsp+0x10]
  017bd:    	add    rsp,0x20
  017c1: 76 	movabs r13,0x5576cd6b0de0
  017cb:    	test   rax,rax
  017ce:    	je     0xfffef903
  017d4:    	mov    QWORD PTR [rbp-0x58],rax
:00092 %4 = %5.call vcross(%6; 1)           [Vec]
:00093 
  017d8:    	mov    rdi,QWORD PTR [rbp-0x50]
  017dc: 00 	test   rdi,0x7
  017e3:    	jne    0x373dd
  017e9:    	cmp    DWORD PTR [rdi+0x4],0x25
  017ed:    	jne    0x373dd
  017f3: 26 	cmp    DWORD PTR [rip+0xffffffffffff0ae6],0x26        # 0xffff22e0
  017fa:    	jne    0x373dd
  01800:    	sub    rsp,0x10
  01804:    	movq   QWORD PTR [rsp],xmm3
  01809:    	movq   QWORD PTR [rsp+0x8],xmm4
  0180f:    	mov    rax,QWORD PTR [rbx]
  01812:    	lea    rdi,[rsp-0x18]
  01817:    	mov    QWORD PTR [rdi],rax
  0181a:    	mov    QWORD PTR [rbx],rdi
  0181d: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01826:    	mov    QWORD PTR [rsp-0x38],rcx
  0182b:    	mov    rax,QWORD PTR [rbp-0x50]
  0182f:    	mov    QWORD PTR [rsp-0x38],rax
  01834: 00 	mov    rdi,0x1
  0183b:    	mov    rax,QWORD PTR [rbp-0x58]
  0183f:    	mov    QWORD PTR [rsp-0x40],rax
  01844: 00 	mov    QWORD PTR [rsp-0x30],0x0
  0184d: 09 	movabs rax,0x90000003a
  01857:    	mov    QWORD PTR [rsp-0x28],rax
  0185c: 76 	movabs r13,0x5576cd695450
  01866:    	call   0xffffb520
  0186b:    	lea    rdi,[rbp-0x8]
  0186f:    	mov    QWORD PTR [rbx],rdi
  01872:    	movq   xmm3,QWORD PTR [rsp]
  01877:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0187d:    	add    rsp,0x10
  01881: 76 	movabs r13,0x5576cd6b0e00
  0188b:    	test   rax,rax
  0188e:    	je     0xfffef903
  01894:    	mov    QWORD PTR [rbp-0x48],rax
:00095 %1.[%3] = %4
  01898:    	sub    rsp,0x10
  0189c:    	movq   QWORD PTR [rsp],xmm3
  018a1:    	movq   QWORD PTR [rsp+0x8],xmm4
  018a7:    	mov    rdx,QWORD PTR [rbp-0x30]
  018ab:    	mov    rcx,QWORD PTR [rbp-0x40]
  018af:    	mov    r8,QWORD PTR [rbp-0x48]
  018b3:    	mov    rdi,rbx
  018b6:    	mov    rsi,r12
  018b9: 76 	movabs rax,0x5576cccd6210
  018c3:    	call   rax
  018c5:    	movq   xmm3,QWORD PTR [rsp]
  018ca:    	movq   xmm4,QWORD PTR [rsp+0x8]
  018d0:    	add    rsp,0x10
  018d4: 76 	movabs r13,0x5576cd6b0e20
  018de:    	test   rax,rax
  018e1:    	je     0xfffef903
:00096 %3 = 0: i32
  018e7: 00 	mov    QWORD PTR [rbp-0x40],0x1
:00097 %5 = 0: i32
  018ef: 00 	mov    QWORD PTR [rbp-0x50],0x1
:00098 %5 = %1.[%5]
  018f7:    	sub    rsp,0x10
  018fb:    	movq   QWORD PTR [rsp],xmm3
  01900:    	movq   QWORD PTR [rsp+0x8],xmm4
  01906:    	mov    rdx,QWORD PTR [rbp-0x30]
  0190a:    	mov    rcx,QWORD PTR [rbp-0x50]
  0190e:    	mov    rdi,rbx
  01911:    	mov    rsi,r12
  01914: 76 	movabs rax,0x5576cccd60e0
  0191e:    	call   rax
  01920:    	movq   xmm3,QWORD PTR [rsp]
  01925:    	movq   xmm4,QWORD PTR [rsp+0x8]
  0192b:    	add    rsp,0x10
  0192f: 76 	movabs r13,0x5576cd6b0e50
  01939:    	test   rax,rax
  0193c:    	je     0xfffef903
  01942:    	mov    QWORD PTR [rbp-0x50],rax
:00099 %4 = %5.call vnormalize()            [Vec]
:00100 
  01946:    	mov    rdi,QWORD PTR [rbp-0x50]
  0194a: 00 	test   rdi,0x7
  01951:    	jne    0x373ec
  01957:    	cmp    DWORD PTR [rdi+0x4],0x25
  0195b:    	jne    0x373ec
  01961: 26 	cmp    DWORD PTR [rip+0xffffffffffff0978],0x26        # 0xffff22e0
  01968:    	jne    0x373ec
  0196e:    	sub    rsp,0x10
  01972:    	movq   QWORD PTR [rsp],xmm3
  01977:    	movq   QWORD PTR [rsp+0x8],xmm4
  0197d:    	mov    rax,QWORD PTR [rbx]
  01980:    	lea    rdi,[rsp-0x18]
  01985:    	mov    QWORD PTR [rdi],rax
  01988:    	mov    QWORD PTR [rbx],rdi
  0198b: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01994:    	mov    QWORD PTR [rsp-0x38],rcx
  01999:    	mov    rax,QWORD PTR [rbp-0x50]
  0199d:    	mov    QWORD PTR [rsp-0x38],rax
  019a2: 00 	mov    rdi,0x0
  019a9: 00 	mov    QWORD PTR [rsp-0x30],0x0
  019b2: 07 	movabs rax,0x100070000003d
  019bc:    	mov    QWORD PTR [rsp-0x28],rax
  019c1: 76 	movabs r13,0x5576cd6a7f70
  019cb:    	call   0xffff2bb3
  019d0:    	lea    rdi,[rbp-0x8]
  019d4:    	mov    QWORD PTR [rbx],rdi
  019d7:    	movq   xmm3,QWORD PTR [rsp]
  019dc:    	movq   xmm4,QWORD PTR [rsp+0x8]
  019e2:    	add    rsp,0x10
  019e6: 76 	movabs r13,0x5576cd6b0e70
  019f0:    	test   rax,rax
  019f3:    	je     0xfffef903
  019f9:    	mov    QWORD PTR [rbp-0x48],rax
:00102 %1.[%3] = %4
  019fd:    	sub    rsp,0x10
  01a01:    	movq   QWORD PTR [rsp],xmm3
  01a06:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a0c:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a10:    	mov    rcx,QWORD PTR [rbp-0x40]
  01a14:    	mov    r8,QWORD PTR [rbp-0x48]
  01a18:    	mov    rdi,rbx
  01a1b:    	mov    rsi,r12
  01a1e: 76 	movabs rax,0x5576cccd6210
  01a28:    	call   rax
  01a2a:    	movq   xmm3,QWORD PTR [rsp]
  01a2f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a35:    	add    rsp,0x10
  01a39: 76 	movabs r13,0x5576cd6b0e90
  01a43:    	test   rax,rax
  01a46:    	je     0xfffef903
:00103 %3 = 1: i32
  01a4c: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00104 %5 = 2: i32
  01a54: 00 	mov    QWORD PTR [rbp-0x50],0x5
:00105 %5 = %1.[%5]
  01a5c:    	sub    rsp,0x10
  01a60:    	movq   QWORD PTR [rsp],xmm3
  01a65:    	movq   QWORD PTR [rsp+0x8],xmm4
  01a6b:    	mov    rdx,QWORD PTR [rbp-0x30]
  01a6f:    	mov    rcx,QWORD PTR [rbp-0x50]
  01a73:    	mov    rdi,rbx
  01a76:    	mov    rsi,r12
  01a79: 76 	movabs rax,0x5576cccd60e0
  01a83:    	call   rax
  01a85:    	movq   xmm3,QWORD PTR [rsp]
  01a8a:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01a90:    	add    rsp,0x10
  01a94: 76 	movabs r13,0x5576cd6b0ec0
  01a9e:    	test   rax,rax
  01aa1:    	je     0xfffef903
  01aa7:    	mov    QWORD PTR [rbp-0x50],rax
:00106 %6 = 0: i32
  01aab: 00 	mov    QWORD PTR [rbp-0x58],0x1
:00107 %6 = %1.[%6]
  01ab3:    	sub    rsp,0x10
  01ab7:    	movq   QWORD PTR [rsp],xmm3
  01abc:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ac2:    	mov    rdx,QWORD PTR [rbp-0x30]
  01ac6:    	mov    rcx,QWORD PTR [rbp-0x58]
  01aca:    	mov    rdi,rbx
  01acd:    	mov    rsi,r12
  01ad0: 76 	movabs rax,0x5576cccd60e0
  01ada:    	call   rax
  01adc:    	movq   xmm3,QWORD PTR [rsp]
  01ae1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ae7:    	add    rsp,0x10
  01aeb: 76 	movabs r13,0x5576cd6b0ee0
  01af5:    	test   rax,rax
  01af8:    	je     0xfffef903
  01afe:    	mov    QWORD PTR [rbp-0x58],rax
:00108 %4 = %5.call vcross(%6; 1)           [Vec]
:00109 
  01b02:    	mov    rdi,QWORD PTR [rbp-0x50]
  01b06: 00 	test   rdi,0x7
  01b0d:    	jne    0x373fb
  01b13:    	cmp    DWORD PTR [rdi+0x4],0x25
  01b17:    	jne    0x373fb
  01b1d: 26 	cmp    DWORD PTR [rip+0xffffffffffff07bc],0x26        # 0xffff22e0
  01b24:    	jne    0x373fb
  01b2a:    	sub    rsp,0x10
  01b2e:    	movq   QWORD PTR [rsp],xmm3
  01b33:    	movq   QWORD PTR [rsp+0x8],xmm4
  01b39:    	mov    rax,QWORD PTR [rbx]
  01b3c:    	lea    rdi,[rsp-0x18]
  01b41:    	mov    QWORD PTR [rdi],rax
  01b44:    	mov    QWORD PTR [rbx],rdi
  01b47: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01b50:    	mov    QWORD PTR [rsp-0x38],rcx
  01b55:    	mov    rax,QWORD PTR [rbp-0x50]
  01b59:    	mov    QWORD PTR [rsp-0x38],rax
  01b5e: 00 	mov    rdi,0x1
  01b65:    	mov    rax,QWORD PTR [rbp-0x58]
  01b69:    	mov    QWORD PTR [rsp-0x40],rax
  01b6e: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01b77: 09 	movabs rax,0x90000003a
  01b81:    	mov    QWORD PTR [rsp-0x28],rax
  01b86: 76 	movabs r13,0x5576cd695450
  01b90:    	call   0xffffb520
  01b95:    	lea    rdi,[rbp-0x8]
  01b99:    	mov    QWORD PTR [rbx],rdi
  01b9c:    	movq   xmm3,QWORD PTR [rsp]
  01ba1:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01ba7:    	add    rsp,0x10
  01bab: 76 	movabs r13,0x5576cd6b0f00
  01bb5:    	test   rax,rax
  01bb8:    	je     0xfffef903
  01bbe:    	mov    QWORD PTR [rbp-0x48],rax
:00111 %1.[%3] = %4
  01bc2:    	sub    rsp,0x10
  01bc6:    	movq   QWORD PTR [rsp],xmm3
  01bcb:    	movq   QWORD PTR [rsp+0x8],xmm4
  01bd1:    	mov    rdx,QWORD PTR [rbp-0x30]
  01bd5:    	mov    rcx,QWORD PTR [rbp-0x40]
  01bd9:    	mov    r8,QWORD PTR [rbp-0x48]
  01bdd:    	mov    rdi,rbx
  01be0:    	mov    rsi,r12
  01be3: 76 	movabs rax,0x5576cccd6210
  01bed:    	call   rax
  01bef:    	movq   xmm3,QWORD PTR [rsp]
  01bf4:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01bfa:    	add    rsp,0x10
  01bfe: 76 	movabs r13,0x5576cd6b0f20
  01c08:    	test   rax,rax
  01c0b:    	je     0xfffef903
:00112 %3 = 1: i32
  01c11: 00 	mov    QWORD PTR [rbp-0x40],0x3
:00113 %5 = 1: i32
  01c19: 00 	mov    QWORD PTR [rbp-0x50],0x3
:00114 %5 = %1.[%5]
  01c21:    	sub    rsp,0x10
  01c25:    	movq   QWORD PTR [rsp],xmm3
  01c2a:    	movq   QWORD PTR [rsp+0x8],xmm4
  01c30:    	mov    rdx,QWORD PTR [rbp-0x30]
  01c34:    	mov    rcx,QWORD PTR [rbp-0x50]
  01c38:    	mov    rdi,rbx
  01c3b:    	mov    rsi,r12
  01c3e: 76 	movabs rax,0x5576cccd60e0
  01c48:    	call   rax
  01c4a:    	movq   xmm3,QWORD PTR [rsp]
  01c4f:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01c55:    	add    rsp,0x10
  01c59: 76 	movabs r13,0x5576cd6b0f50
  01c63:    	test   rax,rax
  01c66:    	je     0xfffef903
  01c6c:    	mov    QWORD PTR [rbp-0x50],rax
:00115 %4 = %5.call vnormalize()            [Vec]
:00116 
  01c70:    	mov    rdi,QWORD PTR [rbp-0x50]
  01c74: 00 	test   rdi,0x7
  01c7b:    	jne    0x3740a
  01c81:    	cmp    DWORD PTR [rdi+0x4],0x25
  01c85:    	jne    0x3740a
  01c8b: 26 	cmp    DWORD PTR [rip+0xffffffffffff064e],0x26        # 0xffff22e0
  01c92:    	jne    0x3740a
  01c98:    	sub    rsp,0x10
  01c9c:    	movq   QWORD PTR [rsp],xmm3
  01ca1:    	movq   QWORD PTR [rsp+0x8],xmm4
  01ca7:    	mov    rax,QWORD PTR [rbx]
  01caa:    	lea    rdi,[rsp-0x18]
  01caf:    	mov    QWORD PTR [rdi],rax
  01cb2:    	mov    QWORD PTR [rbx],rdi
  01cb5: 00 	mov    QWORD PTR [rsp-0x20],0x0
  01cbe:    	mov    QWORD PTR [rsp-0x38],rcx
  01cc3:    	mov    rax,QWORD PTR [rbp-0x50]
  01cc7:    	mov    QWORD PTR [rsp-0x38],rax
  01ccc: 00 	mov    rdi,0x0
  01cd3: 00 	mov    QWORD PTR [rsp-0x30],0x0
  01cdc: 07 	movabs rax,0x100070000003d
  01ce6:    	mov    QWORD PTR [rsp-0x28],rax
  01ceb: 76 	movabs r13,0x5576cd6a7f70
  01cf5:    	call   0xffff2bb3
  01cfa:    	lea    rdi,[rbp-0x8]
  01cfe:    	mov    QWORD PTR [rbx],rdi
  01d01:    	movq   xmm3,QWORD PTR [rsp]
  01d06:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d0c:    	add    rsp,0x10
  01d10: 76 	movabs r13,0x5576cd6b0f70
  01d1a:    	test   rax,rax
  01d1d:    	je     0xfffef903
  01d23:    	mov    QWORD PTR [rbp-0x48],rax
:00118 %1.[%3] = %4
  01d27:    	sub    rsp,0x10
  01d2b:    	movq   QWORD PTR [rsp],xmm3
  01d30:    	movq   QWORD PTR [rsp+0x8],xmm4
  01d36:    	mov    rdx,QWORD PTR [rbp-0x30]
  01d3a:    	mov    rcx,QWORD PTR [rbp-0x40]
  01d3e:    	mov    r8,QWORD PTR [rbp-0x48]
  01d42:    	mov    rdi,rbx
  01d45:    	mov    rsi,r12
  01d48: 76 	movabs rax,0x5576cccd6210
  01d52:    	call   rax
  01d54:    	movq   xmm3,QWORD PTR [rsp]
  01d59:    	movq   xmm4,QWORD PTR [rsp+0x8]
  01d5f:    	add    rsp,0x10
  01d63: 76 	movabs r13,0x5576cd6b0f90
  01d6d:    	test   rax,rax
  01d70:    	je     0xfffef903
:00119 %3 = %4
  01d76:    	mov    rax,QWORD PTR [rbp-0x48]
  01d7a:    	mov    QWORD PTR [rbp-0x40],rax
:00120 ret %3
  01d7e:    	mov    rax,QWORD PTR [rbp-0x40]
  01d82:    	leave  
  01d83:    	ret    
=> nil
