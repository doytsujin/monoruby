FuncId(69) name:ambient_occlusion args:["isect"] bc:BcPcBase(0x55a94cd9fde0) meta:kind:VM mode:method FuncId(69) regs:14
+:00000 %8 = literal["ambient\ occlusion\ "]
 :00001 %9 = %1.call inspect()               [<INVALID>]
 :00004 %8 = concat(%8; 2)
 :00005 _ = %0.call puts(%8; 1)              [<INVALID>]
 :00008 %8 = const[Array]                    [<invalid>]
 :00009 %2 = %8.call new()                   [<INVALID>]
 :00012 %8 = %2
 :00013 %9 = %1.call n()                     [<INVALID>]
 :00016 _ = %0.call otherBasis(%8; 2)        [<INVALID>]
 :00019 %3 = const[NAO_SAMPLES]              [<invalid>]
 :00020 %4 = const[NAO_SAMPLES]              [<invalid>]
 :00021 %5 = literal[0.0001]
 :00022 %6 = literal[0.0]
 :00023 %8 = const[Vec]                      [<invalid>]
 :00024 %10 = %1.call pl()                   [<INVALID>]
 :00027 %9 = %10.call x()                    [<INVALID>]
 :00030 %11 = %1.call n()                    [<INVALID>]
 :00033 %10 = %11.call x()                   [<INVALID>]
 :00036 %10 = %5 * %10                       [Integer][Integer]
 :00037 %9 = %9 + %10                        [Integer][Integer]
 :00038 %11 = %1.call pl()                   [<INVALID>]
 :00041 %10 = %11.call y()                   [<INVALID>]
 :00044 %12 = %1.call n()                    [<INVALID>]
 :00047 %11 = %12.call y()                   [<INVALID>]
 :00050 %11 = %5 * %11                       [Integer][Integer]
 :00051 %10 = %10 + %11                      [Integer][Integer]
 :00052 %12 = %1.call pl()                   [<INVALID>]
 :00055 %11 = %12.call z()                   [<INVALID>]
 :00058 %13 = %1.call n()                    [<INVALID>]
 :00061 %12 = %13.call z()                   [<INVALID>]
 :00064 %12 = %5 * %12                       [Integer][Integer]
 :00065 %11 = %11 + %12                      [Integer][Integer]
 :00066 %7 = %8.call new(%9; 3)              [<INVALID>]
 :00069 %8 = literal["p0="]
 :00070 %9 = %7.call inspect()               [<INVALID>]
 :00073 %8 = concat(%8; 2)
 :00074 _ = %0.call puts(%8; 1)              [<INVALID>]
 :00077 %8 = literal["basis="]
 :00078 %9 = %2
 :00079 %8 = concat(%8; 2)
 :00080 _ = %0.call puts(%8; 1)              [<INVALID>]
 :00083 %8 = const[NAO_SAMPLES]              [<invalid>]
 :00084 %9 = literal[71]
 :00085 _ = %8.call times(&%9)               [<INVALID>]
 :00088 %8 = %3.call to_f()                  [<INVALID>]
 :00091 %9 = %4.call to_f()                  [<INVALID>]
 :00094 %8 = %8 * %9                         [Integer][Integer]
 :00095 %8 = %8 - %6                         [Integer][Integer]
 :00096 %9 = %3.call to_f()                  [<INVALID>]
 :00099 %10 = %4.call to_f()                 [<INVALID>]
 :00102 %9 = %9 * %10                        [Integer][Integer]
 :00103 %6 = %8 / %9                         [Integer][Integer]
 :00104 %9 = const[Vec]                      [<invalid>]
 :00105 %10 = %6
 :00106 %11 = %6
 :00107 %12 = %6
 :00108 %8 = %9.call new(%10; 3)             [<INVALID>]
 :00111 ret %8
